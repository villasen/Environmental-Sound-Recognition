
Thesis-Nucleo-411.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000da00  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00014450  0800dba0  0800dba0  0001dba0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08021ff0  08021ff0  00040214  2**0
                  CONTENTS
  4 .ARM          00000008  08021ff0  08021ff0  00031ff0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08021ff8  08021ff8  00040214  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08021ff8  08021ff8  00031ff8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08021ffc  08021ffc  00031ffc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000214  20000000  08022000  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001e30  20000214  08022214  00040214  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20002044  08022214  00042044  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00040214  2**0
                  CONTENTS, READONLY
 12 .debug_info   00265615  00000000  00000000  00040244  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000121f5  00000000  00000000  002a5859  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00006648  00000000  00000000  002b7a50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  00024189  00000000  00000000  002be098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00046703  00000000  00000000  002e2221  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    0016562f  00000000  00000000  00328924  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000053  00000000  00000000  0048df53  2**0
                  CONTENTS, READONLY
 19 .debug_ranges 00006458  00000000  00000000  0048dfa8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0001e450  00000000  00000000  00494400  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000214 	.word	0x20000214
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800db88 	.word	0x0800db88

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000218 	.word	0x20000218
 80001dc:	0800db88 	.word	0x0800db88

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strcmp>:
 8000280:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000284:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000288:	2a01      	cmp	r2, #1
 800028a:	bf28      	it	cs
 800028c:	429a      	cmpcs	r2, r3
 800028e:	d0f7      	beq.n	8000280 <strcmp>
 8000290:	1ad0      	subs	r0, r2, r3
 8000292:	4770      	bx	lr

08000294 <strlen>:
 8000294:	4603      	mov	r3, r0
 8000296:	f813 2b01 	ldrb.w	r2, [r3], #1
 800029a:	2a00      	cmp	r2, #0
 800029c:	d1fb      	bne.n	8000296 <strlen+0x2>
 800029e:	1a18      	subs	r0, r3, r0
 80002a0:	3801      	subs	r0, #1
 80002a2:	4770      	bx	lr

080002a4 <__aeabi_drsub>:
 80002a4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a8:	e002      	b.n	80002b0 <__adddf3>
 80002aa:	bf00      	nop

080002ac <__aeabi_dsub>:
 80002ac:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002b0 <__adddf3>:
 80002b0:	b530      	push	{r4, r5, lr}
 80002b2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002ba:	ea94 0f05 	teq	r4, r5
 80002be:	bf08      	it	eq
 80002c0:	ea90 0f02 	teqeq	r0, r2
 80002c4:	bf1f      	itttt	ne
 80002c6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002ca:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ce:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002d2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d6:	f000 80e2 	beq.w	800049e <__adddf3+0x1ee>
 80002da:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002de:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002e2:	bfb8      	it	lt
 80002e4:	426d      	neglt	r5, r5
 80002e6:	dd0c      	ble.n	8000302 <__adddf3+0x52>
 80002e8:	442c      	add	r4, r5
 80002ea:	ea80 0202 	eor.w	r2, r0, r2
 80002ee:	ea81 0303 	eor.w	r3, r1, r3
 80002f2:	ea82 0000 	eor.w	r0, r2, r0
 80002f6:	ea83 0101 	eor.w	r1, r3, r1
 80002fa:	ea80 0202 	eor.w	r2, r0, r2
 80002fe:	ea81 0303 	eor.w	r3, r1, r3
 8000302:	2d36      	cmp	r5, #54	; 0x36
 8000304:	bf88      	it	hi
 8000306:	bd30      	pophi	{r4, r5, pc}
 8000308:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800030c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000310:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000314:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x70>
 800031a:	4240      	negs	r0, r0
 800031c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000320:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000324:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000328:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800032c:	d002      	beq.n	8000334 <__adddf3+0x84>
 800032e:	4252      	negs	r2, r2
 8000330:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000334:	ea94 0f05 	teq	r4, r5
 8000338:	f000 80a7 	beq.w	800048a <__adddf3+0x1da>
 800033c:	f1a4 0401 	sub.w	r4, r4, #1
 8000340:	f1d5 0e20 	rsbs	lr, r5, #32
 8000344:	db0d      	blt.n	8000362 <__adddf3+0xb2>
 8000346:	fa02 fc0e 	lsl.w	ip, r2, lr
 800034a:	fa22 f205 	lsr.w	r2, r2, r5
 800034e:	1880      	adds	r0, r0, r2
 8000350:	f141 0100 	adc.w	r1, r1, #0
 8000354:	fa03 f20e 	lsl.w	r2, r3, lr
 8000358:	1880      	adds	r0, r0, r2
 800035a:	fa43 f305 	asr.w	r3, r3, r5
 800035e:	4159      	adcs	r1, r3
 8000360:	e00e      	b.n	8000380 <__adddf3+0xd0>
 8000362:	f1a5 0520 	sub.w	r5, r5, #32
 8000366:	f10e 0e20 	add.w	lr, lr, #32
 800036a:	2a01      	cmp	r2, #1
 800036c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000370:	bf28      	it	cs
 8000372:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	18c0      	adds	r0, r0, r3
 800037c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000380:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000384:	d507      	bpl.n	8000396 <__adddf3+0xe6>
 8000386:	f04f 0e00 	mov.w	lr, #0
 800038a:	f1dc 0c00 	rsbs	ip, ip, #0
 800038e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000392:	eb6e 0101 	sbc.w	r1, lr, r1
 8000396:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800039a:	d31b      	bcc.n	80003d4 <__adddf3+0x124>
 800039c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003a0:	d30c      	bcc.n	80003bc <__adddf3+0x10c>
 80003a2:	0849      	lsrs	r1, r1, #1
 80003a4:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003ac:	f104 0401 	add.w	r4, r4, #1
 80003b0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b8:	f080 809a 	bcs.w	80004f0 <__adddf3+0x240>
 80003bc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003c0:	bf08      	it	eq
 80003c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c6:	f150 0000 	adcs.w	r0, r0, #0
 80003ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ce:	ea41 0105 	orr.w	r1, r1, r5
 80003d2:	bd30      	pop	{r4, r5, pc}
 80003d4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d8:	4140      	adcs	r0, r0
 80003da:	eb41 0101 	adc.w	r1, r1, r1
 80003de:	3c01      	subs	r4, #1
 80003e0:	bf28      	it	cs
 80003e2:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e6:	d2e9      	bcs.n	80003bc <__adddf3+0x10c>
 80003e8:	f091 0f00 	teq	r1, #0
 80003ec:	bf04      	itt	eq
 80003ee:	4601      	moveq	r1, r0
 80003f0:	2000      	moveq	r0, #0
 80003f2:	fab1 f381 	clz	r3, r1
 80003f6:	bf08      	it	eq
 80003f8:	3320      	addeq	r3, #32
 80003fa:	f1a3 030b 	sub.w	r3, r3, #11
 80003fe:	f1b3 0220 	subs.w	r2, r3, #32
 8000402:	da0c      	bge.n	800041e <__adddf3+0x16e>
 8000404:	320c      	adds	r2, #12
 8000406:	dd08      	ble.n	800041a <__adddf3+0x16a>
 8000408:	f102 0c14 	add.w	ip, r2, #20
 800040c:	f1c2 020c 	rsb	r2, r2, #12
 8000410:	fa01 f00c 	lsl.w	r0, r1, ip
 8000414:	fa21 f102 	lsr.w	r1, r1, r2
 8000418:	e00c      	b.n	8000434 <__adddf3+0x184>
 800041a:	f102 0214 	add.w	r2, r2, #20
 800041e:	bfd8      	it	le
 8000420:	f1c2 0c20 	rsble	ip, r2, #32
 8000424:	fa01 f102 	lsl.w	r1, r1, r2
 8000428:	fa20 fc0c 	lsr.w	ip, r0, ip
 800042c:	bfdc      	itt	le
 800042e:	ea41 010c 	orrle.w	r1, r1, ip
 8000432:	4090      	lslle	r0, r2
 8000434:	1ae4      	subs	r4, r4, r3
 8000436:	bfa2      	ittt	ge
 8000438:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800043c:	4329      	orrge	r1, r5
 800043e:	bd30      	popge	{r4, r5, pc}
 8000440:	ea6f 0404 	mvn.w	r4, r4
 8000444:	3c1f      	subs	r4, #31
 8000446:	da1c      	bge.n	8000482 <__adddf3+0x1d2>
 8000448:	340c      	adds	r4, #12
 800044a:	dc0e      	bgt.n	800046a <__adddf3+0x1ba>
 800044c:	f104 0414 	add.w	r4, r4, #20
 8000450:	f1c4 0220 	rsb	r2, r4, #32
 8000454:	fa20 f004 	lsr.w	r0, r0, r4
 8000458:	fa01 f302 	lsl.w	r3, r1, r2
 800045c:	ea40 0003 	orr.w	r0, r0, r3
 8000460:	fa21 f304 	lsr.w	r3, r1, r4
 8000464:	ea45 0103 	orr.w	r1, r5, r3
 8000468:	bd30      	pop	{r4, r5, pc}
 800046a:	f1c4 040c 	rsb	r4, r4, #12
 800046e:	f1c4 0220 	rsb	r2, r4, #32
 8000472:	fa20 f002 	lsr.w	r0, r0, r2
 8000476:	fa01 f304 	lsl.w	r3, r1, r4
 800047a:	ea40 0003 	orr.w	r0, r0, r3
 800047e:	4629      	mov	r1, r5
 8000480:	bd30      	pop	{r4, r5, pc}
 8000482:	fa21 f004 	lsr.w	r0, r1, r4
 8000486:	4629      	mov	r1, r5
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	f094 0f00 	teq	r4, #0
 800048e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000492:	bf06      	itte	eq
 8000494:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000498:	3401      	addeq	r4, #1
 800049a:	3d01      	subne	r5, #1
 800049c:	e74e      	b.n	800033c <__adddf3+0x8c>
 800049e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004a2:	bf18      	it	ne
 80004a4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a8:	d029      	beq.n	80004fe <__adddf3+0x24e>
 80004aa:	ea94 0f05 	teq	r4, r5
 80004ae:	bf08      	it	eq
 80004b0:	ea90 0f02 	teqeq	r0, r2
 80004b4:	d005      	beq.n	80004c2 <__adddf3+0x212>
 80004b6:	ea54 0c00 	orrs.w	ip, r4, r0
 80004ba:	bf04      	itt	eq
 80004bc:	4619      	moveq	r1, r3
 80004be:	4610      	moveq	r0, r2
 80004c0:	bd30      	pop	{r4, r5, pc}
 80004c2:	ea91 0f03 	teq	r1, r3
 80004c6:	bf1e      	ittt	ne
 80004c8:	2100      	movne	r1, #0
 80004ca:	2000      	movne	r0, #0
 80004cc:	bd30      	popne	{r4, r5, pc}
 80004ce:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004d2:	d105      	bne.n	80004e0 <__adddf3+0x230>
 80004d4:	0040      	lsls	r0, r0, #1
 80004d6:	4149      	adcs	r1, r1
 80004d8:	bf28      	it	cs
 80004da:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004de:	bd30      	pop	{r4, r5, pc}
 80004e0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e4:	bf3c      	itt	cc
 80004e6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004ea:	bd30      	popcc	{r4, r5, pc}
 80004ec:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004f0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f8:	f04f 0000 	mov.w	r0, #0
 80004fc:	bd30      	pop	{r4, r5, pc}
 80004fe:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000502:	bf1a      	itte	ne
 8000504:	4619      	movne	r1, r3
 8000506:	4610      	movne	r0, r2
 8000508:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800050c:	bf1c      	itt	ne
 800050e:	460b      	movne	r3, r1
 8000510:	4602      	movne	r2, r0
 8000512:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000516:	bf06      	itte	eq
 8000518:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800051c:	ea91 0f03 	teqeq	r1, r3
 8000520:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000524:	bd30      	pop	{r4, r5, pc}
 8000526:	bf00      	nop

08000528 <__aeabi_ui2d>:
 8000528:	f090 0f00 	teq	r0, #0
 800052c:	bf04      	itt	eq
 800052e:	2100      	moveq	r1, #0
 8000530:	4770      	bxeq	lr
 8000532:	b530      	push	{r4, r5, lr}
 8000534:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000538:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800053c:	f04f 0500 	mov.w	r5, #0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e750      	b.n	80003e8 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_i2d>:
 8000548:	f090 0f00 	teq	r0, #0
 800054c:	bf04      	itt	eq
 800054e:	2100      	moveq	r1, #0
 8000550:	4770      	bxeq	lr
 8000552:	b530      	push	{r4, r5, lr}
 8000554:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000558:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800055c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000560:	bf48      	it	mi
 8000562:	4240      	negmi	r0, r0
 8000564:	f04f 0100 	mov.w	r1, #0
 8000568:	e73e      	b.n	80003e8 <__adddf3+0x138>
 800056a:	bf00      	nop

0800056c <__aeabi_f2d>:
 800056c:	0042      	lsls	r2, r0, #1
 800056e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000572:	ea4f 0131 	mov.w	r1, r1, rrx
 8000576:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800057a:	bf1f      	itttt	ne
 800057c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000580:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000584:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000588:	4770      	bxne	lr
 800058a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058e:	bf08      	it	eq
 8000590:	4770      	bxeq	lr
 8000592:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000596:	bf04      	itt	eq
 8000598:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800059c:	4770      	bxeq	lr
 800059e:	b530      	push	{r4, r5, lr}
 80005a0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005ac:	e71c      	b.n	80003e8 <__adddf3+0x138>
 80005ae:	bf00      	nop

080005b0 <__aeabi_ul2d>:
 80005b0:	ea50 0201 	orrs.w	r2, r0, r1
 80005b4:	bf08      	it	eq
 80005b6:	4770      	bxeq	lr
 80005b8:	b530      	push	{r4, r5, lr}
 80005ba:	f04f 0500 	mov.w	r5, #0
 80005be:	e00a      	b.n	80005d6 <__aeabi_l2d+0x16>

080005c0 <__aeabi_l2d>:
 80005c0:	ea50 0201 	orrs.w	r2, r0, r1
 80005c4:	bf08      	it	eq
 80005c6:	4770      	bxeq	lr
 80005c8:	b530      	push	{r4, r5, lr}
 80005ca:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ce:	d502      	bpl.n	80005d6 <__aeabi_l2d+0x16>
 80005d0:	4240      	negs	r0, r0
 80005d2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005da:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005de:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005e2:	f43f aed8 	beq.w	8000396 <__adddf3+0xe6>
 80005e6:	f04f 0203 	mov.w	r2, #3
 80005ea:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ee:	bf18      	it	ne
 80005f0:	3203      	addne	r2, #3
 80005f2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f6:	bf18      	it	ne
 80005f8:	3203      	addne	r2, #3
 80005fa:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fe:	f1c2 0320 	rsb	r3, r2, #32
 8000602:	fa00 fc03 	lsl.w	ip, r0, r3
 8000606:	fa20 f002 	lsr.w	r0, r0, r2
 800060a:	fa01 fe03 	lsl.w	lr, r1, r3
 800060e:	ea40 000e 	orr.w	r0, r0, lr
 8000612:	fa21 f102 	lsr.w	r1, r1, r2
 8000616:	4414      	add	r4, r2
 8000618:	e6bd      	b.n	8000396 <__adddf3+0xe6>
 800061a:	bf00      	nop

0800061c <__aeabi_dmul>:
 800061c:	b570      	push	{r4, r5, r6, lr}
 800061e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000622:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000626:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800062a:	bf1d      	ittte	ne
 800062c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000630:	ea94 0f0c 	teqne	r4, ip
 8000634:	ea95 0f0c 	teqne	r5, ip
 8000638:	f000 f8de 	bleq	80007f8 <__aeabi_dmul+0x1dc>
 800063c:	442c      	add	r4, r5
 800063e:	ea81 0603 	eor.w	r6, r1, r3
 8000642:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000646:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800064a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064e:	bf18      	it	ne
 8000650:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000654:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000658:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800065c:	d038      	beq.n	80006d0 <__aeabi_dmul+0xb4>
 800065e:	fba0 ce02 	umull	ip, lr, r0, r2
 8000662:	f04f 0500 	mov.w	r5, #0
 8000666:	fbe1 e502 	umlal	lr, r5, r1, r2
 800066a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000672:	f04f 0600 	mov.w	r6, #0
 8000676:	fbe1 5603 	umlal	r5, r6, r1, r3
 800067a:	f09c 0f00 	teq	ip, #0
 800067e:	bf18      	it	ne
 8000680:	f04e 0e01 	orrne.w	lr, lr, #1
 8000684:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000688:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 800068c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000690:	d204      	bcs.n	800069c <__aeabi_dmul+0x80>
 8000692:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000696:	416d      	adcs	r5, r5
 8000698:	eb46 0606 	adc.w	r6, r6, r6
 800069c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006a0:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a4:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a8:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006ac:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006b0:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b4:	bf88      	it	hi
 80006b6:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006ba:	d81e      	bhi.n	80006fa <__aeabi_dmul+0xde>
 80006bc:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006c0:	bf08      	it	eq
 80006c2:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c6:	f150 0000 	adcs.w	r0, r0, #0
 80006ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ce:	bd70      	pop	{r4, r5, r6, pc}
 80006d0:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d4:	ea46 0101 	orr.w	r1, r6, r1
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	ea81 0103 	eor.w	r1, r1, r3
 80006e0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e4:	bfc2      	ittt	gt
 80006e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ee:	bd70      	popgt	{r4, r5, r6, pc}
 80006f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f4:	f04f 0e00 	mov.w	lr, #0
 80006f8:	3c01      	subs	r4, #1
 80006fa:	f300 80ab 	bgt.w	8000854 <__aeabi_dmul+0x238>
 80006fe:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000702:	bfde      	ittt	le
 8000704:	2000      	movle	r0, #0
 8000706:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800070a:	bd70      	pople	{r4, r5, r6, pc}
 800070c:	f1c4 0400 	rsb	r4, r4, #0
 8000710:	3c20      	subs	r4, #32
 8000712:	da35      	bge.n	8000780 <__aeabi_dmul+0x164>
 8000714:	340c      	adds	r4, #12
 8000716:	dc1b      	bgt.n	8000750 <__aeabi_dmul+0x134>
 8000718:	f104 0414 	add.w	r4, r4, #20
 800071c:	f1c4 0520 	rsb	r5, r4, #32
 8000720:	fa00 f305 	lsl.w	r3, r0, r5
 8000724:	fa20 f004 	lsr.w	r0, r0, r4
 8000728:	fa01 f205 	lsl.w	r2, r1, r5
 800072c:	ea40 0002 	orr.w	r0, r0, r2
 8000730:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000734:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000738:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800073c:	fa21 f604 	lsr.w	r6, r1, r4
 8000740:	eb42 0106 	adc.w	r1, r2, r6
 8000744:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000748:	bf08      	it	eq
 800074a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074e:	bd70      	pop	{r4, r5, r6, pc}
 8000750:	f1c4 040c 	rsb	r4, r4, #12
 8000754:	f1c4 0520 	rsb	r5, r4, #32
 8000758:	fa00 f304 	lsl.w	r3, r0, r4
 800075c:	fa20 f005 	lsr.w	r0, r0, r5
 8000760:	fa01 f204 	lsl.w	r2, r1, r4
 8000764:	ea40 0002 	orr.w	r0, r0, r2
 8000768:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800076c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000770:	f141 0100 	adc.w	r1, r1, #0
 8000774:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000778:	bf08      	it	eq
 800077a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077e:	bd70      	pop	{r4, r5, r6, pc}
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f205 	lsl.w	r2, r0, r5
 8000788:	ea4e 0e02 	orr.w	lr, lr, r2
 800078c:	fa20 f304 	lsr.w	r3, r0, r4
 8000790:	fa01 f205 	lsl.w	r2, r1, r5
 8000794:	ea43 0302 	orr.w	r3, r3, r2
 8000798:	fa21 f004 	lsr.w	r0, r1, r4
 800079c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a0:	fa21 f204 	lsr.w	r2, r1, r4
 80007a4:	ea20 0002 	bic.w	r0, r0, r2
 80007a8:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007ac:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007b0:	bf08      	it	eq
 80007b2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b6:	bd70      	pop	{r4, r5, r6, pc}
 80007b8:	f094 0f00 	teq	r4, #0
 80007bc:	d10f      	bne.n	80007de <__aeabi_dmul+0x1c2>
 80007be:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007c2:	0040      	lsls	r0, r0, #1
 80007c4:	eb41 0101 	adc.w	r1, r1, r1
 80007c8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007cc:	bf08      	it	eq
 80007ce:	3c01      	subeq	r4, #1
 80007d0:	d0f7      	beq.n	80007c2 <__aeabi_dmul+0x1a6>
 80007d2:	ea41 0106 	orr.w	r1, r1, r6
 80007d6:	f095 0f00 	teq	r5, #0
 80007da:	bf18      	it	ne
 80007dc:	4770      	bxne	lr
 80007de:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007e2:	0052      	lsls	r2, r2, #1
 80007e4:	eb43 0303 	adc.w	r3, r3, r3
 80007e8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007ec:	bf08      	it	eq
 80007ee:	3d01      	subeq	r5, #1
 80007f0:	d0f7      	beq.n	80007e2 <__aeabi_dmul+0x1c6>
 80007f2:	ea43 0306 	orr.w	r3, r3, r6
 80007f6:	4770      	bx	lr
 80007f8:	ea94 0f0c 	teq	r4, ip
 80007fc:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000800:	bf18      	it	ne
 8000802:	ea95 0f0c 	teqne	r5, ip
 8000806:	d00c      	beq.n	8000822 <__aeabi_dmul+0x206>
 8000808:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800080c:	bf18      	it	ne
 800080e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000812:	d1d1      	bne.n	80007b8 <__aeabi_dmul+0x19c>
 8000814:	ea81 0103 	eor.w	r1, r1, r3
 8000818:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800081c:	f04f 0000 	mov.w	r0, #0
 8000820:	bd70      	pop	{r4, r5, r6, pc}
 8000822:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000826:	bf06      	itte	eq
 8000828:	4610      	moveq	r0, r2
 800082a:	4619      	moveq	r1, r3
 800082c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000830:	d019      	beq.n	8000866 <__aeabi_dmul+0x24a>
 8000832:	ea94 0f0c 	teq	r4, ip
 8000836:	d102      	bne.n	800083e <__aeabi_dmul+0x222>
 8000838:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800083c:	d113      	bne.n	8000866 <__aeabi_dmul+0x24a>
 800083e:	ea95 0f0c 	teq	r5, ip
 8000842:	d105      	bne.n	8000850 <__aeabi_dmul+0x234>
 8000844:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000848:	bf1c      	itt	ne
 800084a:	4610      	movne	r0, r2
 800084c:	4619      	movne	r1, r3
 800084e:	d10a      	bne.n	8000866 <__aeabi_dmul+0x24a>
 8000850:	ea81 0103 	eor.w	r1, r1, r3
 8000854:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000858:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800085c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000860:	f04f 0000 	mov.w	r0, #0
 8000864:	bd70      	pop	{r4, r5, r6, pc}
 8000866:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800086a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086e:	bd70      	pop	{r4, r5, r6, pc}

08000870 <__aeabi_ddiv>:
 8000870:	b570      	push	{r4, r5, r6, lr}
 8000872:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000876:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800087a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087e:	bf1d      	ittte	ne
 8000880:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000884:	ea94 0f0c 	teqne	r4, ip
 8000888:	ea95 0f0c 	teqne	r5, ip
 800088c:	f000 f8a7 	bleq	80009de <__aeabi_ddiv+0x16e>
 8000890:	eba4 0405 	sub.w	r4, r4, r5
 8000894:	ea81 0e03 	eor.w	lr, r1, r3
 8000898:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800089c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008a0:	f000 8088 	beq.w	80009b4 <__aeabi_ddiv+0x144>
 80008a4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a8:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008ac:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008b0:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b4:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b8:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008bc:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008c0:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c4:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c8:	429d      	cmp	r5, r3
 80008ca:	bf08      	it	eq
 80008cc:	4296      	cmpeq	r6, r2
 80008ce:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008d2:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d6:	d202      	bcs.n	80008de <__aeabi_ddiv+0x6e>
 80008d8:	085b      	lsrs	r3, r3, #1
 80008da:	ea4f 0232 	mov.w	r2, r2, rrx
 80008de:	1ab6      	subs	r6, r6, r2
 80008e0:	eb65 0503 	sbc.w	r5, r5, r3
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ee:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008f2:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fa:	bf22      	ittt	cs
 80008fc:	1ab6      	subcs	r6, r6, r2
 80008fe:	4675      	movcs	r5, lr
 8000900:	ea40 000c 	orrcs.w	r0, r0, ip
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	ebb6 0e02 	subs.w	lr, r6, r2
 800090e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000912:	bf22      	ittt	cs
 8000914:	1ab6      	subcs	r6, r6, r2
 8000916:	4675      	movcs	r5, lr
 8000918:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800091c:	085b      	lsrs	r3, r3, #1
 800091e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000922:	ebb6 0e02 	subs.w	lr, r6, r2
 8000926:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092a:	bf22      	ittt	cs
 800092c:	1ab6      	subcs	r6, r6, r2
 800092e:	4675      	movcs	r5, lr
 8000930:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000934:	085b      	lsrs	r3, r3, #1
 8000936:	ea4f 0232 	mov.w	r2, r2, rrx
 800093a:	ebb6 0e02 	subs.w	lr, r6, r2
 800093e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000942:	bf22      	ittt	cs
 8000944:	1ab6      	subcs	r6, r6, r2
 8000946:	4675      	movcs	r5, lr
 8000948:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800094c:	ea55 0e06 	orrs.w	lr, r5, r6
 8000950:	d018      	beq.n	8000984 <__aeabi_ddiv+0x114>
 8000952:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000956:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800095a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000962:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000966:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800096a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096e:	d1c0      	bne.n	80008f2 <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	d10b      	bne.n	800098e <__aeabi_ddiv+0x11e>
 8000976:	ea41 0100 	orr.w	r1, r1, r0
 800097a:	f04f 0000 	mov.w	r0, #0
 800097e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000982:	e7b6      	b.n	80008f2 <__aeabi_ddiv+0x82>
 8000984:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000988:	bf04      	itt	eq
 800098a:	4301      	orreq	r1, r0
 800098c:	2000      	moveq	r0, #0
 800098e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000992:	bf88      	it	hi
 8000994:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000998:	f63f aeaf 	bhi.w	80006fa <__aeabi_dmul+0xde>
 800099c:	ebb5 0c03 	subs.w	ip, r5, r3
 80009a0:	bf04      	itt	eq
 80009a2:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009aa:	f150 0000 	adcs.w	r0, r0, #0
 80009ae:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009b2:	bd70      	pop	{r4, r5, r6, pc}
 80009b4:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b8:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009bc:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009c0:	bfc2      	ittt	gt
 80009c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009ca:	bd70      	popgt	{r4, r5, r6, pc}
 80009cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009d0:	f04f 0e00 	mov.w	lr, #0
 80009d4:	3c01      	subs	r4, #1
 80009d6:	e690      	b.n	80006fa <__aeabi_dmul+0xde>
 80009d8:	ea45 0e06 	orr.w	lr, r5, r6
 80009dc:	e68d      	b.n	80006fa <__aeabi_dmul+0xde>
 80009de:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009e2:	ea94 0f0c 	teq	r4, ip
 80009e6:	bf08      	it	eq
 80009e8:	ea95 0f0c 	teqeq	r5, ip
 80009ec:	f43f af3b 	beq.w	8000866 <__aeabi_dmul+0x24a>
 80009f0:	ea94 0f0c 	teq	r4, ip
 80009f4:	d10a      	bne.n	8000a0c <__aeabi_ddiv+0x19c>
 80009f6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009fa:	f47f af34 	bne.w	8000866 <__aeabi_dmul+0x24a>
 80009fe:	ea95 0f0c 	teq	r5, ip
 8000a02:	f47f af25 	bne.w	8000850 <__aeabi_dmul+0x234>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e72c      	b.n	8000866 <__aeabi_dmul+0x24a>
 8000a0c:	ea95 0f0c 	teq	r5, ip
 8000a10:	d106      	bne.n	8000a20 <__aeabi_ddiv+0x1b0>
 8000a12:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a16:	f43f aefd 	beq.w	8000814 <__aeabi_dmul+0x1f8>
 8000a1a:	4610      	mov	r0, r2
 8000a1c:	4619      	mov	r1, r3
 8000a1e:	e722      	b.n	8000866 <__aeabi_dmul+0x24a>
 8000a20:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a24:	bf18      	it	ne
 8000a26:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a2a:	f47f aec5 	bne.w	80007b8 <__aeabi_dmul+0x19c>
 8000a2e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a32:	f47f af0d 	bne.w	8000850 <__aeabi_dmul+0x234>
 8000a36:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a3a:	f47f aeeb 	bne.w	8000814 <__aeabi_dmul+0x1f8>
 8000a3e:	e712      	b.n	8000866 <__aeabi_dmul+0x24a>

08000a40 <__gedf2>:
 8000a40:	f04f 3cff 	mov.w	ip, #4294967295
 8000a44:	e006      	b.n	8000a54 <__cmpdf2+0x4>
 8000a46:	bf00      	nop

08000a48 <__ledf2>:
 8000a48:	f04f 0c01 	mov.w	ip, #1
 8000a4c:	e002      	b.n	8000a54 <__cmpdf2+0x4>
 8000a4e:	bf00      	nop

08000a50 <__cmpdf2>:
 8000a50:	f04f 0c01 	mov.w	ip, #1
 8000a54:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a58:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a5c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a60:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a64:	bf18      	it	ne
 8000a66:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a6a:	d01b      	beq.n	8000aa4 <__cmpdf2+0x54>
 8000a6c:	b001      	add	sp, #4
 8000a6e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a72:	bf0c      	ite	eq
 8000a74:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a78:	ea91 0f03 	teqne	r1, r3
 8000a7c:	bf02      	ittt	eq
 8000a7e:	ea90 0f02 	teqeq	r0, r2
 8000a82:	2000      	moveq	r0, #0
 8000a84:	4770      	bxeq	lr
 8000a86:	f110 0f00 	cmn.w	r0, #0
 8000a8a:	ea91 0f03 	teq	r1, r3
 8000a8e:	bf58      	it	pl
 8000a90:	4299      	cmppl	r1, r3
 8000a92:	bf08      	it	eq
 8000a94:	4290      	cmpeq	r0, r2
 8000a96:	bf2c      	ite	cs
 8000a98:	17d8      	asrcs	r0, r3, #31
 8000a9a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9e:	f040 0001 	orr.w	r0, r0, #1
 8000aa2:	4770      	bx	lr
 8000aa4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aac:	d102      	bne.n	8000ab4 <__cmpdf2+0x64>
 8000aae:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ab2:	d107      	bne.n	8000ac4 <__cmpdf2+0x74>
 8000ab4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000abc:	d1d6      	bne.n	8000a6c <__cmpdf2+0x1c>
 8000abe:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ac2:	d0d3      	beq.n	8000a6c <__cmpdf2+0x1c>
 8000ac4:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac8:	4770      	bx	lr
 8000aca:	bf00      	nop

08000acc <__aeabi_cdrcmple>:
 8000acc:	4684      	mov	ip, r0
 8000ace:	4610      	mov	r0, r2
 8000ad0:	4662      	mov	r2, ip
 8000ad2:	468c      	mov	ip, r1
 8000ad4:	4619      	mov	r1, r3
 8000ad6:	4663      	mov	r3, ip
 8000ad8:	e000      	b.n	8000adc <__aeabi_cdcmpeq>
 8000ada:	bf00      	nop

08000adc <__aeabi_cdcmpeq>:
 8000adc:	b501      	push	{r0, lr}
 8000ade:	f7ff ffb7 	bl	8000a50 <__cmpdf2>
 8000ae2:	2800      	cmp	r0, #0
 8000ae4:	bf48      	it	mi
 8000ae6:	f110 0f00 	cmnmi.w	r0, #0
 8000aea:	bd01      	pop	{r0, pc}

08000aec <__aeabi_dcmpeq>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff fff4 	bl	8000adc <__aeabi_cdcmpeq>
 8000af4:	bf0c      	ite	eq
 8000af6:	2001      	moveq	r0, #1
 8000af8:	2000      	movne	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmplt>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffea 	bl	8000adc <__aeabi_cdcmpeq>
 8000b08:	bf34      	ite	cc
 8000b0a:	2001      	movcc	r0, #1
 8000b0c:	2000      	movcs	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmple>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffe0 	bl	8000adc <__aeabi_cdcmpeq>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpge>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffce 	bl	8000acc <__aeabi_cdrcmple>
 8000b30:	bf94      	ite	ls
 8000b32:	2001      	movls	r0, #1
 8000b34:	2000      	movhi	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpgt>:
 8000b3c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b40:	f7ff ffc4 	bl	8000acc <__aeabi_cdrcmple>
 8000b44:	bf34      	ite	cc
 8000b46:	2001      	movcc	r0, #1
 8000b48:	2000      	movcs	r0, #0
 8000b4a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4e:	bf00      	nop

08000b50 <__aeabi_dcmpun>:
 8000b50:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b54:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b58:	d102      	bne.n	8000b60 <__aeabi_dcmpun+0x10>
 8000b5a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5e:	d10a      	bne.n	8000b76 <__aeabi_dcmpun+0x26>
 8000b60:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b64:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b68:	d102      	bne.n	8000b70 <__aeabi_dcmpun+0x20>
 8000b6a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6e:	d102      	bne.n	8000b76 <__aeabi_dcmpun+0x26>
 8000b70:	f04f 0000 	mov.w	r0, #0
 8000b74:	4770      	bx	lr
 8000b76:	f04f 0001 	mov.w	r0, #1
 8000b7a:	4770      	bx	lr

08000b7c <__aeabi_d2iz>:
 8000b7c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b80:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b84:	d215      	bcs.n	8000bb2 <__aeabi_d2iz+0x36>
 8000b86:	d511      	bpl.n	8000bac <__aeabi_d2iz+0x30>
 8000b88:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b8c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b90:	d912      	bls.n	8000bb8 <__aeabi_d2iz+0x3c>
 8000b92:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b96:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b9a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ba2:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba6:	bf18      	it	ne
 8000ba8:	4240      	negne	r0, r0
 8000baa:	4770      	bx	lr
 8000bac:	f04f 0000 	mov.w	r0, #0
 8000bb0:	4770      	bx	lr
 8000bb2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb6:	d105      	bne.n	8000bc4 <__aeabi_d2iz+0x48>
 8000bb8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bbc:	bf08      	it	eq
 8000bbe:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bc2:	4770      	bx	lr
 8000bc4:	f04f 0000 	mov.w	r0, #0
 8000bc8:	4770      	bx	lr
 8000bca:	bf00      	nop

08000bcc <__aeabi_d2f>:
 8000bcc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bd0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bd4:	bf24      	itt	cs
 8000bd6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bda:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bde:	d90d      	bls.n	8000bfc <__aeabi_d2f+0x30>
 8000be0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000be4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000be8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bec:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bf0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bf4:	bf08      	it	eq
 8000bf6:	f020 0001 	biceq.w	r0, r0, #1
 8000bfa:	4770      	bx	lr
 8000bfc:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c00:	d121      	bne.n	8000c46 <__aeabi_d2f+0x7a>
 8000c02:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c06:	bfbc      	itt	lt
 8000c08:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c0c:	4770      	bxlt	lr
 8000c0e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c12:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c16:	f1c2 0218 	rsb	r2, r2, #24
 8000c1a:	f1c2 0c20 	rsb	ip, r2, #32
 8000c1e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c22:	fa20 f002 	lsr.w	r0, r0, r2
 8000c26:	bf18      	it	ne
 8000c28:	f040 0001 	orrne.w	r0, r0, #1
 8000c2c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c30:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c34:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c38:	ea40 000c 	orr.w	r0, r0, ip
 8000c3c:	fa23 f302 	lsr.w	r3, r3, r2
 8000c40:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c44:	e7cc      	b.n	8000be0 <__aeabi_d2f+0x14>
 8000c46:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c4a:	d107      	bne.n	8000c5c <__aeabi_d2f+0x90>
 8000c4c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c50:	bf1e      	ittt	ne
 8000c52:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c56:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c5a:	4770      	bxne	lr
 8000c5c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c60:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c64:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c68:	4770      	bx	lr
 8000c6a:	bf00      	nop

08000c6c <__aeabi_uldivmod>:
 8000c6c:	b953      	cbnz	r3, 8000c84 <__aeabi_uldivmod+0x18>
 8000c6e:	b94a      	cbnz	r2, 8000c84 <__aeabi_uldivmod+0x18>
 8000c70:	2900      	cmp	r1, #0
 8000c72:	bf08      	it	eq
 8000c74:	2800      	cmpeq	r0, #0
 8000c76:	bf1c      	itt	ne
 8000c78:	f04f 31ff 	movne.w	r1, #4294967295
 8000c7c:	f04f 30ff 	movne.w	r0, #4294967295
 8000c80:	f000 b9a4 	b.w	8000fcc <__aeabi_idiv0>
 8000c84:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c88:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c8c:	f000 f83c 	bl	8000d08 <__udivmoddi4>
 8000c90:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c94:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c98:	b004      	add	sp, #16
 8000c9a:	4770      	bx	lr

08000c9c <__aeabi_d2lz>:
 8000c9c:	b538      	push	{r3, r4, r5, lr}
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	4604      	mov	r4, r0
 8000ca4:	460d      	mov	r5, r1
 8000ca6:	f7ff ff2b 	bl	8000b00 <__aeabi_dcmplt>
 8000caa:	b928      	cbnz	r0, 8000cb8 <__aeabi_d2lz+0x1c>
 8000cac:	4620      	mov	r0, r4
 8000cae:	4629      	mov	r1, r5
 8000cb0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cb4:	f000 b80a 	b.w	8000ccc <__aeabi_d2ulz>
 8000cb8:	4620      	mov	r0, r4
 8000cba:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cbe:	f000 f805 	bl	8000ccc <__aeabi_d2ulz>
 8000cc2:	4240      	negs	r0, r0
 8000cc4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cc8:	bd38      	pop	{r3, r4, r5, pc}
 8000cca:	bf00      	nop

08000ccc <__aeabi_d2ulz>:
 8000ccc:	b5d0      	push	{r4, r6, r7, lr}
 8000cce:	4b0c      	ldr	r3, [pc, #48]	; (8000d00 <__aeabi_d2ulz+0x34>)
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	4606      	mov	r6, r0
 8000cd4:	460f      	mov	r7, r1
 8000cd6:	f7ff fca1 	bl	800061c <__aeabi_dmul>
 8000cda:	f000 f979 	bl	8000fd0 <__aeabi_d2uiz>
 8000cde:	4604      	mov	r4, r0
 8000ce0:	f7ff fc22 	bl	8000528 <__aeabi_ui2d>
 8000ce4:	4b07      	ldr	r3, [pc, #28]	; (8000d04 <__aeabi_d2ulz+0x38>)
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	f7ff fc98 	bl	800061c <__aeabi_dmul>
 8000cec:	4602      	mov	r2, r0
 8000cee:	460b      	mov	r3, r1
 8000cf0:	4630      	mov	r0, r6
 8000cf2:	4639      	mov	r1, r7
 8000cf4:	f7ff fada 	bl	80002ac <__aeabi_dsub>
 8000cf8:	f000 f96a 	bl	8000fd0 <__aeabi_d2uiz>
 8000cfc:	4621      	mov	r1, r4
 8000cfe:	bdd0      	pop	{r4, r6, r7, pc}
 8000d00:	3df00000 	.word	0x3df00000
 8000d04:	41f00000 	.word	0x41f00000

08000d08 <__udivmoddi4>:
 8000d08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d0c:	9d08      	ldr	r5, [sp, #32]
 8000d0e:	4604      	mov	r4, r0
 8000d10:	468c      	mov	ip, r1
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	f040 8083 	bne.w	8000e1e <__udivmoddi4+0x116>
 8000d18:	428a      	cmp	r2, r1
 8000d1a:	4617      	mov	r7, r2
 8000d1c:	d947      	bls.n	8000dae <__udivmoddi4+0xa6>
 8000d1e:	fab2 f282 	clz	r2, r2
 8000d22:	b142      	cbz	r2, 8000d36 <__udivmoddi4+0x2e>
 8000d24:	f1c2 0020 	rsb	r0, r2, #32
 8000d28:	fa24 f000 	lsr.w	r0, r4, r0
 8000d2c:	4091      	lsls	r1, r2
 8000d2e:	4097      	lsls	r7, r2
 8000d30:	ea40 0c01 	orr.w	ip, r0, r1
 8000d34:	4094      	lsls	r4, r2
 8000d36:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000d3a:	0c23      	lsrs	r3, r4, #16
 8000d3c:	fbbc f6f8 	udiv	r6, ip, r8
 8000d40:	fa1f fe87 	uxth.w	lr, r7
 8000d44:	fb08 c116 	mls	r1, r8, r6, ip
 8000d48:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d4c:	fb06 f10e 	mul.w	r1, r6, lr
 8000d50:	4299      	cmp	r1, r3
 8000d52:	d909      	bls.n	8000d68 <__udivmoddi4+0x60>
 8000d54:	18fb      	adds	r3, r7, r3
 8000d56:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d5a:	f080 8119 	bcs.w	8000f90 <__udivmoddi4+0x288>
 8000d5e:	4299      	cmp	r1, r3
 8000d60:	f240 8116 	bls.w	8000f90 <__udivmoddi4+0x288>
 8000d64:	3e02      	subs	r6, #2
 8000d66:	443b      	add	r3, r7
 8000d68:	1a5b      	subs	r3, r3, r1
 8000d6a:	b2a4      	uxth	r4, r4
 8000d6c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d70:	fb08 3310 	mls	r3, r8, r0, r3
 8000d74:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d78:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d7c:	45a6      	cmp	lr, r4
 8000d7e:	d909      	bls.n	8000d94 <__udivmoddi4+0x8c>
 8000d80:	193c      	adds	r4, r7, r4
 8000d82:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d86:	f080 8105 	bcs.w	8000f94 <__udivmoddi4+0x28c>
 8000d8a:	45a6      	cmp	lr, r4
 8000d8c:	f240 8102 	bls.w	8000f94 <__udivmoddi4+0x28c>
 8000d90:	3802      	subs	r0, #2
 8000d92:	443c      	add	r4, r7
 8000d94:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d98:	eba4 040e 	sub.w	r4, r4, lr
 8000d9c:	2600      	movs	r6, #0
 8000d9e:	b11d      	cbz	r5, 8000da8 <__udivmoddi4+0xa0>
 8000da0:	40d4      	lsrs	r4, r2
 8000da2:	2300      	movs	r3, #0
 8000da4:	e9c5 4300 	strd	r4, r3, [r5]
 8000da8:	4631      	mov	r1, r6
 8000daa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dae:	b902      	cbnz	r2, 8000db2 <__udivmoddi4+0xaa>
 8000db0:	deff      	udf	#255	; 0xff
 8000db2:	fab2 f282 	clz	r2, r2
 8000db6:	2a00      	cmp	r2, #0
 8000db8:	d150      	bne.n	8000e5c <__udivmoddi4+0x154>
 8000dba:	1bcb      	subs	r3, r1, r7
 8000dbc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000dc0:	fa1f f887 	uxth.w	r8, r7
 8000dc4:	2601      	movs	r6, #1
 8000dc6:	fbb3 fcfe 	udiv	ip, r3, lr
 8000dca:	0c21      	lsrs	r1, r4, #16
 8000dcc:	fb0e 331c 	mls	r3, lr, ip, r3
 8000dd0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000dd4:	fb08 f30c 	mul.w	r3, r8, ip
 8000dd8:	428b      	cmp	r3, r1
 8000dda:	d907      	bls.n	8000dec <__udivmoddi4+0xe4>
 8000ddc:	1879      	adds	r1, r7, r1
 8000dde:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000de2:	d202      	bcs.n	8000dea <__udivmoddi4+0xe2>
 8000de4:	428b      	cmp	r3, r1
 8000de6:	f200 80e9 	bhi.w	8000fbc <__udivmoddi4+0x2b4>
 8000dea:	4684      	mov	ip, r0
 8000dec:	1ac9      	subs	r1, r1, r3
 8000dee:	b2a3      	uxth	r3, r4
 8000df0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000df4:	fb0e 1110 	mls	r1, lr, r0, r1
 8000df8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000dfc:	fb08 f800 	mul.w	r8, r8, r0
 8000e00:	45a0      	cmp	r8, r4
 8000e02:	d907      	bls.n	8000e14 <__udivmoddi4+0x10c>
 8000e04:	193c      	adds	r4, r7, r4
 8000e06:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e0a:	d202      	bcs.n	8000e12 <__udivmoddi4+0x10a>
 8000e0c:	45a0      	cmp	r8, r4
 8000e0e:	f200 80d9 	bhi.w	8000fc4 <__udivmoddi4+0x2bc>
 8000e12:	4618      	mov	r0, r3
 8000e14:	eba4 0408 	sub.w	r4, r4, r8
 8000e18:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e1c:	e7bf      	b.n	8000d9e <__udivmoddi4+0x96>
 8000e1e:	428b      	cmp	r3, r1
 8000e20:	d909      	bls.n	8000e36 <__udivmoddi4+0x12e>
 8000e22:	2d00      	cmp	r5, #0
 8000e24:	f000 80b1 	beq.w	8000f8a <__udivmoddi4+0x282>
 8000e28:	2600      	movs	r6, #0
 8000e2a:	e9c5 0100 	strd	r0, r1, [r5]
 8000e2e:	4630      	mov	r0, r6
 8000e30:	4631      	mov	r1, r6
 8000e32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e36:	fab3 f683 	clz	r6, r3
 8000e3a:	2e00      	cmp	r6, #0
 8000e3c:	d14a      	bne.n	8000ed4 <__udivmoddi4+0x1cc>
 8000e3e:	428b      	cmp	r3, r1
 8000e40:	d302      	bcc.n	8000e48 <__udivmoddi4+0x140>
 8000e42:	4282      	cmp	r2, r0
 8000e44:	f200 80b8 	bhi.w	8000fb8 <__udivmoddi4+0x2b0>
 8000e48:	1a84      	subs	r4, r0, r2
 8000e4a:	eb61 0103 	sbc.w	r1, r1, r3
 8000e4e:	2001      	movs	r0, #1
 8000e50:	468c      	mov	ip, r1
 8000e52:	2d00      	cmp	r5, #0
 8000e54:	d0a8      	beq.n	8000da8 <__udivmoddi4+0xa0>
 8000e56:	e9c5 4c00 	strd	r4, ip, [r5]
 8000e5a:	e7a5      	b.n	8000da8 <__udivmoddi4+0xa0>
 8000e5c:	f1c2 0320 	rsb	r3, r2, #32
 8000e60:	fa20 f603 	lsr.w	r6, r0, r3
 8000e64:	4097      	lsls	r7, r2
 8000e66:	fa01 f002 	lsl.w	r0, r1, r2
 8000e6a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e6e:	40d9      	lsrs	r1, r3
 8000e70:	4330      	orrs	r0, r6
 8000e72:	0c03      	lsrs	r3, r0, #16
 8000e74:	fbb1 f6fe 	udiv	r6, r1, lr
 8000e78:	fa1f f887 	uxth.w	r8, r7
 8000e7c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000e80:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e84:	fb06 f108 	mul.w	r1, r6, r8
 8000e88:	4299      	cmp	r1, r3
 8000e8a:	fa04 f402 	lsl.w	r4, r4, r2
 8000e8e:	d909      	bls.n	8000ea4 <__udivmoddi4+0x19c>
 8000e90:	18fb      	adds	r3, r7, r3
 8000e92:	f106 3cff 	add.w	ip, r6, #4294967295
 8000e96:	f080 808d 	bcs.w	8000fb4 <__udivmoddi4+0x2ac>
 8000e9a:	4299      	cmp	r1, r3
 8000e9c:	f240 808a 	bls.w	8000fb4 <__udivmoddi4+0x2ac>
 8000ea0:	3e02      	subs	r6, #2
 8000ea2:	443b      	add	r3, r7
 8000ea4:	1a5b      	subs	r3, r3, r1
 8000ea6:	b281      	uxth	r1, r0
 8000ea8:	fbb3 f0fe 	udiv	r0, r3, lr
 8000eac:	fb0e 3310 	mls	r3, lr, r0, r3
 8000eb0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000eb4:	fb00 f308 	mul.w	r3, r0, r8
 8000eb8:	428b      	cmp	r3, r1
 8000eba:	d907      	bls.n	8000ecc <__udivmoddi4+0x1c4>
 8000ebc:	1879      	adds	r1, r7, r1
 8000ebe:	f100 3cff 	add.w	ip, r0, #4294967295
 8000ec2:	d273      	bcs.n	8000fac <__udivmoddi4+0x2a4>
 8000ec4:	428b      	cmp	r3, r1
 8000ec6:	d971      	bls.n	8000fac <__udivmoddi4+0x2a4>
 8000ec8:	3802      	subs	r0, #2
 8000eca:	4439      	add	r1, r7
 8000ecc:	1acb      	subs	r3, r1, r3
 8000ece:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000ed2:	e778      	b.n	8000dc6 <__udivmoddi4+0xbe>
 8000ed4:	f1c6 0c20 	rsb	ip, r6, #32
 8000ed8:	fa03 f406 	lsl.w	r4, r3, r6
 8000edc:	fa22 f30c 	lsr.w	r3, r2, ip
 8000ee0:	431c      	orrs	r4, r3
 8000ee2:	fa20 f70c 	lsr.w	r7, r0, ip
 8000ee6:	fa01 f306 	lsl.w	r3, r1, r6
 8000eea:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000eee:	fa21 f10c 	lsr.w	r1, r1, ip
 8000ef2:	431f      	orrs	r7, r3
 8000ef4:	0c3b      	lsrs	r3, r7, #16
 8000ef6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000efa:	fa1f f884 	uxth.w	r8, r4
 8000efe:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f02:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000f06:	fb09 fa08 	mul.w	sl, r9, r8
 8000f0a:	458a      	cmp	sl, r1
 8000f0c:	fa02 f206 	lsl.w	r2, r2, r6
 8000f10:	fa00 f306 	lsl.w	r3, r0, r6
 8000f14:	d908      	bls.n	8000f28 <__udivmoddi4+0x220>
 8000f16:	1861      	adds	r1, r4, r1
 8000f18:	f109 30ff 	add.w	r0, r9, #4294967295
 8000f1c:	d248      	bcs.n	8000fb0 <__udivmoddi4+0x2a8>
 8000f1e:	458a      	cmp	sl, r1
 8000f20:	d946      	bls.n	8000fb0 <__udivmoddi4+0x2a8>
 8000f22:	f1a9 0902 	sub.w	r9, r9, #2
 8000f26:	4421      	add	r1, r4
 8000f28:	eba1 010a 	sub.w	r1, r1, sl
 8000f2c:	b2bf      	uxth	r7, r7
 8000f2e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000f32:	fb0e 1110 	mls	r1, lr, r0, r1
 8000f36:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000f3a:	fb00 f808 	mul.w	r8, r0, r8
 8000f3e:	45b8      	cmp	r8, r7
 8000f40:	d907      	bls.n	8000f52 <__udivmoddi4+0x24a>
 8000f42:	19e7      	adds	r7, r4, r7
 8000f44:	f100 31ff 	add.w	r1, r0, #4294967295
 8000f48:	d22e      	bcs.n	8000fa8 <__udivmoddi4+0x2a0>
 8000f4a:	45b8      	cmp	r8, r7
 8000f4c:	d92c      	bls.n	8000fa8 <__udivmoddi4+0x2a0>
 8000f4e:	3802      	subs	r0, #2
 8000f50:	4427      	add	r7, r4
 8000f52:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000f56:	eba7 0708 	sub.w	r7, r7, r8
 8000f5a:	fba0 8902 	umull	r8, r9, r0, r2
 8000f5e:	454f      	cmp	r7, r9
 8000f60:	46c6      	mov	lr, r8
 8000f62:	4649      	mov	r1, r9
 8000f64:	d31a      	bcc.n	8000f9c <__udivmoddi4+0x294>
 8000f66:	d017      	beq.n	8000f98 <__udivmoddi4+0x290>
 8000f68:	b15d      	cbz	r5, 8000f82 <__udivmoddi4+0x27a>
 8000f6a:	ebb3 020e 	subs.w	r2, r3, lr
 8000f6e:	eb67 0701 	sbc.w	r7, r7, r1
 8000f72:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000f76:	40f2      	lsrs	r2, r6
 8000f78:	ea4c 0202 	orr.w	r2, ip, r2
 8000f7c:	40f7      	lsrs	r7, r6
 8000f7e:	e9c5 2700 	strd	r2, r7, [r5]
 8000f82:	2600      	movs	r6, #0
 8000f84:	4631      	mov	r1, r6
 8000f86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f8a:	462e      	mov	r6, r5
 8000f8c:	4628      	mov	r0, r5
 8000f8e:	e70b      	b.n	8000da8 <__udivmoddi4+0xa0>
 8000f90:	4606      	mov	r6, r0
 8000f92:	e6e9      	b.n	8000d68 <__udivmoddi4+0x60>
 8000f94:	4618      	mov	r0, r3
 8000f96:	e6fd      	b.n	8000d94 <__udivmoddi4+0x8c>
 8000f98:	4543      	cmp	r3, r8
 8000f9a:	d2e5      	bcs.n	8000f68 <__udivmoddi4+0x260>
 8000f9c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000fa0:	eb69 0104 	sbc.w	r1, r9, r4
 8000fa4:	3801      	subs	r0, #1
 8000fa6:	e7df      	b.n	8000f68 <__udivmoddi4+0x260>
 8000fa8:	4608      	mov	r0, r1
 8000faa:	e7d2      	b.n	8000f52 <__udivmoddi4+0x24a>
 8000fac:	4660      	mov	r0, ip
 8000fae:	e78d      	b.n	8000ecc <__udivmoddi4+0x1c4>
 8000fb0:	4681      	mov	r9, r0
 8000fb2:	e7b9      	b.n	8000f28 <__udivmoddi4+0x220>
 8000fb4:	4666      	mov	r6, ip
 8000fb6:	e775      	b.n	8000ea4 <__udivmoddi4+0x19c>
 8000fb8:	4630      	mov	r0, r6
 8000fba:	e74a      	b.n	8000e52 <__udivmoddi4+0x14a>
 8000fbc:	f1ac 0c02 	sub.w	ip, ip, #2
 8000fc0:	4439      	add	r1, r7
 8000fc2:	e713      	b.n	8000dec <__udivmoddi4+0xe4>
 8000fc4:	3802      	subs	r0, #2
 8000fc6:	443c      	add	r4, r7
 8000fc8:	e724      	b.n	8000e14 <__udivmoddi4+0x10c>
 8000fca:	bf00      	nop

08000fcc <__aeabi_idiv0>:
 8000fcc:	4770      	bx	lr
 8000fce:	bf00      	nop

08000fd0 <__aeabi_d2uiz>:
 8000fd0:	004a      	lsls	r2, r1, #1
 8000fd2:	d211      	bcs.n	8000ff8 <__aeabi_d2uiz+0x28>
 8000fd4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000fd8:	d211      	bcs.n	8000ffe <__aeabi_d2uiz+0x2e>
 8000fda:	d50d      	bpl.n	8000ff8 <__aeabi_d2uiz+0x28>
 8000fdc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000fe0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000fe4:	d40e      	bmi.n	8001004 <__aeabi_d2uiz+0x34>
 8000fe6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000fea:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000fee:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ff2:	fa23 f002 	lsr.w	r0, r3, r2
 8000ff6:	4770      	bx	lr
 8000ff8:	f04f 0000 	mov.w	r0, #0
 8000ffc:	4770      	bx	lr
 8000ffe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8001002:	d102      	bne.n	800100a <__aeabi_d2uiz+0x3a>
 8001004:	f04f 30ff 	mov.w	r0, #4294967295
 8001008:	4770      	bx	lr
 800100a:	f04f 0000 	mov.w	r0, #0
 800100e:	4770      	bx	lr

08001010 <_ZN6tflite13ErrorReporterD1Ev>:
/// Subclass ErrorReporter to provide another reporting destination.
/// For example, if you have a GUI program, you might redirect to a buffer
/// that drives a GUI error log box.
class ErrorReporter {
 public:
  virtual ~ErrorReporter() {}
 8001010:	b480      	push	{r7}
 8001012:	b083      	sub	sp, #12
 8001014:	af00      	add	r7, sp, #0
 8001016:	6078      	str	r0, [r7, #4]
 8001018:	4a04      	ldr	r2, [pc, #16]	; (800102c <_ZN6tflite13ErrorReporterD1Ev+0x1c>)
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	601a      	str	r2, [r3, #0]
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	4618      	mov	r0, r3
 8001022:	370c      	adds	r7, #12
 8001024:	46bd      	mov	sp, r7
 8001026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102a:	4770      	bx	lr
 800102c:	0801730c 	.word	0x0801730c

08001030 <_ZN6tflite13ErrorReporterD0Ev>:
 8001030:	b580      	push	{r7, lr}
 8001032:	b082      	sub	sp, #8
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]
 8001038:	6878      	ldr	r0, [r7, #4]
 800103a:	f7ff ffe9 	bl	8001010 <_ZN6tflite13ErrorReporterD1Ev>
 800103e:	2104      	movs	r1, #4
 8001040:	6878      	ldr	r0, [r7, #4]
 8001042:	f009 ff34 	bl	800aeae <_ZdlPvj>
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	4618      	mov	r0, r3
 800104a:	3708      	adds	r7, #8
 800104c:	46bd      	mov	sp, r7
 800104e:	bd80      	pop	{r7, pc}

08001050 <_ZN6tflite18MicroErrorReporterD1Ev>:
// Get a pointer to a singleton global error reporter.
ErrorReporter* GetMicroErrorReporter();

class MicroErrorReporter : public ErrorReporter {
 public:
  ~MicroErrorReporter() override {}
 8001050:	b580      	push	{r7, lr}
 8001052:	b082      	sub	sp, #8
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
 8001058:	4a05      	ldr	r2, [pc, #20]	; (8001070 <_ZN6tflite18MicroErrorReporterD1Ev+0x20>)
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	601a      	str	r2, [r3, #0]
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	4618      	mov	r0, r3
 8001062:	f7ff ffd5 	bl	8001010 <_ZN6tflite13ErrorReporterD1Ev>
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	4618      	mov	r0, r3
 800106a:	3708      	adds	r7, #8
 800106c:	46bd      	mov	sp, r7
 800106e:	bd80      	pop	{r7, pc}
 8001070:	08021b54 	.word	0x08021b54

08001074 <_ZN6tflite18MicroErrorReporterD0Ev>:
 8001074:	b580      	push	{r7, lr}
 8001076:	b082      	sub	sp, #8
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]
 800107c:	6878      	ldr	r0, [r7, #4]
 800107e:	f7ff ffe7 	bl	8001050 <_ZN6tflite18MicroErrorReporterD1Ev>
 8001082:	2104      	movs	r1, #4
 8001084:	6878      	ldr	r0, [r7, #4]
 8001086:	f009 ff12 	bl	800aeae <_ZdlPvj>
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	4618      	mov	r0, r3
 800108e:	3708      	adds	r7, #8
 8001090:	46bd      	mov	sp, r7
 8001092:	bd80      	pop	{r7, pc}

08001094 <_ZN11flatbuffers11EndianCheckEv>:
  Offset(uoffset_t _o) : o(_o) {}
  Offset<void> Union() const { return Offset<void>(o); }
  bool IsNull() const { return !o; }
};

inline void EndianCheck() {
 8001094:	b580      	push	{r7, lr}
 8001096:	b082      	sub	sp, #8
 8001098:	af00      	add	r7, sp, #0
  int endiantest = 1;
 800109a:	2301      	movs	r3, #1
 800109c:	607b      	str	r3, [r7, #4]
  // If this fails, see FLATBUFFERS_LITTLEENDIAN above.
  FLATBUFFERS_ASSERT(*reinterpret_cast<char *>(&endiantest) ==
 800109e:	1d3b      	adds	r3, r7, #4
 80010a0:	781b      	ldrb	r3, [r3, #0]
 80010a2:	2b01      	cmp	r3, #1
 80010a4:	d005      	beq.n	80010b2 <_ZN11flatbuffers11EndianCheckEv+0x1e>
 80010a6:	4b05      	ldr	r3, [pc, #20]	; (80010bc <_ZN11flatbuffers11EndianCheckEv+0x28>)
 80010a8:	4a05      	ldr	r2, [pc, #20]	; (80010c0 <_ZN11flatbuffers11EndianCheckEv+0x2c>)
 80010aa:	214e      	movs	r1, #78	; 0x4e
 80010ac:	4805      	ldr	r0, [pc, #20]	; (80010c4 <_ZN11flatbuffers11EndianCheckEv+0x30>)
 80010ae:	f009 ffed 	bl	800b08c <__assert_func>
                     FLATBUFFERS_LITTLEENDIAN);
  (void)endiantest;
}
 80010b2:	bf00      	nop
 80010b4:	3708      	adds	r7, #8
 80010b6:	46bd      	mov	sp, r7
 80010b8:	bd80      	pop	{r7, pc}
 80010ba:	bf00      	nop
 80010bc:	0800dba0 	.word	0x0800dba0
 80010c0:	0800dbe4 	.word	0x0800dbe4
 80010c4:	0800dc04 	.word	0x0800dc04

080010c8 <_ZNK11flatbuffers5Table9GetVTableEv>:

// "tables" use an offset table (possibly shared) that allows fields to be
// omitted and added at will, but uses an extra indirection to read.
class Table {
 public:
  const uint8_t *GetVTable() const {
 80010c8:	b590      	push	{r4, r7, lr}
 80010ca:	b083      	sub	sp, #12
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	6078      	str	r0, [r7, #4]
    return data_ - ReadScalar<soffset_t>(data_);
 80010d0:	687c      	ldr	r4, [r7, #4]
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	4618      	mov	r0, r3
 80010d6:	f000 fd0d 	bl	8001af4 <_ZN11flatbuffers10ReadScalarIlEET_PKv>
 80010da:	4603      	mov	r3, r0
 80010dc:	425b      	negs	r3, r3
 80010de:	4423      	add	r3, r4
  }
 80010e0:	4618      	mov	r0, r3
 80010e2:	370c      	adds	r7, #12
 80010e4:	46bd      	mov	sp, r7
 80010e6:	bd90      	pop	{r4, r7, pc}

080010e8 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>:

  // This gets the field offset for any of the functions below it, or 0
  // if the field was not present.
  voffset_t GetOptionalFieldOffset(voffset_t field) const {
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b084      	sub	sp, #16
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
 80010f0:	460b      	mov	r3, r1
 80010f2:	807b      	strh	r3, [r7, #2]
    // The vtable offset is always at the start.
    auto vtable = GetVTable();
 80010f4:	6878      	ldr	r0, [r7, #4]
 80010f6:	f7ff ffe7 	bl	80010c8 <_ZNK11flatbuffers5Table9GetVTableEv>
 80010fa:	60f8      	str	r0, [r7, #12]
    // The first element is the size of the vtable (fields + type id + itself).
    auto vtsize = ReadScalar<voffset_t>(vtable);
 80010fc:	68f8      	ldr	r0, [r7, #12]
 80010fe:	f000 fcdd 	bl	8001abc <_ZN11flatbuffers10ReadScalarItEET_PKv>
 8001102:	4603      	mov	r3, r0
 8001104:	817b      	strh	r3, [r7, #10]
    // If the field we're accessing is outside the vtable, we're reading older
    // data, so it's the same as if the offset was 0 (not present).
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
 8001106:	887a      	ldrh	r2, [r7, #2]
 8001108:	897b      	ldrh	r3, [r7, #10]
 800110a:	429a      	cmp	r2, r3
 800110c:	d207      	bcs.n	800111e <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt+0x36>
 800110e:	887b      	ldrh	r3, [r7, #2]
 8001110:	68fa      	ldr	r2, [r7, #12]
 8001112:	4413      	add	r3, r2
 8001114:	4618      	mov	r0, r3
 8001116:	f000 fcd1 	bl	8001abc <_ZN11flatbuffers10ReadScalarItEET_PKv>
 800111a:	4603      	mov	r3, r0
 800111c:	e000      	b.n	8001120 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt+0x38>
 800111e:	2300      	movs	r3, #0
  }
 8001120:	4618      	mov	r0, r3
 8001122:	3710      	adds	r7, #16
 8001124:	46bd      	mov	sp, r7
 8001126:	bd80      	pop	{r7, pc}

08001128 <_ZNK6tflite5Model7versionEv>:
    VT_BUFFERS = 12,
    VT_METADATA_BUFFER = 14,
    VT_METADATA = 16,
    VT_SIGNATURE_DEFS = 18
  };
  uint32_t version() const {
 8001128:	b580      	push	{r7, lr}
 800112a:	b082      	sub	sp, #8
 800112c:	af00      	add	r7, sp, #0
 800112e:	6078      	str	r0, [r7, #4]
    return GetField<uint32_t>(VT_VERSION, 0);
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	2200      	movs	r2, #0
 8001134:	2104      	movs	r1, #4
 8001136:	4618      	mov	r0, r3
 8001138:	f000 fcea 	bl	8001b10 <_ZNK11flatbuffers5Table8GetFieldImEET_tS2_>
 800113c:	4603      	mov	r3, r0
  }
 800113e:	4618      	mov	r0, r3
 8001140:	3708      	adds	r7, #8
 8001142:	46bd      	mov	sp, r7
 8001144:	bd80      	pop	{r7, pc}

08001146 <_ZN6tflite8GetModelEPKv>:
  }
  value = nullptr;
  type = BuiltinOptions_NONE;
}

inline const tflite::Model *GetModel(const void *buf) {
 8001146:	b580      	push	{r7, lr}
 8001148:	b082      	sub	sp, #8
 800114a:	af00      	add	r7, sp, #0
 800114c:	6078      	str	r0, [r7, #4]
  return flatbuffers::GetRoot<tflite::Model>(buf);
 800114e:	6878      	ldr	r0, [r7, #4]
 8001150:	f000 fcfc 	bl	8001b4c <_ZN11flatbuffers7GetRootIN6tflite5ModelEEEPKT_PKv>
 8001154:	4603      	mov	r3, r0
}
 8001156:	4618      	mov	r0, r3
 8001158:	3708      	adds	r7, #8
 800115a:	46bd      	mov	sp, r7
 800115c:	bd80      	pop	{r7, pc}

0800115e <_ZNSt12_Vector_baseISt10unique_ptrI14TfLiteDelegatePFvPS1_EESaIS5_EEC1Ev>:
      allocator_type
      get_allocator() const _GLIBCXX_NOEXCEPT
      { return allocator_type(_M_get_Tp_allocator()); }

#if __cplusplus >= 201103L
      _Vector_base() = default;
 800115e:	b580      	push	{r7, lr}
 8001160:	b082      	sub	sp, #8
 8001162:	af00      	add	r7, sp, #0
 8001164:	6078      	str	r0, [r7, #4]
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	4618      	mov	r0, r3
 800116a:	f000 fcfb 	bl	8001b64 <_ZNSt12_Vector_baseISt10unique_ptrI14TfLiteDelegatePFvPS1_EESaIS5_EE12_Vector_implC1Ev>
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	4618      	mov	r0, r3
 8001172:	3708      	adds	r7, #8
 8001174:	46bd      	mov	sp, r7
 8001176:	bd80      	pop	{r7, pc}

08001178 <_ZNSt6vectorISt10unique_ptrI14TfLiteDelegatePFvPS1_EESaIS5_EEC1Ev>:

      /**
       *  @brief  Creates a %vector with no elements.
       */
#if __cplusplus >= 201103L
      vector() = default;
 8001178:	b580      	push	{r7, lr}
 800117a:	b082      	sub	sp, #8
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	4618      	mov	r0, r3
 8001184:	f7ff ffeb 	bl	800115e <_ZNSt12_Vector_baseISt10unique_ptrI14TfLiteDelegatePFvPS1_EESaIS5_EEC1Ev>
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	4618      	mov	r0, r3
 800118c:	3708      	adds	r7, #8
 800118e:	46bd      	mov	sp, r7
 8001190:	bd80      	pop	{r7, pc}

08001192 <_ZNK6tflite10OpResolver12GetDelegatesEi>:
  // Returns optional delegates for resolving and handling ops in the flatbuffer
  // model. This may be used in addition to the standard TfLiteRegistration
  // lookup for graph resolution.
  using TfLiteDelegatePtrVector =
      std::vector<std::unique_ptr<TfLiteDelegate, void (*)(TfLiteDelegate*)>>;
  virtual TfLiteDelegatePtrVector GetDelegates(int num_threads) const {
 8001192:	b580      	push	{r7, lr}
 8001194:	b084      	sub	sp, #16
 8001196:	af00      	add	r7, sp, #0
 8001198:	60f8      	str	r0, [r7, #12]
 800119a:	60b9      	str	r1, [r7, #8]
 800119c:	607a      	str	r2, [r7, #4]
    return TfLiteDelegatePtrVector();
 800119e:	68fb      	ldr	r3, [r7, #12]
 80011a0:	2200      	movs	r2, #0
 80011a2:	601a      	str	r2, [r3, #0]
 80011a4:	68fb      	ldr	r3, [r7, #12]
 80011a6:	2200      	movs	r2, #0
 80011a8:	605a      	str	r2, [r3, #4]
 80011aa:	68fb      	ldr	r3, [r7, #12]
 80011ac:	2200      	movs	r2, #0
 80011ae:	609a      	str	r2, [r3, #8]
 80011b0:	68f8      	ldr	r0, [r7, #12]
 80011b2:	f7ff ffe1 	bl	8001178 <_ZNSt6vectorISt10unique_ptrI14TfLiteDelegatePFvPS1_EESaIS5_EEC1Ev>
  }
 80011b6:	68f8      	ldr	r0, [r7, #12]
 80011b8:	3710      	adds	r7, #16
 80011ba:	46bd      	mov	sp, r7
 80011bc:	bd80      	pop	{r7, pc}
	...

080011c0 <_ZN6tflite10OpResolverD1Ev>:

  virtual ~OpResolver() {}
 80011c0:	b480      	push	{r7}
 80011c2:	b083      	sub	sp, #12
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]
 80011c8:	4a04      	ldr	r2, [pc, #16]	; (80011dc <_ZN6tflite10OpResolverD1Ev+0x1c>)
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	601a      	str	r2, [r3, #0]
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	4618      	mov	r0, r3
 80011d2:	370c      	adds	r7, #12
 80011d4:	46bd      	mov	sp, r7
 80011d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011da:	4770      	bx	lr
 80011dc:	080172ec 	.word	0x080172ec

080011e0 <_ZN6tflite10OpResolverD0Ev>:
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b082      	sub	sp, #8
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]
 80011e8:	6878      	ldr	r0, [r7, #4]
 80011ea:	f7ff ffe9 	bl	80011c0 <_ZN6tflite10OpResolverD1Ev>
 80011ee:	2104      	movs	r1, #4
 80011f0:	6878      	ldr	r0, [r7, #4]
 80011f2:	f009 fe5c 	bl	800aeae <_ZdlPvj>
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	4618      	mov	r0, r3
 80011fa:	3708      	adds	r7, #8
 80011fc:	46bd      	mov	sp, r7
 80011fe:	bd80      	pop	{r7, pc}

08001200 <_ZNK6tflite10OpResolver24MayContainUserDefinedOpsEv>:
  /// user-defined ops can't be guaranteed.
  ///
  /// Note that "user-defined" ops are not the same as "custom" ops;
  /// BuiltinOpResolver may support certain "custom" ops, in addition to
  /// "builtin" ops, and may not support all of the "builtin" op enum values.
  virtual bool MayContainUserDefinedOps() const { return true; }
 8001200:	b480      	push	{r7}
 8001202:	b083      	sub	sp, #12
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
 8001208:	2301      	movs	r3, #1
 800120a:	4618      	mov	r0, r3
 800120c:	370c      	adds	r7, #12
 800120e:	46bd      	mov	sp, r7
 8001210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001214:	4770      	bx	lr

08001216 <_ZNK6tflite15MicroOpResolver6FindOpENS_15BuiltinOperatorEi>:
  // name.
  virtual const TfLiteRegistration* FindOp(const char* op) const = 0;

  // This implementation exists for compatibility with the OpResolver base class
  // and disregards the version parameter.
  const TfLiteRegistration* FindOp(BuiltinOperator op,
 8001216:	b580      	push	{r7, lr}
 8001218:	b084      	sub	sp, #16
 800121a:	af00      	add	r7, sp, #0
 800121c:	60f8      	str	r0, [r7, #12]
 800121e:	460b      	mov	r3, r1
 8001220:	607a      	str	r2, [r7, #4]
 8001222:	72fb      	strb	r3, [r7, #11]
                                   int version) const final {
    return FindOp(op);
 8001224:	68fb      	ldr	r3, [r7, #12]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	3318      	adds	r3, #24
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	7afa      	ldrb	r2, [r7, #11]
 800122e:	4611      	mov	r1, r2
 8001230:	68f8      	ldr	r0, [r7, #12]
 8001232:	4798      	blx	r3
 8001234:	4603      	mov	r3, r0
  }
 8001236:	4618      	mov	r0, r3
 8001238:	3710      	adds	r7, #16
 800123a:	46bd      	mov	sp, r7
 800123c:	bd80      	pop	{r7, pc}

0800123e <_ZNK6tflite15MicroOpResolver6FindOpEPKci>:

  // This implementation exists for compatibility with the OpResolver base class
  // and disregards the version parameter.
  const TfLiteRegistration* FindOp(const char* op, int version) const final {
 800123e:	b580      	push	{r7, lr}
 8001240:	b084      	sub	sp, #16
 8001242:	af00      	add	r7, sp, #0
 8001244:	60f8      	str	r0, [r7, #12]
 8001246:	60b9      	str	r1, [r7, #8]
 8001248:	607a      	str	r2, [r7, #4]
    return FindOp(op);
 800124a:	68fb      	ldr	r3, [r7, #12]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	331c      	adds	r3, #28
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	68b9      	ldr	r1, [r7, #8]
 8001254:	68f8      	ldr	r0, [r7, #12]
 8001256:	4798      	blx	r3
 8001258:	4603      	mov	r3, r0
  }
 800125a:	4618      	mov	r0, r3
 800125c:	3710      	adds	r7, #16
 800125e:	46bd      	mov	sp, r7
 8001260:	bd80      	pop	{r7, pc}
	...

08001264 <_ZN6tflite15MicroOpResolverD1Ev>:

  // Returns the operator specific parsing function for the OpData for a
  // BuiltinOperator (if registered), else nullptr.
  virtual BuiltinParseFunction GetOpDataParser(BuiltinOperator op) const = 0;

  ~MicroOpResolver() override {}
 8001264:	b580      	push	{r7, lr}
 8001266:	b082      	sub	sp, #8
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]
 800126c:	4a05      	ldr	r2, [pc, #20]	; (8001284 <_ZN6tflite15MicroOpResolverD1Ev+0x20>)
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	601a      	str	r2, [r3, #0]
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	4618      	mov	r0, r3
 8001276:	f7ff ffa3 	bl	80011c0 <_ZN6tflite10OpResolverD1Ev>
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	4618      	mov	r0, r3
 800127e:	3708      	adds	r7, #8
 8001280:	46bd      	mov	sp, r7
 8001282:	bd80      	pop	{r7, pc}
 8001284:	080172c0 	.word	0x080172c0

08001288 <_ZN6tflite15MicroOpResolverD0Ev>:
 8001288:	b580      	push	{r7, lr}
 800128a:	b082      	sub	sp, #8
 800128c:	af00      	add	r7, sp, #0
 800128e:	6078      	str	r0, [r7, #4]
 8001290:	6878      	ldr	r0, [r7, #4]
 8001292:	f7ff ffe7 	bl	8001264 <_ZN6tflite15MicroOpResolverD1Ev>
 8001296:	2104      	movs	r1, #4
 8001298:	6878      	ldr	r0, [r7, #4]
 800129a:	f009 fe08 	bl	800aeae <_ZdlPvj>
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	4618      	mov	r0, r3
 80012a2:	3708      	adds	r7, #8
 80012a4:	46bd      	mov	sp, r7
 80012a6:	bd80      	pop	{r7, pc}

080012a8 <__tcf_0>:
  /* USER CODE BEGIN 2 */

	// Set up logging. Google style is to avoid globals or statics because of
	  // lifetime uncertainty, but since this has a trivial destructor it's okay.
	  // NOLINTNEXTLINE(runtime-global-variables)
	  static tflite::MicroErrorReporter micro_error_reporter;
 80012a8:	b580      	push	{r7, lr}
 80012aa:	af00      	add	r7, sp, #0
 80012ac:	4801      	ldr	r0, [pc, #4]	; (80012b4 <__tcf_0+0xc>)
 80012ae:	f7ff fecf 	bl	8001050 <_ZN6tflite18MicroErrorReporterD1Ev>
 80012b2:	bd80      	pop	{r7, pc}
 80012b4:	2000002c 	.word	0x2000002c

080012b8 <__tcf_1>:
	   // An easier approach is to just use the AllOpsResolver, but this will
	   // incur some penalty in code space for op implementations that are not
	   // needed by this graph.


	   static tflite::MicroMutableOpResolver<1> micro_mutable_op_resolver;
 80012b8:	b580      	push	{r7, lr}
 80012ba:	af00      	add	r7, sp, #0
 80012bc:	4801      	ldr	r0, [pc, #4]	; (80012c4 <__tcf_1+0xc>)
 80012be:	f000 fdb1 	bl	8001e24 <_ZN6tflite22MicroMutableOpResolverILj1EED1Ev>
 80012c2:	bd80      	pop	{r7, pc}
 80012c4:	20001f54 	.word	0x20001f54

080012c8 <main>:
{
 80012c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80012ca:	b0cb      	sub	sp, #300	; 0x12c
 80012cc:	af08      	add	r7, sp, #32
  HAL_Init();
 80012ce:	f001 f85b 	bl	8002388 <HAL_Init>
  SystemClock_Config();
 80012d2:	f000 fa39 	bl	8001748 <_Z18SystemClock_Configv>
  MX_GPIO_Init();
 80012d6:	f000 fb5d 	bl	8001994 <_ZL12MX_GPIO_Initv>
  MX_TIM10_Init();
 80012da:	f000 faa9 	bl	8001830 <_ZL13MX_TIM10_Initv>
  MX_USART1_UART_Init();
 80012de:	f000 facf 	bl	8001880 <_ZL19MX_USART1_UART_Initv>
  MX_USART2_UART_Init();
 80012e2:	f000 fafb 	bl	80018dc <_ZL19MX_USART2_UART_Initv>
  MX_USART6_UART_Init();
 80012e6:	f000 fb27 	bl	8001938 <_ZL19MX_USART6_UART_Initv>
	  static tflite::MicroErrorReporter micro_error_reporter;
 80012ea:	4ba0      	ldr	r3, [pc, #640]	; (800156c <main+0x2a4>)
 80012ec:	781b      	ldrb	r3, [r3, #0]
 80012ee:	f3bf 8f5b 	dmb	ish
 80012f2:	b2db      	uxtb	r3, r3
 80012f4:	f003 0301 	and.w	r3, r3, #1
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	bf0c      	ite	eq
 80012fc:	2301      	moveq	r3, #1
 80012fe:	2300      	movne	r3, #0
 8001300:	b2db      	uxtb	r3, r3
 8001302:	2b00      	cmp	r3, #0
 8001304:	d010      	beq.n	8001328 <main+0x60>
 8001306:	4899      	ldr	r0, [pc, #612]	; (800156c <main+0x2a4>)
 8001308:	f009 fdd5 	bl	800aeb6 <__cxa_guard_acquire>
 800130c:	4603      	mov	r3, r0
 800130e:	2b00      	cmp	r3, #0
 8001310:	bf14      	ite	ne
 8001312:	2301      	movne	r3, #1
 8001314:	2300      	moveq	r3, #0
 8001316:	b2db      	uxtb	r3, r3
 8001318:	2b00      	cmp	r3, #0
 800131a:	d005      	beq.n	8001328 <main+0x60>
 800131c:	4893      	ldr	r0, [pc, #588]	; (800156c <main+0x2a4>)
 800131e:	f009 fdd6 	bl	800aece <__cxa_guard_release>
 8001322:	4893      	ldr	r0, [pc, #588]	; (8001570 <main+0x2a8>)
 8001324:	f009 fed0 	bl	800b0c8 <atexit>
	  error_reporter = &micro_error_reporter;
 8001328:	4b92      	ldr	r3, [pc, #584]	; (8001574 <main+0x2ac>)
 800132a:	4a93      	ldr	r2, [pc, #588]	; (8001578 <main+0x2b0>)
 800132c:	601a      	str	r2, [r3, #0]
	error_reporter->Report("\n*****Starting Sound Recognition Program for Sparkfun Edge*****\n");
 800132e:	4b91      	ldr	r3, [pc, #580]	; (8001574 <main+0x2ac>)
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	4992      	ldr	r1, [pc, #584]	; (800157c <main+0x2b4>)
 8001334:	4618      	mov	r0, r3
 8001336:	f002 fc31 	bl	8003b9c <_ZN6tflite13ErrorReporter6ReportEPKcz>
	  model = tflite::GetModel(g_tiny_conv_micro_features_model_data);
 800133a:	4891      	ldr	r0, [pc, #580]	; (8001580 <main+0x2b8>)
 800133c:	f7ff ff03 	bl	8001146 <_ZN6tflite8GetModelEPKv>
 8001340:	4603      	mov	r3, r0
 8001342:	4a90      	ldr	r2, [pc, #576]	; (8001584 <main+0x2bc>)
 8001344:	6013      	str	r3, [r2, #0]
	  if (model->version() != TFLITE_SCHEMA_VERSION) {
 8001346:	4b8f      	ldr	r3, [pc, #572]	; (8001584 <main+0x2bc>)
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	4618      	mov	r0, r3
 800134c:	f7ff feec 	bl	8001128 <_ZNK6tflite5Model7versionEv>
 8001350:	4603      	mov	r3, r0
 8001352:	2b03      	cmp	r3, #3
 8001354:	bf14      	ite	ne
 8001356:	2301      	movne	r3, #1
 8001358:	2300      	moveq	r3, #0
 800135a:	b2db      	uxtb	r3, r3
 800135c:	2b00      	cmp	r3, #0
 800135e:	d00c      	beq.n	800137a <main+0xb2>
	    error_reporter->Report(
 8001360:	4b84      	ldr	r3, [pc, #528]	; (8001574 <main+0x2ac>)
 8001362:	681c      	ldr	r4, [r3, #0]
 8001364:	4b87      	ldr	r3, [pc, #540]	; (8001584 <main+0x2bc>)
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	4618      	mov	r0, r3
 800136a:	f7ff fedd 	bl	8001128 <_ZNK6tflite5Model7versionEv>
 800136e:	4602      	mov	r2, r0
 8001370:	2303      	movs	r3, #3
 8001372:	4985      	ldr	r1, [pc, #532]	; (8001588 <main+0x2c0>)
 8001374:	4620      	mov	r0, r4
 8001376:	f002 fc11 	bl	8003b9c <_ZN6tflite13ErrorReporter6ReportEPKcz>
	   static tflite::MicroMutableOpResolver<1> micro_mutable_op_resolver;
 800137a:	4b84      	ldr	r3, [pc, #528]	; (800158c <main+0x2c4>)
 800137c:	781b      	ldrb	r3, [r3, #0]
 800137e:	f3bf 8f5b 	dmb	ish
 8001382:	b2db      	uxtb	r3, r3
 8001384:	f003 0301 	and.w	r3, r3, #1
 8001388:	2b00      	cmp	r3, #0
 800138a:	bf0c      	ite	eq
 800138c:	2301      	moveq	r3, #1
 800138e:	2300      	movne	r3, #0
 8001390:	b2db      	uxtb	r3, r3
 8001392:	2b00      	cmp	r3, #0
 8001394:	d014      	beq.n	80013c0 <main+0xf8>
 8001396:	487d      	ldr	r0, [pc, #500]	; (800158c <main+0x2c4>)
 8001398:	f009 fd8d 	bl	800aeb6 <__cxa_guard_acquire>
 800139c:	4603      	mov	r3, r0
 800139e:	2b00      	cmp	r3, #0
 80013a0:	bf14      	ite	ne
 80013a2:	2301      	movne	r3, #1
 80013a4:	2300      	moveq	r3, #0
 80013a6:	b2db      	uxtb	r3, r3
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d009      	beq.n	80013c0 <main+0xf8>
 80013ac:	2100      	movs	r1, #0
 80013ae:	4878      	ldr	r0, [pc, #480]	; (8001590 <main+0x2c8>)
 80013b0:	f000 fc0a 	bl	8001bc8 <_ZN6tflite22MicroMutableOpResolverILj1EEC1EPNS_13ErrorReporterE>
 80013b4:	4875      	ldr	r0, [pc, #468]	; (800158c <main+0x2c4>)
 80013b6:	f009 fd8a 	bl	800aece <__cxa_guard_release>
 80013ba:	4876      	ldr	r0, [pc, #472]	; (8001594 <main+0x2cc>)
 80013bc:	f009 fe84 	bl	800b0c8 <atexit>


	   tflite_status = micro_mutable_op_resolver.AddFullyConnected();
 80013c0:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80013c4:	4618      	mov	r0, r3
 80013c6:	f009 f875 	bl	800a4b4 <_ZN6tflite24Register_FULLY_CONNECTEDEv>
 80013ca:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80013ce:	4619      	mov	r1, r3
 80013d0:	486f      	ldr	r0, [pc, #444]	; (8001590 <main+0x2c8>)
 80013d2:	f000 fc15 	bl	8001c00 <_ZN6tflite22MicroMutableOpResolverILj1EE17AddFullyConnectedERK18TfLiteRegistration>
 80013d6:	4603      	mov	r3, r0
 80013d8:	f887 30ff 	strb.w	r3, [r7, #255]	; 0xff
	   if (tflite_status != kTfLiteOk)
 80013dc:	f897 30ff 	ldrb.w	r3, [r7, #255]	; 0xff
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d006      	beq.n	80013f2 <main+0x12a>
	   {
	     error_reporter->Report("Could not add FULLY CONNECTED op");
 80013e4:	4b63      	ldr	r3, [pc, #396]	; (8001574 <main+0x2ac>)
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	496b      	ldr	r1, [pc, #428]	; (8001598 <main+0x2d0>)
 80013ea:	4618      	mov	r0, r3
 80013ec:	f002 fbd6 	bl	8003b9c <_ZN6tflite13ErrorReporter6ReportEPKcz>
	     while(1);
 80013f0:	e7fe      	b.n	80013f0 <main+0x128>


	   // Build an interpreter to run the model with.
	   tflite::MicroInterpreter interpreter(model, micro_mutable_op_resolver,
	                                     tensor_arena, kTensorArenaSize,
	                                     error_reporter);
 80013f2:	4b64      	ldr	r3, [pc, #400]	; (8001584 <main+0x2bc>)
 80013f4:	6819      	ldr	r1, [r3, #0]
 80013f6:	4b5f      	ldr	r3, [pc, #380]	; (8001574 <main+0x2ac>)
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	f107 000c 	add.w	r0, r7, #12
 80013fe:	2200      	movs	r2, #0
 8001400:	9202      	str	r2, [sp, #8]
 8001402:	9301      	str	r3, [sp, #4]
 8001404:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8001408:	9300      	str	r3, [sp, #0]
 800140a:	4b64      	ldr	r3, [pc, #400]	; (800159c <main+0x2d4>)
 800140c:	4a60      	ldr	r2, [pc, #384]	; (8001590 <main+0x2c8>)
 800140e:	f006 ff65 	bl	80082dc <_ZN6tflite16MicroInterpreterC1EPKNS_5ModelERKNS_15MicroOpResolverEPhjPNS_13ErrorReporterEPNS_13MicroProfilerE>


	   TfLiteStatus allocate_status = interpreter.AllocateTensors();
 8001412:	f107 030c 	add.w	r3, r7, #12
 8001416:	4618      	mov	r0, r3
 8001418:	f007 f94c 	bl	80086b4 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv>
 800141c:	4603      	mov	r3, r0
 800141e:	f887 30fe 	strb.w	r3, [r7, #254]	; 0xfe

	   if (allocate_status != kTfLiteOk) {
 8001422:	f897 30fe 	ldrb.w	r3, [r7, #254]	; 0xfe
 8001426:	2b00      	cmp	r3, #0
 8001428:	d005      	beq.n	8001436 <main+0x16e>
	     error_reporter->Report("AllocateTensors() failed");
 800142a:	4b52      	ldr	r3, [pc, #328]	; (8001574 <main+0x2ac>)
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	495c      	ldr	r1, [pc, #368]	; (80015a0 <main+0x2d8>)
 8001430:	4618      	mov	r0, r3
 8001432:	f002 fbb3 	bl	8003b9c <_ZN6tflite13ErrorReporter6ReportEPKcz>
	   }


	   // Get information about the memory area to use for the model's input.
	     //model_input = interpreter->input(0);
	     model_input = interpreter.input(0);
 8001436:	f107 030c 	add.w	r3, r7, #12
 800143a:	2100      	movs	r1, #0
 800143c:	4618      	mov	r0, r3
 800143e:	f007 fad9 	bl	80089f4 <_ZN6tflite16MicroInterpreter5inputEj>
 8001442:	4603      	mov	r3, r0
 8001444:	4a57      	ldr	r2, [pc, #348]	; (80015a4 <main+0x2dc>)
 8001446:	6013      	str	r3, [r2, #0]

	     error_reporter->Report("model dim size=%d", model_input->dims->size);
 8001448:	4b4a      	ldr	r3, [pc, #296]	; (8001574 <main+0x2ac>)
 800144a:	6818      	ldr	r0, [r3, #0]
 800144c:	4b55      	ldr	r3, [pc, #340]	; (80015a4 <main+0x2dc>)
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	689b      	ldr	r3, [r3, #8]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	461a      	mov	r2, r3
 8001456:	4954      	ldr	r1, [pc, #336]	; (80015a8 <main+0x2e0>)
 8001458:	f002 fba0 	bl	8003b9c <_ZN6tflite13ErrorReporter6ReportEPKcz>
	     error_reporter->Report("model dim data0=%d", model_input->dims->data[0]);
 800145c:	4b45      	ldr	r3, [pc, #276]	; (8001574 <main+0x2ac>)
 800145e:	6818      	ldr	r0, [r3, #0]
 8001460:	4b50      	ldr	r3, [pc, #320]	; (80015a4 <main+0x2dc>)
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	689b      	ldr	r3, [r3, #8]
 8001466:	685b      	ldr	r3, [r3, #4]
 8001468:	461a      	mov	r2, r3
 800146a:	4950      	ldr	r1, [pc, #320]	; (80015ac <main+0x2e4>)
 800146c:	f002 fb96 	bl	8003b9c <_ZN6tflite13ErrorReporter6ReportEPKcz>
	     error_reporter->Report("model dim data1=%d", model_input->dims->data[1]);
 8001470:	4b40      	ldr	r3, [pc, #256]	; (8001574 <main+0x2ac>)
 8001472:	6818      	ldr	r0, [r3, #0]
 8001474:	4b4b      	ldr	r3, [pc, #300]	; (80015a4 <main+0x2dc>)
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	689b      	ldr	r3, [r3, #8]
 800147a:	689b      	ldr	r3, [r3, #8]
 800147c:	461a      	mov	r2, r3
 800147e:	494c      	ldr	r1, [pc, #304]	; (80015b0 <main+0x2e8>)
 8001480:	f002 fb8c 	bl	8003b9c <_ZN6tflite13ErrorReporter6ReportEPKcz>
	     error_reporter->Report("model dim data2=%d", model_input->dims->data[2]);
 8001484:	4b3b      	ldr	r3, [pc, #236]	; (8001574 <main+0x2ac>)
 8001486:	6818      	ldr	r0, [r3, #0]
 8001488:	4b46      	ldr	r3, [pc, #280]	; (80015a4 <main+0x2dc>)
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	689b      	ldr	r3, [r3, #8]
 800148e:	68db      	ldr	r3, [r3, #12]
 8001490:	461a      	mov	r2, r3
 8001492:	4948      	ldr	r1, [pc, #288]	; (80015b4 <main+0x2ec>)
 8001494:	f002 fb82 	bl	8003b9c <_ZN6tflite13ErrorReporter6ReportEPKcz>
	     error_reporter->Report("model type=%d", model_input->type);
 8001498:	4b36      	ldr	r3, [pc, #216]	; (8001574 <main+0x2ac>)
 800149a:	6818      	ldr	r0, [r3, #0]
 800149c:	4b41      	ldr	r3, [pc, #260]	; (80015a4 <main+0x2dc>)
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	781b      	ldrb	r3, [r3, #0]
 80014a2:	461a      	mov	r2, r3
 80014a4:	4944      	ldr	r1, [pc, #272]	; (80015b8 <main+0x2f0>)
 80014a6:	f002 fb79 	bl	8003b9c <_ZN6tflite13ErrorReporter6ReportEPKcz>


	     if ((model_input->dims->size != 4) || (model_input->dims->data[0] != 1) ||
 80014aa:	4b3e      	ldr	r3, [pc, #248]	; (80015a4 <main+0x2dc>)
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	689b      	ldr	r3, [r3, #8]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	2b04      	cmp	r3, #4
 80014b4:	d116      	bne.n	80014e4 <main+0x21c>
 80014b6:	4b3b      	ldr	r3, [pc, #236]	; (80015a4 <main+0x2dc>)
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	689b      	ldr	r3, [r3, #8]
 80014bc:	685b      	ldr	r3, [r3, #4]
 80014be:	2b01      	cmp	r3, #1
 80014c0:	d110      	bne.n	80014e4 <main+0x21c>
	         (model_input->dims->data[1] != kFeatureSliceCount) ||
 80014c2:	4b38      	ldr	r3, [pc, #224]	; (80015a4 <main+0x2dc>)
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	689b      	ldr	r3, [r3, #8]
 80014c8:	689b      	ldr	r3, [r3, #8]
	     if ((model_input->dims->size != 4) || (model_input->dims->data[0] != 1) ||
 80014ca:	2b31      	cmp	r3, #49	; 0x31
 80014cc:	d10a      	bne.n	80014e4 <main+0x21c>
	         (model_input->dims->data[2] != kFeatureSliceSize) ||
 80014ce:	4b35      	ldr	r3, [pc, #212]	; (80015a4 <main+0x2dc>)
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	689b      	ldr	r3, [r3, #8]
 80014d4:	68db      	ldr	r3, [r3, #12]
	         (model_input->dims->data[1] != kFeatureSliceCount) ||
 80014d6:	2b28      	cmp	r3, #40	; 0x28
 80014d8:	d104      	bne.n	80014e4 <main+0x21c>
	         (model_input->type != kTfLiteUInt8)) {
 80014da:	4b32      	ldr	r3, [pc, #200]	; (80015a4 <main+0x2dc>)
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	781b      	ldrb	r3, [r3, #0]
	         (model_input->dims->data[2] != kFeatureSliceSize) ||
 80014e0:	2b03      	cmp	r3, #3
 80014e2:	d005      	beq.n	80014f0 <main+0x228>
	       error_reporter->Report("Bad input tensor parameters in model");
 80014e4:	4b23      	ldr	r3, [pc, #140]	; (8001574 <main+0x2ac>)
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	4934      	ldr	r1, [pc, #208]	; (80015bc <main+0x2f4>)
 80014ea:	4618      	mov	r0, r3
 80014ec:	f002 fb56 	bl	8003b9c <_ZN6tflite13ErrorReporter6ReportEPKcz>
	 //      return;
	     }



	     for (int i = 0; i < BABY_TOTAL_FILE_NUMBER ; i++)
 80014f0:	2300      	movs	r3, #0
 80014f2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80014f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80014fa:	2b0a      	cmp	r3, #10
 80014fc:	f300 810a 	bgt.w	8001714 <main+0x44c>
	     {
	         error_reporter->Report("Test Number is %d", i);
 8001500:	4b1c      	ldr	r3, [pc, #112]	; (8001574 <main+0x2ac>)
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 8001508:	492d      	ldr	r1, [pc, #180]	; (80015c0 <main+0x2f8>)
 800150a:	4618      	mov	r0, r3
 800150c:	f002 fb46 	bl	8003b9c <_ZN6tflite13ErrorReporter6ReportEPKcz>
	         error_reporter->Report("*****************");
 8001510:	4b18      	ldr	r3, [pc, #96]	; (8001574 <main+0x2ac>)
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	492b      	ldr	r1, [pc, #172]	; (80015c4 <main+0x2fc>)
 8001516:	4618      	mov	r0, r3
 8001518:	f002 fb40 	bl	8003b9c <_ZN6tflite13ErrorReporter6ReportEPKcz>
	         error_reporter->Report("Testing input data crying baby");
 800151c:	4b15      	ldr	r3, [pc, #84]	; (8001574 <main+0x2ac>)
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	4929      	ldr	r1, [pc, #164]	; (80015c8 <main+0x300>)
 8001522:	4618      	mov	r0, r3
 8001524:	f002 fb3a 	bl	8003b9c <_ZN6tflite13ErrorReporter6ReportEPKcz>


	       for (int j = 0; j < (int) model_input->bytes; j++) {
 8001528:	2300      	movs	r3, #0
 800152a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800152e:	4b1d      	ldr	r3, [pc, #116]	; (80015a4 <main+0x2dc>)
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	699b      	ldr	r3, [r3, #24]
 8001534:	461a      	mov	r2, r3
 8001536:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800153a:	4293      	cmp	r3, r2
 800153c:	da48      	bge.n	80015d0 <main+0x308>
	         //   model_input->data.uint8[j] =  g_door_knock_sounds_arrays[i][j];
	         //   model_input->data.uint8[j] =  g_gun_shot_sounds_arrays[i][j];
	         //     model_input->data.uint8[j] =  g_clapping_sounds_arrays[i][j];
	         //     model_input->data.uint8[j] =  g_clock_alarm_sounds_arrays[i][j];
	        //      model_input->data.uint8[j] =  g_coughing_sounds_arrays[i][j];
	              model_input->data.uint8[j] =  g_dog_sounds_arrays[i][j];
 800153e:	4a23      	ldr	r2, [pc, #140]	; (80015cc <main+0x304>)
 8001540:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8001544:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001548:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800154c:	441a      	add	r2, r3
 800154e:	4b15      	ldr	r3, [pc, #84]	; (80015a4 <main+0x2dc>)
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	6859      	ldr	r1, [r3, #4]
 8001554:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8001558:	440b      	add	r3, r1
 800155a:	7812      	ldrb	r2, [r2, #0]
 800155c:	701a      	strb	r2, [r3, #0]
	       for (int j = 0; j < (int) model_input->bytes; j++) {
 800155e:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8001562:	3301      	adds	r3, #1
 8001564:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8001568:	e7e1      	b.n	800152e <main+0x266>
 800156a:	bf00      	nop
 800156c:	20001f50 	.word	0x20001f50
 8001570:	080012a9 	.word	0x080012a9
 8001574:	20000344 	.word	0x20000344
 8001578:	2000002c 	.word	0x2000002c
 800157c:	0800dcb4 	.word	0x0800dcb4
 8001580:	08017330 	.word	0x08017330
 8001584:	20000348 	.word	0x20000348
 8001588:	0800dcf8 	.word	0x0800dcf8
 800158c:	20001f8c 	.word	0x20001f8c
 8001590:	20001f54 	.word	0x20001f54
 8001594:	080012b9 	.word	0x080012b9
 8001598:	0800dd40 	.word	0x0800dd40
 800159c:	20000350 	.word	0x20000350
 80015a0:	0800dd64 	.word	0x0800dd64
 80015a4:	2000034c 	.word	0x2000034c
 80015a8:	0800dd80 	.word	0x0800dd80
 80015ac:	0800dd94 	.word	0x0800dd94
 80015b0:	0800dda8 	.word	0x0800dda8
 80015b4:	0800ddbc 	.word	0x0800ddbc
 80015b8:	0800ddd0 	.word	0x0800ddd0
 80015bc:	0800dde0 	.word	0x0800dde0
 80015c0:	0800de08 	.word	0x0800de08
 80015c4:	0800de1c 	.word	0x0800de1c
 80015c8:	0800de30 	.word	0x0800de30
 80015cc:	20000000 	.word	0x20000000

	         }


	       // Run the model on the spectrogram input and make sure it succeeds.
	       TfLiteStatus invoke_status = interpreter.Invoke();
 80015d0:	f107 030c 	add.w	r3, r7, #12
 80015d4:	4618      	mov	r0, r3
 80015d6:	f007 f9db 	bl	8008990 <_ZN6tflite16MicroInterpreter6InvokeEv>
 80015da:	4603      	mov	r3, r0
 80015dc:	f887 30fd 	strb.w	r3, [r7, #253]	; 0xfd
	       if (invoke_status != kTfLiteOk) {
 80015e0:	f897 30fd 	ldrb.w	r3, [r7, #253]	; 0xfd
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d005      	beq.n	80015f4 <main+0x32c>
	         error_reporter->Report("Invoke failed");
 80015e8:	4b51      	ldr	r3, [pc, #324]	; (8001730 <main+0x468>)
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	4951      	ldr	r1, [pc, #324]	; (8001734 <main+0x46c>)
 80015ee:	4618      	mov	r0, r3
 80015f0:	f002 fad4 	bl	8003b9c <_ZN6tflite13ErrorReporter6ReportEPKcz>
	       //  return;
	       }

	       // Obtain a pointer to the output tensor
	       //TfLiteTensor* output = interpreter->output(0);
	       TfLiteTensor* output = interpreter.output(0);
 80015f4:	f107 030c 	add.w	r3, r7, #12
 80015f8:	2100      	movs	r1, #0
 80015fa:	4618      	mov	r0, r3
 80015fc:	f007 fa1e 	bl	8008a3c <_ZN6tflite16MicroInterpreter6outputEj>
 8001600:	f8c7 00f8 	str.w	r0, [r7, #248]	; 0xf8
	       error_reporter->Report("output: %d", output->data.uint8[0]);
 8001604:	4b4a      	ldr	r3, [pc, #296]	; (8001730 <main+0x468>)
 8001606:	6818      	ldr	r0, [r3, #0]
 8001608:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800160c:	685b      	ldr	r3, [r3, #4]
 800160e:	781b      	ldrb	r3, [r3, #0]
 8001610:	461a      	mov	r2, r3
 8001612:	4949      	ldr	r1, [pc, #292]	; (8001738 <main+0x470>)
 8001614:	f002 fac2 	bl	8003b9c <_ZN6tflite13ErrorReporter6ReportEPKcz>


	       // There are four possible classes in the output, each with a score.
	       const int kSilenceIndex = 0;
 8001618:	2300      	movs	r3, #0
 800161a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
	       const int kUnknownIndex = 1;
 800161e:	2301      	movs	r3, #1
 8001620:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
	       const int kcarhornIndex = 2;
 8001624:	2302      	movs	r3, #2
 8001626:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
	       const int kCoughingIndex = 3;
 800162a:	2303      	movs	r3, #3
 800162c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
	       const int kClappingIndex = 4;
 8001630:	2304      	movs	r3, #4
 8001632:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
	       const int kGunShotIndex = 5;
 8001636:	2305      	movs	r3, #5
 8001638:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
	       const int kCryingBabyIndex = 6;
 800163c:	2306      	movs	r3, #6
 800163e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
	       const int kDoorKnockIndex = 7;
 8001642:	2307      	movs	r3, #7
 8001644:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
	       const int kSheilaIndex = 8;
 8001648:	2308      	movs	r3, #8
 800164a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
	       const int kDogBarkIndex = 9;
 800164e:	2309      	movs	r3, #9
 8001650:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0


	       // Make sure that the expected "Yes" score is higher than the other classes.
	       uint8_t silence_score = output->data.uint8[kSilenceIndex];
 8001654:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8001658:	685b      	ldr	r3, [r3, #4]
 800165a:	781b      	ldrb	r3, [r3, #0]
 800165c:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
	       uint8_t unknown_score = output->data.uint8[kUnknownIndex];
 8001660:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8001664:	685b      	ldr	r3, [r3, #4]
 8001666:	785b      	ldrb	r3, [r3, #1]
 8001668:	f887 30ce 	strb.w	r3, [r7, #206]	; 0xce
//	       uint8_t car_horn_score = output->data.uint8[kcarhornIndex];
	       uint8_t coughing_score = output->data.uint8[kCoughingIndex];
 800166c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8001670:	685b      	ldr	r3, [r3, #4]
 8001672:	78db      	ldrb	r3, [r3, #3]
 8001674:	f887 30cd 	strb.w	r3, [r7, #205]	; 0xcd
	       uint8_t clapping_score = output->data.uint8[kClappingIndex];
 8001678:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800167c:	685b      	ldr	r3, [r3, #4]
 800167e:	791b      	ldrb	r3, [r3, #4]
 8001680:	f887 30cc 	strb.w	r3, [r7, #204]	; 0xcc
	       uint8_t gunshot_score = output->data.uint8[kGunShotIndex];
 8001684:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8001688:	685b      	ldr	r3, [r3, #4]
 800168a:	795b      	ldrb	r3, [r3, #5]
 800168c:	f887 30cb 	strb.w	r3, [r7, #203]	; 0xcb
	       uint8_t crying_baby_score = output->data.uint8[kCryingBabyIndex];
 8001690:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8001694:	685b      	ldr	r3, [r3, #4]
 8001696:	799b      	ldrb	r3, [r3, #6]
 8001698:	f887 30ca 	strb.w	r3, [r7, #202]	; 0xca
	       uint8_t door_knock_score = output->data.uint8[kDoorKnockIndex];
 800169c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80016a0:	685b      	ldr	r3, [r3, #4]
 80016a2:	79db      	ldrb	r3, [r3, #7]
 80016a4:	f887 30c9 	strb.w	r3, [r7, #201]	; 0xc9
	       uint8_t sheila_score = output->data.uint8[kSheilaIndex];
 80016a8:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80016ac:	685b      	ldr	r3, [r3, #4]
 80016ae:	7a1b      	ldrb	r3, [r3, #8]
 80016b0:	f887 30c8 	strb.w	r3, [r7, #200]	; 0xc8
	       uint8_t dog_bark_score = output->data.uint8[kDogBarkIndex];
 80016b4:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80016b8:	685b      	ldr	r3, [r3, #4]
 80016ba:	7a5b      	ldrb	r3, [r3, #9]
 80016bc:	f887 30c7 	strb.w	r3, [r7, #199]	; 0xc7

	      // error_reporter->Report("Softmax: silence=%d, unknown=%d, yes=%d, no=%d", silence_score, unknown_score, yes_score, no_score);
	       //"car_horn,coughing,clapping,gun_shot,crying_baby,door_knock,clock_alarm,dog"
	       error_reporter->Report("Softmax: silence=%d, unknown=%d, car horn=%d, coughing=%d,  \
 80016c0:	4b1b      	ldr	r3, [pc, #108]	; (8001730 <main+0x468>)
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	607b      	str	r3, [r7, #4]
 80016c6:	f897 c0cf 	ldrb.w	ip, [r7, #207]	; 0xcf
 80016ca:	f897 e0ce 	ldrb.w	lr, [r7, #206]	; 0xce
 80016ce:	f897 30cd 	ldrb.w	r3, [r7, #205]	; 0xcd
 80016d2:	f897 20cc 	ldrb.w	r2, [r7, #204]	; 0xcc
 80016d6:	f897 10cb 	ldrb.w	r1, [r7, #203]	; 0xcb
 80016da:	f897 00ca 	ldrb.w	r0, [r7, #202]	; 0xca
 80016de:	f897 40c9 	ldrb.w	r4, [r7, #201]	; 0xc9
 80016e2:	f897 50c8 	ldrb.w	r5, [r7, #200]	; 0xc8
 80016e6:	f897 60c7 	ldrb.w	r6, [r7, #199]	; 0xc7
 80016ea:	9607      	str	r6, [sp, #28]
 80016ec:	9506      	str	r5, [sp, #24]
 80016ee:	9405      	str	r4, [sp, #20]
 80016f0:	9004      	str	r0, [sp, #16]
 80016f2:	9103      	str	r1, [sp, #12]
 80016f4:	9202      	str	r2, [sp, #8]
 80016f6:	9301      	str	r3, [sp, #4]
 80016f8:	2302      	movs	r3, #2
 80016fa:	9300      	str	r3, [sp, #0]
 80016fc:	4673      	mov	r3, lr
 80016fe:	4662      	mov	r2, ip
 8001700:	490e      	ldr	r1, [pc, #56]	; (800173c <main+0x474>)
 8001702:	6878      	ldr	r0, [r7, #4]
 8001704:	f002 fa4a 	bl	8003b9c <_ZN6tflite13ErrorReporter6ReportEPKcz>
	     for (int i = 0; i < BABY_TOTAL_FILE_NUMBER ; i++)
 8001708:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800170c:	3301      	adds	r3, #1
 800170e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8001712:	e6f0      	b.n	80014f6 <main+0x22e>
	       gunshot_score, crying_baby_score, door_knock_score,
	       sheila_score, dog_bark_score);

	     }

	       error_reporter->Report("\n*****Martin is classifying sounds*****");
 8001714:	4b06      	ldr	r3, [pc, #24]	; (8001730 <main+0x468>)
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	4909      	ldr	r1, [pc, #36]	; (8001740 <main+0x478>)
 800171a:	4618      	mov	r0, r3
 800171c:	f002 fa3e 	bl	8003b9c <_ZN6tflite13ErrorReporter6ReportEPKcz>
	       error_reporter->Report("\n*****End of Sound Recognition Classifier for Sparfun Edge Program*****");
 8001720:	4b03      	ldr	r3, [pc, #12]	; (8001730 <main+0x468>)
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	4907      	ldr	r1, [pc, #28]	; (8001744 <main+0x47c>)
 8001726:	4618      	mov	r0, r3
 8001728:	f002 fa38 	bl	8003b9c <_ZN6tflite13ErrorReporter6ReportEPKcz>
/* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800172c:	e7fe      	b.n	800172c <main+0x464>
 800172e:	bf00      	nop
 8001730:	20000344 	.word	0x20000344
 8001734:	0800de50 	.word	0x0800de50
 8001738:	0800de60 	.word	0x0800de60
 800173c:	0800de6c 	.word	0x0800de6c
 8001740:	0800df00 	.word	0x0800df00
 8001744:	0800df28 	.word	0x0800df28

08001748 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	b094      	sub	sp, #80	; 0x50
 800174c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800174e:	f107 0320 	add.w	r3, r7, #32
 8001752:	2230      	movs	r2, #48	; 0x30
 8001754:	2100      	movs	r1, #0
 8001756:	4618      	mov	r0, r3
 8001758:	f009 ff36 	bl	800b5c8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800175c:	f107 030c 	add.w	r3, r7, #12
 8001760:	2200      	movs	r2, #0
 8001762:	601a      	str	r2, [r3, #0]
 8001764:	605a      	str	r2, [r3, #4]
 8001766:	609a      	str	r2, [r3, #8]
 8001768:	60da      	str	r2, [r3, #12]
 800176a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800176c:	2300      	movs	r3, #0
 800176e:	60bb      	str	r3, [r7, #8]
 8001770:	4b2d      	ldr	r3, [pc, #180]	; (8001828 <_Z18SystemClock_Configv+0xe0>)
 8001772:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001774:	4a2c      	ldr	r2, [pc, #176]	; (8001828 <_Z18SystemClock_Configv+0xe0>)
 8001776:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800177a:	6413      	str	r3, [r2, #64]	; 0x40
 800177c:	4b2a      	ldr	r3, [pc, #168]	; (8001828 <_Z18SystemClock_Configv+0xe0>)
 800177e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001780:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001784:	60bb      	str	r3, [r7, #8]
 8001786:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001788:	2300      	movs	r3, #0
 800178a:	607b      	str	r3, [r7, #4]
 800178c:	4b27      	ldr	r3, [pc, #156]	; (800182c <_Z18SystemClock_Configv+0xe4>)
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	4a26      	ldr	r2, [pc, #152]	; (800182c <_Z18SystemClock_Configv+0xe4>)
 8001792:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001796:	6013      	str	r3, [r2, #0]
 8001798:	4b24      	ldr	r3, [pc, #144]	; (800182c <_Z18SystemClock_Configv+0xe4>)
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80017a0:	607b      	str	r3, [r7, #4]
 80017a2:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80017a4:	2302      	movs	r3, #2
 80017a6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80017a8:	2301      	movs	r3, #1
 80017aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80017ac:	2310      	movs	r3, #16
 80017ae:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80017b0:	2302      	movs	r3, #2
 80017b2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80017b4:	2300      	movs	r3, #0
 80017b6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 80017b8:	2310      	movs	r3, #16
 80017ba:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80017bc:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80017c0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80017c2:	2304      	movs	r3, #4
 80017c4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80017c6:	2304      	movs	r3, #4
 80017c8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80017ca:	f107 0320 	add.w	r3, r7, #32
 80017ce:	4618      	mov	r0, r3
 80017d0:	f001 f8d0 	bl	8002974 <HAL_RCC_OscConfig>
 80017d4:	4603      	mov	r3, r0
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	bf14      	ite	ne
 80017da:	2301      	movne	r3, #1
 80017dc:	2300      	moveq	r3, #0
 80017de:	b2db      	uxtb	r3, r3
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d001      	beq.n	80017e8 <_Z18SystemClock_Configv+0xa0>
  {
    Error_Handler();
 80017e4:	f000 f95a 	bl	8001a9c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80017e8:	230f      	movs	r3, #15
 80017ea:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80017ec:	2302      	movs	r3, #2
 80017ee:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80017f0:	2300      	movs	r3, #0
 80017f2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80017f4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80017f8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80017fa:	2300      	movs	r3, #0
 80017fc:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80017fe:	f107 030c 	add.w	r3, r7, #12
 8001802:	2102      	movs	r1, #2
 8001804:	4618      	mov	r0, r3
 8001806:	f001 fb2d 	bl	8002e64 <HAL_RCC_ClockConfig>
 800180a:	4603      	mov	r3, r0
 800180c:	2b00      	cmp	r3, #0
 800180e:	bf14      	ite	ne
 8001810:	2301      	movne	r3, #1
 8001812:	2300      	moveq	r3, #0
 8001814:	b2db      	uxtb	r3, r3
 8001816:	2b00      	cmp	r3, #0
 8001818:	d001      	beq.n	800181e <_Z18SystemClock_Configv+0xd6>
  {
    Error_Handler();
 800181a:	f000 f93f 	bl	8001a9c <Error_Handler>
  }
}
 800181e:	bf00      	nop
 8001820:	3750      	adds	r7, #80	; 0x50
 8001822:	46bd      	mov	sp, r7
 8001824:	bd80      	pop	{r7, pc}
 8001826:	bf00      	nop
 8001828:	40023800 	.word	0x40023800
 800182c:	40007000 	.word	0x40007000

08001830 <_ZL13MX_TIM10_Initv>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8001834:	4b10      	ldr	r3, [pc, #64]	; (8001878 <_ZL13MX_TIM10_Initv+0x48>)
 8001836:	4a11      	ldr	r2, [pc, #68]	; (800187c <_ZL13MX_TIM10_Initv+0x4c>)
 8001838:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 80-1;
 800183a:	4b0f      	ldr	r3, [pc, #60]	; (8001878 <_ZL13MX_TIM10_Initv+0x48>)
 800183c:	224f      	movs	r2, #79	; 0x4f
 800183e:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001840:	4b0d      	ldr	r3, [pc, #52]	; (8001878 <_ZL13MX_TIM10_Initv+0x48>)
 8001842:	2200      	movs	r2, #0
 8001844:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 65535-1;
 8001846:	4b0c      	ldr	r3, [pc, #48]	; (8001878 <_ZL13MX_TIM10_Initv+0x48>)
 8001848:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800184c:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800184e:	4b0a      	ldr	r3, [pc, #40]	; (8001878 <_ZL13MX_TIM10_Initv+0x48>)
 8001850:	2200      	movs	r2, #0
 8001852:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001854:	4b08      	ldr	r3, [pc, #32]	; (8001878 <_ZL13MX_TIM10_Initv+0x48>)
 8001856:	2200      	movs	r2, #0
 8001858:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 800185a:	4807      	ldr	r0, [pc, #28]	; (8001878 <_ZL13MX_TIM10_Initv+0x48>)
 800185c:	f001 fcfe 	bl	800325c <HAL_TIM_Base_Init>
 8001860:	4603      	mov	r3, r0
 8001862:	2b00      	cmp	r3, #0
 8001864:	bf14      	ite	ne
 8001866:	2301      	movne	r3, #1
 8001868:	2300      	moveq	r3, #0
 800186a:	b2db      	uxtb	r3, r3
 800186c:	2b00      	cmp	r3, #0
 800186e:	d001      	beq.n	8001874 <_ZL13MX_TIM10_Initv+0x44>
  {
    Error_Handler();
 8001870:	f000 f914 	bl	8001a9c <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 8001874:	bf00      	nop
 8001876:	bd80      	pop	{r7, pc}
 8001878:	20000230 	.word	0x20000230
 800187c:	40014400 	.word	0x40014400

08001880 <_ZL19MX_USART1_UART_Initv>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001884:	4b13      	ldr	r3, [pc, #76]	; (80018d4 <_ZL19MX_USART1_UART_Initv+0x54>)
 8001886:	4a14      	ldr	r2, [pc, #80]	; (80018d8 <_ZL19MX_USART1_UART_Initv+0x58>)
 8001888:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800188a:	4b12      	ldr	r3, [pc, #72]	; (80018d4 <_ZL19MX_USART1_UART_Initv+0x54>)
 800188c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001890:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001892:	4b10      	ldr	r3, [pc, #64]	; (80018d4 <_ZL19MX_USART1_UART_Initv+0x54>)
 8001894:	2200      	movs	r2, #0
 8001896:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001898:	4b0e      	ldr	r3, [pc, #56]	; (80018d4 <_ZL19MX_USART1_UART_Initv+0x54>)
 800189a:	2200      	movs	r2, #0
 800189c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800189e:	4b0d      	ldr	r3, [pc, #52]	; (80018d4 <_ZL19MX_USART1_UART_Initv+0x54>)
 80018a0:	2200      	movs	r2, #0
 80018a2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80018a4:	4b0b      	ldr	r3, [pc, #44]	; (80018d4 <_ZL19MX_USART1_UART_Initv+0x54>)
 80018a6:	220c      	movs	r2, #12
 80018a8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80018aa:	4b0a      	ldr	r3, [pc, #40]	; (80018d4 <_ZL19MX_USART1_UART_Initv+0x54>)
 80018ac:	2200      	movs	r2, #0
 80018ae:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80018b0:	4b08      	ldr	r3, [pc, #32]	; (80018d4 <_ZL19MX_USART1_UART_Initv+0x54>)
 80018b2:	2200      	movs	r2, #0
 80018b4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80018b6:	4807      	ldr	r0, [pc, #28]	; (80018d4 <_ZL19MX_USART1_UART_Initv+0x54>)
 80018b8:	f001 fda0 	bl	80033fc <HAL_UART_Init>
 80018bc:	4603      	mov	r3, r0
 80018be:	2b00      	cmp	r3, #0
 80018c0:	bf14      	ite	ne
 80018c2:	2301      	movne	r3, #1
 80018c4:	2300      	moveq	r3, #0
 80018c6:	b2db      	uxtb	r3, r3
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d001      	beq.n	80018d0 <_ZL19MX_USART1_UART_Initv+0x50>
  {
    Error_Handler();
 80018cc:	f000 f8e6 	bl	8001a9c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80018d0:	bf00      	nop
 80018d2:	bd80      	pop	{r7, pc}
 80018d4:	20000278 	.word	0x20000278
 80018d8:	40011000 	.word	0x40011000

080018dc <_ZL19MX_USART2_UART_Initv>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80018e0:	4b13      	ldr	r3, [pc, #76]	; (8001930 <_ZL19MX_USART2_UART_Initv+0x54>)
 80018e2:	4a14      	ldr	r2, [pc, #80]	; (8001934 <_ZL19MX_USART2_UART_Initv+0x58>)
 80018e4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80018e6:	4b12      	ldr	r3, [pc, #72]	; (8001930 <_ZL19MX_USART2_UART_Initv+0x54>)
 80018e8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80018ec:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80018ee:	4b10      	ldr	r3, [pc, #64]	; (8001930 <_ZL19MX_USART2_UART_Initv+0x54>)
 80018f0:	2200      	movs	r2, #0
 80018f2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80018f4:	4b0e      	ldr	r3, [pc, #56]	; (8001930 <_ZL19MX_USART2_UART_Initv+0x54>)
 80018f6:	2200      	movs	r2, #0
 80018f8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80018fa:	4b0d      	ldr	r3, [pc, #52]	; (8001930 <_ZL19MX_USART2_UART_Initv+0x54>)
 80018fc:	2200      	movs	r2, #0
 80018fe:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001900:	4b0b      	ldr	r3, [pc, #44]	; (8001930 <_ZL19MX_USART2_UART_Initv+0x54>)
 8001902:	220c      	movs	r2, #12
 8001904:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001906:	4b0a      	ldr	r3, [pc, #40]	; (8001930 <_ZL19MX_USART2_UART_Initv+0x54>)
 8001908:	2200      	movs	r2, #0
 800190a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800190c:	4b08      	ldr	r3, [pc, #32]	; (8001930 <_ZL19MX_USART2_UART_Initv+0x54>)
 800190e:	2200      	movs	r2, #0
 8001910:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001912:	4807      	ldr	r0, [pc, #28]	; (8001930 <_ZL19MX_USART2_UART_Initv+0x54>)
 8001914:	f001 fd72 	bl	80033fc <HAL_UART_Init>
 8001918:	4603      	mov	r3, r0
 800191a:	2b00      	cmp	r3, #0
 800191c:	bf14      	ite	ne
 800191e:	2301      	movne	r3, #1
 8001920:	2300      	moveq	r3, #0
 8001922:	b2db      	uxtb	r3, r3
 8001924:	2b00      	cmp	r3, #0
 8001926:	d001      	beq.n	800192c <_ZL19MX_USART2_UART_Initv+0x50>
  {
    Error_Handler();
 8001928:	f000 f8b8 	bl	8001a9c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800192c:	bf00      	nop
 800192e:	bd80      	pop	{r7, pc}
 8001930:	200002bc 	.word	0x200002bc
 8001934:	40004400 	.word	0x40004400

08001938 <_ZL19MX_USART6_UART_Initv>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 800193c:	4b13      	ldr	r3, [pc, #76]	; (800198c <_ZL19MX_USART6_UART_Initv+0x54>)
 800193e:	4a14      	ldr	r2, [pc, #80]	; (8001990 <_ZL19MX_USART6_UART_Initv+0x58>)
 8001940:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8001942:	4b12      	ldr	r3, [pc, #72]	; (800198c <_ZL19MX_USART6_UART_Initv+0x54>)
 8001944:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001948:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800194a:	4b10      	ldr	r3, [pc, #64]	; (800198c <_ZL19MX_USART6_UART_Initv+0x54>)
 800194c:	2200      	movs	r2, #0
 800194e:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8001950:	4b0e      	ldr	r3, [pc, #56]	; (800198c <_ZL19MX_USART6_UART_Initv+0x54>)
 8001952:	2200      	movs	r2, #0
 8001954:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8001956:	4b0d      	ldr	r3, [pc, #52]	; (800198c <_ZL19MX_USART6_UART_Initv+0x54>)
 8001958:	2200      	movs	r2, #0
 800195a:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 800195c:	4b0b      	ldr	r3, [pc, #44]	; (800198c <_ZL19MX_USART6_UART_Initv+0x54>)
 800195e:	220c      	movs	r2, #12
 8001960:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001962:	4b0a      	ldr	r3, [pc, #40]	; (800198c <_ZL19MX_USART6_UART_Initv+0x54>)
 8001964:	2200      	movs	r2, #0
 8001966:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8001968:	4b08      	ldr	r3, [pc, #32]	; (800198c <_ZL19MX_USART6_UART_Initv+0x54>)
 800196a:	2200      	movs	r2, #0
 800196c:	61da      	str	r2, [r3, #28]
  if (HAL_HalfDuplex_Init(&huart6) != HAL_OK)
 800196e:	4807      	ldr	r0, [pc, #28]	; (800198c <_ZL19MX_USART6_UART_Initv+0x54>)
 8001970:	f001 fd91 	bl	8003496 <HAL_HalfDuplex_Init>
 8001974:	4603      	mov	r3, r0
 8001976:	2b00      	cmp	r3, #0
 8001978:	bf14      	ite	ne
 800197a:	2301      	movne	r3, #1
 800197c:	2300      	moveq	r3, #0
 800197e:	b2db      	uxtb	r3, r3
 8001980:	2b00      	cmp	r3, #0
 8001982:	d001      	beq.n	8001988 <_ZL19MX_USART6_UART_Initv+0x50>
  {
    Error_Handler();
 8001984:	f000 f88a 	bl	8001a9c <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8001988:	bf00      	nop
 800198a:	bd80      	pop	{r7, pc}
 800198c:	20000300 	.word	0x20000300
 8001990:	40011400 	.word	0x40011400

08001994 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	b08a      	sub	sp, #40	; 0x28
 8001998:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800199a:	f107 0314 	add.w	r3, r7, #20
 800199e:	2200      	movs	r2, #0
 80019a0:	601a      	str	r2, [r3, #0]
 80019a2:	605a      	str	r2, [r3, #4]
 80019a4:	609a      	str	r2, [r3, #8]
 80019a6:	60da      	str	r2, [r3, #12]
 80019a8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80019aa:	2300      	movs	r3, #0
 80019ac:	613b      	str	r3, [r7, #16]
 80019ae:	4b2d      	ldr	r3, [pc, #180]	; (8001a64 <_ZL12MX_GPIO_Initv+0xd0>)
 80019b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019b2:	4a2c      	ldr	r2, [pc, #176]	; (8001a64 <_ZL12MX_GPIO_Initv+0xd0>)
 80019b4:	f043 0304 	orr.w	r3, r3, #4
 80019b8:	6313      	str	r3, [r2, #48]	; 0x30
 80019ba:	4b2a      	ldr	r3, [pc, #168]	; (8001a64 <_ZL12MX_GPIO_Initv+0xd0>)
 80019bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019be:	f003 0304 	and.w	r3, r3, #4
 80019c2:	613b      	str	r3, [r7, #16]
 80019c4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80019c6:	2300      	movs	r3, #0
 80019c8:	60fb      	str	r3, [r7, #12]
 80019ca:	4b26      	ldr	r3, [pc, #152]	; (8001a64 <_ZL12MX_GPIO_Initv+0xd0>)
 80019cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ce:	4a25      	ldr	r2, [pc, #148]	; (8001a64 <_ZL12MX_GPIO_Initv+0xd0>)
 80019d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80019d4:	6313      	str	r3, [r2, #48]	; 0x30
 80019d6:	4b23      	ldr	r3, [pc, #140]	; (8001a64 <_ZL12MX_GPIO_Initv+0xd0>)
 80019d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80019de:	60fb      	str	r3, [r7, #12]
 80019e0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80019e2:	2300      	movs	r3, #0
 80019e4:	60bb      	str	r3, [r7, #8]
 80019e6:	4b1f      	ldr	r3, [pc, #124]	; (8001a64 <_ZL12MX_GPIO_Initv+0xd0>)
 80019e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ea:	4a1e      	ldr	r2, [pc, #120]	; (8001a64 <_ZL12MX_GPIO_Initv+0xd0>)
 80019ec:	f043 0301 	orr.w	r3, r3, #1
 80019f0:	6313      	str	r3, [r2, #48]	; 0x30
 80019f2:	4b1c      	ldr	r3, [pc, #112]	; (8001a64 <_ZL12MX_GPIO_Initv+0xd0>)
 80019f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019f6:	f003 0301 	and.w	r3, r3, #1
 80019fa:	60bb      	str	r3, [r7, #8]
 80019fc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80019fe:	2300      	movs	r3, #0
 8001a00:	607b      	str	r3, [r7, #4]
 8001a02:	4b18      	ldr	r3, [pc, #96]	; (8001a64 <_ZL12MX_GPIO_Initv+0xd0>)
 8001a04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a06:	4a17      	ldr	r2, [pc, #92]	; (8001a64 <_ZL12MX_GPIO_Initv+0xd0>)
 8001a08:	f043 0302 	orr.w	r3, r3, #2
 8001a0c:	6313      	str	r3, [r2, #48]	; 0x30
 8001a0e:	4b15      	ldr	r3, [pc, #84]	; (8001a64 <_ZL12MX_GPIO_Initv+0xd0>)
 8001a10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a12:	f003 0302 	and.w	r3, r3, #2
 8001a16:	607b      	str	r3, [r7, #4]
 8001a18:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	2120      	movs	r1, #32
 8001a1e:	4812      	ldr	r0, [pc, #72]	; (8001a68 <_ZL12MX_GPIO_Initv+0xd4>)
 8001a20:	f000 ff8e 	bl	8002940 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001a24:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001a28:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001a2a:	4b10      	ldr	r3, [pc, #64]	; (8001a6c <_ZL12MX_GPIO_Initv+0xd8>)
 8001a2c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a2e:	2300      	movs	r3, #0
 8001a30:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001a32:	f107 0314 	add.w	r3, r7, #20
 8001a36:	4619      	mov	r1, r3
 8001a38:	480d      	ldr	r0, [pc, #52]	; (8001a70 <_ZL12MX_GPIO_Initv+0xdc>)
 8001a3a:	f000 fdfd 	bl	8002638 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001a3e:	2320      	movs	r3, #32
 8001a40:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a42:	2301      	movs	r3, #1
 8001a44:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a46:	2300      	movs	r3, #0
 8001a48:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001a4e:	f107 0314 	add.w	r3, r7, #20
 8001a52:	4619      	mov	r1, r3
 8001a54:	4804      	ldr	r0, [pc, #16]	; (8001a68 <_ZL12MX_GPIO_Initv+0xd4>)
 8001a56:	f000 fdef 	bl	8002638 <HAL_GPIO_Init>

}
 8001a5a:	bf00      	nop
 8001a5c:	3728      	adds	r7, #40	; 0x28
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	bd80      	pop	{r7, pc}
 8001a62:	bf00      	nop
 8001a64:	40023800 	.word	0x40023800
 8001a68:	40020000 	.word	0x40020000
 8001a6c:	10210000 	.word	0x10210000
 8001a70:	40020800 	.word	0x40020800

08001a74 <DebugLog>:

/* USER CODE BEGIN 4 */
extern "C" void DebugLog(const char* s)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	b082      	sub	sp, #8
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart1, (uint8_t *)s, strlen(s), 100);
 8001a7c:	6878      	ldr	r0, [r7, #4]
 8001a7e:	f7fe fc09 	bl	8000294 <strlen>
 8001a82:	4603      	mov	r3, r0
 8001a84:	b29a      	uxth	r2, r3
 8001a86:	2364      	movs	r3, #100	; 0x64
 8001a88:	6879      	ldr	r1, [r7, #4]
 8001a8a:	4803      	ldr	r0, [pc, #12]	; (8001a98 <DebugLog+0x24>)
 8001a8c:	f001 fd58 	bl	8003540 <HAL_UART_Transmit>
}
 8001a90:	bf00      	nop
 8001a92:	3708      	adds	r7, #8
 8001a94:	46bd      	mov	sp, r7
 8001a96:	bd80      	pop	{r7, pc}
 8001a98:	20000278 	.word	0x20000278

08001a9c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a9c:	b480      	push	{r7}
 8001a9e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001aa0:	b672      	cpsid	i
}
 8001aa2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001aa4:	e7fe      	b.n	8001aa4 <Error_Handler+0x8>

08001aa6 <_ZN11flatbuffers12EndianScalarImEET_S1_>:
#if defined(_MSC_VER)
  #pragma warning(pop)
#endif


template<typename T> T EndianScalar(T t) {
 8001aa6:	b480      	push	{r7}
 8001aa8:	b083      	sub	sp, #12
 8001aaa:	af00      	add	r7, sp, #0
 8001aac:	6078      	str	r0, [r7, #4]
  #if FLATBUFFERS_LITTLEENDIAN
    return t;
 8001aae:	687b      	ldr	r3, [r7, #4]
  #else
    return EndianSwap(t);
  #endif
}
 8001ab0:	4618      	mov	r0, r3
 8001ab2:	370c      	adds	r7, #12
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aba:	4770      	bx	lr

08001abc <_ZN11flatbuffers10ReadScalarItEET_PKv>:

template<typename T>
// UBSAN: C++ aliasing type rules, see std::bit_cast<> for details.
__supress_ubsan__("alignment")
T ReadScalar(const void *p) {
 8001abc:	b580      	push	{r7, lr}
 8001abe:	b082      	sub	sp, #8
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	6078      	str	r0, [r7, #4]
  return EndianScalar(*reinterpret_cast<const T *>(p));
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	881b      	ldrh	r3, [r3, #0]
 8001ac8:	4618      	mov	r0, r3
 8001aca:	f000 f8b6 	bl	8001c3a <_ZN11flatbuffers12EndianScalarItEET_S1_>
 8001ace:	4603      	mov	r3, r0
}
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	3708      	adds	r7, #8
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	bd80      	pop	{r7, pc}

08001ad8 <_ZN11flatbuffers10ReadScalarImEET_PKv>:
T ReadScalar(const void *p) {
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	b082      	sub	sp, #8
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]
  return EndianScalar(*reinterpret_cast<const T *>(p));
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	f7ff ffde 	bl	8001aa6 <_ZN11flatbuffers12EndianScalarImEET_S1_>
 8001aea:	4603      	mov	r3, r0
}
 8001aec:	4618      	mov	r0, r3
 8001aee:	3708      	adds	r7, #8
 8001af0:	46bd      	mov	sp, r7
 8001af2:	bd80      	pop	{r7, pc}

08001af4 <_ZN11flatbuffers10ReadScalarIlEET_PKv>:
T ReadScalar(const void *p) {
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b082      	sub	sp, #8
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]
  return EndianScalar(*reinterpret_cast<const T *>(p));
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	4618      	mov	r0, r3
 8001b02:	f000 f88f 	bl	8001c24 <_ZN11flatbuffers12EndianScalarIlEET_S1_>
 8001b06:	4603      	mov	r3, r0
}
 8001b08:	4618      	mov	r0, r3
 8001b0a:	3708      	adds	r7, #8
 8001b0c:	46bd      	mov	sp, r7
 8001b0e:	bd80      	pop	{r7, pc}

08001b10 <_ZNK11flatbuffers5Table8GetFieldImEET_tS2_>:

  template<typename T> T GetField(voffset_t field, T defaultval) const {
 8001b10:	b580      	push	{r7, lr}
 8001b12:	b086      	sub	sp, #24
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	60f8      	str	r0, [r7, #12]
 8001b18:	460b      	mov	r3, r1
 8001b1a:	607a      	str	r2, [r7, #4]
 8001b1c:	817b      	strh	r3, [r7, #10]
    auto field_offset = GetOptionalFieldOffset(field);
 8001b1e:	897b      	ldrh	r3, [r7, #10]
 8001b20:	4619      	mov	r1, r3
 8001b22:	68f8      	ldr	r0, [r7, #12]
 8001b24:	f7ff fae0 	bl	80010e8 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
 8001b28:	4603      	mov	r3, r0
 8001b2a:	82fb      	strh	r3, [r7, #22]
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
 8001b2c:	8afb      	ldrh	r3, [r7, #22]
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d007      	beq.n	8001b42 <_ZNK11flatbuffers5Table8GetFieldImEET_tS2_+0x32>
 8001b32:	68fa      	ldr	r2, [r7, #12]
 8001b34:	8afb      	ldrh	r3, [r7, #22]
 8001b36:	4413      	add	r3, r2
 8001b38:	4618      	mov	r0, r3
 8001b3a:	f7ff ffcd 	bl	8001ad8 <_ZN11flatbuffers10ReadScalarImEET_PKv>
 8001b3e:	4603      	mov	r3, r0
 8001b40:	e000      	b.n	8001b44 <_ZNK11flatbuffers5Table8GetFieldImEET_tS2_+0x34>
 8001b42:	687b      	ldr	r3, [r7, #4]
  }
 8001b44:	4618      	mov	r0, r3
 8001b46:	3718      	adds	r7, #24
 8001b48:	46bd      	mov	sp, r7
 8001b4a:	bd80      	pop	{r7, pc}

08001b4c <_ZN11flatbuffers7GetRootIN6tflite5ModelEEEPKT_PKv>:
template<typename T> const T *GetRoot(const void *buf) {
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	b082      	sub	sp, #8
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	6078      	str	r0, [r7, #4]
  return GetMutableRoot<T>(const_cast<void *>(buf));
 8001b54:	6878      	ldr	r0, [r7, #4]
 8001b56:	f000 f87c 	bl	8001c52 <_ZN11flatbuffers14GetMutableRootIN6tflite5ModelEEEPT_Pv>
 8001b5a:	4603      	mov	r3, r0
}
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	3708      	adds	r7, #8
 8001b60:	46bd      	mov	sp, r7
 8001b62:	bd80      	pop	{r7, pc}

08001b64 <_ZNSt12_Vector_baseISt10unique_ptrI14TfLiteDelegatePFvPS1_EESaIS5_EE12_Vector_implC1Ev>:
	_Vector_impl() _GLIBCXX_NOEXCEPT_IF(
 8001b64:	b580      	push	{r7, lr}
 8001b66:	b082      	sub	sp, #8
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 8001b6c:	6878      	ldr	r0, [r7, #4]
 8001b6e:	f000 f882 	bl	8001c76 <_ZNSaISt10unique_ptrI14TfLiteDelegatePFvPS0_EEEC1Ev>
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	4618      	mov	r0, r3
 8001b76:	f000 f88a 	bl	8001c8e <_ZNSt12_Vector_baseISt10unique_ptrI14TfLiteDelegatePFvPS1_EESaIS5_EE17_Vector_impl_dataC1Ev>
	{ }
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	3708      	adds	r7, #8
 8001b80:	46bd      	mov	sp, r7
 8001b82:	bd80      	pop	{r7, pc}

08001b84 <_ZN6tflite10OpResolverC1Ev>:
class OpResolver {
 8001b84:	b480      	push	{r7}
 8001b86:	b083      	sub	sp, #12
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]
 8001b8c:	4a04      	ldr	r2, [pc, #16]	; (8001ba0 <_ZN6tflite10OpResolverC1Ev+0x1c>)
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	601a      	str	r2, [r3, #0]
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	4618      	mov	r0, r3
 8001b96:	370c      	adds	r7, #12
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9e:	4770      	bx	lr
 8001ba0:	080172ec 	.word	0x080172ec

08001ba4 <_ZN6tflite15MicroOpResolverC1Ev>:
class MicroOpResolver : public OpResolver {
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	b082      	sub	sp, #8
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6078      	str	r0, [r7, #4]
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	4618      	mov	r0, r3
 8001bb0:	f7ff ffe8 	bl	8001b84 <_ZN6tflite10OpResolverC1Ev>
 8001bb4:	4a03      	ldr	r2, [pc, #12]	; (8001bc4 <_ZN6tflite15MicroOpResolverC1Ev+0x20>)
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	601a      	str	r2, [r3, #0]
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	4618      	mov	r0, r3
 8001bbe:	3708      	adds	r7, #8
 8001bc0:	46bd      	mov	sp, r7
 8001bc2:	bd80      	pop	{r7, pc}
 8001bc4:	080172c0 	.word	0x080172c0

08001bc8 <_ZN6tflite22MicroMutableOpResolverILj1EEC1EPNS_13ErrorReporterE>:
template <unsigned int tOpCount>
class MicroMutableOpResolver : public MicroOpResolver {
 public:
  TF_LITE_REMOVE_VIRTUAL_DELETE

  explicit MicroMutableOpResolver(ErrorReporter* error_reporter = nullptr)
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	b082      	sub	sp, #8
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	6078      	str	r0, [r7, #4]
 8001bd0:	6039      	str	r1, [r7, #0]
      : error_reporter_(error_reporter) {}
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	f7ff ffe5 	bl	8001ba4 <_ZN6tflite15MicroOpResolverC1Ev>
 8001bda:	4a08      	ldr	r2, [pc, #32]	; (8001bfc <_ZN6tflite22MicroMutableOpResolverILj1EEC1EPNS_13ErrorReporterE+0x34>)
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	601a      	str	r2, [r3, #0]
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	2200      	movs	r2, #0
 8001be4:	625a      	str	r2, [r3, #36]	; 0x24
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	2200      	movs	r2, #0
 8001bea:	631a      	str	r2, [r3, #48]	; 0x30
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	683a      	ldr	r2, [r7, #0]
 8001bf0:	635a      	str	r2, [r3, #52]	; 0x34
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	4618      	mov	r0, r3
 8001bf6:	3708      	adds	r7, #8
 8001bf8:	46bd      	mov	sp, r7
 8001bfa:	bd80      	pop	{r7, pc}
 8001bfc:	08017294 	.word	0x08017294

08001c00 <_ZN6tflite22MicroMutableOpResolverILj1EE17AddFullyConnectedERK18TfLiteRegistration>:
  TfLiteStatus AddFloorMod() {
    return AddBuiltin(BuiltinOperator_FLOOR_MOD, tflite::Register_FLOOR_MOD(),
                      ParseFloorMod);
  }

  TfLiteStatus AddFullyConnected(
 8001c00:	b580      	push	{r7, lr}
 8001c02:	b082      	sub	sp, #8
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	6078      	str	r0, [r7, #4]
 8001c08:	6039      	str	r1, [r7, #0]
      const TfLiteRegistration& registration = Register_FULLY_CONNECTED()) {
    return AddBuiltin(BuiltinOperator_FULLY_CONNECTED, registration,
                      ParseFullyConnected);
 8001c0a:	4b05      	ldr	r3, [pc, #20]	; (8001c20 <_ZN6tflite22MicroMutableOpResolverILj1EE17AddFullyConnectedERK18TfLiteRegistration+0x20>)
 8001c0c:	683a      	ldr	r2, [r7, #0]
 8001c0e:	2109      	movs	r1, #9
 8001c10:	6878      	ldr	r0, [r7, #4]
 8001c12:	f000 f851 	bl	8001cb8 <_ZN6tflite22MicroMutableOpResolverILj1EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE>
 8001c16:	4603      	mov	r3, r0
  }
 8001c18:	4618      	mov	r0, r3
 8001c1a:	3708      	adds	r7, #8
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	bd80      	pop	{r7, pc}
 8001c20:	08003f3d 	.word	0x08003f3d

08001c24 <_ZN11flatbuffers12EndianScalarIlEET_S1_>:
template<typename T> T EndianScalar(T t) {
 8001c24:	b480      	push	{r7}
 8001c26:	b083      	sub	sp, #12
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6078      	str	r0, [r7, #4]
    return t;
 8001c2c:	687b      	ldr	r3, [r7, #4]
}
 8001c2e:	4618      	mov	r0, r3
 8001c30:	370c      	adds	r7, #12
 8001c32:	46bd      	mov	sp, r7
 8001c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c38:	4770      	bx	lr

08001c3a <_ZN11flatbuffers12EndianScalarItEET_S1_>:
template<typename T> T EndianScalar(T t) {
 8001c3a:	b480      	push	{r7}
 8001c3c:	b083      	sub	sp, #12
 8001c3e:	af00      	add	r7, sp, #0
 8001c40:	4603      	mov	r3, r0
 8001c42:	80fb      	strh	r3, [r7, #6]
    return t;
 8001c44:	88fb      	ldrh	r3, [r7, #6]
}
 8001c46:	4618      	mov	r0, r3
 8001c48:	370c      	adds	r7, #12
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c50:	4770      	bx	lr

08001c52 <_ZN11flatbuffers14GetMutableRootIN6tflite5ModelEEEPT_Pv>:
template<typename T> T *GetMutableRoot(void *buf) {
 8001c52:	b580      	push	{r7, lr}
 8001c54:	b082      	sub	sp, #8
 8001c56:	af00      	add	r7, sp, #0
 8001c58:	6078      	str	r0, [r7, #4]
  EndianCheck();
 8001c5a:	f7ff fa1b 	bl	8001094 <_ZN11flatbuffers11EndianCheckEv>
      EndianScalar(*reinterpret_cast<uoffset_t *>(buf)));
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	4618      	mov	r0, r3
 8001c64:	f7ff ff1f 	bl	8001aa6 <_ZN11flatbuffers12EndianScalarImEET_S1_>
 8001c68:	4602      	mov	r2, r0
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	4413      	add	r3, r2
}
 8001c6e:	4618      	mov	r0, r3
 8001c70:	3708      	adds	r7, #8
 8001c72:	46bd      	mov	sp, r7
 8001c74:	bd80      	pop	{r7, pc}

08001c76 <_ZNSaISt10unique_ptrI14TfLiteDelegatePFvPS0_EEEC1Ev>:
#endif

      // _GLIBCXX_RESOLVE_LIB_DEFECTS
      // 3035. std::allocator's constructors should be constexpr
      _GLIBCXX20_CONSTEXPR
      allocator() _GLIBCXX_NOTHROW { }
 8001c76:	b580      	push	{r7, lr}
 8001c78:	b082      	sub	sp, #8
 8001c7a:	af00      	add	r7, sp, #0
 8001c7c:	6078      	str	r0, [r7, #4]
 8001c7e:	6878      	ldr	r0, [r7, #4]
 8001c80:	f000 f89a 	bl	8001db8 <_ZN9__gnu_cxx13new_allocatorISt10unique_ptrI14TfLiteDelegatePFvPS2_EEEC1Ev>
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	4618      	mov	r0, r3
 8001c88:	3708      	adds	r7, #8
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	bd80      	pop	{r7, pc}

08001c8e <_ZNSt12_Vector_baseISt10unique_ptrI14TfLiteDelegatePFvPS1_EESaIS5_EE17_Vector_impl_dataC1Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
 8001c8e:	b480      	push	{r7}
 8001c90:	b083      	sub	sp, #12
 8001c92:	af00      	add	r7, sp, #0
 8001c94:	6078      	str	r0, [r7, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	2200      	movs	r2, #0
 8001c9a:	601a      	str	r2, [r3, #0]
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	2200      	movs	r2, #0
 8001ca0:	605a      	str	r2, [r3, #4]
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	609a      	str	r2, [r3, #8]
	{ }
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	4618      	mov	r0, r3
 8001cac:	370c      	adds	r7, #12
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb4:	4770      	bx	lr
	...

08001cb8 <_ZN6tflite22MicroMutableOpResolverILj1EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE>:
  }

  unsigned int GetRegistrationLength() { return registrations_len_; }

 private:
  TfLiteStatus AddBuiltin(tflite::BuiltinOperator op,
 8001cb8:	b5b0      	push	{r4, r5, r7, lr}
 8001cba:	b084      	sub	sp, #16
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	60f8      	str	r0, [r7, #12]
 8001cc0:	607a      	str	r2, [r7, #4]
 8001cc2:	603b      	str	r3, [r7, #0]
 8001cc4:	460b      	mov	r3, r1
 8001cc6:	72fb      	strb	r3, [r7, #11]
                          const TfLiteRegistration& registration,
                          MicroOpResolver::BuiltinParseFunction parser) {
    if (op == BuiltinOperator_CUSTOM) {
 8001cc8:	7afb      	ldrb	r3, [r7, #11]
 8001cca:	2b20      	cmp	r3, #32
 8001ccc:	d10b      	bne.n	8001ce6 <_ZN6tflite22MicroMutableOpResolverILj1EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE+0x2e>
      if (error_reporter_ != nullptr) {
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d005      	beq.n	8001ce2 <_ZN6tflite22MicroMutableOpResolverILj1EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE+0x2a>
        TF_LITE_REPORT_ERROR(error_reporter_,
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001cda:	4934      	ldr	r1, [pc, #208]	; (8001dac <_ZN6tflite22MicroMutableOpResolverILj1EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE+0xf4>)
 8001cdc:	4618      	mov	r0, r3
 8001cde:	f001 ff5d 	bl	8003b9c <_ZN6tflite13ErrorReporter6ReportEPKcz>
                             "Invalid parameter BuiltinOperator_CUSTOM to the "
                             "AddBuiltin function.");
      }
      return kTfLiteError;
 8001ce2:	2301      	movs	r3, #1
 8001ce4:	e05d      	b.n	8001da2 <_ZN6tflite22MicroMutableOpResolverILj1EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE+0xea>
    }

    if (FindOp(op) != nullptr) {
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	3318      	adds	r3, #24
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	7afa      	ldrb	r2, [r7, #11]
 8001cf0:	4611      	mov	r1, r2
 8001cf2:	68f8      	ldr	r0, [r7, #12]
 8001cf4:	4798      	blx	r3
 8001cf6:	4603      	mov	r3, r0
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	bf14      	ite	ne
 8001cfc:	2301      	movne	r3, #1
 8001cfe:	2300      	moveq	r3, #0
 8001d00:	b2db      	uxtb	r3, r3
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d00c      	beq.n	8001d20 <_ZN6tflite22MicroMutableOpResolverILj1EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE+0x68>
      if (error_reporter_ != nullptr) {
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d006      	beq.n	8001d1c <_ZN6tflite22MicroMutableOpResolverILj1EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE+0x64>
        TF_LITE_REPORT_ERROR(error_reporter_,
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d12:	7afa      	ldrb	r2, [r7, #11]
 8001d14:	4926      	ldr	r1, [pc, #152]	; (8001db0 <_ZN6tflite22MicroMutableOpResolverILj1EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE+0xf8>)
 8001d16:	4618      	mov	r0, r3
 8001d18:	f001 ff40 	bl	8003b9c <_ZN6tflite13ErrorReporter6ReportEPKcz>
                             "Calling AddBuiltin with the same op more than "
                             "once is not supported (Op: #%d).",
                             op);
      }
      return kTfLiteError;
 8001d1c:	2301      	movs	r3, #1
 8001d1e:	e040      	b.n	8001da2 <_ZN6tflite22MicroMutableOpResolverILj1EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE+0xea>
    }

    if (registrations_len_ >= tOpCount) {
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d00c      	beq.n	8001d42 <_ZN6tflite22MicroMutableOpResolverILj1EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE+0x8a>
      if (error_reporter_) {
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d006      	beq.n	8001d3e <_ZN6tflite22MicroMutableOpResolverILj1EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE+0x86>
        TF_LITE_REPORT_ERROR(error_reporter_,
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8001d34:	7afa      	ldrb	r2, [r7, #11]
 8001d36:	2301      	movs	r3, #1
 8001d38:	491e      	ldr	r1, [pc, #120]	; (8001db4 <_ZN6tflite22MicroMutableOpResolverILj1EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE+0xfc>)
 8001d3a:	f001 ff2f 	bl	8003b9c <_ZN6tflite13ErrorReporter6ReportEPKcz>
                             "Couldn't register builtin op #%d, resolver size "
                             "is too small (%d).",
                             op, tOpCount);
      }
      return kTfLiteError;
 8001d3e:	2301      	movs	r3, #1
 8001d40:	e02f      	b.n	8001da2 <_ZN6tflite22MicroMutableOpResolverILj1EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE+0xea>
    }

    registrations_[registrations_len_] = registration;
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d46:	68fa      	ldr	r2, [r7, #12]
 8001d48:	015b      	lsls	r3, r3, #5
 8001d4a:	4413      	add	r3, r2
 8001d4c:	687a      	ldr	r2, [r7, #4]
 8001d4e:	1d1c      	adds	r4, r3, #4
 8001d50:	4615      	mov	r5, r2
 8001d52:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001d54:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001d56:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001d5a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    // Strictly speaking, the builtin_code is not necessary for TFLM but filling
    // it in regardless.
    registrations_[registrations_len_].builtin_code = op;
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d62:	7afa      	ldrb	r2, [r7, #11]
 8001d64:	68f9      	ldr	r1, [r7, #12]
 8001d66:	015b      	lsls	r3, r3, #5
 8001d68:	440b      	add	r3, r1
 8001d6a:	3318      	adds	r3, #24
 8001d6c:	601a      	str	r2, [r3, #0]
    registrations_len_++;
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d72:	1c5a      	adds	r2, r3, #1
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	625a      	str	r2, [r3, #36]	; 0x24

    builtin_codes_[num_buitin_ops_] = op;
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d7c:	68fa      	ldr	r2, [r7, #12]
 8001d7e:	4413      	add	r3, r2
 8001d80:	7afa      	ldrb	r2, [r7, #11]
 8001d82:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    builtin_parsers_[num_buitin_ops_] = parser;
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d8a:	68fa      	ldr	r2, [r7, #12]
 8001d8c:	330a      	adds	r3, #10
 8001d8e:	009b      	lsls	r3, r3, #2
 8001d90:	4413      	add	r3, r2
 8001d92:	683a      	ldr	r2, [r7, #0]
 8001d94:	605a      	str	r2, [r3, #4]
    num_buitin_ops_++;
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d9a:	1c5a      	adds	r2, r3, #1
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	631a      	str	r2, [r3, #48]	; 0x30

    return kTfLiteOk;
 8001da0:	2300      	movs	r3, #0
  }
 8001da2:	4618      	mov	r0, r3
 8001da4:	3710      	adds	r7, #16
 8001da6:	46bd      	mov	sp, r7
 8001da8:	bdb0      	pop	{r4, r5, r7, pc}
 8001daa:	bf00      	nop
 8001dac:	0800df70 	.word	0x0800df70
 8001db0:	0800dfb8 	.word	0x0800dfb8
 8001db4:	0800e008 	.word	0x0800e008

08001db8 <_ZN9__gnu_cxx13new_allocatorISt10unique_ptrI14TfLiteDelegatePFvPS2_EEEC1Ev>:
      // 2103. propagate_on_container_move_assignment
      typedef std::true_type propagate_on_container_move_assignment;
#endif

      _GLIBCXX20_CONSTEXPR
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8001db8:	b480      	push	{r7}
 8001dba:	b083      	sub	sp, #12
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6078      	str	r0, [r7, #4]
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	370c      	adds	r7, #12
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dcc:	4770      	bx	lr

08001dce <_ZNK6tflite22MicroMutableOpResolverILj1EE6FindOpENS_15BuiltinOperatorE>:
  const TfLiteRegistration* FindOp(tflite::BuiltinOperator op) const override {
 8001dce:	b480      	push	{r7}
 8001dd0:	b085      	sub	sp, #20
 8001dd2:	af00      	add	r7, sp, #0
 8001dd4:	6078      	str	r0, [r7, #4]
 8001dd6:	460b      	mov	r3, r1
 8001dd8:	70fb      	strb	r3, [r7, #3]
    if (op == BuiltinOperator_CUSTOM) return nullptr;
 8001dda:	78fb      	ldrb	r3, [r7, #3]
 8001ddc:	2b20      	cmp	r3, #32
 8001dde:	d101      	bne.n	8001de4 <_ZNK6tflite22MicroMutableOpResolverILj1EE6FindOpENS_15BuiltinOperatorE+0x16>
 8001de0:	2300      	movs	r3, #0
 8001de2:	e018      	b.n	8001e16 <_ZNK6tflite22MicroMutableOpResolverILj1EE6FindOpENS_15BuiltinOperatorE+0x48>
    for (unsigned int i = 0; i < registrations_len_; ++i) {
 8001de4:	2300      	movs	r3, #0
 8001de6:	60fb      	str	r3, [r7, #12]
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dec:	68fa      	ldr	r2, [r7, #12]
 8001dee:	429a      	cmp	r2, r3
 8001df0:	d210      	bcs.n	8001e14 <_ZNK6tflite22MicroMutableOpResolverILj1EE6FindOpENS_15BuiltinOperatorE+0x46>
      const TfLiteRegistration& registration = registrations_[i];
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	015b      	lsls	r3, r3, #5
 8001df6:	687a      	ldr	r2, [r7, #4]
 8001df8:	4413      	add	r3, r2
 8001dfa:	3304      	adds	r3, #4
 8001dfc:	60bb      	str	r3, [r7, #8]
      if (registration.builtin_code == op) {
 8001dfe:	68bb      	ldr	r3, [r7, #8]
 8001e00:	695a      	ldr	r2, [r3, #20]
 8001e02:	78fb      	ldrb	r3, [r7, #3]
 8001e04:	429a      	cmp	r2, r3
 8001e06:	d101      	bne.n	8001e0c <_ZNK6tflite22MicroMutableOpResolverILj1EE6FindOpENS_15BuiltinOperatorE+0x3e>
        return &registration;
 8001e08:	68bb      	ldr	r3, [r7, #8]
 8001e0a:	e004      	b.n	8001e16 <_ZNK6tflite22MicroMutableOpResolverILj1EE6FindOpENS_15BuiltinOperatorE+0x48>
    for (unsigned int i = 0; i < registrations_len_; ++i) {
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	3301      	adds	r3, #1
 8001e10:	60fb      	str	r3, [r7, #12]
 8001e12:	e7e9      	b.n	8001de8 <_ZNK6tflite22MicroMutableOpResolverILj1EE6FindOpENS_15BuiltinOperatorE+0x1a>
    return nullptr;
 8001e14:	2300      	movs	r3, #0
  }
 8001e16:	4618      	mov	r0, r3
 8001e18:	3714      	adds	r7, #20
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e20:	4770      	bx	lr
	...

08001e24 <_ZN6tflite22MicroMutableOpResolverILj1EED1Ev>:
class MicroMutableOpResolver : public MicroOpResolver {
 8001e24:	b580      	push	{r7, lr}
 8001e26:	b082      	sub	sp, #8
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	6078      	str	r0, [r7, #4]
 8001e2c:	4a05      	ldr	r2, [pc, #20]	; (8001e44 <_ZN6tflite22MicroMutableOpResolverILj1EED1Ev+0x20>)
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	601a      	str	r2, [r3, #0]
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	4618      	mov	r0, r3
 8001e36:	f7ff fa15 	bl	8001264 <_ZN6tflite15MicroOpResolverD1Ev>
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	4618      	mov	r0, r3
 8001e3e:	3708      	adds	r7, #8
 8001e40:	46bd      	mov	sp, r7
 8001e42:	bd80      	pop	{r7, pc}
 8001e44:	08017294 	.word	0x08017294

08001e48 <_ZN6tflite22MicroMutableOpResolverILj1EED0Ev>:
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	b082      	sub	sp, #8
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	6078      	str	r0, [r7, #4]
 8001e50:	6878      	ldr	r0, [r7, #4]
 8001e52:	f7ff ffe7 	bl	8001e24 <_ZN6tflite22MicroMutableOpResolverILj1EED1Ev>
 8001e56:	2138      	movs	r1, #56	; 0x38
 8001e58:	6878      	ldr	r0, [r7, #4]
 8001e5a:	f009 f828 	bl	800aeae <_ZdlPvj>
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	4618      	mov	r0, r3
 8001e62:	3708      	adds	r7, #8
 8001e64:	46bd      	mov	sp, r7
 8001e66:	bd80      	pop	{r7, pc}

08001e68 <_ZNK6tflite22MicroMutableOpResolverILj1EE6FindOpEPKc>:
  const TfLiteRegistration* FindOp(const char* op) const override {
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	b084      	sub	sp, #16
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	6078      	str	r0, [r7, #4]
 8001e70:	6039      	str	r1, [r7, #0]
    for (unsigned int i = 0; i < registrations_len_; ++i) {
 8001e72:	2300      	movs	r3, #0
 8001e74:	60fb      	str	r3, [r7, #12]
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e7a:	68fa      	ldr	r2, [r7, #12]
 8001e7c:	429a      	cmp	r2, r3
 8001e7e:	d218      	bcs.n	8001eb2 <_ZNK6tflite22MicroMutableOpResolverILj1EE6FindOpEPKc+0x4a>
      const TfLiteRegistration& registration = registrations_[i];
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	015b      	lsls	r3, r3, #5
 8001e84:	687a      	ldr	r2, [r7, #4]
 8001e86:	4413      	add	r3, r2
 8001e88:	3304      	adds	r3, #4
 8001e8a:	60bb      	str	r3, [r7, #8]
      if ((registration.builtin_code == BuiltinOperator_CUSTOM) &&
 8001e8c:	68bb      	ldr	r3, [r7, #8]
 8001e8e:	695b      	ldr	r3, [r3, #20]
 8001e90:	2b20      	cmp	r3, #32
 8001e92:	d10a      	bne.n	8001eaa <_ZNK6tflite22MicroMutableOpResolverILj1EE6FindOpEPKc+0x42>
          (strcmp(registration.custom_name, op) == 0)) {
 8001e94:	68bb      	ldr	r3, [r7, #8]
 8001e96:	699b      	ldr	r3, [r3, #24]
 8001e98:	6839      	ldr	r1, [r7, #0]
 8001e9a:	4618      	mov	r0, r3
 8001e9c:	f7fe f9f0 	bl	8000280 <strcmp>
 8001ea0:	4603      	mov	r3, r0
      if ((registration.builtin_code == BuiltinOperator_CUSTOM) &&
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d101      	bne.n	8001eaa <_ZNK6tflite22MicroMutableOpResolverILj1EE6FindOpEPKc+0x42>
        return &registration;
 8001ea6:	68bb      	ldr	r3, [r7, #8]
 8001ea8:	e004      	b.n	8001eb4 <_ZNK6tflite22MicroMutableOpResolverILj1EE6FindOpEPKc+0x4c>
    for (unsigned int i = 0; i < registrations_len_; ++i) {
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	3301      	adds	r3, #1
 8001eae:	60fb      	str	r3, [r7, #12]
 8001eb0:	e7e1      	b.n	8001e76 <_ZNK6tflite22MicroMutableOpResolverILj1EE6FindOpEPKc+0xe>
    return nullptr;
 8001eb2:	2300      	movs	r3, #0
  }
 8001eb4:	4618      	mov	r0, r3
 8001eb6:	3710      	adds	r7, #16
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	bd80      	pop	{r7, pc}

08001ebc <_ZNK6tflite22MicroMutableOpResolverILj1EE15GetOpDataParserENS_15BuiltinOperatorE>:
  MicroOpResolver::BuiltinParseFunction GetOpDataParser(
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	b084      	sub	sp, #16
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	6078      	str	r0, [r7, #4]
 8001ec4:	460b      	mov	r3, r1
 8001ec6:	70fb      	strb	r3, [r7, #3]
    TFLITE_DCHECK(num_buitin_ops_ <= tOpCount);
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ecc:	2b01      	cmp	r3, #1
 8001ece:	d901      	bls.n	8001ed4 <_ZNK6tflite22MicroMutableOpResolverILj1EE15GetOpDataParserENS_15BuiltinOperatorE+0x18>
 8001ed0:	f009 f8d4 	bl	800b07c <abort>
    for (unsigned int i = 0; i < num_buitin_ops_; ++i) {
 8001ed4:	2300      	movs	r3, #0
 8001ed6:	60fb      	str	r3, [r7, #12]
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001edc:	68fa      	ldr	r2, [r7, #12]
 8001ede:	429a      	cmp	r2, r3
 8001ee0:	d212      	bcs.n	8001f08 <_ZNK6tflite22MicroMutableOpResolverILj1EE15GetOpDataParserENS_15BuiltinOperatorE+0x4c>
      if (builtin_codes_[i] == op) return builtin_parsers_[i];
 8001ee2:	687a      	ldr	r2, [r7, #4]
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	4413      	add	r3, r2
 8001ee8:	3328      	adds	r3, #40	; 0x28
 8001eea:	781b      	ldrb	r3, [r3, #0]
 8001eec:	78fa      	ldrb	r2, [r7, #3]
 8001eee:	429a      	cmp	r2, r3
 8001ef0:	d106      	bne.n	8001f00 <_ZNK6tflite22MicroMutableOpResolverILj1EE15GetOpDataParserENS_15BuiltinOperatorE+0x44>
 8001ef2:	687a      	ldr	r2, [r7, #4]
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	330a      	adds	r3, #10
 8001ef8:	009b      	lsls	r3, r3, #2
 8001efa:	4413      	add	r3, r2
 8001efc:	685b      	ldr	r3, [r3, #4]
 8001efe:	e004      	b.n	8001f0a <_ZNK6tflite22MicroMutableOpResolverILj1EE15GetOpDataParserENS_15BuiltinOperatorE+0x4e>
    for (unsigned int i = 0; i < num_buitin_ops_; ++i) {
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	3301      	adds	r3, #1
 8001f04:	60fb      	str	r3, [r7, #12]
 8001f06:	e7e7      	b.n	8001ed8 <_ZNK6tflite22MicroMutableOpResolverILj1EE15GetOpDataParserENS_15BuiltinOperatorE+0x1c>
    return nullptr;
 8001f08:	2300      	movs	r3, #0
  }
 8001f0a:	4618      	mov	r0, r3
 8001f0c:	3710      	adds	r7, #16
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	bd80      	pop	{r7, pc}

08001f12 <_ZNSt14numeric_limitsIlE3minEv>:
    struct numeric_limits<long>
    {
      static _GLIBCXX_USE_CONSTEXPR bool is_specialized = true;

      static _GLIBCXX_CONSTEXPR long
      min() _GLIBCXX_USE_NOEXCEPT { return -__LONG_MAX__ - 1; }
 8001f12:	b480      	push	{r7}
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	46bd      	mov	sp, r7
 8001f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f22:	4770      	bx	lr

08001f24 <_ZNSt14numeric_limitsIlE3maxEv>:

      static _GLIBCXX_CONSTEXPR long
      max() _GLIBCXX_USE_NOEXCEPT { return __LONG_MAX__; }
 8001f24:	b480      	push	{r7}
 8001f26:	af00      	add	r7, sp, #0
 8001f28:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8001f2c:	4618      	mov	r0, r3
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f34:	4770      	bx	lr
	...

08001f38 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	b082      	sub	sp, #8
 8001f3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f3e:	2300      	movs	r3, #0
 8001f40:	607b      	str	r3, [r7, #4]
 8001f42:	4b10      	ldr	r3, [pc, #64]	; (8001f84 <HAL_MspInit+0x4c>)
 8001f44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f46:	4a0f      	ldr	r2, [pc, #60]	; (8001f84 <HAL_MspInit+0x4c>)
 8001f48:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f4c:	6453      	str	r3, [r2, #68]	; 0x44
 8001f4e:	4b0d      	ldr	r3, [pc, #52]	; (8001f84 <HAL_MspInit+0x4c>)
 8001f50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f52:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f56:	607b      	str	r3, [r7, #4]
 8001f58:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	603b      	str	r3, [r7, #0]
 8001f5e:	4b09      	ldr	r3, [pc, #36]	; (8001f84 <HAL_MspInit+0x4c>)
 8001f60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f62:	4a08      	ldr	r2, [pc, #32]	; (8001f84 <HAL_MspInit+0x4c>)
 8001f64:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f68:	6413      	str	r3, [r2, #64]	; 0x40
 8001f6a:	4b06      	ldr	r3, [pc, #24]	; (8001f84 <HAL_MspInit+0x4c>)
 8001f6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f72:	603b      	str	r3, [r7, #0]
 8001f74:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001f76:	2007      	movs	r0, #7
 8001f78:	f000 fb2a 	bl	80025d0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001f7c:	bf00      	nop
 8001f7e:	3708      	adds	r7, #8
 8001f80:	46bd      	mov	sp, r7
 8001f82:	bd80      	pop	{r7, pc}
 8001f84:	40023800 	.word	0x40023800

08001f88 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001f88:	b480      	push	{r7}
 8001f8a:	b085      	sub	sp, #20
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM10)
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	4a0b      	ldr	r2, [pc, #44]	; (8001fc4 <HAL_TIM_Base_MspInit+0x3c>)
 8001f96:	4293      	cmp	r3, r2
 8001f98:	d10d      	bne.n	8001fb6 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM10_MspInit 0 */

  /* USER CODE END TIM10_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM10_CLK_ENABLE();
 8001f9a:	2300      	movs	r3, #0
 8001f9c:	60fb      	str	r3, [r7, #12]
 8001f9e:	4b0a      	ldr	r3, [pc, #40]	; (8001fc8 <HAL_TIM_Base_MspInit+0x40>)
 8001fa0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fa2:	4a09      	ldr	r2, [pc, #36]	; (8001fc8 <HAL_TIM_Base_MspInit+0x40>)
 8001fa4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001fa8:	6453      	str	r3, [r2, #68]	; 0x44
 8001faa:	4b07      	ldr	r3, [pc, #28]	; (8001fc8 <HAL_TIM_Base_MspInit+0x40>)
 8001fac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fb2:	60fb      	str	r3, [r7, #12]
 8001fb4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }

}
 8001fb6:	bf00      	nop
 8001fb8:	3714      	adds	r7, #20
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc0:	4770      	bx	lr
 8001fc2:	bf00      	nop
 8001fc4:	40014400 	.word	0x40014400
 8001fc8:	40023800 	.word	0x40023800

08001fcc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	b08e      	sub	sp, #56	; 0x38
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fd4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001fd8:	2200      	movs	r2, #0
 8001fda:	601a      	str	r2, [r3, #0]
 8001fdc:	605a      	str	r2, [r3, #4]
 8001fde:	609a      	str	r2, [r3, #8]
 8001fe0:	60da      	str	r2, [r3, #12]
 8001fe2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	4a4b      	ldr	r2, [pc, #300]	; (8002118 <HAL_UART_MspInit+0x14c>)
 8001fea:	4293      	cmp	r3, r2
 8001fec:	d12d      	bne.n	800204a <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001fee:	2300      	movs	r3, #0
 8001ff0:	623b      	str	r3, [r7, #32]
 8001ff2:	4b4a      	ldr	r3, [pc, #296]	; (800211c <HAL_UART_MspInit+0x150>)
 8001ff4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ff6:	4a49      	ldr	r2, [pc, #292]	; (800211c <HAL_UART_MspInit+0x150>)
 8001ff8:	f043 0310 	orr.w	r3, r3, #16
 8001ffc:	6453      	str	r3, [r2, #68]	; 0x44
 8001ffe:	4b47      	ldr	r3, [pc, #284]	; (800211c <HAL_UART_MspInit+0x150>)
 8002000:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002002:	f003 0310 	and.w	r3, r3, #16
 8002006:	623b      	str	r3, [r7, #32]
 8002008:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800200a:	2300      	movs	r3, #0
 800200c:	61fb      	str	r3, [r7, #28]
 800200e:	4b43      	ldr	r3, [pc, #268]	; (800211c <HAL_UART_MspInit+0x150>)
 8002010:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002012:	4a42      	ldr	r2, [pc, #264]	; (800211c <HAL_UART_MspInit+0x150>)
 8002014:	f043 0301 	orr.w	r3, r3, #1
 8002018:	6313      	str	r3, [r2, #48]	; 0x30
 800201a:	4b40      	ldr	r3, [pc, #256]	; (800211c <HAL_UART_MspInit+0x150>)
 800201c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800201e:	f003 0301 	and.w	r3, r3, #1
 8002022:	61fb      	str	r3, [r7, #28]
 8002024:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002026:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800202a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800202c:	2302      	movs	r3, #2
 800202e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002030:	2300      	movs	r3, #0
 8002032:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002034:	2303      	movs	r3, #3
 8002036:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002038:	2307      	movs	r3, #7
 800203a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800203c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002040:	4619      	mov	r1, r3
 8002042:	4837      	ldr	r0, [pc, #220]	; (8002120 <HAL_UART_MspInit+0x154>)
 8002044:	f000 faf8 	bl	8002638 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8002048:	e062      	b.n	8002110 <HAL_UART_MspInit+0x144>
  else if(huart->Instance==USART2)
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	4a35      	ldr	r2, [pc, #212]	; (8002124 <HAL_UART_MspInit+0x158>)
 8002050:	4293      	cmp	r3, r2
 8002052:	d12c      	bne.n	80020ae <HAL_UART_MspInit+0xe2>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002054:	2300      	movs	r3, #0
 8002056:	61bb      	str	r3, [r7, #24]
 8002058:	4b30      	ldr	r3, [pc, #192]	; (800211c <HAL_UART_MspInit+0x150>)
 800205a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800205c:	4a2f      	ldr	r2, [pc, #188]	; (800211c <HAL_UART_MspInit+0x150>)
 800205e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002062:	6413      	str	r3, [r2, #64]	; 0x40
 8002064:	4b2d      	ldr	r3, [pc, #180]	; (800211c <HAL_UART_MspInit+0x150>)
 8002066:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002068:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800206c:	61bb      	str	r3, [r7, #24]
 800206e:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002070:	2300      	movs	r3, #0
 8002072:	617b      	str	r3, [r7, #20]
 8002074:	4b29      	ldr	r3, [pc, #164]	; (800211c <HAL_UART_MspInit+0x150>)
 8002076:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002078:	4a28      	ldr	r2, [pc, #160]	; (800211c <HAL_UART_MspInit+0x150>)
 800207a:	f043 0301 	orr.w	r3, r3, #1
 800207e:	6313      	str	r3, [r2, #48]	; 0x30
 8002080:	4b26      	ldr	r3, [pc, #152]	; (800211c <HAL_UART_MspInit+0x150>)
 8002082:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002084:	f003 0301 	and.w	r3, r3, #1
 8002088:	617b      	str	r3, [r7, #20]
 800208a:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800208c:	230c      	movs	r3, #12
 800208e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002090:	2302      	movs	r3, #2
 8002092:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002094:	2300      	movs	r3, #0
 8002096:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002098:	2303      	movs	r3, #3
 800209a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800209c:	2307      	movs	r3, #7
 800209e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020a0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80020a4:	4619      	mov	r1, r3
 80020a6:	481e      	ldr	r0, [pc, #120]	; (8002120 <HAL_UART_MspInit+0x154>)
 80020a8:	f000 fac6 	bl	8002638 <HAL_GPIO_Init>
}
 80020ac:	e030      	b.n	8002110 <HAL_UART_MspInit+0x144>
  else if(huart->Instance==USART6)
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	4a1d      	ldr	r2, [pc, #116]	; (8002128 <HAL_UART_MspInit+0x15c>)
 80020b4:	4293      	cmp	r3, r2
 80020b6:	d12b      	bne.n	8002110 <HAL_UART_MspInit+0x144>
    __HAL_RCC_USART6_CLK_ENABLE();
 80020b8:	2300      	movs	r3, #0
 80020ba:	613b      	str	r3, [r7, #16]
 80020bc:	4b17      	ldr	r3, [pc, #92]	; (800211c <HAL_UART_MspInit+0x150>)
 80020be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020c0:	4a16      	ldr	r2, [pc, #88]	; (800211c <HAL_UART_MspInit+0x150>)
 80020c2:	f043 0320 	orr.w	r3, r3, #32
 80020c6:	6453      	str	r3, [r2, #68]	; 0x44
 80020c8:	4b14      	ldr	r3, [pc, #80]	; (800211c <HAL_UART_MspInit+0x150>)
 80020ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020cc:	f003 0320 	and.w	r3, r3, #32
 80020d0:	613b      	str	r3, [r7, #16]
 80020d2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80020d4:	2300      	movs	r3, #0
 80020d6:	60fb      	str	r3, [r7, #12]
 80020d8:	4b10      	ldr	r3, [pc, #64]	; (800211c <HAL_UART_MspInit+0x150>)
 80020da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020dc:	4a0f      	ldr	r2, [pc, #60]	; (800211c <HAL_UART_MspInit+0x150>)
 80020de:	f043 0304 	orr.w	r3, r3, #4
 80020e2:	6313      	str	r3, [r2, #48]	; 0x30
 80020e4:	4b0d      	ldr	r3, [pc, #52]	; (800211c <HAL_UART_MspInit+0x150>)
 80020e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020e8:	f003 0304 	and.w	r3, r3, #4
 80020ec:	60fb      	str	r3, [r7, #12]
 80020ee:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80020f0:	2340      	movs	r3, #64	; 0x40
 80020f2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80020f4:	2312      	movs	r3, #18
 80020f6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020f8:	2300      	movs	r3, #0
 80020fa:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020fc:	2303      	movs	r3, #3
 80020fe:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8002100:	2308      	movs	r3, #8
 8002102:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002104:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002108:	4619      	mov	r1, r3
 800210a:	4808      	ldr	r0, [pc, #32]	; (800212c <HAL_UART_MspInit+0x160>)
 800210c:	f000 fa94 	bl	8002638 <HAL_GPIO_Init>
}
 8002110:	bf00      	nop
 8002112:	3738      	adds	r7, #56	; 0x38
 8002114:	46bd      	mov	sp, r7
 8002116:	bd80      	pop	{r7, pc}
 8002118:	40011000 	.word	0x40011000
 800211c:	40023800 	.word	0x40023800
 8002120:	40020000 	.word	0x40020000
 8002124:	40004400 	.word	0x40004400
 8002128:	40011400 	.word	0x40011400
 800212c:	40020800 	.word	0x40020800

08002130 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002130:	b480      	push	{r7}
 8002132:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002134:	e7fe      	b.n	8002134 <NMI_Handler+0x4>

08002136 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002136:	b480      	push	{r7}
 8002138:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800213a:	e7fe      	b.n	800213a <HardFault_Handler+0x4>

0800213c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800213c:	b480      	push	{r7}
 800213e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002140:	e7fe      	b.n	8002140 <MemManage_Handler+0x4>

08002142 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002142:	b480      	push	{r7}
 8002144:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002146:	e7fe      	b.n	8002146 <BusFault_Handler+0x4>

08002148 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002148:	b480      	push	{r7}
 800214a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800214c:	e7fe      	b.n	800214c <UsageFault_Handler+0x4>

0800214e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800214e:	b480      	push	{r7}
 8002150:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002152:	bf00      	nop
 8002154:	46bd      	mov	sp, r7
 8002156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215a:	4770      	bx	lr

0800215c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800215c:	b480      	push	{r7}
 800215e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002160:	bf00      	nop
 8002162:	46bd      	mov	sp, r7
 8002164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002168:	4770      	bx	lr

0800216a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800216a:	b480      	push	{r7}
 800216c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800216e:	bf00      	nop
 8002170:	46bd      	mov	sp, r7
 8002172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002176:	4770      	bx	lr

08002178 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002178:	b580      	push	{r7, lr}
 800217a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800217c:	f000 f956 	bl	800242c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002180:	bf00      	nop
 8002182:	bd80      	pop	{r7, pc}

08002184 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002184:	b480      	push	{r7}
 8002186:	af00      	add	r7, sp, #0
	return 1;
 8002188:	2301      	movs	r3, #1
}
 800218a:	4618      	mov	r0, r3
 800218c:	46bd      	mov	sp, r7
 800218e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002192:	4770      	bx	lr

08002194 <_kill>:

int _kill(int pid, int sig)
{
 8002194:	b580      	push	{r7, lr}
 8002196:	b082      	sub	sp, #8
 8002198:	af00      	add	r7, sp, #0
 800219a:	6078      	str	r0, [r7, #4]
 800219c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800219e:	f008 ff99 	bl	800b0d4 <__errno>
 80021a2:	4603      	mov	r3, r0
 80021a4:	2216      	movs	r2, #22
 80021a6:	601a      	str	r2, [r3, #0]
	return -1;
 80021a8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80021ac:	4618      	mov	r0, r3
 80021ae:	3708      	adds	r7, #8
 80021b0:	46bd      	mov	sp, r7
 80021b2:	bd80      	pop	{r7, pc}

080021b4 <_exit>:

void _exit (int status)
{
 80021b4:	b580      	push	{r7, lr}
 80021b6:	b082      	sub	sp, #8
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80021bc:	f04f 31ff 	mov.w	r1, #4294967295
 80021c0:	6878      	ldr	r0, [r7, #4]
 80021c2:	f7ff ffe7 	bl	8002194 <_kill>
	while (1) {}		/* Make sure we hang here */
 80021c6:	e7fe      	b.n	80021c6 <_exit+0x12>

080021c8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	b086      	sub	sp, #24
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	60f8      	str	r0, [r7, #12]
 80021d0:	60b9      	str	r1, [r7, #8]
 80021d2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80021d4:	2300      	movs	r3, #0
 80021d6:	617b      	str	r3, [r7, #20]
 80021d8:	e00a      	b.n	80021f0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80021da:	f3af 8000 	nop.w
 80021de:	4601      	mov	r1, r0
 80021e0:	68bb      	ldr	r3, [r7, #8]
 80021e2:	1c5a      	adds	r2, r3, #1
 80021e4:	60ba      	str	r2, [r7, #8]
 80021e6:	b2ca      	uxtb	r2, r1
 80021e8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80021ea:	697b      	ldr	r3, [r7, #20]
 80021ec:	3301      	adds	r3, #1
 80021ee:	617b      	str	r3, [r7, #20]
 80021f0:	697a      	ldr	r2, [r7, #20]
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	429a      	cmp	r2, r3
 80021f6:	dbf0      	blt.n	80021da <_read+0x12>
	}

return len;
 80021f8:	687b      	ldr	r3, [r7, #4]
}
 80021fa:	4618      	mov	r0, r3
 80021fc:	3718      	adds	r7, #24
 80021fe:	46bd      	mov	sp, r7
 8002200:	bd80      	pop	{r7, pc}

08002202 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002202:	b580      	push	{r7, lr}
 8002204:	b086      	sub	sp, #24
 8002206:	af00      	add	r7, sp, #0
 8002208:	60f8      	str	r0, [r7, #12]
 800220a:	60b9      	str	r1, [r7, #8]
 800220c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800220e:	2300      	movs	r3, #0
 8002210:	617b      	str	r3, [r7, #20]
 8002212:	e009      	b.n	8002228 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002214:	68bb      	ldr	r3, [r7, #8]
 8002216:	1c5a      	adds	r2, r3, #1
 8002218:	60ba      	str	r2, [r7, #8]
 800221a:	781b      	ldrb	r3, [r3, #0]
 800221c:	4618      	mov	r0, r3
 800221e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002222:	697b      	ldr	r3, [r7, #20]
 8002224:	3301      	adds	r3, #1
 8002226:	617b      	str	r3, [r7, #20]
 8002228:	697a      	ldr	r2, [r7, #20]
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	429a      	cmp	r2, r3
 800222e:	dbf1      	blt.n	8002214 <_write+0x12>
	}
	return len;
 8002230:	687b      	ldr	r3, [r7, #4]
}
 8002232:	4618      	mov	r0, r3
 8002234:	3718      	adds	r7, #24
 8002236:	46bd      	mov	sp, r7
 8002238:	bd80      	pop	{r7, pc}

0800223a <_close>:

int _close(int file)
{
 800223a:	b480      	push	{r7}
 800223c:	b083      	sub	sp, #12
 800223e:	af00      	add	r7, sp, #0
 8002240:	6078      	str	r0, [r7, #4]
	return -1;
 8002242:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002246:	4618      	mov	r0, r3
 8002248:	370c      	adds	r7, #12
 800224a:	46bd      	mov	sp, r7
 800224c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002250:	4770      	bx	lr

08002252 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002252:	b480      	push	{r7}
 8002254:	b083      	sub	sp, #12
 8002256:	af00      	add	r7, sp, #0
 8002258:	6078      	str	r0, [r7, #4]
 800225a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800225c:	683b      	ldr	r3, [r7, #0]
 800225e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002262:	605a      	str	r2, [r3, #4]
	return 0;
 8002264:	2300      	movs	r3, #0
}
 8002266:	4618      	mov	r0, r3
 8002268:	370c      	adds	r7, #12
 800226a:	46bd      	mov	sp, r7
 800226c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002270:	4770      	bx	lr

08002272 <_isatty>:

int _isatty(int file)
{
 8002272:	b480      	push	{r7}
 8002274:	b083      	sub	sp, #12
 8002276:	af00      	add	r7, sp, #0
 8002278:	6078      	str	r0, [r7, #4]
	return 1;
 800227a:	2301      	movs	r3, #1
}
 800227c:	4618      	mov	r0, r3
 800227e:	370c      	adds	r7, #12
 8002280:	46bd      	mov	sp, r7
 8002282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002286:	4770      	bx	lr

08002288 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002288:	b480      	push	{r7}
 800228a:	b085      	sub	sp, #20
 800228c:	af00      	add	r7, sp, #0
 800228e:	60f8      	str	r0, [r7, #12]
 8002290:	60b9      	str	r1, [r7, #8]
 8002292:	607a      	str	r2, [r7, #4]
	return 0;
 8002294:	2300      	movs	r3, #0
}
 8002296:	4618      	mov	r0, r3
 8002298:	3714      	adds	r7, #20
 800229a:	46bd      	mov	sp, r7
 800229c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a0:	4770      	bx	lr
	...

080022a4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	b086      	sub	sp, #24
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80022ac:	4a14      	ldr	r2, [pc, #80]	; (8002300 <_sbrk+0x5c>)
 80022ae:	4b15      	ldr	r3, [pc, #84]	; (8002304 <_sbrk+0x60>)
 80022b0:	1ad3      	subs	r3, r2, r3
 80022b2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80022b4:	697b      	ldr	r3, [r7, #20]
 80022b6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80022b8:	4b13      	ldr	r3, [pc, #76]	; (8002308 <_sbrk+0x64>)
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d102      	bne.n	80022c6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80022c0:	4b11      	ldr	r3, [pc, #68]	; (8002308 <_sbrk+0x64>)
 80022c2:	4a12      	ldr	r2, [pc, #72]	; (800230c <_sbrk+0x68>)
 80022c4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80022c6:	4b10      	ldr	r3, [pc, #64]	; (8002308 <_sbrk+0x64>)
 80022c8:	681a      	ldr	r2, [r3, #0]
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	4413      	add	r3, r2
 80022ce:	693a      	ldr	r2, [r7, #16]
 80022d0:	429a      	cmp	r2, r3
 80022d2:	d207      	bcs.n	80022e4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80022d4:	f008 fefe 	bl	800b0d4 <__errno>
 80022d8:	4603      	mov	r3, r0
 80022da:	220c      	movs	r2, #12
 80022dc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80022de:	f04f 33ff 	mov.w	r3, #4294967295
 80022e2:	e009      	b.n	80022f8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80022e4:	4b08      	ldr	r3, [pc, #32]	; (8002308 <_sbrk+0x64>)
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80022ea:	4b07      	ldr	r3, [pc, #28]	; (8002308 <_sbrk+0x64>)
 80022ec:	681a      	ldr	r2, [r3, #0]
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	4413      	add	r3, r2
 80022f2:	4a05      	ldr	r2, [pc, #20]	; (8002308 <_sbrk+0x64>)
 80022f4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80022f6:	68fb      	ldr	r3, [r7, #12]
}
 80022f8:	4618      	mov	r0, r3
 80022fa:	3718      	adds	r7, #24
 80022fc:	46bd      	mov	sp, r7
 80022fe:	bd80      	pop	{r7, pc}
 8002300:	20020000 	.word	0x20020000
 8002304:	00000400 	.word	0x00000400
 8002308:	20001f90 	.word	0x20001f90
 800230c:	20002048 	.word	0x20002048

08002310 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002310:	b480      	push	{r7}
 8002312:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002314:	4b06      	ldr	r3, [pc, #24]	; (8002330 <SystemInit+0x20>)
 8002316:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800231a:	4a05      	ldr	r2, [pc, #20]	; (8002330 <SystemInit+0x20>)
 800231c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002320:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002324:	bf00      	nop
 8002326:	46bd      	mov	sp, r7
 8002328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232c:	4770      	bx	lr
 800232e:	bf00      	nop
 8002330:	e000ed00 	.word	0xe000ed00

08002334 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002334:	f8df d034 	ldr.w	sp, [pc, #52]	; 800236c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002338:	480d      	ldr	r0, [pc, #52]	; (8002370 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800233a:	490e      	ldr	r1, [pc, #56]	; (8002374 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800233c:	4a0e      	ldr	r2, [pc, #56]	; (8002378 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800233e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002340:	e002      	b.n	8002348 <LoopCopyDataInit>

08002342 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002342:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002344:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002346:	3304      	adds	r3, #4

08002348 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002348:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800234a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800234c:	d3f9      	bcc.n	8002342 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800234e:	4a0b      	ldr	r2, [pc, #44]	; (800237c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002350:	4c0b      	ldr	r4, [pc, #44]	; (8002380 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002352:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002354:	e001      	b.n	800235a <LoopFillZerobss>

08002356 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002356:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002358:	3204      	adds	r2, #4

0800235a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800235a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800235c:	d3fb      	bcc.n	8002356 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800235e:	f7ff ffd7 	bl	8002310 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002362:	f009 f887 	bl	800b474 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002366:	f7fe ffaf 	bl	80012c8 <main>
  bx  lr    
 800236a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800236c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002370:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002374:	20000214 	.word	0x20000214
  ldr r2, =_sidata
 8002378:	08022000 	.word	0x08022000
  ldr r2, =_sbss
 800237c:	20000214 	.word	0x20000214
  ldr r4, =_ebss
 8002380:	20002044 	.word	0x20002044

08002384 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002384:	e7fe      	b.n	8002384 <ADC_IRQHandler>
	...

08002388 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002388:	b580      	push	{r7, lr}
 800238a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800238c:	4b0e      	ldr	r3, [pc, #56]	; (80023c8 <HAL_Init+0x40>)
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	4a0d      	ldr	r2, [pc, #52]	; (80023c8 <HAL_Init+0x40>)
 8002392:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002396:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002398:	4b0b      	ldr	r3, [pc, #44]	; (80023c8 <HAL_Init+0x40>)
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	4a0a      	ldr	r2, [pc, #40]	; (80023c8 <HAL_Init+0x40>)
 800239e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80023a2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80023a4:	4b08      	ldr	r3, [pc, #32]	; (80023c8 <HAL_Init+0x40>)
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	4a07      	ldr	r2, [pc, #28]	; (80023c8 <HAL_Init+0x40>)
 80023aa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023ae:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80023b0:	2003      	movs	r0, #3
 80023b2:	f000 f90d 	bl	80025d0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80023b6:	2000      	movs	r0, #0
 80023b8:	f000 f808 	bl	80023cc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80023bc:	f7ff fdbc 	bl	8001f38 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80023c0:	2300      	movs	r3, #0
}
 80023c2:	4618      	mov	r0, r3
 80023c4:	bd80      	pop	{r7, pc}
 80023c6:	bf00      	nop
 80023c8:	40023c00 	.word	0x40023c00

080023cc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80023cc:	b580      	push	{r7, lr}
 80023ce:	b082      	sub	sp, #8
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80023d4:	4b12      	ldr	r3, [pc, #72]	; (8002420 <HAL_InitTick+0x54>)
 80023d6:	681a      	ldr	r2, [r3, #0]
 80023d8:	4b12      	ldr	r3, [pc, #72]	; (8002424 <HAL_InitTick+0x58>)
 80023da:	781b      	ldrb	r3, [r3, #0]
 80023dc:	4619      	mov	r1, r3
 80023de:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80023e2:	fbb3 f3f1 	udiv	r3, r3, r1
 80023e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80023ea:	4618      	mov	r0, r3
 80023ec:	f000 f917 	bl	800261e <HAL_SYSTICK_Config>
 80023f0:	4603      	mov	r3, r0
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d001      	beq.n	80023fa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80023f6:	2301      	movs	r3, #1
 80023f8:	e00e      	b.n	8002418 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	2b0f      	cmp	r3, #15
 80023fe:	d80a      	bhi.n	8002416 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002400:	2200      	movs	r2, #0
 8002402:	6879      	ldr	r1, [r7, #4]
 8002404:	f04f 30ff 	mov.w	r0, #4294967295
 8002408:	f000 f8ed 	bl	80025e6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800240c:	4a06      	ldr	r2, [pc, #24]	; (8002428 <HAL_InitTick+0x5c>)
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002412:	2300      	movs	r3, #0
 8002414:	e000      	b.n	8002418 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002416:	2301      	movs	r3, #1
}
 8002418:	4618      	mov	r0, r3
 800241a:	3708      	adds	r7, #8
 800241c:	46bd      	mov	sp, r7
 800241e:	bd80      	pop	{r7, pc}
 8002420:	20000030 	.word	0x20000030
 8002424:	20000038 	.word	0x20000038
 8002428:	20000034 	.word	0x20000034

0800242c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800242c:	b480      	push	{r7}
 800242e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002430:	4b06      	ldr	r3, [pc, #24]	; (800244c <HAL_IncTick+0x20>)
 8002432:	781b      	ldrb	r3, [r3, #0]
 8002434:	461a      	mov	r2, r3
 8002436:	4b06      	ldr	r3, [pc, #24]	; (8002450 <HAL_IncTick+0x24>)
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	4413      	add	r3, r2
 800243c:	4a04      	ldr	r2, [pc, #16]	; (8002450 <HAL_IncTick+0x24>)
 800243e:	6013      	str	r3, [r2, #0]
}
 8002440:	bf00      	nop
 8002442:	46bd      	mov	sp, r7
 8002444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002448:	4770      	bx	lr
 800244a:	bf00      	nop
 800244c:	20000038 	.word	0x20000038
 8002450:	20002030 	.word	0x20002030

08002454 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002454:	b480      	push	{r7}
 8002456:	af00      	add	r7, sp, #0
  return uwTick;
 8002458:	4b03      	ldr	r3, [pc, #12]	; (8002468 <HAL_GetTick+0x14>)
 800245a:	681b      	ldr	r3, [r3, #0]
}
 800245c:	4618      	mov	r0, r3
 800245e:	46bd      	mov	sp, r7
 8002460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002464:	4770      	bx	lr
 8002466:	bf00      	nop
 8002468:	20002030 	.word	0x20002030

0800246c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800246c:	b480      	push	{r7}
 800246e:	b085      	sub	sp, #20
 8002470:	af00      	add	r7, sp, #0
 8002472:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	f003 0307 	and.w	r3, r3, #7
 800247a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800247c:	4b0c      	ldr	r3, [pc, #48]	; (80024b0 <__NVIC_SetPriorityGrouping+0x44>)
 800247e:	68db      	ldr	r3, [r3, #12]
 8002480:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002482:	68ba      	ldr	r2, [r7, #8]
 8002484:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002488:	4013      	ands	r3, r2
 800248a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002490:	68bb      	ldr	r3, [r7, #8]
 8002492:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002494:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002498:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800249c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800249e:	4a04      	ldr	r2, [pc, #16]	; (80024b0 <__NVIC_SetPriorityGrouping+0x44>)
 80024a0:	68bb      	ldr	r3, [r7, #8]
 80024a2:	60d3      	str	r3, [r2, #12]
}
 80024a4:	bf00      	nop
 80024a6:	3714      	adds	r7, #20
 80024a8:	46bd      	mov	sp, r7
 80024aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ae:	4770      	bx	lr
 80024b0:	e000ed00 	.word	0xe000ed00

080024b4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80024b4:	b480      	push	{r7}
 80024b6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80024b8:	4b04      	ldr	r3, [pc, #16]	; (80024cc <__NVIC_GetPriorityGrouping+0x18>)
 80024ba:	68db      	ldr	r3, [r3, #12]
 80024bc:	0a1b      	lsrs	r3, r3, #8
 80024be:	f003 0307 	and.w	r3, r3, #7
}
 80024c2:	4618      	mov	r0, r3
 80024c4:	46bd      	mov	sp, r7
 80024c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ca:	4770      	bx	lr
 80024cc:	e000ed00 	.word	0xe000ed00

080024d0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80024d0:	b480      	push	{r7}
 80024d2:	b083      	sub	sp, #12
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	4603      	mov	r3, r0
 80024d8:	6039      	str	r1, [r7, #0]
 80024da:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80024dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	db0a      	blt.n	80024fa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024e4:	683b      	ldr	r3, [r7, #0]
 80024e6:	b2da      	uxtb	r2, r3
 80024e8:	490c      	ldr	r1, [pc, #48]	; (800251c <__NVIC_SetPriority+0x4c>)
 80024ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024ee:	0112      	lsls	r2, r2, #4
 80024f0:	b2d2      	uxtb	r2, r2
 80024f2:	440b      	add	r3, r1
 80024f4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80024f8:	e00a      	b.n	8002510 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024fa:	683b      	ldr	r3, [r7, #0]
 80024fc:	b2da      	uxtb	r2, r3
 80024fe:	4908      	ldr	r1, [pc, #32]	; (8002520 <__NVIC_SetPriority+0x50>)
 8002500:	79fb      	ldrb	r3, [r7, #7]
 8002502:	f003 030f 	and.w	r3, r3, #15
 8002506:	3b04      	subs	r3, #4
 8002508:	0112      	lsls	r2, r2, #4
 800250a:	b2d2      	uxtb	r2, r2
 800250c:	440b      	add	r3, r1
 800250e:	761a      	strb	r2, [r3, #24]
}
 8002510:	bf00      	nop
 8002512:	370c      	adds	r7, #12
 8002514:	46bd      	mov	sp, r7
 8002516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800251a:	4770      	bx	lr
 800251c:	e000e100 	.word	0xe000e100
 8002520:	e000ed00 	.word	0xe000ed00

08002524 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002524:	b480      	push	{r7}
 8002526:	b089      	sub	sp, #36	; 0x24
 8002528:	af00      	add	r7, sp, #0
 800252a:	60f8      	str	r0, [r7, #12]
 800252c:	60b9      	str	r1, [r7, #8]
 800252e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	f003 0307 	and.w	r3, r3, #7
 8002536:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002538:	69fb      	ldr	r3, [r7, #28]
 800253a:	f1c3 0307 	rsb	r3, r3, #7
 800253e:	2b04      	cmp	r3, #4
 8002540:	bf28      	it	cs
 8002542:	2304      	movcs	r3, #4
 8002544:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002546:	69fb      	ldr	r3, [r7, #28]
 8002548:	3304      	adds	r3, #4
 800254a:	2b06      	cmp	r3, #6
 800254c:	d902      	bls.n	8002554 <NVIC_EncodePriority+0x30>
 800254e:	69fb      	ldr	r3, [r7, #28]
 8002550:	3b03      	subs	r3, #3
 8002552:	e000      	b.n	8002556 <NVIC_EncodePriority+0x32>
 8002554:	2300      	movs	r3, #0
 8002556:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002558:	f04f 32ff 	mov.w	r2, #4294967295
 800255c:	69bb      	ldr	r3, [r7, #24]
 800255e:	fa02 f303 	lsl.w	r3, r2, r3
 8002562:	43da      	mvns	r2, r3
 8002564:	68bb      	ldr	r3, [r7, #8]
 8002566:	401a      	ands	r2, r3
 8002568:	697b      	ldr	r3, [r7, #20]
 800256a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800256c:	f04f 31ff 	mov.w	r1, #4294967295
 8002570:	697b      	ldr	r3, [r7, #20]
 8002572:	fa01 f303 	lsl.w	r3, r1, r3
 8002576:	43d9      	mvns	r1, r3
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800257c:	4313      	orrs	r3, r2
         );
}
 800257e:	4618      	mov	r0, r3
 8002580:	3724      	adds	r7, #36	; 0x24
 8002582:	46bd      	mov	sp, r7
 8002584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002588:	4770      	bx	lr
	...

0800258c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800258c:	b580      	push	{r7, lr}
 800258e:	b082      	sub	sp, #8
 8002590:	af00      	add	r7, sp, #0
 8002592:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	3b01      	subs	r3, #1
 8002598:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800259c:	d301      	bcc.n	80025a2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800259e:	2301      	movs	r3, #1
 80025a0:	e00f      	b.n	80025c2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80025a2:	4a0a      	ldr	r2, [pc, #40]	; (80025cc <SysTick_Config+0x40>)
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	3b01      	subs	r3, #1
 80025a8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80025aa:	210f      	movs	r1, #15
 80025ac:	f04f 30ff 	mov.w	r0, #4294967295
 80025b0:	f7ff ff8e 	bl	80024d0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80025b4:	4b05      	ldr	r3, [pc, #20]	; (80025cc <SysTick_Config+0x40>)
 80025b6:	2200      	movs	r2, #0
 80025b8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80025ba:	4b04      	ldr	r3, [pc, #16]	; (80025cc <SysTick_Config+0x40>)
 80025bc:	2207      	movs	r2, #7
 80025be:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80025c0:	2300      	movs	r3, #0
}
 80025c2:	4618      	mov	r0, r3
 80025c4:	3708      	adds	r7, #8
 80025c6:	46bd      	mov	sp, r7
 80025c8:	bd80      	pop	{r7, pc}
 80025ca:	bf00      	nop
 80025cc:	e000e010 	.word	0xe000e010

080025d0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80025d0:	b580      	push	{r7, lr}
 80025d2:	b082      	sub	sp, #8
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80025d8:	6878      	ldr	r0, [r7, #4]
 80025da:	f7ff ff47 	bl	800246c <__NVIC_SetPriorityGrouping>
}
 80025de:	bf00      	nop
 80025e0:	3708      	adds	r7, #8
 80025e2:	46bd      	mov	sp, r7
 80025e4:	bd80      	pop	{r7, pc}

080025e6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80025e6:	b580      	push	{r7, lr}
 80025e8:	b086      	sub	sp, #24
 80025ea:	af00      	add	r7, sp, #0
 80025ec:	4603      	mov	r3, r0
 80025ee:	60b9      	str	r1, [r7, #8]
 80025f0:	607a      	str	r2, [r7, #4]
 80025f2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80025f4:	2300      	movs	r3, #0
 80025f6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80025f8:	f7ff ff5c 	bl	80024b4 <__NVIC_GetPriorityGrouping>
 80025fc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80025fe:	687a      	ldr	r2, [r7, #4]
 8002600:	68b9      	ldr	r1, [r7, #8]
 8002602:	6978      	ldr	r0, [r7, #20]
 8002604:	f7ff ff8e 	bl	8002524 <NVIC_EncodePriority>
 8002608:	4602      	mov	r2, r0
 800260a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800260e:	4611      	mov	r1, r2
 8002610:	4618      	mov	r0, r3
 8002612:	f7ff ff5d 	bl	80024d0 <__NVIC_SetPriority>
}
 8002616:	bf00      	nop
 8002618:	3718      	adds	r7, #24
 800261a:	46bd      	mov	sp, r7
 800261c:	bd80      	pop	{r7, pc}

0800261e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800261e:	b580      	push	{r7, lr}
 8002620:	b082      	sub	sp, #8
 8002622:	af00      	add	r7, sp, #0
 8002624:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002626:	6878      	ldr	r0, [r7, #4]
 8002628:	f7ff ffb0 	bl	800258c <SysTick_Config>
 800262c:	4603      	mov	r3, r0
}
 800262e:	4618      	mov	r0, r3
 8002630:	3708      	adds	r7, #8
 8002632:	46bd      	mov	sp, r7
 8002634:	bd80      	pop	{r7, pc}
	...

08002638 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002638:	b480      	push	{r7}
 800263a:	b089      	sub	sp, #36	; 0x24
 800263c:	af00      	add	r7, sp, #0
 800263e:	6078      	str	r0, [r7, #4]
 8002640:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002642:	2300      	movs	r3, #0
 8002644:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002646:	2300      	movs	r3, #0
 8002648:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800264a:	2300      	movs	r3, #0
 800264c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800264e:	2300      	movs	r3, #0
 8002650:	61fb      	str	r3, [r7, #28]
 8002652:	e159      	b.n	8002908 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002654:	2201      	movs	r2, #1
 8002656:	69fb      	ldr	r3, [r7, #28]
 8002658:	fa02 f303 	lsl.w	r3, r2, r3
 800265c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800265e:	683b      	ldr	r3, [r7, #0]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	697a      	ldr	r2, [r7, #20]
 8002664:	4013      	ands	r3, r2
 8002666:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002668:	693a      	ldr	r2, [r7, #16]
 800266a:	697b      	ldr	r3, [r7, #20]
 800266c:	429a      	cmp	r2, r3
 800266e:	f040 8148 	bne.w	8002902 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002672:	683b      	ldr	r3, [r7, #0]
 8002674:	685b      	ldr	r3, [r3, #4]
 8002676:	f003 0303 	and.w	r3, r3, #3
 800267a:	2b01      	cmp	r3, #1
 800267c:	d005      	beq.n	800268a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800267e:	683b      	ldr	r3, [r7, #0]
 8002680:	685b      	ldr	r3, [r3, #4]
 8002682:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002686:	2b02      	cmp	r3, #2
 8002688:	d130      	bne.n	80026ec <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	689b      	ldr	r3, [r3, #8]
 800268e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002690:	69fb      	ldr	r3, [r7, #28]
 8002692:	005b      	lsls	r3, r3, #1
 8002694:	2203      	movs	r2, #3
 8002696:	fa02 f303 	lsl.w	r3, r2, r3
 800269a:	43db      	mvns	r3, r3
 800269c:	69ba      	ldr	r2, [r7, #24]
 800269e:	4013      	ands	r3, r2
 80026a0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80026a2:	683b      	ldr	r3, [r7, #0]
 80026a4:	68da      	ldr	r2, [r3, #12]
 80026a6:	69fb      	ldr	r3, [r7, #28]
 80026a8:	005b      	lsls	r3, r3, #1
 80026aa:	fa02 f303 	lsl.w	r3, r2, r3
 80026ae:	69ba      	ldr	r2, [r7, #24]
 80026b0:	4313      	orrs	r3, r2
 80026b2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	69ba      	ldr	r2, [r7, #24]
 80026b8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	685b      	ldr	r3, [r3, #4]
 80026be:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80026c0:	2201      	movs	r2, #1
 80026c2:	69fb      	ldr	r3, [r7, #28]
 80026c4:	fa02 f303 	lsl.w	r3, r2, r3
 80026c8:	43db      	mvns	r3, r3
 80026ca:	69ba      	ldr	r2, [r7, #24]
 80026cc:	4013      	ands	r3, r2
 80026ce:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80026d0:	683b      	ldr	r3, [r7, #0]
 80026d2:	685b      	ldr	r3, [r3, #4]
 80026d4:	091b      	lsrs	r3, r3, #4
 80026d6:	f003 0201 	and.w	r2, r3, #1
 80026da:	69fb      	ldr	r3, [r7, #28]
 80026dc:	fa02 f303 	lsl.w	r3, r2, r3
 80026e0:	69ba      	ldr	r2, [r7, #24]
 80026e2:	4313      	orrs	r3, r2
 80026e4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	69ba      	ldr	r2, [r7, #24]
 80026ea:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80026ec:	683b      	ldr	r3, [r7, #0]
 80026ee:	685b      	ldr	r3, [r3, #4]
 80026f0:	f003 0303 	and.w	r3, r3, #3
 80026f4:	2b03      	cmp	r3, #3
 80026f6:	d017      	beq.n	8002728 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	68db      	ldr	r3, [r3, #12]
 80026fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80026fe:	69fb      	ldr	r3, [r7, #28]
 8002700:	005b      	lsls	r3, r3, #1
 8002702:	2203      	movs	r2, #3
 8002704:	fa02 f303 	lsl.w	r3, r2, r3
 8002708:	43db      	mvns	r3, r3
 800270a:	69ba      	ldr	r2, [r7, #24]
 800270c:	4013      	ands	r3, r2
 800270e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002710:	683b      	ldr	r3, [r7, #0]
 8002712:	689a      	ldr	r2, [r3, #8]
 8002714:	69fb      	ldr	r3, [r7, #28]
 8002716:	005b      	lsls	r3, r3, #1
 8002718:	fa02 f303 	lsl.w	r3, r2, r3
 800271c:	69ba      	ldr	r2, [r7, #24]
 800271e:	4313      	orrs	r3, r2
 8002720:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	69ba      	ldr	r2, [r7, #24]
 8002726:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002728:	683b      	ldr	r3, [r7, #0]
 800272a:	685b      	ldr	r3, [r3, #4]
 800272c:	f003 0303 	and.w	r3, r3, #3
 8002730:	2b02      	cmp	r3, #2
 8002732:	d123      	bne.n	800277c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002734:	69fb      	ldr	r3, [r7, #28]
 8002736:	08da      	lsrs	r2, r3, #3
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	3208      	adds	r2, #8
 800273c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002740:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002742:	69fb      	ldr	r3, [r7, #28]
 8002744:	f003 0307 	and.w	r3, r3, #7
 8002748:	009b      	lsls	r3, r3, #2
 800274a:	220f      	movs	r2, #15
 800274c:	fa02 f303 	lsl.w	r3, r2, r3
 8002750:	43db      	mvns	r3, r3
 8002752:	69ba      	ldr	r2, [r7, #24]
 8002754:	4013      	ands	r3, r2
 8002756:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002758:	683b      	ldr	r3, [r7, #0]
 800275a:	691a      	ldr	r2, [r3, #16]
 800275c:	69fb      	ldr	r3, [r7, #28]
 800275e:	f003 0307 	and.w	r3, r3, #7
 8002762:	009b      	lsls	r3, r3, #2
 8002764:	fa02 f303 	lsl.w	r3, r2, r3
 8002768:	69ba      	ldr	r2, [r7, #24]
 800276a:	4313      	orrs	r3, r2
 800276c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800276e:	69fb      	ldr	r3, [r7, #28]
 8002770:	08da      	lsrs	r2, r3, #3
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	3208      	adds	r2, #8
 8002776:	69b9      	ldr	r1, [r7, #24]
 8002778:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002782:	69fb      	ldr	r3, [r7, #28]
 8002784:	005b      	lsls	r3, r3, #1
 8002786:	2203      	movs	r2, #3
 8002788:	fa02 f303 	lsl.w	r3, r2, r3
 800278c:	43db      	mvns	r3, r3
 800278e:	69ba      	ldr	r2, [r7, #24]
 8002790:	4013      	ands	r3, r2
 8002792:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002794:	683b      	ldr	r3, [r7, #0]
 8002796:	685b      	ldr	r3, [r3, #4]
 8002798:	f003 0203 	and.w	r2, r3, #3
 800279c:	69fb      	ldr	r3, [r7, #28]
 800279e:	005b      	lsls	r3, r3, #1
 80027a0:	fa02 f303 	lsl.w	r3, r2, r3
 80027a4:	69ba      	ldr	r2, [r7, #24]
 80027a6:	4313      	orrs	r3, r2
 80027a8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	69ba      	ldr	r2, [r7, #24]
 80027ae:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80027b0:	683b      	ldr	r3, [r7, #0]
 80027b2:	685b      	ldr	r3, [r3, #4]
 80027b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	f000 80a2 	beq.w	8002902 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80027be:	2300      	movs	r3, #0
 80027c0:	60fb      	str	r3, [r7, #12]
 80027c2:	4b57      	ldr	r3, [pc, #348]	; (8002920 <HAL_GPIO_Init+0x2e8>)
 80027c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027c6:	4a56      	ldr	r2, [pc, #344]	; (8002920 <HAL_GPIO_Init+0x2e8>)
 80027c8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80027cc:	6453      	str	r3, [r2, #68]	; 0x44
 80027ce:	4b54      	ldr	r3, [pc, #336]	; (8002920 <HAL_GPIO_Init+0x2e8>)
 80027d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80027d6:	60fb      	str	r3, [r7, #12]
 80027d8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80027da:	4a52      	ldr	r2, [pc, #328]	; (8002924 <HAL_GPIO_Init+0x2ec>)
 80027dc:	69fb      	ldr	r3, [r7, #28]
 80027de:	089b      	lsrs	r3, r3, #2
 80027e0:	3302      	adds	r3, #2
 80027e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80027e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80027e8:	69fb      	ldr	r3, [r7, #28]
 80027ea:	f003 0303 	and.w	r3, r3, #3
 80027ee:	009b      	lsls	r3, r3, #2
 80027f0:	220f      	movs	r2, #15
 80027f2:	fa02 f303 	lsl.w	r3, r2, r3
 80027f6:	43db      	mvns	r3, r3
 80027f8:	69ba      	ldr	r2, [r7, #24]
 80027fa:	4013      	ands	r3, r2
 80027fc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	4a49      	ldr	r2, [pc, #292]	; (8002928 <HAL_GPIO_Init+0x2f0>)
 8002802:	4293      	cmp	r3, r2
 8002804:	d019      	beq.n	800283a <HAL_GPIO_Init+0x202>
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	4a48      	ldr	r2, [pc, #288]	; (800292c <HAL_GPIO_Init+0x2f4>)
 800280a:	4293      	cmp	r3, r2
 800280c:	d013      	beq.n	8002836 <HAL_GPIO_Init+0x1fe>
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	4a47      	ldr	r2, [pc, #284]	; (8002930 <HAL_GPIO_Init+0x2f8>)
 8002812:	4293      	cmp	r3, r2
 8002814:	d00d      	beq.n	8002832 <HAL_GPIO_Init+0x1fa>
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	4a46      	ldr	r2, [pc, #280]	; (8002934 <HAL_GPIO_Init+0x2fc>)
 800281a:	4293      	cmp	r3, r2
 800281c:	d007      	beq.n	800282e <HAL_GPIO_Init+0x1f6>
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	4a45      	ldr	r2, [pc, #276]	; (8002938 <HAL_GPIO_Init+0x300>)
 8002822:	4293      	cmp	r3, r2
 8002824:	d101      	bne.n	800282a <HAL_GPIO_Init+0x1f2>
 8002826:	2304      	movs	r3, #4
 8002828:	e008      	b.n	800283c <HAL_GPIO_Init+0x204>
 800282a:	2307      	movs	r3, #7
 800282c:	e006      	b.n	800283c <HAL_GPIO_Init+0x204>
 800282e:	2303      	movs	r3, #3
 8002830:	e004      	b.n	800283c <HAL_GPIO_Init+0x204>
 8002832:	2302      	movs	r3, #2
 8002834:	e002      	b.n	800283c <HAL_GPIO_Init+0x204>
 8002836:	2301      	movs	r3, #1
 8002838:	e000      	b.n	800283c <HAL_GPIO_Init+0x204>
 800283a:	2300      	movs	r3, #0
 800283c:	69fa      	ldr	r2, [r7, #28]
 800283e:	f002 0203 	and.w	r2, r2, #3
 8002842:	0092      	lsls	r2, r2, #2
 8002844:	4093      	lsls	r3, r2
 8002846:	69ba      	ldr	r2, [r7, #24]
 8002848:	4313      	orrs	r3, r2
 800284a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800284c:	4935      	ldr	r1, [pc, #212]	; (8002924 <HAL_GPIO_Init+0x2ec>)
 800284e:	69fb      	ldr	r3, [r7, #28]
 8002850:	089b      	lsrs	r3, r3, #2
 8002852:	3302      	adds	r3, #2
 8002854:	69ba      	ldr	r2, [r7, #24]
 8002856:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800285a:	4b38      	ldr	r3, [pc, #224]	; (800293c <HAL_GPIO_Init+0x304>)
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002860:	693b      	ldr	r3, [r7, #16]
 8002862:	43db      	mvns	r3, r3
 8002864:	69ba      	ldr	r2, [r7, #24]
 8002866:	4013      	ands	r3, r2
 8002868:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800286a:	683b      	ldr	r3, [r7, #0]
 800286c:	685b      	ldr	r3, [r3, #4]
 800286e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002872:	2b00      	cmp	r3, #0
 8002874:	d003      	beq.n	800287e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002876:	69ba      	ldr	r2, [r7, #24]
 8002878:	693b      	ldr	r3, [r7, #16]
 800287a:	4313      	orrs	r3, r2
 800287c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800287e:	4a2f      	ldr	r2, [pc, #188]	; (800293c <HAL_GPIO_Init+0x304>)
 8002880:	69bb      	ldr	r3, [r7, #24]
 8002882:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002884:	4b2d      	ldr	r3, [pc, #180]	; (800293c <HAL_GPIO_Init+0x304>)
 8002886:	685b      	ldr	r3, [r3, #4]
 8002888:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800288a:	693b      	ldr	r3, [r7, #16]
 800288c:	43db      	mvns	r3, r3
 800288e:	69ba      	ldr	r2, [r7, #24]
 8002890:	4013      	ands	r3, r2
 8002892:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002894:	683b      	ldr	r3, [r7, #0]
 8002896:	685b      	ldr	r3, [r3, #4]
 8002898:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800289c:	2b00      	cmp	r3, #0
 800289e:	d003      	beq.n	80028a8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80028a0:	69ba      	ldr	r2, [r7, #24]
 80028a2:	693b      	ldr	r3, [r7, #16]
 80028a4:	4313      	orrs	r3, r2
 80028a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80028a8:	4a24      	ldr	r2, [pc, #144]	; (800293c <HAL_GPIO_Init+0x304>)
 80028aa:	69bb      	ldr	r3, [r7, #24]
 80028ac:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80028ae:	4b23      	ldr	r3, [pc, #140]	; (800293c <HAL_GPIO_Init+0x304>)
 80028b0:	689b      	ldr	r3, [r3, #8]
 80028b2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80028b4:	693b      	ldr	r3, [r7, #16]
 80028b6:	43db      	mvns	r3, r3
 80028b8:	69ba      	ldr	r2, [r7, #24]
 80028ba:	4013      	ands	r3, r2
 80028bc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80028be:	683b      	ldr	r3, [r7, #0]
 80028c0:	685b      	ldr	r3, [r3, #4]
 80028c2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d003      	beq.n	80028d2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80028ca:	69ba      	ldr	r2, [r7, #24]
 80028cc:	693b      	ldr	r3, [r7, #16]
 80028ce:	4313      	orrs	r3, r2
 80028d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80028d2:	4a1a      	ldr	r2, [pc, #104]	; (800293c <HAL_GPIO_Init+0x304>)
 80028d4:	69bb      	ldr	r3, [r7, #24]
 80028d6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80028d8:	4b18      	ldr	r3, [pc, #96]	; (800293c <HAL_GPIO_Init+0x304>)
 80028da:	68db      	ldr	r3, [r3, #12]
 80028dc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80028de:	693b      	ldr	r3, [r7, #16]
 80028e0:	43db      	mvns	r3, r3
 80028e2:	69ba      	ldr	r2, [r7, #24]
 80028e4:	4013      	ands	r3, r2
 80028e6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80028e8:	683b      	ldr	r3, [r7, #0]
 80028ea:	685b      	ldr	r3, [r3, #4]
 80028ec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d003      	beq.n	80028fc <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80028f4:	69ba      	ldr	r2, [r7, #24]
 80028f6:	693b      	ldr	r3, [r7, #16]
 80028f8:	4313      	orrs	r3, r2
 80028fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80028fc:	4a0f      	ldr	r2, [pc, #60]	; (800293c <HAL_GPIO_Init+0x304>)
 80028fe:	69bb      	ldr	r3, [r7, #24]
 8002900:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002902:	69fb      	ldr	r3, [r7, #28]
 8002904:	3301      	adds	r3, #1
 8002906:	61fb      	str	r3, [r7, #28]
 8002908:	69fb      	ldr	r3, [r7, #28]
 800290a:	2b0f      	cmp	r3, #15
 800290c:	f67f aea2 	bls.w	8002654 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002910:	bf00      	nop
 8002912:	bf00      	nop
 8002914:	3724      	adds	r7, #36	; 0x24
 8002916:	46bd      	mov	sp, r7
 8002918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800291c:	4770      	bx	lr
 800291e:	bf00      	nop
 8002920:	40023800 	.word	0x40023800
 8002924:	40013800 	.word	0x40013800
 8002928:	40020000 	.word	0x40020000
 800292c:	40020400 	.word	0x40020400
 8002930:	40020800 	.word	0x40020800
 8002934:	40020c00 	.word	0x40020c00
 8002938:	40021000 	.word	0x40021000
 800293c:	40013c00 	.word	0x40013c00

08002940 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002940:	b480      	push	{r7}
 8002942:	b083      	sub	sp, #12
 8002944:	af00      	add	r7, sp, #0
 8002946:	6078      	str	r0, [r7, #4]
 8002948:	460b      	mov	r3, r1
 800294a:	807b      	strh	r3, [r7, #2]
 800294c:	4613      	mov	r3, r2
 800294e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002950:	787b      	ldrb	r3, [r7, #1]
 8002952:	2b00      	cmp	r3, #0
 8002954:	d003      	beq.n	800295e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002956:	887a      	ldrh	r2, [r7, #2]
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800295c:	e003      	b.n	8002966 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800295e:	887b      	ldrh	r3, [r7, #2]
 8002960:	041a      	lsls	r2, r3, #16
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	619a      	str	r2, [r3, #24]
}
 8002966:	bf00      	nop
 8002968:	370c      	adds	r7, #12
 800296a:	46bd      	mov	sp, r7
 800296c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002970:	4770      	bx	lr
	...

08002974 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002974:	b580      	push	{r7, lr}
 8002976:	b086      	sub	sp, #24
 8002978:	af00      	add	r7, sp, #0
 800297a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	2b00      	cmp	r3, #0
 8002980:	d101      	bne.n	8002986 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002982:	2301      	movs	r3, #1
 8002984:	e264      	b.n	8002e50 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f003 0301 	and.w	r3, r3, #1
 800298e:	2b00      	cmp	r3, #0
 8002990:	d075      	beq.n	8002a7e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002992:	4ba3      	ldr	r3, [pc, #652]	; (8002c20 <HAL_RCC_OscConfig+0x2ac>)
 8002994:	689b      	ldr	r3, [r3, #8]
 8002996:	f003 030c 	and.w	r3, r3, #12
 800299a:	2b04      	cmp	r3, #4
 800299c:	d00c      	beq.n	80029b8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800299e:	4ba0      	ldr	r3, [pc, #640]	; (8002c20 <HAL_RCC_OscConfig+0x2ac>)
 80029a0:	689b      	ldr	r3, [r3, #8]
 80029a2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80029a6:	2b08      	cmp	r3, #8
 80029a8:	d112      	bne.n	80029d0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80029aa:	4b9d      	ldr	r3, [pc, #628]	; (8002c20 <HAL_RCC_OscConfig+0x2ac>)
 80029ac:	685b      	ldr	r3, [r3, #4]
 80029ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80029b2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80029b6:	d10b      	bne.n	80029d0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80029b8:	4b99      	ldr	r3, [pc, #612]	; (8002c20 <HAL_RCC_OscConfig+0x2ac>)
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d05b      	beq.n	8002a7c <HAL_RCC_OscConfig+0x108>
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	685b      	ldr	r3, [r3, #4]
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d157      	bne.n	8002a7c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80029cc:	2301      	movs	r3, #1
 80029ce:	e23f      	b.n	8002e50 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	685b      	ldr	r3, [r3, #4]
 80029d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80029d8:	d106      	bne.n	80029e8 <HAL_RCC_OscConfig+0x74>
 80029da:	4b91      	ldr	r3, [pc, #580]	; (8002c20 <HAL_RCC_OscConfig+0x2ac>)
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	4a90      	ldr	r2, [pc, #576]	; (8002c20 <HAL_RCC_OscConfig+0x2ac>)
 80029e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029e4:	6013      	str	r3, [r2, #0]
 80029e6:	e01d      	b.n	8002a24 <HAL_RCC_OscConfig+0xb0>
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	685b      	ldr	r3, [r3, #4]
 80029ec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80029f0:	d10c      	bne.n	8002a0c <HAL_RCC_OscConfig+0x98>
 80029f2:	4b8b      	ldr	r3, [pc, #556]	; (8002c20 <HAL_RCC_OscConfig+0x2ac>)
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	4a8a      	ldr	r2, [pc, #552]	; (8002c20 <HAL_RCC_OscConfig+0x2ac>)
 80029f8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80029fc:	6013      	str	r3, [r2, #0]
 80029fe:	4b88      	ldr	r3, [pc, #544]	; (8002c20 <HAL_RCC_OscConfig+0x2ac>)
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	4a87      	ldr	r2, [pc, #540]	; (8002c20 <HAL_RCC_OscConfig+0x2ac>)
 8002a04:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a08:	6013      	str	r3, [r2, #0]
 8002a0a:	e00b      	b.n	8002a24 <HAL_RCC_OscConfig+0xb0>
 8002a0c:	4b84      	ldr	r3, [pc, #528]	; (8002c20 <HAL_RCC_OscConfig+0x2ac>)
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	4a83      	ldr	r2, [pc, #524]	; (8002c20 <HAL_RCC_OscConfig+0x2ac>)
 8002a12:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a16:	6013      	str	r3, [r2, #0]
 8002a18:	4b81      	ldr	r3, [pc, #516]	; (8002c20 <HAL_RCC_OscConfig+0x2ac>)
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	4a80      	ldr	r2, [pc, #512]	; (8002c20 <HAL_RCC_OscConfig+0x2ac>)
 8002a1e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002a22:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	685b      	ldr	r3, [r3, #4]
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d013      	beq.n	8002a54 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a2c:	f7ff fd12 	bl	8002454 <HAL_GetTick>
 8002a30:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a32:	e008      	b.n	8002a46 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002a34:	f7ff fd0e 	bl	8002454 <HAL_GetTick>
 8002a38:	4602      	mov	r2, r0
 8002a3a:	693b      	ldr	r3, [r7, #16]
 8002a3c:	1ad3      	subs	r3, r2, r3
 8002a3e:	2b64      	cmp	r3, #100	; 0x64
 8002a40:	d901      	bls.n	8002a46 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002a42:	2303      	movs	r3, #3
 8002a44:	e204      	b.n	8002e50 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a46:	4b76      	ldr	r3, [pc, #472]	; (8002c20 <HAL_RCC_OscConfig+0x2ac>)
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d0f0      	beq.n	8002a34 <HAL_RCC_OscConfig+0xc0>
 8002a52:	e014      	b.n	8002a7e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a54:	f7ff fcfe 	bl	8002454 <HAL_GetTick>
 8002a58:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a5a:	e008      	b.n	8002a6e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002a5c:	f7ff fcfa 	bl	8002454 <HAL_GetTick>
 8002a60:	4602      	mov	r2, r0
 8002a62:	693b      	ldr	r3, [r7, #16]
 8002a64:	1ad3      	subs	r3, r2, r3
 8002a66:	2b64      	cmp	r3, #100	; 0x64
 8002a68:	d901      	bls.n	8002a6e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002a6a:	2303      	movs	r3, #3
 8002a6c:	e1f0      	b.n	8002e50 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a6e:	4b6c      	ldr	r3, [pc, #432]	; (8002c20 <HAL_RCC_OscConfig+0x2ac>)
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d1f0      	bne.n	8002a5c <HAL_RCC_OscConfig+0xe8>
 8002a7a:	e000      	b.n	8002a7e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a7c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f003 0302 	and.w	r3, r3, #2
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d063      	beq.n	8002b52 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002a8a:	4b65      	ldr	r3, [pc, #404]	; (8002c20 <HAL_RCC_OscConfig+0x2ac>)
 8002a8c:	689b      	ldr	r3, [r3, #8]
 8002a8e:	f003 030c 	and.w	r3, r3, #12
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d00b      	beq.n	8002aae <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002a96:	4b62      	ldr	r3, [pc, #392]	; (8002c20 <HAL_RCC_OscConfig+0x2ac>)
 8002a98:	689b      	ldr	r3, [r3, #8]
 8002a9a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002a9e:	2b08      	cmp	r3, #8
 8002aa0:	d11c      	bne.n	8002adc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002aa2:	4b5f      	ldr	r3, [pc, #380]	; (8002c20 <HAL_RCC_OscConfig+0x2ac>)
 8002aa4:	685b      	ldr	r3, [r3, #4]
 8002aa6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d116      	bne.n	8002adc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002aae:	4b5c      	ldr	r3, [pc, #368]	; (8002c20 <HAL_RCC_OscConfig+0x2ac>)
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	f003 0302 	and.w	r3, r3, #2
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d005      	beq.n	8002ac6 <HAL_RCC_OscConfig+0x152>
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	68db      	ldr	r3, [r3, #12]
 8002abe:	2b01      	cmp	r3, #1
 8002ac0:	d001      	beq.n	8002ac6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002ac2:	2301      	movs	r3, #1
 8002ac4:	e1c4      	b.n	8002e50 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ac6:	4b56      	ldr	r3, [pc, #344]	; (8002c20 <HAL_RCC_OscConfig+0x2ac>)
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	691b      	ldr	r3, [r3, #16]
 8002ad2:	00db      	lsls	r3, r3, #3
 8002ad4:	4952      	ldr	r1, [pc, #328]	; (8002c20 <HAL_RCC_OscConfig+0x2ac>)
 8002ad6:	4313      	orrs	r3, r2
 8002ad8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ada:	e03a      	b.n	8002b52 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	68db      	ldr	r3, [r3, #12]
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d020      	beq.n	8002b26 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002ae4:	4b4f      	ldr	r3, [pc, #316]	; (8002c24 <HAL_RCC_OscConfig+0x2b0>)
 8002ae6:	2201      	movs	r2, #1
 8002ae8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002aea:	f7ff fcb3 	bl	8002454 <HAL_GetTick>
 8002aee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002af0:	e008      	b.n	8002b04 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002af2:	f7ff fcaf 	bl	8002454 <HAL_GetTick>
 8002af6:	4602      	mov	r2, r0
 8002af8:	693b      	ldr	r3, [r7, #16]
 8002afa:	1ad3      	subs	r3, r2, r3
 8002afc:	2b02      	cmp	r3, #2
 8002afe:	d901      	bls.n	8002b04 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002b00:	2303      	movs	r3, #3
 8002b02:	e1a5      	b.n	8002e50 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b04:	4b46      	ldr	r3, [pc, #280]	; (8002c20 <HAL_RCC_OscConfig+0x2ac>)
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f003 0302 	and.w	r3, r3, #2
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d0f0      	beq.n	8002af2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b10:	4b43      	ldr	r3, [pc, #268]	; (8002c20 <HAL_RCC_OscConfig+0x2ac>)
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	691b      	ldr	r3, [r3, #16]
 8002b1c:	00db      	lsls	r3, r3, #3
 8002b1e:	4940      	ldr	r1, [pc, #256]	; (8002c20 <HAL_RCC_OscConfig+0x2ac>)
 8002b20:	4313      	orrs	r3, r2
 8002b22:	600b      	str	r3, [r1, #0]
 8002b24:	e015      	b.n	8002b52 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002b26:	4b3f      	ldr	r3, [pc, #252]	; (8002c24 <HAL_RCC_OscConfig+0x2b0>)
 8002b28:	2200      	movs	r2, #0
 8002b2a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b2c:	f7ff fc92 	bl	8002454 <HAL_GetTick>
 8002b30:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b32:	e008      	b.n	8002b46 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002b34:	f7ff fc8e 	bl	8002454 <HAL_GetTick>
 8002b38:	4602      	mov	r2, r0
 8002b3a:	693b      	ldr	r3, [r7, #16]
 8002b3c:	1ad3      	subs	r3, r2, r3
 8002b3e:	2b02      	cmp	r3, #2
 8002b40:	d901      	bls.n	8002b46 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002b42:	2303      	movs	r3, #3
 8002b44:	e184      	b.n	8002e50 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b46:	4b36      	ldr	r3, [pc, #216]	; (8002c20 <HAL_RCC_OscConfig+0x2ac>)
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f003 0302 	and.w	r3, r3, #2
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d1f0      	bne.n	8002b34 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f003 0308 	and.w	r3, r3, #8
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d030      	beq.n	8002bc0 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	695b      	ldr	r3, [r3, #20]
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d016      	beq.n	8002b94 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002b66:	4b30      	ldr	r3, [pc, #192]	; (8002c28 <HAL_RCC_OscConfig+0x2b4>)
 8002b68:	2201      	movs	r2, #1
 8002b6a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b6c:	f7ff fc72 	bl	8002454 <HAL_GetTick>
 8002b70:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b72:	e008      	b.n	8002b86 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002b74:	f7ff fc6e 	bl	8002454 <HAL_GetTick>
 8002b78:	4602      	mov	r2, r0
 8002b7a:	693b      	ldr	r3, [r7, #16]
 8002b7c:	1ad3      	subs	r3, r2, r3
 8002b7e:	2b02      	cmp	r3, #2
 8002b80:	d901      	bls.n	8002b86 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002b82:	2303      	movs	r3, #3
 8002b84:	e164      	b.n	8002e50 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b86:	4b26      	ldr	r3, [pc, #152]	; (8002c20 <HAL_RCC_OscConfig+0x2ac>)
 8002b88:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b8a:	f003 0302 	and.w	r3, r3, #2
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d0f0      	beq.n	8002b74 <HAL_RCC_OscConfig+0x200>
 8002b92:	e015      	b.n	8002bc0 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002b94:	4b24      	ldr	r3, [pc, #144]	; (8002c28 <HAL_RCC_OscConfig+0x2b4>)
 8002b96:	2200      	movs	r2, #0
 8002b98:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b9a:	f7ff fc5b 	bl	8002454 <HAL_GetTick>
 8002b9e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ba0:	e008      	b.n	8002bb4 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002ba2:	f7ff fc57 	bl	8002454 <HAL_GetTick>
 8002ba6:	4602      	mov	r2, r0
 8002ba8:	693b      	ldr	r3, [r7, #16]
 8002baa:	1ad3      	subs	r3, r2, r3
 8002bac:	2b02      	cmp	r3, #2
 8002bae:	d901      	bls.n	8002bb4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002bb0:	2303      	movs	r3, #3
 8002bb2:	e14d      	b.n	8002e50 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002bb4:	4b1a      	ldr	r3, [pc, #104]	; (8002c20 <HAL_RCC_OscConfig+0x2ac>)
 8002bb6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002bb8:	f003 0302 	and.w	r3, r3, #2
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d1f0      	bne.n	8002ba2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f003 0304 	and.w	r3, r3, #4
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	f000 80a0 	beq.w	8002d0e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002bce:	2300      	movs	r3, #0
 8002bd0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002bd2:	4b13      	ldr	r3, [pc, #76]	; (8002c20 <HAL_RCC_OscConfig+0x2ac>)
 8002bd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bd6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d10f      	bne.n	8002bfe <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002bde:	2300      	movs	r3, #0
 8002be0:	60bb      	str	r3, [r7, #8]
 8002be2:	4b0f      	ldr	r3, [pc, #60]	; (8002c20 <HAL_RCC_OscConfig+0x2ac>)
 8002be4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002be6:	4a0e      	ldr	r2, [pc, #56]	; (8002c20 <HAL_RCC_OscConfig+0x2ac>)
 8002be8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002bec:	6413      	str	r3, [r2, #64]	; 0x40
 8002bee:	4b0c      	ldr	r3, [pc, #48]	; (8002c20 <HAL_RCC_OscConfig+0x2ac>)
 8002bf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bf2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bf6:	60bb      	str	r3, [r7, #8]
 8002bf8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002bfa:	2301      	movs	r3, #1
 8002bfc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002bfe:	4b0b      	ldr	r3, [pc, #44]	; (8002c2c <HAL_RCC_OscConfig+0x2b8>)
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d121      	bne.n	8002c4e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002c0a:	4b08      	ldr	r3, [pc, #32]	; (8002c2c <HAL_RCC_OscConfig+0x2b8>)
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	4a07      	ldr	r2, [pc, #28]	; (8002c2c <HAL_RCC_OscConfig+0x2b8>)
 8002c10:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c14:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002c16:	f7ff fc1d 	bl	8002454 <HAL_GetTick>
 8002c1a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c1c:	e011      	b.n	8002c42 <HAL_RCC_OscConfig+0x2ce>
 8002c1e:	bf00      	nop
 8002c20:	40023800 	.word	0x40023800
 8002c24:	42470000 	.word	0x42470000
 8002c28:	42470e80 	.word	0x42470e80
 8002c2c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c30:	f7ff fc10 	bl	8002454 <HAL_GetTick>
 8002c34:	4602      	mov	r2, r0
 8002c36:	693b      	ldr	r3, [r7, #16]
 8002c38:	1ad3      	subs	r3, r2, r3
 8002c3a:	2b02      	cmp	r3, #2
 8002c3c:	d901      	bls.n	8002c42 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002c3e:	2303      	movs	r3, #3
 8002c40:	e106      	b.n	8002e50 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c42:	4b85      	ldr	r3, [pc, #532]	; (8002e58 <HAL_RCC_OscConfig+0x4e4>)
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d0f0      	beq.n	8002c30 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	689b      	ldr	r3, [r3, #8]
 8002c52:	2b01      	cmp	r3, #1
 8002c54:	d106      	bne.n	8002c64 <HAL_RCC_OscConfig+0x2f0>
 8002c56:	4b81      	ldr	r3, [pc, #516]	; (8002e5c <HAL_RCC_OscConfig+0x4e8>)
 8002c58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c5a:	4a80      	ldr	r2, [pc, #512]	; (8002e5c <HAL_RCC_OscConfig+0x4e8>)
 8002c5c:	f043 0301 	orr.w	r3, r3, #1
 8002c60:	6713      	str	r3, [r2, #112]	; 0x70
 8002c62:	e01c      	b.n	8002c9e <HAL_RCC_OscConfig+0x32a>
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	689b      	ldr	r3, [r3, #8]
 8002c68:	2b05      	cmp	r3, #5
 8002c6a:	d10c      	bne.n	8002c86 <HAL_RCC_OscConfig+0x312>
 8002c6c:	4b7b      	ldr	r3, [pc, #492]	; (8002e5c <HAL_RCC_OscConfig+0x4e8>)
 8002c6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c70:	4a7a      	ldr	r2, [pc, #488]	; (8002e5c <HAL_RCC_OscConfig+0x4e8>)
 8002c72:	f043 0304 	orr.w	r3, r3, #4
 8002c76:	6713      	str	r3, [r2, #112]	; 0x70
 8002c78:	4b78      	ldr	r3, [pc, #480]	; (8002e5c <HAL_RCC_OscConfig+0x4e8>)
 8002c7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c7c:	4a77      	ldr	r2, [pc, #476]	; (8002e5c <HAL_RCC_OscConfig+0x4e8>)
 8002c7e:	f043 0301 	orr.w	r3, r3, #1
 8002c82:	6713      	str	r3, [r2, #112]	; 0x70
 8002c84:	e00b      	b.n	8002c9e <HAL_RCC_OscConfig+0x32a>
 8002c86:	4b75      	ldr	r3, [pc, #468]	; (8002e5c <HAL_RCC_OscConfig+0x4e8>)
 8002c88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c8a:	4a74      	ldr	r2, [pc, #464]	; (8002e5c <HAL_RCC_OscConfig+0x4e8>)
 8002c8c:	f023 0301 	bic.w	r3, r3, #1
 8002c90:	6713      	str	r3, [r2, #112]	; 0x70
 8002c92:	4b72      	ldr	r3, [pc, #456]	; (8002e5c <HAL_RCC_OscConfig+0x4e8>)
 8002c94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c96:	4a71      	ldr	r2, [pc, #452]	; (8002e5c <HAL_RCC_OscConfig+0x4e8>)
 8002c98:	f023 0304 	bic.w	r3, r3, #4
 8002c9c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	689b      	ldr	r3, [r3, #8]
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d015      	beq.n	8002cd2 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ca6:	f7ff fbd5 	bl	8002454 <HAL_GetTick>
 8002caa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002cac:	e00a      	b.n	8002cc4 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002cae:	f7ff fbd1 	bl	8002454 <HAL_GetTick>
 8002cb2:	4602      	mov	r2, r0
 8002cb4:	693b      	ldr	r3, [r7, #16]
 8002cb6:	1ad3      	subs	r3, r2, r3
 8002cb8:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cbc:	4293      	cmp	r3, r2
 8002cbe:	d901      	bls.n	8002cc4 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002cc0:	2303      	movs	r3, #3
 8002cc2:	e0c5      	b.n	8002e50 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002cc4:	4b65      	ldr	r3, [pc, #404]	; (8002e5c <HAL_RCC_OscConfig+0x4e8>)
 8002cc6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cc8:	f003 0302 	and.w	r3, r3, #2
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d0ee      	beq.n	8002cae <HAL_RCC_OscConfig+0x33a>
 8002cd0:	e014      	b.n	8002cfc <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002cd2:	f7ff fbbf 	bl	8002454 <HAL_GetTick>
 8002cd6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002cd8:	e00a      	b.n	8002cf0 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002cda:	f7ff fbbb 	bl	8002454 <HAL_GetTick>
 8002cde:	4602      	mov	r2, r0
 8002ce0:	693b      	ldr	r3, [r7, #16]
 8002ce2:	1ad3      	subs	r3, r2, r3
 8002ce4:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ce8:	4293      	cmp	r3, r2
 8002cea:	d901      	bls.n	8002cf0 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002cec:	2303      	movs	r3, #3
 8002cee:	e0af      	b.n	8002e50 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002cf0:	4b5a      	ldr	r3, [pc, #360]	; (8002e5c <HAL_RCC_OscConfig+0x4e8>)
 8002cf2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cf4:	f003 0302 	and.w	r3, r3, #2
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d1ee      	bne.n	8002cda <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002cfc:	7dfb      	ldrb	r3, [r7, #23]
 8002cfe:	2b01      	cmp	r3, #1
 8002d00:	d105      	bne.n	8002d0e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d02:	4b56      	ldr	r3, [pc, #344]	; (8002e5c <HAL_RCC_OscConfig+0x4e8>)
 8002d04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d06:	4a55      	ldr	r2, [pc, #340]	; (8002e5c <HAL_RCC_OscConfig+0x4e8>)
 8002d08:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002d0c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	699b      	ldr	r3, [r3, #24]
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	f000 809b 	beq.w	8002e4e <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002d18:	4b50      	ldr	r3, [pc, #320]	; (8002e5c <HAL_RCC_OscConfig+0x4e8>)
 8002d1a:	689b      	ldr	r3, [r3, #8]
 8002d1c:	f003 030c 	and.w	r3, r3, #12
 8002d20:	2b08      	cmp	r3, #8
 8002d22:	d05c      	beq.n	8002dde <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	699b      	ldr	r3, [r3, #24]
 8002d28:	2b02      	cmp	r3, #2
 8002d2a:	d141      	bne.n	8002db0 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d2c:	4b4c      	ldr	r3, [pc, #304]	; (8002e60 <HAL_RCC_OscConfig+0x4ec>)
 8002d2e:	2200      	movs	r2, #0
 8002d30:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d32:	f7ff fb8f 	bl	8002454 <HAL_GetTick>
 8002d36:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d38:	e008      	b.n	8002d4c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d3a:	f7ff fb8b 	bl	8002454 <HAL_GetTick>
 8002d3e:	4602      	mov	r2, r0
 8002d40:	693b      	ldr	r3, [r7, #16]
 8002d42:	1ad3      	subs	r3, r2, r3
 8002d44:	2b02      	cmp	r3, #2
 8002d46:	d901      	bls.n	8002d4c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002d48:	2303      	movs	r3, #3
 8002d4a:	e081      	b.n	8002e50 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d4c:	4b43      	ldr	r3, [pc, #268]	; (8002e5c <HAL_RCC_OscConfig+0x4e8>)
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d1f0      	bne.n	8002d3a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	69da      	ldr	r2, [r3, #28]
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	6a1b      	ldr	r3, [r3, #32]
 8002d60:	431a      	orrs	r2, r3
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d66:	019b      	lsls	r3, r3, #6
 8002d68:	431a      	orrs	r2, r3
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d6e:	085b      	lsrs	r3, r3, #1
 8002d70:	3b01      	subs	r3, #1
 8002d72:	041b      	lsls	r3, r3, #16
 8002d74:	431a      	orrs	r2, r3
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d7a:	061b      	lsls	r3, r3, #24
 8002d7c:	4937      	ldr	r1, [pc, #220]	; (8002e5c <HAL_RCC_OscConfig+0x4e8>)
 8002d7e:	4313      	orrs	r3, r2
 8002d80:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002d82:	4b37      	ldr	r3, [pc, #220]	; (8002e60 <HAL_RCC_OscConfig+0x4ec>)
 8002d84:	2201      	movs	r2, #1
 8002d86:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d88:	f7ff fb64 	bl	8002454 <HAL_GetTick>
 8002d8c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d8e:	e008      	b.n	8002da2 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d90:	f7ff fb60 	bl	8002454 <HAL_GetTick>
 8002d94:	4602      	mov	r2, r0
 8002d96:	693b      	ldr	r3, [r7, #16]
 8002d98:	1ad3      	subs	r3, r2, r3
 8002d9a:	2b02      	cmp	r3, #2
 8002d9c:	d901      	bls.n	8002da2 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8002d9e:	2303      	movs	r3, #3
 8002da0:	e056      	b.n	8002e50 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002da2:	4b2e      	ldr	r3, [pc, #184]	; (8002e5c <HAL_RCC_OscConfig+0x4e8>)
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d0f0      	beq.n	8002d90 <HAL_RCC_OscConfig+0x41c>
 8002dae:	e04e      	b.n	8002e4e <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002db0:	4b2b      	ldr	r3, [pc, #172]	; (8002e60 <HAL_RCC_OscConfig+0x4ec>)
 8002db2:	2200      	movs	r2, #0
 8002db4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002db6:	f7ff fb4d 	bl	8002454 <HAL_GetTick>
 8002dba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002dbc:	e008      	b.n	8002dd0 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002dbe:	f7ff fb49 	bl	8002454 <HAL_GetTick>
 8002dc2:	4602      	mov	r2, r0
 8002dc4:	693b      	ldr	r3, [r7, #16]
 8002dc6:	1ad3      	subs	r3, r2, r3
 8002dc8:	2b02      	cmp	r3, #2
 8002dca:	d901      	bls.n	8002dd0 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002dcc:	2303      	movs	r3, #3
 8002dce:	e03f      	b.n	8002e50 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002dd0:	4b22      	ldr	r3, [pc, #136]	; (8002e5c <HAL_RCC_OscConfig+0x4e8>)
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d1f0      	bne.n	8002dbe <HAL_RCC_OscConfig+0x44a>
 8002ddc:	e037      	b.n	8002e4e <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	699b      	ldr	r3, [r3, #24]
 8002de2:	2b01      	cmp	r3, #1
 8002de4:	d101      	bne.n	8002dea <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8002de6:	2301      	movs	r3, #1
 8002de8:	e032      	b.n	8002e50 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002dea:	4b1c      	ldr	r3, [pc, #112]	; (8002e5c <HAL_RCC_OscConfig+0x4e8>)
 8002dec:	685b      	ldr	r3, [r3, #4]
 8002dee:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	699b      	ldr	r3, [r3, #24]
 8002df4:	2b01      	cmp	r3, #1
 8002df6:	d028      	beq.n	8002e4a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002e02:	429a      	cmp	r2, r3
 8002e04:	d121      	bne.n	8002e4a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e10:	429a      	cmp	r2, r3
 8002e12:	d11a      	bne.n	8002e4a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002e14:	68fa      	ldr	r2, [r7, #12]
 8002e16:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002e1a:	4013      	ands	r3, r2
 8002e1c:	687a      	ldr	r2, [r7, #4]
 8002e1e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002e20:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002e22:	4293      	cmp	r3, r2
 8002e24:	d111      	bne.n	8002e4a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e30:	085b      	lsrs	r3, r3, #1
 8002e32:	3b01      	subs	r3, #1
 8002e34:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002e36:	429a      	cmp	r2, r3
 8002e38:	d107      	bne.n	8002e4a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e44:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002e46:	429a      	cmp	r2, r3
 8002e48:	d001      	beq.n	8002e4e <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8002e4a:	2301      	movs	r3, #1
 8002e4c:	e000      	b.n	8002e50 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8002e4e:	2300      	movs	r3, #0
}
 8002e50:	4618      	mov	r0, r3
 8002e52:	3718      	adds	r7, #24
 8002e54:	46bd      	mov	sp, r7
 8002e56:	bd80      	pop	{r7, pc}
 8002e58:	40007000 	.word	0x40007000
 8002e5c:	40023800 	.word	0x40023800
 8002e60:	42470060 	.word	0x42470060

08002e64 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002e64:	b580      	push	{r7, lr}
 8002e66:	b084      	sub	sp, #16
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	6078      	str	r0, [r7, #4]
 8002e6c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d101      	bne.n	8002e78 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002e74:	2301      	movs	r3, #1
 8002e76:	e0cc      	b.n	8003012 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002e78:	4b68      	ldr	r3, [pc, #416]	; (800301c <HAL_RCC_ClockConfig+0x1b8>)
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f003 0307 	and.w	r3, r3, #7
 8002e80:	683a      	ldr	r2, [r7, #0]
 8002e82:	429a      	cmp	r2, r3
 8002e84:	d90c      	bls.n	8002ea0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e86:	4b65      	ldr	r3, [pc, #404]	; (800301c <HAL_RCC_ClockConfig+0x1b8>)
 8002e88:	683a      	ldr	r2, [r7, #0]
 8002e8a:	b2d2      	uxtb	r2, r2
 8002e8c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e8e:	4b63      	ldr	r3, [pc, #396]	; (800301c <HAL_RCC_ClockConfig+0x1b8>)
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	f003 0307 	and.w	r3, r3, #7
 8002e96:	683a      	ldr	r2, [r7, #0]
 8002e98:	429a      	cmp	r2, r3
 8002e9a:	d001      	beq.n	8002ea0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002e9c:	2301      	movs	r3, #1
 8002e9e:	e0b8      	b.n	8003012 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f003 0302 	and.w	r3, r3, #2
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d020      	beq.n	8002eee <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f003 0304 	and.w	r3, r3, #4
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d005      	beq.n	8002ec4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002eb8:	4b59      	ldr	r3, [pc, #356]	; (8003020 <HAL_RCC_ClockConfig+0x1bc>)
 8002eba:	689b      	ldr	r3, [r3, #8]
 8002ebc:	4a58      	ldr	r2, [pc, #352]	; (8003020 <HAL_RCC_ClockConfig+0x1bc>)
 8002ebe:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002ec2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	f003 0308 	and.w	r3, r3, #8
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d005      	beq.n	8002edc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002ed0:	4b53      	ldr	r3, [pc, #332]	; (8003020 <HAL_RCC_ClockConfig+0x1bc>)
 8002ed2:	689b      	ldr	r3, [r3, #8]
 8002ed4:	4a52      	ldr	r2, [pc, #328]	; (8003020 <HAL_RCC_ClockConfig+0x1bc>)
 8002ed6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002eda:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002edc:	4b50      	ldr	r3, [pc, #320]	; (8003020 <HAL_RCC_ClockConfig+0x1bc>)
 8002ede:	689b      	ldr	r3, [r3, #8]
 8002ee0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	689b      	ldr	r3, [r3, #8]
 8002ee8:	494d      	ldr	r1, [pc, #308]	; (8003020 <HAL_RCC_ClockConfig+0x1bc>)
 8002eea:	4313      	orrs	r3, r2
 8002eec:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f003 0301 	and.w	r3, r3, #1
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d044      	beq.n	8002f84 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	685b      	ldr	r3, [r3, #4]
 8002efe:	2b01      	cmp	r3, #1
 8002f00:	d107      	bne.n	8002f12 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f02:	4b47      	ldr	r3, [pc, #284]	; (8003020 <HAL_RCC_ClockConfig+0x1bc>)
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d119      	bne.n	8002f42 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f0e:	2301      	movs	r3, #1
 8002f10:	e07f      	b.n	8003012 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	685b      	ldr	r3, [r3, #4]
 8002f16:	2b02      	cmp	r3, #2
 8002f18:	d003      	beq.n	8002f22 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002f1e:	2b03      	cmp	r3, #3
 8002f20:	d107      	bne.n	8002f32 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f22:	4b3f      	ldr	r3, [pc, #252]	; (8003020 <HAL_RCC_ClockConfig+0x1bc>)
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d109      	bne.n	8002f42 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f2e:	2301      	movs	r3, #1
 8002f30:	e06f      	b.n	8003012 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f32:	4b3b      	ldr	r3, [pc, #236]	; (8003020 <HAL_RCC_ClockConfig+0x1bc>)
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f003 0302 	and.w	r3, r3, #2
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d101      	bne.n	8002f42 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f3e:	2301      	movs	r3, #1
 8002f40:	e067      	b.n	8003012 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002f42:	4b37      	ldr	r3, [pc, #220]	; (8003020 <HAL_RCC_ClockConfig+0x1bc>)
 8002f44:	689b      	ldr	r3, [r3, #8]
 8002f46:	f023 0203 	bic.w	r2, r3, #3
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	685b      	ldr	r3, [r3, #4]
 8002f4e:	4934      	ldr	r1, [pc, #208]	; (8003020 <HAL_RCC_ClockConfig+0x1bc>)
 8002f50:	4313      	orrs	r3, r2
 8002f52:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002f54:	f7ff fa7e 	bl	8002454 <HAL_GetTick>
 8002f58:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f5a:	e00a      	b.n	8002f72 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f5c:	f7ff fa7a 	bl	8002454 <HAL_GetTick>
 8002f60:	4602      	mov	r2, r0
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	1ad3      	subs	r3, r2, r3
 8002f66:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f6a:	4293      	cmp	r3, r2
 8002f6c:	d901      	bls.n	8002f72 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002f6e:	2303      	movs	r3, #3
 8002f70:	e04f      	b.n	8003012 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f72:	4b2b      	ldr	r3, [pc, #172]	; (8003020 <HAL_RCC_ClockConfig+0x1bc>)
 8002f74:	689b      	ldr	r3, [r3, #8]
 8002f76:	f003 020c 	and.w	r2, r3, #12
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	685b      	ldr	r3, [r3, #4]
 8002f7e:	009b      	lsls	r3, r3, #2
 8002f80:	429a      	cmp	r2, r3
 8002f82:	d1eb      	bne.n	8002f5c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002f84:	4b25      	ldr	r3, [pc, #148]	; (800301c <HAL_RCC_ClockConfig+0x1b8>)
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f003 0307 	and.w	r3, r3, #7
 8002f8c:	683a      	ldr	r2, [r7, #0]
 8002f8e:	429a      	cmp	r2, r3
 8002f90:	d20c      	bcs.n	8002fac <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f92:	4b22      	ldr	r3, [pc, #136]	; (800301c <HAL_RCC_ClockConfig+0x1b8>)
 8002f94:	683a      	ldr	r2, [r7, #0]
 8002f96:	b2d2      	uxtb	r2, r2
 8002f98:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f9a:	4b20      	ldr	r3, [pc, #128]	; (800301c <HAL_RCC_ClockConfig+0x1b8>)
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f003 0307 	and.w	r3, r3, #7
 8002fa2:	683a      	ldr	r2, [r7, #0]
 8002fa4:	429a      	cmp	r2, r3
 8002fa6:	d001      	beq.n	8002fac <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002fa8:	2301      	movs	r3, #1
 8002faa:	e032      	b.n	8003012 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f003 0304 	and.w	r3, r3, #4
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d008      	beq.n	8002fca <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002fb8:	4b19      	ldr	r3, [pc, #100]	; (8003020 <HAL_RCC_ClockConfig+0x1bc>)
 8002fba:	689b      	ldr	r3, [r3, #8]
 8002fbc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	68db      	ldr	r3, [r3, #12]
 8002fc4:	4916      	ldr	r1, [pc, #88]	; (8003020 <HAL_RCC_ClockConfig+0x1bc>)
 8002fc6:	4313      	orrs	r3, r2
 8002fc8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	f003 0308 	and.w	r3, r3, #8
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d009      	beq.n	8002fea <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002fd6:	4b12      	ldr	r3, [pc, #72]	; (8003020 <HAL_RCC_ClockConfig+0x1bc>)
 8002fd8:	689b      	ldr	r3, [r3, #8]
 8002fda:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	691b      	ldr	r3, [r3, #16]
 8002fe2:	00db      	lsls	r3, r3, #3
 8002fe4:	490e      	ldr	r1, [pc, #56]	; (8003020 <HAL_RCC_ClockConfig+0x1bc>)
 8002fe6:	4313      	orrs	r3, r2
 8002fe8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002fea:	f000 f821 	bl	8003030 <HAL_RCC_GetSysClockFreq>
 8002fee:	4602      	mov	r2, r0
 8002ff0:	4b0b      	ldr	r3, [pc, #44]	; (8003020 <HAL_RCC_ClockConfig+0x1bc>)
 8002ff2:	689b      	ldr	r3, [r3, #8]
 8002ff4:	091b      	lsrs	r3, r3, #4
 8002ff6:	f003 030f 	and.w	r3, r3, #15
 8002ffa:	490a      	ldr	r1, [pc, #40]	; (8003024 <HAL_RCC_ClockConfig+0x1c0>)
 8002ffc:	5ccb      	ldrb	r3, [r1, r3]
 8002ffe:	fa22 f303 	lsr.w	r3, r2, r3
 8003002:	4a09      	ldr	r2, [pc, #36]	; (8003028 <HAL_RCC_ClockConfig+0x1c4>)
 8003004:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003006:	4b09      	ldr	r3, [pc, #36]	; (800302c <HAL_RCC_ClockConfig+0x1c8>)
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	4618      	mov	r0, r3
 800300c:	f7ff f9de 	bl	80023cc <HAL_InitTick>

  return HAL_OK;
 8003010:	2300      	movs	r3, #0
}
 8003012:	4618      	mov	r0, r3
 8003014:	3710      	adds	r7, #16
 8003016:	46bd      	mov	sp, r7
 8003018:	bd80      	pop	{r7, pc}
 800301a:	bf00      	nop
 800301c:	40023c00 	.word	0x40023c00
 8003020:	40023800 	.word	0x40023800
 8003024:	08017318 	.word	0x08017318
 8003028:	20000030 	.word	0x20000030
 800302c:	20000034 	.word	0x20000034

08003030 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003030:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003034:	b084      	sub	sp, #16
 8003036:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003038:	2300      	movs	r3, #0
 800303a:	607b      	str	r3, [r7, #4]
 800303c:	2300      	movs	r3, #0
 800303e:	60fb      	str	r3, [r7, #12]
 8003040:	2300      	movs	r3, #0
 8003042:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8003044:	2300      	movs	r3, #0
 8003046:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003048:	4b67      	ldr	r3, [pc, #412]	; (80031e8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800304a:	689b      	ldr	r3, [r3, #8]
 800304c:	f003 030c 	and.w	r3, r3, #12
 8003050:	2b08      	cmp	r3, #8
 8003052:	d00d      	beq.n	8003070 <HAL_RCC_GetSysClockFreq+0x40>
 8003054:	2b08      	cmp	r3, #8
 8003056:	f200 80bd 	bhi.w	80031d4 <HAL_RCC_GetSysClockFreq+0x1a4>
 800305a:	2b00      	cmp	r3, #0
 800305c:	d002      	beq.n	8003064 <HAL_RCC_GetSysClockFreq+0x34>
 800305e:	2b04      	cmp	r3, #4
 8003060:	d003      	beq.n	800306a <HAL_RCC_GetSysClockFreq+0x3a>
 8003062:	e0b7      	b.n	80031d4 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003064:	4b61      	ldr	r3, [pc, #388]	; (80031ec <HAL_RCC_GetSysClockFreq+0x1bc>)
 8003066:	60bb      	str	r3, [r7, #8]
       break;
 8003068:	e0b7      	b.n	80031da <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800306a:	4b61      	ldr	r3, [pc, #388]	; (80031f0 <HAL_RCC_GetSysClockFreq+0x1c0>)
 800306c:	60bb      	str	r3, [r7, #8]
      break;
 800306e:	e0b4      	b.n	80031da <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003070:	4b5d      	ldr	r3, [pc, #372]	; (80031e8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003072:	685b      	ldr	r3, [r3, #4]
 8003074:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003078:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800307a:	4b5b      	ldr	r3, [pc, #364]	; (80031e8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800307c:	685b      	ldr	r3, [r3, #4]
 800307e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003082:	2b00      	cmp	r3, #0
 8003084:	d04d      	beq.n	8003122 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003086:	4b58      	ldr	r3, [pc, #352]	; (80031e8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003088:	685b      	ldr	r3, [r3, #4]
 800308a:	099b      	lsrs	r3, r3, #6
 800308c:	461a      	mov	r2, r3
 800308e:	f04f 0300 	mov.w	r3, #0
 8003092:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003096:	f04f 0100 	mov.w	r1, #0
 800309a:	ea02 0800 	and.w	r8, r2, r0
 800309e:	ea03 0901 	and.w	r9, r3, r1
 80030a2:	4640      	mov	r0, r8
 80030a4:	4649      	mov	r1, r9
 80030a6:	f04f 0200 	mov.w	r2, #0
 80030aa:	f04f 0300 	mov.w	r3, #0
 80030ae:	014b      	lsls	r3, r1, #5
 80030b0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80030b4:	0142      	lsls	r2, r0, #5
 80030b6:	4610      	mov	r0, r2
 80030b8:	4619      	mov	r1, r3
 80030ba:	ebb0 0008 	subs.w	r0, r0, r8
 80030be:	eb61 0109 	sbc.w	r1, r1, r9
 80030c2:	f04f 0200 	mov.w	r2, #0
 80030c6:	f04f 0300 	mov.w	r3, #0
 80030ca:	018b      	lsls	r3, r1, #6
 80030cc:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80030d0:	0182      	lsls	r2, r0, #6
 80030d2:	1a12      	subs	r2, r2, r0
 80030d4:	eb63 0301 	sbc.w	r3, r3, r1
 80030d8:	f04f 0000 	mov.w	r0, #0
 80030dc:	f04f 0100 	mov.w	r1, #0
 80030e0:	00d9      	lsls	r1, r3, #3
 80030e2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80030e6:	00d0      	lsls	r0, r2, #3
 80030e8:	4602      	mov	r2, r0
 80030ea:	460b      	mov	r3, r1
 80030ec:	eb12 0208 	adds.w	r2, r2, r8
 80030f0:	eb43 0309 	adc.w	r3, r3, r9
 80030f4:	f04f 0000 	mov.w	r0, #0
 80030f8:	f04f 0100 	mov.w	r1, #0
 80030fc:	0259      	lsls	r1, r3, #9
 80030fe:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8003102:	0250      	lsls	r0, r2, #9
 8003104:	4602      	mov	r2, r0
 8003106:	460b      	mov	r3, r1
 8003108:	4610      	mov	r0, r2
 800310a:	4619      	mov	r1, r3
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	461a      	mov	r2, r3
 8003110:	f04f 0300 	mov.w	r3, #0
 8003114:	f7fd fdaa 	bl	8000c6c <__aeabi_uldivmod>
 8003118:	4602      	mov	r2, r0
 800311a:	460b      	mov	r3, r1
 800311c:	4613      	mov	r3, r2
 800311e:	60fb      	str	r3, [r7, #12]
 8003120:	e04a      	b.n	80031b8 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003122:	4b31      	ldr	r3, [pc, #196]	; (80031e8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003124:	685b      	ldr	r3, [r3, #4]
 8003126:	099b      	lsrs	r3, r3, #6
 8003128:	461a      	mov	r2, r3
 800312a:	f04f 0300 	mov.w	r3, #0
 800312e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003132:	f04f 0100 	mov.w	r1, #0
 8003136:	ea02 0400 	and.w	r4, r2, r0
 800313a:	ea03 0501 	and.w	r5, r3, r1
 800313e:	4620      	mov	r0, r4
 8003140:	4629      	mov	r1, r5
 8003142:	f04f 0200 	mov.w	r2, #0
 8003146:	f04f 0300 	mov.w	r3, #0
 800314a:	014b      	lsls	r3, r1, #5
 800314c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003150:	0142      	lsls	r2, r0, #5
 8003152:	4610      	mov	r0, r2
 8003154:	4619      	mov	r1, r3
 8003156:	1b00      	subs	r0, r0, r4
 8003158:	eb61 0105 	sbc.w	r1, r1, r5
 800315c:	f04f 0200 	mov.w	r2, #0
 8003160:	f04f 0300 	mov.w	r3, #0
 8003164:	018b      	lsls	r3, r1, #6
 8003166:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800316a:	0182      	lsls	r2, r0, #6
 800316c:	1a12      	subs	r2, r2, r0
 800316e:	eb63 0301 	sbc.w	r3, r3, r1
 8003172:	f04f 0000 	mov.w	r0, #0
 8003176:	f04f 0100 	mov.w	r1, #0
 800317a:	00d9      	lsls	r1, r3, #3
 800317c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003180:	00d0      	lsls	r0, r2, #3
 8003182:	4602      	mov	r2, r0
 8003184:	460b      	mov	r3, r1
 8003186:	1912      	adds	r2, r2, r4
 8003188:	eb45 0303 	adc.w	r3, r5, r3
 800318c:	f04f 0000 	mov.w	r0, #0
 8003190:	f04f 0100 	mov.w	r1, #0
 8003194:	0299      	lsls	r1, r3, #10
 8003196:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800319a:	0290      	lsls	r0, r2, #10
 800319c:	4602      	mov	r2, r0
 800319e:	460b      	mov	r3, r1
 80031a0:	4610      	mov	r0, r2
 80031a2:	4619      	mov	r1, r3
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	461a      	mov	r2, r3
 80031a8:	f04f 0300 	mov.w	r3, #0
 80031ac:	f7fd fd5e 	bl	8000c6c <__aeabi_uldivmod>
 80031b0:	4602      	mov	r2, r0
 80031b2:	460b      	mov	r3, r1
 80031b4:	4613      	mov	r3, r2
 80031b6:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80031b8:	4b0b      	ldr	r3, [pc, #44]	; (80031e8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80031ba:	685b      	ldr	r3, [r3, #4]
 80031bc:	0c1b      	lsrs	r3, r3, #16
 80031be:	f003 0303 	and.w	r3, r3, #3
 80031c2:	3301      	adds	r3, #1
 80031c4:	005b      	lsls	r3, r3, #1
 80031c6:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80031c8:	68fa      	ldr	r2, [r7, #12]
 80031ca:	683b      	ldr	r3, [r7, #0]
 80031cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80031d0:	60bb      	str	r3, [r7, #8]
      break;
 80031d2:	e002      	b.n	80031da <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80031d4:	4b05      	ldr	r3, [pc, #20]	; (80031ec <HAL_RCC_GetSysClockFreq+0x1bc>)
 80031d6:	60bb      	str	r3, [r7, #8]
      break;
 80031d8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80031da:	68bb      	ldr	r3, [r7, #8]
}
 80031dc:	4618      	mov	r0, r3
 80031de:	3710      	adds	r7, #16
 80031e0:	46bd      	mov	sp, r7
 80031e2:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80031e6:	bf00      	nop
 80031e8:	40023800 	.word	0x40023800
 80031ec:	00f42400 	.word	0x00f42400
 80031f0:	007a1200 	.word	0x007a1200

080031f4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80031f4:	b480      	push	{r7}
 80031f6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80031f8:	4b03      	ldr	r3, [pc, #12]	; (8003208 <HAL_RCC_GetHCLKFreq+0x14>)
 80031fa:	681b      	ldr	r3, [r3, #0]
}
 80031fc:	4618      	mov	r0, r3
 80031fe:	46bd      	mov	sp, r7
 8003200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003204:	4770      	bx	lr
 8003206:	bf00      	nop
 8003208:	20000030 	.word	0x20000030

0800320c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800320c:	b580      	push	{r7, lr}
 800320e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003210:	f7ff fff0 	bl	80031f4 <HAL_RCC_GetHCLKFreq>
 8003214:	4602      	mov	r2, r0
 8003216:	4b05      	ldr	r3, [pc, #20]	; (800322c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003218:	689b      	ldr	r3, [r3, #8]
 800321a:	0a9b      	lsrs	r3, r3, #10
 800321c:	f003 0307 	and.w	r3, r3, #7
 8003220:	4903      	ldr	r1, [pc, #12]	; (8003230 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003222:	5ccb      	ldrb	r3, [r1, r3]
 8003224:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003228:	4618      	mov	r0, r3
 800322a:	bd80      	pop	{r7, pc}
 800322c:	40023800 	.word	0x40023800
 8003230:	08017328 	.word	0x08017328

08003234 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003234:	b580      	push	{r7, lr}
 8003236:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003238:	f7ff ffdc 	bl	80031f4 <HAL_RCC_GetHCLKFreq>
 800323c:	4602      	mov	r2, r0
 800323e:	4b05      	ldr	r3, [pc, #20]	; (8003254 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003240:	689b      	ldr	r3, [r3, #8]
 8003242:	0b5b      	lsrs	r3, r3, #13
 8003244:	f003 0307 	and.w	r3, r3, #7
 8003248:	4903      	ldr	r1, [pc, #12]	; (8003258 <HAL_RCC_GetPCLK2Freq+0x24>)
 800324a:	5ccb      	ldrb	r3, [r1, r3]
 800324c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003250:	4618      	mov	r0, r3
 8003252:	bd80      	pop	{r7, pc}
 8003254:	40023800 	.word	0x40023800
 8003258:	08017328 	.word	0x08017328

0800325c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800325c:	b580      	push	{r7, lr}
 800325e:	b082      	sub	sp, #8
 8003260:	af00      	add	r7, sp, #0
 8003262:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	2b00      	cmp	r3, #0
 8003268:	d101      	bne.n	800326e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800326a:	2301      	movs	r3, #1
 800326c:	e041      	b.n	80032f2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003274:	b2db      	uxtb	r3, r3
 8003276:	2b00      	cmp	r3, #0
 8003278:	d106      	bne.n	8003288 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	2200      	movs	r2, #0
 800327e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003282:	6878      	ldr	r0, [r7, #4]
 8003284:	f7fe fe80 	bl	8001f88 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	2202      	movs	r2, #2
 800328c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681a      	ldr	r2, [r3, #0]
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	3304      	adds	r3, #4
 8003298:	4619      	mov	r1, r3
 800329a:	4610      	mov	r0, r2
 800329c:	f000 f82e 	bl	80032fc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	2201      	movs	r2, #1
 80032a4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	2201      	movs	r2, #1
 80032ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	2201      	movs	r2, #1
 80032b4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	2201      	movs	r2, #1
 80032bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	2201      	movs	r2, #1
 80032c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	2201      	movs	r2, #1
 80032cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	2201      	movs	r2, #1
 80032d4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	2201      	movs	r2, #1
 80032dc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	2201      	movs	r2, #1
 80032e4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	2201      	movs	r2, #1
 80032ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80032f0:	2300      	movs	r3, #0
}
 80032f2:	4618      	mov	r0, r3
 80032f4:	3708      	adds	r7, #8
 80032f6:	46bd      	mov	sp, r7
 80032f8:	bd80      	pop	{r7, pc}
	...

080032fc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80032fc:	b480      	push	{r7}
 80032fe:	b085      	sub	sp, #20
 8003300:	af00      	add	r7, sp, #0
 8003302:	6078      	str	r0, [r7, #4]
 8003304:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	4a34      	ldr	r2, [pc, #208]	; (80033e0 <TIM_Base_SetConfig+0xe4>)
 8003310:	4293      	cmp	r3, r2
 8003312:	d00f      	beq.n	8003334 <TIM_Base_SetConfig+0x38>
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800331a:	d00b      	beq.n	8003334 <TIM_Base_SetConfig+0x38>
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	4a31      	ldr	r2, [pc, #196]	; (80033e4 <TIM_Base_SetConfig+0xe8>)
 8003320:	4293      	cmp	r3, r2
 8003322:	d007      	beq.n	8003334 <TIM_Base_SetConfig+0x38>
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	4a30      	ldr	r2, [pc, #192]	; (80033e8 <TIM_Base_SetConfig+0xec>)
 8003328:	4293      	cmp	r3, r2
 800332a:	d003      	beq.n	8003334 <TIM_Base_SetConfig+0x38>
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	4a2f      	ldr	r2, [pc, #188]	; (80033ec <TIM_Base_SetConfig+0xf0>)
 8003330:	4293      	cmp	r3, r2
 8003332:	d108      	bne.n	8003346 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800333a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800333c:	683b      	ldr	r3, [r7, #0]
 800333e:	685b      	ldr	r3, [r3, #4]
 8003340:	68fa      	ldr	r2, [r7, #12]
 8003342:	4313      	orrs	r3, r2
 8003344:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	4a25      	ldr	r2, [pc, #148]	; (80033e0 <TIM_Base_SetConfig+0xe4>)
 800334a:	4293      	cmp	r3, r2
 800334c:	d01b      	beq.n	8003386 <TIM_Base_SetConfig+0x8a>
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003354:	d017      	beq.n	8003386 <TIM_Base_SetConfig+0x8a>
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	4a22      	ldr	r2, [pc, #136]	; (80033e4 <TIM_Base_SetConfig+0xe8>)
 800335a:	4293      	cmp	r3, r2
 800335c:	d013      	beq.n	8003386 <TIM_Base_SetConfig+0x8a>
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	4a21      	ldr	r2, [pc, #132]	; (80033e8 <TIM_Base_SetConfig+0xec>)
 8003362:	4293      	cmp	r3, r2
 8003364:	d00f      	beq.n	8003386 <TIM_Base_SetConfig+0x8a>
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	4a20      	ldr	r2, [pc, #128]	; (80033ec <TIM_Base_SetConfig+0xf0>)
 800336a:	4293      	cmp	r3, r2
 800336c:	d00b      	beq.n	8003386 <TIM_Base_SetConfig+0x8a>
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	4a1f      	ldr	r2, [pc, #124]	; (80033f0 <TIM_Base_SetConfig+0xf4>)
 8003372:	4293      	cmp	r3, r2
 8003374:	d007      	beq.n	8003386 <TIM_Base_SetConfig+0x8a>
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	4a1e      	ldr	r2, [pc, #120]	; (80033f4 <TIM_Base_SetConfig+0xf8>)
 800337a:	4293      	cmp	r3, r2
 800337c:	d003      	beq.n	8003386 <TIM_Base_SetConfig+0x8a>
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	4a1d      	ldr	r2, [pc, #116]	; (80033f8 <TIM_Base_SetConfig+0xfc>)
 8003382:	4293      	cmp	r3, r2
 8003384:	d108      	bne.n	8003398 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800338c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800338e:	683b      	ldr	r3, [r7, #0]
 8003390:	68db      	ldr	r3, [r3, #12]
 8003392:	68fa      	ldr	r2, [r7, #12]
 8003394:	4313      	orrs	r3, r2
 8003396:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800339e:	683b      	ldr	r3, [r7, #0]
 80033a0:	695b      	ldr	r3, [r3, #20]
 80033a2:	4313      	orrs	r3, r2
 80033a4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	68fa      	ldr	r2, [r7, #12]
 80033aa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80033ac:	683b      	ldr	r3, [r7, #0]
 80033ae:	689a      	ldr	r2, [r3, #8]
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80033b4:	683b      	ldr	r3, [r7, #0]
 80033b6:	681a      	ldr	r2, [r3, #0]
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	4a08      	ldr	r2, [pc, #32]	; (80033e0 <TIM_Base_SetConfig+0xe4>)
 80033c0:	4293      	cmp	r3, r2
 80033c2:	d103      	bne.n	80033cc <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80033c4:	683b      	ldr	r3, [r7, #0]
 80033c6:	691a      	ldr	r2, [r3, #16]
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	2201      	movs	r2, #1
 80033d0:	615a      	str	r2, [r3, #20]
}
 80033d2:	bf00      	nop
 80033d4:	3714      	adds	r7, #20
 80033d6:	46bd      	mov	sp, r7
 80033d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033dc:	4770      	bx	lr
 80033de:	bf00      	nop
 80033e0:	40010000 	.word	0x40010000
 80033e4:	40000400 	.word	0x40000400
 80033e8:	40000800 	.word	0x40000800
 80033ec:	40000c00 	.word	0x40000c00
 80033f0:	40014000 	.word	0x40014000
 80033f4:	40014400 	.word	0x40014400
 80033f8:	40014800 	.word	0x40014800

080033fc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80033fc:	b580      	push	{r7, lr}
 80033fe:	b082      	sub	sp, #8
 8003400:	af00      	add	r7, sp, #0
 8003402:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	2b00      	cmp	r3, #0
 8003408:	d101      	bne.n	800340e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800340a:	2301      	movs	r3, #1
 800340c:	e03f      	b.n	800348e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003414:	b2db      	uxtb	r3, r3
 8003416:	2b00      	cmp	r3, #0
 8003418:	d106      	bne.n	8003428 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	2200      	movs	r2, #0
 800341e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003422:	6878      	ldr	r0, [r7, #4]
 8003424:	f7fe fdd2 	bl	8001fcc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	2224      	movs	r2, #36	; 0x24
 800342c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	68da      	ldr	r2, [r3, #12]
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800343e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003440:	6878      	ldr	r0, [r7, #4]
 8003442:	f000 f959 	bl	80036f8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	691a      	ldr	r2, [r3, #16]
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003454:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	695a      	ldr	r2, [r3, #20]
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003464:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	68da      	ldr	r2, [r3, #12]
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003474:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	2200      	movs	r2, #0
 800347a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	2220      	movs	r2, #32
 8003480:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	2220      	movs	r2, #32
 8003488:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800348c:	2300      	movs	r3, #0
}
 800348e:	4618      	mov	r0, r3
 8003490:	3708      	adds	r7, #8
 8003492:	46bd      	mov	sp, r7
 8003494:	bd80      	pop	{r7, pc}

08003496 <HAL_HalfDuplex_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
{
 8003496:	b580      	push	{r7, lr}
 8003498:	b082      	sub	sp, #8
 800349a:	af00      	add	r7, sp, #0
 800349c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d101      	bne.n	80034a8 <HAL_HalfDuplex_Init+0x12>
  {
    return HAL_ERROR;
 80034a4:	2301      	movs	r3, #1
 80034a6:	e047      	b.n	8003538 <HAL_HalfDuplex_Init+0xa2>
  /* Check the parameters */
  assert_param(IS_UART_HALFDUPLEX_INSTANCE(huart->Instance));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80034ae:	b2db      	uxtb	r3, r3
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d106      	bne.n	80034c2 <HAL_HalfDuplex_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	2200      	movs	r2, #0
 80034b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80034bc:	6878      	ldr	r0, [r7, #4]
 80034be:	f7fe fd85 	bl	8001fcc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	2224      	movs	r2, #36	; 0x24
 80034c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	68da      	ldr	r2, [r3, #12]
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80034d8:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80034da:	6878      	ldr	r0, [r7, #4]
 80034dc:	f000 f90c 	bl	80036f8 <UART_SetConfig>

  /* In half-duplex mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	691a      	ldr	r2, [r3, #16]
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80034ee:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	695a      	ldr	r2, [r3, #20]
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f022 0222 	bic.w	r2, r2, #34	; 0x22
 80034fe:	615a      	str	r2, [r3, #20]

  /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	695a      	ldr	r2, [r3, #20]
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	f042 0208 	orr.w	r2, r2, #8
 800350e:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	68da      	ldr	r2, [r3, #12]
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800351e:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state*/
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	2200      	movs	r2, #0
 8003524:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	2220      	movs	r2, #32
 800352a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	2220      	movs	r2, #32
 8003532:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003536:	2300      	movs	r3, #0
}
 8003538:	4618      	mov	r0, r3
 800353a:	3708      	adds	r7, #8
 800353c:	46bd      	mov	sp, r7
 800353e:	bd80      	pop	{r7, pc}

08003540 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003540:	b580      	push	{r7, lr}
 8003542:	b08a      	sub	sp, #40	; 0x28
 8003544:	af02      	add	r7, sp, #8
 8003546:	60f8      	str	r0, [r7, #12]
 8003548:	60b9      	str	r1, [r7, #8]
 800354a:	603b      	str	r3, [r7, #0]
 800354c:	4613      	mov	r3, r2
 800354e:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003550:	2300      	movs	r3, #0
 8003552:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800355a:	b2db      	uxtb	r3, r3
 800355c:	2b20      	cmp	r3, #32
 800355e:	d17c      	bne.n	800365a <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003560:	68bb      	ldr	r3, [r7, #8]
 8003562:	2b00      	cmp	r3, #0
 8003564:	d002      	beq.n	800356c <HAL_UART_Transmit+0x2c>
 8003566:	88fb      	ldrh	r3, [r7, #6]
 8003568:	2b00      	cmp	r3, #0
 800356a:	d101      	bne.n	8003570 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800356c:	2301      	movs	r3, #1
 800356e:	e075      	b.n	800365c <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003576:	2b01      	cmp	r3, #1
 8003578:	d101      	bne.n	800357e <HAL_UART_Transmit+0x3e>
 800357a:	2302      	movs	r3, #2
 800357c:	e06e      	b.n	800365c <HAL_UART_Transmit+0x11c>
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	2201      	movs	r2, #1
 8003582:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	2200      	movs	r2, #0
 800358a:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	2221      	movs	r2, #33	; 0x21
 8003590:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003594:	f7fe ff5e 	bl	8002454 <HAL_GetTick>
 8003598:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	88fa      	ldrh	r2, [r7, #6]
 800359e:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	88fa      	ldrh	r2, [r7, #6]
 80035a4:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	689b      	ldr	r3, [r3, #8]
 80035aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80035ae:	d108      	bne.n	80035c2 <HAL_UART_Transmit+0x82>
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	691b      	ldr	r3, [r3, #16]
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d104      	bne.n	80035c2 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80035b8:	2300      	movs	r3, #0
 80035ba:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80035bc:	68bb      	ldr	r3, [r7, #8]
 80035be:	61bb      	str	r3, [r7, #24]
 80035c0:	e003      	b.n	80035ca <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80035c2:	68bb      	ldr	r3, [r7, #8]
 80035c4:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80035c6:	2300      	movs	r3, #0
 80035c8:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	2200      	movs	r2, #0
 80035ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80035d2:	e02a      	b.n	800362a <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80035d4:	683b      	ldr	r3, [r7, #0]
 80035d6:	9300      	str	r3, [sp, #0]
 80035d8:	697b      	ldr	r3, [r7, #20]
 80035da:	2200      	movs	r2, #0
 80035dc:	2180      	movs	r1, #128	; 0x80
 80035de:	68f8      	ldr	r0, [r7, #12]
 80035e0:	f000 f840 	bl	8003664 <UART_WaitOnFlagUntilTimeout>
 80035e4:	4603      	mov	r3, r0
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d001      	beq.n	80035ee <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80035ea:	2303      	movs	r3, #3
 80035ec:	e036      	b.n	800365c <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80035ee:	69fb      	ldr	r3, [r7, #28]
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d10b      	bne.n	800360c <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80035f4:	69bb      	ldr	r3, [r7, #24]
 80035f6:	881b      	ldrh	r3, [r3, #0]
 80035f8:	461a      	mov	r2, r3
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003602:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003604:	69bb      	ldr	r3, [r7, #24]
 8003606:	3302      	adds	r3, #2
 8003608:	61bb      	str	r3, [r7, #24]
 800360a:	e007      	b.n	800361c <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800360c:	69fb      	ldr	r3, [r7, #28]
 800360e:	781a      	ldrb	r2, [r3, #0]
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003616:	69fb      	ldr	r3, [r7, #28]
 8003618:	3301      	adds	r3, #1
 800361a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003620:	b29b      	uxth	r3, r3
 8003622:	3b01      	subs	r3, #1
 8003624:	b29a      	uxth	r2, r3
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800362e:	b29b      	uxth	r3, r3
 8003630:	2b00      	cmp	r3, #0
 8003632:	d1cf      	bne.n	80035d4 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003634:	683b      	ldr	r3, [r7, #0]
 8003636:	9300      	str	r3, [sp, #0]
 8003638:	697b      	ldr	r3, [r7, #20]
 800363a:	2200      	movs	r2, #0
 800363c:	2140      	movs	r1, #64	; 0x40
 800363e:	68f8      	ldr	r0, [r7, #12]
 8003640:	f000 f810 	bl	8003664 <UART_WaitOnFlagUntilTimeout>
 8003644:	4603      	mov	r3, r0
 8003646:	2b00      	cmp	r3, #0
 8003648:	d001      	beq.n	800364e <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800364a:	2303      	movs	r3, #3
 800364c:	e006      	b.n	800365c <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	2220      	movs	r2, #32
 8003652:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003656:	2300      	movs	r3, #0
 8003658:	e000      	b.n	800365c <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800365a:	2302      	movs	r3, #2
  }
}
 800365c:	4618      	mov	r0, r3
 800365e:	3720      	adds	r7, #32
 8003660:	46bd      	mov	sp, r7
 8003662:	bd80      	pop	{r7, pc}

08003664 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8003664:	b580      	push	{r7, lr}
 8003666:	b084      	sub	sp, #16
 8003668:	af00      	add	r7, sp, #0
 800366a:	60f8      	str	r0, [r7, #12]
 800366c:	60b9      	str	r1, [r7, #8]
 800366e:	603b      	str	r3, [r7, #0]
 8003670:	4613      	mov	r3, r2
 8003672:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003674:	e02c      	b.n	80036d0 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003676:	69bb      	ldr	r3, [r7, #24]
 8003678:	f1b3 3fff 	cmp.w	r3, #4294967295
 800367c:	d028      	beq.n	80036d0 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800367e:	69bb      	ldr	r3, [r7, #24]
 8003680:	2b00      	cmp	r3, #0
 8003682:	d007      	beq.n	8003694 <UART_WaitOnFlagUntilTimeout+0x30>
 8003684:	f7fe fee6 	bl	8002454 <HAL_GetTick>
 8003688:	4602      	mov	r2, r0
 800368a:	683b      	ldr	r3, [r7, #0]
 800368c:	1ad3      	subs	r3, r2, r3
 800368e:	69ba      	ldr	r2, [r7, #24]
 8003690:	429a      	cmp	r2, r3
 8003692:	d21d      	bcs.n	80036d0 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	68da      	ldr	r2, [r3, #12]
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80036a2:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	695a      	ldr	r2, [r3, #20]
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	f022 0201 	bic.w	r2, r2, #1
 80036b2:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	2220      	movs	r2, #32
 80036b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	2220      	movs	r2, #32
 80036c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	2200      	movs	r2, #0
 80036c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80036cc:	2303      	movs	r3, #3
 80036ce:	e00f      	b.n	80036f0 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	681a      	ldr	r2, [r3, #0]
 80036d6:	68bb      	ldr	r3, [r7, #8]
 80036d8:	4013      	ands	r3, r2
 80036da:	68ba      	ldr	r2, [r7, #8]
 80036dc:	429a      	cmp	r2, r3
 80036de:	bf0c      	ite	eq
 80036e0:	2301      	moveq	r3, #1
 80036e2:	2300      	movne	r3, #0
 80036e4:	b2db      	uxtb	r3, r3
 80036e6:	461a      	mov	r2, r3
 80036e8:	79fb      	ldrb	r3, [r7, #7]
 80036ea:	429a      	cmp	r2, r3
 80036ec:	d0c3      	beq.n	8003676 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80036ee:	2300      	movs	r3, #0
}
 80036f0:	4618      	mov	r0, r3
 80036f2:	3710      	adds	r7, #16
 80036f4:	46bd      	mov	sp, r7
 80036f6:	bd80      	pop	{r7, pc}

080036f8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80036f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80036fc:	b09f      	sub	sp, #124	; 0x7c
 80036fe:	af00      	add	r7, sp, #0
 8003700:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003702:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	691b      	ldr	r3, [r3, #16]
 8003708:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800370c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800370e:	68d9      	ldr	r1, [r3, #12]
 8003710:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003712:	681a      	ldr	r2, [r3, #0]
 8003714:	ea40 0301 	orr.w	r3, r0, r1
 8003718:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800371a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800371c:	689a      	ldr	r2, [r3, #8]
 800371e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003720:	691b      	ldr	r3, [r3, #16]
 8003722:	431a      	orrs	r2, r3
 8003724:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003726:	695b      	ldr	r3, [r3, #20]
 8003728:	431a      	orrs	r2, r3
 800372a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800372c:	69db      	ldr	r3, [r3, #28]
 800372e:	4313      	orrs	r3, r2
 8003730:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8003732:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	68db      	ldr	r3, [r3, #12]
 8003738:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800373c:	f021 010c 	bic.w	r1, r1, #12
 8003740:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003742:	681a      	ldr	r2, [r3, #0]
 8003744:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003746:	430b      	orrs	r3, r1
 8003748:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800374a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	695b      	ldr	r3, [r3, #20]
 8003750:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003754:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003756:	6999      	ldr	r1, [r3, #24]
 8003758:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800375a:	681a      	ldr	r2, [r3, #0]
 800375c:	ea40 0301 	orr.w	r3, r0, r1
 8003760:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003762:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003764:	681a      	ldr	r2, [r3, #0]
 8003766:	4bc5      	ldr	r3, [pc, #788]	; (8003a7c <UART_SetConfig+0x384>)
 8003768:	429a      	cmp	r2, r3
 800376a:	d004      	beq.n	8003776 <UART_SetConfig+0x7e>
 800376c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800376e:	681a      	ldr	r2, [r3, #0]
 8003770:	4bc3      	ldr	r3, [pc, #780]	; (8003a80 <UART_SetConfig+0x388>)
 8003772:	429a      	cmp	r2, r3
 8003774:	d103      	bne.n	800377e <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003776:	f7ff fd5d 	bl	8003234 <HAL_RCC_GetPCLK2Freq>
 800377a:	6778      	str	r0, [r7, #116]	; 0x74
 800377c:	e002      	b.n	8003784 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800377e:	f7ff fd45 	bl	800320c <HAL_RCC_GetPCLK1Freq>
 8003782:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003784:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003786:	69db      	ldr	r3, [r3, #28]
 8003788:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800378c:	f040 80b6 	bne.w	80038fc <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003790:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003792:	461c      	mov	r4, r3
 8003794:	f04f 0500 	mov.w	r5, #0
 8003798:	4622      	mov	r2, r4
 800379a:	462b      	mov	r3, r5
 800379c:	1891      	adds	r1, r2, r2
 800379e:	6439      	str	r1, [r7, #64]	; 0x40
 80037a0:	415b      	adcs	r3, r3
 80037a2:	647b      	str	r3, [r7, #68]	; 0x44
 80037a4:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80037a8:	1912      	adds	r2, r2, r4
 80037aa:	eb45 0303 	adc.w	r3, r5, r3
 80037ae:	f04f 0000 	mov.w	r0, #0
 80037b2:	f04f 0100 	mov.w	r1, #0
 80037b6:	00d9      	lsls	r1, r3, #3
 80037b8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80037bc:	00d0      	lsls	r0, r2, #3
 80037be:	4602      	mov	r2, r0
 80037c0:	460b      	mov	r3, r1
 80037c2:	1911      	adds	r1, r2, r4
 80037c4:	6639      	str	r1, [r7, #96]	; 0x60
 80037c6:	416b      	adcs	r3, r5
 80037c8:	667b      	str	r3, [r7, #100]	; 0x64
 80037ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80037cc:	685b      	ldr	r3, [r3, #4]
 80037ce:	461a      	mov	r2, r3
 80037d0:	f04f 0300 	mov.w	r3, #0
 80037d4:	1891      	adds	r1, r2, r2
 80037d6:	63b9      	str	r1, [r7, #56]	; 0x38
 80037d8:	415b      	adcs	r3, r3
 80037da:	63fb      	str	r3, [r7, #60]	; 0x3c
 80037dc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80037e0:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80037e4:	f7fd fa42 	bl	8000c6c <__aeabi_uldivmod>
 80037e8:	4602      	mov	r2, r0
 80037ea:	460b      	mov	r3, r1
 80037ec:	4ba5      	ldr	r3, [pc, #660]	; (8003a84 <UART_SetConfig+0x38c>)
 80037ee:	fba3 2302 	umull	r2, r3, r3, r2
 80037f2:	095b      	lsrs	r3, r3, #5
 80037f4:	011e      	lsls	r6, r3, #4
 80037f6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80037f8:	461c      	mov	r4, r3
 80037fa:	f04f 0500 	mov.w	r5, #0
 80037fe:	4622      	mov	r2, r4
 8003800:	462b      	mov	r3, r5
 8003802:	1891      	adds	r1, r2, r2
 8003804:	6339      	str	r1, [r7, #48]	; 0x30
 8003806:	415b      	adcs	r3, r3
 8003808:	637b      	str	r3, [r7, #52]	; 0x34
 800380a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800380e:	1912      	adds	r2, r2, r4
 8003810:	eb45 0303 	adc.w	r3, r5, r3
 8003814:	f04f 0000 	mov.w	r0, #0
 8003818:	f04f 0100 	mov.w	r1, #0
 800381c:	00d9      	lsls	r1, r3, #3
 800381e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003822:	00d0      	lsls	r0, r2, #3
 8003824:	4602      	mov	r2, r0
 8003826:	460b      	mov	r3, r1
 8003828:	1911      	adds	r1, r2, r4
 800382a:	65b9      	str	r1, [r7, #88]	; 0x58
 800382c:	416b      	adcs	r3, r5
 800382e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003830:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003832:	685b      	ldr	r3, [r3, #4]
 8003834:	461a      	mov	r2, r3
 8003836:	f04f 0300 	mov.w	r3, #0
 800383a:	1891      	adds	r1, r2, r2
 800383c:	62b9      	str	r1, [r7, #40]	; 0x28
 800383e:	415b      	adcs	r3, r3
 8003840:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003842:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003846:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800384a:	f7fd fa0f 	bl	8000c6c <__aeabi_uldivmod>
 800384e:	4602      	mov	r2, r0
 8003850:	460b      	mov	r3, r1
 8003852:	4b8c      	ldr	r3, [pc, #560]	; (8003a84 <UART_SetConfig+0x38c>)
 8003854:	fba3 1302 	umull	r1, r3, r3, r2
 8003858:	095b      	lsrs	r3, r3, #5
 800385a:	2164      	movs	r1, #100	; 0x64
 800385c:	fb01 f303 	mul.w	r3, r1, r3
 8003860:	1ad3      	subs	r3, r2, r3
 8003862:	00db      	lsls	r3, r3, #3
 8003864:	3332      	adds	r3, #50	; 0x32
 8003866:	4a87      	ldr	r2, [pc, #540]	; (8003a84 <UART_SetConfig+0x38c>)
 8003868:	fba2 2303 	umull	r2, r3, r2, r3
 800386c:	095b      	lsrs	r3, r3, #5
 800386e:	005b      	lsls	r3, r3, #1
 8003870:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003874:	441e      	add	r6, r3
 8003876:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003878:	4618      	mov	r0, r3
 800387a:	f04f 0100 	mov.w	r1, #0
 800387e:	4602      	mov	r2, r0
 8003880:	460b      	mov	r3, r1
 8003882:	1894      	adds	r4, r2, r2
 8003884:	623c      	str	r4, [r7, #32]
 8003886:	415b      	adcs	r3, r3
 8003888:	627b      	str	r3, [r7, #36]	; 0x24
 800388a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800388e:	1812      	adds	r2, r2, r0
 8003890:	eb41 0303 	adc.w	r3, r1, r3
 8003894:	f04f 0400 	mov.w	r4, #0
 8003898:	f04f 0500 	mov.w	r5, #0
 800389c:	00dd      	lsls	r5, r3, #3
 800389e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80038a2:	00d4      	lsls	r4, r2, #3
 80038a4:	4622      	mov	r2, r4
 80038a6:	462b      	mov	r3, r5
 80038a8:	1814      	adds	r4, r2, r0
 80038aa:	653c      	str	r4, [r7, #80]	; 0x50
 80038ac:	414b      	adcs	r3, r1
 80038ae:	657b      	str	r3, [r7, #84]	; 0x54
 80038b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80038b2:	685b      	ldr	r3, [r3, #4]
 80038b4:	461a      	mov	r2, r3
 80038b6:	f04f 0300 	mov.w	r3, #0
 80038ba:	1891      	adds	r1, r2, r2
 80038bc:	61b9      	str	r1, [r7, #24]
 80038be:	415b      	adcs	r3, r3
 80038c0:	61fb      	str	r3, [r7, #28]
 80038c2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80038c6:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80038ca:	f7fd f9cf 	bl	8000c6c <__aeabi_uldivmod>
 80038ce:	4602      	mov	r2, r0
 80038d0:	460b      	mov	r3, r1
 80038d2:	4b6c      	ldr	r3, [pc, #432]	; (8003a84 <UART_SetConfig+0x38c>)
 80038d4:	fba3 1302 	umull	r1, r3, r3, r2
 80038d8:	095b      	lsrs	r3, r3, #5
 80038da:	2164      	movs	r1, #100	; 0x64
 80038dc:	fb01 f303 	mul.w	r3, r1, r3
 80038e0:	1ad3      	subs	r3, r2, r3
 80038e2:	00db      	lsls	r3, r3, #3
 80038e4:	3332      	adds	r3, #50	; 0x32
 80038e6:	4a67      	ldr	r2, [pc, #412]	; (8003a84 <UART_SetConfig+0x38c>)
 80038e8:	fba2 2303 	umull	r2, r3, r2, r3
 80038ec:	095b      	lsrs	r3, r3, #5
 80038ee:	f003 0207 	and.w	r2, r3, #7
 80038f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	4432      	add	r2, r6
 80038f8:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80038fa:	e0b9      	b.n	8003a70 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80038fc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80038fe:	461c      	mov	r4, r3
 8003900:	f04f 0500 	mov.w	r5, #0
 8003904:	4622      	mov	r2, r4
 8003906:	462b      	mov	r3, r5
 8003908:	1891      	adds	r1, r2, r2
 800390a:	6139      	str	r1, [r7, #16]
 800390c:	415b      	adcs	r3, r3
 800390e:	617b      	str	r3, [r7, #20]
 8003910:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003914:	1912      	adds	r2, r2, r4
 8003916:	eb45 0303 	adc.w	r3, r5, r3
 800391a:	f04f 0000 	mov.w	r0, #0
 800391e:	f04f 0100 	mov.w	r1, #0
 8003922:	00d9      	lsls	r1, r3, #3
 8003924:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003928:	00d0      	lsls	r0, r2, #3
 800392a:	4602      	mov	r2, r0
 800392c:	460b      	mov	r3, r1
 800392e:	eb12 0804 	adds.w	r8, r2, r4
 8003932:	eb43 0905 	adc.w	r9, r3, r5
 8003936:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003938:	685b      	ldr	r3, [r3, #4]
 800393a:	4618      	mov	r0, r3
 800393c:	f04f 0100 	mov.w	r1, #0
 8003940:	f04f 0200 	mov.w	r2, #0
 8003944:	f04f 0300 	mov.w	r3, #0
 8003948:	008b      	lsls	r3, r1, #2
 800394a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800394e:	0082      	lsls	r2, r0, #2
 8003950:	4640      	mov	r0, r8
 8003952:	4649      	mov	r1, r9
 8003954:	f7fd f98a 	bl	8000c6c <__aeabi_uldivmod>
 8003958:	4602      	mov	r2, r0
 800395a:	460b      	mov	r3, r1
 800395c:	4b49      	ldr	r3, [pc, #292]	; (8003a84 <UART_SetConfig+0x38c>)
 800395e:	fba3 2302 	umull	r2, r3, r3, r2
 8003962:	095b      	lsrs	r3, r3, #5
 8003964:	011e      	lsls	r6, r3, #4
 8003966:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003968:	4618      	mov	r0, r3
 800396a:	f04f 0100 	mov.w	r1, #0
 800396e:	4602      	mov	r2, r0
 8003970:	460b      	mov	r3, r1
 8003972:	1894      	adds	r4, r2, r2
 8003974:	60bc      	str	r4, [r7, #8]
 8003976:	415b      	adcs	r3, r3
 8003978:	60fb      	str	r3, [r7, #12]
 800397a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800397e:	1812      	adds	r2, r2, r0
 8003980:	eb41 0303 	adc.w	r3, r1, r3
 8003984:	f04f 0400 	mov.w	r4, #0
 8003988:	f04f 0500 	mov.w	r5, #0
 800398c:	00dd      	lsls	r5, r3, #3
 800398e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003992:	00d4      	lsls	r4, r2, #3
 8003994:	4622      	mov	r2, r4
 8003996:	462b      	mov	r3, r5
 8003998:	1814      	adds	r4, r2, r0
 800399a:	64bc      	str	r4, [r7, #72]	; 0x48
 800399c:	414b      	adcs	r3, r1
 800399e:	64fb      	str	r3, [r7, #76]	; 0x4c
 80039a0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80039a2:	685b      	ldr	r3, [r3, #4]
 80039a4:	4618      	mov	r0, r3
 80039a6:	f04f 0100 	mov.w	r1, #0
 80039aa:	f04f 0200 	mov.w	r2, #0
 80039ae:	f04f 0300 	mov.w	r3, #0
 80039b2:	008b      	lsls	r3, r1, #2
 80039b4:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80039b8:	0082      	lsls	r2, r0, #2
 80039ba:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80039be:	f7fd f955 	bl	8000c6c <__aeabi_uldivmod>
 80039c2:	4602      	mov	r2, r0
 80039c4:	460b      	mov	r3, r1
 80039c6:	4b2f      	ldr	r3, [pc, #188]	; (8003a84 <UART_SetConfig+0x38c>)
 80039c8:	fba3 1302 	umull	r1, r3, r3, r2
 80039cc:	095b      	lsrs	r3, r3, #5
 80039ce:	2164      	movs	r1, #100	; 0x64
 80039d0:	fb01 f303 	mul.w	r3, r1, r3
 80039d4:	1ad3      	subs	r3, r2, r3
 80039d6:	011b      	lsls	r3, r3, #4
 80039d8:	3332      	adds	r3, #50	; 0x32
 80039da:	4a2a      	ldr	r2, [pc, #168]	; (8003a84 <UART_SetConfig+0x38c>)
 80039dc:	fba2 2303 	umull	r2, r3, r2, r3
 80039e0:	095b      	lsrs	r3, r3, #5
 80039e2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80039e6:	441e      	add	r6, r3
 80039e8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80039ea:	4618      	mov	r0, r3
 80039ec:	f04f 0100 	mov.w	r1, #0
 80039f0:	4602      	mov	r2, r0
 80039f2:	460b      	mov	r3, r1
 80039f4:	1894      	adds	r4, r2, r2
 80039f6:	603c      	str	r4, [r7, #0]
 80039f8:	415b      	adcs	r3, r3
 80039fa:	607b      	str	r3, [r7, #4]
 80039fc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003a00:	1812      	adds	r2, r2, r0
 8003a02:	eb41 0303 	adc.w	r3, r1, r3
 8003a06:	f04f 0400 	mov.w	r4, #0
 8003a0a:	f04f 0500 	mov.w	r5, #0
 8003a0e:	00dd      	lsls	r5, r3, #3
 8003a10:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003a14:	00d4      	lsls	r4, r2, #3
 8003a16:	4622      	mov	r2, r4
 8003a18:	462b      	mov	r3, r5
 8003a1a:	eb12 0a00 	adds.w	sl, r2, r0
 8003a1e:	eb43 0b01 	adc.w	fp, r3, r1
 8003a22:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a24:	685b      	ldr	r3, [r3, #4]
 8003a26:	4618      	mov	r0, r3
 8003a28:	f04f 0100 	mov.w	r1, #0
 8003a2c:	f04f 0200 	mov.w	r2, #0
 8003a30:	f04f 0300 	mov.w	r3, #0
 8003a34:	008b      	lsls	r3, r1, #2
 8003a36:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003a3a:	0082      	lsls	r2, r0, #2
 8003a3c:	4650      	mov	r0, sl
 8003a3e:	4659      	mov	r1, fp
 8003a40:	f7fd f914 	bl	8000c6c <__aeabi_uldivmod>
 8003a44:	4602      	mov	r2, r0
 8003a46:	460b      	mov	r3, r1
 8003a48:	4b0e      	ldr	r3, [pc, #56]	; (8003a84 <UART_SetConfig+0x38c>)
 8003a4a:	fba3 1302 	umull	r1, r3, r3, r2
 8003a4e:	095b      	lsrs	r3, r3, #5
 8003a50:	2164      	movs	r1, #100	; 0x64
 8003a52:	fb01 f303 	mul.w	r3, r1, r3
 8003a56:	1ad3      	subs	r3, r2, r3
 8003a58:	011b      	lsls	r3, r3, #4
 8003a5a:	3332      	adds	r3, #50	; 0x32
 8003a5c:	4a09      	ldr	r2, [pc, #36]	; (8003a84 <UART_SetConfig+0x38c>)
 8003a5e:	fba2 2303 	umull	r2, r3, r2, r3
 8003a62:	095b      	lsrs	r3, r3, #5
 8003a64:	f003 020f 	and.w	r2, r3, #15
 8003a68:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	4432      	add	r2, r6
 8003a6e:	609a      	str	r2, [r3, #8]
}
 8003a70:	bf00      	nop
 8003a72:	377c      	adds	r7, #124	; 0x7c
 8003a74:	46bd      	mov	sp, r7
 8003a76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003a7a:	bf00      	nop
 8003a7c:	40011000 	.word	0x40011000
 8003a80:	40011400 	.word	0x40011400
 8003a84:	51eb851f 	.word	0x51eb851f

08003a88 <TfLiteIntArrayGetSizeInBytes>:
#ifndef TF_LITE_STATIC_MEMORY
#include <stdlib.h>
#include <string.h>
#endif  // TF_LITE_STATIC_MEMORY

int TfLiteIntArrayGetSizeInBytes(int size) {
 8003a88:	b480      	push	{r7}
 8003a8a:	b083      	sub	sp, #12
 8003a8c:	af00      	add	r7, sp, #0
 8003a8e:	6078      	str	r0, [r7, #4]
  static TfLiteIntArray dummy;
  return sizeof(dummy) + sizeof(dummy.data[0]) * size;
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	3301      	adds	r3, #1
 8003a94:	009b      	lsls	r3, r3, #2
}
 8003a96:	4618      	mov	r0, r3
 8003a98:	370c      	adds	r7, #12
 8003a9a:	46bd      	mov	sp, r7
 8003a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa0:	4770      	bx	lr
	...

08003aa4 <TfLiteTypeGetName>:
  }
  tensor->bytes = num_bytes;
}
#endif  // TF_LITE_STATIC_MEMORY

const char* TfLiteTypeGetName(TfLiteType type) {
 8003aa4:	b480      	push	{r7}
 8003aa6:	b083      	sub	sp, #12
 8003aa8:	af00      	add	r7, sp, #0
 8003aaa:	4603      	mov	r3, r0
 8003aac:	71fb      	strb	r3, [r7, #7]
  switch (type) {
 8003aae:	79fb      	ldrb	r3, [r7, #7]
 8003ab0:	2b10      	cmp	r3, #16
 8003ab2:	d847      	bhi.n	8003b44 <TfLiteTypeGetName+0xa0>
 8003ab4:	a201      	add	r2, pc, #4	; (adr r2, 8003abc <TfLiteTypeGetName+0x18>)
 8003ab6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003aba:	bf00      	nop
 8003abc:	08003b01 	.word	0x08003b01
 8003ac0:	08003b05 	.word	0x08003b05
 8003ac4:	08003b0d 	.word	0x08003b0d
 8003ac8:	08003b15 	.word	0x08003b15
 8003acc:	08003b1d 	.word	0x08003b1d
 8003ad0:	08003b31 	.word	0x08003b31
 8003ad4:	08003b25 	.word	0x08003b25
 8003ad8:	08003b09 	.word	0x08003b09
 8003adc:	08003b29 	.word	0x08003b29
 8003ae0:	08003b19 	.word	0x08003b19
 8003ae4:	08003b35 	.word	0x08003b35
 8003ae8:	08003b39 	.word	0x08003b39
 8003aec:	08003b2d 	.word	0x08003b2d
 8003af0:	08003b21 	.word	0x08003b21
 8003af4:	08003b3d 	.word	0x08003b3d
 8003af8:	08003b41 	.word	0x08003b41
 8003afc:	08003b11 	.word	0x08003b11
    case kTfLiteNoType:
      return "NOTYPE";
 8003b00:	4b14      	ldr	r3, [pc, #80]	; (8003b54 <TfLiteTypeGetName+0xb0>)
 8003b02:	e020      	b.n	8003b46 <TfLiteTypeGetName+0xa2>
    case kTfLiteFloat32:
      return "FLOAT32";
 8003b04:	4b14      	ldr	r3, [pc, #80]	; (8003b58 <TfLiteTypeGetName+0xb4>)
 8003b06:	e01e      	b.n	8003b46 <TfLiteTypeGetName+0xa2>
    case kTfLiteInt16:
      return "INT16";
 8003b08:	4b14      	ldr	r3, [pc, #80]	; (8003b5c <TfLiteTypeGetName+0xb8>)
 8003b0a:	e01c      	b.n	8003b46 <TfLiteTypeGetName+0xa2>
    case kTfLiteInt32:
      return "INT32";
 8003b0c:	4b14      	ldr	r3, [pc, #80]	; (8003b60 <TfLiteTypeGetName+0xbc>)
 8003b0e:	e01a      	b.n	8003b46 <TfLiteTypeGetName+0xa2>
    case kTfLiteUInt32:
      return "UINT32";
 8003b10:	4b14      	ldr	r3, [pc, #80]	; (8003b64 <TfLiteTypeGetName+0xc0>)
 8003b12:	e018      	b.n	8003b46 <TfLiteTypeGetName+0xa2>
    case kTfLiteUInt8:
      return "UINT8";
 8003b14:	4b14      	ldr	r3, [pc, #80]	; (8003b68 <TfLiteTypeGetName+0xc4>)
 8003b16:	e016      	b.n	8003b46 <TfLiteTypeGetName+0xa2>
    case kTfLiteInt8:
      return "INT8";
 8003b18:	4b14      	ldr	r3, [pc, #80]	; (8003b6c <TfLiteTypeGetName+0xc8>)
 8003b1a:	e014      	b.n	8003b46 <TfLiteTypeGetName+0xa2>
    case kTfLiteInt64:
      return "INT64";
 8003b1c:	4b14      	ldr	r3, [pc, #80]	; (8003b70 <TfLiteTypeGetName+0xcc>)
 8003b1e:	e012      	b.n	8003b46 <TfLiteTypeGetName+0xa2>
    case kTfLiteUInt64:
      return "UINT64";
 8003b20:	4b14      	ldr	r3, [pc, #80]	; (8003b74 <TfLiteTypeGetName+0xd0>)
 8003b22:	e010      	b.n	8003b46 <TfLiteTypeGetName+0xa2>
    case kTfLiteBool:
      return "BOOL";
 8003b24:	4b14      	ldr	r3, [pc, #80]	; (8003b78 <TfLiteTypeGetName+0xd4>)
 8003b26:	e00e      	b.n	8003b46 <TfLiteTypeGetName+0xa2>
    case kTfLiteComplex64:
      return "COMPLEX64";
 8003b28:	4b14      	ldr	r3, [pc, #80]	; (8003b7c <TfLiteTypeGetName+0xd8>)
 8003b2a:	e00c      	b.n	8003b46 <TfLiteTypeGetName+0xa2>
    case kTfLiteComplex128:
      return "COMPLEX128";
 8003b2c:	4b14      	ldr	r3, [pc, #80]	; (8003b80 <TfLiteTypeGetName+0xdc>)
 8003b2e:	e00a      	b.n	8003b46 <TfLiteTypeGetName+0xa2>
    case kTfLiteString:
      return "STRING";
 8003b30:	4b14      	ldr	r3, [pc, #80]	; (8003b84 <TfLiteTypeGetName+0xe0>)
 8003b32:	e008      	b.n	8003b46 <TfLiteTypeGetName+0xa2>
    case kTfLiteFloat16:
      return "FLOAT16";
 8003b34:	4b14      	ldr	r3, [pc, #80]	; (8003b88 <TfLiteTypeGetName+0xe4>)
 8003b36:	e006      	b.n	8003b46 <TfLiteTypeGetName+0xa2>
    case kTfLiteFloat64:
      return "FLOAT64";
 8003b38:	4b14      	ldr	r3, [pc, #80]	; (8003b8c <TfLiteTypeGetName+0xe8>)
 8003b3a:	e004      	b.n	8003b46 <TfLiteTypeGetName+0xa2>
    case kTfLiteResource:
      return "RESOURCE";
 8003b3c:	4b14      	ldr	r3, [pc, #80]	; (8003b90 <TfLiteTypeGetName+0xec>)
 8003b3e:	e002      	b.n	8003b46 <TfLiteTypeGetName+0xa2>
    case kTfLiteVariant:
      return "VARIANT";
 8003b40:	4b14      	ldr	r3, [pc, #80]	; (8003b94 <TfLiteTypeGetName+0xf0>)
 8003b42:	e000      	b.n	8003b46 <TfLiteTypeGetName+0xa2>
  }
  return "Unknown type";
 8003b44:	4b14      	ldr	r3, [pc, #80]	; (8003b98 <TfLiteTypeGetName+0xf4>)
}
 8003b46:	4618      	mov	r0, r3
 8003b48:	370c      	adds	r7, #12
 8003b4a:	46bd      	mov	sp, r7
 8003b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b50:	4770      	bx	lr
 8003b52:	bf00      	nop
 8003b54:	0800e04c 	.word	0x0800e04c
 8003b58:	0800e054 	.word	0x0800e054
 8003b5c:	0800e05c 	.word	0x0800e05c
 8003b60:	0800e064 	.word	0x0800e064
 8003b64:	0800e06c 	.word	0x0800e06c
 8003b68:	0800e074 	.word	0x0800e074
 8003b6c:	0800e07c 	.word	0x0800e07c
 8003b70:	0800e084 	.word	0x0800e084
 8003b74:	0800e08c 	.word	0x0800e08c
 8003b78:	0800e094 	.word	0x0800e094
 8003b7c:	0800e09c 	.word	0x0800e09c
 8003b80:	0800e0a8 	.word	0x0800e0a8
 8003b84:	0800e0b4 	.word	0x0800e0b4
 8003b88:	0800e0bc 	.word	0x0800e0bc
 8003b8c:	0800e0c4 	.word	0x0800e0c4
 8003b90:	0800e0cc 	.word	0x0800e0cc
 8003b94:	0800e0d8 	.word	0x0800e0d8
 8003b98:	0800e0e0 	.word	0x0800e0e0

08003b9c <_ZN6tflite13ErrorReporter6ReportEPKcz>:
#include "tensorflow/lite/core/api/error_reporter.h"
#include <cstdarg>

namespace tflite {

int ErrorReporter::Report(const char* format, ...) {
 8003b9c:	b40e      	push	{r1, r2, r3}
 8003b9e:	b580      	push	{r7, lr}
 8003ba0:	b085      	sub	sp, #20
 8003ba2:	af00      	add	r7, sp, #0
 8003ba4:	6078      	str	r0, [r7, #4]
  va_list args;
  va_start(args, format);
 8003ba6:	f107 0320 	add.w	r3, r7, #32
 8003baa:	60bb      	str	r3, [r7, #8]
  int code = Report(format, args);
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	3308      	adds	r3, #8
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	68ba      	ldr	r2, [r7, #8]
 8003bb6:	69f9      	ldr	r1, [r7, #28]
 8003bb8:	6878      	ldr	r0, [r7, #4]
 8003bba:	4798      	blx	r3
 8003bbc:	60f8      	str	r0, [r7, #12]
  va_end(args);
  return code;
 8003bbe:	68fb      	ldr	r3, [r7, #12]
}
 8003bc0:	4618      	mov	r0, r3
 8003bc2:	3714      	adds	r7, #20
 8003bc4:	46bd      	mov	sp, r7
 8003bc6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003bca:	b003      	add	sp, #12
 8003bcc:	4770      	bx	lr

08003bce <_ZN6tflite13ErrorReporter11ReportErrorEPvPKcz>:

// TODO(aselle): Make the name of ReportError on context the same, so
// we can use the ensure functions w/o a context and w/ a reporter.
int ErrorReporter::ReportError(void*, const char* format, ...) {
 8003bce:	b40c      	push	{r2, r3}
 8003bd0:	b580      	push	{r7, lr}
 8003bd2:	b084      	sub	sp, #16
 8003bd4:	af00      	add	r7, sp, #0
 8003bd6:	6078      	str	r0, [r7, #4]
 8003bd8:	6039      	str	r1, [r7, #0]
  va_list args;
  va_start(args, format);
 8003bda:	f107 031c 	add.w	r3, r7, #28
 8003bde:	60bb      	str	r3, [r7, #8]
  int code = Report(format, args);
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	3308      	adds	r3, #8
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	68ba      	ldr	r2, [r7, #8]
 8003bea:	69b9      	ldr	r1, [r7, #24]
 8003bec:	6878      	ldr	r0, [r7, #4]
 8003bee:	4798      	blx	r3
 8003bf0:	60f8      	str	r0, [r7, #12]
  va_end(args);
  return code;
 8003bf2:	68fb      	ldr	r3, [r7, #12]
}
 8003bf4:	4618      	mov	r0, r3
 8003bf6:	3710      	adds	r7, #16
 8003bf8:	46bd      	mov	sp, r7
 8003bfa:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003bfe:	b002      	add	sp, #8
 8003c00:	4770      	bx	lr

08003c02 <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
_GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 8003c02:	b480      	push	{r7}
 8003c04:	b083      	sub	sp, #12
 8003c06:	af00      	add	r7, sp, #0
 8003c08:	6078      	str	r0, [r7, #4]
 8003c0a:	6039      	str	r1, [r7, #0]
 8003c0c:	683b      	ldr	r3, [r7, #0]
 8003c0e:	4618      	mov	r0, r3
 8003c10:	370c      	adds	r7, #12
 8003c12:	46bd      	mov	sp, r7
 8003c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c18:	4770      	bx	lr

08003c1a <_ZNK11flatbuffers6String5c_strEv>:
  const char *c_str() const { return reinterpret_cast<const char *>(Data()); }
 8003c1a:	b580      	push	{r7, lr}
 8003c1c:	b082      	sub	sp, #8
 8003c1e:	af00      	add	r7, sp, #0
 8003c20:	6078      	str	r0, [r7, #4]
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	4618      	mov	r0, r3
 8003c26:	f000 fa27 	bl	8004078 <_ZNK11flatbuffers6VectorIcE4DataEv>
 8003c2a:	4603      	mov	r3, r0
 8003c2c:	4618      	mov	r0, r3
 8003c2e:	3708      	adds	r7, #8
 8003c30:	46bd      	mov	sp, r7
 8003c32:	bd80      	pop	{r7, pc}

08003c34 <_ZNK6tflite21FullyConnectedOptions25fused_activation_functionEv>:
  tflite::ActivationFunctionType fused_activation_function() const {
 8003c34:	b580      	push	{r7, lr}
 8003c36:	b082      	sub	sp, #8
 8003c38:	af00      	add	r7, sp, #0
 8003c3a:	6078      	str	r0, [r7, #4]
    return static_cast<tflite::ActivationFunctionType>(GetField<int8_t>(VT_FUSED_ACTIVATION_FUNCTION, 0));
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	2200      	movs	r2, #0
 8003c40:	2104      	movs	r1, #4
 8003c42:	4618      	mov	r0, r3
 8003c44:	f000 fa8f 	bl	8004166 <_ZNK11flatbuffers5Table8GetFieldIaEET_tS2_>
 8003c48:	4603      	mov	r3, r0
 8003c4a:	b2db      	uxtb	r3, r3
  }
 8003c4c:	4618      	mov	r0, r3
 8003c4e:	3708      	adds	r7, #8
 8003c50:	46bd      	mov	sp, r7
 8003c52:	bd80      	pop	{r7, pc}

08003c54 <_ZNK6tflite21FullyConnectedOptions14weights_formatEv>:
  tflite::FullyConnectedOptionsWeightsFormat weights_format() const {
 8003c54:	b580      	push	{r7, lr}
 8003c56:	b082      	sub	sp, #8
 8003c58:	af00      	add	r7, sp, #0
 8003c5a:	6078      	str	r0, [r7, #4]
    return static_cast<tflite::FullyConnectedOptionsWeightsFormat>(GetField<int8_t>(VT_WEIGHTS_FORMAT, 0));
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	2200      	movs	r2, #0
 8003c60:	2106      	movs	r1, #6
 8003c62:	4618      	mov	r0, r3
 8003c64:	f000 fa7f 	bl	8004166 <_ZNK11flatbuffers5Table8GetFieldIaEET_tS2_>
 8003c68:	4603      	mov	r3, r0
 8003c6a:	b2db      	uxtb	r3, r3
  }
 8003c6c:	4618      	mov	r0, r3
 8003c6e:	3708      	adds	r7, #8
 8003c70:	46bd      	mov	sp, r7
 8003c72:	bd80      	pop	{r7, pc}

08003c74 <_ZNK6tflite21FullyConnectedOptions13keep_num_dimsEv>:
  bool keep_num_dims() const {
 8003c74:	b580      	push	{r7, lr}
 8003c76:	b082      	sub	sp, #8
 8003c78:	af00      	add	r7, sp, #0
 8003c7a:	6078      	str	r0, [r7, #4]
    return GetField<uint8_t>(VT_KEEP_NUM_DIMS, 0) != 0;
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	2200      	movs	r2, #0
 8003c80:	2108      	movs	r1, #8
 8003c82:	4618      	mov	r0, r3
 8003c84:	f000 fa12 	bl	80040ac <_ZNK11flatbuffers5Table8GetFieldIhEET_tS2_>
 8003c88:	4603      	mov	r3, r0
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	bf14      	ite	ne
 8003c8e:	2301      	movne	r3, #1
 8003c90:	2300      	moveq	r3, #0
 8003c92:	b2db      	uxtb	r3, r3
  }
 8003c94:	4618      	mov	r0, r3
 8003c96:	3708      	adds	r7, #8
 8003c98:	46bd      	mov	sp, r7
 8003c9a:	bd80      	pop	{r7, pc}

08003c9c <_ZNK6tflite21FullyConnectedOptions26asymmetric_quantize_inputsEv>:
  bool asymmetric_quantize_inputs() const {
 8003c9c:	b580      	push	{r7, lr}
 8003c9e:	b082      	sub	sp, #8
 8003ca0:	af00      	add	r7, sp, #0
 8003ca2:	6078      	str	r0, [r7, #4]
    return GetField<uint8_t>(VT_ASYMMETRIC_QUANTIZE_INPUTS, 0) != 0;
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	2200      	movs	r2, #0
 8003ca8:	210a      	movs	r1, #10
 8003caa:	4618      	mov	r0, r3
 8003cac:	f000 f9fe 	bl	80040ac <_ZNK11flatbuffers5Table8GetFieldIhEET_tS2_>
 8003cb0:	4603      	mov	r3, r0
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	bf14      	ite	ne
 8003cb6:	2301      	movne	r3, #1
 8003cb8:	2300      	moveq	r3, #0
 8003cba:	b2db      	uxtb	r3, r3
  }
 8003cbc:	4618      	mov	r0, r3
 8003cbe:	3708      	adds	r7, #8
 8003cc0:	46bd      	mov	sp, r7
 8003cc2:	bd80      	pop	{r7, pc}

08003cc4 <_ZNK6tflite8Operator20builtin_options_typeEv>:
  tflite::BuiltinOptions builtin_options_type() const {
 8003cc4:	b580      	push	{r7, lr}
 8003cc6:	b082      	sub	sp, #8
 8003cc8:	af00      	add	r7, sp, #0
 8003cca:	6078      	str	r0, [r7, #4]
    return static_cast<tflite::BuiltinOptions>(GetField<uint8_t>(VT_BUILTIN_OPTIONS_TYPE, 0));
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	2200      	movs	r2, #0
 8003cd0:	210a      	movs	r1, #10
 8003cd2:	4618      	mov	r0, r3
 8003cd4:	f000 f9ea 	bl	80040ac <_ZNK11flatbuffers5Table8GetFieldIhEET_tS2_>
 8003cd8:	4603      	mov	r3, r0
  }
 8003cda:	4618      	mov	r0, r3
 8003cdc:	3708      	adds	r7, #8
 8003cde:	46bd      	mov	sp, r7
 8003ce0:	bd80      	pop	{r7, pc}

08003ce2 <_ZNK6tflite8Operator15builtin_optionsEv>:
  const void *builtin_options() const {
 8003ce2:	b580      	push	{r7, lr}
 8003ce4:	b082      	sub	sp, #8
 8003ce6:	af00      	add	r7, sp, #0
 8003ce8:	6078      	str	r0, [r7, #4]
    return GetPointer<const void *>(VT_BUILTIN_OPTIONS);
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	210c      	movs	r1, #12
 8003cee:	4618      	mov	r0, r3
 8003cf0:	f000 f9fb 	bl	80040ea <_ZNK11flatbuffers5Table10GetPointerIPKvEET_t>
 8003cf4:	4603      	mov	r3, r0
  }
 8003cf6:	4618      	mov	r0, r3
 8003cf8:	3708      	adds	r7, #8
 8003cfa:	46bd      	mov	sp, r7
 8003cfc:	bd80      	pop	{r7, pc}

08003cfe <_ZNK6tflite8Operator40builtin_options_as_FullyConnectedOptionsEv>:
  const tflite::FullyConnectedOptions *builtin_options_as_FullyConnectedOptions() const {
 8003cfe:	b580      	push	{r7, lr}
 8003d00:	b082      	sub	sp, #8
 8003d02:	af00      	add	r7, sp, #0
 8003d04:	6078      	str	r0, [r7, #4]
    return builtin_options_type() == tflite::BuiltinOptions_FullyConnectedOptions ? static_cast<const tflite::FullyConnectedOptions *>(builtin_options()) : nullptr;
 8003d06:	6878      	ldr	r0, [r7, #4]
 8003d08:	f7ff ffdc 	bl	8003cc4 <_ZNK6tflite8Operator20builtin_options_typeEv>
 8003d0c:	4603      	mov	r3, r0
 8003d0e:	2b08      	cmp	r3, #8
 8003d10:	d104      	bne.n	8003d1c <_ZNK6tflite8Operator40builtin_options_as_FullyConnectedOptionsEv+0x1e>
 8003d12:	6878      	ldr	r0, [r7, #4]
 8003d14:	f7ff ffe5 	bl	8003ce2 <_ZNK6tflite8Operator15builtin_optionsEv>
 8003d18:	4603      	mov	r3, r0
 8003d1a:	e000      	b.n	8003d1e <_ZNK6tflite8Operator40builtin_options_as_FullyConnectedOptionsEv+0x20>
 8003d1c:	2300      	movs	r3, #0
  }
 8003d1e:	4618      	mov	r0, r3
 8003d20:	3708      	adds	r7, #8
 8003d22:	46bd      	mov	sp, r7
 8003d24:	bd80      	pop	{r7, pc}

08003d26 <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterC1EPNS_20BuiltinDataAllocatorE>:
// parsed op data (e.g., when model parameters are invalid).
class SafeBuiltinDataAllocator {
 public:
  class BuiltinDataDeleter {
   public:
    explicit BuiltinDataDeleter(BuiltinDataAllocator* allocator)
 8003d26:	b480      	push	{r7}
 8003d28:	b083      	sub	sp, #12
 8003d2a:	af00      	add	r7, sp, #0
 8003d2c:	6078      	str	r0, [r7, #4]
 8003d2e:	6039      	str	r1, [r7, #0]
        : allocator_(allocator) {}
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	683a      	ldr	r2, [r7, #0]
 8003d34:	601a      	str	r2, [r3, #0]
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	4618      	mov	r0, r3
 8003d3a:	370c      	adds	r7, #12
 8003d3c:	46bd      	mov	sp, r7
 8003d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d42:	4770      	bx	lr

08003d44 <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterclEPv>:

    void operator()(void* data) { allocator_->Deallocate(data); }
 8003d44:	b580      	push	{r7, lr}
 8003d46:	b082      	sub	sp, #8
 8003d48:	af00      	add	r7, sp, #0
 8003d4a:	6078      	str	r0, [r7, #4]
 8003d4c:	6039      	str	r1, [r7, #0]
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681a      	ldr	r2, [r3, #0]
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	3304      	adds	r3, #4
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	6839      	ldr	r1, [r7, #0]
 8003d5e:	4610      	mov	r0, r2
 8003d60:	4798      	blx	r3
 8003d62:	bf00      	nop
 8003d64:	3708      	adds	r7, #8
 8003d66:	46bd      	mov	sp, r7
 8003d68:	bd80      	pop	{r7, pc}

08003d6a <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocatorC1EPNS_20BuiltinDataAllocatorE>:
  };

  template <typename T>
  using BuiltinDataPtr = std::unique_ptr<T, BuiltinDataDeleter>;

  explicit SafeBuiltinDataAllocator(BuiltinDataAllocator* allocator)
 8003d6a:	b480      	push	{r7}
 8003d6c:	b083      	sub	sp, #12
 8003d6e:	af00      	add	r7, sp, #0
 8003d70:	6078      	str	r0, [r7, #4]
 8003d72:	6039      	str	r1, [r7, #0]
      : allocator_(allocator) {}
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	683a      	ldr	r2, [r7, #0]
 8003d78:	601a      	str	r2, [r3, #0]
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	4618      	mov	r0, r3
 8003d7e:	370c      	adds	r7, #12
 8003d80:	46bd      	mov	sp, r7
 8003d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d86:	4770      	bx	lr

08003d88 <_ZN6tflite12_GLOBAL__N_123CheckParsePointerParamsEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>:

// All the Parse functions take some pointers as params and this function has
// the common DCHECKs to catch if any of those are nullptr.
void CheckParsePointerParams(const Operator* op, ErrorReporter* error_reporter,
                             BuiltinDataAllocator* allocator,
                             void** builtin_data) {
 8003d88:	b580      	push	{r7, lr}
 8003d8a:	b084      	sub	sp, #16
 8003d8c:	af00      	add	r7, sp, #0
 8003d8e:	60f8      	str	r0, [r7, #12]
 8003d90:	60b9      	str	r1, [r7, #8]
 8003d92:	607a      	str	r2, [r7, #4]
 8003d94:	603b      	str	r3, [r7, #0]
  TFLITE_DCHECK(op != nullptr);
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d101      	bne.n	8003da0 <_ZN6tflite12_GLOBAL__N_123CheckParsePointerParamsEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x18>
 8003d9c:	f007 f96e 	bl	800b07c <abort>
  TFLITE_DCHECK(error_reporter != nullptr);
 8003da0:	68bb      	ldr	r3, [r7, #8]
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d101      	bne.n	8003daa <_ZN6tflite12_GLOBAL__N_123CheckParsePointerParamsEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x22>
 8003da6:	f007 f969 	bl	800b07c <abort>
  TFLITE_DCHECK(allocator != nullptr);
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d101      	bne.n	8003db4 <_ZN6tflite12_GLOBAL__N_123CheckParsePointerParamsEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x2c>
 8003db0:	f007 f964 	bl	800b07c <abort>
  TFLITE_DCHECK(builtin_data != nullptr);
 8003db4:	683b      	ldr	r3, [r7, #0]
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d101      	bne.n	8003dbe <_ZN6tflite12_GLOBAL__N_123CheckParsePointerParamsEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x36>
 8003dba:	f007 f95f 	bl	800b07c <abort>
}
 8003dbe:	bf00      	nop
 8003dc0:	3710      	adds	r7, #16
 8003dc2:	46bd      	mov	sp, r7
 8003dc4:	bd80      	pop	{r7, pc}
	...

08003dc8 <_ZN6tflite12_GLOBAL__N_117ConvertActivationENS_22ActivationFunctionTypeE>:
  }
  return kTfLiteOk;
}

// Converts the flatbuffer activation to what is used at runtime.
TfLiteFusedActivation ConvertActivation(ActivationFunctionType activation) {
 8003dc8:	b480      	push	{r7}
 8003dca:	b083      	sub	sp, #12
 8003dcc:	af00      	add	r7, sp, #0
 8003dce:	4603      	mov	r3, r0
 8003dd0:	71fb      	strb	r3, [r7, #7]
  switch (activation) {
 8003dd2:	79fb      	ldrb	r3, [r7, #7]
 8003dd4:	2b05      	cmp	r3, #5
 8003dd6:	d81b      	bhi.n	8003e10 <_ZN6tflite12_GLOBAL__N_117ConvertActivationENS_22ActivationFunctionTypeE+0x48>
 8003dd8:	a201      	add	r2, pc, #4	; (adr r2, 8003de0 <_ZN6tflite12_GLOBAL__N_117ConvertActivationENS_22ActivationFunctionTypeE+0x18>)
 8003dda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003dde:	bf00      	nop
 8003de0:	08003df9 	.word	0x08003df9
 8003de4:	08003dfd 	.word	0x08003dfd
 8003de8:	08003e01 	.word	0x08003e01
 8003dec:	08003e05 	.word	0x08003e05
 8003df0:	08003e09 	.word	0x08003e09
 8003df4:	08003e0d 	.word	0x08003e0d
    case ActivationFunctionType_NONE:
      return kTfLiteActNone;
 8003df8:	2300      	movs	r3, #0
 8003dfa:	e00a      	b.n	8003e12 <_ZN6tflite12_GLOBAL__N_117ConvertActivationENS_22ActivationFunctionTypeE+0x4a>
    case ActivationFunctionType_RELU:
      return kTfLiteActRelu;
 8003dfc:	2301      	movs	r3, #1
 8003dfe:	e008      	b.n	8003e12 <_ZN6tflite12_GLOBAL__N_117ConvertActivationENS_22ActivationFunctionTypeE+0x4a>
    case ActivationFunctionType_RELU_N1_TO_1:
      return kTfLiteActReluN1To1;
 8003e00:	2302      	movs	r3, #2
 8003e02:	e006      	b.n	8003e12 <_ZN6tflite12_GLOBAL__N_117ConvertActivationENS_22ActivationFunctionTypeE+0x4a>
    case ActivationFunctionType_RELU6:
      return kTfLiteActRelu6;
 8003e04:	2303      	movs	r3, #3
 8003e06:	e004      	b.n	8003e12 <_ZN6tflite12_GLOBAL__N_117ConvertActivationENS_22ActivationFunctionTypeE+0x4a>
    case ActivationFunctionType_TANH:
      return kTfLiteActTanh;
 8003e08:	2304      	movs	r3, #4
 8003e0a:	e002      	b.n	8003e12 <_ZN6tflite12_GLOBAL__N_117ConvertActivationENS_22ActivationFunctionTypeE+0x4a>
    case ActivationFunctionType_SIGN_BIT:
      return kTfLiteActSignBit;
 8003e0c:	2305      	movs	r3, #5
 8003e0e:	e000      	b.n	8003e12 <_ZN6tflite12_GLOBAL__N_117ConvertActivationENS_22ActivationFunctionTypeE+0x4a>
  }
  return kTfLiteActNone;
 8003e10:	2300      	movs	r3, #0
}
 8003e12:	4618      	mov	r0, r3
 8003e14:	370c      	adds	r7, #12
 8003e16:	46bd      	mov	sp, r7
 8003e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e1c:	4770      	bx	lr
 8003e1e:	bf00      	nop

08003e20 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE>:
}  // NOLINT[readability/fn_size]
#endif  // !defined(TF_LITE_STATIC_MEMORY)
}  // namespace

TfLiteStatus ConvertTensorType(TensorType tensor_type, TfLiteType* type,
                               ErrorReporter* error_reporter) {
 8003e20:	b580      	push	{r7, lr}
 8003e22:	b084      	sub	sp, #16
 8003e24:	af00      	add	r7, sp, #0
 8003e26:	4603      	mov	r3, r0
 8003e28:	60b9      	str	r1, [r7, #8]
 8003e2a:	607a      	str	r2, [r7, #4]
 8003e2c:	73fb      	strb	r3, [r7, #15]
  switch (tensor_type) {
 8003e2e:	7bfb      	ldrb	r3, [r7, #15]
 8003e30:	2b0f      	cmp	r3, #15
 8003e32:	d873      	bhi.n	8003f1c <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0xfc>
 8003e34:	a201      	add	r2, pc, #4	; (adr r2, 8003e3c <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x1c>)
 8003e36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e3a:	bf00      	nop
 8003e3c:	08003e87 	.word	0x08003e87
 8003e40:	08003e7d 	.word	0x08003e7d
 8003e44:	08003ea5 	.word	0x08003ea5
 8003e48:	08003eb9 	.word	0x08003eb9
 8003e4c:	08003ecd 	.word	0x08003ecd
 8003e50:	08003ee1 	.word	0x08003ee1
 8003e54:	08003eeb 	.word	0x08003eeb
 8003e58:	08003e9b 	.word	0x08003e9b
 8003e5c:	08003ef5 	.word	0x08003ef5
 8003e60:	08003ec3 	.word	0x08003ec3
 8003e64:	08003e91 	.word	0x08003e91
 8003e68:	08003eff 	.word	0x08003eff
 8003e6c:	08003ed7 	.word	0x08003ed7
 8003e70:	08003f09 	.word	0x08003f09
 8003e74:	08003f13 	.word	0x08003f13
 8003e78:	08003eaf 	.word	0x08003eaf
    case TensorType_FLOAT16:
      *type = kTfLiteFloat16;
 8003e7c:	68bb      	ldr	r3, [r7, #8]
 8003e7e:	220a      	movs	r2, #10
 8003e80:	701a      	strb	r2, [r3, #0]
      return kTfLiteOk;
 8003e82:	2300      	movs	r3, #0
 8003e84:	e054      	b.n	8003f30 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x110>
    case TensorType_FLOAT32:
      *type = kTfLiteFloat32;
 8003e86:	68bb      	ldr	r3, [r7, #8]
 8003e88:	2201      	movs	r2, #1
 8003e8a:	701a      	strb	r2, [r3, #0]
      return kTfLiteOk;
 8003e8c:	2300      	movs	r3, #0
 8003e8e:	e04f      	b.n	8003f30 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x110>
    case TensorType_FLOAT64:
      *type = kTfLiteFloat64;
 8003e90:	68bb      	ldr	r3, [r7, #8]
 8003e92:	220b      	movs	r2, #11
 8003e94:	701a      	strb	r2, [r3, #0]
      return kTfLiteOk;
 8003e96:	2300      	movs	r3, #0
 8003e98:	e04a      	b.n	8003f30 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x110>
    case TensorType_INT16:
      *type = kTfLiteInt16;
 8003e9a:	68bb      	ldr	r3, [r7, #8]
 8003e9c:	2207      	movs	r2, #7
 8003e9e:	701a      	strb	r2, [r3, #0]
      return kTfLiteOk;
 8003ea0:	2300      	movs	r3, #0
 8003ea2:	e045      	b.n	8003f30 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x110>
    case TensorType_INT32:
      *type = kTfLiteInt32;
 8003ea4:	68bb      	ldr	r3, [r7, #8]
 8003ea6:	2202      	movs	r2, #2
 8003ea8:	701a      	strb	r2, [r3, #0]
      return kTfLiteOk;
 8003eaa:	2300      	movs	r3, #0
 8003eac:	e040      	b.n	8003f30 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x110>
    case TensorType_UINT32:
      *type = kTfLiteUInt32;
 8003eae:	68bb      	ldr	r3, [r7, #8]
 8003eb0:	2210      	movs	r2, #16
 8003eb2:	701a      	strb	r2, [r3, #0]
      return kTfLiteOk;
 8003eb4:	2300      	movs	r3, #0
 8003eb6:	e03b      	b.n	8003f30 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x110>
    case TensorType_UINT8:
      *type = kTfLiteUInt8;
 8003eb8:	68bb      	ldr	r3, [r7, #8]
 8003eba:	2203      	movs	r2, #3
 8003ebc:	701a      	strb	r2, [r3, #0]
      return kTfLiteOk;
 8003ebe:	2300      	movs	r3, #0
 8003ec0:	e036      	b.n	8003f30 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x110>
    case TensorType_INT8:
      *type = kTfLiteInt8;
 8003ec2:	68bb      	ldr	r3, [r7, #8]
 8003ec4:	2209      	movs	r2, #9
 8003ec6:	701a      	strb	r2, [r3, #0]
      return kTfLiteOk;
 8003ec8:	2300      	movs	r3, #0
 8003eca:	e031      	b.n	8003f30 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x110>
    case TensorType_INT64:
      *type = kTfLiteInt64;
 8003ecc:	68bb      	ldr	r3, [r7, #8]
 8003ece:	2204      	movs	r2, #4
 8003ed0:	701a      	strb	r2, [r3, #0]
      return kTfLiteOk;
 8003ed2:	2300      	movs	r3, #0
 8003ed4:	e02c      	b.n	8003f30 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x110>
    case TensorType_UINT64:
      *type = kTfLiteUInt64;
 8003ed6:	68bb      	ldr	r3, [r7, #8]
 8003ed8:	220d      	movs	r2, #13
 8003eda:	701a      	strb	r2, [r3, #0]
      return kTfLiteOk;
 8003edc:	2300      	movs	r3, #0
 8003ede:	e027      	b.n	8003f30 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x110>
    case TensorType_STRING:
      *type = kTfLiteString;
 8003ee0:	68bb      	ldr	r3, [r7, #8]
 8003ee2:	2205      	movs	r2, #5
 8003ee4:	701a      	strb	r2, [r3, #0]
      return kTfLiteOk;
 8003ee6:	2300      	movs	r3, #0
 8003ee8:	e022      	b.n	8003f30 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x110>
    case TensorType_BOOL:
      *type = kTfLiteBool;
 8003eea:	68bb      	ldr	r3, [r7, #8]
 8003eec:	2206      	movs	r2, #6
 8003eee:	701a      	strb	r2, [r3, #0]
      return kTfLiteOk;
 8003ef0:	2300      	movs	r3, #0
 8003ef2:	e01d      	b.n	8003f30 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x110>
    case TensorType_COMPLEX64:
      *type = kTfLiteComplex64;
 8003ef4:	68bb      	ldr	r3, [r7, #8]
 8003ef6:	2208      	movs	r2, #8
 8003ef8:	701a      	strb	r2, [r3, #0]
      return kTfLiteOk;
 8003efa:	2300      	movs	r3, #0
 8003efc:	e018      	b.n	8003f30 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x110>
    case TensorType_COMPLEX128:
      *type = kTfLiteComplex128;
 8003efe:	68bb      	ldr	r3, [r7, #8]
 8003f00:	220c      	movs	r2, #12
 8003f02:	701a      	strb	r2, [r3, #0]
      return kTfLiteOk;
 8003f04:	2300      	movs	r3, #0
 8003f06:	e013      	b.n	8003f30 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x110>
    case TensorType_RESOURCE:
      *type = kTfLiteResource;
 8003f08:	68bb      	ldr	r3, [r7, #8]
 8003f0a:	220e      	movs	r2, #14
 8003f0c:	701a      	strb	r2, [r3, #0]
      return kTfLiteOk;
 8003f0e:	2300      	movs	r3, #0
 8003f10:	e00e      	b.n	8003f30 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x110>
    case TensorType_VARIANT:
      *type = kTfLiteVariant;
 8003f12:	68bb      	ldr	r3, [r7, #8]
 8003f14:	220f      	movs	r2, #15
 8003f16:	701a      	strb	r2, [r3, #0]
      return kTfLiteOk;
 8003f18:	2300      	movs	r3, #0
 8003f1a:	e009      	b.n	8003f30 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x110>
    default:
      *type = kTfLiteNoType;
 8003f1c:	68bb      	ldr	r3, [r7, #8]
 8003f1e:	2200      	movs	r2, #0
 8003f20:	701a      	strb	r2, [r3, #0]
      TF_LITE_REPORT_ERROR(error_reporter,
 8003f22:	7bfb      	ldrb	r3, [r7, #15]
 8003f24:	461a      	mov	r2, r3
 8003f26:	4904      	ldr	r1, [pc, #16]	; (8003f38 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x118>)
 8003f28:	6878      	ldr	r0, [r7, #4]
 8003f2a:	f7ff fe37 	bl	8003b9c <_ZN6tflite13ErrorReporter6ReportEPKcz>
                           "Unsupported data type %d in tensor\n", tensor_type);
      return kTfLiteError;
 8003f2e:	2301      	movs	r3, #1
  }
}
 8003f30:	4618      	mov	r0, r3
 8003f32:	3710      	adds	r7, #16
 8003f34:	46bd      	mov	sp, r7
 8003f36:	bd80      	pop	{r7, pc}
 8003f38:	0800e258 	.word	0x0800e258

08003f3c <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>:
}

TfLiteStatus ParseFullyConnected(const Operator* op,
                                 ErrorReporter* error_reporter,
                                 BuiltinDataAllocator* allocator,
                                 void** builtin_data) {
 8003f3c:	b5b0      	push	{r4, r5, r7, lr}
 8003f3e:	b08a      	sub	sp, #40	; 0x28
 8003f40:	af02      	add	r7, sp, #8
 8003f42:	60f8      	str	r0, [r7, #12]
 8003f44:	60b9      	str	r1, [r7, #8]
 8003f46:	607a      	str	r2, [r7, #4]
 8003f48:	603b      	str	r3, [r7, #0]
  CheckParsePointerParams(op, error_reporter, allocator, builtin_data);
 8003f4a:	683b      	ldr	r3, [r7, #0]
 8003f4c:	687a      	ldr	r2, [r7, #4]
 8003f4e:	68b9      	ldr	r1, [r7, #8]
 8003f50:	68f8      	ldr	r0, [r7, #12]
 8003f52:	f7ff ff19 	bl	8003d88 <_ZN6tflite12_GLOBAL__N_123CheckParsePointerParamsEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>

  SafeBuiltinDataAllocator safe_allocator(allocator);
 8003f56:	f107 0318 	add.w	r3, r7, #24
 8003f5a:	6879      	ldr	r1, [r7, #4]
 8003f5c:	4618      	mov	r0, r3
 8003f5e:	f7ff ff04 	bl	8003d6a <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocatorC1EPNS_20BuiltinDataAllocatorE>

  std::unique_ptr<TfLiteFullyConnectedParams,
                  SafeBuiltinDataAllocator::BuiltinDataDeleter>
      params = safe_allocator.Allocate<TfLiteFullyConnectedParams>();
 8003f62:	f107 0310 	add.w	r3, r7, #16
 8003f66:	f107 0218 	add.w	r2, r7, #24
 8003f6a:	4611      	mov	r1, r2
 8003f6c:	4618      	mov	r0, r3
 8003f6e:	f000 f95f 	bl	8004230 <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator8AllocateI26TfLiteFullyConnectedParamsEESt10unique_ptrIT_NS1_18BuiltinDataDeleterEEv>
  TF_LITE_ENSURE(error_reporter, params != nullptr);
 8003f72:	f107 0310 	add.w	r3, r7, #16
 8003f76:	2100      	movs	r1, #0
 8003f78:	4618      	mov	r0, r3
 8003f7a:	f000 f999 	bl	80042b0 <_ZStneI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEbRKSt10unique_ptrIT_T0_EDn>
 8003f7e:	4603      	mov	r3, r0
 8003f80:	f083 0301 	eor.w	r3, r3, #1
 8003f84:	b2db      	uxtb	r3, r3
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d00c      	beq.n	8003fa4 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x68>
 8003f8a:	4b37      	ldr	r3, [pc, #220]	; (8004068 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x12c>)
 8003f8c:	9301      	str	r3, [sp, #4]
 8003f8e:	f240 531d 	movw	r3, #1309	; 0x51d
 8003f92:	9300      	str	r3, [sp, #0]
 8003f94:	4b35      	ldr	r3, [pc, #212]	; (800406c <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x130>)
 8003f96:	4a36      	ldr	r2, [pc, #216]	; (8004070 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x134>)
 8003f98:	68b9      	ldr	r1, [r7, #8]
 8003f9a:	68b8      	ldr	r0, [r7, #8]
 8003f9c:	f7ff fe17 	bl	8003bce <_ZN6tflite13ErrorReporter11ReportErrorEPvPKcz>
 8003fa0:	2401      	movs	r4, #1
 8003fa2:	e056      	b.n	8004052 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x116>

  const FullyConnectedOptions* schema_params =
      op->builtin_options_as_FullyConnectedOptions();
 8003fa4:	68f8      	ldr	r0, [r7, #12]
 8003fa6:	f7ff feaa 	bl	8003cfe <_ZNK6tflite8Operator40builtin_options_as_FullyConnectedOptionsEv>
 8003faa:	61f8      	str	r0, [r7, #28]

  if (schema_params != nullptr) {
 8003fac:	69fb      	ldr	r3, [r7, #28]
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d046      	beq.n	8004040 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x104>
    params->activation =
        ConvertActivation(schema_params->fused_activation_function());
 8003fb2:	69f8      	ldr	r0, [r7, #28]
 8003fb4:	f7ff fe3e 	bl	8003c34 <_ZNK6tflite21FullyConnectedOptions25fused_activation_functionEv>
 8003fb8:	4603      	mov	r3, r0
 8003fba:	461d      	mov	r5, r3
    params->activation =
 8003fbc:	f107 0310 	add.w	r3, r7, #16
 8003fc0:	4618      	mov	r0, r3
 8003fc2:	f000 f982 	bl	80042ca <_ZNKSt10unique_ptrI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>
 8003fc6:	4604      	mov	r4, r0
        ConvertActivation(schema_params->fused_activation_function());
 8003fc8:	4628      	mov	r0, r5
 8003fca:	f7ff fefd 	bl	8003dc8 <_ZN6tflite12_GLOBAL__N_117ConvertActivationENS_22ActivationFunctionTypeE>
 8003fce:	4603      	mov	r3, r0
    params->activation =
 8003fd0:	7023      	strb	r3, [r4, #0]
    params->keep_num_dims = schema_params->keep_num_dims();
 8003fd2:	f107 0310 	add.w	r3, r7, #16
 8003fd6:	4618      	mov	r0, r3
 8003fd8:	f000 f977 	bl	80042ca <_ZNKSt10unique_ptrI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>
 8003fdc:	4604      	mov	r4, r0
 8003fde:	69f8      	ldr	r0, [r7, #28]
 8003fe0:	f7ff fe48 	bl	8003c74 <_ZNK6tflite21FullyConnectedOptions13keep_num_dimsEv>
 8003fe4:	4603      	mov	r3, r0
 8003fe6:	70a3      	strb	r3, [r4, #2]
    params->asymmetric_quantize_inputs =
 8003fe8:	f107 0310 	add.w	r3, r7, #16
 8003fec:	4618      	mov	r0, r3
 8003fee:	f000 f96c 	bl	80042ca <_ZNKSt10unique_ptrI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>
 8003ff2:	4604      	mov	r4, r0
        schema_params->asymmetric_quantize_inputs();
 8003ff4:	69f8      	ldr	r0, [r7, #28]
 8003ff6:	f7ff fe51 	bl	8003c9c <_ZNK6tflite21FullyConnectedOptions26asymmetric_quantize_inputsEv>
 8003ffa:	4603      	mov	r3, r0
    params->asymmetric_quantize_inputs =
 8003ffc:	70e3      	strb	r3, [r4, #3]

    switch (schema_params->weights_format()) {
 8003ffe:	69f8      	ldr	r0, [r7, #28]
 8004000:	f7ff fe28 	bl	8003c54 <_ZNK6tflite21FullyConnectedOptions14weights_formatEv>
 8004004:	4603      	mov	r3, r0
 8004006:	2b00      	cmp	r3, #0
 8004008:	d002      	beq.n	8004010 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xd4>
 800400a:	2b01      	cmp	r3, #1
 800400c:	d009      	beq.n	8004022 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xe6>
 800400e:	e011      	b.n	8004034 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xf8>
      case FullyConnectedOptionsWeightsFormat_DEFAULT:
        params->weights_format = kTfLiteFullyConnectedWeightsFormatDefault;
 8004010:	f107 0310 	add.w	r3, r7, #16
 8004014:	4618      	mov	r0, r3
 8004016:	f000 f958 	bl	80042ca <_ZNKSt10unique_ptrI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>
 800401a:	4603      	mov	r3, r0
 800401c:	2200      	movs	r2, #0
 800401e:	705a      	strb	r2, [r3, #1]
        break;
 8004020:	e00e      	b.n	8004040 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x104>
      case FullyConnectedOptionsWeightsFormat_SHUFFLED4x16INT8:
        params->weights_format =
 8004022:	f107 0310 	add.w	r3, r7, #16
 8004026:	4618      	mov	r0, r3
 8004028:	f000 f94f 	bl	80042ca <_ZNKSt10unique_ptrI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>
 800402c:	4603      	mov	r3, r0
 800402e:	2201      	movs	r2, #1
 8004030:	705a      	strb	r2, [r3, #1]
            kTfLiteFullyConnectedWeightsFormatShuffled4x16Int8;
        break;
 8004032:	e005      	b.n	8004040 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x104>
      default:
        TF_LITE_REPORT_ERROR(error_reporter,
 8004034:	490f      	ldr	r1, [pc, #60]	; (8004074 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x138>)
 8004036:	68b8      	ldr	r0, [r7, #8]
 8004038:	f7ff fdb0 	bl	8003b9c <_ZN6tflite13ErrorReporter6ReportEPKcz>
                             "Unhandled fully-connected weights format.");
        return kTfLiteError;
 800403c:	2401      	movs	r4, #1
 800403e:	e008      	b.n	8004052 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x116>
    // TODO(b/157480169): We should either return kTfLiteError or fill in some
    // reasonable defaults in the params struct. We are not doing so until we
    // better undertand the ramifications of changing the legacy behavior.
  }

  *builtin_data = params.release();
 8004040:	f107 0310 	add.w	r3, r7, #16
 8004044:	4618      	mov	r0, r3
 8004046:	f000 f94c 	bl	80042e2 <_ZNSt10unique_ptrI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE7releaseEv>
 800404a:	4602      	mov	r2, r0
 800404c:	683b      	ldr	r3, [r7, #0]
 800404e:	601a      	str	r2, [r3, #0]
  return kTfLiteOk;
 8004050:	2400      	movs	r4, #0
      params = safe_allocator.Allocate<TfLiteFullyConnectedParams>();
 8004052:	f107 0310 	add.w	r3, r7, #16
 8004056:	4618      	mov	r0, r3
 8004058:	f000 f908 	bl	800426c <_ZNSt10unique_ptrI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEED1Ev>
 800405c:	4623      	mov	r3, r4
}
 800405e:	4618      	mov	r0, r3
 8004060:	3720      	adds	r7, #32
 8004062:	46bd      	mov	sp, r7
 8004064:	bdb0      	pop	{r4, r5, r7, pc}
 8004066:	bf00      	nop
 8004068:	0800e1d8 	.word	0x0800e1d8
 800406c:	0800e178 	.word	0x0800e178
 8004070:	0800e1c0 	.word	0x0800e1c0
 8004074:	0800e27c 	.word	0x0800e27c

08004078 <_ZNK11flatbuffers6VectorIcE4DataEv>:
  const uint8_t *Data() const {
 8004078:	b480      	push	{r7}
 800407a:	b083      	sub	sp, #12
 800407c:	af00      	add	r7, sp, #0
 800407e:	6078      	str	r0, [r7, #4]
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	3304      	adds	r3, #4
  }
 8004084:	4618      	mov	r0, r3
 8004086:	370c      	adds	r7, #12
 8004088:	46bd      	mov	sp, r7
 800408a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800408e:	4770      	bx	lr

08004090 <_ZN11flatbuffers10ReadScalarIhEET_PKv>:
T ReadScalar(const void *p) {
 8004090:	b580      	push	{r7, lr}
 8004092:	b082      	sub	sp, #8
 8004094:	af00      	add	r7, sp, #0
 8004096:	6078      	str	r0, [r7, #4]
  return EndianScalar(*reinterpret_cast<const T *>(p));
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	781b      	ldrb	r3, [r3, #0]
 800409c:	4618      	mov	r0, r3
 800409e:	f000 f934 	bl	800430a <_ZN11flatbuffers12EndianScalarIhEET_S1_>
 80040a2:	4603      	mov	r3, r0
}
 80040a4:	4618      	mov	r0, r3
 80040a6:	3708      	adds	r7, #8
 80040a8:	46bd      	mov	sp, r7
 80040aa:	bd80      	pop	{r7, pc}

080040ac <_ZNK11flatbuffers5Table8GetFieldIhEET_tS2_>:
  template<typename T> T GetField(voffset_t field, T defaultval) const {
 80040ac:	b580      	push	{r7, lr}
 80040ae:	b084      	sub	sp, #16
 80040b0:	af00      	add	r7, sp, #0
 80040b2:	6078      	str	r0, [r7, #4]
 80040b4:	460b      	mov	r3, r1
 80040b6:	807b      	strh	r3, [r7, #2]
 80040b8:	4613      	mov	r3, r2
 80040ba:	707b      	strb	r3, [r7, #1]
    auto field_offset = GetOptionalFieldOffset(field);
 80040bc:	887b      	ldrh	r3, [r7, #2]
 80040be:	4619      	mov	r1, r3
 80040c0:	6878      	ldr	r0, [r7, #4]
 80040c2:	f7fd f811 	bl	80010e8 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
 80040c6:	4603      	mov	r3, r0
 80040c8:	81fb      	strh	r3, [r7, #14]
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
 80040ca:	89fb      	ldrh	r3, [r7, #14]
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d007      	beq.n	80040e0 <_ZNK11flatbuffers5Table8GetFieldIhEET_tS2_+0x34>
 80040d0:	687a      	ldr	r2, [r7, #4]
 80040d2:	89fb      	ldrh	r3, [r7, #14]
 80040d4:	4413      	add	r3, r2
 80040d6:	4618      	mov	r0, r3
 80040d8:	f7ff ffda 	bl	8004090 <_ZN11flatbuffers10ReadScalarIhEET_PKv>
 80040dc:	4603      	mov	r3, r0
 80040de:	e000      	b.n	80040e2 <_ZNK11flatbuffers5Table8GetFieldIhEET_tS2_+0x36>
 80040e0:	787b      	ldrb	r3, [r7, #1]
  }
 80040e2:	4618      	mov	r0, r3
 80040e4:	3710      	adds	r7, #16
 80040e6:	46bd      	mov	sp, r7
 80040e8:	bd80      	pop	{r7, pc}

080040ea <_ZNK11flatbuffers5Table10GetPointerIPKvEET_t>:
    auto field_offset = GetOptionalFieldOffset(field);
    auto p = data_ + field_offset;
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
                        : nullptr;
  }
  template<typename P> P GetPointer(voffset_t field) const {
 80040ea:	b580      	push	{r7, lr}
 80040ec:	b082      	sub	sp, #8
 80040ee:	af00      	add	r7, sp, #0
 80040f0:	6078      	str	r0, [r7, #4]
 80040f2:	460b      	mov	r3, r1
 80040f4:	807b      	strh	r3, [r7, #2]
    return const_cast<Table *>(this)->GetPointer<P>(field);
 80040f6:	887b      	ldrh	r3, [r7, #2]
 80040f8:	4619      	mov	r1, r3
 80040fa:	6878      	ldr	r0, [r7, #4]
 80040fc:	f000 f911 	bl	8004322 <_ZN11flatbuffers5Table10GetPointerIPKvEET_t>
 8004100:	4603      	mov	r3, r0
  }
 8004102:	4618      	mov	r0, r3
 8004104:	3708      	adds	r7, #8
 8004106:	46bd      	mov	sp, r7
 8004108:	bd80      	pop	{r7, pc}

0800410a <_ZNK11flatbuffers5Table8GetFieldIlEET_tS2_>:
  template<typename T> T GetField(voffset_t field, T defaultval) const {
 800410a:	b580      	push	{r7, lr}
 800410c:	b086      	sub	sp, #24
 800410e:	af00      	add	r7, sp, #0
 8004110:	60f8      	str	r0, [r7, #12]
 8004112:	460b      	mov	r3, r1
 8004114:	607a      	str	r2, [r7, #4]
 8004116:	817b      	strh	r3, [r7, #10]
    auto field_offset = GetOptionalFieldOffset(field);
 8004118:	897b      	ldrh	r3, [r7, #10]
 800411a:	4619      	mov	r1, r3
 800411c:	68f8      	ldr	r0, [r7, #12]
 800411e:	f7fc ffe3 	bl	80010e8 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
 8004122:	4603      	mov	r3, r0
 8004124:	82fb      	strh	r3, [r7, #22]
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
 8004126:	8afb      	ldrh	r3, [r7, #22]
 8004128:	2b00      	cmp	r3, #0
 800412a:	d007      	beq.n	800413c <_ZNK11flatbuffers5Table8GetFieldIlEET_tS2_+0x32>
 800412c:	68fa      	ldr	r2, [r7, #12]
 800412e:	8afb      	ldrh	r3, [r7, #22]
 8004130:	4413      	add	r3, r2
 8004132:	4618      	mov	r0, r3
 8004134:	f7fd fcde 	bl	8001af4 <_ZN11flatbuffers10ReadScalarIlEET_PKv>
 8004138:	4603      	mov	r3, r0
 800413a:	e000      	b.n	800413e <_ZNK11flatbuffers5Table8GetFieldIlEET_tS2_+0x34>
 800413c:	687b      	ldr	r3, [r7, #4]
  }
 800413e:	4618      	mov	r0, r3
 8004140:	3718      	adds	r7, #24
 8004142:	46bd      	mov	sp, r7
 8004144:	bd80      	pop	{r7, pc}

08004146 <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorIlEEEET_t>:
  template<typename P> P GetPointer(voffset_t field) const {
 8004146:	b580      	push	{r7, lr}
 8004148:	b082      	sub	sp, #8
 800414a:	af00      	add	r7, sp, #0
 800414c:	6078      	str	r0, [r7, #4]
 800414e:	460b      	mov	r3, r1
 8004150:	807b      	strh	r3, [r7, #2]
    return const_cast<Table *>(this)->GetPointer<P>(field);
 8004152:	887b      	ldrh	r3, [r7, #2]
 8004154:	4619      	mov	r1, r3
 8004156:	6878      	ldr	r0, [r7, #4]
 8004158:	f000 f903 	bl	8004362 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIlEEEET_t>
 800415c:	4603      	mov	r3, r0
  }
 800415e:	4618      	mov	r0, r3
 8004160:	3708      	adds	r7, #8
 8004162:	46bd      	mov	sp, r7
 8004164:	bd80      	pop	{r7, pc}

08004166 <_ZNK11flatbuffers5Table8GetFieldIaEET_tS2_>:
  template<typename T> T GetField(voffset_t field, T defaultval) const {
 8004166:	b580      	push	{r7, lr}
 8004168:	b084      	sub	sp, #16
 800416a:	af00      	add	r7, sp, #0
 800416c:	6078      	str	r0, [r7, #4]
 800416e:	460b      	mov	r3, r1
 8004170:	807b      	strh	r3, [r7, #2]
 8004172:	4613      	mov	r3, r2
 8004174:	707b      	strb	r3, [r7, #1]
    auto field_offset = GetOptionalFieldOffset(field);
 8004176:	887b      	ldrh	r3, [r7, #2]
 8004178:	4619      	mov	r1, r3
 800417a:	6878      	ldr	r0, [r7, #4]
 800417c:	f7fc ffb4 	bl	80010e8 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
 8004180:	4603      	mov	r3, r0
 8004182:	81fb      	strh	r3, [r7, #14]
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
 8004184:	89fb      	ldrh	r3, [r7, #14]
 8004186:	2b00      	cmp	r3, #0
 8004188:	d007      	beq.n	800419a <_ZNK11flatbuffers5Table8GetFieldIaEET_tS2_+0x34>
 800418a:	687a      	ldr	r2, [r7, #4]
 800418c:	89fb      	ldrh	r3, [r7, #14]
 800418e:	4413      	add	r3, r2
 8004190:	4618      	mov	r0, r3
 8004192:	f000 f906 	bl	80043a2 <_ZN11flatbuffers10ReadScalarIaEET_PKv>
 8004196:	4603      	mov	r3, r0
 8004198:	e001      	b.n	800419e <_ZNK11flatbuffers5Table8GetFieldIaEET_tS2_+0x38>
 800419a:	f997 3001 	ldrsb.w	r3, [r7, #1]
  }
 800419e:	4618      	mov	r0, r3
 80041a0:	3710      	adds	r7, #16
 80041a2:	46bd      	mov	sp, r7
 80041a4:	bd80      	pop	{r7, pc}

080041a6 <_ZNK11flatbuffers5Table10GetPointerIPKNS_6StringEEET_t>:
  template<typename P> P GetPointer(voffset_t field) const {
 80041a6:	b580      	push	{r7, lr}
 80041a8:	b082      	sub	sp, #8
 80041aa:	af00      	add	r7, sp, #0
 80041ac:	6078      	str	r0, [r7, #4]
 80041ae:	460b      	mov	r3, r1
 80041b0:	807b      	strh	r3, [r7, #2]
    return const_cast<Table *>(this)->GetPointer<P>(field);
 80041b2:	887b      	ldrh	r3, [r7, #2]
 80041b4:	4619      	mov	r1, r3
 80041b6:	6878      	ldr	r0, [r7, #4]
 80041b8:	f000 f902 	bl	80043c0 <_ZN11flatbuffers5Table10GetPointerIPKNS_6StringEEET_t>
 80041bc:	4603      	mov	r3, r0
  }
 80041be:	4618      	mov	r0, r3
 80041c0:	3708      	adds	r7, #8
 80041c2:	46bd      	mov	sp, r7
 80041c4:	bd80      	pop	{r7, pc}

080041c6 <_ZNK11flatbuffers6VectorIlE4sizeEv>:
  uoffset_t size() const { return EndianScalar(length_); }
 80041c6:	b580      	push	{r7, lr}
 80041c8:	b082      	sub	sp, #8
 80041ca:	af00      	add	r7, sp, #0
 80041cc:	6078      	str	r0, [r7, #4]
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	4618      	mov	r0, r3
 80041d4:	f7fd fc67 	bl	8001aa6 <_ZN11flatbuffers12EndianScalarImEET_S1_>
 80041d8:	4603      	mov	r3, r0
 80041da:	4618      	mov	r0, r3
 80041dc:	3708      	adds	r7, #8
 80041de:	46bd      	mov	sp, r7
 80041e0:	bd80      	pop	{r7, pc}
	...

080041e4 <_ZNK11flatbuffers6VectorIlE3GetEm>:
  return_type Get(uoffset_t i) const {
 80041e4:	b580      	push	{r7, lr}
 80041e6:	b082      	sub	sp, #8
 80041e8:	af00      	add	r7, sp, #0
 80041ea:	6078      	str	r0, [r7, #4]
 80041ec:	6039      	str	r1, [r7, #0]
    FLATBUFFERS_ASSERT(i < size());
 80041ee:	6878      	ldr	r0, [r7, #4]
 80041f0:	f7ff ffe9 	bl	80041c6 <_ZNK11flatbuffers6VectorIlE4sizeEv>
 80041f4:	4602      	mov	r2, r0
 80041f6:	683b      	ldr	r3, [r7, #0]
 80041f8:	4293      	cmp	r3, r2
 80041fa:	d306      	bcc.n	800420a <_ZNK11flatbuffers6VectorIlE3GetEm+0x26>
 80041fc:	4b09      	ldr	r3, [pc, #36]	; (8004224 <_ZNK11flatbuffers6VectorIlE3GetEm+0x40>)
 80041fe:	4a0a      	ldr	r2, [pc, #40]	; (8004228 <_ZNK11flatbuffers6VectorIlE3GetEm+0x44>)
 8004200:	f44f 7183 	mov.w	r1, #262	; 0x106
 8004204:	4809      	ldr	r0, [pc, #36]	; (800422c <_ZNK11flatbuffers6VectorIlE3GetEm+0x48>)
 8004206:	f006 ff41 	bl	800b08c <__assert_func>
    return IndirectHelper<T>::Read(Data(), i);
 800420a:	6878      	ldr	r0, [r7, #4]
 800420c:	f000 f90a 	bl	8004424 <_ZNK11flatbuffers6VectorIlE4DataEv>
 8004210:	4603      	mov	r3, r0
 8004212:	6839      	ldr	r1, [r7, #0]
 8004214:	4618      	mov	r0, r3
 8004216:	f000 f8f3 	bl	8004400 <_ZN11flatbuffers14IndirectHelperIlE4ReadEPKhm>
 800421a:	4603      	mov	r3, r0
  }
 800421c:	4618      	mov	r0, r3
 800421e:	3708      	adds	r7, #8
 8004220:	46bd      	mov	sp, r7
 8004222:	bd80      	pop	{r7, pc}
 8004224:	0800e2b8 	.word	0x0800e2b8
 8004228:	0800e2c4 	.word	0x0800e2c4
 800422c:	0800e394 	.word	0x0800e394

08004230 <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator8AllocateI26TfLiteFullyConnectedParamsEESt10unique_ptrIT_NS1_18BuiltinDataDeleterEEv>:
  BuiltinDataPtr<T> Allocate() {
 8004230:	b590      	push	{r4, r7, lr}
 8004232:	b085      	sub	sp, #20
 8004234:	af00      	add	r7, sp, #0
 8004236:	6078      	str	r0, [r7, #4]
 8004238:	6039      	str	r1, [r7, #0]
    return BuiltinDataPtr<T>(allocator_->AllocatePOD<T>(),
 800423a:	683b      	ldr	r3, [r7, #0]
 800423c:	681b      	ldr	r3, [r3, #0]
                             BuiltinDataDeleter(allocator_));
 800423e:	4618      	mov	r0, r3
 8004240:	f000 f907 	bl	8004452 <_ZN6tflite20BuiltinDataAllocator11AllocatePODI26TfLiteFullyConnectedParamsEEPT_v>
 8004244:	4604      	mov	r4, r0
 8004246:	683b      	ldr	r3, [r7, #0]
 8004248:	681a      	ldr	r2, [r3, #0]
 800424a:	f107 030c 	add.w	r3, r7, #12
 800424e:	4611      	mov	r1, r2
 8004250:	4618      	mov	r0, r3
 8004252:	f7ff fd68 	bl	8003d26 <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterC1EPNS_20BuiltinDataAllocatorE>
 8004256:	f107 030c 	add.w	r3, r7, #12
 800425a:	461a      	mov	r2, r3
 800425c:	4621      	mov	r1, r4
 800425e:	6878      	ldr	r0, [r7, #4]
 8004260:	f000 f911 	bl	8004486 <_ZNSt10unique_ptrI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC1IS4_vEEPS0_NSt9enable_ifIXntsrSt19is_lvalue_referenceIT_E5valueEOSA_E4typeE>
  }
 8004264:	6878      	ldr	r0, [r7, #4]
 8004266:	3714      	adds	r7, #20
 8004268:	46bd      	mov	sp, r7
 800426a:	bd90      	pop	{r4, r7, pc}

0800426c <_ZNSt10unique_ptrI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEED1Ev>:
	unique_ptr(auto_ptr<_Up>&& __u) noexcept;
#pragma GCC diagnostic pop
#endif

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
 800426c:	b590      	push	{r4, r7, lr}
 800426e:	b085      	sub	sp, #20
 8004270:	af00      	add	r7, sp, #0
 8004272:	6078      	str	r0, [r7, #4]
      {
	static_assert(__is_invocable<deleter_type&, pointer>::value,
		      "unique_ptr's deleter must be invocable with a pointer");
	auto& __ptr = _M_t._M_ptr();
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	4618      	mov	r0, r3
 8004278:	f000 f91a 	bl	80044b0 <_ZNSt15__uniq_ptr_implI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>
 800427c:	60f8      	str	r0, [r7, #12]
	if (__ptr != nullptr)
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	2b00      	cmp	r3, #0
 8004284:	d00c      	beq.n	80042a0 <_ZNSt10unique_ptrI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEED1Ev+0x34>
	  get_deleter()(std::move(__ptr));
 8004286:	6878      	ldr	r0, [r7, #4]
 8004288:	f000 f91f 	bl	80044ca <_ZNSt10unique_ptrI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE11get_deleterEv>
 800428c:	4604      	mov	r4, r0
 800428e:	68f8      	ldr	r0, [r7, #12]
 8004290:	f000 f928 	bl	80044e4 <_ZSt4moveIRP26TfLiteFullyConnectedParamsEONSt16remove_referenceIT_E4typeEOS4_>
 8004294:	4603      	mov	r3, r0
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	4619      	mov	r1, r3
 800429a:	4620      	mov	r0, r4
 800429c:	f7ff fd52 	bl	8003d44 <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterclEPv>
	__ptr = pointer();
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	2200      	movs	r2, #0
 80042a4:	601a      	str	r2, [r3, #0]
      }
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	4618      	mov	r0, r3
 80042aa:	3714      	adds	r7, #20
 80042ac:	46bd      	mov	sp, r7
 80042ae:	bd90      	pop	{r4, r7, pc}

080042b0 <_ZStneI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEbRKSt10unique_ptrIT_T0_EDn>:
	       const unique_ptr<_Up, _Ep>& __y)
    { return __x.get() != __y.get(); }

  template<typename _Tp, typename _Dp>
    _GLIBCXX_NODISCARD inline bool
    operator!=(const unique_ptr<_Tp, _Dp>& __x, nullptr_t) noexcept
 80042b0:	b580      	push	{r7, lr}
 80042b2:	b082      	sub	sp, #8
 80042b4:	af00      	add	r7, sp, #0
 80042b6:	6078      	str	r0, [r7, #4]
 80042b8:	6039      	str	r1, [r7, #0]
    { return (bool)__x; }
 80042ba:	6878      	ldr	r0, [r7, #4]
 80042bc:	f000 f933 	bl	8004526 <_ZNKSt10unique_ptrI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEcvbEv>
 80042c0:	4603      	mov	r3, r0
 80042c2:	4618      	mov	r0, r3
 80042c4:	3708      	adds	r7, #8
 80042c6:	46bd      	mov	sp, r7
 80042c8:	bd80      	pop	{r7, pc}

080042ca <_ZNKSt10unique_ptrI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>:
      operator->() const noexcept
 80042ca:	b580      	push	{r7, lr}
 80042cc:	b082      	sub	sp, #8
 80042ce:	af00      	add	r7, sp, #0
 80042d0:	6078      	str	r0, [r7, #4]
	return get();
 80042d2:	6878      	ldr	r0, [r7, #4]
 80042d4:	f000 f938 	bl	8004548 <_ZNKSt10unique_ptrI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE3getEv>
 80042d8:	4603      	mov	r3, r0
      }
 80042da:	4618      	mov	r0, r3
 80042dc:	3708      	adds	r7, #8
 80042de:	46bd      	mov	sp, r7
 80042e0:	bd80      	pop	{r7, pc}

080042e2 <_ZNSt10unique_ptrI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE7releaseEv>:
      release() noexcept
 80042e2:	b580      	push	{r7, lr}
 80042e4:	b084      	sub	sp, #16
 80042e6:	af00      	add	r7, sp, #0
 80042e8:	6078      	str	r0, [r7, #4]
	pointer __p = get();
 80042ea:	6878      	ldr	r0, [r7, #4]
 80042ec:	f000 f92c 	bl	8004548 <_ZNKSt10unique_ptrI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE3getEv>
 80042f0:	60f8      	str	r0, [r7, #12]
	_M_t._M_ptr() = pointer();
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	4618      	mov	r0, r3
 80042f6:	f000 f8db 	bl	80044b0 <_ZNSt15__uniq_ptr_implI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>
 80042fa:	4603      	mov	r3, r0
 80042fc:	2200      	movs	r2, #0
 80042fe:	601a      	str	r2, [r3, #0]
	return __p;
 8004300:	68fb      	ldr	r3, [r7, #12]
      }
 8004302:	4618      	mov	r0, r3
 8004304:	3710      	adds	r7, #16
 8004306:	46bd      	mov	sp, r7
 8004308:	bd80      	pop	{r7, pc}

0800430a <_ZN11flatbuffers12EndianScalarIhEET_S1_>:
template<typename T> T EndianScalar(T t) {
 800430a:	b480      	push	{r7}
 800430c:	b083      	sub	sp, #12
 800430e:	af00      	add	r7, sp, #0
 8004310:	4603      	mov	r3, r0
 8004312:	71fb      	strb	r3, [r7, #7]
    return t;
 8004314:	79fb      	ldrb	r3, [r7, #7]
}
 8004316:	4618      	mov	r0, r3
 8004318:	370c      	adds	r7, #12
 800431a:	46bd      	mov	sp, r7
 800431c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004320:	4770      	bx	lr

08004322 <_ZN11flatbuffers5Table10GetPointerIPKvEET_t>:
  template<typename P> P GetPointer(voffset_t field) {
 8004322:	b580      	push	{r7, lr}
 8004324:	b084      	sub	sp, #16
 8004326:	af00      	add	r7, sp, #0
 8004328:	6078      	str	r0, [r7, #4]
 800432a:	460b      	mov	r3, r1
 800432c:	807b      	strh	r3, [r7, #2]
    auto field_offset = GetOptionalFieldOffset(field);
 800432e:	887b      	ldrh	r3, [r7, #2]
 8004330:	4619      	mov	r1, r3
 8004332:	6878      	ldr	r0, [r7, #4]
 8004334:	f7fc fed8 	bl	80010e8 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
 8004338:	4603      	mov	r3, r0
 800433a:	81fb      	strh	r3, [r7, #14]
    auto p = data_ + field_offset;
 800433c:	687a      	ldr	r2, [r7, #4]
 800433e:	89fb      	ldrh	r3, [r7, #14]
 8004340:	4413      	add	r3, r2
 8004342:	60bb      	str	r3, [r7, #8]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 8004344:	89fb      	ldrh	r3, [r7, #14]
 8004346:	2b00      	cmp	r3, #0
 8004348:	d006      	beq.n	8004358 <_ZN11flatbuffers5Table10GetPointerIPKvEET_t+0x36>
 800434a:	68b8      	ldr	r0, [r7, #8]
 800434c:	f7fd fbc4 	bl	8001ad8 <_ZN11flatbuffers10ReadScalarImEET_PKv>
 8004350:	4602      	mov	r2, r0
 8004352:	68bb      	ldr	r3, [r7, #8]
 8004354:	4413      	add	r3, r2
                        : nullptr;
 8004356:	e000      	b.n	800435a <_ZN11flatbuffers5Table10GetPointerIPKvEET_t+0x38>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 8004358:	2300      	movs	r3, #0
  }
 800435a:	4618      	mov	r0, r3
 800435c:	3710      	adds	r7, #16
 800435e:	46bd      	mov	sp, r7
 8004360:	bd80      	pop	{r7, pc}

08004362 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIlEEEET_t>:
  template<typename P> P GetPointer(voffset_t field) {
 8004362:	b580      	push	{r7, lr}
 8004364:	b084      	sub	sp, #16
 8004366:	af00      	add	r7, sp, #0
 8004368:	6078      	str	r0, [r7, #4]
 800436a:	460b      	mov	r3, r1
 800436c:	807b      	strh	r3, [r7, #2]
    auto field_offset = GetOptionalFieldOffset(field);
 800436e:	887b      	ldrh	r3, [r7, #2]
 8004370:	4619      	mov	r1, r3
 8004372:	6878      	ldr	r0, [r7, #4]
 8004374:	f7fc feb8 	bl	80010e8 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
 8004378:	4603      	mov	r3, r0
 800437a:	81fb      	strh	r3, [r7, #14]
    auto p = data_ + field_offset;
 800437c:	687a      	ldr	r2, [r7, #4]
 800437e:	89fb      	ldrh	r3, [r7, #14]
 8004380:	4413      	add	r3, r2
 8004382:	60bb      	str	r3, [r7, #8]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 8004384:	89fb      	ldrh	r3, [r7, #14]
 8004386:	2b00      	cmp	r3, #0
 8004388:	d006      	beq.n	8004398 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIlEEEET_t+0x36>
 800438a:	68b8      	ldr	r0, [r7, #8]
 800438c:	f7fd fba4 	bl	8001ad8 <_ZN11flatbuffers10ReadScalarImEET_PKv>
 8004390:	4602      	mov	r2, r0
 8004392:	68bb      	ldr	r3, [r7, #8]
 8004394:	4413      	add	r3, r2
                        : nullptr;
 8004396:	e000      	b.n	800439a <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIlEEEET_t+0x38>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 8004398:	2300      	movs	r3, #0
  }
 800439a:	4618      	mov	r0, r3
 800439c:	3710      	adds	r7, #16
 800439e:	46bd      	mov	sp, r7
 80043a0:	bd80      	pop	{r7, pc}

080043a2 <_ZN11flatbuffers10ReadScalarIaEET_PKv>:
T ReadScalar(const void *p) {
 80043a2:	b580      	push	{r7, lr}
 80043a4:	b082      	sub	sp, #8
 80043a6:	af00      	add	r7, sp, #0
 80043a8:	6078      	str	r0, [r7, #4]
  return EndianScalar(*reinterpret_cast<const T *>(p));
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	f993 3000 	ldrsb.w	r3, [r3]
 80043b0:	4618      	mov	r0, r3
 80043b2:	f000 f8d6 	bl	8004562 <_ZN11flatbuffers12EndianScalarIaEET_S1_>
 80043b6:	4603      	mov	r3, r0
}
 80043b8:	4618      	mov	r0, r3
 80043ba:	3708      	adds	r7, #8
 80043bc:	46bd      	mov	sp, r7
 80043be:	bd80      	pop	{r7, pc}

080043c0 <_ZN11flatbuffers5Table10GetPointerIPKNS_6StringEEET_t>:
  template<typename P> P GetPointer(voffset_t field) {
 80043c0:	b580      	push	{r7, lr}
 80043c2:	b084      	sub	sp, #16
 80043c4:	af00      	add	r7, sp, #0
 80043c6:	6078      	str	r0, [r7, #4]
 80043c8:	460b      	mov	r3, r1
 80043ca:	807b      	strh	r3, [r7, #2]
    auto field_offset = GetOptionalFieldOffset(field);
 80043cc:	887b      	ldrh	r3, [r7, #2]
 80043ce:	4619      	mov	r1, r3
 80043d0:	6878      	ldr	r0, [r7, #4]
 80043d2:	f7fc fe89 	bl	80010e8 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
 80043d6:	4603      	mov	r3, r0
 80043d8:	81fb      	strh	r3, [r7, #14]
    auto p = data_ + field_offset;
 80043da:	687a      	ldr	r2, [r7, #4]
 80043dc:	89fb      	ldrh	r3, [r7, #14]
 80043de:	4413      	add	r3, r2
 80043e0:	60bb      	str	r3, [r7, #8]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 80043e2:	89fb      	ldrh	r3, [r7, #14]
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d006      	beq.n	80043f6 <_ZN11flatbuffers5Table10GetPointerIPKNS_6StringEEET_t+0x36>
 80043e8:	68b8      	ldr	r0, [r7, #8]
 80043ea:	f7fd fb75 	bl	8001ad8 <_ZN11flatbuffers10ReadScalarImEET_PKv>
 80043ee:	4602      	mov	r2, r0
 80043f0:	68bb      	ldr	r3, [r7, #8]
 80043f2:	4413      	add	r3, r2
                        : nullptr;
 80043f4:	e000      	b.n	80043f8 <_ZN11flatbuffers5Table10GetPointerIPKNS_6StringEEET_t+0x38>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 80043f6:	2300      	movs	r3, #0
  }
 80043f8:	4618      	mov	r0, r3
 80043fa:	3710      	adds	r7, #16
 80043fc:	46bd      	mov	sp, r7
 80043fe:	bd80      	pop	{r7, pc}

08004400 <_ZN11flatbuffers14IndirectHelperIlE4ReadEPKhm>:
  static return_type Read(const uint8_t *p, uoffset_t i) {
 8004400:	b580      	push	{r7, lr}
 8004402:	b082      	sub	sp, #8
 8004404:	af00      	add	r7, sp, #0
 8004406:	6078      	str	r0, [r7, #4]
 8004408:	6039      	str	r1, [r7, #0]
    return EndianScalar((reinterpret_cast<const T *>(p))[i]);
 800440a:	683b      	ldr	r3, [r7, #0]
 800440c:	009b      	lsls	r3, r3, #2
 800440e:	687a      	ldr	r2, [r7, #4]
 8004410:	4413      	add	r3, r2
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	4618      	mov	r0, r3
 8004416:	f7fd fc05 	bl	8001c24 <_ZN11flatbuffers12EndianScalarIlEET_S1_>
 800441a:	4603      	mov	r3, r0
  }
 800441c:	4618      	mov	r0, r3
 800441e:	3708      	adds	r7, #8
 8004420:	46bd      	mov	sp, r7
 8004422:	bd80      	pop	{r7, pc}

08004424 <_ZNK11flatbuffers6VectorIlE4DataEv>:
  const uint8_t *Data() const {
 8004424:	b480      	push	{r7}
 8004426:	b083      	sub	sp, #12
 8004428:	af00      	add	r7, sp, #0
 800442a:	6078      	str	r0, [r7, #4]
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	3304      	adds	r3, #4
  }
 8004430:	4618      	mov	r0, r3
 8004432:	370c      	adds	r7, #12
 8004434:	46bd      	mov	sp, r7
 8004436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800443a:	4770      	bx	lr

0800443c <_ZSt7forwardIN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEOT_RNSt16remove_referenceIS4_E4typeE>:
   *
   *  This function is used to implement "perfect forwarding".
   */
  template<typename _Tp>
    constexpr _Tp&&
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800443c:	b480      	push	{r7}
 800443e:	b083      	sub	sp, #12
 8004440:	af00      	add	r7, sp, #0
 8004442:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	4618      	mov	r0, r3
 8004448:	370c      	adds	r7, #12
 800444a:	46bd      	mov	sp, r7
 800444c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004450:	4770      	bx	lr

08004452 <_ZN6tflite20BuiltinDataAllocator11AllocatePODI26TfLiteFullyConnectedParamsEEPT_v>:
  // Allocate a structure, but make sure it is a POD structure that doesn't
  // require constructors to run. The reason we do this, is that Interpreter's C
  // extension part will take ownership so destructors  will not be run during
  // deallocation.
  template <typename T>
  T* AllocatePOD() {
 8004452:	b580      	push	{r7, lr}
 8004454:	b084      	sub	sp, #16
 8004456:	af00      	add	r7, sp, #0
 8004458:	6078      	str	r0, [r7, #4]
    // TODO(b/154346074): Change this to is_trivially_destructible when all
    // platform targets support that properly.
    static_assert(std::is_pod<T>::value, "Builtin data structure must be POD.");
    void* allocated_memory = this->Allocate(sizeof(T), alignof(T));
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	2201      	movs	r2, #1
 8004462:	2104      	movs	r1, #4
 8004464:	6878      	ldr	r0, [r7, #4]
 8004466:	4798      	blx	r3
 8004468:	60f8      	str	r0, [r7, #12]
    return new (allocated_memory) T();
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	4619      	mov	r1, r3
 800446e:	2004      	movs	r0, #4
 8004470:	f7ff fbc7 	bl	8003c02 <_ZnwjPv>
 8004474:	4601      	mov	r1, r0
 8004476:	460a      	mov	r2, r1
 8004478:	2300      	movs	r3, #0
 800447a:	6013      	str	r3, [r2, #0]
 800447c:	460b      	mov	r3, r1
  }
 800447e:	4618      	mov	r0, r3
 8004480:	3710      	adds	r7, #16
 8004482:	46bd      	mov	sp, r7
 8004484:	bd80      	pop	{r7, pc}

08004486 <_ZNSt10unique_ptrI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC1IS4_vEEPS0_NSt9enable_ifIXntsrSt19is_lvalue_referenceIT_E5valueEOSA_E4typeE>:
	unique_ptr(pointer __p,
 8004486:	b590      	push	{r4, r7, lr}
 8004488:	b085      	sub	sp, #20
 800448a:	af00      	add	r7, sp, #0
 800448c:	60f8      	str	r0, [r7, #12]
 800448e:	60b9      	str	r1, [r7, #8]
 8004490:	607a      	str	r2, [r7, #4]
	: _M_t(__p, std::move(__d))
 8004492:	68fc      	ldr	r4, [r7, #12]
 8004494:	6878      	ldr	r0, [r7, #4]
 8004496:	f000 f880 	bl	800459a <_ZSt4moveIRN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEONSt16remove_referenceIT_E4typeEOS6_>
 800449a:	4603      	mov	r3, r0
 800449c:	461a      	mov	r2, r3
 800449e:	68b9      	ldr	r1, [r7, #8]
 80044a0:	4620      	mov	r0, r4
 80044a2:	f000 f82a 	bl	80044fa <_ZNSt15__uniq_ptr_implI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC1IS4_EEPS0_OT_>
	{ }
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	4618      	mov	r0, r3
 80044aa:	3714      	adds	r7, #20
 80044ac:	46bd      	mov	sp, r7
 80044ae:	bd90      	pop	{r4, r7, pc}

080044b0 <_ZNSt15__uniq_ptr_implI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>:
      pointer&   _M_ptr() { return std::get<0>(_M_t); }
 80044b0:	b580      	push	{r7, lr}
 80044b2:	b082      	sub	sp, #8
 80044b4:	af00      	add	r7, sp, #0
 80044b6:	6078      	str	r0, [r7, #4]
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	4618      	mov	r0, r3
 80044bc:	f000 f878 	bl	80045b0 <_ZSt3getILj0EJP26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>
 80044c0:	4603      	mov	r3, r0
 80044c2:	4618      	mov	r0, r3
 80044c4:	3708      	adds	r7, #8
 80044c6:	46bd      	mov	sp, r7
 80044c8:	bd80      	pop	{r7, pc}

080044ca <_ZNSt10unique_ptrI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE11get_deleterEv>:
      get_deleter() noexcept
 80044ca:	b580      	push	{r7, lr}
 80044cc:	b082      	sub	sp, #8
 80044ce:	af00      	add	r7, sp, #0
 80044d0:	6078      	str	r0, [r7, #4]
      { return _M_t._M_deleter(); }
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	4618      	mov	r0, r3
 80044d6:	f000 f878 	bl	80045ca <_ZNSt15__uniq_ptr_implI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE10_M_deleterEv>
 80044da:	4603      	mov	r3, r0
 80044dc:	4618      	mov	r0, r3
 80044de:	3708      	adds	r7, #8
 80044e0:	46bd      	mov	sp, r7
 80044e2:	bd80      	pop	{r7, pc}

080044e4 <_ZSt4moveIRP26TfLiteFullyConnectedParamsEONSt16remove_referenceIT_E4typeEOS4_>:
   *  @param  __t  A thing of arbitrary type.
   *  @return The parameter cast to an rvalue-reference to allow moving it.
  */
  template<typename _Tp>
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
 80044e4:	b480      	push	{r7}
 80044e6:	b083      	sub	sp, #12
 80044e8:	af00      	add	r7, sp, #0
 80044ea:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	4618      	mov	r0, r3
 80044f0:	370c      	adds	r7, #12
 80044f2:	46bd      	mov	sp, r7
 80044f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f8:	4770      	bx	lr

080044fa <_ZNSt15__uniq_ptr_implI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC1IS4_EEPS0_OT_>:
      __uniq_ptr_impl(pointer __p, _Del&& __d)
 80044fa:	b590      	push	{r4, r7, lr}
 80044fc:	b085      	sub	sp, #20
 80044fe:	af00      	add	r7, sp, #0
 8004500:	60f8      	str	r0, [r7, #12]
 8004502:	60b9      	str	r1, [r7, #8]
 8004504:	607a      	str	r2, [r7, #4]
	: _M_t(__p, std::forward<_Del>(__d)) { }
 8004506:	68fc      	ldr	r4, [r7, #12]
 8004508:	6878      	ldr	r0, [r7, #4]
 800450a:	f7ff ff97 	bl	800443c <_ZSt7forwardIN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEOT_RNSt16remove_referenceIS4_E4typeE>
 800450e:	4602      	mov	r2, r0
 8004510:	f107 0308 	add.w	r3, r7, #8
 8004514:	4619      	mov	r1, r3
 8004516:	4620      	mov	r0, r4
 8004518:	f000 f864 	bl	80045e4 <_ZNSt5tupleIJP26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC1IRS1_S5_Lb1EEEOT_OT0_>
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	4618      	mov	r0, r3
 8004520:	3714      	adds	r7, #20
 8004522:	46bd      	mov	sp, r7
 8004524:	bd90      	pop	{r4, r7, pc}

08004526 <_ZNKSt10unique_ptrI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEcvbEv>:
      explicit operator bool() const noexcept
 8004526:	b580      	push	{r7, lr}
 8004528:	b082      	sub	sp, #8
 800452a:	af00      	add	r7, sp, #0
 800452c:	6078      	str	r0, [r7, #4]
      { return get() == pointer() ? false : true; }
 800452e:	6878      	ldr	r0, [r7, #4]
 8004530:	f000 f80a 	bl	8004548 <_ZNKSt10unique_ptrI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE3getEv>
 8004534:	4603      	mov	r3, r0
 8004536:	2b00      	cmp	r3, #0
 8004538:	bf14      	ite	ne
 800453a:	2301      	movne	r3, #1
 800453c:	2300      	moveq	r3, #0
 800453e:	b2db      	uxtb	r3, r3
 8004540:	4618      	mov	r0, r3
 8004542:	3708      	adds	r7, #8
 8004544:	46bd      	mov	sp, r7
 8004546:	bd80      	pop	{r7, pc}

08004548 <_ZNKSt10unique_ptrI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE3getEv>:
      get() const noexcept
 8004548:	b580      	push	{r7, lr}
 800454a:	b082      	sub	sp, #8
 800454c:	af00      	add	r7, sp, #0
 800454e:	6078      	str	r0, [r7, #4]
      { return _M_t._M_ptr(); }
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	4618      	mov	r0, r3
 8004554:	f000 f85f 	bl	8004616 <_ZNKSt15__uniq_ptr_implI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>
 8004558:	4603      	mov	r3, r0
 800455a:	4618      	mov	r0, r3
 800455c:	3708      	adds	r7, #8
 800455e:	46bd      	mov	sp, r7
 8004560:	bd80      	pop	{r7, pc}

08004562 <_ZN11flatbuffers12EndianScalarIaEET_S1_>:
template<typename T> T EndianScalar(T t) {
 8004562:	b480      	push	{r7}
 8004564:	b083      	sub	sp, #12
 8004566:	af00      	add	r7, sp, #0
 8004568:	4603      	mov	r3, r0
 800456a:	71fb      	strb	r3, [r7, #7]
    return t;
 800456c:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 8004570:	4618      	mov	r0, r3
 8004572:	370c      	adds	r7, #12
 8004574:	46bd      	mov	sp, r7
 8004576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800457a:	4770      	bx	lr

0800457c <_ZN11flatbuffers12EndianScalarIfEET_S1_>:
template<typename T> T EndianScalar(T t) {
 800457c:	b480      	push	{r7}
 800457e:	b083      	sub	sp, #12
 8004580:	af00      	add	r7, sp, #0
 8004582:	ed87 0a01 	vstr	s0, [r7, #4]
    return t;
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	ee07 3a90 	vmov	s15, r3
}
 800458c:	eeb0 0a67 	vmov.f32	s0, s15
 8004590:	370c      	adds	r7, #12
 8004592:	46bd      	mov	sp, r7
 8004594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004598:	4770      	bx	lr

0800459a <_ZSt4moveIRN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEONSt16remove_referenceIT_E4typeEOS6_>:
    move(_Tp&& __t) noexcept
 800459a:	b480      	push	{r7}
 800459c:	b083      	sub	sp, #12
 800459e:	af00      	add	r7, sp, #0
 80045a0:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	4618      	mov	r0, r3
 80045a6:	370c      	adds	r7, #12
 80045a8:	46bd      	mov	sp, r7
 80045aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ae:	4770      	bx	lr

080045b0 <_ZSt3getILj0EJP26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>:
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }

  /// Return a reference to the ith element of a tuple.
  template<std::size_t __i, typename... _Elements>
    constexpr __tuple_element_t<__i, tuple<_Elements...>>&
    get(tuple<_Elements...>& __t) noexcept
 80045b0:	b580      	push	{r7, lr}
 80045b2:	b082      	sub	sp, #8
 80045b4:	af00      	add	r7, sp, #0
 80045b6:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	4618      	mov	r0, r3
 80045bc:	f000 f839 	bl	8004632 <_ZSt12__get_helperILj0EP26TfLiteFullyConnectedParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERT0_RSt11_Tuple_implIXT_EJS6_DpT1_EE>
 80045c0:	4603      	mov	r3, r0
 80045c2:	4618      	mov	r0, r3
 80045c4:	3708      	adds	r7, #8
 80045c6:	46bd      	mov	sp, r7
 80045c8:	bd80      	pop	{r7, pc}

080045ca <_ZNSt15__uniq_ptr_implI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE10_M_deleterEv>:
      _Dp&       _M_deleter() { return std::get<1>(_M_t); }
 80045ca:	b580      	push	{r7, lr}
 80045cc:	b082      	sub	sp, #8
 80045ce:	af00      	add	r7, sp, #0
 80045d0:	6078      	str	r0, [r7, #4]
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	4618      	mov	r0, r3
 80045d6:	f000 f838 	bl	800464a <_ZSt3getILj1EJP26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>
 80045da:	4603      	mov	r3, r0
 80045dc:	4618      	mov	r0, r3
 80045de:	3708      	adds	r7, #8
 80045e0:	46bd      	mov	sp, r7
 80045e2:	bd80      	pop	{r7, pc}

080045e4 <_ZNSt5tupleIJP26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC1IRS1_S5_Lb1EEEOT_OT0_>:
        constexpr tuple(_U1&& __a1, _U2&& __a2)
 80045e4:	b5b0      	push	{r4, r5, r7, lr}
 80045e6:	b084      	sub	sp, #16
 80045e8:	af00      	add	r7, sp, #0
 80045ea:	60f8      	str	r0, [r7, #12]
 80045ec:	60b9      	str	r1, [r7, #8]
 80045ee:	607a      	str	r2, [r7, #4]
	: _Inherited(std::forward<_U1>(__a1), std::forward<_U2>(__a2)) { }
 80045f0:	68fc      	ldr	r4, [r7, #12]
 80045f2:	68b8      	ldr	r0, [r7, #8]
 80045f4:	f000 f836 	bl	8004664 <_ZSt7forwardIRP26TfLiteFullyConnectedParamsEOT_RNSt16remove_referenceIS3_E4typeE>
 80045f8:	4605      	mov	r5, r0
 80045fa:	6878      	ldr	r0, [r7, #4]
 80045fc:	f7ff ff1e 	bl	800443c <_ZSt7forwardIN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEOT_RNSt16remove_referenceIS4_E4typeE>
 8004600:	4603      	mov	r3, r0
 8004602:	461a      	mov	r2, r3
 8004604:	4629      	mov	r1, r5
 8004606:	4620      	mov	r0, r4
 8004608:	f000 f837 	bl	800467a <_ZNSt11_Tuple_implILj0EJP26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC2IRS1_JS5_EvEEOT_DpOT0_>
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	4618      	mov	r0, r3
 8004610:	3710      	adds	r7, #16
 8004612:	46bd      	mov	sp, r7
 8004614:	bdb0      	pop	{r4, r5, r7, pc}

08004616 <_ZNKSt15__uniq_ptr_implI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>:
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
 8004616:	b580      	push	{r7, lr}
 8004618:	b082      	sub	sp, #8
 800461a:	af00      	add	r7, sp, #0
 800461c:	6078      	str	r0, [r7, #4]
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	4618      	mov	r0, r3
 8004622:	f000 f848 	bl	80046b6 <_ZSt3getILj0EJP26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKSA_>
 8004626:	4603      	mov	r3, r0
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	4618      	mov	r0, r3
 800462c:	3708      	adds	r7, #8
 800462e:	46bd      	mov	sp, r7
 8004630:	bd80      	pop	{r7, pc}

08004632 <_ZSt12__get_helperILj0EP26TfLiteFullyConnectedParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERT0_RSt11_Tuple_implIXT_EJS6_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8004632:	b580      	push	{r7, lr}
 8004634:	b082      	sub	sp, #8
 8004636:	af00      	add	r7, sp, #0
 8004638:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 800463a:	6878      	ldr	r0, [r7, #4]
 800463c:	f000 f867 	bl	800470e <_ZNSt11_Tuple_implILj0EJP26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERS6_>
 8004640:	4603      	mov	r3, r0
 8004642:	4618      	mov	r0, r3
 8004644:	3708      	adds	r7, #8
 8004646:	46bd      	mov	sp, r7
 8004648:	bd80      	pop	{r7, pc}

0800464a <_ZSt3getILj1EJP26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>:
    get(tuple<_Elements...>& __t) noexcept
 800464a:	b580      	push	{r7, lr}
 800464c:	b082      	sub	sp, #8
 800464e:	af00      	add	r7, sp, #0
 8004650:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	4618      	mov	r0, r3
 8004656:	f000 f83b 	bl	80046d0 <_ZSt12__get_helperILj1EN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEJEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>
 800465a:	4603      	mov	r3, r0
 800465c:	4618      	mov	r0, r3
 800465e:	3708      	adds	r7, #8
 8004660:	46bd      	mov	sp, r7
 8004662:	bd80      	pop	{r7, pc}

08004664 <_ZSt7forwardIRP26TfLiteFullyConnectedParamsEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8004664:	b480      	push	{r7}
 8004666:	b083      	sub	sp, #12
 8004668:	af00      	add	r7, sp, #0
 800466a:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	4618      	mov	r0, r3
 8004670:	370c      	adds	r7, #12
 8004672:	46bd      	mov	sp, r7
 8004674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004678:	4770      	bx	lr

0800467a <_ZNSt11_Tuple_implILj0EJP26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC2IRS1_JS5_EvEEOT_DpOT0_>:
        constexpr _Tuple_impl(_UHead&& __head, _UTail&&... __tail)
 800467a:	b590      	push	{r4, r7, lr}
 800467c:	b085      	sub	sp, #20
 800467e:	af00      	add	r7, sp, #0
 8004680:	60f8      	str	r0, [r7, #12]
 8004682:	60b9      	str	r1, [r7, #8]
 8004684:	607a      	str	r2, [r7, #4]
	  _Base(std::forward<_UHead>(__head)) { }
 8004686:	68fc      	ldr	r4, [r7, #12]
 8004688:	6878      	ldr	r0, [r7, #4]
 800468a:	f7ff fed7 	bl	800443c <_ZSt7forwardIN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEOT_RNSt16remove_referenceIS4_E4typeE>
 800468e:	4603      	mov	r3, r0
 8004690:	4619      	mov	r1, r3
 8004692:	4620      	mov	r0, r4
 8004694:	f000 f828 	bl	80046e8 <_ZNSt11_Tuple_implILj1EJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC2IS3_EEOT_>
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	1d1c      	adds	r4, r3, #4
 800469c:	68b8      	ldr	r0, [r7, #8]
 800469e:	f7ff ffe1 	bl	8004664 <_ZSt7forwardIRP26TfLiteFullyConnectedParamsEOT_RNSt16remove_referenceIS3_E4typeE>
 80046a2:	4603      	mov	r3, r0
 80046a4:	4619      	mov	r1, r3
 80046a6:	4620      	mov	r0, r4
 80046a8:	f000 f83f 	bl	800472a <_ZNSt10_Head_baseILj0EP26TfLiteFullyConnectedParamsLb0EEC1IRS1_EEOT_>
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	4618      	mov	r0, r3
 80046b0:	3714      	adds	r7, #20
 80046b2:	46bd      	mov	sp, r7
 80046b4:	bd90      	pop	{r4, r7, pc}

080046b6 <_ZSt3getILj0EJP26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKSA_>:

  /// Return a const reference to the ith element of a const tuple.
  template<std::size_t __i, typename... _Elements>
    constexpr const __tuple_element_t<__i, tuple<_Elements...>>&
    get(const tuple<_Elements...>& __t) noexcept
 80046b6:	b580      	push	{r7, lr}
 80046b8:	b082      	sub	sp, #8
 80046ba:	af00      	add	r7, sp, #0
 80046bc:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	4618      	mov	r0, r3
 80046c2:	f000 f843 	bl	800474c <_ZSt12__get_helperILj0EP26TfLiteFullyConnectedParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKT0_RKSt11_Tuple_implIXT_EJS6_DpT1_EE>
 80046c6:	4603      	mov	r3, r0
 80046c8:	4618      	mov	r0, r3
 80046ca:	3708      	adds	r7, #8
 80046cc:	46bd      	mov	sp, r7
 80046ce:	bd80      	pop	{r7, pc}

080046d0 <_ZSt12__get_helperILj1EN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEJEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 80046d0:	b580      	push	{r7, lr}
 80046d2:	b082      	sub	sp, #8
 80046d4:	af00      	add	r7, sp, #0
 80046d6:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 80046d8:	6878      	ldr	r0, [r7, #4]
 80046da:	f000 f843 	bl	8004764 <_ZNSt11_Tuple_implILj1EJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERS4_>
 80046de:	4603      	mov	r3, r0
 80046e0:	4618      	mov	r0, r3
 80046e2:	3708      	adds	r7, #8
 80046e4:	46bd      	mov	sp, r7
 80046e6:	bd80      	pop	{r7, pc}

080046e8 <_ZNSt11_Tuple_implILj1EJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC2IS3_EEOT_>:
        constexpr _Tuple_impl(_UHead&& __head)
 80046e8:	b590      	push	{r4, r7, lr}
 80046ea:	b083      	sub	sp, #12
 80046ec:	af00      	add	r7, sp, #0
 80046ee:	6078      	str	r0, [r7, #4]
 80046f0:	6039      	str	r1, [r7, #0]
	: _Base(std::forward<_UHead>(__head)) { }
 80046f2:	687c      	ldr	r4, [r7, #4]
 80046f4:	6838      	ldr	r0, [r7, #0]
 80046f6:	f7ff fea1 	bl	800443c <_ZSt7forwardIN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEOT_RNSt16remove_referenceIS4_E4typeE>
 80046fa:	4603      	mov	r3, r0
 80046fc:	4619      	mov	r1, r3
 80046fe:	4620      	mov	r0, r4
 8004700:	f000 f83d 	bl	800477e <_ZNSt10_Head_baseILj1EN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterELb0EEC2IS3_EEOT_>
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	4618      	mov	r0, r3
 8004708:	370c      	adds	r7, #12
 800470a:	46bd      	mov	sp, r7
 800470c:	bd90      	pop	{r4, r7, pc}

0800470e <_ZNSt11_Tuple_implILj0EJP26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERS6_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 800470e:	b580      	push	{r7, lr}
 8004710:	b082      	sub	sp, #8
 8004712:	af00      	add	r7, sp, #0
 8004714:	6078      	str	r0, [r7, #4]
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	3304      	adds	r3, #4
 800471a:	4618      	mov	r0, r3
 800471c:	f000 f840 	bl	80047a0 <_ZNSt10_Head_baseILj0EP26TfLiteFullyConnectedParamsLb0EE7_M_headERS2_>
 8004720:	4603      	mov	r3, r0
 8004722:	4618      	mov	r0, r3
 8004724:	3708      	adds	r7, #8
 8004726:	46bd      	mov	sp, r7
 8004728:	bd80      	pop	{r7, pc}

0800472a <_ZNSt10_Head_baseILj0EP26TfLiteFullyConnectedParamsLb0EEC1IRS1_EEOT_>:
        constexpr _Head_base(_UHead&& __h)
 800472a:	b580      	push	{r7, lr}
 800472c:	b082      	sub	sp, #8
 800472e:	af00      	add	r7, sp, #0
 8004730:	6078      	str	r0, [r7, #4]
 8004732:	6039      	str	r1, [r7, #0]
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 8004734:	6838      	ldr	r0, [r7, #0]
 8004736:	f7ff ff95 	bl	8004664 <_ZSt7forwardIRP26TfLiteFullyConnectedParamsEOT_RNSt16remove_referenceIS3_E4typeE>
 800473a:	4603      	mov	r3, r0
 800473c:	681a      	ldr	r2, [r3, #0]
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	601a      	str	r2, [r3, #0]
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	4618      	mov	r0, r3
 8004746:	3708      	adds	r7, #8
 8004748:	46bd      	mov	sp, r7
 800474a:	bd80      	pop	{r7, pc}

0800474c <_ZSt12__get_helperILj0EP26TfLiteFullyConnectedParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKT0_RKSt11_Tuple_implIXT_EJS6_DpT1_EE>:
    __get_helper(const _Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 800474c:	b580      	push	{r7, lr}
 800474e:	b082      	sub	sp, #8
 8004750:	af00      	add	r7, sp, #0
 8004752:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8004754:	6878      	ldr	r0, [r7, #4]
 8004756:	f000 f82e 	bl	80047b6 <_ZNSt11_Tuple_implILj0EJP26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERKS6_>
 800475a:	4603      	mov	r3, r0
 800475c:	4618      	mov	r0, r3
 800475e:	3708      	adds	r7, #8
 8004760:	46bd      	mov	sp, r7
 8004762:	bd80      	pop	{r7, pc}

08004764 <_ZNSt11_Tuple_implILj1EJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERS4_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8004764:	b580      	push	{r7, lr}
 8004766:	b082      	sub	sp, #8
 8004768:	af00      	add	r7, sp, #0
 800476a:	6078      	str	r0, [r7, #4]
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	4618      	mov	r0, r3
 8004770:	f000 f82f 	bl	80047d2 <_ZNSt10_Head_baseILj1EN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterELb0EE7_M_headERS4_>
 8004774:	4603      	mov	r3, r0
 8004776:	4618      	mov	r0, r3
 8004778:	3708      	adds	r7, #8
 800477a:	46bd      	mov	sp, r7
 800477c:	bd80      	pop	{r7, pc}

0800477e <_ZNSt10_Head_baseILj1EN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterELb0EEC2IS3_EEOT_>:
        constexpr _Head_base(_UHead&& __h)
 800477e:	b580      	push	{r7, lr}
 8004780:	b082      	sub	sp, #8
 8004782:	af00      	add	r7, sp, #0
 8004784:	6078      	str	r0, [r7, #4]
 8004786:	6039      	str	r1, [r7, #0]
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 8004788:	6838      	ldr	r0, [r7, #0]
 800478a:	f7ff fe57 	bl	800443c <_ZSt7forwardIN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEOT_RNSt16remove_referenceIS4_E4typeE>
 800478e:	4602      	mov	r2, r0
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	6812      	ldr	r2, [r2, #0]
 8004794:	601a      	str	r2, [r3, #0]
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	4618      	mov	r0, r3
 800479a:	3708      	adds	r7, #8
 800479c:	46bd      	mov	sp, r7
 800479e:	bd80      	pop	{r7, pc}

080047a0 <_ZNSt10_Head_baseILj0EP26TfLiteFullyConnectedParamsLb0EE7_M_headERS2_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 80047a0:	b480      	push	{r7}
 80047a2:	b083      	sub	sp, #12
 80047a4:	af00      	add	r7, sp, #0
 80047a6:	6078      	str	r0, [r7, #4]
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	4618      	mov	r0, r3
 80047ac:	370c      	adds	r7, #12
 80047ae:	46bd      	mov	sp, r7
 80047b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b4:	4770      	bx	lr

080047b6 <_ZNSt11_Tuple_implILj0EJP26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERKS6_>:
      _M_head(const _Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 80047b6:	b580      	push	{r7, lr}
 80047b8:	b082      	sub	sp, #8
 80047ba:	af00      	add	r7, sp, #0
 80047bc:	6078      	str	r0, [r7, #4]
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	3304      	adds	r3, #4
 80047c2:	4618      	mov	r0, r3
 80047c4:	f000 f810 	bl	80047e8 <_ZNSt10_Head_baseILj0EP26TfLiteFullyConnectedParamsLb0EE7_M_headERKS2_>
 80047c8:	4603      	mov	r3, r0
 80047ca:	4618      	mov	r0, r3
 80047cc:	3708      	adds	r7, #8
 80047ce:	46bd      	mov	sp, r7
 80047d0:	bd80      	pop	{r7, pc}

080047d2 <_ZNSt10_Head_baseILj1EN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterELb0EE7_M_headERS4_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 80047d2:	b480      	push	{r7}
 80047d4:	b083      	sub	sp, #12
 80047d6:	af00      	add	r7, sp, #0
 80047d8:	6078      	str	r0, [r7, #4]
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	4618      	mov	r0, r3
 80047de:	370c      	adds	r7, #12
 80047e0:	46bd      	mov	sp, r7
 80047e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e6:	4770      	bx	lr

080047e8 <_ZNSt10_Head_baseILj0EP26TfLiteFullyConnectedParamsLb0EE7_M_headERKS2_>:
      _M_head(const _Head_base& __b) noexcept { return __b._M_head_impl; }
 80047e8:	b480      	push	{r7}
 80047ea:	b083      	sub	sp, #12
 80047ec:	af00      	add	r7, sp, #0
 80047ee:	6078      	str	r0, [r7, #4]
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	4618      	mov	r0, r3
 80047f4:	370c      	adds	r7, #12
 80047f6:	46bd      	mov	sp, r7
 80047f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047fc:	4770      	bx	lr
	...

08004800 <_ZN6tflite24EnumNamesBuiltinOperatorEv>:
inline const char * const *EnumNamesBuiltinOperator() {
 8004800:	b480      	push	{r7}
 8004802:	af00      	add	r7, sp, #0
  return names;
 8004804:	4b02      	ldr	r3, [pc, #8]	; (8004810 <_ZN6tflite24EnumNamesBuiltinOperatorEv+0x10>)
}
 8004806:	4618      	mov	r0, r3
 8004808:	46bd      	mov	sp, r7
 800480a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800480e:	4770      	bx	lr
 8004810:	08021878 	.word	0x08021878

08004814 <_ZN6tflite23EnumNameBuiltinOperatorENS_15BuiltinOperatorE>:
inline const char *EnumNameBuiltinOperator(BuiltinOperator e) {
 8004814:	b580      	push	{r7, lr}
 8004816:	b084      	sub	sp, #16
 8004818:	af00      	add	r7, sp, #0
 800481a:	4603      	mov	r3, r0
 800481c:	71fb      	strb	r3, [r7, #7]
  if (flatbuffers::IsOutRange(e, BuiltinOperator_ADD, BuiltinOperator_BROADCAST_ARGS)) return "";
 800481e:	2300      	movs	r3, #0
 8004820:	72bb      	strb	r3, [r7, #10]
 8004822:	2391      	movs	r3, #145	; 0x91
 8004824:	72fb      	strb	r3, [r7, #11]
 8004826:	f107 020b 	add.w	r2, r7, #11
 800482a:	f107 010a 	add.w	r1, r7, #10
 800482e:	1dfb      	adds	r3, r7, #7
 8004830:	4618      	mov	r0, r3
 8004832:	f000 f8a9 	bl	8004988 <_ZN11flatbuffers10IsOutRangeIN6tflite15BuiltinOperatorEEEbRKT_S5_S5_>
 8004836:	4603      	mov	r3, r0
 8004838:	2b00      	cmp	r3, #0
 800483a:	d001      	beq.n	8004840 <_ZN6tflite23EnumNameBuiltinOperatorENS_15BuiltinOperatorE+0x2c>
 800483c:	4b07      	ldr	r3, [pc, #28]	; (800485c <_ZN6tflite23EnumNameBuiltinOperatorENS_15BuiltinOperatorE+0x48>)
 800483e:	e008      	b.n	8004852 <_ZN6tflite23EnumNameBuiltinOperatorENS_15BuiltinOperatorE+0x3e>
  const size_t index = static_cast<size_t>(e);
 8004840:	79fb      	ldrb	r3, [r7, #7]
 8004842:	60fb      	str	r3, [r7, #12]
  return EnumNamesBuiltinOperator()[index];
 8004844:	f7ff ffdc 	bl	8004800 <_ZN6tflite24EnumNamesBuiltinOperatorEv>
 8004848:	4602      	mov	r2, r0
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	009b      	lsls	r3, r3, #2
 800484e:	4413      	add	r3, r2
 8004850:	681b      	ldr	r3, [r3, #0]
}
 8004852:	4618      	mov	r0, r3
 8004854:	3710      	adds	r7, #16
 8004856:	46bd      	mov	sp, r7
 8004858:	bd80      	pop	{r7, pc}
 800485a:	bf00      	nop
 800485c:	0800eb14 	.word	0x0800eb14

08004860 <_ZNK6tflite12OperatorCode11custom_codeEv>:
  const flatbuffers::String *custom_code() const {
 8004860:	b580      	push	{r7, lr}
 8004862:	b082      	sub	sp, #8
 8004864:	af00      	add	r7, sp, #0
 8004866:	6078      	str	r0, [r7, #4]
    return GetPointer<const flatbuffers::String *>(VT_CUSTOM_CODE);
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	2106      	movs	r1, #6
 800486c:	4618      	mov	r0, r3
 800486e:	f7ff fc9a 	bl	80041a6 <_ZNK11flatbuffers5Table10GetPointerIPKNS_6StringEEET_t>
 8004872:	4603      	mov	r3, r0
  }
 8004874:	4618      	mov	r0, r3
 8004876:	3708      	adds	r7, #8
 8004878:	46bd      	mov	sp, r7
 800487a:	bd80      	pop	{r7, pc}

0800487c <_ZNK6tflite12OperatorCode7versionEv>:
  int32_t version() const {
 800487c:	b580      	push	{r7, lr}
 800487e:	b082      	sub	sp, #8
 8004880:	af00      	add	r7, sp, #0
 8004882:	6078      	str	r0, [r7, #4]
    return GetField<int32_t>(VT_VERSION, 1);
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	2201      	movs	r2, #1
 8004888:	2108      	movs	r1, #8
 800488a:	4618      	mov	r0, r3
 800488c:	f7ff fc3d 	bl	800410a <_ZNK11flatbuffers5Table8GetFieldIlEET_tS2_>
 8004890:	4603      	mov	r3, r0
  }
 8004892:	4618      	mov	r0, r3
 8004894:	3708      	adds	r7, #8
 8004896:	46bd      	mov	sp, r7
 8004898:	bd80      	pop	{r7, pc}
	...

0800489c <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration>:

namespace tflite {

TfLiteStatus GetRegistrationFromOpCode(
    const OperatorCode* opcode, const OpResolver& op_resolver,
    ErrorReporter* error_reporter, const TfLiteRegistration** registration) {
 800489c:	b580      	push	{r7, lr}
 800489e:	b088      	sub	sp, #32
 80048a0:	af00      	add	r7, sp, #0
 80048a2:	60f8      	str	r0, [r7, #12]
 80048a4:	60b9      	str	r1, [r7, #8]
 80048a6:	607a      	str	r2, [r7, #4]
 80048a8:	603b      	str	r3, [r7, #0]
  TfLiteStatus status = kTfLiteOk;
 80048aa:	2300      	movs	r3, #0
 80048ac:	77fb      	strb	r3, [r7, #31]
  *registration = nullptr;
 80048ae:	683b      	ldr	r3, [r7, #0]
 80048b0:	2200      	movs	r2, #0
 80048b2:	601a      	str	r2, [r3, #0]
  auto builtin_code = GetBuiltinCode(opcode);
 80048b4:	68f8      	ldr	r0, [r7, #12]
 80048b6:	f006 fac2 	bl	800ae3e <_ZN6tflite14GetBuiltinCodeEPKNS_12OperatorCodeE>
 80048ba:	4603      	mov	r3, r0
 80048bc:	77bb      	strb	r3, [r7, #30]
  int version = opcode->version();
 80048be:	68f8      	ldr	r0, [r7, #12]
 80048c0:	f7ff ffdc 	bl	800487c <_ZNK6tflite12OperatorCode7versionEv>
 80048c4:	61b8      	str	r0, [r7, #24]

  if (builtin_code > BuiltinOperator_MAX) {
 80048c6:	7fbb      	ldrb	r3, [r7, #30]
 80048c8:	2b91      	cmp	r3, #145	; 0x91
 80048ca:	d908      	bls.n	80048de <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0x42>
    TF_LITE_REPORT_ERROR(
 80048cc:	7fbb      	ldrb	r3, [r7, #30]
 80048ce:	461a      	mov	r2, r3
 80048d0:	492a      	ldr	r1, [pc, #168]	; (800497c <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0xe0>)
 80048d2:	6878      	ldr	r0, [r7, #4]
 80048d4:	f7ff f962 	bl	8003b9c <_ZN6tflite13ErrorReporter6ReportEPKcz>
        error_reporter,
        "Op builtin_code out of range: %d. Are you using old TFLite binary "
        "with newer model?",
        builtin_code);
    status = kTfLiteError;
 80048d8:	2301      	movs	r3, #1
 80048da:	77fb      	strb	r3, [r7, #31]
 80048dc:	e048      	b.n	8004970 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0xd4>
  } else if (builtin_code != BuiltinOperator_CUSTOM) {
 80048de:	7fbb      	ldrb	r3, [r7, #30]
 80048e0:	2b20      	cmp	r3, #32
 80048e2:	d01a      	beq.n	800491a <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0x7e>
    *registration = op_resolver.FindOp(builtin_code, version);
 80048e4:	68bb      	ldr	r3, [r7, #8]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	7fb9      	ldrb	r1, [r7, #30]
 80048ec:	69ba      	ldr	r2, [r7, #24]
 80048ee:	68b8      	ldr	r0, [r7, #8]
 80048f0:	4798      	blx	r3
 80048f2:	4602      	mov	r2, r0
 80048f4:	683b      	ldr	r3, [r7, #0]
 80048f6:	601a      	str	r2, [r3, #0]
    if (*registration == nullptr) {
 80048f8:	683b      	ldr	r3, [r7, #0]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d137      	bne.n	8004970 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0xd4>
      TF_LITE_REPORT_ERROR(
 8004900:	7fbb      	ldrb	r3, [r7, #30]
 8004902:	4618      	mov	r0, r3
 8004904:	f7ff ff86 	bl	8004814 <_ZN6tflite23EnumNameBuiltinOperatorENS_15BuiltinOperatorE>
 8004908:	4602      	mov	r2, r0
 800490a:	69bb      	ldr	r3, [r7, #24]
 800490c:	491c      	ldr	r1, [pc, #112]	; (8004980 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0xe4>)
 800490e:	6878      	ldr	r0, [r7, #4]
 8004910:	f7ff f944 	bl	8003b9c <_ZN6tflite13ErrorReporter6ReportEPKcz>
          error_reporter,
          "Didn't find op for builtin opcode '%s' version '%d'. "
          "An older version of this builtin might be supported. "
          "Are you using an old TFLite binary with a newer model?\n",
          EnumNameBuiltinOperator(builtin_code), version);
      status = kTfLiteError;
 8004914:	2301      	movs	r3, #1
 8004916:	77fb      	strb	r3, [r7, #31]
 8004918:	e02a      	b.n	8004970 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0xd4>
    }
  } else if (!opcode->custom_code()) {
 800491a:	68f8      	ldr	r0, [r7, #12]
 800491c:	f7ff ffa0 	bl	8004860 <_ZNK6tflite12OperatorCode11custom_codeEv>
 8004920:	4603      	mov	r3, r0
 8004922:	2b00      	cmp	r3, #0
 8004924:	bf0c      	ite	eq
 8004926:	2301      	moveq	r3, #1
 8004928:	2300      	movne	r3, #0
 800492a:	b2db      	uxtb	r3, r3
 800492c:	2b00      	cmp	r3, #0
 800492e:	d006      	beq.n	800493e <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0xa2>
    TF_LITE_REPORT_ERROR(
 8004930:	4914      	ldr	r1, [pc, #80]	; (8004984 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0xe8>)
 8004932:	6878      	ldr	r0, [r7, #4]
 8004934:	f7ff f932 	bl	8003b9c <_ZN6tflite13ErrorReporter6ReportEPKcz>
        error_reporter,
        "Operator with CUSTOM builtin_code has no custom_code.\n");
    status = kTfLiteError;
 8004938:	2301      	movs	r3, #1
 800493a:	77fb      	strb	r3, [r7, #31]
 800493c:	e018      	b.n	8004970 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0xd4>
  } else {
    const char* name = opcode->custom_code()->c_str();
 800493e:	68f8      	ldr	r0, [r7, #12]
 8004940:	f7ff ff8e 	bl	8004860 <_ZNK6tflite12OperatorCode11custom_codeEv>
 8004944:	4603      	mov	r3, r0
 8004946:	4618      	mov	r0, r3
 8004948:	f7ff f967 	bl	8003c1a <_ZNK11flatbuffers6String5c_strEv>
 800494c:	6178      	str	r0, [r7, #20]
    *registration = op_resolver.FindOp(name, version);
 800494e:	68bb      	ldr	r3, [r7, #8]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	3304      	adds	r3, #4
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	69ba      	ldr	r2, [r7, #24]
 8004958:	6979      	ldr	r1, [r7, #20]
 800495a:	68b8      	ldr	r0, [r7, #8]
 800495c:	4798      	blx	r3
 800495e:	4602      	mov	r2, r0
 8004960:	683b      	ldr	r3, [r7, #0]
 8004962:	601a      	str	r2, [r3, #0]
    if (*registration == nullptr) {
 8004964:	683b      	ldr	r3, [r7, #0]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	2b00      	cmp	r3, #0
 800496a:	d101      	bne.n	8004970 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0xd4>
      // Do not report error for unresolved custom op, we do the final check
      // while preparing ops.
      status = kTfLiteError;
 800496c:	2301      	movs	r3, #1
 800496e:	77fb      	strb	r3, [r7, #31]
    }
  }
  return status;
 8004970:	7ffb      	ldrb	r3, [r7, #31]
}
 8004972:	4618      	mov	r0, r3
 8004974:	3720      	adds	r7, #32
 8004976:	46bd      	mov	sp, r7
 8004978:	bd80      	pop	{r7, pc}
 800497a:	bf00      	nop
 800497c:	0800eb18 	.word	0x0800eb18
 8004980:	0800eb6c 	.word	0x0800eb6c
 8004984:	0800ec10 	.word	0x0800ec10

08004988 <_ZN11flatbuffers10IsOutRangeIN6tflite15BuiltinOperatorEEEbRKT_S5_S5_>:
inline bool IsOutRange(const T &v, const T &low, const T &high) {
 8004988:	b480      	push	{r7}
 800498a:	b085      	sub	sp, #20
 800498c:	af00      	add	r7, sp, #0
 800498e:	60f8      	str	r0, [r7, #12]
 8004990:	60b9      	str	r1, [r7, #8]
 8004992:	607a      	str	r2, [r7, #4]
  return (v < low) || (high < v);
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	781a      	ldrb	r2, [r3, #0]
 8004998:	68bb      	ldr	r3, [r7, #8]
 800499a:	781b      	ldrb	r3, [r3, #0]
 800499c:	429a      	cmp	r2, r3
 800499e:	d305      	bcc.n	80049ac <_ZN11flatbuffers10IsOutRangeIN6tflite15BuiltinOperatorEEEbRKT_S5_S5_+0x24>
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	781a      	ldrb	r2, [r3, #0]
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	781b      	ldrb	r3, [r3, #0]
 80049a8:	429a      	cmp	r2, r3
 80049aa:	d201      	bcs.n	80049b0 <_ZN11flatbuffers10IsOutRangeIN6tflite15BuiltinOperatorEEEbRKT_S5_S5_+0x28>
 80049ac:	2301      	movs	r3, #1
 80049ae:	e000      	b.n	80049b2 <_ZN11flatbuffers10IsOutRangeIN6tflite15BuiltinOperatorEEEbRKT_S5_S5_+0x2a>
 80049b0:	2300      	movs	r3, #0
}
 80049b2:	4618      	mov	r0, r3
 80049b4:	3714      	adds	r7, #20
 80049b6:	46bd      	mov	sp, r7
 80049b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049bc:	4770      	bx	lr

080049be <_ZSt5roundf>:
#endif

#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO_FP
  constexpr float
  round(float __x)
  { return __builtin_roundf(__x); }
 80049be:	b580      	push	{r7, lr}
 80049c0:	b082      	sub	sp, #8
 80049c2:	af00      	add	r7, sp, #0
 80049c4:	ed87 0a01 	vstr	s0, [r7, #4]
 80049c8:	ed97 0a01 	vldr	s0, [r7, #4]
 80049cc:	f006 fb30 	bl	800b030 <roundf>
 80049d0:	eef0 7a40 	vmov.f32	s15, s0
 80049d4:	eeb0 0a67 	vmov.f32	s0, s15
 80049d8:	3708      	adds	r7, #8
 80049da:	46bd      	mov	sp, r7
 80049dc:	bd80      	pop	{r7, pc}
	...

080049e0 <_ZN6tflite18QuantizeMultiplierEdPlPi>:
constexpr uint32_t kFractionRoundingMask = 0x003fffff;
constexpr uint32_t kFractionRoundingThreshold = 0x00200000;
}  // namespace

void QuantizeMultiplier(double double_multiplier, int32_t* quantized_multiplier,
                        int* shift) {
 80049e0:	b5b0      	push	{r4, r5, r7, lr}
 80049e2:	b088      	sub	sp, #32
 80049e4:	af00      	add	r7, sp, #0
 80049e6:	ed87 0b02 	vstr	d0, [r7, #8]
 80049ea:	6078      	str	r0, [r7, #4]
 80049ec:	6039      	str	r1, [r7, #0]
  if (double_multiplier == 0.) {
 80049ee:	f04f 0200 	mov.w	r2, #0
 80049f2:	f04f 0300 	mov.w	r3, #0
 80049f6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80049fa:	f7fc f877 	bl	8000aec <__aeabi_dcmpeq>
 80049fe:	4603      	mov	r3, r0
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d006      	beq.n	8004a12 <_ZN6tflite18QuantizeMultiplierEdPlPi+0x32>
    *quantized_multiplier = 0;
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	2200      	movs	r2, #0
 8004a08:	601a      	str	r2, [r3, #0]
    *shift = 0;
 8004a0a:	683b      	ldr	r3, [r7, #0]
 8004a0c:	2200      	movs	r2, #0
 8004a0e:	601a      	str	r2, [r3, #0]
    return;
 8004a10:	e06b      	b.n	8004aea <_ZN6tflite18QuantizeMultiplierEdPlPi+0x10a>
  // example on microcontrollers) then use an alternative implementation
  // that only requires integer and bitwise operations. To enable this, you
  // need to set the define during the build process for your platform.
  int64_t q_fixed = IntegerFrExp(double_multiplier, shift);
#else   // TFLITE_EMULATE_FLOAT
  const double q = std::frexp(double_multiplier, shift);
 8004a12:	6838      	ldr	r0, [r7, #0]
 8004a14:	ed97 0b02 	vldr	d0, [r7, #8]
 8004a18:	f006 fa8c 	bl	800af34 <frexp>
 8004a1c:	ed87 0b04 	vstr	d0, [r7, #16]
  auto q_fixed = static_cast<int64_t>(TfLiteRound(q * (1ll << 31)));
 8004a20:	f04f 0200 	mov.w	r2, #0
 8004a24:	4b32      	ldr	r3, [pc, #200]	; (8004af0 <_ZN6tflite18QuantizeMultiplierEdPlPi+0x110>)
 8004a26:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8004a2a:	f7fb fdf7 	bl	800061c <__aeabi_dmul>
 8004a2e:	4602      	mov	r2, r0
 8004a30:	460b      	mov	r3, r1
 8004a32:	ec43 2b17 	vmov	d7, r2, r3
 8004a36:	eeb0 0a47 	vmov.f32	s0, s14
 8004a3a:	eef0 0a67 	vmov.f32	s1, s15
 8004a3e:	f000 f88b 	bl	8004b58 <_ZN6tflite11TfLiteRoundIdEET_S1_>
 8004a42:	ec53 2b10 	vmov	r2, r3, d0
 8004a46:	4610      	mov	r0, r2
 8004a48:	4619      	mov	r1, r3
 8004a4a:	f7fc f927 	bl	8000c9c <__aeabi_d2lz>
 8004a4e:	4602      	mov	r2, r0
 8004a50:	460b      	mov	r3, r1
 8004a52:	e9c7 2306 	strd	r2, r3, [r7, #24]
#endif  // TFLITE_EMULATE_FLOAT
  TFLITE_CHECK(q_fixed <= (1ll << 31));
 8004a56:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004a5a:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 8004a5e:	f04f 0100 	mov.w	r1, #0
 8004a62:	4290      	cmp	r0, r2
 8004a64:	eb71 0303 	sbcs.w	r3, r1, r3
 8004a68:	da01      	bge.n	8004a6e <_ZN6tflite18QuantizeMultiplierEdPlPi+0x8e>
 8004a6a:	f006 fb07 	bl	800b07c <abort>
  if (q_fixed == (1ll << 31)) {
 8004a6e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	bf08      	it	eq
 8004a76:	f1b2 4f00 	cmpeq.w	r2, #2147483648	; 0x80000000
 8004a7a:	d117      	bne.n	8004aac <_ZN6tflite18QuantizeMultiplierEdPlPi+0xcc>
    q_fixed /= 2;
 8004a7c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004a80:	0fd9      	lsrs	r1, r3, #31
 8004a82:	4608      	mov	r0, r1
 8004a84:	f04f 0100 	mov.w	r1, #0
 8004a88:	1884      	adds	r4, r0, r2
 8004a8a:	eb41 0503 	adc.w	r5, r1, r3
 8004a8e:	f04f 0200 	mov.w	r2, #0
 8004a92:	f04f 0300 	mov.w	r3, #0
 8004a96:	0862      	lsrs	r2, r4, #1
 8004a98:	ea42 72c5 	orr.w	r2, r2, r5, lsl #31
 8004a9c:	106b      	asrs	r3, r5, #1
 8004a9e:	e9c7 2306 	strd	r2, r3, [r7, #24]
    ++*shift;
 8004aa2:	683b      	ldr	r3, [r7, #0]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	1c5a      	adds	r2, r3, #1
 8004aa8:	683b      	ldr	r3, [r7, #0]
 8004aaa:	601a      	str	r2, [r3, #0]
  }
  TFLITE_CHECK_LE(q_fixed, std::numeric_limits<int32_t>::max());
 8004aac:	f7fd fa3a 	bl	8001f24 <_ZNSt14numeric_limitsIlE3maxEv>
 8004ab0:	4603      	mov	r3, r0
 8004ab2:	4618      	mov	r0, r3
 8004ab4:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8004ab8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004abc:	4290      	cmp	r0, r2
 8004abe:	eb71 0303 	sbcs.w	r3, r1, r3
 8004ac2:	da01      	bge.n	8004ac8 <_ZN6tflite18QuantizeMultiplierEdPlPi+0xe8>
 8004ac4:	f006 fada 	bl	800b07c <abort>
  // that we're effectively flushing tiny double_multiplier's to zero.
  // We could conceivably handle values in the range (roughly) [32, 63]
  // as 'denormals' i.e. (shift==0, q_fixed < 2^30). In that point of view
  // the present handling is just doing 'flush denormals to zero'. We could
  // reconsider and actually generate nonzero denormals if a need arises.
  if (*shift < -31) {
 8004ac8:	683b      	ldr	r3, [r7, #0]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	f113 0f1f 	cmn.w	r3, #31
 8004ad0:	da08      	bge.n	8004ae4 <_ZN6tflite18QuantizeMultiplierEdPlPi+0x104>
    *shift = 0;
 8004ad2:	683b      	ldr	r3, [r7, #0]
 8004ad4:	2200      	movs	r2, #0
 8004ad6:	601a      	str	r2, [r3, #0]
    q_fixed = 0;
 8004ad8:	f04f 0200 	mov.w	r2, #0
 8004adc:	f04f 0300 	mov.w	r3, #0
 8004ae0:	e9c7 2306 	strd	r2, r3, [r7, #24]
  }
  *quantized_multiplier = static_cast<int32_t>(q_fixed);
 8004ae4:	69ba      	ldr	r2, [r7, #24]
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	601a      	str	r2, [r3, #0]
}
 8004aea:	3720      	adds	r7, #32
 8004aec:	46bd      	mov	sp, r7
 8004aee:	bdb0      	pop	{r4, r5, r7, pc}
 8004af0:	41e00000 	.word	0x41e00000

08004af4 <_ZSt3minIfERKT_S2_S2_>:
   *  preprocessor macro.
  */
  template<typename _Tp>
    _GLIBCXX14_CONSTEXPR
    inline const _Tp&
    min(const _Tp& __a, const _Tp& __b)
 8004af4:	b480      	push	{r7}
 8004af6:	b083      	sub	sp, #12
 8004af8:	af00      	add	r7, sp, #0
 8004afa:	6078      	str	r0, [r7, #4]
 8004afc:	6039      	str	r1, [r7, #0]
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return __b < __a ? __b : __a;
      if (__b < __a)
 8004afe:	683b      	ldr	r3, [r7, #0]
 8004b00:	ed93 7a00 	vldr	s14, [r3]
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	edd3 7a00 	vldr	s15, [r3]
 8004b0a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004b0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b12:	d501      	bpl.n	8004b18 <_ZSt3minIfERKT_S2_S2_+0x24>
	return __b;
 8004b14:	683b      	ldr	r3, [r7, #0]
 8004b16:	e000      	b.n	8004b1a <_ZSt3minIfERKT_S2_S2_+0x26>
      return __a;
 8004b18:	687b      	ldr	r3, [r7, #4]
    }
 8004b1a:	4618      	mov	r0, r3
 8004b1c:	370c      	adds	r7, #12
 8004b1e:	46bd      	mov	sp, r7
 8004b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b24:	4770      	bx	lr

08004b26 <_ZSt3maxIfERKT_S2_S2_>:
   *  preprocessor macro.
  */
  template<typename _Tp>
    _GLIBCXX14_CONSTEXPR
    inline const _Tp&
    max(const _Tp& __a, const _Tp& __b)
 8004b26:	b480      	push	{r7}
 8004b28:	b083      	sub	sp, #12
 8004b2a:	af00      	add	r7, sp, #0
 8004b2c:	6078      	str	r0, [r7, #4]
 8004b2e:	6039      	str	r1, [r7, #0]
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return  __a < __b ? __b : __a;
      if (__a < __b)
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	ed93 7a00 	vldr	s14, [r3]
 8004b36:	683b      	ldr	r3, [r7, #0]
 8004b38:	edd3 7a00 	vldr	s15, [r3]
 8004b3c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004b40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b44:	d501      	bpl.n	8004b4a <_ZSt3maxIfERKT_S2_S2_+0x24>
	return __b;
 8004b46:	683b      	ldr	r3, [r7, #0]
 8004b48:	e000      	b.n	8004b4c <_ZSt3maxIfERKT_S2_S2_+0x26>
      return __a;
 8004b4a:	687b      	ldr	r3, [r7, #4]
    }
 8004b4c:	4618      	mov	r0, r3
 8004b4e:	370c      	adds	r7, #12
 8004b50:	46bd      	mov	sp, r7
 8004b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b56:	4770      	bx	lr

08004b58 <_ZN6tflite11TfLiteRoundIdEET_S1_>:
  template <class T>                                  \
  inline T tf_name(const T x) {                       \
    return TF_LITE_GLOBAL_STD_PREFIX::std_name(x);    \
  }

DECLARE_STD_GLOBAL_SWITCH1(TfLiteRound, round);
 8004b58:	b580      	push	{r7, lr}
 8004b5a:	b082      	sub	sp, #8
 8004b5c:	af00      	add	r7, sp, #0
 8004b5e:	ed87 0b00 	vstr	d0, [r7]
 8004b62:	ed97 0b00 	vldr	d0, [r7]
 8004b66:	f006 fa1d 	bl	800afa4 <round>
 8004b6a:	eeb0 7a40 	vmov.f32	s14, s0
 8004b6e:	eef0 7a60 	vmov.f32	s15, s1
 8004b72:	eeb0 0a47 	vmov.f32	s0, s14
 8004b76:	eef0 0a67 	vmov.f32	s1, s15
 8004b7a:	3708      	adds	r7, #8
 8004b7c:	46bd      	mov	sp, r7
 8004b7e:	bd80      	pop	{r7, pc}

08004b80 <_ZN6tflite11TfLiteRoundIfEET_S1_>:
 8004b80:	b580      	push	{r7, lr}
 8004b82:	b082      	sub	sp, #8
 8004b84:	af00      	add	r7, sp, #0
 8004b86:	ed87 0a01 	vstr	s0, [r7, #4]
 8004b8a:	ed97 0a01 	vldr	s0, [r7, #4]
 8004b8e:	f7ff ff16 	bl	80049be <_ZSt5roundf>
 8004b92:	eef0 7a40 	vmov.f32	s15, s0
 8004b96:	eeb0 0a67 	vmov.f32	s0, s15
 8004b9a:	3708      	adds	r7, #8
 8004b9c:	46bd      	mov	sp, r7
 8004b9e:	bd80      	pop	{r7, pc}

08004ba0 <_ZNSt14numeric_limitsIaE3minEv>:
      min() _GLIBCXX_USE_NOEXCEPT { return -__SCHAR_MAX__ - 1; }
 8004ba0:	b480      	push	{r7}
 8004ba2:	af00      	add	r7, sp, #0
 8004ba4:	f06f 037f 	mvn.w	r3, #127	; 0x7f
 8004ba8:	4618      	mov	r0, r3
 8004baa:	46bd      	mov	sp, r7
 8004bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb0:	4770      	bx	lr

08004bb2 <_ZNSt14numeric_limitsIaE3maxEv>:
      max() _GLIBCXX_USE_NOEXCEPT { return __SCHAR_MAX__; }
 8004bb2:	b480      	push	{r7}
 8004bb4:	af00      	add	r7, sp, #0
 8004bb6:	237f      	movs	r3, #127	; 0x7f
 8004bb8:	4618      	mov	r0, r3
 8004bba:	46bd      	mov	sp, r7
 8004bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc0:	4770      	bx	lr

08004bc2 <_ZNSt14numeric_limitsIhE3minEv>:
      min() _GLIBCXX_USE_NOEXCEPT { return 0; }
 8004bc2:	b480      	push	{r7}
 8004bc4:	af00      	add	r7, sp, #0
 8004bc6:	2300      	movs	r3, #0
 8004bc8:	4618      	mov	r0, r3
 8004bca:	46bd      	mov	sp, r7
 8004bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd0:	4770      	bx	lr

08004bd2 <_ZNSt14numeric_limitsIhE3maxEv>:
      max() _GLIBCXX_USE_NOEXCEPT { return __SCHAR_MAX__ * 2U + 1; }
 8004bd2:	b480      	push	{r7}
 8004bd4:	af00      	add	r7, sp, #0
 8004bd6:	23ff      	movs	r3, #255	; 0xff
 8004bd8:	4618      	mov	r0, r3
 8004bda:	46bd      	mov	sp, r7
 8004bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be0:	4770      	bx	lr
	...

08004be4 <_ZNSt14numeric_limitsIsE3minEv>:
      min() _GLIBCXX_USE_NOEXCEPT { return -__SHRT_MAX__ - 1; }
 8004be4:	b480      	push	{r7}
 8004be6:	af00      	add	r7, sp, #0
 8004be8:	4b02      	ldr	r3, [pc, #8]	; (8004bf4 <_ZNSt14numeric_limitsIsE3minEv+0x10>)
 8004bea:	4618      	mov	r0, r3
 8004bec:	46bd      	mov	sp, r7
 8004bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf2:	4770      	bx	lr
 8004bf4:	ffff8000 	.word	0xffff8000

08004bf8 <_ZNSt14numeric_limitsIsE3maxEv>:
      max() _GLIBCXX_USE_NOEXCEPT { return __SHRT_MAX__; }
 8004bf8:	b480      	push	{r7}
 8004bfa:	af00      	add	r7, sp, #0
 8004bfc:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8004c00:	4618      	mov	r0, r3
 8004c02:	46bd      	mov	sp, r7
 8004c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c08:	4770      	bx	lr

08004c0a <_ZSt3absd>:
// 2735. std::abs(short), std::abs(signed char) and others should return int

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR double
  abs(double __x)
  { return __builtin_fabs(__x); }
 8004c0a:	b480      	push	{r7}
 8004c0c:	b083      	sub	sp, #12
 8004c0e:	af00      	add	r7, sp, #0
 8004c10:	ed87 0b00 	vstr	d0, [r7]
 8004c14:	683a      	ldr	r2, [r7, #0]
 8004c16:	6879      	ldr	r1, [r7, #4]
 8004c18:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8004c1c:	ec43 2b17 	vmov	d7, r2, r3
 8004c20:	eeb0 0a47 	vmov.f32	s0, s14
 8004c24:	eef0 0a67 	vmov.f32	s1, s15
 8004c28:	370c      	adds	r7, #12
 8004c2a:	46bd      	mov	sp, r7
 8004c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c30:	4770      	bx	lr

08004c32 <_ZN6tflite12_GLOBAL__N_116GetTensorAtIndexEPK13TfLiteContexti>:

namespace {

// Assumes tensor_index is a valid index (in bounds)
inline TfLiteTensor* GetTensorAtIndex(const TfLiteContext* context,
                                      int tensor_index) {
 8004c32:	b580      	push	{r7, lr}
 8004c34:	b082      	sub	sp, #8
 8004c36:	af00      	add	r7, sp, #0
 8004c38:	6078      	str	r0, [r7, #4]
 8004c3a:	6039      	str	r1, [r7, #0]
  if (context->tensors != nullptr) {
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	689b      	ldr	r3, [r3, #8]
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d005      	beq.n	8004c50 <_ZN6tflite12_GLOBAL__N_116GetTensorAtIndexEPK13TfLiteContexti+0x1e>
    return &context->tensors[tensor_index];
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	689a      	ldr	r2, [r3, #8]
 8004c48:	683b      	ldr	r3, [r7, #0]
 8004c4a:	019b      	lsls	r3, r3, #6
 8004c4c:	4413      	add	r3, r2
 8004c4e:	e006      	b.n	8004c5e <_ZN6tflite12_GLOBAL__N_116GetTensorAtIndexEPK13TfLiteContexti+0x2c>
  } else {
    return context->GetTensor(context, tensor_index);
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c54:	6839      	ldr	r1, [r7, #0]
 8004c56:	6878      	ldr	r0, [r7, #4]
 8004c58:	4798      	blx	r3
 8004c5a:	4603      	mov	r3, r0
 8004c5c:	bf00      	nop
  }
}
 8004c5e:	4618      	mov	r0, r3
 8004c60:	3708      	adds	r7, #8
 8004c62:	46bd      	mov	sp, r7
 8004c64:	bd80      	pop	{r7, pc}

08004c66 <_ZN6tflite12_GLOBAL__N_122ValidateTensorIndexingEPK13TfLiteContextiiPKi>:
}

// Same as above but returns -1 for invalid inputs instead of status + logging
// error.
inline int ValidateTensorIndexing(const TfLiteContext* context, int index,
                                  int max_size, const int* tensor_indices) {
 8004c66:	b480      	push	{r7}
 8004c68:	b087      	sub	sp, #28
 8004c6a:	af00      	add	r7, sp, #0
 8004c6c:	60f8      	str	r0, [r7, #12]
 8004c6e:	60b9      	str	r1, [r7, #8]
 8004c70:	607a      	str	r2, [r7, #4]
 8004c72:	603b      	str	r3, [r7, #0]
  if (index >= 0 && index < max_size) {
 8004c74:	68bb      	ldr	r3, [r7, #8]
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	db0f      	blt.n	8004c9a <_ZN6tflite12_GLOBAL__N_122ValidateTensorIndexingEPK13TfLiteContextiiPKi+0x34>
 8004c7a:	68ba      	ldr	r2, [r7, #8]
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	429a      	cmp	r2, r3
 8004c80:	da0b      	bge.n	8004c9a <_ZN6tflite12_GLOBAL__N_122ValidateTensorIndexingEPK13TfLiteContextiiPKi+0x34>
    const int tensor_index = tensor_indices[index];
 8004c82:	68bb      	ldr	r3, [r7, #8]
 8004c84:	009b      	lsls	r3, r3, #2
 8004c86:	683a      	ldr	r2, [r7, #0]
 8004c88:	4413      	add	r3, r2
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	617b      	str	r3, [r7, #20]
    if (tensor_index != kTfLiteOptionalTensor) {
 8004c8e:	697b      	ldr	r3, [r7, #20]
 8004c90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c94:	d001      	beq.n	8004c9a <_ZN6tflite12_GLOBAL__N_122ValidateTensorIndexingEPK13TfLiteContextiiPKi+0x34>
      return tensor_index;
 8004c96:	697b      	ldr	r3, [r7, #20]
 8004c98:	e001      	b.n	8004c9e <_ZN6tflite12_GLOBAL__N_122ValidateTensorIndexingEPK13TfLiteContextiiPKi+0x38>
    }
  }
  return -1;
 8004c9a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004c9e:	4618      	mov	r0, r3
 8004ca0:	371c      	adds	r7, #28
 8004ca2:	46bd      	mov	sp, r7
 8004ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca8:	4770      	bx	lr

08004caa <_ZN6tflite12_GLOBAL__N_115GetMutableInputEPK13TfLiteContextPK10TfLiteNodei>:

inline TfLiteTensor* GetMutableInput(const TfLiteContext* context,
                                     const TfLiteNode* node, int index) {
 8004caa:	b580      	push	{r7, lr}
 8004cac:	b086      	sub	sp, #24
 8004cae:	af00      	add	r7, sp, #0
 8004cb0:	60f8      	str	r0, [r7, #12]
 8004cb2:	60b9      	str	r1, [r7, #8]
 8004cb4:	607a      	str	r2, [r7, #4]
  const int tensor_index = ValidateTensorIndexing(
      context, index, node->inputs->size, node->inputs->data);
 8004cb6:	68bb      	ldr	r3, [r7, #8]
 8004cb8:	681b      	ldr	r3, [r3, #0]
  const int tensor_index = ValidateTensorIndexing(
 8004cba:	681a      	ldr	r2, [r3, #0]
      context, index, node->inputs->size, node->inputs->data);
 8004cbc:	68bb      	ldr	r3, [r7, #8]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	3304      	adds	r3, #4
  const int tensor_index = ValidateTensorIndexing(
 8004cc2:	6879      	ldr	r1, [r7, #4]
 8004cc4:	68f8      	ldr	r0, [r7, #12]
 8004cc6:	f7ff ffce 	bl	8004c66 <_ZN6tflite12_GLOBAL__N_122ValidateTensorIndexingEPK13TfLiteContextiiPKi>
 8004cca:	6178      	str	r0, [r7, #20]
  if (tensor_index < 0) {
 8004ccc:	697b      	ldr	r3, [r7, #20]
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	da01      	bge.n	8004cd6 <_ZN6tflite12_GLOBAL__N_115GetMutableInputEPK13TfLiteContextPK10TfLiteNodei+0x2c>
    return nullptr;
 8004cd2:	2300      	movs	r3, #0
 8004cd4:	e005      	b.n	8004ce2 <_ZN6tflite12_GLOBAL__N_115GetMutableInputEPK13TfLiteContextPK10TfLiteNodei+0x38>
  }
  return GetTensorAtIndex(context, tensor_index);
 8004cd6:	6979      	ldr	r1, [r7, #20]
 8004cd8:	68f8      	ldr	r0, [r7, #12]
 8004cda:	f7ff ffaa 	bl	8004c32 <_ZN6tflite12_GLOBAL__N_116GetTensorAtIndexEPK13TfLiteContexti>
 8004cde:	4603      	mov	r3, r0
 8004ce0:	bf00      	nop
}
 8004ce2:	4618      	mov	r0, r3
 8004ce4:	3718      	adds	r7, #24
 8004ce6:	46bd      	mov	sp, r7
 8004ce8:	bd80      	pop	{r7, pc}

08004cea <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>:
}

}  // anonymous namespace.

const TfLiteTensor* GetInput(const TfLiteContext* context,
                             const TfLiteNode* node, int index) {
 8004cea:	b580      	push	{r7, lr}
 8004cec:	b084      	sub	sp, #16
 8004cee:	af00      	add	r7, sp, #0
 8004cf0:	60f8      	str	r0, [r7, #12]
 8004cf2:	60b9      	str	r1, [r7, #8]
 8004cf4:	607a      	str	r2, [r7, #4]
  return GetMutableInput(context, node, index);
 8004cf6:	687a      	ldr	r2, [r7, #4]
 8004cf8:	68b9      	ldr	r1, [r7, #8]
 8004cfa:	68f8      	ldr	r0, [r7, #12]
 8004cfc:	f7ff ffd5 	bl	8004caa <_ZN6tflite12_GLOBAL__N_115GetMutableInputEPK13TfLiteContextPK10TfLiteNodei>
 8004d00:	4603      	mov	r3, r0
}
 8004d02:	4618      	mov	r0, r3
 8004d04:	3710      	adds	r7, #16
 8004d06:	46bd      	mov	sp, r7
 8004d08:	bd80      	pop	{r7, pc}

08004d0a <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei>:
  if (tensor == nullptr) return nullptr;
  return tensor->is_variable ? tensor : nullptr;
}

TfLiteTensor* GetOutput(TfLiteContext* context, const TfLiteNode* node,
                        int index) {
 8004d0a:	b580      	push	{r7, lr}
 8004d0c:	b086      	sub	sp, #24
 8004d0e:	af00      	add	r7, sp, #0
 8004d10:	60f8      	str	r0, [r7, #12]
 8004d12:	60b9      	str	r1, [r7, #8]
 8004d14:	607a      	str	r2, [r7, #4]
  const int tensor_index = ValidateTensorIndexing(
      context, index, node->outputs->size, node->outputs->data);
 8004d16:	68bb      	ldr	r3, [r7, #8]
 8004d18:	685b      	ldr	r3, [r3, #4]
  const int tensor_index = ValidateTensorIndexing(
 8004d1a:	681a      	ldr	r2, [r3, #0]
      context, index, node->outputs->size, node->outputs->data);
 8004d1c:	68bb      	ldr	r3, [r7, #8]
 8004d1e:	685b      	ldr	r3, [r3, #4]
 8004d20:	3304      	adds	r3, #4
  const int tensor_index = ValidateTensorIndexing(
 8004d22:	6879      	ldr	r1, [r7, #4]
 8004d24:	68f8      	ldr	r0, [r7, #12]
 8004d26:	f7ff ff9e 	bl	8004c66 <_ZN6tflite12_GLOBAL__N_122ValidateTensorIndexingEPK13TfLiteContextiiPKi>
 8004d2a:	6178      	str	r0, [r7, #20]
  if (tensor_index < 0) {
 8004d2c:	697b      	ldr	r3, [r7, #20]
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	da01      	bge.n	8004d36 <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei+0x2c>
    return nullptr;
 8004d32:	2300      	movs	r3, #0
 8004d34:	e005      	b.n	8004d42 <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei+0x38>
  }
  return GetTensorAtIndex(context, tensor_index);
 8004d36:	6979      	ldr	r1, [r7, #20]
 8004d38:	68f8      	ldr	r0, [r7, #12]
 8004d3a:	f7ff ff7a 	bl	8004c32 <_ZN6tflite12_GLOBAL__N_116GetTensorAtIndexEPK13TfLiteContexti>
 8004d3e:	4603      	mov	r3, r0
 8004d40:	bf00      	nop
}
 8004d42:	4618      	mov	r0, r3
 8004d44:	3718      	adds	r7, #24
 8004d46:	46bd      	mov	sp, r7
 8004d48:	bd80      	pop	{r7, pc}

08004d4a <_ZN6tflite22GetOptionalInputTensorEPK13TfLiteContextPK10TfLiteNodei>:
  *tensor = GetTensorAtIndex(context, tensor_index);
  return kTfLiteOk;
}

const TfLiteTensor* GetOptionalInputTensor(const TfLiteContext* context,
                                           const TfLiteNode* node, int index) {
 8004d4a:	b580      	push	{r7, lr}
 8004d4c:	b084      	sub	sp, #16
 8004d4e:	af00      	add	r7, sp, #0
 8004d50:	60f8      	str	r0, [r7, #12]
 8004d52:	60b9      	str	r1, [r7, #8]
 8004d54:	607a      	str	r2, [r7, #4]
  return GetInput(context, node, index);
 8004d56:	687a      	ldr	r2, [r7, #4]
 8004d58:	68b9      	ldr	r1, [r7, #8]
 8004d5a:	68f8      	ldr	r0, [r7, #12]
 8004d5c:	f7ff ffc5 	bl	8004cea <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
 8004d60:	4603      	mov	r3, r0
}
 8004d62:	4618      	mov	r0, r3
 8004d64:	3710      	adds	r7, #16
 8004d66:	46bd      	mov	sp, r7
 8004d68:	bd80      	pop	{r7, pc}
 8004d6a:	0000      	movs	r0, r0
 8004d6c:	0000      	movs	r0, r0
	...

08004d70 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd>:
TfLiteStatus GetQuantizedConvolutionMultipler(TfLiteContext* context,
                                              const TfLiteTensor* input,
                                              const TfLiteTensor* filter,
                                              const TfLiteTensor* bias,
                                              TfLiteTensor* output,
                                              double* multiplier) {
 8004d70:	b5b0      	push	{r4, r5, r7, lr}
 8004d72:	b08e      	sub	sp, #56	; 0x38
 8004d74:	af02      	add	r7, sp, #8
 8004d76:	60f8      	str	r0, [r7, #12]
 8004d78:	60b9      	str	r1, [r7, #8]
 8004d7a:	607a      	str	r2, [r7, #4]
 8004d7c:	603b      	str	r3, [r7, #0]
  const double input_product_scale = static_cast<double>(input->params.scale) *
 8004d7e:	68bb      	ldr	r3, [r7, #8]
 8004d80:	68db      	ldr	r3, [r3, #12]
 8004d82:	4618      	mov	r0, r3
 8004d84:	f7fb fbf2 	bl	800056c <__aeabi_f2d>
 8004d88:	4604      	mov	r4, r0
 8004d8a:	460d      	mov	r5, r1
                                     static_cast<double>(filter->params.scale);
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	68db      	ldr	r3, [r3, #12]
 8004d90:	4618      	mov	r0, r3
 8004d92:	f7fb fbeb 	bl	800056c <__aeabi_f2d>
 8004d96:	4602      	mov	r2, r0
 8004d98:	460b      	mov	r3, r1
  const double input_product_scale = static_cast<double>(input->params.scale) *
 8004d9a:	4620      	mov	r0, r4
 8004d9c:	4629      	mov	r1, r5
 8004d9e:	f7fb fc3d 	bl	800061c <__aeabi_dmul>
 8004da2:	4602      	mov	r2, r0
 8004da4:	460b      	mov	r3, r1
 8004da6:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
  // The following conditions must be guaranteed by the training pipeline.
  if (bias) {
 8004daa:	683b      	ldr	r3, [r7, #0]
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d04b      	beq.n	8004e48 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0xd8>
    const double bias_scale = static_cast<double>(bias->params.scale);
 8004db0:	683b      	ldr	r3, [r7, #0]
 8004db2:	68db      	ldr	r3, [r3, #12]
 8004db4:	4618      	mov	r0, r3
 8004db6:	f7fb fbd9 	bl	800056c <__aeabi_f2d>
 8004dba:	4602      	mov	r2, r0
 8004dbc:	460b      	mov	r3, r1
 8004dbe:	e9c7 2308 	strd	r2, r3, [r7, #32]
    // bias * (bias_scale - input_product_scale) / output_scale should be
    // a small number for an integer.
    // Since normally bias should be within a small range.
    // We should expect (bias_scale - input_product_scale) / output_scale to
    // be a small number like 0.02.
    const double scale_diff = std::abs(input_product_scale - bias_scale);
 8004dc2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004dc6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8004dca:	f7fb fa6f 	bl	80002ac <__aeabi_dsub>
 8004dce:	4602      	mov	r2, r0
 8004dd0:	460b      	mov	r3, r1
 8004dd2:	ec43 2b17 	vmov	d7, r2, r3
 8004dd6:	eeb0 0a47 	vmov.f32	s0, s14
 8004dda:	eef0 0a67 	vmov.f32	s1, s15
 8004dde:	f7ff ff14 	bl	8004c0a <_ZSt3absd>
 8004de2:	ed87 0b06 	vstr	d0, [r7, #24]
    const double output_scale = static_cast<double>(output->params.scale);
 8004de6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004de8:	68db      	ldr	r3, [r3, #12]
 8004dea:	4618      	mov	r0, r3
 8004dec:	f7fb fbbe 	bl	800056c <__aeabi_f2d>
 8004df0:	4602      	mov	r2, r0
 8004df2:	460b      	mov	r3, r1
 8004df4:	e9c7 2304 	strd	r2, r3, [r7, #16]

    TF_LITE_ENSURE(context, scale_diff / output_scale <= 0.02);
 8004df8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8004dfc:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8004e00:	f7fb fd36 	bl	8000870 <__aeabi_ddiv>
 8004e04:	4602      	mov	r2, r0
 8004e06:	460b      	mov	r3, r1
 8004e08:	4610      	mov	r0, r2
 8004e0a:	4619      	mov	r1, r3
 8004e0c:	2301      	movs	r3, #1
 8004e0e:	461c      	mov	r4, r3
 8004e10:	a318      	add	r3, pc, #96	; (adr r3, 8004e74 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0x104>)
 8004e12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e16:	f7fb fe7d 	bl	8000b14 <__aeabi_dcmple>
 8004e1a:	4603      	mov	r3, r0
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d101      	bne.n	8004e24 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0xb4>
 8004e20:	2300      	movs	r3, #0
 8004e22:	461c      	mov	r4, r3
 8004e24:	b2e3      	uxtb	r3, r4
 8004e26:	f083 0301 	eor.w	r3, r3, #1
 8004e2a:	b2db      	uxtb	r3, r3
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d00b      	beq.n	8004e48 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0xd8>
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	695c      	ldr	r4, [r3, #20]
 8004e34:	4b0c      	ldr	r3, [pc, #48]	; (8004e68 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0xf8>)
 8004e36:	9300      	str	r3, [sp, #0]
 8004e38:	f44f 739f 	mov.w	r3, #318	; 0x13e
 8004e3c:	4a0b      	ldr	r2, [pc, #44]	; (8004e6c <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0xfc>)
 8004e3e:	490c      	ldr	r1, [pc, #48]	; (8004e70 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0x100>)
 8004e40:	68f8      	ldr	r0, [r7, #12]
 8004e42:	47a0      	blx	r4
 8004e44:	2301      	movs	r3, #1
 8004e46:	e009      	b.n	8004e5c <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0xec>
  }
  return GetQuantizedConvolutionMultipler(context, input, filter, output,
 8004e48:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004e4a:	9300      	str	r3, [sp, #0]
 8004e4c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004e4e:	687a      	ldr	r2, [r7, #4]
 8004e50:	68b9      	ldr	r1, [r7, #8]
 8004e52:	68f8      	ldr	r0, [r7, #12]
 8004e54:	f000 f812 	bl	8004e7c <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd>
 8004e58:	4603      	mov	r3, r0
                                          multiplier);
 8004e5a:	bf00      	nop
}
 8004e5c:	4618      	mov	r0, r3
 8004e5e:	3730      	adds	r7, #48	; 0x30
 8004e60:	46bd      	mov	sp, r7
 8004e62:	bdb0      	pop	{r4, r5, r7, pc}
 8004e64:	f3af 8000 	nop.w
 8004e68:	0800ee6c 	.word	0x0800ee6c
 8004e6c:	0800ecac 	.word	0x0800ecac
 8004e70:	0800ed58 	.word	0x0800ed58
 8004e74:	47ae147b 	.word	0x47ae147b
 8004e78:	3f947ae1 	.word	0x3f947ae1

08004e7c <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd>:

TfLiteStatus GetQuantizedConvolutionMultipler(TfLiteContext* context,
                                              const TfLiteTensor* input,
                                              const TfLiteTensor* filter,
                                              TfLiteTensor* output,
                                              double* multiplier) {
 8004e7c:	b590      	push	{r4, r7, lr}
 8004e7e:	b089      	sub	sp, #36	; 0x24
 8004e80:	af02      	add	r7, sp, #8
 8004e82:	60f8      	str	r0, [r7, #12]
 8004e84:	60b9      	str	r1, [r7, #8]
 8004e86:	607a      	str	r2, [r7, #4]
 8004e88:	603b      	str	r3, [r7, #0]
  const double input_product_scale =
      static_cast<double>(input->params.scale * filter->params.scale);
 8004e8a:	68bb      	ldr	r3, [r7, #8]
 8004e8c:	ed93 7a03 	vldr	s14, [r3, #12]
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	edd3 7a03 	vldr	s15, [r3, #12]
 8004e96:	ee67 7a27 	vmul.f32	s15, s14, s15
  const double input_product_scale =
 8004e9a:	ee17 0a90 	vmov	r0, s15
 8004e9e:	f7fb fb65 	bl	800056c <__aeabi_f2d>
 8004ea2:	4602      	mov	r2, r0
 8004ea4:	460b      	mov	r3, r1
 8004ea6:	e9c7 2304 	strd	r2, r3, [r7, #16]
  TF_LITE_ENSURE(context, input_product_scale >= 0);
 8004eaa:	2301      	movs	r3, #1
 8004eac:	461c      	mov	r4, r3
 8004eae:	f04f 0200 	mov.w	r2, #0
 8004eb2:	f04f 0300 	mov.w	r3, #0
 8004eb6:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8004eba:	f7fb fe35 	bl	8000b28 <__aeabi_dcmpge>
 8004ebe:	4603      	mov	r3, r0
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d101      	bne.n	8004ec8 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd+0x4c>
 8004ec4:	2300      	movs	r3, #0
 8004ec6:	461c      	mov	r4, r3
 8004ec8:	b2e3      	uxtb	r3, r4
 8004eca:	f083 0301 	eor.w	r3, r3, #1
 8004ece:	b2db      	uxtb	r3, r3
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d00b      	beq.n	8004eec <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd+0x70>
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	695c      	ldr	r4, [r3, #20]
 8004ed8:	4b0f      	ldr	r3, [pc, #60]	; (8004f18 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd+0x9c>)
 8004eda:	9300      	str	r3, [sp, #0]
 8004edc:	f240 134b 	movw	r3, #331	; 0x14b
 8004ee0:	4a0e      	ldr	r2, [pc, #56]	; (8004f1c <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd+0xa0>)
 8004ee2:	490f      	ldr	r1, [pc, #60]	; (8004f20 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd+0xa4>)
 8004ee4:	68f8      	ldr	r0, [r7, #12]
 8004ee6:	47a0      	blx	r4
 8004ee8:	2301      	movs	r3, #1
 8004eea:	e010      	b.n	8004f0e <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd+0x92>
  *multiplier = input_product_scale / static_cast<double>(output->params.scale);
 8004eec:	683b      	ldr	r3, [r7, #0]
 8004eee:	68db      	ldr	r3, [r3, #12]
 8004ef0:	4618      	mov	r0, r3
 8004ef2:	f7fb fb3b 	bl	800056c <__aeabi_f2d>
 8004ef6:	4602      	mov	r2, r0
 8004ef8:	460b      	mov	r3, r1
 8004efa:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8004efe:	f7fb fcb7 	bl	8000870 <__aeabi_ddiv>
 8004f02:	4602      	mov	r2, r0
 8004f04:	460b      	mov	r3, r1
 8004f06:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004f08:	e9c1 2300 	strd	r2, r3, [r1]

  return kTfLiteOk;
 8004f0c:	2300      	movs	r3, #0
}
 8004f0e:	4618      	mov	r0, r3
 8004f10:	371c      	adds	r7, #28
 8004f12:	46bd      	mov	sp, r7
 8004f14:	bd90      	pop	{r4, r7, pc}
 8004f16:	bf00      	nop
 8004f18:	0800ee90 	.word	0x0800ee90
 8004f1c:	0800ecac 	.word	0x0800ecac
 8004f20:	0800ed58 	.word	0x0800ed58

08004f24 <_ZN6tflite12_GLOBAL__N_18QuantizeEP13TfLiteContextflfRl>:

namespace {

inline TfLiteStatus Quantize(TfLiteContext* context, float scale,
                             int32_t zero_point, float f, int32_t& q) {
 8004f24:	b590      	push	{r4, r7, lr}
 8004f26:	b08b      	sub	sp, #44	; 0x2c
 8004f28:	af02      	add	r7, sp, #8
 8004f2a:	6178      	str	r0, [r7, #20]
 8004f2c:	ed87 0a04 	vstr	s0, [r7, #16]
 8004f30:	60f9      	str	r1, [r7, #12]
 8004f32:	edc7 0a02 	vstr	s1, [r7, #8]
 8004f36:	607a      	str	r2, [r7, #4]
  const float tmp = TfLiteRound(f / scale);
 8004f38:	ed97 7a02 	vldr	s14, [r7, #8]
 8004f3c:	edd7 7a04 	vldr	s15, [r7, #16]
 8004f40:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8004f44:	eeb0 0a66 	vmov.f32	s0, s13
 8004f48:	f7ff fe1a 	bl	8004b80 <_ZN6tflite11TfLiteRoundIfEET_S1_>
 8004f4c:	ed87 0a07 	vstr	s0, [r7, #28]
  const bool no_integer_overflow_from_quantization =
      (tmp >= static_cast<float>(std::numeric_limits<int32_t>::min()) &&
 8004f50:	f7fc ffdf 	bl	8001f12 <_ZNSt14numeric_limitsIlE3minEv>
 8004f54:	ee07 0a90 	vmov	s15, r0
 8004f58:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004f5c:	ed97 7a07 	vldr	s14, [r7, #28]
 8004f60:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004f64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f68:	db0e      	blt.n	8004f88 <_ZN6tflite12_GLOBAL__N_18QuantizeEP13TfLiteContextflfRl+0x64>
       tmp <= static_cast<float>(std::numeric_limits<int32_t>::max()));
 8004f6a:	f7fc ffdb 	bl	8001f24 <_ZNSt14numeric_limitsIlE3maxEv>
 8004f6e:	ee07 0a90 	vmov	s15, r0
 8004f72:	eef8 7ae7 	vcvt.f32.s32	s15, s15
      (tmp >= static_cast<float>(std::numeric_limits<int32_t>::min()) &&
 8004f76:	ed97 7a07 	vldr	s14, [r7, #28]
 8004f7a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004f7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f82:	d801      	bhi.n	8004f88 <_ZN6tflite12_GLOBAL__N_18QuantizeEP13TfLiteContextflfRl+0x64>
 8004f84:	2301      	movs	r3, #1
 8004f86:	e000      	b.n	8004f8a <_ZN6tflite12_GLOBAL__N_18QuantizeEP13TfLiteContextflfRl+0x66>
 8004f88:	2300      	movs	r3, #0
       tmp <= static_cast<float>(std::numeric_limits<int32_t>::max()));
 8004f8a:	76fb      	strb	r3, [r7, #27]
  TF_LITE_ENSURE(context, no_integer_overflow_from_quantization);
 8004f8c:	7efb      	ldrb	r3, [r7, #27]
 8004f8e:	f083 0301 	eor.w	r3, r3, #1
 8004f92:	b2db      	uxtb	r3, r3
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d00b      	beq.n	8004fb0 <_ZN6tflite12_GLOBAL__N_18QuantizeEP13TfLiteContextflfRl+0x8c>
 8004f98:	697b      	ldr	r3, [r7, #20]
 8004f9a:	695c      	ldr	r4, [r3, #20]
 8004f9c:	4b0c      	ldr	r3, [pc, #48]	; (8004fd0 <_ZN6tflite12_GLOBAL__N_18QuantizeEP13TfLiteContextflfRl+0xac>)
 8004f9e:	9300      	str	r3, [sp, #0]
 8004fa0:	f240 1359 	movw	r3, #345	; 0x159
 8004fa4:	4a0b      	ldr	r2, [pc, #44]	; (8004fd4 <_ZN6tflite12_GLOBAL__N_18QuantizeEP13TfLiteContextflfRl+0xb0>)
 8004fa6:	490c      	ldr	r1, [pc, #48]	; (8004fd8 <_ZN6tflite12_GLOBAL__N_18QuantizeEP13TfLiteContextflfRl+0xb4>)
 8004fa8:	6978      	ldr	r0, [r7, #20]
 8004faa:	47a0      	blx	r4
 8004fac:	2301      	movs	r3, #1
 8004fae:	e00a      	b.n	8004fc6 <_ZN6tflite12_GLOBAL__N_18QuantizeEP13TfLiteContextflfRl+0xa2>
  q = zero_point + static_cast<int32_t>(tmp);
 8004fb0:	edd7 7a07 	vldr	s15, [r7, #28]
 8004fb4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004fb8:	ee17 2a90 	vmov	r2, s15
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	441a      	add	r2, r3
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	601a      	str	r2, [r3, #0]
  return kTfLiteOk;
 8004fc4:	2300      	movs	r3, #0
}
 8004fc6:	4618      	mov	r0, r3
 8004fc8:	3724      	adds	r7, #36	; 0x24
 8004fca:	46bd      	mov	sp, r7
 8004fcc:	bd90      	pop	{r4, r7, pc}
 8004fce:	bf00      	nop
 8004fd0:	0800eeac 	.word	0x0800eeac
 8004fd4:	0800ecac 	.word	0x0800ecac
 8004fd8:	0800ed58 	.word	0x0800ed58

08004fdc <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationllP12TfLiteTensorPlS6_>:

TfLiteStatus CalculateActivationRangeQuantizedImpl(
    TfLiteContext* context, TfLiteFusedActivation activation, int32_t qmin,
    int32_t qmax, TfLiteTensor* output, int32_t* act_min, int32_t* act_max) {
 8004fdc:	b580      	push	{r7, lr}
 8004fde:	b08a      	sub	sp, #40	; 0x28
 8004fe0:	af00      	add	r7, sp, #0
 8004fe2:	60f8      	str	r0, [r7, #12]
 8004fe4:	607a      	str	r2, [r7, #4]
 8004fe6:	603b      	str	r3, [r7, #0]
 8004fe8:	460b      	mov	r3, r1
 8004fea:	72fb      	strb	r3, [r7, #11]
  const auto scale = output->params.scale;
 8004fec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fee:	68db      	ldr	r3, [r3, #12]
 8004ff0:	627b      	str	r3, [r7, #36]	; 0x24
  const auto zero_point = output->params.zero_point;
 8004ff2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ff4:	691b      	ldr	r3, [r3, #16]
 8004ff6:	623b      	str	r3, [r7, #32]

  int32_t tmp_q;
  if (activation == kTfLiteActRelu) {
 8004ff8:	7afb      	ldrb	r3, [r7, #11]
 8004ffa:	2b01      	cmp	r3, #1
 8004ffc:	d120      	bne.n	8005040 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationllP12TfLiteTensorPlS6_+0x64>
    TF_LITE_ENSURE_OK(context,
 8004ffe:	f107 0314 	add.w	r3, r7, #20
 8005002:	461a      	mov	r2, r3
 8005004:	eddf 0a52 	vldr	s1, [pc, #328]	; 8005150 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationllP12TfLiteTensorPlS6_+0x174>
 8005008:	6a39      	ldr	r1, [r7, #32]
 800500a:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 800500e:	68f8      	ldr	r0, [r7, #12]
 8005010:	f7ff ff88 	bl	8004f24 <_ZN6tflite12_GLOBAL__N_18QuantizeEP13TfLiteContextflfRl>
 8005014:	4603      	mov	r3, r0
 8005016:	76fb      	strb	r3, [r7, #27]
 8005018:	7efb      	ldrb	r3, [r7, #27]
 800501a:	2b00      	cmp	r3, #0
 800501c:	d001      	beq.n	8005022 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationllP12TfLiteTensorPlS6_+0x46>
 800501e:	7efb      	ldrb	r3, [r7, #27]
 8005020:	e091      	b.n	8005146 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationllP12TfLiteTensorPlS6_+0x16a>
                      Quantize(context, scale, zero_point, 0.0, tmp_q));
    *act_min = std::max(qmin, tmp_q);
 8005022:	f107 0214 	add.w	r2, r7, #20
 8005026:	1d3b      	adds	r3, r7, #4
 8005028:	4611      	mov	r1, r2
 800502a:	4618      	mov	r0, r3
 800502c:	f000 f8fe 	bl	800522c <_ZSt3maxIlERKT_S2_S2_>
 8005030:	4603      	mov	r3, r0
 8005032:	681a      	ldr	r2, [r3, #0]
 8005034:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005036:	601a      	str	r2, [r3, #0]
    *act_max = qmax;
 8005038:	683a      	ldr	r2, [r7, #0]
 800503a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800503c:	601a      	str	r2, [r3, #0]
 800503e:	e081      	b.n	8005144 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationllP12TfLiteTensorPlS6_+0x168>
  } else if (activation == kTfLiteActRelu6) {
 8005040:	7afb      	ldrb	r3, [r7, #11]
 8005042:	2b03      	cmp	r3, #3
 8005044:	d13a      	bne.n	80050bc <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationllP12TfLiteTensorPlS6_+0xe0>
    TF_LITE_ENSURE_OK(context,
 8005046:	f107 0314 	add.w	r3, r7, #20
 800504a:	461a      	mov	r2, r3
 800504c:	eddf 0a40 	vldr	s1, [pc, #256]	; 8005150 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationllP12TfLiteTensorPlS6_+0x174>
 8005050:	6a39      	ldr	r1, [r7, #32]
 8005052:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 8005056:	68f8      	ldr	r0, [r7, #12]
 8005058:	f7ff ff64 	bl	8004f24 <_ZN6tflite12_GLOBAL__N_18QuantizeEP13TfLiteContextflfRl>
 800505c:	4603      	mov	r3, r0
 800505e:	777b      	strb	r3, [r7, #29]
 8005060:	7f7b      	ldrb	r3, [r7, #29]
 8005062:	2b00      	cmp	r3, #0
 8005064:	d001      	beq.n	800506a <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationllP12TfLiteTensorPlS6_+0x8e>
 8005066:	7f7b      	ldrb	r3, [r7, #29]
 8005068:	e06d      	b.n	8005146 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationllP12TfLiteTensorPlS6_+0x16a>
                      Quantize(context, scale, zero_point, 0.0, tmp_q));
    *act_min = std::max(qmin, tmp_q);
 800506a:	f107 0214 	add.w	r2, r7, #20
 800506e:	1d3b      	adds	r3, r7, #4
 8005070:	4611      	mov	r1, r2
 8005072:	4618      	mov	r0, r3
 8005074:	f000 f8da 	bl	800522c <_ZSt3maxIlERKT_S2_S2_>
 8005078:	4603      	mov	r3, r0
 800507a:	681a      	ldr	r2, [r3, #0]
 800507c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800507e:	601a      	str	r2, [r3, #0]
    TF_LITE_ENSURE_OK(context,
 8005080:	f107 0314 	add.w	r3, r7, #20
 8005084:	461a      	mov	r2, r3
 8005086:	eef1 0a08 	vmov.f32	s1, #24	; 0x40c00000  6.0
 800508a:	6a39      	ldr	r1, [r7, #32]
 800508c:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 8005090:	68f8      	ldr	r0, [r7, #12]
 8005092:	f7ff ff47 	bl	8004f24 <_ZN6tflite12_GLOBAL__N_18QuantizeEP13TfLiteContextflfRl>
 8005096:	4603      	mov	r3, r0
 8005098:	773b      	strb	r3, [r7, #28]
 800509a:	7f3b      	ldrb	r3, [r7, #28]
 800509c:	2b00      	cmp	r3, #0
 800509e:	d001      	beq.n	80050a4 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationllP12TfLiteTensorPlS6_+0xc8>
 80050a0:	7f3b      	ldrb	r3, [r7, #28]
 80050a2:	e050      	b.n	8005146 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationllP12TfLiteTensorPlS6_+0x16a>
                      Quantize(context, scale, zero_point, 6.0, tmp_q));
    *act_max = std::min(qmax, tmp_q);
 80050a4:	f107 0214 	add.w	r2, r7, #20
 80050a8:	463b      	mov	r3, r7
 80050aa:	4611      	mov	r1, r2
 80050ac:	4618      	mov	r0, r3
 80050ae:	f000 f8a9 	bl	8005204 <_ZSt3minIlERKT_S2_S2_>
 80050b2:	4603      	mov	r3, r0
 80050b4:	681a      	ldr	r2, [r3, #0]
 80050b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050b8:	601a      	str	r2, [r3, #0]
 80050ba:	e043      	b.n	8005144 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationllP12TfLiteTensorPlS6_+0x168>
  } else if (activation == kTfLiteActReluN1To1) {
 80050bc:	7afb      	ldrb	r3, [r7, #11]
 80050be:	2b02      	cmp	r3, #2
 80050c0:	d13a      	bne.n	8005138 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationllP12TfLiteTensorPlS6_+0x15c>
    TF_LITE_ENSURE_OK(context,
 80050c2:	f107 0314 	add.w	r3, r7, #20
 80050c6:	461a      	mov	r2, r3
 80050c8:	eeff 0a00 	vmov.f32	s1, #240	; 0xbf800000 -1.0
 80050cc:	6a39      	ldr	r1, [r7, #32]
 80050ce:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 80050d2:	68f8      	ldr	r0, [r7, #12]
 80050d4:	f7ff ff26 	bl	8004f24 <_ZN6tflite12_GLOBAL__N_18QuantizeEP13TfLiteContextflfRl>
 80050d8:	4603      	mov	r3, r0
 80050da:	77fb      	strb	r3, [r7, #31]
 80050dc:	7ffb      	ldrb	r3, [r7, #31]
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d001      	beq.n	80050e6 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationllP12TfLiteTensorPlS6_+0x10a>
 80050e2:	7ffb      	ldrb	r3, [r7, #31]
 80050e4:	e02f      	b.n	8005146 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationllP12TfLiteTensorPlS6_+0x16a>
                      Quantize(context, scale, zero_point, -1.0, tmp_q));
    *act_min = std::max(qmin, tmp_q);
 80050e6:	f107 0214 	add.w	r2, r7, #20
 80050ea:	1d3b      	adds	r3, r7, #4
 80050ec:	4611      	mov	r1, r2
 80050ee:	4618      	mov	r0, r3
 80050f0:	f000 f89c 	bl	800522c <_ZSt3maxIlERKT_S2_S2_>
 80050f4:	4603      	mov	r3, r0
 80050f6:	681a      	ldr	r2, [r3, #0]
 80050f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80050fa:	601a      	str	r2, [r3, #0]
    TF_LITE_ENSURE_OK(context,
 80050fc:	f107 0314 	add.w	r3, r7, #20
 8005100:	461a      	mov	r2, r3
 8005102:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8005106:	6a39      	ldr	r1, [r7, #32]
 8005108:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 800510c:	68f8      	ldr	r0, [r7, #12]
 800510e:	f7ff ff09 	bl	8004f24 <_ZN6tflite12_GLOBAL__N_18QuantizeEP13TfLiteContextflfRl>
 8005112:	4603      	mov	r3, r0
 8005114:	77bb      	strb	r3, [r7, #30]
 8005116:	7fbb      	ldrb	r3, [r7, #30]
 8005118:	2b00      	cmp	r3, #0
 800511a:	d001      	beq.n	8005120 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationllP12TfLiteTensorPlS6_+0x144>
 800511c:	7fbb      	ldrb	r3, [r7, #30]
 800511e:	e012      	b.n	8005146 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationllP12TfLiteTensorPlS6_+0x16a>
                      Quantize(context, scale, zero_point, 1.0, tmp_q));
    *act_max = std::min(qmax, tmp_q);
 8005120:	f107 0214 	add.w	r2, r7, #20
 8005124:	463b      	mov	r3, r7
 8005126:	4611      	mov	r1, r2
 8005128:	4618      	mov	r0, r3
 800512a:	f000 f86b 	bl	8005204 <_ZSt3minIlERKT_S2_S2_>
 800512e:	4603      	mov	r3, r0
 8005130:	681a      	ldr	r2, [r3, #0]
 8005132:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005134:	601a      	str	r2, [r3, #0]
 8005136:	e005      	b.n	8005144 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationllP12TfLiteTensorPlS6_+0x168>
  } else {
    *act_min = qmin;
 8005138:	687a      	ldr	r2, [r7, #4]
 800513a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800513c:	601a      	str	r2, [r3, #0]
    *act_max = qmax;
 800513e:	683a      	ldr	r2, [r7, #0]
 8005140:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005142:	601a      	str	r2, [r3, #0]
  }
  return kTfLiteOk;
 8005144:	2300      	movs	r3, #0
}
 8005146:	4618      	mov	r0, r3
 8005148:	3728      	adds	r7, #40	; 0x28
 800514a:	46bd      	mov	sp, r7
 800514c:	bd80      	pop	{r7, pc}
 800514e:	bf00      	nop
 8005150:	00000000 	.word	0x00000000

08005154 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_>:

TfLiteStatus CalculateActivationRangeQuantized(TfLiteContext* context,
                                               TfLiteFusedActivation activation,
                                               TfLiteTensor* output,
                                               int32_t* act_min,
                                               int32_t* act_max) {
 8005154:	b590      	push	{r4, r7, lr}
 8005156:	b08b      	sub	sp, #44	; 0x2c
 8005158:	af04      	add	r7, sp, #16
 800515a:	60f8      	str	r0, [r7, #12]
 800515c:	607a      	str	r2, [r7, #4]
 800515e:	603b      	str	r3, [r7, #0]
 8005160:	460b      	mov	r3, r1
 8005162:	72fb      	strb	r3, [r7, #11]
  int32_t qmin = 0;
 8005164:	2300      	movs	r3, #0
 8005166:	617b      	str	r3, [r7, #20]
  int32_t qmax = 0;
 8005168:	2300      	movs	r3, #0
 800516a:	613b      	str	r3, [r7, #16]
  if (output->type == kTfLiteUInt8) {
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	781b      	ldrb	r3, [r3, #0]
 8005170:	2b03      	cmp	r3, #3
 8005172:	d108      	bne.n	8005186 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x32>
    qmin = std::numeric_limits<uint8_t>::min();
 8005174:	f7ff fd25 	bl	8004bc2 <_ZNSt14numeric_limitsIhE3minEv>
 8005178:	4603      	mov	r3, r0
 800517a:	617b      	str	r3, [r7, #20]
    qmax = std::numeric_limits<uint8_t>::max();
 800517c:	f7ff fd29 	bl	8004bd2 <_ZNSt14numeric_limitsIhE3maxEv>
 8005180:	4603      	mov	r3, r0
 8005182:	613b      	str	r3, [r7, #16]
 8005184:	e025      	b.n	80051d2 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x7e>
  } else if (output->type == kTfLiteInt8) {
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	781b      	ldrb	r3, [r3, #0]
 800518a:	2b09      	cmp	r3, #9
 800518c:	d108      	bne.n	80051a0 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x4c>
    qmin = std::numeric_limits<int8_t>::min();
 800518e:	f7ff fd07 	bl	8004ba0 <_ZNSt14numeric_limitsIaE3minEv>
 8005192:	4603      	mov	r3, r0
 8005194:	617b      	str	r3, [r7, #20]
    qmax = std::numeric_limits<int8_t>::max();
 8005196:	f7ff fd0c 	bl	8004bb2 <_ZNSt14numeric_limitsIaE3maxEv>
 800519a:	4603      	mov	r3, r0
 800519c:	613b      	str	r3, [r7, #16]
 800519e:	e018      	b.n	80051d2 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x7e>
  } else if (output->type == kTfLiteInt16) {
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	781b      	ldrb	r3, [r3, #0]
 80051a4:	2b07      	cmp	r3, #7
 80051a6:	d108      	bne.n	80051ba <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x66>
    qmin = std::numeric_limits<int16_t>::min();
 80051a8:	f7ff fd1c 	bl	8004be4 <_ZNSt14numeric_limitsIsE3minEv>
 80051ac:	4603      	mov	r3, r0
 80051ae:	617b      	str	r3, [r7, #20]
    qmax = std::numeric_limits<int16_t>::max();
 80051b0:	f7ff fd22 	bl	8004bf8 <_ZNSt14numeric_limitsIsE3maxEv>
 80051b4:	4603      	mov	r3, r0
 80051b6:	613b      	str	r3, [r7, #16]
 80051b8:	e00b      	b.n	80051d2 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x7e>
  } else {
    TF_LITE_ENSURE(context, false);
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	695c      	ldr	r4, [r3, #20]
 80051be:	4b0e      	ldr	r3, [pc, #56]	; (80051f8 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0xa4>)
 80051c0:	9300      	str	r3, [sp, #0]
 80051c2:	f240 1391 	movw	r3, #401	; 0x191
 80051c6:	4a0d      	ldr	r2, [pc, #52]	; (80051fc <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0xa8>)
 80051c8:	490d      	ldr	r1, [pc, #52]	; (8005200 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0xac>)
 80051ca:	68f8      	ldr	r0, [r7, #12]
 80051cc:	47a0      	blx	r4
 80051ce:	2301      	movs	r3, #1
 80051d0:	e00d      	b.n	80051ee <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x9a>
  }

  return CalculateActivationRangeQuantizedImpl(context, activation, qmin, qmax,
 80051d2:	7af9      	ldrb	r1, [r7, #11]
 80051d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051d6:	9302      	str	r3, [sp, #8]
 80051d8:	683b      	ldr	r3, [r7, #0]
 80051da:	9301      	str	r3, [sp, #4]
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	9300      	str	r3, [sp, #0]
 80051e0:	693b      	ldr	r3, [r7, #16]
 80051e2:	697a      	ldr	r2, [r7, #20]
 80051e4:	68f8      	ldr	r0, [r7, #12]
 80051e6:	f7ff fef9 	bl	8004fdc <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationllP12TfLiteTensorPlS6_>
 80051ea:	4603      	mov	r3, r0
                                               output, act_min, act_max);
 80051ec:	bf00      	nop
}
 80051ee:	4618      	mov	r0, r3
 80051f0:	371c      	adds	r7, #28
 80051f2:	46bd      	mov	sp, r7
 80051f4:	bd90      	pop	{r4, r7, pc}
 80051f6:	bf00      	nop
 80051f8:	0800eed4 	.word	0x0800eed4
 80051fc:	0800ecac 	.word	0x0800ecac
 8005200:	0800ed58 	.word	0x0800ed58

08005204 <_ZSt3minIlERKT_S2_S2_>:
    min(const _Tp& __a, const _Tp& __b)
 8005204:	b480      	push	{r7}
 8005206:	b083      	sub	sp, #12
 8005208:	af00      	add	r7, sp, #0
 800520a:	6078      	str	r0, [r7, #4]
 800520c:	6039      	str	r1, [r7, #0]
      if (__b < __a)
 800520e:	683b      	ldr	r3, [r7, #0]
 8005210:	681a      	ldr	r2, [r3, #0]
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	429a      	cmp	r2, r3
 8005218:	da01      	bge.n	800521e <_ZSt3minIlERKT_S2_S2_+0x1a>
	return __b;
 800521a:	683b      	ldr	r3, [r7, #0]
 800521c:	e000      	b.n	8005220 <_ZSt3minIlERKT_S2_S2_+0x1c>
      return __a;
 800521e:	687b      	ldr	r3, [r7, #4]
    }
 8005220:	4618      	mov	r0, r3
 8005222:	370c      	adds	r7, #12
 8005224:	46bd      	mov	sp, r7
 8005226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800522a:	4770      	bx	lr

0800522c <_ZSt3maxIlERKT_S2_S2_>:
    max(const _Tp& __a, const _Tp& __b)
 800522c:	b480      	push	{r7}
 800522e:	b083      	sub	sp, #12
 8005230:	af00      	add	r7, sp, #0
 8005232:	6078      	str	r0, [r7, #4]
 8005234:	6039      	str	r1, [r7, #0]
      if (__a < __b)
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681a      	ldr	r2, [r3, #0]
 800523a:	683b      	ldr	r3, [r7, #0]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	429a      	cmp	r2, r3
 8005240:	da01      	bge.n	8005246 <_ZSt3maxIlERKT_S2_S2_+0x1a>
	return __b;
 8005242:	683b      	ldr	r3, [r7, #0]
 8005244:	e000      	b.n	8005248 <_ZSt3maxIlERKT_S2_S2_+0x1c>
      return __a;
 8005246:	687b      	ldr	r3, [r7, #4]
    }
 8005248:	4618      	mov	r0, r3
 800524a:	370c      	adds	r7, #12
 800524c:	46bd      	mov	sp, r7
 800524e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005252:	4770      	bx	lr

08005254 <_ZNK6tflite8SubGraph9operatorsEv>:
  const flatbuffers::Vector<flatbuffers::Offset<tflite::Operator>> *operators() const {
 8005254:	b580      	push	{r7, lr}
 8005256:	b082      	sub	sp, #8
 8005258:	af00      	add	r7, sp, #0
 800525a:	6078      	str	r0, [r7, #4]
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<tflite::Operator>> *>(VT_OPERATORS);
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	210a      	movs	r1, #10
 8005260:	4618      	mov	r0, r3
 8005262:	f000 f847 	bl	80052f4 <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite8OperatorEEEEEEET_t>
 8005266:	4603      	mov	r3, r0
  }
 8005268:	4618      	mov	r0, r3
 800526a:	3708      	adds	r7, #8
 800526c:	46bd      	mov	sp, r7
 800526e:	bd80      	pop	{r7, pc}

08005270 <_ZNK6tflite5Model9subgraphsEv>:
  const flatbuffers::Vector<flatbuffers::Offset<tflite::SubGraph>> *subgraphs() const {
 8005270:	b580      	push	{r7, lr}
 8005272:	b082      	sub	sp, #8
 8005274:	af00      	add	r7, sp, #0
 8005276:	6078      	str	r0, [r7, #4]
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<tflite::SubGraph>> *>(VT_SUBGRAPHS);
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	2108      	movs	r1, #8
 800527c:	4618      	mov	r0, r3
 800527e:	f000 f849 	bl	8005314 <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite8SubGraphEEEEEEET_t>
 8005282:	4603      	mov	r3, r0
  }
 8005284:	4618      	mov	r0, r3
 8005286:	3708      	adds	r7, #8
 8005288:	46bd      	mov	sp, r7
 800528a:	bd80      	pop	{r7, pc}

0800528c <_ZN6tflite20NumSubgraphOperatorsEPKNS_8SubGraphE>:
float FlexbufferWrapper::ElementAsFloat(size_t i) const {
  return static_cast<float>(FlexbufferWrapper::ElementAsDouble(i));
}

// TODO(b/192589496): Ops must always be there. Remove this function when fixed
uint32_t NumSubgraphOperators(const SubGraph* subgraph) {
 800528c:	b580      	push	{r7, lr}
 800528e:	b082      	sub	sp, #8
 8005290:	af00      	add	r7, sp, #0
 8005292:	6078      	str	r0, [r7, #4]
  if (subgraph->operators() != nullptr) {
 8005294:	6878      	ldr	r0, [r7, #4]
 8005296:	f7ff ffdd 	bl	8005254 <_ZNK6tflite8SubGraph9operatorsEv>
 800529a:	4603      	mov	r3, r0
 800529c:	2b00      	cmp	r3, #0
 800529e:	bf14      	ite	ne
 80052a0:	2301      	movne	r3, #1
 80052a2:	2300      	moveq	r3, #0
 80052a4:	b2db      	uxtb	r3, r3
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d008      	beq.n	80052bc <_ZN6tflite20NumSubgraphOperatorsEPKNS_8SubGraphE+0x30>
    return subgraph->operators()->size();
 80052aa:	6878      	ldr	r0, [r7, #4]
 80052ac:	f7ff ffd2 	bl	8005254 <_ZNK6tflite8SubGraph9operatorsEv>
 80052b0:	4603      	mov	r3, r0
 80052b2:	4618      	mov	r0, r3
 80052b4:	f000 f83e 	bl	8005334 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8OperatorEEEE4sizeEv>
 80052b8:	4603      	mov	r3, r0
 80052ba:	e000      	b.n	80052be <_ZN6tflite20NumSubgraphOperatorsEPKNS_8SubGraphE+0x32>
  } else {
    return 0;
 80052bc:	2300      	movs	r3, #0
  }
}
 80052be:	4618      	mov	r0, r3
 80052c0:	3708      	adds	r7, #8
 80052c2:	46bd      	mov	sp, r7
 80052c4:	bd80      	pop	{r7, pc}

080052c6 <_ZN6tflite20NumSubgraphOperatorsEPKNS_5ModelEi>:
// TODO(b/192589496): Ops must always be there. Remove this function when fixed
uint32_t NumSubgraphOperators(const Model* model, int subgraph_idx) {
 80052c6:	b580      	push	{r7, lr}
 80052c8:	b084      	sub	sp, #16
 80052ca:	af00      	add	r7, sp, #0
 80052cc:	6078      	str	r0, [r7, #4]
 80052ce:	6039      	str	r1, [r7, #0]
  const SubGraph* subgraph = model->subgraphs()->Get(subgraph_idx);
 80052d0:	6878      	ldr	r0, [r7, #4]
 80052d2:	f7ff ffcd 	bl	8005270 <_ZNK6tflite5Model9subgraphsEv>
 80052d6:	4602      	mov	r2, r0
 80052d8:	683b      	ldr	r3, [r7, #0]
 80052da:	4619      	mov	r1, r3
 80052dc:	4610      	mov	r0, r2
 80052de:	f000 f845 	bl	800536c <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE3GetEm>
 80052e2:	60f8      	str	r0, [r7, #12]
  return NumSubgraphOperators(subgraph);
 80052e4:	68f8      	ldr	r0, [r7, #12]
 80052e6:	f7ff ffd1 	bl	800528c <_ZN6tflite20NumSubgraphOperatorsEPKNS_8SubGraphE>
 80052ea:	4603      	mov	r3, r0
}
 80052ec:	4618      	mov	r0, r3
 80052ee:	3710      	adds	r7, #16
 80052f0:	46bd      	mov	sp, r7
 80052f2:	bd80      	pop	{r7, pc}

080052f4 <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite8OperatorEEEEEEET_t>:
  template<typename P> P GetPointer(voffset_t field) const {
 80052f4:	b580      	push	{r7, lr}
 80052f6:	b082      	sub	sp, #8
 80052f8:	af00      	add	r7, sp, #0
 80052fa:	6078      	str	r0, [r7, #4]
 80052fc:	460b      	mov	r3, r1
 80052fe:	807b      	strh	r3, [r7, #2]
    return const_cast<Table *>(this)->GetPointer<P>(field);
 8005300:	887b      	ldrh	r3, [r7, #2]
 8005302:	4619      	mov	r1, r3
 8005304:	6878      	ldr	r0, [r7, #4]
 8005306:	f000 f865 	bl	80053d4 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite8OperatorEEEEEEET_t>
 800530a:	4603      	mov	r3, r0
  }
 800530c:	4618      	mov	r0, r3
 800530e:	3708      	adds	r7, #8
 8005310:	46bd      	mov	sp, r7
 8005312:	bd80      	pop	{r7, pc}

08005314 <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite8SubGraphEEEEEEET_t>:
  template<typename P> P GetPointer(voffset_t field) const {
 8005314:	b580      	push	{r7, lr}
 8005316:	b082      	sub	sp, #8
 8005318:	af00      	add	r7, sp, #0
 800531a:	6078      	str	r0, [r7, #4]
 800531c:	460b      	mov	r3, r1
 800531e:	807b      	strh	r3, [r7, #2]
    return const_cast<Table *>(this)->GetPointer<P>(field);
 8005320:	887b      	ldrh	r3, [r7, #2]
 8005322:	4619      	mov	r1, r3
 8005324:	6878      	ldr	r0, [r7, #4]
 8005326:	f000 f875 	bl	8005414 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite8SubGraphEEEEEEET_t>
 800532a:	4603      	mov	r3, r0
  }
 800532c:	4618      	mov	r0, r3
 800532e:	3708      	adds	r7, #8
 8005330:	46bd      	mov	sp, r7
 8005332:	bd80      	pop	{r7, pc}

08005334 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8OperatorEEEE4sizeEv>:
  uoffset_t size() const { return EndianScalar(length_); }
 8005334:	b580      	push	{r7, lr}
 8005336:	b082      	sub	sp, #8
 8005338:	af00      	add	r7, sp, #0
 800533a:	6078      	str	r0, [r7, #4]
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	4618      	mov	r0, r3
 8005342:	f7fc fbb0 	bl	8001aa6 <_ZN11flatbuffers12EndianScalarImEET_S1_>
 8005346:	4603      	mov	r3, r0
 8005348:	4618      	mov	r0, r3
 800534a:	3708      	adds	r7, #8
 800534c:	46bd      	mov	sp, r7
 800534e:	bd80      	pop	{r7, pc}

08005350 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE4sizeEv>:
 8005350:	b580      	push	{r7, lr}
 8005352:	b082      	sub	sp, #8
 8005354:	af00      	add	r7, sp, #0
 8005356:	6078      	str	r0, [r7, #4]
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	4618      	mov	r0, r3
 800535e:	f7fc fba2 	bl	8001aa6 <_ZN11flatbuffers12EndianScalarImEET_S1_>
 8005362:	4603      	mov	r3, r0
 8005364:	4618      	mov	r0, r3
 8005366:	3708      	adds	r7, #8
 8005368:	46bd      	mov	sp, r7
 800536a:	bd80      	pop	{r7, pc}

0800536c <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE3GetEm>:
  return_type Get(uoffset_t i) const {
 800536c:	b580      	push	{r7, lr}
 800536e:	b082      	sub	sp, #8
 8005370:	af00      	add	r7, sp, #0
 8005372:	6078      	str	r0, [r7, #4]
 8005374:	6039      	str	r1, [r7, #0]
    FLATBUFFERS_ASSERT(i < size());
 8005376:	6878      	ldr	r0, [r7, #4]
 8005378:	f7ff ffea 	bl	8005350 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE4sizeEv>
 800537c:	4602      	mov	r2, r0
 800537e:	683b      	ldr	r3, [r7, #0]
 8005380:	4293      	cmp	r3, r2
 8005382:	d306      	bcc.n	8005392 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE3GetEm+0x26>
 8005384:	4b09      	ldr	r3, [pc, #36]	; (80053ac <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE3GetEm+0x40>)
 8005386:	4a0a      	ldr	r2, [pc, #40]	; (80053b0 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE3GetEm+0x44>)
 8005388:	f44f 7183 	mov.w	r1, #262	; 0x106
 800538c:	4809      	ldr	r0, [pc, #36]	; (80053b4 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE3GetEm+0x48>)
 800538e:	f005 fe7d 	bl	800b08c <__assert_func>
    return IndirectHelper<T>::Read(Data(), i);
 8005392:	6878      	ldr	r0, [r7, #4]
 8005394:	f000 f872 	bl	800547c <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE4DataEv>
 8005398:	4603      	mov	r3, r0
 800539a:	6839      	ldr	r1, [r7, #0]
 800539c:	4618      	mov	r0, r3
 800539e:	f000 f859 	bl	8005454 <_ZN11flatbuffers14IndirectHelperINS_6OffsetIN6tflite8SubGraphEEEE4ReadEPKhm>
 80053a2:	4603      	mov	r3, r0
  }
 80053a4:	4618      	mov	r0, r3
 80053a6:	3708      	adds	r7, #8
 80053a8:	46bd      	mov	sp, r7
 80053aa:	bd80      	pop	{r7, pc}
 80053ac:	0800ef8c 	.word	0x0800ef8c
 80053b0:	0800ef98 	.word	0x0800ef98
 80053b4:	0800f094 	.word	0x0800f094

080053b8 <_ZN11flatbuffers12EndianScalarIxEET_S1_>:
template<typename T> T EndianScalar(T t) {
 80053b8:	b480      	push	{r7}
 80053ba:	b083      	sub	sp, #12
 80053bc:	af00      	add	r7, sp, #0
 80053be:	e9c7 0100 	strd	r0, r1, [r7]
    return t;
 80053c2:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 80053c6:	4610      	mov	r0, r2
 80053c8:	4619      	mov	r1, r3
 80053ca:	370c      	adds	r7, #12
 80053cc:	46bd      	mov	sp, r7
 80053ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d2:	4770      	bx	lr

080053d4 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite8OperatorEEEEEEET_t>:
  template<typename P> P GetPointer(voffset_t field) {
 80053d4:	b580      	push	{r7, lr}
 80053d6:	b084      	sub	sp, #16
 80053d8:	af00      	add	r7, sp, #0
 80053da:	6078      	str	r0, [r7, #4]
 80053dc:	460b      	mov	r3, r1
 80053de:	807b      	strh	r3, [r7, #2]
    auto field_offset = GetOptionalFieldOffset(field);
 80053e0:	887b      	ldrh	r3, [r7, #2]
 80053e2:	4619      	mov	r1, r3
 80053e4:	6878      	ldr	r0, [r7, #4]
 80053e6:	f7fb fe7f 	bl	80010e8 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
 80053ea:	4603      	mov	r3, r0
 80053ec:	81fb      	strh	r3, [r7, #14]
    auto p = data_ + field_offset;
 80053ee:	687a      	ldr	r2, [r7, #4]
 80053f0:	89fb      	ldrh	r3, [r7, #14]
 80053f2:	4413      	add	r3, r2
 80053f4:	60bb      	str	r3, [r7, #8]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 80053f6:	89fb      	ldrh	r3, [r7, #14]
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d006      	beq.n	800540a <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite8OperatorEEEEEEET_t+0x36>
 80053fc:	68b8      	ldr	r0, [r7, #8]
 80053fe:	f7fc fb6b 	bl	8001ad8 <_ZN11flatbuffers10ReadScalarImEET_PKv>
 8005402:	4602      	mov	r2, r0
 8005404:	68bb      	ldr	r3, [r7, #8]
 8005406:	4413      	add	r3, r2
                        : nullptr;
 8005408:	e000      	b.n	800540c <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite8OperatorEEEEEEET_t+0x38>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 800540a:	2300      	movs	r3, #0
  }
 800540c:	4618      	mov	r0, r3
 800540e:	3710      	adds	r7, #16
 8005410:	46bd      	mov	sp, r7
 8005412:	bd80      	pop	{r7, pc}

08005414 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite8SubGraphEEEEEEET_t>:
  template<typename P> P GetPointer(voffset_t field) {
 8005414:	b580      	push	{r7, lr}
 8005416:	b084      	sub	sp, #16
 8005418:	af00      	add	r7, sp, #0
 800541a:	6078      	str	r0, [r7, #4]
 800541c:	460b      	mov	r3, r1
 800541e:	807b      	strh	r3, [r7, #2]
    auto field_offset = GetOptionalFieldOffset(field);
 8005420:	887b      	ldrh	r3, [r7, #2]
 8005422:	4619      	mov	r1, r3
 8005424:	6878      	ldr	r0, [r7, #4]
 8005426:	f7fb fe5f 	bl	80010e8 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
 800542a:	4603      	mov	r3, r0
 800542c:	81fb      	strh	r3, [r7, #14]
    auto p = data_ + field_offset;
 800542e:	687a      	ldr	r2, [r7, #4]
 8005430:	89fb      	ldrh	r3, [r7, #14]
 8005432:	4413      	add	r3, r2
 8005434:	60bb      	str	r3, [r7, #8]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 8005436:	89fb      	ldrh	r3, [r7, #14]
 8005438:	2b00      	cmp	r3, #0
 800543a:	d006      	beq.n	800544a <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite8SubGraphEEEEEEET_t+0x36>
 800543c:	68b8      	ldr	r0, [r7, #8]
 800543e:	f7fc fb4b 	bl	8001ad8 <_ZN11flatbuffers10ReadScalarImEET_PKv>
 8005442:	4602      	mov	r2, r0
 8005444:	68bb      	ldr	r3, [r7, #8]
 8005446:	4413      	add	r3, r2
                        : nullptr;
 8005448:	e000      	b.n	800544c <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite8SubGraphEEEEEEET_t+0x38>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 800544a:	2300      	movs	r3, #0
  }
 800544c:	4618      	mov	r0, r3
 800544e:	3710      	adds	r7, #16
 8005450:	46bd      	mov	sp, r7
 8005452:	bd80      	pop	{r7, pc}

08005454 <_ZN11flatbuffers14IndirectHelperINS_6OffsetIN6tflite8SubGraphEEEE4ReadEPKhm>:
  static return_type Read(const uint8_t *p, uoffset_t i) {
 8005454:	b580      	push	{r7, lr}
 8005456:	b082      	sub	sp, #8
 8005458:	af00      	add	r7, sp, #0
 800545a:	6078      	str	r0, [r7, #4]
 800545c:	6039      	str	r1, [r7, #0]
    p += i * sizeof(uoffset_t);
 800545e:	683b      	ldr	r3, [r7, #0]
 8005460:	009b      	lsls	r3, r3, #2
 8005462:	687a      	ldr	r2, [r7, #4]
 8005464:	4413      	add	r3, r2
 8005466:	607b      	str	r3, [r7, #4]
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
 8005468:	6878      	ldr	r0, [r7, #4]
 800546a:	f7fc fb35 	bl	8001ad8 <_ZN11flatbuffers10ReadScalarImEET_PKv>
 800546e:	4602      	mov	r2, r0
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	4413      	add	r3, r2
  }
 8005474:	4618      	mov	r0, r3
 8005476:	3708      	adds	r7, #8
 8005478:	46bd      	mov	sp, r7
 800547a:	bd80      	pop	{r7, pc}

0800547c <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE4DataEv>:
  const uint8_t *Data() const {
 800547c:	b480      	push	{r7}
 800547e:	b083      	sub	sp, #12
 8005480:	af00      	add	r7, sp, #0
 8005482:	6078      	str	r0, [r7, #4]
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	3304      	adds	r3, #4
  }
 8005488:	4618      	mov	r0, r3
 800548a:	370c      	adds	r7, #12
 800548c:	46bd      	mov	sp, r7
 800548e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005492:	4770      	bx	lr

08005494 <_ZNK6tflite6Tensor5shapeEv>:
  const flatbuffers::Vector<int32_t> *shape() const {
 8005494:	b580      	push	{r7, lr}
 8005496:	b082      	sub	sp, #8
 8005498:	af00      	add	r7, sp, #0
 800549a:	6078      	str	r0, [r7, #4]
    return GetPointer<const flatbuffers::Vector<int32_t> *>(VT_SHAPE);
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	2104      	movs	r1, #4
 80054a0:	4618      	mov	r0, r3
 80054a2:	f7fe fe50 	bl	8004146 <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorIlEEEET_t>
 80054a6:	4603      	mov	r3, r0
  }
 80054a8:	4618      	mov	r0, r3
 80054aa:	3708      	adds	r7, #8
 80054ac:	46bd      	mov	sp, r7
 80054ae:	bd80      	pop	{r7, pc}

080054b0 <_ZNK6tflite6Tensor4typeEv>:
  tflite::TensorType type() const {
 80054b0:	b580      	push	{r7, lr}
 80054b2:	b082      	sub	sp, #8
 80054b4:	af00      	add	r7, sp, #0
 80054b6:	6078      	str	r0, [r7, #4]
    return static_cast<tflite::TensorType>(GetField<int8_t>(VT_TYPE, 0));
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	2200      	movs	r2, #0
 80054bc:	2106      	movs	r1, #6
 80054be:	4618      	mov	r0, r3
 80054c0:	f7fe fe51 	bl	8004166 <_ZNK11flatbuffers5Table8GetFieldIaEET_tS2_>
 80054c4:	4603      	mov	r3, r0
 80054c6:	b2db      	uxtb	r3, r3
  }
 80054c8:	4618      	mov	r0, r3
 80054ca:	3708      	adds	r7, #8
 80054cc:	46bd      	mov	sp, r7
 80054ce:	bd80      	pop	{r7, pc}

080054d0 <_ZN6tflite12RuntimeShapeC1Ev>:
  // larger shapes are separately allocated.
  static constexpr int kMaxSmallSize = 5;

  RuntimeShape& operator=(RuntimeShape const&) = delete;

  RuntimeShape() : size_(0) {}
 80054d0:	b480      	push	{r7}
 80054d2:	b083      	sub	sp, #12
 80054d4:	af00      	add	r7, sp, #0
 80054d6:	6078      	str	r0, [r7, #4]
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	2200      	movs	r2, #0
 80054dc:	601a      	str	r2, [r3, #0]
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	4618      	mov	r0, r3
 80054e2:	370c      	adds	r7, #12
 80054e4:	46bd      	mov	sp, r7
 80054e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ea:	4770      	bx	lr

080054ec <_ZN6tflite12RuntimeShapeC1EiPKl>:
    for (int i = 0; i < shape_size; ++i) {
      SetDim(i, value);
    }
  }

  RuntimeShape(int dimensions_count, const int32_t* dims_data) : size_(0) {
 80054ec:	b580      	push	{r7, lr}
 80054ee:	b084      	sub	sp, #16
 80054f0:	af00      	add	r7, sp, #0
 80054f2:	60f8      	str	r0, [r7, #12]
 80054f4:	60b9      	str	r1, [r7, #8]
 80054f6:	607a      	str	r2, [r7, #4]
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	2200      	movs	r2, #0
 80054fc:	601a      	str	r2, [r3, #0]
    ReplaceWith(dimensions_count, dims_data);
 80054fe:	687a      	ldr	r2, [r7, #4]
 8005500:	68b9      	ldr	r1, [r7, #8]
 8005502:	68f8      	ldr	r0, [r7, #12]
 8005504:	f000 f866 	bl	80055d4 <_ZN6tflite12RuntimeShape11ReplaceWithEiPKl>
  }
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	4618      	mov	r0, r3
 800550c:	3710      	adds	r7, #16
 800550e:	46bd      	mov	sp, r7
 8005510:	bd80      	pop	{r7, pc}

08005512 <_ZN6tflite12RuntimeShapeD1Ev>:
    return this->size_ == comp.size_ &&
           std::memcmp(DimsData(), comp.DimsData(), size_ * sizeof(int32_t)) ==
               0;
  }

  ~RuntimeShape() {
 8005512:	b580      	push	{r7, lr}
 8005514:	b082      	sub	sp, #8
 8005516:	af00      	add	r7, sp, #0
 8005518:	6078      	str	r0, [r7, #4]
    if (size_ > kMaxSmallSize) {
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	2b05      	cmp	r3, #5
 8005520:	dd08      	ble.n	8005534 <_ZN6tflite12RuntimeShapeD1Ev+0x22>
#ifdef TF_LITE_STATIC_MEMORY
      TFLITE_CHECK(false && "No shape resizing supported on this platform");
#else  // TF_LITE_STATIC_MEMORY
      delete[] dims_pointer_;
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	685b      	ldr	r3, [r3, #4]
 8005526:	2b00      	cmp	r3, #0
 8005528:	d004      	beq.n	8005534 <_ZN6tflite12RuntimeShapeD1Ev+0x22>
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	685b      	ldr	r3, [r3, #4]
 800552e:	4618      	mov	r0, r3
 8005530:	f005 fcbf 	bl	800aeb2 <_ZdaPv>
#endif  // TF_LITE_STATIC_MEMORY
    }
  }
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	4618      	mov	r0, r3
 8005538:	3708      	adds	r7, #8
 800553a:	46bd      	mov	sp, r7
 800553c:	bd80      	pop	{r7, pc}

0800553e <_ZNK6tflite12RuntimeShape15DimensionsCountEv>:

  inline int32_t DimensionsCount() const { return size_; }
 800553e:	b480      	push	{r7}
 8005540:	b083      	sub	sp, #12
 8005542:	af00      	add	r7, sp, #0
 8005544:	6078      	str	r0, [r7, #4]
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	4618      	mov	r0, r3
 800554c:	370c      	adds	r7, #12
 800554e:	46bd      	mov	sp, r7
 8005550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005554:	4770      	bx	lr

08005556 <_ZN6tflite12RuntimeShape8DimsDataEv>:
    } else {
      dims_[i] = val;
    }
  }

  inline int32_t* DimsData() {
 8005556:	b480      	push	{r7}
 8005558:	b083      	sub	sp, #12
 800555a:	af00      	add	r7, sp, #0
 800555c:	6078      	str	r0, [r7, #4]
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	2b05      	cmp	r3, #5
 8005564:	dd02      	ble.n	800556c <_ZN6tflite12RuntimeShape8DimsDataEv+0x16>
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	685b      	ldr	r3, [r3, #4]
 800556a:	e001      	b.n	8005570 <_ZN6tflite12RuntimeShape8DimsDataEv+0x1a>
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	3304      	adds	r3, #4
  }
 8005570:	4618      	mov	r0, r3
 8005572:	370c      	adds	r7, #12
 8005574:	46bd      	mov	sp, r7
 8005576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800557a:	4770      	bx	lr

0800557c <_ZN6tflite12RuntimeShape6ResizeEi>:
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
  }
  // The caller must ensure that the shape is no bigger than 5-D.
  inline const int32_t* DimsDataUpTo5D() const { return dims_; }

  inline void Resize(int dimensions_count) {
 800557c:	b580      	push	{r7, lr}
 800557e:	b082      	sub	sp, #8
 8005580:	af00      	add	r7, sp, #0
 8005582:	6078      	str	r0, [r7, #4]
 8005584:	6039      	str	r1, [r7, #0]
    if (size_ > kMaxSmallSize) {
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	2b05      	cmp	r3, #5
 800558c:	dd08      	ble.n	80055a0 <_ZN6tflite12RuntimeShape6ResizeEi+0x24>
#ifdef TF_LITE_STATIC_MEMORY
      TFLITE_CHECK(false && "No shape resizing supported on this platform");
#else  // TF_LITE_STATIC_MEMORY
      delete[] dims_pointer_;
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	685b      	ldr	r3, [r3, #4]
 8005592:	2b00      	cmp	r3, #0
 8005594:	d004      	beq.n	80055a0 <_ZN6tflite12RuntimeShape6ResizeEi+0x24>
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	685b      	ldr	r3, [r3, #4]
 800559a:	4618      	mov	r0, r3
 800559c:	f005 fc89 	bl	800aeb2 <_ZdaPv>
#endif  // TF_LITE_STATIC_MEMORY
    }
    size_ = dimensions_count;
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	683a      	ldr	r2, [r7, #0]
 80055a4:	601a      	str	r2, [r3, #0]
    if (dimensions_count > kMaxSmallSize) {
 80055a6:	683b      	ldr	r3, [r7, #0]
 80055a8:	2b05      	cmp	r3, #5
 80055aa:	dd0f      	ble.n	80055cc <_ZN6tflite12RuntimeShape6ResizeEi+0x50>
#ifdef TF_LITE_STATIC_MEMORY
      TFLITE_CHECK(false && "No shape resizing supported on this platform");
#else  // TF_LITE_STATIC_MEMORY
      dims_pointer_ = new int32_t[dimensions_count];
 80055ac:	683b      	ldr	r3, [r7, #0]
 80055ae:	f06f 4260 	mvn.w	r2, #3758096384	; 0xe0000000
 80055b2:	4293      	cmp	r3, r2
 80055b4:	d201      	bcs.n	80055ba <_ZN6tflite12RuntimeShape6ResizeEi+0x3e>
 80055b6:	009b      	lsls	r3, r3, #2
 80055b8:	e001      	b.n	80055be <_ZN6tflite12RuntimeShape6ResizeEi+0x42>
 80055ba:	f04f 33ff 	mov.w	r3, #4294967295
 80055be:	4618      	mov	r0, r3
 80055c0:	f005 fc99 	bl	800aef6 <_Znaj>
 80055c4:	4603      	mov	r3, r0
 80055c6:	461a      	mov	r2, r3
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	605a      	str	r2, [r3, #4]
#endif  // TF_LITE_STATIC_MEMORY
    }
  }
 80055cc:	bf00      	nop
 80055ce:	3708      	adds	r7, #8
 80055d0:	46bd      	mov	sp, r7
 80055d2:	bd80      	pop	{r7, pc}

080055d4 <_ZN6tflite12RuntimeShape11ReplaceWithEiPKl>:

  inline void ReplaceWith(int dimensions_count, const int32_t* dims_data) {
 80055d4:	b580      	push	{r7, lr}
 80055d6:	b086      	sub	sp, #24
 80055d8:	af00      	add	r7, sp, #0
 80055da:	60f8      	str	r0, [r7, #12]
 80055dc:	60b9      	str	r1, [r7, #8]
 80055de:	607a      	str	r2, [r7, #4]
    Resize(dimensions_count);
 80055e0:	68b9      	ldr	r1, [r7, #8]
 80055e2:	68f8      	ldr	r0, [r7, #12]
 80055e4:	f7ff ffca 	bl	800557c <_ZN6tflite12RuntimeShape6ResizeEi>
    int32_t* dst_dims = DimsData();
 80055e8:	68f8      	ldr	r0, [r7, #12]
 80055ea:	f7ff ffb4 	bl	8005556 <_ZN6tflite12RuntimeShape8DimsDataEv>
 80055ee:	6178      	str	r0, [r7, #20]
    std::memcpy(dst_dims, dims_data, dimensions_count * sizeof(int32_t));
 80055f0:	68bb      	ldr	r3, [r7, #8]
 80055f2:	009b      	lsls	r3, r3, #2
 80055f4:	461a      	mov	r2, r3
 80055f6:	6879      	ldr	r1, [r7, #4]
 80055f8:	6978      	ldr	r0, [r7, #20]
 80055fa:	f005 ffd7 	bl	800b5ac <memcpy>
  }
 80055fe:	bf00      	nop
 8005600:	3718      	adds	r7, #24
 8005602:	46bd      	mov	sp, r7
 8005604:	bd80      	pop	{r7, pc}

08005606 <_ZN6tflite14AlignPointerUpEPhj>:
#include "tensorflow/lite/kernels/internal/tensor_ctypes.h"
#include "tensorflow/lite/schema/schema_generated.h"

namespace tflite {

uint8_t* AlignPointerUp(uint8_t* data, size_t alignment) {
 8005606:	b480      	push	{r7}
 8005608:	b085      	sub	sp, #20
 800560a:	af00      	add	r7, sp, #0
 800560c:	6078      	str	r0, [r7, #4]
 800560e:	6039      	str	r1, [r7, #0]
  std::uintptr_t data_as_uintptr_t = reinterpret_cast<std::uintptr_t>(data);
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	60fb      	str	r3, [r7, #12]
  uint8_t* aligned_result = reinterpret_cast<uint8_t*>(
      ((data_as_uintptr_t + (alignment - 1)) / alignment) * alignment);
 8005614:	683a      	ldr	r2, [r7, #0]
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	4413      	add	r3, r2
 800561a:	1e5a      	subs	r2, r3, #1
 800561c:	683b      	ldr	r3, [r7, #0]
 800561e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005622:	683a      	ldr	r2, [r7, #0]
 8005624:	fb02 f303 	mul.w	r3, r2, r3
  uint8_t* aligned_result = reinterpret_cast<uint8_t*>(
 8005628:	60bb      	str	r3, [r7, #8]
  return aligned_result;
 800562a:	68bb      	ldr	r3, [r7, #8]
}
 800562c:	4618      	mov	r0, r3
 800562e:	3714      	adds	r7, #20
 8005630:	46bd      	mov	sp, r7
 8005632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005636:	4770      	bx	lr

08005638 <_ZN6tflite16AlignPointerDownEPhj>:

uint8_t* AlignPointerDown(uint8_t* data, size_t alignment) {
 8005638:	b480      	push	{r7}
 800563a:	b085      	sub	sp, #20
 800563c:	af00      	add	r7, sp, #0
 800563e:	6078      	str	r0, [r7, #4]
 8005640:	6039      	str	r1, [r7, #0]
  std::uintptr_t data_as_uintptr_t = reinterpret_cast<std::uintptr_t>(data);
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	60fb      	str	r3, [r7, #12]
  uint8_t* aligned_result =
      reinterpret_cast<uint8_t*>((data_as_uintptr_t / alignment) * alignment);
 8005646:	68fa      	ldr	r2, [r7, #12]
 8005648:	683b      	ldr	r3, [r7, #0]
 800564a:	fbb2 f3f3 	udiv	r3, r2, r3
 800564e:	683a      	ldr	r2, [r7, #0]
 8005650:	fb02 f303 	mul.w	r3, r2, r3
  uint8_t* aligned_result =
 8005654:	60bb      	str	r3, [r7, #8]
  return aligned_result;
 8005656:	68bb      	ldr	r3, [r7, #8]
}
 8005658:	4618      	mov	r0, r3
 800565a:	3714      	adds	r7, #20
 800565c:	46bd      	mov	sp, r7
 800565e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005662:	4770      	bx	lr

08005664 <_ZN6tflite11AlignSizeUpEjj>:

size_t AlignSizeUp(size_t size, size_t alignment) {
 8005664:	b480      	push	{r7}
 8005666:	b085      	sub	sp, #20
 8005668:	af00      	add	r7, sp, #0
 800566a:	6078      	str	r0, [r7, #4]
 800566c:	6039      	str	r1, [r7, #0]
  size_t aligned_size = (((size + (alignment - 1)) / alignment) * alignment);
 800566e:	683a      	ldr	r2, [r7, #0]
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	4413      	add	r3, r2
 8005674:	1e5a      	subs	r2, r3, #1
 8005676:	683b      	ldr	r3, [r7, #0]
 8005678:	fbb2 f2f3 	udiv	r2, r2, r3
 800567c:	683b      	ldr	r3, [r7, #0]
 800567e:	fb02 f303 	mul.w	r3, r2, r3
 8005682:	60fb      	str	r3, [r7, #12]
  return aligned_size;
 8005684:	68fb      	ldr	r3, [r7, #12]
}
 8005686:	4618      	mov	r0, r3
 8005688:	3714      	adds	r7, #20
 800568a:	46bd      	mov	sp, r7
 800568c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005690:	4770      	bx	lr
	...

08005694 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj>:

TfLiteStatus TfLiteTypeSizeOf(TfLiteType type, size_t* size) {
 8005694:	b480      	push	{r7}
 8005696:	b083      	sub	sp, #12
 8005698:	af00      	add	r7, sp, #0
 800569a:	4603      	mov	r3, r0
 800569c:	6039      	str	r1, [r7, #0]
 800569e:	71fb      	strb	r3, [r7, #7]
  switch (type) {
 80056a0:	79fb      	ldrb	r3, [r7, #7]
 80056a2:	3b01      	subs	r3, #1
 80056a4:	2b0f      	cmp	r3, #15
 80056a6:	d857      	bhi.n	8005758 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj+0xc4>
 80056a8:	a201      	add	r2, pc, #4	; (adr r2, 80056b0 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj+0x1c>)
 80056aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056ae:	bf00      	nop
 80056b0:	080056f9 	.word	0x080056f9
 80056b4:	08005711 	.word	0x08005711
 80056b8:	08005721 	.word	0x08005721
 80056bc:	08005731 	.word	0x08005731
 80056c0:	08005759 	.word	0x08005759
 80056c4:	08005741 	.word	0x08005741
 80056c8:	08005709 	.word	0x08005709
 80056cc:	08005749 	.word	0x08005749
 80056d0:	08005729 	.word	0x08005729
 80056d4:	080056f1 	.word	0x080056f1
 80056d8:	08005701 	.word	0x08005701
 80056dc:	08005751 	.word	0x08005751
 80056e0:	08005739 	.word	0x08005739
 80056e4:	08005759 	.word	0x08005759
 80056e8:	08005759 	.word	0x08005759
 80056ec:	08005719 	.word	0x08005719
    case kTfLiteFloat16:
      *size = sizeof(int16_t);
 80056f0:	683b      	ldr	r3, [r7, #0]
 80056f2:	2202      	movs	r2, #2
 80056f4:	601a      	str	r2, [r3, #0]
      break;
 80056f6:	e031      	b.n	800575c <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj+0xc8>
    case kTfLiteFloat32:
      *size = sizeof(float);
 80056f8:	683b      	ldr	r3, [r7, #0]
 80056fa:	2204      	movs	r2, #4
 80056fc:	601a      	str	r2, [r3, #0]
      break;
 80056fe:	e02d      	b.n	800575c <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj+0xc8>
    case kTfLiteFloat64:
      *size = sizeof(double);
 8005700:	683b      	ldr	r3, [r7, #0]
 8005702:	2208      	movs	r2, #8
 8005704:	601a      	str	r2, [r3, #0]
      break;
 8005706:	e029      	b.n	800575c <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj+0xc8>
    case kTfLiteInt16:
      *size = sizeof(int16_t);
 8005708:	683b      	ldr	r3, [r7, #0]
 800570a:	2202      	movs	r2, #2
 800570c:	601a      	str	r2, [r3, #0]
      break;
 800570e:	e025      	b.n	800575c <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj+0xc8>
    case kTfLiteInt32:
      *size = sizeof(int32_t);
 8005710:	683b      	ldr	r3, [r7, #0]
 8005712:	2204      	movs	r2, #4
 8005714:	601a      	str	r2, [r3, #0]
      break;
 8005716:	e021      	b.n	800575c <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj+0xc8>
    case kTfLiteUInt32:
      *size = sizeof(uint32_t);
 8005718:	683b      	ldr	r3, [r7, #0]
 800571a:	2204      	movs	r2, #4
 800571c:	601a      	str	r2, [r3, #0]
      break;
 800571e:	e01d      	b.n	800575c <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj+0xc8>
    case kTfLiteUInt8:
      *size = sizeof(uint8_t);
 8005720:	683b      	ldr	r3, [r7, #0]
 8005722:	2201      	movs	r2, #1
 8005724:	601a      	str	r2, [r3, #0]
      break;
 8005726:	e019      	b.n	800575c <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj+0xc8>
    case kTfLiteInt8:
      *size = sizeof(int8_t);
 8005728:	683b      	ldr	r3, [r7, #0]
 800572a:	2201      	movs	r2, #1
 800572c:	601a      	str	r2, [r3, #0]
      break;
 800572e:	e015      	b.n	800575c <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj+0xc8>
    case kTfLiteInt64:
      *size = sizeof(int64_t);
 8005730:	683b      	ldr	r3, [r7, #0]
 8005732:	2208      	movs	r2, #8
 8005734:	601a      	str	r2, [r3, #0]
      break;
 8005736:	e011      	b.n	800575c <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj+0xc8>
    case kTfLiteUInt64:
      *size = sizeof(uint64_t);
 8005738:	683b      	ldr	r3, [r7, #0]
 800573a:	2208      	movs	r2, #8
 800573c:	601a      	str	r2, [r3, #0]
      break;
 800573e:	e00d      	b.n	800575c <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj+0xc8>
    case kTfLiteBool:
      *size = sizeof(bool);
 8005740:	683b      	ldr	r3, [r7, #0]
 8005742:	2201      	movs	r2, #1
 8005744:	601a      	str	r2, [r3, #0]
      break;
 8005746:	e009      	b.n	800575c <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj+0xc8>
    case kTfLiteComplex64:
      *size = sizeof(float) * 2;
 8005748:	683b      	ldr	r3, [r7, #0]
 800574a:	2208      	movs	r2, #8
 800574c:	601a      	str	r2, [r3, #0]
      break;
 800574e:	e005      	b.n	800575c <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj+0xc8>
    case kTfLiteComplex128:
      *size = sizeof(double) * 2;
 8005750:	683b      	ldr	r3, [r7, #0]
 8005752:	2210      	movs	r2, #16
 8005754:	601a      	str	r2, [r3, #0]
      break;
 8005756:	e001      	b.n	800575c <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj+0xc8>
    default:
      return kTfLiteError;
 8005758:	2301      	movs	r3, #1
 800575a:	e000      	b.n	800575e <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj+0xca>
  }
  return kTfLiteOk;
 800575c:	2300      	movs	r3, #0
}
 800575e:	4618      	mov	r0, r3
 8005760:	370c      	adds	r7, #12
 8005762:	46bd      	mov	sp, r7
 8005764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005768:	4770      	bx	lr
 800576a:	bf00      	nop

0800576c <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE>:

TfLiteStatus BytesRequiredForTensor(const tflite::Tensor& flatbuffer_tensor,
                                    size_t* bytes, size_t* type_size,
                                    ErrorReporter* error_reporter) {
 800576c:	b580      	push	{r7, lr}
 800576e:	b088      	sub	sp, #32
 8005770:	af00      	add	r7, sp, #0
 8005772:	60f8      	str	r0, [r7, #12]
 8005774:	60b9      	str	r1, [r7, #8]
 8005776:	607a      	str	r2, [r7, #4]
 8005778:	603b      	str	r3, [r7, #0]
  int element_count = 1;
 800577a:	2301      	movs	r3, #1
 800577c:	61fb      	str	r3, [r7, #28]
  // If flatbuffer_tensor.shape == nullptr, then flatbuffer_tensor is a scalar
  // so has 1 element.
  if (flatbuffer_tensor.shape() != nullptr) {
 800577e:	68f8      	ldr	r0, [r7, #12]
 8005780:	f7ff fe88 	bl	8005494 <_ZNK6tflite6Tensor5shapeEv>
 8005784:	4603      	mov	r3, r0
 8005786:	2b00      	cmp	r3, #0
 8005788:	bf14      	ite	ne
 800578a:	2301      	movne	r3, #1
 800578c:	2300      	moveq	r3, #0
 800578e:	b2db      	uxtb	r3, r3
 8005790:	2b00      	cmp	r3, #0
 8005792:	d022      	beq.n	80057da <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE+0x6e>
    for (size_t n = 0; n < flatbuffer_tensor.shape()->Length(); ++n) {
 8005794:	2300      	movs	r3, #0
 8005796:	61bb      	str	r3, [r7, #24]
 8005798:	68f8      	ldr	r0, [r7, #12]
 800579a:	f7ff fe7b 	bl	8005494 <_ZNK6tflite6Tensor5shapeEv>
 800579e:	4603      	mov	r3, r0
 80057a0:	4618      	mov	r0, r3
 80057a2:	f000 f884 	bl	80058ae <_ZNK11flatbuffers6VectorIlE6LengthEv>
 80057a6:	4602      	mov	r2, r0
 80057a8:	69bb      	ldr	r3, [r7, #24]
 80057aa:	4293      	cmp	r3, r2
 80057ac:	bf34      	ite	cc
 80057ae:	2301      	movcc	r3, #1
 80057b0:	2300      	movcs	r3, #0
 80057b2:	b2db      	uxtb	r3, r3
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d010      	beq.n	80057da <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE+0x6e>
      element_count *= flatbuffer_tensor.shape()->Get(n);
 80057b8:	68f8      	ldr	r0, [r7, #12]
 80057ba:	f7ff fe6b 	bl	8005494 <_ZNK6tflite6Tensor5shapeEv>
 80057be:	4603      	mov	r3, r0
 80057c0:	69b9      	ldr	r1, [r7, #24]
 80057c2:	4618      	mov	r0, r3
 80057c4:	f7fe fd0e 	bl	80041e4 <_ZNK11flatbuffers6VectorIlE3GetEm>
 80057c8:	4602      	mov	r2, r0
 80057ca:	69fb      	ldr	r3, [r7, #28]
 80057cc:	fb02 f303 	mul.w	r3, r2, r3
 80057d0:	61fb      	str	r3, [r7, #28]
    for (size_t n = 0; n < flatbuffer_tensor.shape()->Length(); ++n) {
 80057d2:	69bb      	ldr	r3, [r7, #24]
 80057d4:	3301      	adds	r3, #1
 80057d6:	61bb      	str	r3, [r7, #24]
 80057d8:	e7de      	b.n	8005798 <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE+0x2c>
    }
  }

  TfLiteType tf_lite_type;
  TF_LITE_ENSURE_STATUS(ConvertTensorType(flatbuffer_tensor.type(),
 80057da:	68f8      	ldr	r0, [r7, #12]
 80057dc:	f7ff fe68 	bl	80054b0 <_ZNK6tflite6Tensor4typeEv>
 80057e0:	4603      	mov	r3, r0
 80057e2:	4618      	mov	r0, r3
 80057e4:	f107 0315 	add.w	r3, r7, #21
 80057e8:	683a      	ldr	r2, [r7, #0]
 80057ea:	4619      	mov	r1, r3
 80057ec:	f7fe fb18 	bl	8003e20 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE>
 80057f0:	4603      	mov	r3, r0
 80057f2:	75fb      	strb	r3, [r7, #23]
 80057f4:	7dfb      	ldrb	r3, [r7, #23]
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d001      	beq.n	80057fe <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE+0x92>
 80057fa:	7dfb      	ldrb	r3, [r7, #23]
 80057fc:	e013      	b.n	8005826 <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE+0xba>
                                          &tf_lite_type, error_reporter));
  TF_LITE_ENSURE_STATUS(TfLiteTypeSizeOf(tf_lite_type, type_size));
 80057fe:	7d7b      	ldrb	r3, [r7, #21]
 8005800:	6879      	ldr	r1, [r7, #4]
 8005802:	4618      	mov	r0, r3
 8005804:	f7ff ff46 	bl	8005694 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj>
 8005808:	4603      	mov	r3, r0
 800580a:	75bb      	strb	r3, [r7, #22]
 800580c:	7dbb      	ldrb	r3, [r7, #22]
 800580e:	2b00      	cmp	r3, #0
 8005810:	d001      	beq.n	8005816 <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE+0xaa>
 8005812:	7dbb      	ldrb	r3, [r7, #22]
 8005814:	e007      	b.n	8005826 <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE+0xba>
  *bytes = element_count * (*type_size);
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	69fa      	ldr	r2, [r7, #28]
 800581c:	fb02 f203 	mul.w	r2, r2, r3
 8005820:	68bb      	ldr	r3, [r7, #8]
 8005822:	601a      	str	r2, [r3, #0]
  return kTfLiteOk;
 8005824:	2300      	movs	r3, #0
}
 8005826:	4618      	mov	r0, r3
 8005828:	3720      	adds	r7, #32
 800582a:	46bd      	mov	sp, r7
 800582c:	bd80      	pop	{r7, pc}

0800582e <_ZN6tflite26TfLiteEvalTensorByteLengthEPK16TfLiteEvalTensorPj>:

TfLiteStatus TfLiteEvalTensorByteLength(const TfLiteEvalTensor* eval_tensor,
                                        size_t* out_bytes) {
 800582e:	b580      	push	{r7, lr}
 8005830:	b086      	sub	sp, #24
 8005832:	af00      	add	r7, sp, #0
 8005834:	6078      	str	r0, [r7, #4]
 8005836:	6039      	str	r1, [r7, #0]
  TFLITE_DCHECK(out_bytes != nullptr);
 8005838:	683b      	ldr	r3, [r7, #0]
 800583a:	2b00      	cmp	r3, #0
 800583c:	d101      	bne.n	8005842 <_ZN6tflite26TfLiteEvalTensorByteLengthEPK16TfLiteEvalTensorPj+0x14>
 800583e:	f005 fc1d 	bl	800b07c <abort>

  int element_count = 1;
 8005842:	2301      	movs	r3, #1
 8005844:	617b      	str	r3, [r7, #20]
  // If eval_tensor->dims == nullptr, then tensor is a scalar so has 1 element.
  if (eval_tensor->dims != nullptr) {
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	685b      	ldr	r3, [r3, #4]
 800584a:	2b00      	cmp	r3, #0
 800584c:	d015      	beq.n	800587a <_ZN6tflite26TfLiteEvalTensorByteLengthEPK16TfLiteEvalTensorPj+0x4c>
    for (int n = 0; n < eval_tensor->dims->size; ++n) {
 800584e:	2300      	movs	r3, #0
 8005850:	613b      	str	r3, [r7, #16]
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	685b      	ldr	r3, [r3, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	693a      	ldr	r2, [r7, #16]
 800585a:	429a      	cmp	r2, r3
 800585c:	da0d      	bge.n	800587a <_ZN6tflite26TfLiteEvalTensorByteLengthEPK16TfLiteEvalTensorPj+0x4c>
      element_count *= eval_tensor->dims->data[n];
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	685a      	ldr	r2, [r3, #4]
 8005862:	693b      	ldr	r3, [r7, #16]
 8005864:	009b      	lsls	r3, r3, #2
 8005866:	4413      	add	r3, r2
 8005868:	685a      	ldr	r2, [r3, #4]
 800586a:	697b      	ldr	r3, [r7, #20]
 800586c:	fb02 f303 	mul.w	r3, r2, r3
 8005870:	617b      	str	r3, [r7, #20]
    for (int n = 0; n < eval_tensor->dims->size; ++n) {
 8005872:	693b      	ldr	r3, [r7, #16]
 8005874:	3301      	adds	r3, #1
 8005876:	613b      	str	r3, [r7, #16]
 8005878:	e7eb      	b.n	8005852 <_ZN6tflite26TfLiteEvalTensorByteLengthEPK16TfLiteEvalTensorPj+0x24>
    }
  }
  size_t type_size;
  TF_LITE_ENSURE_STATUS(TfLiteTypeSizeOf(eval_tensor->type, &type_size));
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	7a1b      	ldrb	r3, [r3, #8]
 800587e:	f107 0208 	add.w	r2, r7, #8
 8005882:	4611      	mov	r1, r2
 8005884:	4618      	mov	r0, r3
 8005886:	f7ff ff05 	bl	8005694 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj>
 800588a:	4603      	mov	r3, r0
 800588c:	73fb      	strb	r3, [r7, #15]
 800588e:	7bfb      	ldrb	r3, [r7, #15]
 8005890:	2b00      	cmp	r3, #0
 8005892:	d001      	beq.n	8005898 <_ZN6tflite26TfLiteEvalTensorByteLengthEPK16TfLiteEvalTensorPj+0x6a>
 8005894:	7bfb      	ldrb	r3, [r7, #15]
 8005896:	e006      	b.n	80058a6 <_ZN6tflite26TfLiteEvalTensorByteLengthEPK16TfLiteEvalTensorPj+0x78>
  *out_bytes = element_count * type_size;
 8005898:	697b      	ldr	r3, [r7, #20]
 800589a:	68ba      	ldr	r2, [r7, #8]
 800589c:	fb02 f203 	mul.w	r2, r2, r3
 80058a0:	683b      	ldr	r3, [r7, #0]
 80058a2:	601a      	str	r2, [r3, #0]
  return kTfLiteOk;
 80058a4:	2300      	movs	r3, #0
}
 80058a6:	4618      	mov	r0, r3
 80058a8:	3718      	adds	r7, #24
 80058aa:	46bd      	mov	sp, r7
 80058ac:	bd80      	pop	{r7, pc}

080058ae <_ZNK11flatbuffers6VectorIlE6LengthEv>:
  uoffset_t Length() const { return size(); }
 80058ae:	b580      	push	{r7, lr}
 80058b0:	b082      	sub	sp, #8
 80058b2:	af00      	add	r7, sp, #0
 80058b4:	6078      	str	r0, [r7, #4]
 80058b6:	6878      	ldr	r0, [r7, #4]
 80058b8:	f7fe fc85 	bl	80041c6 <_ZNK11flatbuffers6VectorIlE4sizeEv>
 80058bc:	4603      	mov	r3, r0
 80058be:	4618      	mov	r0, r3
 80058c0:	3708      	adds	r7, #8
 80058c2:	46bd      	mov	sp, r7
 80058c4:	bd80      	pop	{r7, pc}

080058c6 <_ZNK6tflite22QuantizationParameters5scaleEv>:
  const flatbuffers::Vector<float> *scale() const {
 80058c6:	b580      	push	{r7, lr}
 80058c8:	b082      	sub	sp, #8
 80058ca:	af00      	add	r7, sp, #0
 80058cc:	6078      	str	r0, [r7, #4]
    return GetPointer<const flatbuffers::Vector<float> *>(VT_SCALE);
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	2108      	movs	r1, #8
 80058d2:	4618      	mov	r0, r3
 80058d4:	f001 fc7f 	bl	80071d6 <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorIfEEEET_t>
 80058d8:	4603      	mov	r3, r0
  }
 80058da:	4618      	mov	r0, r3
 80058dc:	3708      	adds	r7, #8
 80058de:	46bd      	mov	sp, r7
 80058e0:	bd80      	pop	{r7, pc}

080058e2 <_ZNK6tflite22QuantizationParameters10zero_pointEv>:
  const flatbuffers::Vector<int64_t> *zero_point() const {
 80058e2:	b580      	push	{r7, lr}
 80058e4:	b082      	sub	sp, #8
 80058e6:	af00      	add	r7, sp, #0
 80058e8:	6078      	str	r0, [r7, #4]
    return GetPointer<const flatbuffers::Vector<int64_t> *>(VT_ZERO_POINT);
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	210a      	movs	r1, #10
 80058ee:	4618      	mov	r0, r3
 80058f0:	f001 fc81 	bl	80071f6 <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorIxEEEET_t>
 80058f4:	4603      	mov	r3, r0
  }
 80058f6:	4618      	mov	r0, r3
 80058f8:	3708      	adds	r7, #8
 80058fa:	46bd      	mov	sp, r7
 80058fc:	bd80      	pop	{r7, pc}

080058fe <_ZNK6tflite22QuantizationParameters19quantized_dimensionEv>:
  int32_t quantized_dimension() const {
 80058fe:	b580      	push	{r7, lr}
 8005900:	b082      	sub	sp, #8
 8005902:	af00      	add	r7, sp, #0
 8005904:	6078      	str	r0, [r7, #4]
    return GetField<int32_t>(VT_QUANTIZED_DIMENSION, 0);
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	2200      	movs	r2, #0
 800590a:	2110      	movs	r1, #16
 800590c:	4618      	mov	r0, r3
 800590e:	f7fe fbfc 	bl	800410a <_ZNK11flatbuffers5Table8GetFieldIlEET_tS2_>
 8005912:	4603      	mov	r3, r0
  }
 8005914:	4618      	mov	r0, r3
 8005916:	3708      	adds	r7, #8
 8005918:	46bd      	mov	sp, r7
 800591a:	bd80      	pop	{r7, pc}

0800591c <_ZNK6tflite6Tensor6bufferEv>:
  uint32_t buffer() const {
 800591c:	b580      	push	{r7, lr}
 800591e:	b082      	sub	sp, #8
 8005920:	af00      	add	r7, sp, #0
 8005922:	6078      	str	r0, [r7, #4]
    return GetField<uint32_t>(VT_BUFFER, 0);
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	2200      	movs	r2, #0
 8005928:	2108      	movs	r1, #8
 800592a:	4618      	mov	r0, r3
 800592c:	f7fc f8f0 	bl	8001b10 <_ZNK11flatbuffers5Table8GetFieldImEET_tS2_>
 8005930:	4603      	mov	r3, r0
  }
 8005932:	4618      	mov	r0, r3
 8005934:	3708      	adds	r7, #8
 8005936:	46bd      	mov	sp, r7
 8005938:	bd80      	pop	{r7, pc}

0800593a <_ZNK6tflite6Tensor12quantizationEv>:
  const tflite::QuantizationParameters *quantization() const {
 800593a:	b580      	push	{r7, lr}
 800593c:	b082      	sub	sp, #8
 800593e:	af00      	add	r7, sp, #0
 8005940:	6078      	str	r0, [r7, #4]
    return GetPointer<const tflite::QuantizationParameters *>(VT_QUANTIZATION);
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	210c      	movs	r1, #12
 8005946:	4618      	mov	r0, r3
 8005948:	f001 fc65 	bl	8007216 <_ZNK11flatbuffers5Table10GetPointerIPKN6tflite22QuantizationParametersEEET_t>
 800594c:	4603      	mov	r3, r0
  }
 800594e:	4618      	mov	r0, r3
 8005950:	3708      	adds	r7, #8
 8005952:	46bd      	mov	sp, r7
 8005954:	bd80      	pop	{r7, pc}

08005956 <_ZNK6tflite6Tensor11is_variableEv>:
  bool is_variable() const {
 8005956:	b580      	push	{r7, lr}
 8005958:	b082      	sub	sp, #8
 800595a:	af00      	add	r7, sp, #0
 800595c:	6078      	str	r0, [r7, #4]
    return GetField<uint8_t>(VT_IS_VARIABLE, 0) != 0;
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	2200      	movs	r2, #0
 8005962:	210e      	movs	r1, #14
 8005964:	4618      	mov	r0, r3
 8005966:	f7fe fba1 	bl	80040ac <_ZNK11flatbuffers5Table8GetFieldIhEET_tS2_>
 800596a:	4603      	mov	r3, r0
 800596c:	2b00      	cmp	r3, #0
 800596e:	bf14      	ite	ne
 8005970:	2301      	movne	r3, #1
 8005972:	2300      	moveq	r3, #0
 8005974:	b2db      	uxtb	r3, r3
  }
 8005976:	4618      	mov	r0, r3
 8005978:	3708      	adds	r7, #8
 800597a:	46bd      	mov	sp, r7
 800597c:	bd80      	pop	{r7, pc}

0800597e <_ZNK6tflite8Operator6inputsEv>:
  const flatbuffers::Vector<int32_t> *inputs() const {
 800597e:	b580      	push	{r7, lr}
 8005980:	b082      	sub	sp, #8
 8005982:	af00      	add	r7, sp, #0
 8005984:	6078      	str	r0, [r7, #4]
    return GetPointer<const flatbuffers::Vector<int32_t> *>(VT_INPUTS);
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	2106      	movs	r1, #6
 800598a:	4618      	mov	r0, r3
 800598c:	f7fe fbdb 	bl	8004146 <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorIlEEEET_t>
 8005990:	4603      	mov	r3, r0
  }
 8005992:	4618      	mov	r0, r3
 8005994:	3708      	adds	r7, #8
 8005996:	46bd      	mov	sp, r7
 8005998:	bd80      	pop	{r7, pc}

0800599a <_ZNK6tflite8Operator7outputsEv>:
  const flatbuffers::Vector<int32_t> *outputs() const {
 800599a:	b580      	push	{r7, lr}
 800599c:	b082      	sub	sp, #8
 800599e:	af00      	add	r7, sp, #0
 80059a0:	6078      	str	r0, [r7, #4]
    return GetPointer<const flatbuffers::Vector<int32_t> *>(VT_OUTPUTS);
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	2108      	movs	r1, #8
 80059a6:	4618      	mov	r0, r3
 80059a8:	f7fe fbcd 	bl	8004146 <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorIlEEEET_t>
 80059ac:	4603      	mov	r3, r0
  }
 80059ae:	4618      	mov	r0, r3
 80059b0:	3708      	adds	r7, #8
 80059b2:	46bd      	mov	sp, r7
 80059b4:	bd80      	pop	{r7, pc}

080059b6 <_ZNK6tflite8SubGraph7tensorsEv>:
  const flatbuffers::Vector<flatbuffers::Offset<tflite::Tensor>> *tensors() const {
 80059b6:	b580      	push	{r7, lr}
 80059b8:	b082      	sub	sp, #8
 80059ba:	af00      	add	r7, sp, #0
 80059bc:	6078      	str	r0, [r7, #4]
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<tflite::Tensor>> *>(VT_TENSORS);
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	2104      	movs	r1, #4
 80059c2:	4618      	mov	r0, r3
 80059c4:	f001 fc37 	bl	8007236 <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite6TensorEEEEEEET_t>
 80059c8:	4603      	mov	r3, r0
  }
 80059ca:	4618      	mov	r0, r3
 80059cc:	3708      	adds	r7, #8
 80059ce:	46bd      	mov	sp, r7
 80059d0:	bd80      	pop	{r7, pc}

080059d2 <_ZNK6tflite8SubGraph6inputsEv>:
  const flatbuffers::Vector<int32_t> *inputs() const {
 80059d2:	b580      	push	{r7, lr}
 80059d4:	b082      	sub	sp, #8
 80059d6:	af00      	add	r7, sp, #0
 80059d8:	6078      	str	r0, [r7, #4]
    return GetPointer<const flatbuffers::Vector<int32_t> *>(VT_INPUTS);
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	2106      	movs	r1, #6
 80059de:	4618      	mov	r0, r3
 80059e0:	f7fe fbb1 	bl	8004146 <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorIlEEEET_t>
 80059e4:	4603      	mov	r3, r0
  }
 80059e6:	4618      	mov	r0, r3
 80059e8:	3708      	adds	r7, #8
 80059ea:	46bd      	mov	sp, r7
 80059ec:	bd80      	pop	{r7, pc}

080059ee <_ZNK6tflite8SubGraph7outputsEv>:
  const flatbuffers::Vector<int32_t> *outputs() const {
 80059ee:	b580      	push	{r7, lr}
 80059f0:	b082      	sub	sp, #8
 80059f2:	af00      	add	r7, sp, #0
 80059f4:	6078      	str	r0, [r7, #4]
    return GetPointer<const flatbuffers::Vector<int32_t> *>(VT_OUTPUTS);
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	2108      	movs	r1, #8
 80059fa:	4618      	mov	r0, r3
 80059fc:	f7fe fba3 	bl	8004146 <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorIlEEEET_t>
 8005a00:	4603      	mov	r3, r0
  }
 8005a02:	4618      	mov	r0, r3
 8005a04:	3708      	adds	r7, #8
 8005a06:	46bd      	mov	sp, r7
 8005a08:	bd80      	pop	{r7, pc}

08005a0a <_ZNK6tflite6Buffer4dataEv>:
  const flatbuffers::Vector<uint8_t> *data() const {
 8005a0a:	b580      	push	{r7, lr}
 8005a0c:	b082      	sub	sp, #8
 8005a0e:	af00      	add	r7, sp, #0
 8005a10:	6078      	str	r0, [r7, #4]
    return GetPointer<const flatbuffers::Vector<uint8_t> *>(VT_DATA);
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	2104      	movs	r1, #4
 8005a16:	4618      	mov	r0, r3
 8005a18:	f001 fbcd 	bl	80071b6 <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorIhEEEET_t>
 8005a1c:	4603      	mov	r3, r0
  }
 8005a1e:	4618      	mov	r0, r3
 8005a20:	3708      	adds	r7, #8
 8005a22:	46bd      	mov	sp, r7
 8005a24:	bd80      	pop	{r7, pc}

08005a26 <_ZNK6tflite8Metadata4nameEv>:
  const flatbuffers::String *name() const {
 8005a26:	b580      	push	{r7, lr}
 8005a28:	b082      	sub	sp, #8
 8005a2a:	af00      	add	r7, sp, #0
 8005a2c:	6078      	str	r0, [r7, #4]
    return GetPointer<const flatbuffers::String *>(VT_NAME);
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	2104      	movs	r1, #4
 8005a32:	4618      	mov	r0, r3
 8005a34:	f7fe fbb7 	bl	80041a6 <_ZNK11flatbuffers5Table10GetPointerIPKNS_6StringEEET_t>
 8005a38:	4603      	mov	r3, r0
  }
 8005a3a:	4618      	mov	r0, r3
 8005a3c:	3708      	adds	r7, #8
 8005a3e:	46bd      	mov	sp, r7
 8005a40:	bd80      	pop	{r7, pc}

08005a42 <_ZNK6tflite8Metadata6bufferEv>:
  uint32_t buffer() const {
 8005a42:	b580      	push	{r7, lr}
 8005a44:	b082      	sub	sp, #8
 8005a46:	af00      	add	r7, sp, #0
 8005a48:	6078      	str	r0, [r7, #4]
    return GetField<uint32_t>(VT_BUFFER, 0);
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	2200      	movs	r2, #0
 8005a4e:	2106      	movs	r1, #6
 8005a50:	4618      	mov	r0, r3
 8005a52:	f7fc f85d 	bl	8001b10 <_ZNK11flatbuffers5Table8GetFieldImEET_tS2_>
 8005a56:	4603      	mov	r3, r0
  }
 8005a58:	4618      	mov	r0, r3
 8005a5a:	3708      	adds	r7, #8
 8005a5c:	46bd      	mov	sp, r7
 8005a5e:	bd80      	pop	{r7, pc}

08005a60 <_ZNK6tflite5Model7buffersEv>:
  const flatbuffers::Vector<flatbuffers::Offset<tflite::Buffer>> *buffers() const {
 8005a60:	b580      	push	{r7, lr}
 8005a62:	b082      	sub	sp, #8
 8005a64:	af00      	add	r7, sp, #0
 8005a66:	6078      	str	r0, [r7, #4]
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<tflite::Buffer>> *>(VT_BUFFERS);
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	210c      	movs	r1, #12
 8005a6c:	4618      	mov	r0, r3
 8005a6e:	f001 fbf2 	bl	8007256 <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite6BufferEEEEEEET_t>
 8005a72:	4603      	mov	r3, r0
  }
 8005a74:	4618      	mov	r0, r3
 8005a76:	3708      	adds	r7, #8
 8005a78:	46bd      	mov	sp, r7
 8005a7a:	bd80      	pop	{r7, pc}

08005a7c <_ZNK6tflite5Model8metadataEv>:
  const flatbuffers::Vector<flatbuffers::Offset<tflite::Metadata>> *metadata() const {
 8005a7c:	b580      	push	{r7, lr}
 8005a7e:	b082      	sub	sp, #8
 8005a80:	af00      	add	r7, sp, #0
 8005a82:	6078      	str	r0, [r7, #4]
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<tflite::Metadata>> *>(VT_METADATA);
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	2110      	movs	r1, #16
 8005a88:	4618      	mov	r0, r3
 8005a8a:	f001 fbf4 	bl	8007276 <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite8MetadataEEEEEEET_t>
 8005a8e:	4603      	mov	r3, r0
  }
 8005a90:	4618      	mov	r0, r3
 8005a92:	3708      	adds	r7, #8
 8005a94:	46bd      	mov	sp, r7
 8005a96:	bd80      	pop	{r7, pc}

08005a98 <_ZN6tflite20BuiltinDataAllocatorD1Ev>:

  virtual ~BuiltinDataAllocator() {}
 8005a98:	b480      	push	{r7}
 8005a9a:	b083      	sub	sp, #12
 8005a9c:	af00      	add	r7, sp, #0
 8005a9e:	6078      	str	r0, [r7, #4]
 8005aa0:	4a04      	ldr	r2, [pc, #16]	; (8005ab4 <_ZN6tflite20BuiltinDataAllocatorD1Ev+0x1c>)
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	601a      	str	r2, [r3, #0]
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	4618      	mov	r0, r3
 8005aaa:	370c      	adds	r7, #12
 8005aac:	46bd      	mov	sp, r7
 8005aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ab2:	4770      	bx	lr
 8005ab4:	08021b3c 	.word	0x08021b3c

08005ab8 <_ZN6tflite20BuiltinDataAllocatorD0Ev>:
 8005ab8:	b580      	push	{r7, lr}
 8005aba:	b082      	sub	sp, #8
 8005abc:	af00      	add	r7, sp, #0
 8005abe:	6078      	str	r0, [r7, #4]
 8005ac0:	6878      	ldr	r0, [r7, #4]
 8005ac2:	f7ff ffe9 	bl	8005a98 <_ZN6tflite20BuiltinDataAllocatorD1Ev>
 8005ac6:	2104      	movs	r1, #4
 8005ac8:	6878      	ldr	r0, [r7, #4]
 8005aca:	f005 f9f0 	bl	800aeae <_ZdlPvj>
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	4618      	mov	r0, r3
 8005ad2:	3708      	adds	r7, #8
 8005ad4:	46bd      	mov	sp, r7
 8005ad6:	bd80      	pop	{r7, pc}

08005ad8 <_ZN6tflite20BuiltinDataAllocatorC1Ev>:
class BuiltinDataAllocator {
 8005ad8:	b480      	push	{r7}
 8005ada:	b083      	sub	sp, #12
 8005adc:	af00      	add	r7, sp, #0
 8005ade:	6078      	str	r0, [r7, #4]
 8005ae0:	4a04      	ldr	r2, [pc, #16]	; (8005af4 <_ZN6tflite20BuiltinDataAllocatorC1Ev+0x1c>)
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	601a      	str	r2, [r3, #0]
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	4618      	mov	r0, r3
 8005aea:	370c      	adds	r7, #12
 8005aec:	46bd      	mov	sp, r7
 8005aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af2:	4770      	bx	lr
 8005af4:	08021b3c 	.word	0x08021b3c

08005af8 <_ZN6tflite12_GLOBAL__N_125MicroBuiltinDataAllocatorC1EPNS_21SimpleMemoryAllocatorE>:
constexpr char kOfflineMemAllocMetadata[] = "OfflineMemoryAllocation";
const TfLiteIntArray kZeroLengthIntArray = {};

class MicroBuiltinDataAllocator : public BuiltinDataAllocator {
 public:
  explicit MicroBuiltinDataAllocator(SimpleMemoryAllocator* memory_allocator)
 8005af8:	b580      	push	{r7, lr}
 8005afa:	b082      	sub	sp, #8
 8005afc:	af00      	add	r7, sp, #0
 8005afe:	6078      	str	r0, [r7, #4]
 8005b00:	6039      	str	r1, [r7, #0]
      : memory_allocator_(memory_allocator) {}
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	4618      	mov	r0, r3
 8005b06:	f7ff ffe7 	bl	8005ad8 <_ZN6tflite20BuiltinDataAllocatorC1Ev>
 8005b0a:	4a05      	ldr	r2, [pc, #20]	; (8005b20 <_ZN6tflite12_GLOBAL__N_125MicroBuiltinDataAllocatorC1EPNS_21SimpleMemoryAllocatorE+0x28>)
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	601a      	str	r2, [r3, #0]
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	683a      	ldr	r2, [r7, #0]
 8005b14:	605a      	str	r2, [r3, #4]
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	4618      	mov	r0, r3
 8005b1a:	3708      	adds	r7, #8
 8005b1c:	46bd      	mov	sp, r7
 8005b1e:	bd80      	pop	{r7, pc}
 8005b20:	08021ae8 	.word	0x08021ae8

08005b24 <_ZN6tflite12_GLOBAL__N_125MicroBuiltinDataAllocator8AllocateEjj>:

  void* Allocate(size_t size, size_t alignment_hint) override {
 8005b24:	b580      	push	{r7, lr}
 8005b26:	b084      	sub	sp, #16
 8005b28:	af00      	add	r7, sp, #0
 8005b2a:	60f8      	str	r0, [r7, #12]
 8005b2c:	60b9      	str	r1, [r7, #8]
 8005b2e:	607a      	str	r2, [r7, #4]
    return memory_allocator_->AllocateFromTail(size, alignment_hint);
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	6858      	ldr	r0, [r3, #4]
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	685b      	ldr	r3, [r3, #4]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	330c      	adds	r3, #12
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	687a      	ldr	r2, [r7, #4]
 8005b40:	68b9      	ldr	r1, [r7, #8]
 8005b42:	4798      	blx	r3
 8005b44:	4603      	mov	r3, r0
  }
 8005b46:	4618      	mov	r0, r3
 8005b48:	3710      	adds	r7, #16
 8005b4a:	46bd      	mov	sp, r7
 8005b4c:	bd80      	pop	{r7, pc}

08005b4e <_ZN6tflite12_GLOBAL__N_125MicroBuiltinDataAllocator10DeallocateEPv>:
  void Deallocate(void* data) override {
 8005b4e:	b480      	push	{r7}
 8005b50:	b083      	sub	sp, #12
 8005b52:	af00      	add	r7, sp, #0
 8005b54:	6078      	str	r0, [r7, #4]
 8005b56:	6039      	str	r1, [r7, #0]
    // Do not deallocate, builtin data needs to be available for the life time
    // of the model.
  }
 8005b58:	bf00      	nop
 8005b5a:	370c      	adds	r7, #12
 8005b5c:	46bd      	mov	sp, r7
 8005b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b62:	4770      	bx	lr

08005b64 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilderC1EPNS0_14AllocationInfoEjjPNS_13ErrorReporterE>:
// A helper class to construct AllocationInfo array. This array contains the
// lifetime of tensors / scratch_buffer and will be used to calculate the memory
// plan. Methods need to be called in order from `Init`, `Add*`, to `Finish`.
class AllocationInfoBuilder {
 public:
  AllocationInfoBuilder(AllocationInfo* info, size_t tensor_count,
 8005b64:	b480      	push	{r7}
 8005b66:	b085      	sub	sp, #20
 8005b68:	af00      	add	r7, sp, #0
 8005b6a:	60f8      	str	r0, [r7, #12]
 8005b6c:	60b9      	str	r1, [r7, #8]
 8005b6e:	607a      	str	r2, [r7, #4]
 8005b70:	603b      	str	r3, [r7, #0]
                        size_t scratch_buffer_count, ErrorReporter* reporter)
      : info_(info),
        tensor_count_(tensor_count),
        buffer_count_(scratch_buffer_count),
        reporter_(reporter) {}
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	68ba      	ldr	r2, [r7, #8]
 8005b76:	601a      	str	r2, [r3, #0]
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	687a      	ldr	r2, [r7, #4]
 8005b7c:	605a      	str	r2, [r3, #4]
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	683a      	ldr	r2, [r7, #0]
 8005b82:	609a      	str	r2, [r3, #8]
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	69ba      	ldr	r2, [r7, #24]
 8005b88:	60da      	str	r2, [r3, #12]
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	4618      	mov	r0, r3
 8005b8e:	3714      	adds	r7, #20
 8005b90:	46bd      	mov	sp, r7
 8005b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b96:	4770      	bx	lr

08005b98 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP16TfLiteEvalTensor>:
  ErrorReporter* reporter_ = nullptr;
};

TfLiteStatus AllocationInfoBuilder::AddTensors(const SubGraph* subgraph,
                                               const int32_t* offline_offsets,
                                               TfLiteEvalTensor* eval_tensors) {
 8005b98:	b580      	push	{r7, lr}
 8005b9a:	b096      	sub	sp, #88	; 0x58
 8005b9c:	af00      	add	r7, sp, #0
 8005b9e:	60f8      	str	r0, [r7, #12]
 8005ba0:	60b9      	str	r1, [r7, #8]
 8005ba2:	607a      	str	r2, [r7, #4]
 8005ba4:	603b      	str	r3, [r7, #0]
  TFLITE_DCHECK(eval_tensors != nullptr);
 8005ba6:	683b      	ldr	r3, [r7, #0]
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d101      	bne.n	8005bb0 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP16TfLiteEvalTensor+0x18>
 8005bac:	f005 fa66 	bl	800b07c <abort>

  // Set up allocation info for all tensors.
  for (size_t i = 0; i < tensor_count_; ++i) {
 8005bb0:	2300      	movs	r3, #0
 8005bb2:	657b      	str	r3, [r7, #84]	; 0x54
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	685b      	ldr	r3, [r3, #4]
 8005bb8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005bba:	429a      	cmp	r2, r3
 8005bbc:	d267      	bcs.n	8005c8e <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP16TfLiteEvalTensor+0xf6>
    AllocationInfo* current = &info_[i];
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	6819      	ldr	r1, [r3, #0]
 8005bc2:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005bc4:	4613      	mov	r3, r2
 8005bc6:	005b      	lsls	r3, r3, #1
 8005bc8:	4413      	add	r3, r2
 8005bca:	00db      	lsls	r3, r3, #3
 8005bcc:	440b      	add	r3, r1
 8005bce:	63fb      	str	r3, [r7, #60]	; 0x3c
    current->output_ptr = &(eval_tensors[i].data.data);
 8005bd0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005bd2:	4613      	mov	r3, r2
 8005bd4:	005b      	lsls	r3, r3, #1
 8005bd6:	4413      	add	r3, r2
 8005bd8:	009b      	lsls	r3, r3, #2
 8005bda:	461a      	mov	r2, r3
 8005bdc:	683b      	ldr	r3, [r7, #0]
 8005bde:	4413      	add	r3, r2
 8005be0:	461a      	mov	r2, r3
 8005be2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005be4:	605a      	str	r2, [r3, #4]

    TF_LITE_ENSURE_STATUS(
 8005be6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005be8:	4613      	mov	r3, r2
 8005bea:	005b      	lsls	r3, r3, #1
 8005bec:	4413      	add	r3, r2
 8005bee:	009b      	lsls	r3, r3, #2
 8005bf0:	461a      	mov	r2, r3
 8005bf2:	683b      	ldr	r3, [r7, #0]
 8005bf4:	4413      	add	r3, r2
 8005bf6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005bf8:	4611      	mov	r1, r2
 8005bfa:	4618      	mov	r0, r3
 8005bfc:	f7ff fe17 	bl	800582e <_ZN6tflite26TfLiteEvalTensorByteLengthEPK16TfLiteEvalTensorPj>
 8005c00:	4603      	mov	r3, r0
 8005c02:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8005c06:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d002      	beq.n	8005c14 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP16TfLiteEvalTensor+0x7c>
 8005c0e:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8005c12:	e117      	b.n	8005e44 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP16TfLiteEvalTensor+0x2ac>
        TfLiteEvalTensorByteLength(&eval_tensors[i], &current->bytes));

    current->first_created = -1;
 8005c14:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005c16:	f04f 32ff 	mov.w	r2, #4294967295
 8005c1a:	609a      	str	r2, [r3, #8]
    current->last_used = -1;
 8005c1c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005c1e:	f04f 32ff 	mov.w	r2, #4294967295
 8005c22:	60da      	str	r2, [r3, #12]
    current->needs_allocating = (eval_tensors[i].data.data == nullptr) &&
 8005c24:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005c26:	4613      	mov	r3, r2
 8005c28:	005b      	lsls	r3, r3, #1
 8005c2a:	4413      	add	r3, r2
 8005c2c:	009b      	lsls	r3, r3, #2
 8005c2e:	461a      	mov	r2, r3
 8005c30:	683b      	ldr	r3, [r7, #0]
 8005c32:	4413      	add	r3, r2
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d113      	bne.n	8005c62 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP16TfLiteEvalTensor+0xca>
                                (!subgraph->tensors()->Get(i)->is_variable());
 8005c3a:	68b8      	ldr	r0, [r7, #8]
 8005c3c:	f7ff febb 	bl	80059b6 <_ZNK6tflite8SubGraph7tensorsEv>
 8005c40:	4603      	mov	r3, r0
 8005c42:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005c44:	4618      	mov	r0, r3
 8005c46:	f001 fbaf 	bl	80073a8 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEE3GetEm>
 8005c4a:	4603      	mov	r3, r0
 8005c4c:	4618      	mov	r0, r3
 8005c4e:	f7ff fe82 	bl	8005956 <_ZNK6tflite6Tensor11is_variableEv>
 8005c52:	4603      	mov	r3, r0
 8005c54:	f083 0301 	eor.w	r3, r3, #1
 8005c58:	b2db      	uxtb	r3, r3
    current->needs_allocating = (eval_tensors[i].data.data == nullptr) &&
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d001      	beq.n	8005c62 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP16TfLiteEvalTensor+0xca>
 8005c5e:	2201      	movs	r2, #1
 8005c60:	e000      	b.n	8005c64 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP16TfLiteEvalTensor+0xcc>
 8005c62:	2200      	movs	r2, #0
 8005c64:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005c66:	751a      	strb	r2, [r3, #20]
    if (offline_offsets) {
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d007      	beq.n	8005c7e <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP16TfLiteEvalTensor+0xe6>
      current->offline_offset = offline_offsets[i];
 8005c6e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005c70:	009b      	lsls	r3, r3, #2
 8005c72:	687a      	ldr	r2, [r7, #4]
 8005c74:	4413      	add	r3, r2
 8005c76:	681a      	ldr	r2, [r3, #0]
 8005c78:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005c7a:	611a      	str	r2, [r3, #16]
 8005c7c:	e003      	b.n	8005c86 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP16TfLiteEvalTensor+0xee>
    } else {
      current->offline_offset = kOnlinePlannedBuffer;
 8005c7e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005c80:	f04f 32ff 	mov.w	r2, #4294967295
 8005c84:	611a      	str	r2, [r3, #16]
  for (size_t i = 0; i < tensor_count_; ++i) {
 8005c86:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005c88:	3301      	adds	r3, #1
 8005c8a:	657b      	str	r3, [r7, #84]	; 0x54
 8005c8c:	e792      	b.n	8005bb4 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP16TfLiteEvalTensor+0x1c>
    }
  }

  uint32_t operators_size = NumSubgraphOperators(subgraph);
 8005c8e:	68b8      	ldr	r0, [r7, #8]
 8005c90:	f7ff fafc 	bl	800528c <_ZN6tflite20NumSubgraphOperatorsEPKNS_8SubGraphE>
 8005c94:	6378      	str	r0, [r7, #52]	; 0x34

  for (size_t i = 0; i < subgraph->inputs()->size(); ++i) {
 8005c96:	2300      	movs	r3, #0
 8005c98:	653b      	str	r3, [r7, #80]	; 0x50
 8005c9a:	68b8      	ldr	r0, [r7, #8]
 8005c9c:	f7ff fe99 	bl	80059d2 <_ZNK6tflite8SubGraph6inputsEv>
 8005ca0:	4603      	mov	r3, r0
 8005ca2:	4618      	mov	r0, r3
 8005ca4:	f7fe fa8f 	bl	80041c6 <_ZNK11flatbuffers6VectorIlE4sizeEv>
 8005ca8:	4602      	mov	r2, r0
 8005caa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005cac:	4293      	cmp	r3, r2
 8005cae:	bf34      	ite	cc
 8005cb0:	2301      	movcc	r3, #1
 8005cb2:	2300      	movcs	r3, #0
 8005cb4:	b2db      	uxtb	r3, r3
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d018      	beq.n	8005cec <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP16TfLiteEvalTensor+0x154>
    const int tensor_index = subgraph->inputs()->Get(i);
 8005cba:	68b8      	ldr	r0, [r7, #8]
 8005cbc:	f7ff fe89 	bl	80059d2 <_ZNK6tflite8SubGraph6inputsEv>
 8005cc0:	4603      	mov	r3, r0
 8005cc2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005cc4:	4618      	mov	r0, r3
 8005cc6:	f7fe fa8d 	bl	80041e4 <_ZNK11flatbuffers6VectorIlE3GetEm>
 8005cca:	6178      	str	r0, [r7, #20]
    AllocationInfo* current = &info_[tensor_index];
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	6819      	ldr	r1, [r3, #0]
 8005cd0:	697a      	ldr	r2, [r7, #20]
 8005cd2:	4613      	mov	r3, r2
 8005cd4:	005b      	lsls	r3, r3, #1
 8005cd6:	4413      	add	r3, r2
 8005cd8:	00db      	lsls	r3, r3, #3
 8005cda:	440b      	add	r3, r1
 8005cdc:	613b      	str	r3, [r7, #16]
    current->first_created = 0;
 8005cde:	693b      	ldr	r3, [r7, #16]
 8005ce0:	2200      	movs	r2, #0
 8005ce2:	609a      	str	r2, [r3, #8]
  for (size_t i = 0; i < subgraph->inputs()->size(); ++i) {
 8005ce4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005ce6:	3301      	adds	r3, #1
 8005ce8:	653b      	str	r3, [r7, #80]	; 0x50
 8005cea:	e7d6      	b.n	8005c9a <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP16TfLiteEvalTensor+0x102>
  }

  // Mark all outputs as persistent to the end of the invocation.
  for (size_t i = 0; i < subgraph->outputs()->size(); ++i) {
 8005cec:	2300      	movs	r3, #0
 8005cee:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005cf0:	68b8      	ldr	r0, [r7, #8]
 8005cf2:	f7ff fe7c 	bl	80059ee <_ZNK6tflite8SubGraph7outputsEv>
 8005cf6:	4603      	mov	r3, r0
 8005cf8:	4618      	mov	r0, r3
 8005cfa:	f7fe fa64 	bl	80041c6 <_ZNK11flatbuffers6VectorIlE4sizeEv>
 8005cfe:	4602      	mov	r2, r0
 8005d00:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005d02:	4293      	cmp	r3, r2
 8005d04:	bf34      	ite	cc
 8005d06:	2301      	movcc	r3, #1
 8005d08:	2300      	movcs	r3, #0
 8005d0a:	b2db      	uxtb	r3, r3
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d01a      	beq.n	8005d46 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP16TfLiteEvalTensor+0x1ae>
    const int tensor_index = subgraph->outputs()->Get(i);
 8005d10:	68b8      	ldr	r0, [r7, #8]
 8005d12:	f7ff fe6c 	bl	80059ee <_ZNK6tflite8SubGraph7outputsEv>
 8005d16:	4603      	mov	r3, r0
 8005d18:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8005d1a:	4618      	mov	r0, r3
 8005d1c:	f7fe fa62 	bl	80041e4 <_ZNK11flatbuffers6VectorIlE3GetEm>
 8005d20:	61f8      	str	r0, [r7, #28]
    AllocationInfo* current = &info_[tensor_index];
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	6819      	ldr	r1, [r3, #0]
 8005d26:	69fa      	ldr	r2, [r7, #28]
 8005d28:	4613      	mov	r3, r2
 8005d2a:	005b      	lsls	r3, r3, #1
 8005d2c:	4413      	add	r3, r2
 8005d2e:	00db      	lsls	r3, r3, #3
 8005d30:	440b      	add	r3, r1
 8005d32:	61bb      	str	r3, [r7, #24]
    current->last_used = operators_size - 1;
 8005d34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d36:	3b01      	subs	r3, #1
 8005d38:	461a      	mov	r2, r3
 8005d3a:	69bb      	ldr	r3, [r7, #24]
 8005d3c:	60da      	str	r2, [r3, #12]
  for (size_t i = 0; i < subgraph->outputs()->size(); ++i) {
 8005d3e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005d40:	3301      	adds	r3, #1
 8005d42:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005d44:	e7d4      	b.n	8005cf0 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP16TfLiteEvalTensor+0x158>
  }

  // Figure out when the first and last use of each tensor is.
  for (int i = (operators_size - 1); i >= 0; --i) {
 8005d46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d48:	3b01      	subs	r3, #1
 8005d4a:	64bb      	str	r3, [r7, #72]	; 0x48
 8005d4c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	db77      	blt.n	8005e42 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP16TfLiteEvalTensor+0x2aa>
    const auto* op = subgraph->operators()->Get(i);
 8005d52:	68b8      	ldr	r0, [r7, #8]
 8005d54:	f7ff fa7e 	bl	8005254 <_ZNK6tflite8SubGraph9operatorsEv>
 8005d58:	4602      	mov	r2, r0
 8005d5a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005d5c:	4619      	mov	r1, r3
 8005d5e:	4610      	mov	r0, r2
 8005d60:	f001 fb48 	bl	80073f4 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8OperatorEEEE3GetEm>
 8005d64:	6338      	str	r0, [r7, #48]	; 0x30
    for (size_t n = 0; n < op->inputs()->size(); ++n) {
 8005d66:	2300      	movs	r3, #0
 8005d68:	647b      	str	r3, [r7, #68]	; 0x44
 8005d6a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005d6c:	f7ff fe07 	bl	800597e <_ZNK6tflite8Operator6inputsEv>
 8005d70:	4603      	mov	r3, r0
 8005d72:	4618      	mov	r0, r3
 8005d74:	f7fe fa27 	bl	80041c6 <_ZNK11flatbuffers6VectorIlE4sizeEv>
 8005d78:	4602      	mov	r2, r0
 8005d7a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005d7c:	4293      	cmp	r3, r2
 8005d7e:	bf34      	ite	cc
 8005d80:	2301      	movcc	r3, #1
 8005d82:	2300      	movcs	r3, #0
 8005d84:	b2db      	uxtb	r3, r3
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d022      	beq.n	8005dd0 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP16TfLiteEvalTensor+0x238>
      const int tensor_index = op->inputs()->Get(n);
 8005d8a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005d8c:	f7ff fdf7 	bl	800597e <_ZNK6tflite8Operator6inputsEv>
 8005d90:	4603      	mov	r3, r0
 8005d92:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005d94:	4618      	mov	r0, r3
 8005d96:	f7fe fa25 	bl	80041e4 <_ZNK11flatbuffers6VectorIlE3GetEm>
 8005d9a:	6278      	str	r0, [r7, #36]	; 0x24
      AllocationInfo* current = &info_[tensor_index];
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	6819      	ldr	r1, [r3, #0]
 8005da0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005da2:	4613      	mov	r3, r2
 8005da4:	005b      	lsls	r3, r3, #1
 8005da6:	4413      	add	r3, r2
 8005da8:	00db      	lsls	r3, r3, #3
 8005daa:	440b      	add	r3, r1
 8005dac:	623b      	str	r3, [r7, #32]
      if (((current->last_used == -1) || (current->last_used < i))) {
 8005dae:	6a3b      	ldr	r3, [r7, #32]
 8005db0:	68db      	ldr	r3, [r3, #12]
 8005db2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005db6:	d004      	beq.n	8005dc2 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP16TfLiteEvalTensor+0x22a>
 8005db8:	6a3b      	ldr	r3, [r7, #32]
 8005dba:	68db      	ldr	r3, [r3, #12]
 8005dbc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005dbe:	429a      	cmp	r2, r3
 8005dc0:	dd02      	ble.n	8005dc8 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP16TfLiteEvalTensor+0x230>
        current->last_used = i;
 8005dc2:	6a3b      	ldr	r3, [r7, #32]
 8005dc4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005dc6:	60da      	str	r2, [r3, #12]
    for (size_t n = 0; n < op->inputs()->size(); ++n) {
 8005dc8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005dca:	3301      	adds	r3, #1
 8005dcc:	647b      	str	r3, [r7, #68]	; 0x44
 8005dce:	e7cc      	b.n	8005d6a <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP16TfLiteEvalTensor+0x1d2>
      }
    }
    for (size_t n = 0; n < op->outputs()->size(); ++n) {
 8005dd0:	2300      	movs	r3, #0
 8005dd2:	643b      	str	r3, [r7, #64]	; 0x40
 8005dd4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005dd6:	f7ff fde0 	bl	800599a <_ZNK6tflite8Operator7outputsEv>
 8005dda:	4603      	mov	r3, r0
 8005ddc:	4618      	mov	r0, r3
 8005dde:	f7fe f9f2 	bl	80041c6 <_ZNK11flatbuffers6VectorIlE4sizeEv>
 8005de2:	4602      	mov	r2, r0
 8005de4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005de6:	4293      	cmp	r3, r2
 8005de8:	bf34      	ite	cc
 8005dea:	2301      	movcc	r3, #1
 8005dec:	2300      	movcs	r3, #0
 8005dee:	b2db      	uxtb	r3, r3
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d022      	beq.n	8005e3a <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP16TfLiteEvalTensor+0x2a2>
      const int tensor_index = op->outputs()->Get(n);
 8005df4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005df6:	f7ff fdd0 	bl	800599a <_ZNK6tflite8Operator7outputsEv>
 8005dfa:	4603      	mov	r3, r0
 8005dfc:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005dfe:	4618      	mov	r0, r3
 8005e00:	f7fe f9f0 	bl	80041e4 <_ZNK11flatbuffers6VectorIlE3GetEm>
 8005e04:	62f8      	str	r0, [r7, #44]	; 0x2c
      AllocationInfo* current = &info_[tensor_index];
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	6819      	ldr	r1, [r3, #0]
 8005e0a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005e0c:	4613      	mov	r3, r2
 8005e0e:	005b      	lsls	r3, r3, #1
 8005e10:	4413      	add	r3, r2
 8005e12:	00db      	lsls	r3, r3, #3
 8005e14:	440b      	add	r3, r1
 8005e16:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((current->first_created == -1) || (current->first_created > i)) {
 8005e18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e1a:	689b      	ldr	r3, [r3, #8]
 8005e1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e20:	d004      	beq.n	8005e2c <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP16TfLiteEvalTensor+0x294>
 8005e22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e24:	689b      	ldr	r3, [r3, #8]
 8005e26:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005e28:	429a      	cmp	r2, r3
 8005e2a:	da02      	bge.n	8005e32 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP16TfLiteEvalTensor+0x29a>
        current->first_created = i;
 8005e2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e2e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005e30:	609a      	str	r2, [r3, #8]
    for (size_t n = 0; n < op->outputs()->size(); ++n) {
 8005e32:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005e34:	3301      	adds	r3, #1
 8005e36:	643b      	str	r3, [r7, #64]	; 0x40
 8005e38:	e7cc      	b.n	8005dd4 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP16TfLiteEvalTensor+0x23c>
  for (int i = (operators_size - 1); i >= 0; --i) {
 8005e3a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005e3c:	3b01      	subs	r3, #1
 8005e3e:	64bb      	str	r3, [r7, #72]	; 0x48
 8005e40:	e784      	b.n	8005d4c <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP16TfLiteEvalTensor+0x1b4>
      }
    }
  }
  return kTfLiteOk;
 8005e42:	2300      	movs	r3, #0
}
 8005e44:	4618      	mov	r0, r3
 8005e46:	3758      	adds	r7, #88	; 0x58
 8005e48:	46bd      	mov	sp, r7
 8005e4a:	bd80      	pop	{r7, pc}

08005e4c <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder24GetOfflinePlannedOffsetsEPKNS_5ModelEPPKl>:

// Get offline tensors allocation plan. See
// micro/docs/memory_management.md for more info.
TfLiteStatus AllocationInfoBuilder::GetOfflinePlannedOffsets(
    const Model* model, const int32_t** offline_planner_offsets) {
 8005e4c:	b580      	push	{r7, lr}
 8005e4e:	b08c      	sub	sp, #48	; 0x30
 8005e50:	af00      	add	r7, sp, #0
 8005e52:	60f8      	str	r0, [r7, #12]
 8005e54:	60b9      	str	r1, [r7, #8]
 8005e56:	607a      	str	r2, [r7, #4]
  if (model->metadata()) {
 8005e58:	68b8      	ldr	r0, [r7, #8]
 8005e5a:	f7ff fe0f 	bl	8005a7c <_ZNK6tflite5Model8metadataEv>
 8005e5e:	4603      	mov	r3, r0
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	bf14      	ite	ne
 8005e64:	2301      	movne	r3, #1
 8005e66:	2300      	moveq	r3, #0
 8005e68:	b2db      	uxtb	r3, r3
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d060      	beq.n	8005f30 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder24GetOfflinePlannedOffsetsEPKNS_5ModelEPPKl+0xe4>
    for (size_t i = 0; i < model->metadata()->size(); ++i) {
 8005e6e:	2300      	movs	r3, #0
 8005e70:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005e72:	68b8      	ldr	r0, [r7, #8]
 8005e74:	f7ff fe02 	bl	8005a7c <_ZNK6tflite5Model8metadataEv>
 8005e78:	4603      	mov	r3, r0
 8005e7a:	4618      	mov	r0, r3
 8005e7c:	f001 fb14 	bl	80074a8 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8MetadataEEEE4sizeEv>
 8005e80:	4602      	mov	r2, r0
 8005e82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e84:	4293      	cmp	r3, r2
 8005e86:	bf34      	ite	cc
 8005e88:	2301      	movcc	r3, #1
 8005e8a:	2300      	movcs	r3, #0
 8005e8c:	b2db      	uxtb	r3, r3
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d04e      	beq.n	8005f30 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder24GetOfflinePlannedOffsetsEPKNS_5ModelEPPKl+0xe4>
      auto metadata = model->metadata()->Get(i);
 8005e92:	68b8      	ldr	r0, [r7, #8]
 8005e94:	f7ff fdf2 	bl	8005a7c <_ZNK6tflite5Model8metadataEv>
 8005e98:	4603      	mov	r3, r0
 8005e9a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005e9c:	4618      	mov	r0, r3
 8005e9e:	f001 fb11 	bl	80074c4 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8MetadataEEEE3GetEm>
 8005ea2:	62b8      	str	r0, [r7, #40]	; 0x28
      if (strncmp(metadata->name()->c_str(), kOfflineMemAllocMetadata,
 8005ea4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005ea6:	f7ff fdbe 	bl	8005a26 <_ZNK6tflite8Metadata4nameEv>
 8005eaa:	4603      	mov	r3, r0
 8005eac:	4618      	mov	r0, r3
 8005eae:	f7fd feb4 	bl	8003c1a <_ZNK11flatbuffers6String5c_strEv>
 8005eb2:	4603      	mov	r3, r0
 8005eb4:	2217      	movs	r2, #23
 8005eb6:	4921      	ldr	r1, [pc, #132]	; (8005f3c <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder24GetOfflinePlannedOffsetsEPKNS_5ModelEPPKl+0xf0>)
 8005eb8:	4618      	mov	r0, r3
 8005eba:	f006 faa2 	bl	800c402 <strncmp>
 8005ebe:	4603      	mov	r3, r0
                  strlen(kOfflineMemAllocMetadata)) == 0) {
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	bf0c      	ite	eq
 8005ec4:	2301      	moveq	r3, #1
 8005ec6:	2300      	movne	r3, #0
 8005ec8:	b2db      	uxtb	r3, r3
      if (strncmp(metadata->name()->c_str(), kOfflineMemAllocMetadata,
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d02c      	beq.n	8005f28 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder24GetOfflinePlannedOffsetsEPKNS_5ModelEPPKl+0xdc>
        const flatbuffers::Vector<flatbuffers::Offset<Buffer>>* buffers =
            model->buffers();
 8005ece:	68b8      	ldr	r0, [r7, #8]
 8005ed0:	f7ff fdc6 	bl	8005a60 <_ZNK6tflite5Model7buffersEv>
 8005ed4:	6278      	str	r0, [r7, #36]	; 0x24
        auto* buffer = (*buffers)[metadata->buffer()];
 8005ed6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005ed8:	f7ff fdb3 	bl	8005a42 <_ZNK6tflite8Metadata6bufferEv>
 8005edc:	4603      	mov	r3, r0
 8005ede:	4619      	mov	r1, r3
 8005ee0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005ee2:	f001 fb23 	bl	800752c <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6BufferEEEEixEm>
 8005ee6:	6238      	str	r0, [r7, #32]
        auto* array = buffer->data();
 8005ee8:	6a38      	ldr	r0, [r7, #32]
 8005eea:	f7ff fd8e 	bl	8005a0a <_ZNK6tflite6Buffer4dataEv>
 8005eee:	61f8      	str	r0, [r7, #28]
        const uint32_t* metadata_buffer =
            reinterpret_cast<const uint32_t*>(array->data());
 8005ef0:	69f8      	ldr	r0, [r7, #28]
 8005ef2:	f001 fb29 	bl	8007548 <_ZNK11flatbuffers6VectorIhE4dataEv>
 8005ef6:	61b8      	str	r0, [r7, #24]
        const size_t nbr_tensors = static_cast<size_t>(metadata_buffer[2]);
 8005ef8:	69bb      	ldr	r3, [r7, #24]
 8005efa:	3308      	adds	r3, #8
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	617b      	str	r3, [r7, #20]
        *offline_planner_offsets =
            reinterpret_cast<const int32_t*>(&metadata_buffer[3]);
 8005f00:	69bb      	ldr	r3, [r7, #24]
 8005f02:	f103 020c 	add.w	r2, r3, #12
        *offline_planner_offsets =
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	601a      	str	r2, [r3, #0]

        if (tensor_count_ != nbr_tensors) {
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	685b      	ldr	r3, [r3, #4]
 8005f0e:	697a      	ldr	r2, [r7, #20]
 8005f10:	429a      	cmp	r2, r3
 8005f12:	d009      	beq.n	8005f28 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder24GetOfflinePlannedOffsetsEPKNS_5ModelEPPKl+0xdc>
          TF_LITE_REPORT_ERROR(reporter_,
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	68d8      	ldr	r0, [r3, #12]
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	685b      	ldr	r3, [r3, #4]
 8005f1c:	697a      	ldr	r2, [r7, #20]
 8005f1e:	4908      	ldr	r1, [pc, #32]	; (8005f40 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder24GetOfflinePlannedOffsetsEPKNS_5ModelEPPKl+0xf4>)
 8005f20:	f7fd fe3c 	bl	8003b9c <_ZN6tflite13ErrorReporter6ReportEPKcz>
                               "Nbr of offline buffer offsets (%d) in metadata "
                               "not equal nbr tensors (%d)\n",
                               nbr_tensors, tensor_count_);
          return kTfLiteError;
 8005f24:	2301      	movs	r3, #1
 8005f26:	e004      	b.n	8005f32 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder24GetOfflinePlannedOffsetsEPKNS_5ModelEPPKl+0xe6>
    for (size_t i = 0; i < model->metadata()->size(); ++i) {
 8005f28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f2a:	3301      	adds	r3, #1
 8005f2c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005f2e:	e7a0      	b.n	8005e72 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder24GetOfflinePlannedOffsetsEPKNS_5ModelEPPKl+0x26>
        }
      }
    }
  }
  return kTfLiteOk;
 8005f30:	2300      	movs	r3, #0
}
 8005f32:	4618      	mov	r0, r3
 8005f34:	3730      	adds	r7, #48	; 0x30
 8005f36:	46bd      	mov	sp, r7
 8005f38:	bd80      	pop	{r7, pc}
 8005f3a:	bf00      	nop
 8005f3c:	08021ac4 	.word	0x08021ac4
 8005f40:	0800f238 	.word	0x0800f238

08005f44 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder17AddScratchBuffersEPNS_8internal20ScratchBufferRequestEPNS_19ScratchBufferHandleE>:

TfLiteStatus AllocationInfoBuilder::AddScratchBuffers(
    internal::ScratchBufferRequest* scratch_buffer_requests,
    ScratchBufferHandle* scratch_buffer_handles) {
 8005f44:	b480      	push	{r7}
 8005f46:	b089      	sub	sp, #36	; 0x24
 8005f48:	af00      	add	r7, sp, #0
 8005f4a:	60f8      	str	r0, [r7, #12]
 8005f4c:	60b9      	str	r1, [r7, #8]
 8005f4e:	607a      	str	r2, [r7, #4]
  // Set up allocation info for buffers.
  for (size_t i = tensor_count_; i < tensor_count_ + buffer_count_; ++i) {
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	685b      	ldr	r3, [r3, #4]
 8005f54:	61fb      	str	r3, [r7, #28]
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	685a      	ldr	r2, [r3, #4]
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	689b      	ldr	r3, [r3, #8]
 8005f5e:	4413      	add	r3, r2
 8005f60:	69fa      	ldr	r2, [r7, #28]
 8005f62:	429a      	cmp	r2, r3
 8005f64:	d232      	bcs.n	8005fcc <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder17AddScratchBuffersEPNS_8internal20ScratchBufferRequestEPNS_19ScratchBufferHandleE+0x88>
    internal::ScratchBufferRequest* current_request =
        &(scratch_buffer_requests[i - tensor_count_]);
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	685b      	ldr	r3, [r3, #4]
 8005f6a:	69fa      	ldr	r2, [r7, #28]
 8005f6c:	1ad3      	subs	r3, r2, r3
 8005f6e:	00db      	lsls	r3, r3, #3
    internal::ScratchBufferRequest* current_request =
 8005f70:	68ba      	ldr	r2, [r7, #8]
 8005f72:	4413      	add	r3, r2
 8005f74:	61bb      	str	r3, [r7, #24]
    ScratchBufferHandle* current_handle =
        &(scratch_buffer_handles[i - tensor_count_]);
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	685b      	ldr	r3, [r3, #4]
 8005f7a:	69fa      	ldr	r2, [r7, #28]
 8005f7c:	1ad3      	subs	r3, r2, r3
 8005f7e:	009b      	lsls	r3, r3, #2
    ScratchBufferHandle* current_handle =
 8005f80:	687a      	ldr	r2, [r7, #4]
 8005f82:	4413      	add	r3, r2
 8005f84:	617b      	str	r3, [r7, #20]

    AllocationInfo* current = &info_[i];
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	6819      	ldr	r1, [r3, #0]
 8005f8a:	69fa      	ldr	r2, [r7, #28]
 8005f8c:	4613      	mov	r3, r2
 8005f8e:	005b      	lsls	r3, r3, #1
 8005f90:	4413      	add	r3, r2
 8005f92:	00db      	lsls	r3, r3, #3
 8005f94:	440b      	add	r3, r1
 8005f96:	613b      	str	r3, [r7, #16]
    current->output_ptr = reinterpret_cast<void**>(&current_handle->data);
 8005f98:	697a      	ldr	r2, [r7, #20]
 8005f9a:	693b      	ldr	r3, [r7, #16]
 8005f9c:	605a      	str	r2, [r3, #4]
    current->bytes = current_request->bytes;
 8005f9e:	69bb      	ldr	r3, [r7, #24]
 8005fa0:	681a      	ldr	r2, [r3, #0]
 8005fa2:	693b      	ldr	r3, [r7, #16]
 8005fa4:	601a      	str	r2, [r3, #0]
    current->first_created = current_request->node_idx;
 8005fa6:	69bb      	ldr	r3, [r7, #24]
 8005fa8:	685a      	ldr	r2, [r3, #4]
 8005faa:	693b      	ldr	r3, [r7, #16]
 8005fac:	609a      	str	r2, [r3, #8]
    current->last_used = current_request->node_idx;
 8005fae:	69bb      	ldr	r3, [r7, #24]
 8005fb0:	685a      	ldr	r2, [r3, #4]
 8005fb2:	693b      	ldr	r3, [r7, #16]
 8005fb4:	60da      	str	r2, [r3, #12]
    current->offline_offset = kOnlinePlannedBuffer;
 8005fb6:	693b      	ldr	r3, [r7, #16]
 8005fb8:	f04f 32ff 	mov.w	r2, #4294967295
 8005fbc:	611a      	str	r2, [r3, #16]
    current->needs_allocating = true;
 8005fbe:	693b      	ldr	r3, [r7, #16]
 8005fc0:	2201      	movs	r2, #1
 8005fc2:	751a      	strb	r2, [r3, #20]
  for (size_t i = tensor_count_; i < tensor_count_ + buffer_count_; ++i) {
 8005fc4:	69fb      	ldr	r3, [r7, #28]
 8005fc6:	3301      	adds	r3, #1
 8005fc8:	61fb      	str	r3, [r7, #28]
 8005fca:	e7c4      	b.n	8005f56 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder17AddScratchBuffersEPNS_8internal20ScratchBufferRequestEPNS_19ScratchBufferHandleE+0x12>
  }
  return kTfLiteOk;
 8005fcc:	2300      	movs	r3, #0
}
 8005fce:	4618      	mov	r0, r3
 8005fd0:	3724      	adds	r7, #36	; 0x24
 8005fd2:	46bd      	mov	sp, r7
 8005fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fd8:	4770      	bx	lr

08005fda <_ZN6tflite12_GLOBAL__N_110CreatePlanEPNS_13ErrorReporterEPNS_19GreedyMemoryPlannerEPKNS0_14AllocationInfoEj>:

TfLiteStatus CreatePlan(ErrorReporter* error_reporter,
                        GreedyMemoryPlanner* planner,
                        const AllocationInfo* allocation_info,
                        size_t allocation_info_size) {
 8005fda:	b590      	push	{r4, r7, lr}
 8005fdc:	b08b      	sub	sp, #44	; 0x2c
 8005fde:	af02      	add	r7, sp, #8
 8005fe0:	60f8      	str	r0, [r7, #12]
 8005fe2:	60b9      	str	r1, [r7, #8]
 8005fe4:	607a      	str	r2, [r7, #4]
 8005fe6:	603b      	str	r3, [r7, #0]
  // Add the tensors to our allocation plan.
  for (size_t i = 0; i < allocation_info_size; ++i) {
 8005fe8:	2300      	movs	r3, #0
 8005fea:	61fb      	str	r3, [r7, #28]
 8005fec:	69fa      	ldr	r2, [r7, #28]
 8005fee:	683b      	ldr	r3, [r7, #0]
 8005ff0:	429a      	cmp	r2, r3
 8005ff2:	d247      	bcs.n	8006084 <_ZN6tflite12_GLOBAL__N_110CreatePlanEPNS_13ErrorReporterEPNS_19GreedyMemoryPlannerEPKNS0_14AllocationInfoEj+0xaa>
    const AllocationInfo* current = &allocation_info[i];
 8005ff4:	69fa      	ldr	r2, [r7, #28]
 8005ff6:	4613      	mov	r3, r2
 8005ff8:	005b      	lsls	r3, r3, #1
 8005ffa:	4413      	add	r3, r2
 8005ffc:	00db      	lsls	r3, r3, #3
 8005ffe:	461a      	mov	r2, r3
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	4413      	add	r3, r2
 8006004:	61bb      	str	r3, [r7, #24]
    if (current->needs_allocating) {
 8006006:	69bb      	ldr	r3, [r7, #24]
 8006008:	7d1b      	ldrb	r3, [r3, #20]
 800600a:	2b00      	cmp	r3, #0
 800600c:	d036      	beq.n	800607c <_ZN6tflite12_GLOBAL__N_110CreatePlanEPNS_13ErrorReporterEPNS_19GreedyMemoryPlannerEPKNS0_14AllocationInfoEj+0xa2>
      size_t aligned_bytes_required =
          AlignSizeUp(current->bytes, kBufferAlignment);
 800600e:	69bb      	ldr	r3, [r7, #24]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	2110      	movs	r1, #16
 8006014:	4618      	mov	r0, r3
 8006016:	f7ff fb25 	bl	8005664 <_ZN6tflite11AlignSizeUpEjj>
 800601a:	6178      	str	r0, [r7, #20]
      if (current->offline_offset == kOnlinePlannedBuffer) {
 800601c:	69bb      	ldr	r3, [r7, #24]
 800601e:	691b      	ldr	r3, [r3, #16]
 8006020:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006024:	d114      	bne.n	8006050 <_ZN6tflite12_GLOBAL__N_110CreatePlanEPNS_13ErrorReporterEPNS_19GreedyMemoryPlannerEPKNS0_14AllocationInfoEj+0x76>
        TF_LITE_ENSURE_STATUS(
 8006026:	68bb      	ldr	r3, [r7, #8]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	3308      	adds	r3, #8
 800602c:	681c      	ldr	r4, [r3, #0]
 800602e:	697a      	ldr	r2, [r7, #20]
 8006030:	69bb      	ldr	r3, [r7, #24]
 8006032:	6899      	ldr	r1, [r3, #8]
 8006034:	69bb      	ldr	r3, [r7, #24]
 8006036:	68db      	ldr	r3, [r3, #12]
 8006038:	9300      	str	r3, [sp, #0]
 800603a:	460b      	mov	r3, r1
 800603c:	68f9      	ldr	r1, [r7, #12]
 800603e:	68b8      	ldr	r0, [r7, #8]
 8006040:	47a0      	blx	r4
 8006042:	4603      	mov	r3, r0
 8006044:	74bb      	strb	r3, [r7, #18]
 8006046:	7cbb      	ldrb	r3, [r7, #18]
 8006048:	2b00      	cmp	r3, #0
 800604a:	d017      	beq.n	800607c <_ZN6tflite12_GLOBAL__N_110CreatePlanEPNS_13ErrorReporterEPNS_19GreedyMemoryPlannerEPKNS0_14AllocationInfoEj+0xa2>
 800604c:	7cbb      	ldrb	r3, [r7, #18]
 800604e:	e01a      	b.n	8006086 <_ZN6tflite12_GLOBAL__N_110CreatePlanEPNS_13ErrorReporterEPNS_19GreedyMemoryPlannerEPKNS0_14AllocationInfoEj+0xac>
            planner->AddBuffer(error_reporter, aligned_bytes_required,
                               current->first_created, current->last_used));
      } else {
        TF_LITE_ENSURE_STATUS(planner->AddBuffer(
 8006050:	6979      	ldr	r1, [r7, #20]
 8006052:	69bb      	ldr	r3, [r7, #24]
 8006054:	6898      	ldr	r0, [r3, #8]
 8006056:	69bb      	ldr	r3, [r7, #24]
 8006058:	68db      	ldr	r3, [r3, #12]
 800605a:	69ba      	ldr	r2, [r7, #24]
 800605c:	6912      	ldr	r2, [r2, #16]
 800605e:	9201      	str	r2, [sp, #4]
 8006060:	9300      	str	r3, [sp, #0]
 8006062:	4603      	mov	r3, r0
 8006064:	460a      	mov	r2, r1
 8006066:	68f9      	ldr	r1, [r7, #12]
 8006068:	68b8      	ldr	r0, [r7, #8]
 800606a:	f004 fc41 	bl	800a8f0 <_ZN6tflite19GreedyMemoryPlanner9AddBufferEPNS_13ErrorReporterEiiii>
 800606e:	4603      	mov	r3, r0
 8006070:	74fb      	strb	r3, [r7, #19]
 8006072:	7cfb      	ldrb	r3, [r7, #19]
 8006074:	2b00      	cmp	r3, #0
 8006076:	d001      	beq.n	800607c <_ZN6tflite12_GLOBAL__N_110CreatePlanEPNS_13ErrorReporterEPNS_19GreedyMemoryPlannerEPKNS0_14AllocationInfoEj+0xa2>
 8006078:	7cfb      	ldrb	r3, [r7, #19]
 800607a:	e004      	b.n	8006086 <_ZN6tflite12_GLOBAL__N_110CreatePlanEPNS_13ErrorReporterEPNS_19GreedyMemoryPlannerEPKNS0_14AllocationInfoEj+0xac>
  for (size_t i = 0; i < allocation_info_size; ++i) {
 800607c:	69fb      	ldr	r3, [r7, #28]
 800607e:	3301      	adds	r3, #1
 8006080:	61fb      	str	r3, [r7, #28]
 8006082:	e7b3      	b.n	8005fec <_ZN6tflite12_GLOBAL__N_110CreatePlanEPNS_13ErrorReporterEPNS_19GreedyMemoryPlannerEPKNS0_14AllocationInfoEj+0x12>
            error_reporter, aligned_bytes_required, current->first_created,
            current->last_used, current->offline_offset));
      }
    }
  }
  return kTfLiteOk;
 8006084:	2300      	movs	r3, #0
}
 8006086:	4618      	mov	r0, r3
 8006088:	3724      	adds	r7, #36	; 0x24
 800608a:	46bd      	mov	sp, r7
 800608c:	bd90      	pop	{r4, r7, pc}

0800608e <_ZN6tflite12_GLOBAL__N_110CommitPlanEPNS_13ErrorReporterEPNS_13MemoryPlannerEPhPKNS0_14AllocationInfoEj>:

TfLiteStatus CommitPlan(ErrorReporter* error_reporter, MemoryPlanner* planner,
                        uint8_t* starting_point,
                        const AllocationInfo* allocation_info,
                        size_t allocation_info_size) {
 800608e:	b590      	push	{r4, r7, lr}
 8006090:	b08b      	sub	sp, #44	; 0x2c
 8006092:	af00      	add	r7, sp, #0
 8006094:	60f8      	str	r0, [r7, #12]
 8006096:	60b9      	str	r1, [r7, #8]
 8006098:	607a      	str	r2, [r7, #4]
 800609a:	603b      	str	r3, [r7, #0]
  // Figure out the actual memory addresses for each buffer, based on the plan.
  int planner_index = 0;
 800609c:	2300      	movs	r3, #0
 800609e:	627b      	str	r3, [r7, #36]	; 0x24
  for (size_t i = 0; i < allocation_info_size; ++i) {
 80060a0:	2300      	movs	r3, #0
 80060a2:	623b      	str	r3, [r7, #32]
 80060a4:	6a3a      	ldr	r2, [r7, #32]
 80060a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060a8:	429a      	cmp	r2, r3
 80060aa:	d22e      	bcs.n	800610a <_ZN6tflite12_GLOBAL__N_110CommitPlanEPNS_13ErrorReporterEPNS_13MemoryPlannerEPhPKNS0_14AllocationInfoEj+0x7c>
    const AllocationInfo* current = &allocation_info[i];
 80060ac:	6a3a      	ldr	r2, [r7, #32]
 80060ae:	4613      	mov	r3, r2
 80060b0:	005b      	lsls	r3, r3, #1
 80060b2:	4413      	add	r3, r2
 80060b4:	00db      	lsls	r3, r3, #3
 80060b6:	461a      	mov	r2, r3
 80060b8:	683b      	ldr	r3, [r7, #0]
 80060ba:	4413      	add	r3, r2
 80060bc:	61fb      	str	r3, [r7, #28]
    if (current->needs_allocating) {
 80060be:	69fb      	ldr	r3, [r7, #28]
 80060c0:	7d1b      	ldrb	r3, [r3, #20]
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d01d      	beq.n	8006102 <_ZN6tflite12_GLOBAL__N_110CommitPlanEPNS_13ErrorReporterEPNS_13MemoryPlannerEPhPKNS0_14AllocationInfoEj+0x74>
      int offset = -1;
 80060c6:	f04f 33ff 	mov.w	r3, #4294967295
 80060ca:	617b      	str	r3, [r7, #20]
      TF_LITE_ENSURE_STATUS(
 80060cc:	68bb      	ldr	r3, [r7, #8]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	3314      	adds	r3, #20
 80060d2:	681c      	ldr	r4, [r3, #0]
 80060d4:	f107 0314 	add.w	r3, r7, #20
 80060d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80060da:	68f9      	ldr	r1, [r7, #12]
 80060dc:	68b8      	ldr	r0, [r7, #8]
 80060de:	47a0      	blx	r4
 80060e0:	4603      	mov	r3, r0
 80060e2:	76fb      	strb	r3, [r7, #27]
 80060e4:	7efb      	ldrb	r3, [r7, #27]
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d001      	beq.n	80060ee <_ZN6tflite12_GLOBAL__N_110CommitPlanEPNS_13ErrorReporterEPNS_13MemoryPlannerEPhPKNS0_14AllocationInfoEj+0x60>
 80060ea:	7efb      	ldrb	r3, [r7, #27]
 80060ec:	e00e      	b.n	800610c <_ZN6tflite12_GLOBAL__N_110CommitPlanEPNS_13ErrorReporterEPNS_13MemoryPlannerEPhPKNS0_14AllocationInfoEj+0x7e>
          planner->GetOffsetForBuffer(error_reporter, planner_index, &offset));
      *current->output_ptr = reinterpret_cast<void*>(starting_point + offset);
 80060ee:	697b      	ldr	r3, [r7, #20]
 80060f0:	4619      	mov	r1, r3
 80060f2:	69fb      	ldr	r3, [r7, #28]
 80060f4:	685b      	ldr	r3, [r3, #4]
 80060f6:	687a      	ldr	r2, [r7, #4]
 80060f8:	440a      	add	r2, r1
 80060fa:	601a      	str	r2, [r3, #0]
      ++planner_index;
 80060fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060fe:	3301      	adds	r3, #1
 8006100:	627b      	str	r3, [r7, #36]	; 0x24
  for (size_t i = 0; i < allocation_info_size; ++i) {
 8006102:	6a3b      	ldr	r3, [r7, #32]
 8006104:	3301      	adds	r3, #1
 8006106:	623b      	str	r3, [r7, #32]
 8006108:	e7cc      	b.n	80060a4 <_ZN6tflite12_GLOBAL__N_110CommitPlanEPNS_13ErrorReporterEPNS_13MemoryPlannerEPhPKNS0_14AllocationInfoEj+0x16>
    }
  }
  return kTfLiteOk;
 800610a:	2300      	movs	r3, #0
}
 800610c:	4618      	mov	r0, r3
 800610e:	372c      	adds	r7, #44	; 0x2c
 8006110:	46bd      	mov	sp, r7
 8006112:	bd90      	pop	{r4, r7, pc}

08006114 <_ZN6tflite8internal25GetFlatbufferTensorBufferERKNS_6TensorEPKN11flatbuffers6VectorINS4_6OffsetINS_6BufferEEEEE>:

// Returns a pointer to any buffer associated with the flatbuffer tensor. Can
// return nullptr if no buffer is found.
void* GetFlatbufferTensorBuffer(
    const tflite::Tensor& flatbuffer_tensor,
    const flatbuffers::Vector<flatbuffers::Offset<Buffer>>* buffers) {
 8006114:	b580      	push	{r7, lr}
 8006116:	b086      	sub	sp, #24
 8006118:	af00      	add	r7, sp, #0
 800611a:	6078      	str	r0, [r7, #4]
 800611c:	6039      	str	r1, [r7, #0]
  // the same as a constant op in TensorFlow) associated with this tensor first,
  // and if there is update the runtime structure to point to its location in
  // memory.
  // First see if there's any buffer information in the serialized tensor.
  // TODO(b/170379532): Add better unit tests to validate flatbuffer values.
  void* out_buffer = nullptr;
 800611e:	2300      	movs	r3, #0
 8006120:	617b      	str	r3, [r7, #20]
  if (auto* buffer = (*buffers)[flatbuffer_tensor.buffer()]) {
 8006122:	6878      	ldr	r0, [r7, #4]
 8006124:	f7ff fbfa 	bl	800591c <_ZNK6tflite6Tensor6bufferEv>
 8006128:	4603      	mov	r3, r0
 800612a:	4619      	mov	r1, r3
 800612c:	6838      	ldr	r0, [r7, #0]
 800612e:	f001 f9fd 	bl	800752c <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6BufferEEEEixEm>
 8006132:	6138      	str	r0, [r7, #16]
 8006134:	693b      	ldr	r3, [r7, #16]
 8006136:	2b00      	cmp	r3, #0
 8006138:	d015      	beq.n	8006166 <_ZN6tflite8internal25GetFlatbufferTensorBufferERKNS_6TensorEPKN11flatbuffers6VectorINS4_6OffsetINS_6BufferEEEEE+0x52>
    // If we've found a buffer, does it have any data?
    if (auto* array = buffer->data()) {
 800613a:	6938      	ldr	r0, [r7, #16]
 800613c:	f7ff fc65 	bl	8005a0a <_ZNK6tflite6Buffer4dataEv>
 8006140:	60f8      	str	r0, [r7, #12]
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	2b00      	cmp	r3, #0
 8006146:	d00e      	beq.n	8006166 <_ZN6tflite8internal25GetFlatbufferTensorBufferERKNS_6TensorEPKN11flatbuffers6VectorINS4_6OffsetINS_6BufferEEEEE+0x52>
      // If it has any data, is the data size larger than zero?
      if (array->size()) {
 8006148:	68f8      	ldr	r0, [r7, #12]
 800614a:	f001 f8a4 	bl	8007296 <_ZNK11flatbuffers6VectorIhE4sizeEv>
 800614e:	4603      	mov	r3, r0
 8006150:	2b00      	cmp	r3, #0
 8006152:	bf14      	ite	ne
 8006154:	2301      	movne	r3, #1
 8006156:	2300      	moveq	r3, #0
 8006158:	b2db      	uxtb	r3, r3
 800615a:	2b00      	cmp	r3, #0
 800615c:	d003      	beq.n	8006166 <_ZN6tflite8internal25GetFlatbufferTensorBufferERKNS_6TensorEPKN11flatbuffers6VectorINS4_6OffsetINS_6BufferEEEEE+0x52>
        // We've found a buffer with valid data, so update the runtime tensor
        // data structure to point to it.
        out_buffer = const_cast<void*>(static_cast<const void*>(array->data()));
 800615e:	68f8      	ldr	r0, [r7, #12]
 8006160:	f001 f9f2 	bl	8007548 <_ZNK11flatbuffers6VectorIhE4dataEv>
 8006164:	6178      	str	r0, [r7, #20]
    // buffer in the serialized tensor, but it doesn't have any data in it. Is
    // that a validly-generated file, and if so what does it mean, or is it an
    // error condition? It would be good to tighten up the specification to make
    // it less ambiguous.
  }
  return out_buffer;
 8006166:	697b      	ldr	r3, [r7, #20]
}
 8006168:	4618      	mov	r0, r3
 800616a:	3718      	adds	r7, #24
 800616c:	46bd      	mov	sp, r7
 800616e:	bd80      	pop	{r7, pc}

08006170 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor>:

TfLiteStatus InitializeTfLiteTensorFromFlatbuffer(
    SimpleMemoryAllocator* allocator, bool allocate_temp,
    const tflite::Tensor& flatbuffer_tensor,
    const flatbuffers::Vector<flatbuffers::Offset<Buffer>>* buffers,
    ErrorReporter* error_reporter, TfLiteTensor* result) {
 8006170:	b590      	push	{r4, r7, lr}
 8006172:	b08d      	sub	sp, #52	; 0x34
 8006174:	af00      	add	r7, sp, #0
 8006176:	60f8      	str	r0, [r7, #12]
 8006178:	607a      	str	r2, [r7, #4]
 800617a:	603b      	str	r3, [r7, #0]
 800617c:	460b      	mov	r3, r1
 800617e:	72fb      	strb	r3, [r7, #11]
  TFLITE_DCHECK(result != nullptr);
 8006180:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006182:	2b00      	cmp	r3, #0
 8006184:	d101      	bne.n	800618a <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x1a>
 8006186:	f004 ff79 	bl	800b07c <abort>

  *result = {};
 800618a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800618c:	4618      	mov	r0, r3
 800618e:	2340      	movs	r3, #64	; 0x40
 8006190:	461a      	mov	r2, r3
 8006192:	2100      	movs	r1, #0
 8006194:	f005 fa18 	bl	800b5c8 <memset>
  // Make sure the serialized type is one we know how to deal with, and convert
  // it from a flatbuffer enum into a constant used by the kernel C API.
  TF_LITE_ENSURE_STATUS(ConvertTensorType(flatbuffer_tensor.type(),
 8006198:	6878      	ldr	r0, [r7, #4]
 800619a:	f7ff f989 	bl	80054b0 <_ZNK6tflite6Tensor4typeEv>
 800619e:	4603      	mov	r3, r0
 80061a0:	4618      	mov	r0, r3
 80061a2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80061a4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80061a6:	4619      	mov	r1, r3
 80061a8:	f7fd fe3a 	bl	8003e20 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE>
 80061ac:	4603      	mov	r3, r0
 80061ae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80061b2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d002      	beq.n	80061c0 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x50>
 80061ba:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80061be:	e127      	b.n	8006410 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x2a0>
                                          &result->type, error_reporter));
  // Make sure we remember if the serialized tensor is designated as a variable.
  result->is_variable = flatbuffer_tensor.is_variable();
 80061c0:	6878      	ldr	r0, [r7, #4]
 80061c2:	f7ff fbc8 	bl	8005956 <_ZNK6tflite6Tensor11is_variableEv>
 80061c6:	4603      	mov	r3, r0
 80061c8:	461a      	mov	r2, r3
 80061ca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80061cc:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  result->data.data = GetFlatbufferTensorBuffer(flatbuffer_tensor, buffers);
 80061d0:	6839      	ldr	r1, [r7, #0]
 80061d2:	6878      	ldr	r0, [r7, #4]
 80061d4:	f7ff ff9e 	bl	8006114 <_ZN6tflite8internal25GetFlatbufferTensorBufferERKNS_6TensorEPKN11flatbuffers6VectorINS4_6OffsetINS_6BufferEEEEE>
 80061d8:	4602      	mov	r2, r0
 80061da:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80061dc:	605a      	str	r2, [r3, #4]

  // TODO(petewarden): Some of these paths aren't getting enough testing
  // coverage, so we should figure out some tests that exercise them.
  if (result->data.data == nullptr) {
 80061de:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80061e0:	685b      	ldr	r3, [r3, #4]
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d103      	bne.n	80061ee <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x7e>
    // The tensor contents haven't been set from a serialized buffer, so
    // make a note that they will be allocated from memory. The actual
    // allocation won't happen until later.
    result->allocation_type = kTfLiteArenaRw;
 80061e6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80061e8:	2202      	movs	r2, #2
 80061ea:	751a      	strb	r2, [r3, #20]
 80061ec:	e002      	b.n	80061f4 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x84>
  } else {
    // We set the data from a serialized buffer, so record tha.
    result->allocation_type = kTfLiteMmapRo;
 80061ee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80061f0:	2201      	movs	r2, #1
 80061f2:	751a      	strb	r2, [r3, #20]
  }

  // Figure out what the size in bytes of the buffer is and store it.
  size_t type_size;
  TF_LITE_ENSURE_STATUS(BytesRequiredForTensor(
 80061f4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80061f6:	f103 0118 	add.w	r1, r3, #24
 80061fa:	f107 0210 	add.w	r2, r7, #16
 80061fe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006200:	6878      	ldr	r0, [r7, #4]
 8006202:	f7ff fab3 	bl	800576c <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE>
 8006206:	4603      	mov	r3, r0
 8006208:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800620c:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8006210:	2b00      	cmp	r3, #0
 8006212:	d002      	beq.n	800621a <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0xaa>
 8006214:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8006218:	e0fa      	b.n	8006410 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x2a0>
      flatbuffer_tensor, &result->bytes, &type_size, error_reporter));

  if (flatbuffer_tensor.shape() == nullptr) {
 800621a:	6878      	ldr	r0, [r7, #4]
 800621c:	f7ff f93a 	bl	8005494 <_ZNK6tflite6Tensor5shapeEv>
 8006220:	4603      	mov	r3, r0
 8006222:	2b00      	cmp	r3, #0
 8006224:	bf0c      	ite	eq
 8006226:	2301      	moveq	r3, #1
 8006228:	2300      	movne	r3, #0
 800622a:	b2db      	uxtb	r3, r3
 800622c:	2b00      	cmp	r3, #0
 800622e:	d003      	beq.n	8006238 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0xc8>
    // flatbuffer_tensor.shape() can return a nullptr in the case of a scalar
    // tensor.
    result->dims = const_cast<TfLiteIntArray*>(&kZeroLengthIntArray);
 8006230:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006232:	4a79      	ldr	r2, [pc, #484]	; (8006418 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x2a8>)
 8006234:	609a      	str	r2, [r3, #8]
 8006236:	e013      	b.n	8006260 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0xf0>
  } else {
    // TFLM doesn't allow reshaping the tensor which requires dynamic memory
    // allocation so it is safe to drop the const qualifier. In the future, if
    // we really want to update the tensor shape, we can always pass in a new
    // TfLiteIntArray - especially we have to do so if the dimension is
    TF_LITE_ENSURE_STATUS(FlatBufferVectorToTfLiteTypeArray(
 8006238:	6878      	ldr	r0, [r7, #4]
 800623a:	f7ff f92b 	bl	8005494 <_ZNK6tflite6Tensor5shapeEv>
 800623e:	4602      	mov	r2, r0
 8006240:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006242:	3308      	adds	r3, #8
 8006244:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006246:	68f8      	ldr	r0, [r7, #12]
 8006248:	f001 f98a 	bl	8007560 <_ZN6tflite8internal33FlatBufferVectorToTfLiteTypeArrayIl14TfLiteIntArrayEE12TfLiteStatusPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterEPKN11flatbuffers6VectorIT_EEPPT0_>
 800624c:	4603      	mov	r3, r0
 800624e:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
 8006252:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8006256:	2b00      	cmp	r3, #0
 8006258:	d002      	beq.n	8006260 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0xf0>
 800625a:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 800625e:	e0d7      	b.n	8006410 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x2a0>
        allocator, error_reporter, flatbuffer_tensor.shape(), &(result->dims)));
  }

  // Copy the quantization information from the serialized data.
  const auto* src_quantization = flatbuffer_tensor.quantization();
 8006260:	6878      	ldr	r0, [r7, #4]
 8006262:	f7ff fb6a 	bl	800593a <_ZNK6tflite6Tensor12quantizationEv>
 8006266:	6278      	str	r0, [r7, #36]	; 0x24
  if (src_quantization && src_quantization->scale() &&
      (src_quantization->scale()->size() > 0) &&
      src_quantization->zero_point() &&
 8006268:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800626a:	2b00      	cmp	r3, #0
 800626c:	d021      	beq.n	80062b2 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x142>
  if (src_quantization && src_quantization->scale() &&
 800626e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006270:	f7ff fb29 	bl	80058c6 <_ZNK6tflite22QuantizationParameters5scaleEv>
 8006274:	4603      	mov	r3, r0
 8006276:	2b00      	cmp	r3, #0
 8006278:	d01b      	beq.n	80062b2 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x142>
      (src_quantization->scale()->size() > 0) &&
 800627a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800627c:	f7ff fb23 	bl	80058c6 <_ZNK6tflite22QuantizationParameters5scaleEv>
 8006280:	4603      	mov	r3, r0
 8006282:	4618      	mov	r0, r3
 8006284:	f001 f815 	bl	80072b2 <_ZNK11flatbuffers6VectorIfE4sizeEv>
 8006288:	4603      	mov	r3, r0
  if (src_quantization && src_quantization->scale() &&
 800628a:	2b00      	cmp	r3, #0
 800628c:	d011      	beq.n	80062b2 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x142>
      src_quantization->zero_point() &&
 800628e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006290:	f7ff fb27 	bl	80058e2 <_ZNK6tflite22QuantizationParameters10zero_pointEv>
 8006294:	4603      	mov	r3, r0
      (src_quantization->scale()->size() > 0) &&
 8006296:	2b00      	cmp	r3, #0
 8006298:	d00b      	beq.n	80062b2 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x142>
      (src_quantization->zero_point()->size() > 0)) {
 800629a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800629c:	f7ff fb21 	bl	80058e2 <_ZNK6tflite22QuantizationParameters10zero_pointEv>
 80062a0:	4603      	mov	r3, r0
 80062a2:	4618      	mov	r0, r3
 80062a4:	f001 f83c 	bl	8007320 <_ZNK11flatbuffers6VectorIxE4sizeEv>
 80062a8:	4603      	mov	r3, r0
      src_quantization->zero_point() &&
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d001      	beq.n	80062b2 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x142>
 80062ae:	2301      	movs	r3, #1
 80062b0:	e000      	b.n	80062b4 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x144>
 80062b2:	2300      	movs	r3, #0
  if (src_quantization && src_quantization->scale() &&
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	f000 80aa 	beq.w	800640e <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x29e>
    // Always populate the TfLiteTensor.params field, even if there are
    // per-channel quantization parameters.
    result->params.scale = src_quantization->scale()->Get(0);
 80062ba:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80062bc:	f7ff fb03 	bl	80058c6 <_ZNK6tflite22QuantizationParameters5scaleEv>
 80062c0:	4603      	mov	r3, r0
 80062c2:	2100      	movs	r1, #0
 80062c4:	4618      	mov	r0, r3
 80062c6:	f001 f803 	bl	80072d0 <_ZNK11flatbuffers6VectorIfE3GetEm>
 80062ca:	eef0 7a40 	vmov.f32	s15, s0
 80062ce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80062d0:	edc3 7a03 	vstr	s15, [r3, #12]
    // Note that the zero_point field in the FlatBuffers schema is a 64-bit
    // integer, but the zero_point field in the TfLiteQuantizationParams struct
    // is a 32-bit integer.
    result->params.zero_point =
        static_cast<int32_t>(src_quantization->zero_point()->Get(0));
 80062d4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80062d6:	f7ff fb04 	bl	80058e2 <_ZNK6tflite22QuantizationParameters10zero_pointEv>
 80062da:	4603      	mov	r3, r0
 80062dc:	2100      	movs	r1, #0
 80062de:	4618      	mov	r0, r3
 80062e0:	f001 f82c 	bl	800733c <_ZNK11flatbuffers6VectorIxE3GetEm>
 80062e4:	4602      	mov	r2, r0
 80062e6:	460b      	mov	r3, r1
    result->params.zero_point =
 80062e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80062ea:	611a      	str	r2, [r3, #16]

    // Populate per-channel quantization params.
    int channels = src_quantization->scale()->size();
 80062ec:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80062ee:	f7ff faea 	bl	80058c6 <_ZNK6tflite22QuantizationParameters5scaleEv>
 80062f2:	4603      	mov	r3, r0
 80062f4:	4618      	mov	r0, r3
 80062f6:	f000 ffdc 	bl	80072b2 <_ZNK11flatbuffers6VectorIfE4sizeEv>
 80062fa:	4603      	mov	r3, r0
 80062fc:	623b      	str	r3, [r7, #32]
    TfLiteAffineQuantization* quantization =
        allocate_temp
            ? reinterpret_cast<TfLiteAffineQuantization*>(
 80062fe:	7afb      	ldrb	r3, [r7, #11]
 8006300:	2b00      	cmp	r3, #0
 8006302:	d009      	beq.n	8006318 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x1a8>
                  allocator->AllocateTemp(sizeof(TfLiteAffineQuantization),
                                          alignof(TfLiteAffineQuantization)))
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	3310      	adds	r3, #16
 800630a:	681b      	ldr	r3, [r3, #0]
                  allocator->AllocateTemp(sizeof(TfLiteAffineQuantization),
 800630c:	2204      	movs	r2, #4
 800630e:	210c      	movs	r1, #12
 8006310:	68f8      	ldr	r0, [r7, #12]
 8006312:	4798      	blx	r3
 8006314:	4603      	mov	r3, r0
 8006316:	e008      	b.n	800632a <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x1ba>
            : reinterpret_cast<TfLiteAffineQuantization*>(
                  allocator->AllocateFromTail(
                      sizeof(TfLiteAffineQuantization),
                      alignof(TfLiteAffineQuantization)));
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	330c      	adds	r3, #12
 800631e:	681b      	ldr	r3, [r3, #0]
                  allocator->AllocateFromTail(
 8006320:	2204      	movs	r2, #4
 8006322:	210c      	movs	r1, #12
 8006324:	68f8      	ldr	r0, [r7, #12]
 8006326:	4798      	blx	r3
 8006328:	4603      	mov	r3, r0
                      alignof(TfLiteAffineQuantization)));
 800632a:	61fb      	str	r3, [r7, #28]
    if (quantization == nullptr) {
 800632c:	69fb      	ldr	r3, [r7, #28]
 800632e:	2b00      	cmp	r3, #0
 8006330:	d105      	bne.n	800633e <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x1ce>
      TF_LITE_REPORT_ERROR(error_reporter,
 8006332:	493a      	ldr	r1, [pc, #232]	; (800641c <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x2ac>)
 8006334:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8006336:	f7fd fc31 	bl	8003b9c <_ZN6tflite13ErrorReporter6ReportEPKcz>
                           "Unable to allocate TfLiteAffineQuantization.\n");
      return kTfLiteError;
 800633a:	2301      	movs	r3, #1
 800633c:	e068      	b.n	8006410 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x2a0>
    // TODO(b/153688719): Reduce tail allocation by using a global zero-point
    // buffer. This value can not be reused from the flatbuffer since the
    // zero_point is stored as a int64_t.
    quantization->zero_point =
        allocate_temp
            ? reinterpret_cast<TfLiteIntArray*>(allocator->AllocateTemp(
 800633e:	7afb      	ldrb	r3, [r7, #11]
 8006340:	2b00      	cmp	r3, #0
 8006342:	d00d      	beq.n	8006360 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x1f0>
                  TfLiteIntArrayGetSizeInBytes(channels),
                  alignof(TfLiteIntArray)))
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	3310      	adds	r3, #16
 800634a:	681c      	ldr	r4, [r3, #0]
                  TfLiteIntArrayGetSizeInBytes(channels),
 800634c:	6a38      	ldr	r0, [r7, #32]
 800634e:	f7fd fb9b 	bl	8003a88 <TfLiteIntArrayGetSizeInBytes>
 8006352:	4603      	mov	r3, r0
            ? reinterpret_cast<TfLiteIntArray*>(allocator->AllocateTemp(
 8006354:	2204      	movs	r2, #4
 8006356:	4619      	mov	r1, r3
 8006358:	68f8      	ldr	r0, [r7, #12]
 800635a:	47a0      	blx	r4
 800635c:	4603      	mov	r3, r0
 800635e:	e00c      	b.n	800637a <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x20a>
            : reinterpret_cast<TfLiteIntArray*>(allocator->AllocateFromTail(
                  TfLiteIntArrayGetSizeInBytes(channels),
                  alignof(TfLiteIntArray)));
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	330c      	adds	r3, #12
 8006366:	681c      	ldr	r4, [r3, #0]
                  TfLiteIntArrayGetSizeInBytes(channels),
 8006368:	6a38      	ldr	r0, [r7, #32]
 800636a:	f7fd fb8d 	bl	8003a88 <TfLiteIntArrayGetSizeInBytes>
 800636e:	4603      	mov	r3, r0
            : reinterpret_cast<TfLiteIntArray*>(allocator->AllocateFromTail(
 8006370:	2204      	movs	r2, #4
 8006372:	4619      	mov	r1, r3
 8006374:	68f8      	ldr	r0, [r7, #12]
 8006376:	47a0      	blx	r4
 8006378:	4603      	mov	r3, r0
    quantization->zero_point =
 800637a:	69fa      	ldr	r2, [r7, #28]
 800637c:	6053      	str	r3, [r2, #4]
    if (quantization->zero_point == nullptr) {
 800637e:	69fb      	ldr	r3, [r7, #28]
 8006380:	685b      	ldr	r3, [r3, #4]
 8006382:	2b00      	cmp	r3, #0
 8006384:	d105      	bne.n	8006392 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x222>
      TF_LITE_REPORT_ERROR(error_reporter,
 8006386:	4926      	ldr	r1, [pc, #152]	; (8006420 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x2b0>)
 8006388:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800638a:	f7fd fc07 	bl	8003b9c <_ZN6tflite13ErrorReporter6ReportEPKcz>
                           "Unable to allocate quantization->zero_point.\n");
      return kTfLiteError;
 800638e:	2301      	movs	r3, #1
 8006390:	e03e      	b.n	8006410 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x2a0>
    }

    TF_LITE_ENSURE_STATUS(FlatBufferVectorToTfLiteTypeArray(
 8006392:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006394:	f7ff fa97 	bl	80058c6 <_ZNK6tflite22QuantizationParameters5scaleEv>
 8006398:	4602      	mov	r2, r0
 800639a:	69fb      	ldr	r3, [r7, #28]
 800639c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800639e:	68f8      	ldr	r0, [r7, #12]
 80063a0:	f001 f8f7 	bl	8007592 <_ZN6tflite8internal33FlatBufferVectorToTfLiteTypeArrayIf16TfLiteFloatArrayEE12TfLiteStatusPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterEPKN11flatbuffers6VectorIT_EEPPT0_>
 80063a4:	4603      	mov	r3, r0
 80063a6:	76fb      	strb	r3, [r7, #27]
 80063a8:	7efb      	ldrb	r3, [r7, #27]
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d001      	beq.n	80063b2 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x242>
 80063ae:	7efb      	ldrb	r3, [r7, #27]
 80063b0:	e02e      	b.n	8006410 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x2a0>
        allocator, error_reporter, src_quantization->scale(),
        &quantization->scale));

    quantization->zero_point->size = channels;
 80063b2:	69fb      	ldr	r3, [r7, #28]
 80063b4:	685b      	ldr	r3, [r3, #4]
 80063b6:	6a3a      	ldr	r2, [r7, #32]
 80063b8:	601a      	str	r2, [r3, #0]
    int* zero_point_data = quantization->zero_point->data;
 80063ba:	69fb      	ldr	r3, [r7, #28]
 80063bc:	685b      	ldr	r3, [r3, #4]
 80063be:	3304      	adds	r3, #4
 80063c0:	617b      	str	r3, [r7, #20]
    for (int i = 0; i < channels; i++) {
 80063c2:	2300      	movs	r3, #0
 80063c4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80063c6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80063c8:	6a3b      	ldr	r3, [r7, #32]
 80063ca:	429a      	cmp	r2, r3
 80063cc:	da12      	bge.n	80063f4 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x284>
      zero_point_data[i] = src_quantization->zero_point()->Get(i);
 80063ce:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80063d0:	f7ff fa87 	bl	80058e2 <_ZNK6tflite22QuantizationParameters10zero_pointEv>
 80063d4:	4602      	mov	r2, r0
 80063d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063d8:	4619      	mov	r1, r3
 80063da:	4610      	mov	r0, r2
 80063dc:	f000 ffae 	bl	800733c <_ZNK11flatbuffers6VectorIxE3GetEm>
 80063e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063e2:	009b      	lsls	r3, r3, #2
 80063e4:	697a      	ldr	r2, [r7, #20]
 80063e6:	4413      	add	r3, r2
 80063e8:	4602      	mov	r2, r0
 80063ea:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < channels; i++) {
 80063ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063ee:	3301      	adds	r3, #1
 80063f0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80063f2:	e7e8      	b.n	80063c6 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x256>
    }
    // TODO(rocky): Need to add a micro_allocator test case that fails when
    // this is not copied:
    quantization->quantized_dimension = src_quantization->quantized_dimension();
 80063f4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80063f6:	f7ff fa82 	bl	80058fe <_ZNK6tflite22QuantizationParameters19quantized_dimensionEv>
 80063fa:	4602      	mov	r2, r0
 80063fc:	69fb      	ldr	r3, [r7, #28]
 80063fe:	609a      	str	r2, [r3, #8]

    result->quantization = {kTfLiteAffineQuantization, quantization};
 8006400:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006402:	2201      	movs	r2, #1
 8006404:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
 8006408:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800640a:	69fa      	ldr	r2, [r7, #28]
 800640c:	635a      	str	r2, [r3, #52]	; 0x34
  }
  return kTfLiteOk;
 800640e:	2300      	movs	r3, #0
}
 8006410:	4618      	mov	r0, r3
 8006412:	3734      	adds	r7, #52	; 0x34
 8006414:	46bd      	mov	sp, r7
 8006416:	bd90      	pop	{r4, r7, pc}
 8006418:	08021adc 	.word	0x08021adc
 800641c:	0800f284 	.word	0x0800f284
 8006420:	0800f2b4 	.word	0x0800f2b4

08006424 <_ZN6tflite8internal40InitializeTfLiteEvalTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP16TfLiteEvalTensor>:

TfLiteStatus InitializeTfLiteEvalTensorFromFlatbuffer(
    SimpleMemoryAllocator* allocator, const tflite::Tensor& flatbuffer_tensor,
    const flatbuffers::Vector<flatbuffers::Offset<Buffer>>* buffers,
    ErrorReporter* error_reporter, TfLiteEvalTensor* result) {
 8006424:	b580      	push	{r7, lr}
 8006426:	b086      	sub	sp, #24
 8006428:	af00      	add	r7, sp, #0
 800642a:	60f8      	str	r0, [r7, #12]
 800642c:	60b9      	str	r1, [r7, #8]
 800642e:	607a      	str	r2, [r7, #4]
 8006430:	603b      	str	r3, [r7, #0]
  *result = {};
 8006432:	6a3b      	ldr	r3, [r7, #32]
 8006434:	461a      	mov	r2, r3
 8006436:	2300      	movs	r3, #0
 8006438:	6013      	str	r3, [r2, #0]
 800643a:	6053      	str	r3, [r2, #4]
 800643c:	6093      	str	r3, [r2, #8]
  // Make sure the serialized type is one we know how to deal with, and convert
  // it from a flatbuffer enum into a constant used by the kernel C API.
  TF_LITE_ENSURE_STATUS(ConvertTensorType(flatbuffer_tensor.type(),
 800643e:	68b8      	ldr	r0, [r7, #8]
 8006440:	f7ff f836 	bl	80054b0 <_ZNK6tflite6Tensor4typeEv>
 8006444:	4603      	mov	r3, r0
 8006446:	4618      	mov	r0, r3
 8006448:	6a3b      	ldr	r3, [r7, #32]
 800644a:	3308      	adds	r3, #8
 800644c:	683a      	ldr	r2, [r7, #0]
 800644e:	4619      	mov	r1, r3
 8006450:	f7fd fce6 	bl	8003e20 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE>
 8006454:	4603      	mov	r3, r0
 8006456:	75fb      	strb	r3, [r7, #23]
 8006458:	7dfb      	ldrb	r3, [r7, #23]
 800645a:	2b00      	cmp	r3, #0
 800645c:	d001      	beq.n	8006462 <_ZN6tflite8internal40InitializeTfLiteEvalTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP16TfLiteEvalTensor+0x3e>
 800645e:	7dfb      	ldrb	r3, [r7, #23]
 8006460:	e027      	b.n	80064b2 <_ZN6tflite8internal40InitializeTfLiteEvalTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP16TfLiteEvalTensor+0x8e>
                                          &result->type, error_reporter));

  result->data.data = GetFlatbufferTensorBuffer(flatbuffer_tensor, buffers);
 8006462:	6879      	ldr	r1, [r7, #4]
 8006464:	68b8      	ldr	r0, [r7, #8]
 8006466:	f7ff fe55 	bl	8006114 <_ZN6tflite8internal25GetFlatbufferTensorBufferERKNS_6TensorEPKN11flatbuffers6VectorINS4_6OffsetINS_6BufferEEEEE>
 800646a:	4602      	mov	r2, r0
 800646c:	6a3b      	ldr	r3, [r7, #32]
 800646e:	601a      	str	r2, [r3, #0]

  if (flatbuffer_tensor.shape() == nullptr) {
 8006470:	68b8      	ldr	r0, [r7, #8]
 8006472:	f7ff f80f 	bl	8005494 <_ZNK6tflite6Tensor5shapeEv>
 8006476:	4603      	mov	r3, r0
 8006478:	2b00      	cmp	r3, #0
 800647a:	bf0c      	ite	eq
 800647c:	2301      	moveq	r3, #1
 800647e:	2300      	movne	r3, #0
 8006480:	b2db      	uxtb	r3, r3
 8006482:	2b00      	cmp	r3, #0
 8006484:	d003      	beq.n	800648e <_ZN6tflite8internal40InitializeTfLiteEvalTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP16TfLiteEvalTensor+0x6a>
    // flatbuffer_tensor.shape() can return a nullptr in the case of a scalar
    // tensor.
    result->dims = const_cast<TfLiteIntArray*>(&kZeroLengthIntArray);
 8006486:	6a3b      	ldr	r3, [r7, #32]
 8006488:	4a0c      	ldr	r2, [pc, #48]	; (80064bc <_ZN6tflite8internal40InitializeTfLiteEvalTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP16TfLiteEvalTensor+0x98>)
 800648a:	605a      	str	r2, [r3, #4]
 800648c:	e010      	b.n	80064b0 <_ZN6tflite8internal40InitializeTfLiteEvalTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP16TfLiteEvalTensor+0x8c>
  } else {
    TF_LITE_ENSURE_STATUS(FlatBufferVectorToTfLiteTypeArray(
 800648e:	68b8      	ldr	r0, [r7, #8]
 8006490:	f7ff f800 	bl	8005494 <_ZNK6tflite6Tensor5shapeEv>
 8006494:	4602      	mov	r2, r0
 8006496:	6a3b      	ldr	r3, [r7, #32]
 8006498:	3304      	adds	r3, #4
 800649a:	6839      	ldr	r1, [r7, #0]
 800649c:	68f8      	ldr	r0, [r7, #12]
 800649e:	f001 f85f 	bl	8007560 <_ZN6tflite8internal33FlatBufferVectorToTfLiteTypeArrayIl14TfLiteIntArrayEE12TfLiteStatusPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterEPKN11flatbuffers6VectorIT_EEPPT0_>
 80064a2:	4603      	mov	r3, r0
 80064a4:	75bb      	strb	r3, [r7, #22]
 80064a6:	7dbb      	ldrb	r3, [r7, #22]
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d001      	beq.n	80064b0 <_ZN6tflite8internal40InitializeTfLiteEvalTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP16TfLiteEvalTensor+0x8c>
 80064ac:	7dbb      	ldrb	r3, [r7, #22]
 80064ae:	e000      	b.n	80064b2 <_ZN6tflite8internal40InitializeTfLiteEvalTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP16TfLiteEvalTensor+0x8e>
        allocator, error_reporter, flatbuffer_tensor.shape(), &(result->dims)));
  }
  return kTfLiteOk;
 80064b0:	2300      	movs	r3, #0
}
 80064b2:	4618      	mov	r0, r3
 80064b4:	3718      	adds	r7, #24
 80064b6:	46bd      	mov	sp, r7
 80064b8:	bd80      	pop	{r7, pc}
 80064ba:	bf00      	nop
 80064bc:	08021adc 	.word	0x08021adc

080064c0 <_ZN6tflite14MicroAllocatorC1EPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterE>:

}  // namespace internal

MicroAllocator::MicroAllocator(SimpleMemoryAllocator* memory_allocator,
 80064c0:	b480      	push	{r7}
 80064c2:	b085      	sub	sp, #20
 80064c4:	af00      	add	r7, sp, #0
 80064c6:	60f8      	str	r0, [r7, #12]
 80064c8:	60b9      	str	r1, [r7, #8]
 80064ca:	607a      	str	r2, [r7, #4]
                               ErrorReporter* error_reporter)
    : memory_allocator_(memory_allocator),
      error_reporter_(error_reporter),
      model_is_allocating_(false) {}
 80064cc:	4a0c      	ldr	r2, [pc, #48]	; (8006500 <_ZN6tflite14MicroAllocatorC1EPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterE+0x40>)
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	601a      	str	r2, [r3, #0]
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	68ba      	ldr	r2, [r7, #8]
 80064d6:	605a      	str	r2, [r3, #4]
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	687a      	ldr	r2, [r7, #4]
 80064dc:	60da      	str	r2, [r3, #12]
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	2200      	movs	r2, #0
 80064e2:	741a      	strb	r2, [r3, #16]
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	2200      	movs	r2, #0
 80064e8:	615a      	str	r2, [r3, #20]
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	2200      	movs	r2, #0
 80064ee:	619a      	str	r2, [r3, #24]
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	4618      	mov	r0, r3
 80064f4:	3714      	adds	r7, #20
 80064f6:	46bd      	mov	sp, r7
 80064f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064fc:	4770      	bx	lr
 80064fe:	bf00      	nop
 8006500:	08021b00 	.word	0x08021b00

08006504 <_ZN6tflite14MicroAllocatorD1Ev>:

MicroAllocator::~MicroAllocator() {}
 8006504:	b480      	push	{r7}
 8006506:	b083      	sub	sp, #12
 8006508:	af00      	add	r7, sp, #0
 800650a:	6078      	str	r0, [r7, #4]
 800650c:	4a04      	ldr	r2, [pc, #16]	; (8006520 <_ZN6tflite14MicroAllocatorD1Ev+0x1c>)
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	601a      	str	r2, [r3, #0]
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	4618      	mov	r0, r3
 8006516:	370c      	adds	r7, #12
 8006518:	46bd      	mov	sp, r7
 800651a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800651e:	4770      	bx	lr
 8006520:	08021b00 	.word	0x08021b00

08006524 <_ZN6tflite14MicroAllocatorD0Ev>:
 8006524:	b580      	push	{r7, lr}
 8006526:	b082      	sub	sp, #8
 8006528:	af00      	add	r7, sp, #0
 800652a:	6078      	str	r0, [r7, #4]
 800652c:	6878      	ldr	r0, [r7, #4]
 800652e:	f7ff ffe9 	bl	8006504 <_ZN6tflite14MicroAllocatorD1Ev>
 8006532:	211c      	movs	r1, #28
 8006534:	6878      	ldr	r0, [r7, #4]
 8006536:	f004 fcba 	bl	800aeae <_ZdlPvj>
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	4618      	mov	r0, r3
 800653e:	3708      	adds	r7, #8
 8006540:	46bd      	mov	sp, r7
 8006542:	bd80      	pop	{r7, pc}

08006544 <_ZN6tflite14MicroAllocator6CreateEPhjPNS_13ErrorReporterE>:

MicroAllocator* MicroAllocator::Create(uint8_t* tensor_arena, size_t arena_size,
                                       ErrorReporter* error_reporter) {
 8006544:	b580      	push	{r7, lr}
 8006546:	b086      	sub	sp, #24
 8006548:	af00      	add	r7, sp, #0
 800654a:	60f8      	str	r0, [r7, #12]
 800654c:	60b9      	str	r1, [r7, #8]
 800654e:	607a      	str	r2, [r7, #4]
  uint8_t* aligned_arena = AlignPointerUp(tensor_arena, kBufferAlignment);
 8006550:	2110      	movs	r1, #16
 8006552:	68f8      	ldr	r0, [r7, #12]
 8006554:	f7ff f857 	bl	8005606 <_ZN6tflite14AlignPointerUpEPhj>
 8006558:	6178      	str	r0, [r7, #20]
  size_t aligned_arena_size = tensor_arena + arena_size - aligned_arena;
 800655a:	68fa      	ldr	r2, [r7, #12]
 800655c:	68bb      	ldr	r3, [r7, #8]
 800655e:	441a      	add	r2, r3
 8006560:	697b      	ldr	r3, [r7, #20]
 8006562:	1ad3      	subs	r3, r2, r3
 8006564:	613b      	str	r3, [r7, #16]
  return Create(SimpleMemoryAllocator::Create(error_reporter, aligned_arena,
 8006566:	693a      	ldr	r2, [r7, #16]
 8006568:	6979      	ldr	r1, [r7, #20]
 800656a:	6878      	ldr	r0, [r7, #4]
 800656c:	f002 ffc4 	bl	80094f8 <_ZN6tflite21SimpleMemoryAllocator6CreateEPNS_13ErrorReporterEPhj>
 8006570:	4603      	mov	r3, r0
 8006572:	6879      	ldr	r1, [r7, #4]
 8006574:	4618      	mov	r0, r3
 8006576:	f000 f805 	bl	8006584 <_ZN6tflite14MicroAllocator6CreateEPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterE>
 800657a:	4603      	mov	r3, r0
                                              aligned_arena_size),
                error_reporter);
}
 800657c:	4618      	mov	r0, r3
 800657e:	3718      	adds	r7, #24
 8006580:	46bd      	mov	sp, r7
 8006582:	bd80      	pop	{r7, pc}

08006584 <_ZN6tflite14MicroAllocator6CreateEPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterE>:

MicroAllocator* MicroAllocator::Create(SimpleMemoryAllocator* memory_allocator,
                                       ErrorReporter* error_reporter) {
 8006584:	b590      	push	{r4, r7, lr}
 8006586:	b085      	sub	sp, #20
 8006588:	af00      	add	r7, sp, #0
 800658a:	6078      	str	r0, [r7, #4]
 800658c:	6039      	str	r1, [r7, #0]
  TFLITE_DCHECK(memory_allocator != nullptr);
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	2b00      	cmp	r3, #0
 8006592:	d101      	bne.n	8006598 <_ZN6tflite14MicroAllocator6CreateEPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterE+0x14>
 8006594:	f004 fd72 	bl	800b07c <abort>
  TFLITE_DCHECK(error_reporter != nullptr);
 8006598:	683b      	ldr	r3, [r7, #0]
 800659a:	2b00      	cmp	r3, #0
 800659c:	d101      	bne.n	80065a2 <_ZN6tflite14MicroAllocator6CreateEPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterE+0x1e>
 800659e:	f004 fd6d 	bl	800b07c <abort>

  uint8_t* allocator_buffer = memory_allocator->AllocateFromTail(
      sizeof(MicroAllocator), alignof(MicroAllocator));
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	330c      	adds	r3, #12
 80065a8:	681b      	ldr	r3, [r3, #0]
  uint8_t* allocator_buffer = memory_allocator->AllocateFromTail(
 80065aa:	2204      	movs	r2, #4
 80065ac:	211c      	movs	r1, #28
 80065ae:	6878      	ldr	r0, [r7, #4]
 80065b0:	4798      	blx	r3
 80065b2:	60f8      	str	r0, [r7, #12]
  MicroAllocator* allocator =
      new (allocator_buffer) MicroAllocator(memory_allocator, error_reporter);
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	4619      	mov	r1, r3
 80065b8:	201c      	movs	r0, #28
 80065ba:	f7fd fb22 	bl	8003c02 <_ZnwjPv>
 80065be:	4604      	mov	r4, r0
 80065c0:	683a      	ldr	r2, [r7, #0]
 80065c2:	6879      	ldr	r1, [r7, #4]
 80065c4:	4620      	mov	r0, r4
 80065c6:	f7ff ff7b 	bl	80064c0 <_ZN6tflite14MicroAllocatorC1EPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterE>
 80065ca:	60bc      	str	r4, [r7, #8]
  return allocator;
 80065cc:	68bb      	ldr	r3, [r7, #8]
}
 80065ce:	4618      	mov	r0, r3
 80065d0:	3714      	adds	r7, #20
 80065d2:	46bd      	mov	sp, r7
 80065d4:	bd90      	pop	{r4, r7, pc}
	...

080065d8 <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelE>:

SubgraphAllocations* MicroAllocator::StartModelAllocation(const Model* model) {
 80065d8:	b5b0      	push	{r4, r5, r7, lr}
 80065da:	b084      	sub	sp, #16
 80065dc:	af00      	add	r7, sp, #0
 80065de:	6078      	str	r0, [r7, #4]
 80065e0:	6039      	str	r1, [r7, #0]
  TFLITE_DCHECK(model != nullptr);
 80065e2:	683b      	ldr	r3, [r7, #0]
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d101      	bne.n	80065ec <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelE+0x14>
 80065e8:	f004 fd48 	bl	800b07c <abort>

  if (model_is_allocating_) {
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	7c1b      	ldrb	r3, [r3, #16]
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d007      	beq.n	8006604 <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelE+0x2c>
    TF_LITE_REPORT_ERROR(error_reporter_,
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	68db      	ldr	r3, [r3, #12]
 80065f8:	4936      	ldr	r1, [pc, #216]	; (80066d4 <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelE+0xfc>)
 80065fa:	4618      	mov	r0, r3
 80065fc:	f7fd face 	bl	8003b9c <_ZN6tflite13ErrorReporter6ReportEPKcz>
                         "MicroAllocator: Model allocation started before "
                         "finishing previously allocated model");
    return nullptr;
 8006600:	2300      	movs	r3, #0
 8006602:	e063      	b.n	80066cc <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelE+0xf4>
  }

  model_is_allocating_ = true;
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	2201      	movs	r2, #1
 8006608:	741a      	strb	r2, [r3, #16]

  uint8_t* data_allocator_buffer = memory_allocator_->AllocateFromTail(
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	6858      	ldr	r0, [r3, #4]
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	685b      	ldr	r3, [r3, #4]
      sizeof(MicroBuiltinDataAllocator), alignof(MicroBuiltinDataAllocator));
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	330c      	adds	r3, #12
 8006616:	681b      	ldr	r3, [r3, #0]
  uint8_t* data_allocator_buffer = memory_allocator_->AllocateFromTail(
 8006618:	2204      	movs	r2, #4
 800661a:	2108      	movs	r1, #8
 800661c:	4798      	blx	r3
 800661e:	60f8      	str	r0, [r7, #12]
  builtin_data_allocator_ =
 8006620:	68fb      	ldr	r3, [r7, #12]
      new (data_allocator_buffer) MicroBuiltinDataAllocator(memory_allocator_);
 8006622:	4619      	mov	r1, r3
 8006624:	2008      	movs	r0, #8
 8006626:	f7fd faec 	bl	8003c02 <_ZnwjPv>
 800662a:	4604      	mov	r4, r0
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	685b      	ldr	r3, [r3, #4]
 8006630:	4619      	mov	r1, r3
 8006632:	4620      	mov	r0, r4
 8006634:	f7ff fa60 	bl	8005af8 <_ZN6tflite12_GLOBAL__N_125MicroBuiltinDataAllocatorC1EPNS_21SimpleMemoryAllocatorE>
  builtin_data_allocator_ =
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	609c      	str	r4, [r3, #8]

  if (InitScratchBufferData() != kTfLiteOk) {
 800663c:	6878      	ldr	r0, [r7, #4]
 800663e:	f000 fd6b 	bl	8007118 <_ZN6tflite14MicroAllocator21InitScratchBufferDataEv>
 8006642:	4603      	mov	r3, r0
 8006644:	2b00      	cmp	r3, #0
 8006646:	bf14      	ite	ne
 8006648:	2301      	movne	r3, #1
 800664a:	2300      	moveq	r3, #0
 800664c:	b2db      	uxtb	r3, r3
 800664e:	2b00      	cmp	r3, #0
 8006650:	d001      	beq.n	8006656 <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelE+0x7e>
    return nullptr;
 8006652:	2300      	movs	r3, #0
 8006654:	e03a      	b.n	80066cc <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelE+0xf4>
  }

  // Allocate struct to store eval tensors, nodes and registrations.
  SubgraphAllocations* output = reinterpret_cast<SubgraphAllocations*>(
      memory_allocator_->AllocateFromTail(
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	685d      	ldr	r5, [r3, #4]
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	685b      	ldr	r3, [r3, #4]
          sizeof(SubgraphAllocations) * model->subgraphs()->size(),
          alignof(SubgraphAllocations)));
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	330c      	adds	r3, #12
 8006662:	681c      	ldr	r4, [r3, #0]
          sizeof(SubgraphAllocations) * model->subgraphs()->size(),
 8006664:	6838      	ldr	r0, [r7, #0]
 8006666:	f7fe fe03 	bl	8005270 <_ZNK6tflite5Model9subgraphsEv>
 800666a:	4603      	mov	r3, r0
 800666c:	4618      	mov	r0, r3
 800666e:	f7fe fe6f 	bl	8005350 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE4sizeEv>
 8006672:	4603      	mov	r3, r0
 8006674:	00db      	lsls	r3, r3, #3
      memory_allocator_->AllocateFromTail(
 8006676:	2204      	movs	r2, #4
 8006678:	4619      	mov	r1, r3
 800667a:	4628      	mov	r0, r5
 800667c:	47a0      	blx	r4
 800667e:	60b8      	str	r0, [r7, #8]
  if (output == nullptr) {
 8006680:	68bb      	ldr	r3, [r7, #8]
 8006682:	2b00      	cmp	r3, #0
 8006684:	d104      	bne.n	8006690 <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelE+0xb8>
    MicroPrintf("Failed to allocate memory for model metadata.");
 8006686:	4814      	ldr	r0, [pc, #80]	; (80066d8 <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelE+0x100>)
 8006688:	f001 f98e 	bl	80079a8 <_Z11MicroPrintfPKcz>
    return nullptr;
 800668c:	2300      	movs	r3, #0
 800668e:	e01d      	b.n	80066cc <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelE+0xf4>
  }

  if (AllocateTfLiteEvalTensors(model, output) != kTfLiteOk ||
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	331c      	adds	r3, #28
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	68ba      	ldr	r2, [r7, #8]
 800669a:	6839      	ldr	r1, [r7, #0]
 800669c:	6878      	ldr	r0, [r7, #4]
 800669e:	4798      	blx	r3
 80066a0:	4603      	mov	r3, r0
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d10a      	bne.n	80066bc <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelE+0xe4>
      AllocateNodeAndRegistrations(model, output) != kTfLiteOk) {
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	3318      	adds	r3, #24
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	68ba      	ldr	r2, [r7, #8]
 80066b0:	6839      	ldr	r1, [r7, #0]
 80066b2:	6878      	ldr	r0, [r7, #4]
 80066b4:	4798      	blx	r3
 80066b6:	4603      	mov	r3, r0
  if (AllocateTfLiteEvalTensors(model, output) != kTfLiteOk ||
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d001      	beq.n	80066c0 <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelE+0xe8>
 80066bc:	2301      	movs	r3, #1
 80066be:	e000      	b.n	80066c2 <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelE+0xea>
 80066c0:	2300      	movs	r3, #0
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d001      	beq.n	80066ca <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelE+0xf2>
    return nullptr;
 80066c6:	2300      	movs	r3, #0
 80066c8:	e000      	b.n	80066cc <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelE+0xf4>
  }
  return output;
 80066ca:	68bb      	ldr	r3, [r7, #8]
}
 80066cc:	4618      	mov	r0, r3
 80066ce:	3710      	adds	r7, #16
 80066d0:	46bd      	mov	sp, r7
 80066d2:	bdb0      	pop	{r4, r5, r7, pc}
 80066d4:	0800f2e4 	.word	0x0800f2e4
 80066d8:	0800f33c 	.word	0x0800f33c

080066dc <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEPNS_19SubgraphAllocationsEPPNS_19ScratchBufferHandleE>:

TfLiteStatus MicroAllocator::FinishModelAllocation(
    const Model* model, SubgraphAllocations* subgraph_allocations,
    ScratchBufferHandle** scratch_buffer_handles) {
 80066dc:	b590      	push	{r4, r7, lr}
 80066de:	b08b      	sub	sp, #44	; 0x2c
 80066e0:	af02      	add	r7, sp, #8
 80066e2:	60f8      	str	r0, [r7, #12]
 80066e4:	60b9      	str	r1, [r7, #8]
 80066e6:	607a      	str	r2, [r7, #4]
 80066e8:	603b      	str	r3, [r7, #0]
  if (!model_is_allocating_) {
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	7c1b      	ldrb	r3, [r3, #16]
 80066ee:	f083 0301 	eor.w	r3, r3, #1
 80066f2:	b2db      	uxtb	r3, r3
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d007      	beq.n	8006708 <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEPNS_19SubgraphAllocationsEPPNS_19ScratchBufferHandleE+0x2c>
    TF_LITE_REPORT_ERROR(error_reporter_,
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	68db      	ldr	r3, [r3, #12]
 80066fc:	4936      	ldr	r1, [pc, #216]	; (80067d8 <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEPNS_19SubgraphAllocationsEPPNS_19ScratchBufferHandleE+0xfc>)
 80066fe:	4618      	mov	r0, r3
 8006700:	f7fd fa4c 	bl	8003b9c <_ZN6tflite13ErrorReporter6ReportEPKcz>
                         "MicroAllocator: Model allocation finished before "
                         "starting allocating model");
    return kTfLiteError;
 8006704:	2301      	movs	r3, #1
 8006706:	e062      	b.n	80067ce <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEPNS_19SubgraphAllocationsEPPNS_19ScratchBufferHandleE+0xf2>
  }

  // TODO(b/187993197): Track scratch buffers for each subgraph.
  for (size_t subgraph_idx = 0; subgraph_idx < model->subgraphs()->size();
 8006708:	2300      	movs	r3, #0
 800670a:	61fb      	str	r3, [r7, #28]
 800670c:	68b8      	ldr	r0, [r7, #8]
 800670e:	f7fe fdaf 	bl	8005270 <_ZNK6tflite5Model9subgraphsEv>
 8006712:	4603      	mov	r3, r0
 8006714:	4618      	mov	r0, r3
 8006716:	f7fe fe1b 	bl	8005350 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE4sizeEv>
 800671a:	4602      	mov	r2, r0
 800671c:	69fb      	ldr	r3, [r7, #28]
 800671e:	4293      	cmp	r3, r2
 8006720:	bf34      	ite	cc
 8006722:	2301      	movcc	r3, #1
 8006724:	2300      	movcs	r3, #0
 8006726:	b2db      	uxtb	r3, r3
 8006728:	2b00      	cmp	r3, #0
 800672a:	d04c      	beq.n	80067c6 <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEPNS_19SubgraphAllocationsEPPNS_19ScratchBufferHandleE+0xea>
       subgraph_idx++) {
    const SubGraph* subgraph = model->subgraphs()->Get(subgraph_idx);
 800672c:	68b8      	ldr	r0, [r7, #8]
 800672e:	f7fe fd9f 	bl	8005270 <_ZNK6tflite5Model9subgraphsEv>
 8006732:	4603      	mov	r3, r0
 8006734:	69f9      	ldr	r1, [r7, #28]
 8006736:	4618      	mov	r0, r3
 8006738:	f7fe fe18 	bl	800536c <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE3GetEm>
 800673c:	61b8      	str	r0, [r7, #24]
    TFLITE_DCHECK(subgraph != nullptr);
 800673e:	69bb      	ldr	r3, [r7, #24]
 8006740:	2b00      	cmp	r3, #0
 8006742:	d101      	bne.n	8006748 <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEPNS_19SubgraphAllocationsEPPNS_19ScratchBufferHandleE+0x6c>
 8006744:	f004 fc9a 	bl	800b07c <abort>

    TF_LITE_ENSURE_STATUS(AllocateScratchBufferHandles(
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	3330      	adds	r3, #48	; 0x30
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	68fa      	ldr	r2, [r7, #12]
 8006752:	6952      	ldr	r2, [r2, #20]
 8006754:	6839      	ldr	r1, [r7, #0]
 8006756:	68f8      	ldr	r0, [r7, #12]
 8006758:	4798      	blx	r3
 800675a:	4603      	mov	r3, r0
 800675c:	75fb      	strb	r3, [r7, #23]
 800675e:	7dfb      	ldrb	r3, [r7, #23]
 8006760:	2b00      	cmp	r3, #0
 8006762:	d001      	beq.n	8006768 <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEPNS_19SubgraphAllocationsEPPNS_19ScratchBufferHandleE+0x8c>
 8006764:	7dfb      	ldrb	r3, [r7, #23]
 8006766:	e032      	b.n	80067ce <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEPNS_19SubgraphAllocationsEPPNS_19ScratchBufferHandleE+0xf2>
        scratch_buffer_handles, scratch_buffer_request_count_));
    TF_LITE_ENSURE_STATUS(CommitStaticMemoryPlan(
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	332c      	adds	r3, #44	; 0x2c
 800676e:	681c      	ldr	r4, [r3, #0]
 8006770:	69fb      	ldr	r3, [r7, #28]
 8006772:	00db      	lsls	r3, r3, #3
 8006774:	687a      	ldr	r2, [r7, #4]
 8006776:	4413      	add	r3, r2
 8006778:	685a      	ldr	r2, [r3, #4]
 800677a:	683b      	ldr	r3, [r7, #0]
 800677c:	6819      	ldr	r1, [r3, #0]
 800677e:	69fb      	ldr	r3, [r7, #28]
 8006780:	9300      	str	r3, [sp, #0]
 8006782:	460b      	mov	r3, r1
 8006784:	68b9      	ldr	r1, [r7, #8]
 8006786:	68f8      	ldr	r0, [r7, #12]
 8006788:	47a0      	blx	r4
 800678a:	4603      	mov	r3, r0
 800678c:	75bb      	strb	r3, [r7, #22]
 800678e:	7dbb      	ldrb	r3, [r7, #22]
 8006790:	2b00      	cmp	r3, #0
 8006792:	d001      	beq.n	8006798 <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEPNS_19SubgraphAllocationsEPPNS_19ScratchBufferHandleE+0xbc>
 8006794:	7dbb      	ldrb	r3, [r7, #22]
 8006796:	e01a      	b.n	80067ce <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEPNS_19SubgraphAllocationsEPPNS_19ScratchBufferHandleE+0xf2>
        model, subgraph_allocations[subgraph_idx].tensors,
        *scratch_buffer_handles, subgraph_idx));
    TF_LITE_ENSURE_STATUS(AllocateVariables(
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	3320      	adds	r3, #32
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	69fa      	ldr	r2, [r7, #28]
 80067a2:	00d2      	lsls	r2, r2, #3
 80067a4:	6879      	ldr	r1, [r7, #4]
 80067a6:	440a      	add	r2, r1
 80067a8:	6852      	ldr	r2, [r2, #4]
 80067aa:	69b9      	ldr	r1, [r7, #24]
 80067ac:	68f8      	ldr	r0, [r7, #12]
 80067ae:	4798      	blx	r3
 80067b0:	4603      	mov	r3, r0
 80067b2:	757b      	strb	r3, [r7, #21]
 80067b4:	7d7b      	ldrb	r3, [r7, #21]
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d001      	beq.n	80067be <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEPNS_19SubgraphAllocationsEPPNS_19ScratchBufferHandleE+0xe2>
 80067ba:	7d7b      	ldrb	r3, [r7, #21]
 80067bc:	e007      	b.n	80067ce <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEPNS_19SubgraphAllocationsEPPNS_19ScratchBufferHandleE+0xf2>
  for (size_t subgraph_idx = 0; subgraph_idx < model->subgraphs()->size();
 80067be:	69fb      	ldr	r3, [r7, #28]
 80067c0:	3301      	adds	r3, #1
 80067c2:	61fb      	str	r3, [r7, #28]
 80067c4:	e7a2      	b.n	800670c <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEPNS_19SubgraphAllocationsEPPNS_19ScratchBufferHandleE+0x30>
        subgraph, subgraph_allocations[subgraph_idx].tensors));
  }
  model_is_allocating_ = false;
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	2200      	movs	r2, #0
 80067ca:	741a      	strb	r2, [r3, #16]
  return kTfLiteOk;
 80067cc:	2300      	movs	r3, #0
}
 80067ce:	4618      	mov	r0, r3
 80067d0:	3724      	adds	r7, #36	; 0x24
 80067d2:	46bd      	mov	sp, r7
 80067d4:	bd90      	pop	{r4, r7, pc}
 80067d6:	bf00      	nop
 80067d8:	0800f36c 	.word	0x0800f36c

080067dc <_ZN6tflite14MicroAllocator24AllocatePersistentBufferEj>:

void* MicroAllocator::AllocatePersistentBuffer(size_t bytes) {
 80067dc:	b580      	push	{r7, lr}
 80067de:	b082      	sub	sp, #8
 80067e0:	af00      	add	r7, sp, #0
 80067e2:	6078      	str	r0, [r7, #4]
 80067e4:	6039      	str	r1, [r7, #0]
  return memory_allocator_->AllocateFromTail(bytes, kBufferAlignment);
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	6858      	ldr	r0, [r3, #4]
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	685b      	ldr	r3, [r3, #4]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	330c      	adds	r3, #12
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	2210      	movs	r2, #16
 80067f6:	6839      	ldr	r1, [r7, #0]
 80067f8:	4798      	blx	r3
 80067fa:	4603      	mov	r3, r0
}
 80067fc:	4618      	mov	r0, r3
 80067fe:	3708      	adds	r7, #8
 8006800:	46bd      	mov	sp, r7
 8006802:	bd80      	pop	{r7, pc}

08006804 <_ZN6tflite14MicroAllocator27RequestScratchBufferInArenaEjiPi>:

TfLiteStatus MicroAllocator::RequestScratchBufferInArena(size_t bytes,
                                                         int subgraph_idx,
                                                         int* buffer_idx) {
 8006804:	b580      	push	{r7, lr}
 8006806:	b088      	sub	sp, #32
 8006808:	af00      	add	r7, sp, #0
 800680a:	60f8      	str	r0, [r7, #12]
 800680c:	60b9      	str	r1, [r7, #8]
 800680e:	607a      	str	r2, [r7, #4]
 8006810:	603b      	str	r3, [r7, #0]
  // All scratch buffer requests are stored in the head section of the arena
  // when a model is in the prepare phase. First align a scratch buffer request
  // pointer to the start of the head:
  internal::ScratchBufferRequest* requests = GetScratchBufferRequests();
 8006812:	68f8      	ldr	r0, [r7, #12]
 8006814:	f000 fc9d 	bl	8007152 <_ZN6tflite14MicroAllocator24GetScratchBufferRequestsEv>
 8006818:	6178      	str	r0, [r7, #20]

  // Count the number of requested scratch buffers for the current node:
  size_t current_node_request_count = 0;
 800681a:	2300      	movs	r3, #0
 800681c:	61fb      	str	r3, [r7, #28]
  for (size_t i = 0; i < scratch_buffer_request_count_; ++i) {
 800681e:	2300      	movs	r3, #0
 8006820:	61bb      	str	r3, [r7, #24]
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	695b      	ldr	r3, [r3, #20]
 8006826:	69ba      	ldr	r2, [r7, #24]
 8006828:	429a      	cmp	r2, r3
 800682a:	d20e      	bcs.n	800684a <_ZN6tflite14MicroAllocator27RequestScratchBufferInArenaEjiPi+0x46>
    if (requests[i].node_idx == kUnassignedScratchBufferRequestIndex) {
 800682c:	69bb      	ldr	r3, [r7, #24]
 800682e:	00db      	lsls	r3, r3, #3
 8006830:	697a      	ldr	r2, [r7, #20]
 8006832:	4413      	add	r3, r2
 8006834:	685b      	ldr	r3, [r3, #4]
 8006836:	f1b3 3fff 	cmp.w	r3, #4294967295
 800683a:	d102      	bne.n	8006842 <_ZN6tflite14MicroAllocator27RequestScratchBufferInArenaEjiPi+0x3e>
      ++current_node_request_count;
 800683c:	69fb      	ldr	r3, [r7, #28]
 800683e:	3301      	adds	r3, #1
 8006840:	61fb      	str	r3, [r7, #28]
  for (size_t i = 0; i < scratch_buffer_request_count_; ++i) {
 8006842:	69bb      	ldr	r3, [r7, #24]
 8006844:	3301      	adds	r3, #1
 8006846:	61bb      	str	r3, [r7, #24]
 8006848:	e7eb      	b.n	8006822 <_ZN6tflite14MicroAllocator27RequestScratchBufferInArenaEjiPi+0x1e>
    }
  }

  // First, ensure that the per-kernel request has not exceeded the limit:
  if (current_node_request_count >= kMaxScratchBuffersPerOp) {
 800684a:	69fb      	ldr	r3, [r7, #28]
 800684c:	2b0b      	cmp	r3, #11
 800684e:	d908      	bls.n	8006862 <_ZN6tflite14MicroAllocator27RequestScratchBufferInArenaEjiPi+0x5e>
    TF_LITE_REPORT_ERROR(
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	68db      	ldr	r3, [r3, #12]
 8006854:	220c      	movs	r2, #12
 8006856:	4913      	ldr	r1, [pc, #76]	; (80068a4 <_ZN6tflite14MicroAllocator27RequestScratchBufferInArenaEjiPi+0xa0>)
 8006858:	4618      	mov	r0, r3
 800685a:	f7fd f99f 	bl	8003b9c <_ZN6tflite13ErrorReporter6ReportEPKcz>
        error_reporter_,
        "Scratch buffer request exeeds limit per operator (%d)",
        kMaxScratchBuffersPerOp);
    return kTfLiteError;
 800685e:	2301      	movs	r3, #1
 8006860:	e01c      	b.n	800689c <_ZN6tflite14MicroAllocator27RequestScratchBufferInArenaEjiPi+0x98>
  }

  // Initialize and assign values for the request at the current index:
  internal::ScratchBufferRequest* current_request =
      &requests[scratch_buffer_request_count_];
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	695b      	ldr	r3, [r3, #20]
 8006866:	00db      	lsls	r3, r3, #3
  internal::ScratchBufferRequest* current_request =
 8006868:	697a      	ldr	r2, [r7, #20]
 800686a:	4413      	add	r3, r2
 800686c:	613b      	str	r3, [r7, #16]
  *current_request = {};
 800686e:	693b      	ldr	r3, [r7, #16]
 8006870:	461a      	mov	r2, r3
 8006872:	2300      	movs	r3, #0
 8006874:	6013      	str	r3, [r2, #0]
 8006876:	6053      	str	r3, [r2, #4]
  // Assign -1 as a sentinel value that will be updated when the node finishes
  // allocating:
  current_request->bytes = bytes;
 8006878:	693b      	ldr	r3, [r7, #16]
 800687a:	68ba      	ldr	r2, [r7, #8]
 800687c:	601a      	str	r2, [r3, #0]
  current_request->node_idx = kUnassignedScratchBufferRequestIndex;
 800687e:	693b      	ldr	r3, [r7, #16]
 8006880:	f04f 32ff 	mov.w	r2, #4294967295
 8006884:	605a      	str	r2, [r3, #4]

  // Assign the current request index to the out-param:
  *buffer_idx = scratch_buffer_request_count_;
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	695b      	ldr	r3, [r3, #20]
 800688a:	461a      	mov	r2, r3
 800688c:	683b      	ldr	r3, [r7, #0]
 800688e:	601a      	str	r2, [r3, #0]

  // Bump the request count to prepare for the next request:
  ++scratch_buffer_request_count_;
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	695b      	ldr	r3, [r3, #20]
 8006894:	1c5a      	adds	r2, r3, #1
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	615a      	str	r2, [r3, #20]
  return kTfLiteOk;
 800689a:	2300      	movs	r3, #0
}
 800689c:	4618      	mov	r0, r3
 800689e:	3720      	adds	r7, #32
 80068a0:	46bd      	mov	sp, r7
 80068a2:	bd80      	pop	{r7, pc}
 80068a4:	0800f3b8 	.word	0x0800f3b8

080068a8 <_ZN6tflite14MicroAllocator28FinishPrepareNodeAllocationsEi>:

TfLiteStatus MicroAllocator::FinishPrepareNodeAllocations(int node_id) {
 80068a8:	b580      	push	{r7, lr}
 80068aa:	b086      	sub	sp, #24
 80068ac:	af00      	add	r7, sp, #0
 80068ae:	6078      	str	r0, [r7, #4]
 80068b0:	6039      	str	r1, [r7, #0]
  // When a node has finished preparing, all temp allocations performed by the
  // kernel should be cleaned up:
  ResetTempAllocations();
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	3308      	adds	r3, #8
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	6878      	ldr	r0, [r7, #4]
 80068bc:	4798      	blx	r3

  // Find and update any new scratch buffer requests for the current node:
  internal::ScratchBufferRequest* requests = GetScratchBufferRequests();
 80068be:	6878      	ldr	r0, [r7, #4]
 80068c0:	f000 fc47 	bl	8007152 <_ZN6tflite14MicroAllocator24GetScratchBufferRequestsEv>
 80068c4:	6138      	str	r0, [r7, #16]

  for (size_t i = 0; i < scratch_buffer_request_count_; ++i) {
 80068c6:	2300      	movs	r3, #0
 80068c8:	617b      	str	r3, [r7, #20]
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	695b      	ldr	r3, [r3, #20]
 80068ce:	697a      	ldr	r2, [r7, #20]
 80068d0:	429a      	cmp	r2, r3
 80068d2:	d211      	bcs.n	80068f8 <_ZN6tflite14MicroAllocator28FinishPrepareNodeAllocationsEi+0x50>
    // A request with a node_idx of -1 is a sentinel value used to indicate this
    // was a new request for the current node. The allocator finally knows the
    // node index at this point. Assign the value and update the list of new
    // requests so the head section can be adjusted to allow for the next kernel
    // to allocate at most kMaxScratchBuffersPerOp requests:
    if (requests[i].node_idx == kUnassignedScratchBufferRequestIndex) {
 80068d4:	697b      	ldr	r3, [r7, #20]
 80068d6:	00db      	lsls	r3, r3, #3
 80068d8:	693a      	ldr	r2, [r7, #16]
 80068da:	4413      	add	r3, r2
 80068dc:	685b      	ldr	r3, [r3, #4]
 80068de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80068e2:	d105      	bne.n	80068f0 <_ZN6tflite14MicroAllocator28FinishPrepareNodeAllocationsEi+0x48>
      requests[i].node_idx = node_id;
 80068e4:	697b      	ldr	r3, [r7, #20]
 80068e6:	00db      	lsls	r3, r3, #3
 80068e8:	693a      	ldr	r2, [r7, #16]
 80068ea:	4413      	add	r3, r2
 80068ec:	683a      	ldr	r2, [r7, #0]
 80068ee:	605a      	str	r2, [r3, #4]
  for (size_t i = 0; i < scratch_buffer_request_count_; ++i) {
 80068f0:	697b      	ldr	r3, [r7, #20]
 80068f2:	3301      	adds	r3, #1
 80068f4:	617b      	str	r3, [r7, #20]
 80068f6:	e7e8      	b.n	80068ca <_ZN6tflite14MicroAllocator28FinishPrepareNodeAllocationsEi+0x22>
    }
  }

  // Ensure that the head is re-adjusted to allow for another at-most
  // kMaxScratchBuffersPerOp scratch buffer requests in the next operator:
  TF_LITE_ENSURE_STATUS(memory_allocator_->SetHeadBufferSize(
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	6858      	ldr	r0, [r3, #4]
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	685b      	ldr	r3, [r3, #4]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	3308      	adds	r3, #8
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	687a      	ldr	r2, [r7, #4]
 8006908:	6952      	ldr	r2, [r2, #20]
 800690a:	320c      	adds	r2, #12
 800690c:	00d1      	lsls	r1, r2, #3
 800690e:	2204      	movs	r2, #4
 8006910:	4798      	blx	r3
 8006912:	4603      	mov	r3, r0
 8006914:	73fb      	strb	r3, [r7, #15]
 8006916:	7bfb      	ldrb	r3, [r7, #15]
 8006918:	2b00      	cmp	r3, #0
 800691a:	d001      	beq.n	8006920 <_ZN6tflite14MicroAllocator28FinishPrepareNodeAllocationsEi+0x78>
 800691c:	7bfb      	ldrb	r3, [r7, #15]
 800691e:	e000      	b.n	8006922 <_ZN6tflite14MicroAllocator28FinishPrepareNodeAllocationsEi+0x7a>
      sizeof(internal::ScratchBufferRequest) *
          (scratch_buffer_request_count_ + kMaxScratchBuffersPerOp),
      alignof(internal::ScratchBufferRequest)));

  return kTfLiteOk;
 8006920:	2300      	movs	r3, #0
}
 8006922:	4618      	mov	r0, r3
 8006924:	3718      	adds	r7, #24
 8006926:	46bd      	mov	sp, r7
 8006928:	bd80      	pop	{r7, pc}
	...

0800692c <_ZN6tflite14MicroAllocator28AllocateNodeAndRegistrationsEPKNS_5ModelEPNS_19SubgraphAllocationsE>:
size_t MicroAllocator::used_bytes() const {
  return memory_allocator_->GetUsedBytes();
}

TfLiteStatus MicroAllocator::AllocateNodeAndRegistrations(
    const Model* model, SubgraphAllocations* subgraph_allocations) {
 800692c:	b580      	push	{r7, lr}
 800692e:	b088      	sub	sp, #32
 8006930:	af00      	add	r7, sp, #0
 8006932:	60f8      	str	r0, [r7, #12]
 8006934:	60b9      	str	r1, [r7, #8]
 8006936:	607a      	str	r2, [r7, #4]
  TFLITE_DCHECK(subgraph_allocations != nullptr);
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	2b00      	cmp	r3, #0
 800693c:	d101      	bne.n	8006942 <_ZN6tflite14MicroAllocator28AllocateNodeAndRegistrationsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x16>
 800693e:	f004 fb9d 	bl	800b07c <abort>

  for (size_t subgraph_idx = 0; subgraph_idx < model->subgraphs()->size();
 8006942:	2300      	movs	r3, #0
 8006944:	61fb      	str	r3, [r7, #28]
 8006946:	68b8      	ldr	r0, [r7, #8]
 8006948:	f7fe fc92 	bl	8005270 <_ZNK6tflite5Model9subgraphsEv>
 800694c:	4603      	mov	r3, r0
 800694e:	4618      	mov	r0, r3
 8006950:	f7fe fcfe 	bl	8005350 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE4sizeEv>
 8006954:	4602      	mov	r2, r0
 8006956:	69fb      	ldr	r3, [r7, #28]
 8006958:	4293      	cmp	r3, r2
 800695a:	bf34      	ite	cc
 800695c:	2301      	movcc	r3, #1
 800695e:	2300      	movcs	r3, #0
 8006960:	b2db      	uxtb	r3, r3
 8006962:	2b00      	cmp	r3, #0
 8006964:	d034      	beq.n	80069d0 <_ZN6tflite14MicroAllocator28AllocateNodeAndRegistrationsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0xa4>
       subgraph_idx++) {
    const SubGraph* subgraph = model->subgraphs()->Get(subgraph_idx);
 8006966:	68b8      	ldr	r0, [r7, #8]
 8006968:	f7fe fc82 	bl	8005270 <_ZNK6tflite5Model9subgraphsEv>
 800696c:	4603      	mov	r3, r0
 800696e:	69f9      	ldr	r1, [r7, #28]
 8006970:	4618      	mov	r0, r3
 8006972:	f7fe fcfb 	bl	800536c <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE3GetEm>
 8006976:	61b8      	str	r0, [r7, #24]
    TFLITE_DCHECK(subgraph != nullptr);
 8006978:	69bb      	ldr	r3, [r7, #24]
 800697a:	2b00      	cmp	r3, #0
 800697c:	d101      	bne.n	8006982 <_ZN6tflite14MicroAllocator28AllocateNodeAndRegistrationsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x56>
 800697e:	f004 fb7d 	bl	800b07c <abort>

    uint32_t operators_size = NumSubgraphOperators(subgraph);
 8006982:	69b8      	ldr	r0, [r7, #24]
 8006984:	f7fe fc82 	bl	800528c <_ZN6tflite20NumSubgraphOperatorsEPKNS_8SubGraphE>
 8006988:	6178      	str	r0, [r7, #20]

    // Initialize NodeAndRegistrations for the subgraph.
    NodeAndRegistration* output = reinterpret_cast<NodeAndRegistration*>(
        memory_allocator_->AllocateFromTail(
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	6858      	ldr	r0, [r3, #4]
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	685b      	ldr	r3, [r3, #4]
            sizeof(NodeAndRegistration) * operators_size,
            alignof(NodeAndRegistration)));
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	330c      	adds	r3, #12
 8006996:	681b      	ldr	r3, [r3, #0]
            sizeof(NodeAndRegistration) * operators_size,
 8006998:	697a      	ldr	r2, [r7, #20]
 800699a:	212c      	movs	r1, #44	; 0x2c
 800699c:	fb01 f102 	mul.w	r1, r1, r2
        memory_allocator_->AllocateFromTail(
 80069a0:	2204      	movs	r2, #4
 80069a2:	4798      	blx	r3
 80069a4:	6138      	str	r0, [r7, #16]
    if (output == nullptr) {
 80069a6:	693b      	ldr	r3, [r7, #16]
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d107      	bne.n	80069bc <_ZN6tflite14MicroAllocator28AllocateNodeAndRegistrationsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x90>
      TF_LITE_REPORT_ERROR(
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	68db      	ldr	r3, [r3, #12]
 80069b0:	490a      	ldr	r1, [pc, #40]	; (80069dc <_ZN6tflite14MicroAllocator28AllocateNodeAndRegistrationsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0xb0>)
 80069b2:	4618      	mov	r0, r3
 80069b4:	f7fd f8f2 	bl	8003b9c <_ZN6tflite13ErrorReporter6ReportEPKcz>
          error_reporter_,
          "Failed to allocate memory for node_and_registrations.");
      return kTfLiteError;
 80069b8:	2301      	movs	r3, #1
 80069ba:	e00a      	b.n	80069d2 <_ZN6tflite14MicroAllocator28AllocateNodeAndRegistrationsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0xa6>
    }
    subgraph_allocations[subgraph_idx].node_and_registrations = output;
 80069bc:	69fb      	ldr	r3, [r7, #28]
 80069be:	00db      	lsls	r3, r3, #3
 80069c0:	687a      	ldr	r2, [r7, #4]
 80069c2:	4413      	add	r3, r2
 80069c4:	693a      	ldr	r2, [r7, #16]
 80069c6:	601a      	str	r2, [r3, #0]
  for (size_t subgraph_idx = 0; subgraph_idx < model->subgraphs()->size();
 80069c8:	69fb      	ldr	r3, [r7, #28]
 80069ca:	3301      	adds	r3, #1
 80069cc:	61fb      	str	r3, [r7, #28]
 80069ce:	e7ba      	b.n	8006946 <_ZN6tflite14MicroAllocator28AllocateNodeAndRegistrationsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x1a>
  }
  return kTfLiteOk;
 80069d0:	2300      	movs	r3, #0
}
 80069d2:	4618      	mov	r0, r3
 80069d4:	3720      	adds	r7, #32
 80069d6:	46bd      	mov	sp, r7
 80069d8:	bd80      	pop	{r7, pc}
 80069da:	bf00      	nop
 80069dc:	0800f3f0 	.word	0x0800f3f0

080069e0 <_ZN6tflite14MicroAllocator30AllocatePersistentTfLiteTensorEPKNS_5ModelEPKNS_19SubgraphAllocationsEii>:
TfLiteTensor* MicroAllocator::AllocatePersistentTfLiteTensor(
    const Model* model, const SubgraphAllocations* subgraph_allocations,
    int tensor_index, int subgraph_index) {
 80069e0:	b590      	push	{r4, r7, lr}
 80069e2:	b089      	sub	sp, #36	; 0x24
 80069e4:	af02      	add	r7, sp, #8
 80069e6:	60f8      	str	r0, [r7, #12]
 80069e8:	60b9      	str	r1, [r7, #8]
 80069ea:	607a      	str	r2, [r7, #4]
 80069ec:	603b      	str	r3, [r7, #0]
  const SubGraph* subgraph = model->subgraphs()->Get(subgraph_index);
 80069ee:	68b8      	ldr	r0, [r7, #8]
 80069f0:	f7fe fc3e 	bl	8005270 <_ZNK6tflite5Model9subgraphsEv>
 80069f4:	4602      	mov	r2, r0
 80069f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069f8:	4619      	mov	r1, r3
 80069fa:	4610      	mov	r0, r2
 80069fc:	f7fe fcb6 	bl	800536c <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE3GetEm>
 8006a00:	6178      	str	r0, [r7, #20]
  TFLITE_DCHECK(subgraph != nullptr);
 8006a02:	697b      	ldr	r3, [r7, #20]
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	d101      	bne.n	8006a0c <_ZN6tflite14MicroAllocator30AllocatePersistentTfLiteTensorEPKNS_5ModelEPKNS_19SubgraphAllocationsEii+0x2c>
 8006a08:	f004 fb38 	bl	800b07c <abort>

  // This value is allocated from persistent arena space. It is guaranteed to be
  // around for the lifetime of the application.
  TfLiteTensor* tensor = AllocatePersistentTfLiteTensorInternal();
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	3324      	adds	r3, #36	; 0x24
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	68f8      	ldr	r0, [r7, #12]
 8006a16:	4798      	blx	r3
 8006a18:	6138      	str	r0, [r7, #16]
  // Populate any fields from the flatbuffer, since this TfLiteTensor struct is
  // allocated in the persistent section of the arena, ensure that additional
  // allocations also take place in that section of the arena.
  if (PopulateTfLiteTensorFromFlatbuffer(
          model, tensor, tensor_index, subgraph_index,
          /*allocate_temp=*/false) != kTfLiteOk) {
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	3328      	adds	r3, #40	; 0x28
 8006a20:	681c      	ldr	r4, [r3, #0]
  if (PopulateTfLiteTensorFromFlatbuffer(
 8006a22:	2300      	movs	r3, #0
 8006a24:	9301      	str	r3, [sp, #4]
 8006a26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a28:	9300      	str	r3, [sp, #0]
 8006a2a:	683b      	ldr	r3, [r7, #0]
 8006a2c:	693a      	ldr	r2, [r7, #16]
 8006a2e:	68b9      	ldr	r1, [r7, #8]
 8006a30:	68f8      	ldr	r0, [r7, #12]
 8006a32:	47a0      	blx	r4
 8006a34:	4603      	mov	r3, r0
          /*allocate_temp=*/false) != kTfLiteOk) {
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	bf14      	ite	ne
 8006a3a:	2301      	movne	r3, #1
 8006a3c:	2300      	moveq	r3, #0
 8006a3e:	b2db      	uxtb	r3, r3
  if (PopulateTfLiteTensorFromFlatbuffer(
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	d007      	beq.n	8006a54 <_ZN6tflite14MicroAllocator30AllocatePersistentTfLiteTensorEPKNS_5ModelEPKNS_19SubgraphAllocationsEii+0x74>
    TF_LITE_REPORT_ERROR(error_reporter_,
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	68db      	ldr	r3, [r3, #12]
 8006a48:	4914      	ldr	r1, [pc, #80]	; (8006a9c <_ZN6tflite14MicroAllocator30AllocatePersistentTfLiteTensorEPKNS_5ModelEPKNS_19SubgraphAllocationsEii+0xbc>)
 8006a4a:	4618      	mov	r0, r3
 8006a4c:	f7fd f8a6 	bl	8003b9c <_ZN6tflite13ErrorReporter6ReportEPKcz>
                         "Failed to populate a persistent TfLiteTensor struct "
                         "from flatbuffer data!");
    return nullptr;
 8006a50:	2300      	movs	r3, #0
 8006a52:	e01f      	b.n	8006a94 <_ZN6tflite14MicroAllocator30AllocatePersistentTfLiteTensorEPKNS_5ModelEPKNS_19SubgraphAllocationsEii+0xb4>
  }

  if (subgraph_allocations != nullptr) {
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d01b      	beq.n	8006a92 <_ZN6tflite14MicroAllocator30AllocatePersistentTfLiteTensorEPKNS_5ModelEPKNS_19SubgraphAllocationsEii+0xb2>
    // Tensor buffers that are allocated at runtime (e.g. non-weight buffers)
    // and not located in the flatbuffer are stored on the pre-allocated list of
    // TfLiteEvalTensors structs. These structs are the source of truth, simply
    // point the corresponding buffer to the new TfLiteTensor data value.
    tensor->data.data =
        subgraph_allocations[subgraph_index].tensors[tensor_index].data.data;
 8006a5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a5c:	00db      	lsls	r3, r3, #3
 8006a5e:	687a      	ldr	r2, [r7, #4]
 8006a60:	4413      	add	r3, r2
 8006a62:	6859      	ldr	r1, [r3, #4]
 8006a64:	683a      	ldr	r2, [r7, #0]
 8006a66:	4613      	mov	r3, r2
 8006a68:	005b      	lsls	r3, r3, #1
 8006a6a:	4413      	add	r3, r2
 8006a6c:	009b      	lsls	r3, r3, #2
 8006a6e:	440b      	add	r3, r1
 8006a70:	681a      	ldr	r2, [r3, #0]
    tensor->data.data =
 8006a72:	693b      	ldr	r3, [r7, #16]
 8006a74:	605a      	str	r2, [r3, #4]
    // TfLiteEvalTensor structs must also be the source of truth for the
    // TfLiteTensor dims.
    tensor->dims =
        subgraph_allocations[subgraph_index].tensors[tensor_index].dims;
 8006a76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a78:	00db      	lsls	r3, r3, #3
 8006a7a:	687a      	ldr	r2, [r7, #4]
 8006a7c:	4413      	add	r3, r2
 8006a7e:	6859      	ldr	r1, [r3, #4]
 8006a80:	683a      	ldr	r2, [r7, #0]
 8006a82:	4613      	mov	r3, r2
 8006a84:	005b      	lsls	r3, r3, #1
 8006a86:	4413      	add	r3, r2
 8006a88:	009b      	lsls	r3, r3, #2
 8006a8a:	440b      	add	r3, r1
 8006a8c:	685a      	ldr	r2, [r3, #4]
    tensor->dims =
 8006a8e:	693b      	ldr	r3, [r7, #16]
 8006a90:	609a      	str	r2, [r3, #8]
  }
  return tensor;
 8006a92:	693b      	ldr	r3, [r7, #16]
}
 8006a94:	4618      	mov	r0, r3
 8006a96:	371c      	adds	r7, #28
 8006a98:	46bd      	mov	sp, r7
 8006a9a:	bd90      	pop	{r4, r7, pc}
 8006a9c:	0800f428 	.word	0x0800f428

08006aa0 <_ZN6tflite14MicroAllocator24AllocateTempTfLiteTensorEPKNS_5ModelEPKNS_19SubgraphAllocationsEii>:

TfLiteTensor* MicroAllocator::AllocateTempTfLiteTensor(
    const Model* model, const SubgraphAllocations* subgraph_allocations,
    int tensor_index, int subgraph_index) {
 8006aa0:	b590      	push	{r4, r7, lr}
 8006aa2:	b089      	sub	sp, #36	; 0x24
 8006aa4:	af02      	add	r7, sp, #8
 8006aa6:	60f8      	str	r0, [r7, #12]
 8006aa8:	60b9      	str	r1, [r7, #8]
 8006aaa:	607a      	str	r2, [r7, #4]
 8006aac:	603b      	str	r3, [r7, #0]
  const SubGraph* subgraph = model->subgraphs()->Get(subgraph_index);
 8006aae:	68b8      	ldr	r0, [r7, #8]
 8006ab0:	f7fe fbde 	bl	8005270 <_ZNK6tflite5Model9subgraphsEv>
 8006ab4:	4602      	mov	r2, r0
 8006ab6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ab8:	4619      	mov	r1, r3
 8006aba:	4610      	mov	r0, r2
 8006abc:	f7fe fc56 	bl	800536c <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE3GetEm>
 8006ac0:	6178      	str	r0, [r7, #20]
  TFLITE_DCHECK(subgraph != nullptr);
 8006ac2:	697b      	ldr	r3, [r7, #20]
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d101      	bne.n	8006acc <_ZN6tflite14MicroAllocator24AllocateTempTfLiteTensorEPKNS_5ModelEPKNS_19SubgraphAllocationsEii+0x2c>
 8006ac8:	f004 fad8 	bl	800b07c <abort>

  // This value is allocated from temporary arena space. It is guaranteed to be
  // around for at least the scope of the calling function. Since this struct
  // allocation takes place in temp space, no need to own or cleanup.
  TfLiteTensor* tensor =
      reinterpret_cast<TfLiteTensor*>(memory_allocator_->AllocateTemp(
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	6858      	ldr	r0, [r3, #4]
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	685b      	ldr	r3, [r3, #4]
          sizeof(TfLiteTensor), alignof(TfLiteTensor)));
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	3310      	adds	r3, #16
 8006ad8:	681b      	ldr	r3, [r3, #0]
      reinterpret_cast<TfLiteTensor*>(memory_allocator_->AllocateTemp(
 8006ada:	2204      	movs	r2, #4
 8006adc:	2140      	movs	r1, #64	; 0x40
 8006ade:	4798      	blx	r3
 8006ae0:	6138      	str	r0, [r7, #16]
  // Populate any fields from the flatbuffer, since this TfLiteTensor struct is
  // allocated in the temp section of the arena, ensure that additional
  // allocations also take place in that section of the arena.
  if (PopulateTfLiteTensorFromFlatbuffer(model, tensor, tensor_index,
                                         subgraph_index,
                                         /*allocate_temp=*/true) != kTfLiteOk) {
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	3328      	adds	r3, #40	; 0x28
 8006ae8:	681c      	ldr	r4, [r3, #0]
  if (PopulateTfLiteTensorFromFlatbuffer(model, tensor, tensor_index,
 8006aea:	2301      	movs	r3, #1
 8006aec:	9301      	str	r3, [sp, #4]
 8006aee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006af0:	9300      	str	r3, [sp, #0]
 8006af2:	683b      	ldr	r3, [r7, #0]
 8006af4:	693a      	ldr	r2, [r7, #16]
 8006af6:	68b9      	ldr	r1, [r7, #8]
 8006af8:	68f8      	ldr	r0, [r7, #12]
 8006afa:	47a0      	blx	r4
 8006afc:	4603      	mov	r3, r0
                                         /*allocate_temp=*/true) != kTfLiteOk) {
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	bf14      	ite	ne
 8006b02:	2301      	movne	r3, #1
 8006b04:	2300      	moveq	r3, #0
 8006b06:	b2db      	uxtb	r3, r3
  if (PopulateTfLiteTensorFromFlatbuffer(model, tensor, tensor_index,
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d007      	beq.n	8006b1c <_ZN6tflite14MicroAllocator24AllocateTempTfLiteTensorEPKNS_5ModelEPKNS_19SubgraphAllocationsEii+0x7c>
    TF_LITE_REPORT_ERROR(
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	68db      	ldr	r3, [r3, #12]
 8006b10:	4914      	ldr	r1, [pc, #80]	; (8006b64 <_ZN6tflite14MicroAllocator24AllocateTempTfLiteTensorEPKNS_5ModelEPKNS_19SubgraphAllocationsEii+0xc4>)
 8006b12:	4618      	mov	r0, r3
 8006b14:	f7fd f842 	bl	8003b9c <_ZN6tflite13ErrorReporter6ReportEPKcz>
        error_reporter_,
        "Failed to populate a temp TfLiteTensor struct from flatbuffer data!");
    return nullptr;
 8006b18:	2300      	movs	r3, #0
 8006b1a:	e01f      	b.n	8006b5c <_ZN6tflite14MicroAllocator24AllocateTempTfLiteTensorEPKNS_5ModelEPKNS_19SubgraphAllocationsEii+0xbc>
  }

  if (subgraph_allocations != nullptr) {
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d01b      	beq.n	8006b5a <_ZN6tflite14MicroAllocator24AllocateTempTfLiteTensorEPKNS_5ModelEPKNS_19SubgraphAllocationsEii+0xba>
    // Tensor buffers that are allocated at runtime (e.g. non-weight buffers)
    // and not located in the flatbuffer are stored on the pre-allocated list of
    // TfLiteEvalTensors structs. These structs are the source of truth, simply
    // point the corresponding buffer to the new TfLiteTensor data value.
    tensor->data.data =
        subgraph_allocations[subgraph_index].tensors[tensor_index].data.data;
 8006b22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b24:	00db      	lsls	r3, r3, #3
 8006b26:	687a      	ldr	r2, [r7, #4]
 8006b28:	4413      	add	r3, r2
 8006b2a:	6859      	ldr	r1, [r3, #4]
 8006b2c:	683a      	ldr	r2, [r7, #0]
 8006b2e:	4613      	mov	r3, r2
 8006b30:	005b      	lsls	r3, r3, #1
 8006b32:	4413      	add	r3, r2
 8006b34:	009b      	lsls	r3, r3, #2
 8006b36:	440b      	add	r3, r1
 8006b38:	681a      	ldr	r2, [r3, #0]
    tensor->data.data =
 8006b3a:	693b      	ldr	r3, [r7, #16]
 8006b3c:	605a      	str	r2, [r3, #4]
    // TfLiteEvalTensor structs must also be the source of truth for the
    // TfLiteTensor dims.
    tensor->dims =
        subgraph_allocations[subgraph_index].tensors[tensor_index].dims;
 8006b3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b40:	00db      	lsls	r3, r3, #3
 8006b42:	687a      	ldr	r2, [r7, #4]
 8006b44:	4413      	add	r3, r2
 8006b46:	6859      	ldr	r1, [r3, #4]
 8006b48:	683a      	ldr	r2, [r7, #0]
 8006b4a:	4613      	mov	r3, r2
 8006b4c:	005b      	lsls	r3, r3, #1
 8006b4e:	4413      	add	r3, r2
 8006b50:	009b      	lsls	r3, r3, #2
 8006b52:	440b      	add	r3, r1
 8006b54:	685a      	ldr	r2, [r3, #4]
    tensor->dims =
 8006b56:	693b      	ldr	r3, [r7, #16]
 8006b58:	609a      	str	r2, [r3, #8]
  }
  return tensor;
 8006b5a:	693b      	ldr	r3, [r7, #16]
}
 8006b5c:	4618      	mov	r0, r3
 8006b5e:	371c      	adds	r7, #28
 8006b60:	46bd      	mov	sp, r7
 8006b62:	bd90      	pop	{r4, r7, pc}
 8006b64:	0800f474 	.word	0x0800f474

08006b68 <_ZN6tflite14MicroAllocator20ResetTempAllocationsEv>:

void MicroAllocator::ResetTempAllocations() {
 8006b68:	b580      	push	{r7, lr}
 8006b6a:	b082      	sub	sp, #8
 8006b6c:	af00      	add	r7, sp, #0
 8006b6e:	6078      	str	r0, [r7, #4]
  memory_allocator_->ResetTempAllocations();
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	685a      	ldr	r2, [r3, #4]
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	685b      	ldr	r3, [r3, #4]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	3314      	adds	r3, #20
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	4610      	mov	r0, r2
 8006b80:	4798      	blx	r3
}
 8006b82:	bf00      	nop
 8006b84:	3708      	adds	r7, #8
 8006b86:	46bd      	mov	sp, r7
 8006b88:	bd80      	pop	{r7, pc}
	...

08006b8c <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE>:

TfLiteStatus MicroAllocator::AllocateTfLiteEvalTensors(
    const Model* model, SubgraphAllocations* subgraph_allocations) {
 8006b8c:	b5b0      	push	{r4, r5, r7, lr}
 8006b8e:	b08c      	sub	sp, #48	; 0x30
 8006b90:	af02      	add	r7, sp, #8
 8006b92:	60f8      	str	r0, [r7, #12]
 8006b94:	60b9      	str	r1, [r7, #8]
 8006b96:	607a      	str	r2, [r7, #4]
  TFLITE_DCHECK(subgraph_allocations != nullptr);
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d101      	bne.n	8006ba2 <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x16>
 8006b9e:	f004 fa6d 	bl	800b07c <abort>

  for (size_t subgraph_idx = 0; subgraph_idx < model->subgraphs()->size();
 8006ba2:	2300      	movs	r3, #0
 8006ba4:	627b      	str	r3, [r7, #36]	; 0x24
 8006ba6:	68b8      	ldr	r0, [r7, #8]
 8006ba8:	f7fe fb62 	bl	8005270 <_ZNK6tflite5Model9subgraphsEv>
 8006bac:	4603      	mov	r3, r0
 8006bae:	4618      	mov	r0, r3
 8006bb0:	f7fe fbce 	bl	8005350 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE4sizeEv>
 8006bb4:	4602      	mov	r2, r0
 8006bb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bb8:	4293      	cmp	r3, r2
 8006bba:	bf34      	ite	cc
 8006bbc:	2301      	movcc	r3, #1
 8006bbe:	2300      	movcs	r3, #0
 8006bc0:	b2db      	uxtb	r3, r3
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d076      	beq.n	8006cb4 <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x128>
       subgraph_idx++) {
    const SubGraph* subgraph = model->subgraphs()->Get(subgraph_idx);
 8006bc6:	68b8      	ldr	r0, [r7, #8]
 8006bc8:	f7fe fb52 	bl	8005270 <_ZNK6tflite5Model9subgraphsEv>
 8006bcc:	4603      	mov	r3, r0
 8006bce:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006bd0:	4618      	mov	r0, r3
 8006bd2:	f7fe fbcb 	bl	800536c <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE3GetEm>
 8006bd6:	61f8      	str	r0, [r7, #28]
    TFLITE_DCHECK(subgraph != nullptr);
 8006bd8:	69fb      	ldr	r3, [r7, #28]
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d101      	bne.n	8006be2 <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x56>
 8006bde:	f004 fa4d 	bl	800b07c <abort>

    size_t alloc_count = subgraph->tensors()->size();
 8006be2:	69f8      	ldr	r0, [r7, #28]
 8006be4:	f7fe fee7 	bl	80059b6 <_ZNK6tflite8SubGraph7tensorsEv>
 8006be8:	4603      	mov	r3, r0
 8006bea:	4618      	mov	r0, r3
 8006bec:	f000 fbce 	bl	800738c <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEE4sizeEv>
 8006bf0:	61b8      	str	r0, [r7, #24]
    TfLiteEvalTensor* tensors =
        reinterpret_cast<TfLiteEvalTensor*>(memory_allocator_->AllocateFromTail(
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	6858      	ldr	r0, [r3, #4]
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	685b      	ldr	r3, [r3, #4]
            sizeof(TfLiteEvalTensor) * alloc_count, alignof(TfLiteEvalTensor)));
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	330c      	adds	r3, #12
 8006bfe:	681c      	ldr	r4, [r3, #0]
        reinterpret_cast<TfLiteEvalTensor*>(memory_allocator_->AllocateFromTail(
 8006c00:	69ba      	ldr	r2, [r7, #24]
 8006c02:	4613      	mov	r3, r2
 8006c04:	005b      	lsls	r3, r3, #1
 8006c06:	4413      	add	r3, r2
 8006c08:	009b      	lsls	r3, r3, #2
 8006c0a:	2204      	movs	r2, #4
 8006c0c:	4619      	mov	r1, r3
 8006c0e:	47a0      	blx	r4
 8006c10:	6178      	str	r0, [r7, #20]
    if (tensors == nullptr) {
 8006c12:	697b      	ldr	r3, [r7, #20]
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d10c      	bne.n	8006c32 <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0xa6>
      TF_LITE_REPORT_ERROR(
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	68d8      	ldr	r0, [r3, #12]
 8006c1c:	69ba      	ldr	r2, [r7, #24]
 8006c1e:	4613      	mov	r3, r2
 8006c20:	005b      	lsls	r3, r3, #1
 8006c22:	4413      	add	r3, r2
 8006c24:	009b      	lsls	r3, r3, #2
 8006c26:	461a      	mov	r2, r3
 8006c28:	4925      	ldr	r1, [pc, #148]	; (8006cc0 <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x134>)
 8006c2a:	f7fc ffb7 	bl	8003b9c <_ZN6tflite13ErrorReporter6ReportEPKcz>
          error_reporter_,
          "Failed to allocate memory for context->eval_tensors, "
          "%d bytes required",
          sizeof(TfLiteEvalTensor) * alloc_count);
      return kTfLiteError;
 8006c2e:	2301      	movs	r3, #1
 8006c30:	e041      	b.n	8006cb6 <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x12a>
    }

    for (size_t i = 0; i < alloc_count; ++i) {
 8006c32:	2300      	movs	r3, #0
 8006c34:	623b      	str	r3, [r7, #32]
 8006c36:	6a3a      	ldr	r2, [r7, #32]
 8006c38:	69bb      	ldr	r3, [r7, #24]
 8006c3a:	429a      	cmp	r2, r3
 8006c3c:	d230      	bcs.n	8006ca0 <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x114>
      TfLiteStatus status = internal::InitializeTfLiteEvalTensorFromFlatbuffer(
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	685c      	ldr	r4, [r3, #4]
          memory_allocator_, *subgraph->tensors()->Get(i), model->buffers(),
 8006c42:	69f8      	ldr	r0, [r7, #28]
 8006c44:	f7fe feb7 	bl	80059b6 <_ZNK6tflite8SubGraph7tensorsEv>
 8006c48:	4603      	mov	r3, r0
 8006c4a:	6a39      	ldr	r1, [r7, #32]
 8006c4c:	4618      	mov	r0, r3
 8006c4e:	f000 fbab 	bl	80073a8 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEE3GetEm>
 8006c52:	4605      	mov	r5, r0
      TfLiteStatus status = internal::InitializeTfLiteEvalTensorFromFlatbuffer(
 8006c54:	68b8      	ldr	r0, [r7, #8]
 8006c56:	f7fe ff03 	bl	8005a60 <_ZNK6tflite5Model7buffersEv>
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	68d9      	ldr	r1, [r3, #12]
          error_reporter_, &tensors[i]);
 8006c5e:	6a3a      	ldr	r2, [r7, #32]
 8006c60:	4613      	mov	r3, r2
 8006c62:	005b      	lsls	r3, r3, #1
 8006c64:	4413      	add	r3, r2
 8006c66:	009b      	lsls	r3, r3, #2
 8006c68:	461a      	mov	r2, r3
      TfLiteStatus status = internal::InitializeTfLiteEvalTensorFromFlatbuffer(
 8006c6a:	697b      	ldr	r3, [r7, #20]
 8006c6c:	4413      	add	r3, r2
 8006c6e:	9300      	str	r3, [sp, #0]
 8006c70:	460b      	mov	r3, r1
 8006c72:	4602      	mov	r2, r0
 8006c74:	4629      	mov	r1, r5
 8006c76:	4620      	mov	r0, r4
 8006c78:	f7ff fbd4 	bl	8006424 <_ZN6tflite8internal40InitializeTfLiteEvalTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP16TfLiteEvalTensor>
 8006c7c:	4603      	mov	r3, r0
 8006c7e:	74fb      	strb	r3, [r7, #19]
      if (status != kTfLiteOk) {
 8006c80:	7cfb      	ldrb	r3, [r7, #19]
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d008      	beq.n	8006c98 <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x10c>
        TF_LITE_REPORT_ERROR(error_reporter_, "Failed to initialize tensor %d",
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	68db      	ldr	r3, [r3, #12]
 8006c8a:	6a3a      	ldr	r2, [r7, #32]
 8006c8c:	490d      	ldr	r1, [pc, #52]	; (8006cc4 <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x138>)
 8006c8e:	4618      	mov	r0, r3
 8006c90:	f7fc ff84 	bl	8003b9c <_ZN6tflite13ErrorReporter6ReportEPKcz>
                             i);
        return kTfLiteError;
 8006c94:	2301      	movs	r3, #1
 8006c96:	e00e      	b.n	8006cb6 <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x12a>
    for (size_t i = 0; i < alloc_count; ++i) {
 8006c98:	6a3b      	ldr	r3, [r7, #32]
 8006c9a:	3301      	adds	r3, #1
 8006c9c:	623b      	str	r3, [r7, #32]
 8006c9e:	e7ca      	b.n	8006c36 <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0xaa>
      }
    }
    subgraph_allocations[subgraph_idx].tensors = tensors;
 8006ca0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ca2:	00db      	lsls	r3, r3, #3
 8006ca4:	687a      	ldr	r2, [r7, #4]
 8006ca6:	4413      	add	r3, r2
 8006ca8:	697a      	ldr	r2, [r7, #20]
 8006caa:	605a      	str	r2, [r3, #4]
  for (size_t subgraph_idx = 0; subgraph_idx < model->subgraphs()->size();
 8006cac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cae:	3301      	adds	r3, #1
 8006cb0:	627b      	str	r3, [r7, #36]	; 0x24
 8006cb2:	e778      	b.n	8006ba6 <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x1a>
  }
  return kTfLiteOk;
 8006cb4:	2300      	movs	r3, #0
}
 8006cb6:	4618      	mov	r0, r3
 8006cb8:	3728      	adds	r7, #40	; 0x28
 8006cba:	46bd      	mov	sp, r7
 8006cbc:	bdb0      	pop	{r4, r5, r7, pc}
 8006cbe:	bf00      	nop
 8006cc0:	0800f4b8 	.word	0x0800f4b8
 8006cc4:	0800f500 	.word	0x0800f500

08006cc8 <_ZN6tflite14MicroAllocator17AllocateVariablesEPKNS_8SubGraphEP16TfLiteEvalTensor>:
TfLiteStatus MicroAllocator::AllocateVariables(const SubGraph* subgraph,
                                               TfLiteEvalTensor* eval_tensors) {
 8006cc8:	b5b0      	push	{r4, r5, r7, lr}
 8006cca:	b088      	sub	sp, #32
 8006ccc:	af00      	add	r7, sp, #0
 8006cce:	60f8      	str	r0, [r7, #12]
 8006cd0:	60b9      	str	r1, [r7, #8]
 8006cd2:	607a      	str	r2, [r7, #4]
  for (size_t i = 0; i < subgraph->tensors()->size(); ++i) {
 8006cd4:	2300      	movs	r3, #0
 8006cd6:	61fb      	str	r3, [r7, #28]
 8006cd8:	68b8      	ldr	r0, [r7, #8]
 8006cda:	f7fe fe6c 	bl	80059b6 <_ZNK6tflite8SubGraph7tensorsEv>
 8006cde:	4603      	mov	r3, r0
 8006ce0:	4618      	mov	r0, r3
 8006ce2:	f000 fb53 	bl	800738c <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEE4sizeEv>
 8006ce6:	4602      	mov	r2, r0
 8006ce8:	69fb      	ldr	r3, [r7, #28]
 8006cea:	4293      	cmp	r3, r2
 8006cec:	bf34      	ite	cc
 8006cee:	2301      	movcc	r3, #1
 8006cf0:	2300      	movcs	r3, #0
 8006cf2:	b2db      	uxtb	r3, r3
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d04f      	beq.n	8006d98 <_ZN6tflite14MicroAllocator17AllocateVariablesEPKNS_8SubGraphEP16TfLiteEvalTensor+0xd0>
    auto* tensor = subgraph->tensors()->Get(i);
 8006cf8:	68b8      	ldr	r0, [r7, #8]
 8006cfa:	f7fe fe5c 	bl	80059b6 <_ZNK6tflite8SubGraph7tensorsEv>
 8006cfe:	4603      	mov	r3, r0
 8006d00:	69f9      	ldr	r1, [r7, #28]
 8006d02:	4618      	mov	r0, r3
 8006d04:	f000 fb50 	bl	80073a8 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEE3GetEm>
 8006d08:	61b8      	str	r0, [r7, #24]
    if (tensor->is_variable()) {
 8006d0a:	69b8      	ldr	r0, [r7, #24]
 8006d0c:	f7fe fe23 	bl	8005956 <_ZNK6tflite6Tensor11is_variableEv>
 8006d10:	4603      	mov	r3, r0
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d03c      	beq.n	8006d90 <_ZN6tflite14MicroAllocator17AllocateVariablesEPKNS_8SubGraphEP16TfLiteEvalTensor+0xc8>
      size_t buffer_size;
      TF_LITE_ENSURE_STATUS(
 8006d16:	69fa      	ldr	r2, [r7, #28]
 8006d18:	4613      	mov	r3, r2
 8006d1a:	005b      	lsls	r3, r3, #1
 8006d1c:	4413      	add	r3, r2
 8006d1e:	009b      	lsls	r3, r3, #2
 8006d20:	461a      	mov	r2, r3
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	4413      	add	r3, r2
 8006d26:	f107 0210 	add.w	r2, r7, #16
 8006d2a:	4611      	mov	r1, r2
 8006d2c:	4618      	mov	r0, r3
 8006d2e:	f7fe fd7e 	bl	800582e <_ZN6tflite26TfLiteEvalTensorByteLengthEPK16TfLiteEvalTensorPj>
 8006d32:	4603      	mov	r3, r0
 8006d34:	75fb      	strb	r3, [r7, #23]
 8006d36:	7dfb      	ldrb	r3, [r7, #23]
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	d001      	beq.n	8006d40 <_ZN6tflite14MicroAllocator17AllocateVariablesEPKNS_8SubGraphEP16TfLiteEvalTensor+0x78>
 8006d3c:	7dfb      	ldrb	r3, [r7, #23]
 8006d3e:	e02c      	b.n	8006d9a <_ZN6tflite14MicroAllocator17AllocateVariablesEPKNS_8SubGraphEP16TfLiteEvalTensor+0xd2>
          TfLiteEvalTensorByteLength(&eval_tensors[i], &buffer_size));

      eval_tensors[i].data.data =
          memory_allocator_->AllocateFromTail(buffer_size, kBufferAlignment);
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	6858      	ldr	r0, [r3, #4]
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	685b      	ldr	r3, [r3, #4]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	330c      	adds	r3, #12
 8006d4c:	681d      	ldr	r5, [r3, #0]
 8006d4e:	6939      	ldr	r1, [r7, #16]
      eval_tensors[i].data.data =
 8006d50:	69fa      	ldr	r2, [r7, #28]
 8006d52:	4613      	mov	r3, r2
 8006d54:	005b      	lsls	r3, r3, #1
 8006d56:	4413      	add	r3, r2
 8006d58:	009b      	lsls	r3, r3, #2
 8006d5a:	461a      	mov	r2, r3
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	189c      	adds	r4, r3, r2
          memory_allocator_->AllocateFromTail(buffer_size, kBufferAlignment);
 8006d60:	2210      	movs	r2, #16
 8006d62:	47a8      	blx	r5
 8006d64:	4603      	mov	r3, r0
      eval_tensors[i].data.data =
 8006d66:	6023      	str	r3, [r4, #0]

      if (eval_tensors[i].data.data == nullptr) {
 8006d68:	69fa      	ldr	r2, [r7, #28]
 8006d6a:	4613      	mov	r3, r2
 8006d6c:	005b      	lsls	r3, r3, #1
 8006d6e:	4413      	add	r3, r2
 8006d70:	009b      	lsls	r3, r3, #2
 8006d72:	461a      	mov	r2, r3
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	4413      	add	r3, r2
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d108      	bne.n	8006d90 <_ZN6tflite14MicroAllocator17AllocateVariablesEPKNS_8SubGraphEP16TfLiteEvalTensor+0xc8>
        TF_LITE_REPORT_ERROR(error_reporter_,
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	68db      	ldr	r3, [r3, #12]
 8006d82:	693a      	ldr	r2, [r7, #16]
 8006d84:	4907      	ldr	r1, [pc, #28]	; (8006da4 <_ZN6tflite14MicroAllocator17AllocateVariablesEPKNS_8SubGraphEP16TfLiteEvalTensor+0xdc>)
 8006d86:	4618      	mov	r0, r3
 8006d88:	f7fc ff08 	bl	8003b9c <_ZN6tflite13ErrorReporter6ReportEPKcz>
                             "Failed to allocate variable tensor of size %d",
                             buffer_size);
        return kTfLiteError;
 8006d8c:	2301      	movs	r3, #1
 8006d8e:	e004      	b.n	8006d9a <_ZN6tflite14MicroAllocator17AllocateVariablesEPKNS_8SubGraphEP16TfLiteEvalTensor+0xd2>
  for (size_t i = 0; i < subgraph->tensors()->size(); ++i) {
 8006d90:	69fb      	ldr	r3, [r7, #28]
 8006d92:	3301      	adds	r3, #1
 8006d94:	61fb      	str	r3, [r7, #28]
 8006d96:	e79f      	b.n	8006cd8 <_ZN6tflite14MicroAllocator17AllocateVariablesEPKNS_8SubGraphEP16TfLiteEvalTensor+0x10>
      }
    }
  }
  return kTfLiteOk;
 8006d98:	2300      	movs	r3, #0
}
 8006d9a:	4618      	mov	r0, r3
 8006d9c:	3720      	adds	r7, #32
 8006d9e:	46bd      	mov	sp, r7
 8006da0:	bdb0      	pop	{r4, r5, r7, pc}
 8006da2:	bf00      	nop
 8006da4:	0800f520 	.word	0x0800f520

08006da8 <_ZN6tflite14MicroAllocator38AllocatePersistentTfLiteTensorInternalEv>:

TfLiteTensor* MicroAllocator::AllocatePersistentTfLiteTensorInternal() {
 8006da8:	b580      	push	{r7, lr}
 8006daa:	b082      	sub	sp, #8
 8006dac:	af00      	add	r7, sp, #0
 8006dae:	6078      	str	r0, [r7, #4]
  return reinterpret_cast<TfLiteTensor*>(memory_allocator_->AllocateFromTail(
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	6858      	ldr	r0, [r3, #4]
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	685b      	ldr	r3, [r3, #4]
      sizeof(TfLiteTensor), alignof(TfLiteTensor)));
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	330c      	adds	r3, #12
 8006dbc:	681b      	ldr	r3, [r3, #0]
  return reinterpret_cast<TfLiteTensor*>(memory_allocator_->AllocateFromTail(
 8006dbe:	2204      	movs	r2, #4
 8006dc0:	2140      	movs	r1, #64	; 0x40
 8006dc2:	4798      	blx	r3
 8006dc4:	4603      	mov	r3, r0
}
 8006dc6:	4618      	mov	r0, r3
 8006dc8:	3708      	adds	r7, #8
 8006dca:	46bd      	mov	sp, r7
 8006dcc:	bd80      	pop	{r7, pc}

08006dce <_ZN6tflite14MicroAllocator34PopulateTfLiteTensorFromFlatbufferEPKNS_5ModelEP12TfLiteTensoriib>:

TfLiteStatus MicroAllocator::PopulateTfLiteTensorFromFlatbuffer(
    const Model* model, TfLiteTensor* tensor, int tensor_index,
    int subgraph_idx, bool allocate_temp) {
 8006dce:	b5b0      	push	{r4, r5, r7, lr}
 8006dd0:	b086      	sub	sp, #24
 8006dd2:	af02      	add	r7, sp, #8
 8006dd4:	60f8      	str	r0, [r7, #12]
 8006dd6:	60b9      	str	r1, [r7, #8]
 8006dd8:	607a      	str	r2, [r7, #4]
 8006dda:	603b      	str	r3, [r7, #0]
  // TODO(b/162311891): This method serves as a stub to ensure quantized
  // allocations in the tail can be recorded. Once the interpreter has APIs for
  // accessing buffers on TfLiteEvalTensor this method can be dropped.
  return internal::InitializeTfLiteTensorFromFlatbuffer(
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	685c      	ldr	r4, [r3, #4]
      memory_allocator_, allocate_temp,
      *model->subgraphs()->Get(subgraph_idx)->tensors()->Get(tensor_index),
 8006de0:	68b8      	ldr	r0, [r7, #8]
 8006de2:	f7fe fa45 	bl	8005270 <_ZNK6tflite5Model9subgraphsEv>
 8006de6:	4602      	mov	r2, r0
 8006de8:	6a3b      	ldr	r3, [r7, #32]
 8006dea:	4619      	mov	r1, r3
 8006dec:	4610      	mov	r0, r2
 8006dee:	f7fe fabd 	bl	800536c <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE3GetEm>
 8006df2:	4603      	mov	r3, r0
 8006df4:	4618      	mov	r0, r3
 8006df6:	f7fe fdde 	bl	80059b6 <_ZNK6tflite8SubGraph7tensorsEv>
 8006dfa:	4602      	mov	r2, r0
 8006dfc:	683b      	ldr	r3, [r7, #0]
 8006dfe:	4619      	mov	r1, r3
 8006e00:	4610      	mov	r0, r2
 8006e02:	f000 fad1 	bl	80073a8 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEE3GetEm>
 8006e06:	4605      	mov	r5, r0
  return internal::InitializeTfLiteTensorFromFlatbuffer(
 8006e08:	68b8      	ldr	r0, [r7, #8]
 8006e0a:	f7fe fe29 	bl	8005a60 <_ZNK6tflite5Model7buffersEv>
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	68db      	ldr	r3, [r3, #12]
 8006e12:	f897 1024 	ldrb.w	r1, [r7, #36]	; 0x24
 8006e16:	687a      	ldr	r2, [r7, #4]
 8006e18:	9201      	str	r2, [sp, #4]
 8006e1a:	9300      	str	r3, [sp, #0]
 8006e1c:	4603      	mov	r3, r0
 8006e1e:	462a      	mov	r2, r5
 8006e20:	4620      	mov	r0, r4
 8006e22:	f7ff f9a5 	bl	8006170 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor>
 8006e26:	4603      	mov	r3, r0
      model->buffers(), error_reporter_, tensor);
}
 8006e28:	4618      	mov	r0, r3
 8006e2a:	3710      	adds	r7, #16
 8006e2c:	46bd      	mov	sp, r7
 8006e2e:	bdb0      	pop	{r4, r5, r7, pc}

08006e30 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi>:
  return error_reporter_;
}

TfLiteStatus MicroAllocator::CommitStaticMemoryPlan(
    const Model* model, TfLiteEvalTensor* eval_tensors,
    ScratchBufferHandle* scratch_buffer_handles, int subgraph_idx) {
 8006e30:	b590      	push	{r4, r7, lr}
 8006e32:	b0a5      	sub	sp, #148	; 0x94
 8006e34:	af02      	add	r7, sp, #8
 8006e36:	60f8      	str	r0, [r7, #12]
 8006e38:	60b9      	str	r1, [r7, #8]
 8006e3a:	607a      	str	r2, [r7, #4]
 8006e3c:	603b      	str	r3, [r7, #0]
  size_t head_usage = 0;
 8006e3e:	2300      	movs	r3, #0
 8006e40:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  //
  // Note that AllocationInfo is only needed for creating the plan. It will be
  // allocated from the temp section and cleaned up at the bottom of this
  // function.

  const SubGraph* subgraph = model->subgraphs()->Get(subgraph_idx);
 8006e44:	68b8      	ldr	r0, [r7, #8]
 8006e46:	f7fe fa13 	bl	8005270 <_ZNK6tflite5Model9subgraphsEv>
 8006e4a:	4602      	mov	r2, r0
 8006e4c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006e50:	4619      	mov	r1, r3
 8006e52:	4610      	mov	r0, r2
 8006e54:	f7fe fa8a 	bl	800536c <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE3GetEm>
 8006e58:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
  size_t allocation_info_count =
      subgraph->tensors()->size() + scratch_buffer_request_count_;
 8006e5c:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 8006e60:	f7fe fda9 	bl	80059b6 <_ZNK6tflite8SubGraph7tensorsEv>
 8006e64:	4603      	mov	r3, r0
 8006e66:	4618      	mov	r0, r3
 8006e68:	f000 fa90 	bl	800738c <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEE4sizeEv>
 8006e6c:	4602      	mov	r2, r0
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	695b      	ldr	r3, [r3, #20]
 8006e72:	4413      	add	r3, r2
 8006e74:	67fb      	str	r3, [r7, #124]	; 0x7c
  size_t bytes = sizeof(AllocationInfo) * allocation_info_count;
 8006e76:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8006e78:	4613      	mov	r3, r2
 8006e7a:	005b      	lsls	r3, r3, #1
 8006e7c:	4413      	add	r3, r2
 8006e7e:	00db      	lsls	r3, r3, #3
 8006e80:	67bb      	str	r3, [r7, #120]	; 0x78

  // Allocate an array of AllocationInfo structs from the temp section. This
  // struct will be used by AllocationInfoBuilder to find buffer usage.
  AllocationInfo* allocation_info = reinterpret_cast<AllocationInfo*>(
      memory_allocator_->AllocateTemp(bytes, alignof(AllocationInfo)));
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	6858      	ldr	r0, [r3, #4]
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	685b      	ldr	r3, [r3, #4]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	3310      	adds	r3, #16
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	2204      	movs	r2, #4
 8006e92:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8006e94:	4798      	blx	r3
 8006e96:	6778      	str	r0, [r7, #116]	; 0x74
  if (allocation_info == nullptr) {
 8006e98:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d108      	bne.n	8006eb0 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x80>
    TF_LITE_REPORT_ERROR(
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	68db      	ldr	r3, [r3, #12]
 8006ea2:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8006ea4:	4985      	ldr	r1, [pc, #532]	; (80070bc <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x28c>)
 8006ea6:	4618      	mov	r0, r3
 8006ea8:	f7fc fe78 	bl	8003b9c <_ZN6tflite13ErrorReporter6ReportEPKcz>
        error_reporter_,
        "Failed to allocate memory for allocation_info, %d bytes required",
        bytes);
    return kTfLiteError;
 8006eac:	2401      	movs	r4, #1
 8006eae:	e0ff      	b.n	80070b0 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x280>
  }

  // Use the AllocationInfoBuilder class to help determine where buffers are
  // used in the subgraph.
  AllocationInfoBuilder builder(allocation_info, subgraph->tensors()->size(),
 8006eb0:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 8006eb4:	f7fe fd7f 	bl	80059b6 <_ZNK6tflite8SubGraph7tensorsEv>
 8006eb8:	4603      	mov	r3, r0
 8006eba:	4618      	mov	r0, r3
 8006ebc:	f000 fa66 	bl	800738c <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEE4sizeEv>
 8006ec0:	4601      	mov	r1, r0
                                scratch_buffer_request_count_, error_reporter_);
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	695a      	ldr	r2, [r3, #20]
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	68db      	ldr	r3, [r3, #12]
 8006eca:	f107 0044 	add.w	r0, r7, #68	; 0x44
 8006ece:	9300      	str	r3, [sp, #0]
 8006ed0:	4613      	mov	r3, r2
 8006ed2:	460a      	mov	r2, r1
 8006ed4:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8006ed6:	f7fe fe45 	bl	8005b64 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilderC1EPNS0_14AllocationInfoEjjPNS_13ErrorReporterE>

  const int32_t* offline_planner_offsets = nullptr;
 8006eda:	2300      	movs	r3, #0
 8006edc:	643b      	str	r3, [r7, #64]	; 0x40
  TF_LITE_ENSURE_STATUS(
 8006ede:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8006ee2:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8006ee6:	68b9      	ldr	r1, [r7, #8]
 8006ee8:	4618      	mov	r0, r3
 8006eea:	f7fe ffaf 	bl	8005e4c <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder24GetOfflinePlannedOffsetsEPKNS_5ModelEPPKl>
 8006eee:	4603      	mov	r3, r0
 8006ef0:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
 8006ef4:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	d002      	beq.n	8006f02 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0xd2>
 8006efc:	f897 4073 	ldrb.w	r4, [r7, #115]	; 0x73
 8006f00:	e0d6      	b.n	80070b0 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x280>
      builder.GetOfflinePlannedOffsets(model, &offline_planner_offsets));
  TF_LITE_ENSURE_STATUS(
 8006f02:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006f04:	f107 0044 	add.w	r0, r7, #68	; 0x44
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 8006f0e:	f7fe fe43 	bl	8005b98 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP16TfLiteEvalTensor>
 8006f12:	4603      	mov	r3, r0
 8006f14:	f887 3072 	strb.w	r3, [r7, #114]	; 0x72
 8006f18:	f897 3072 	ldrb.w	r3, [r7, #114]	; 0x72
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d002      	beq.n	8006f26 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0xf6>
 8006f20:	f897 4072 	ldrb.w	r4, [r7, #114]	; 0x72
 8006f24:	e0c4      	b.n	80070b0 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x280>
      builder.AddTensors(subgraph, offline_planner_offsets, eval_tensors));

  internal::ScratchBufferRequest* scratch_buffer_requests =
      GetScratchBufferRequests();
 8006f26:	68f8      	ldr	r0, [r7, #12]
 8006f28:	f000 f913 	bl	8007152 <_ZN6tflite14MicroAllocator24GetScratchBufferRequestsEv>
 8006f2c:	66f8      	str	r0, [r7, #108]	; 0x6c

  TF_LITE_ENSURE_STATUS(builder.AddScratchBuffers(scratch_buffer_requests,
 8006f2e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8006f32:	683a      	ldr	r2, [r7, #0]
 8006f34:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8006f36:	4618      	mov	r0, r3
 8006f38:	f7ff f804 	bl	8005f44 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder17AddScratchBuffersEPNS_8internal20ScratchBufferRequestEPNS_19ScratchBufferHandleE>
 8006f3c:	4603      	mov	r3, r0
 8006f3e:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
 8006f42:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	d002      	beq.n	8006f50 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x120>
 8006f4a:	f897 406b 	ldrb.w	r4, [r7, #107]	; 0x6b
 8006f4e:	e0af      	b.n	80070b0 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x280>
                                                  scratch_buffer_handles));

  // Remaining arena size that memory planner can use for calculating offsets.
  size_t remaining_arena_size =
      memory_allocator_->GetAvailableMemory(kBufferAlignment);
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	685b      	ldr	r3, [r3, #4]
 8006f54:	2110      	movs	r1, #16
 8006f56:	4618      	mov	r0, r3
 8006f58:	f002 fbe4 	bl	8009724 <_ZNK6tflite21SimpleMemoryAllocator18GetAvailableMemoryEj>
 8006f5c:	6678      	str	r0, [r7, #100]	; 0x64
  uint8_t* planner_arena =
      memory_allocator_->AllocateTemp(remaining_arena_size, kBufferAlignment);
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	6858      	ldr	r0, [r3, #4]
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	685b      	ldr	r3, [r3, #4]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	3310      	adds	r3, #16
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	2210      	movs	r2, #16
 8006f6e:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8006f70:	4798      	blx	r3
 8006f72:	6638      	str	r0, [r7, #96]	; 0x60
  TF_LITE_ENSURE(error_reporter_, planner_arena != nullptr);
 8006f74:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d10e      	bne.n	8006f98 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x168>
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	68d8      	ldr	r0, [r3, #12]
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	68d9      	ldr	r1, [r3, #12]
 8006f82:	4b4f      	ldr	r3, [pc, #316]	; (80070c0 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x290>)
 8006f84:	9301      	str	r3, [sp, #4]
 8006f86:	f240 33d2 	movw	r3, #978	; 0x3d2
 8006f8a:	9300      	str	r3, [sp, #0]
 8006f8c:	4b4d      	ldr	r3, [pc, #308]	; (80070c4 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x294>)
 8006f8e:	4a4e      	ldr	r2, [pc, #312]	; (80070c8 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x298>)
 8006f90:	f7fc fe1d 	bl	8003bce <_ZN6tflite13ErrorReporter11ReportErrorEPvPKcz>
 8006f94:	2401      	movs	r4, #1
 8006f96:	e08b      	b.n	80070b0 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x280>
  GreedyMemoryPlanner planner(planner_arena, remaining_arena_size);
 8006f98:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8006f9a:	f107 0314 	add.w	r3, r7, #20
 8006f9e:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8006fa0:	4618      	mov	r0, r3
 8006fa2:	f003 fbf7 	bl	800a794 <_ZN6tflite19GreedyMemoryPlannerC1EPhi>
  TF_LITE_ENSURE_STATUS(CreatePlan(error_reporter_, &planner, allocation_info,
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	68d8      	ldr	r0, [r3, #12]
 8006faa:	f107 0114 	add.w	r1, r7, #20
 8006fae:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006fb0:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8006fb2:	f7ff f812 	bl	8005fda <_ZN6tflite12_GLOBAL__N_110CreatePlanEPNS_13ErrorReporterEPNS_19GreedyMemoryPlannerEPKNS0_14AllocationInfoEj>
 8006fb6:	4603      	mov	r3, r0
 8006fb8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8006fbc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	d002      	beq.n	8006fca <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x19a>
 8006fc4:	f897 405f 	ldrb.w	r4, [r7, #95]	; 0x5f
 8006fc8:	e06d      	b.n	80070a6 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x276>
                                   allocation_info_count));

  // Reset all temp allocations used above:
  memory_allocator_->ResetTempAllocations();
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	685a      	ldr	r2, [r3, #4]
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	685b      	ldr	r3, [r3, #4]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	3314      	adds	r3, #20
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	4610      	mov	r0, r2
 8006fda:	4798      	blx	r3

  size_t actual_available_arena_size =
      memory_allocator_->GetAvailableMemory(kBufferAlignment);
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	685b      	ldr	r3, [r3, #4]
 8006fe0:	2110      	movs	r1, #16
 8006fe2:	4618      	mov	r0, r3
 8006fe4:	f002 fb9e 	bl	8009724 <_ZNK6tflite21SimpleMemoryAllocator18GetAvailableMemoryEj>
 8006fe8:	65b8      	str	r0, [r7, #88]	; 0x58

  // Make sure we have enough arena size.
  if (planner.GetMaximumMemorySize() > actual_available_arena_size) {
 8006fea:	f107 0314 	add.w	r3, r7, #20
 8006fee:	4618      	mov	r0, r3
 8006ff0:	f003 fe89 	bl	800ad06 <_ZN6tflite19GreedyMemoryPlanner20GetMaximumMemorySizeEv>
 8006ff4:	4602      	mov	r2, r0
 8006ff6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006ff8:	4293      	cmp	r3, r2
 8006ffa:	bf34      	ite	cc
 8006ffc:	2301      	movcc	r3, #1
 8006ffe:	2300      	movcs	r3, #0
 8007000:	b2db      	uxtb	r3, r3
 8007002:	2b00      	cmp	r3, #0
 8007004:	d00e      	beq.n	8007024 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x1f4>
    TF_LITE_REPORT_ERROR(
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	68dc      	ldr	r4, [r3, #12]
 800700a:	f107 0314 	add.w	r3, r7, #20
 800700e:	4618      	mov	r0, r3
 8007010:	f003 fe79 	bl	800ad06 <_ZN6tflite19GreedyMemoryPlanner20GetMaximumMemorySizeEv>
 8007014:	4602      	mov	r2, r0
 8007016:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007018:	492c      	ldr	r1, [pc, #176]	; (80070cc <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x29c>)
 800701a:	4620      	mov	r0, r4
 800701c:	f7fc fdbe 	bl	8003b9c <_ZN6tflite13ErrorReporter6ReportEPKcz>
        error_reporter_,
        "Arena size is too small for all buffers. Needed %u but only "
        "%u was available.",
        planner.GetMaximumMemorySize(), actual_available_arena_size);
    return kTfLiteError;
 8007020:	2401      	movs	r4, #1
 8007022:	e040      	b.n	80070a6 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x276>
  }
  // Commit the plan.
  TF_LITE_ENSURE_STATUS(CommitPlan(error_reporter_, &planner,
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	68dc      	ldr	r4, [r3, #12]
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	685b      	ldr	r3, [r3, #4]
 800702c:	4618      	mov	r0, r3
 800702e:	f002 fb6d 	bl	800970c <_ZNK6tflite21SimpleMemoryAllocator13GetHeadBufferEv>
 8007032:	4602      	mov	r2, r0
 8007034:	f107 0114 	add.w	r1, r7, #20
 8007038:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800703a:	9300      	str	r3, [sp, #0]
 800703c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800703e:	4620      	mov	r0, r4
 8007040:	f7ff f825 	bl	800608e <_ZN6tflite12_GLOBAL__N_110CommitPlanEPNS_13ErrorReporterEPNS_13MemoryPlannerEPhPKNS0_14AllocationInfoEj>
 8007044:	4603      	mov	r3, r0
 8007046:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 800704a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800704e:	2b00      	cmp	r3, #0
 8007050:	d002      	beq.n	8007058 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x228>
 8007052:	f897 4057 	ldrb.w	r4, [r7, #87]	; 0x57
 8007056:	e026      	b.n	80070a6 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x276>
                                   memory_allocator_->GetHeadBuffer(),
                                   allocation_info, allocation_info_count));
#ifdef TF_LITE_SHOW_MEMORY_USE
  planner.PrintMemoryPlan();
#endif
  head_usage = planner.GetMaximumMemorySize();
 8007058:	f107 0314 	add.w	r3, r7, #20
 800705c:	4618      	mov	r0, r3
 800705e:	f003 fe52 	bl	800ad06 <_ZN6tflite19GreedyMemoryPlanner20GetMaximumMemorySizeEv>
 8007062:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84
  // The head is used to store memory plans for one model at a time during the
  // model preparation stage, and is re-purposed to store scratch buffer handles
  // during model invocation. The head must be as large as the greater of the
  // largest model memory plan's size and the total space required for all
  // scratch buffer handles.
  if (max_head_buffer_usage_ < head_usage) {
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	699b      	ldr	r3, [r3, #24]
 800706a:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800706e:	429a      	cmp	r2, r3
 8007070:	d903      	bls.n	800707a <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x24a>
    max_head_buffer_usage_ = head_usage;
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8007078:	619a      	str	r2, [r3, #24]
  }

  // The head is used for storing scratch buffer allocations before finalizing a
  // memory plan in this function. Ensure that the head is set to the largest
  // memory plan sent through the allocator:
  TF_LITE_ENSURE_STATUS(memory_allocator_->SetHeadBufferSize(
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	6858      	ldr	r0, [r3, #4]
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	685b      	ldr	r3, [r3, #4]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	3308      	adds	r3, #8
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	68fa      	ldr	r2, [r7, #12]
 800708a:	6991      	ldr	r1, [r2, #24]
 800708c:	2210      	movs	r2, #16
 800708e:	4798      	blx	r3
 8007090:	4603      	mov	r3, r0
 8007092:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
 8007096:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 800709a:	2b00      	cmp	r3, #0
 800709c:	d002      	beq.n	80070a4 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x274>
 800709e:	f897 4056 	ldrb.w	r4, [r7, #86]	; 0x56
 80070a2:	e000      	b.n	80070a6 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x276>
      max_head_buffer_usage_, kBufferAlignment));
  return kTfLiteOk;
 80070a4:	2400      	movs	r4, #0
  GreedyMemoryPlanner planner(planner_arena, remaining_arena_size);
 80070a6:	f107 0314 	add.w	r3, r7, #20
 80070aa:	4618      	mov	r0, r3
 80070ac:	f003 fbc4 	bl	800a838 <_ZN6tflite19GreedyMemoryPlannerD1Ev>
 80070b0:	4623      	mov	r3, r4
}
 80070b2:	4618      	mov	r0, r3
 80070b4:	378c      	adds	r7, #140	; 0x8c
 80070b6:	46bd      	mov	sp, r7
 80070b8:	bd90      	pop	{r4, r7, pc}
 80070ba:	bf00      	nop
 80070bc:	0800f550 	.word	0x0800f550
 80070c0:	0800f5e8 	.word	0x0800f5e8
 80070c4:	0800f594 	.word	0x0800f594
 80070c8:	0800f5d0 	.word	0x0800f5d0
 80070cc:	0800f604 	.word	0x0800f604

080070d0 <_ZN6tflite14MicroAllocator28AllocateScratchBufferHandlesEPPNS_19ScratchBufferHandleEj>:

TfLiteStatus MicroAllocator::AllocateScratchBufferHandles(
    ScratchBufferHandle** scratch_buffer_handles, size_t handle_count) {
 80070d0:	b580      	push	{r7, lr}
 80070d2:	b084      	sub	sp, #16
 80070d4:	af00      	add	r7, sp, #0
 80070d6:	60f8      	str	r0, [r7, #12]
 80070d8:	60b9      	str	r1, [r7, #8]
 80070da:	607a      	str	r2, [r7, #4]
  TFLITE_DCHECK(scratch_buffer_handles != nullptr);
 80070dc:	68bb      	ldr	r3, [r7, #8]
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d101      	bne.n	80070e6 <_ZN6tflite14MicroAllocator28AllocateScratchBufferHandlesEPPNS_19ScratchBufferHandleEj+0x16>
 80070e2:	f003 ffcb 	bl	800b07c <abort>

  if (scratch_buffer_request_count_ == 0) {
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	695b      	ldr	r3, [r3, #20]
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d101      	bne.n	80070f2 <_ZN6tflite14MicroAllocator28AllocateScratchBufferHandlesEPPNS_19ScratchBufferHandleEj+0x22>
    // No scratch buffer requests were requested during model allocation.
    return kTfLiteOk;
 80070ee:	2300      	movs	r3, #0
 80070f0:	e00e      	b.n	8007110 <_ZN6tflite14MicroAllocator28AllocateScratchBufferHandlesEPPNS_19ScratchBufferHandleEj+0x40>
  }

  // Allocate a consecutive block of memory store the scratch buffer handles.
  // This alignment ensures quick lookup during inference time for the model:
  *scratch_buffer_handles = reinterpret_cast<ScratchBufferHandle*>(
      memory_allocator_->AllocateFromTail(
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	6858      	ldr	r0, [r3, #4]
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	685b      	ldr	r3, [r3, #4]
          sizeof(ScratchBufferHandle) * handle_count,
          alignof(ScratchBufferHandle)));
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	330c      	adds	r3, #12
 80070fe:	681b      	ldr	r3, [r3, #0]
      memory_allocator_->AllocateFromTail(
 8007100:	687a      	ldr	r2, [r7, #4]
 8007102:	0091      	lsls	r1, r2, #2
 8007104:	2204      	movs	r2, #4
 8007106:	4798      	blx	r3
 8007108:	4602      	mov	r2, r0
  *scratch_buffer_handles = reinterpret_cast<ScratchBufferHandle*>(
 800710a:	68bb      	ldr	r3, [r7, #8]
 800710c:	601a      	str	r2, [r3, #0]

  return kTfLiteOk;
 800710e:	2300      	movs	r3, #0
}
 8007110:	4618      	mov	r0, r3
 8007112:	3710      	adds	r7, #16
 8007114:	46bd      	mov	sp, r7
 8007116:	bd80      	pop	{r7, pc}

08007118 <_ZN6tflite14MicroAllocator21InitScratchBufferDataEv>:

TfLiteStatus MicroAllocator::InitScratchBufferData() {
 8007118:	b580      	push	{r7, lr}
 800711a:	b084      	sub	sp, #16
 800711c:	af00      	add	r7, sp, #0
 800711e:	6078      	str	r0, [r7, #4]
  // A model is preparing to allocate resources, ensure that scratch buffer
  // request counter is cleared:
  scratch_buffer_request_count_ = 0;
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	2200      	movs	r2, #0
 8007124:	615a      	str	r2, [r3, #20]

  // All requests will be stored in the head section. Each kernel is allowed at
  // most kMaxScratchBuffersPerOp requests. Adjust the head to reserve at most
  // that many requests to begin:
  TF_LITE_ENSURE_STATUS(memory_allocator_->SetHeadBufferSize(
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	6858      	ldr	r0, [r3, #4]
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	685b      	ldr	r3, [r3, #4]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	3308      	adds	r3, #8
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	2204      	movs	r2, #4
 8007136:	2160      	movs	r1, #96	; 0x60
 8007138:	4798      	blx	r3
 800713a:	4603      	mov	r3, r0
 800713c:	73fb      	strb	r3, [r7, #15]
 800713e:	7bfb      	ldrb	r3, [r7, #15]
 8007140:	2b00      	cmp	r3, #0
 8007142:	d001      	beq.n	8007148 <_ZN6tflite14MicroAllocator21InitScratchBufferDataEv+0x30>
 8007144:	7bfb      	ldrb	r3, [r7, #15]
 8007146:	e000      	b.n	800714a <_ZN6tflite14MicroAllocator21InitScratchBufferDataEv+0x32>
      sizeof(internal::ScratchBufferRequest) * kMaxScratchBuffersPerOp,
      alignof(internal::ScratchBufferRequest)));

  return kTfLiteOk;
 8007148:	2300      	movs	r3, #0
}
 800714a:	4618      	mov	r0, r3
 800714c:	3710      	adds	r7, #16
 800714e:	46bd      	mov	sp, r7
 8007150:	bd80      	pop	{r7, pc}

08007152 <_ZN6tflite14MicroAllocator24GetScratchBufferRequestsEv>:

internal::ScratchBufferRequest* MicroAllocator::GetScratchBufferRequests() {
 8007152:	b580      	push	{r7, lr}
 8007154:	b082      	sub	sp, #8
 8007156:	af00      	add	r7, sp, #0
 8007158:	6078      	str	r0, [r7, #4]
  return reinterpret_cast<internal::ScratchBufferRequest*>(
      AlignPointerUp(memory_allocator_->GetHeadBuffer(),
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	685b      	ldr	r3, [r3, #4]
 800715e:	4618      	mov	r0, r3
 8007160:	f002 fad4 	bl	800970c <_ZNK6tflite21SimpleMemoryAllocator13GetHeadBufferEv>
 8007164:	4603      	mov	r3, r0
 8007166:	2104      	movs	r1, #4
 8007168:	4618      	mov	r0, r3
 800716a:	f7fe fa4c 	bl	8005606 <_ZN6tflite14AlignPointerUpEPhj>
 800716e:	4603      	mov	r3, r0
                     alignof(internal::ScratchBufferRequest)));
}
 8007170:	4618      	mov	r0, r3
 8007172:	3708      	adds	r7, #8
 8007174:	46bd      	mov	sp, r7
 8007176:	bd80      	pop	{r7, pc}

08007178 <_ZN6tflite14MicroAllocator33FlatBufferVectorToTfLiteTypeArrayEPKN11flatbuffers6VectorIlEEPP14TfLiteIntArray>:

TfLiteStatus MicroAllocator::FlatBufferVectorToTfLiteTypeArray(
    const flatbuffers::Vector<int32_t>* flatbuffer_array,
    TfLiteIntArray** result) {
 8007178:	b580      	push	{r7, lr}
 800717a:	b084      	sub	sp, #16
 800717c:	af00      	add	r7, sp, #0
 800717e:	60f8      	str	r0, [r7, #12]
 8007180:	60b9      	str	r1, [r7, #8]
 8007182:	607a      	str	r2, [r7, #4]
  return internal::FlatBufferVectorToTfLiteTypeArray(
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	6858      	ldr	r0, [r3, #4]
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	68d9      	ldr	r1, [r3, #12]
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	68ba      	ldr	r2, [r7, #8]
 8007190:	f000 f9e6 	bl	8007560 <_ZN6tflite8internal33FlatBufferVectorToTfLiteTypeArrayIl14TfLiteIntArrayEE12TfLiteStatusPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterEPKN11flatbuffers6VectorIT_EEPPT0_>
 8007194:	4603      	mov	r3, r0
      memory_allocator_, error_reporter_, flatbuffer_array, result);
}
 8007196:	4618      	mov	r0, r3
 8007198:	3710      	adds	r7, #16
 800719a:	46bd      	mov	sp, r7
 800719c:	bd80      	pop	{r7, pc}

0800719e <_ZN6tflite14MicroAllocator23GetBuiltinDataAllocatorEv>:

BuiltinDataAllocator* MicroAllocator::GetBuiltinDataAllocator() {
 800719e:	b480      	push	{r7}
 80071a0:	b083      	sub	sp, #12
 80071a2:	af00      	add	r7, sp, #0
 80071a4:	6078      	str	r0, [r7, #4]
  return builtin_data_allocator_;
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	689b      	ldr	r3, [r3, #8]
}
 80071aa:	4618      	mov	r0, r3
 80071ac:	370c      	adds	r7, #12
 80071ae:	46bd      	mov	sp, r7
 80071b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071b4:	4770      	bx	lr

080071b6 <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorIhEEEET_t>:
  template<typename P> P GetPointer(voffset_t field) const {
 80071b6:	b580      	push	{r7, lr}
 80071b8:	b082      	sub	sp, #8
 80071ba:	af00      	add	r7, sp, #0
 80071bc:	6078      	str	r0, [r7, #4]
 80071be:	460b      	mov	r3, r1
 80071c0:	807b      	strh	r3, [r7, #2]
    return const_cast<Table *>(this)->GetPointer<P>(field);
 80071c2:	887b      	ldrh	r3, [r7, #2]
 80071c4:	4619      	mov	r1, r3
 80071c6:	6878      	ldr	r0, [r7, #4]
 80071c8:	f000 f9fc 	bl	80075c4 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIhEEEET_t>
 80071cc:	4603      	mov	r3, r0
  }
 80071ce:	4618      	mov	r0, r3
 80071d0:	3708      	adds	r7, #8
 80071d2:	46bd      	mov	sp, r7
 80071d4:	bd80      	pop	{r7, pc}

080071d6 <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorIfEEEET_t>:
  template<typename P> P GetPointer(voffset_t field) const {
 80071d6:	b580      	push	{r7, lr}
 80071d8:	b082      	sub	sp, #8
 80071da:	af00      	add	r7, sp, #0
 80071dc:	6078      	str	r0, [r7, #4]
 80071de:	460b      	mov	r3, r1
 80071e0:	807b      	strh	r3, [r7, #2]
    return const_cast<Table *>(this)->GetPointer<P>(field);
 80071e2:	887b      	ldrh	r3, [r7, #2]
 80071e4:	4619      	mov	r1, r3
 80071e6:	6878      	ldr	r0, [r7, #4]
 80071e8:	f000 fa0c 	bl	8007604 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIfEEEET_t>
 80071ec:	4603      	mov	r3, r0
  }
 80071ee:	4618      	mov	r0, r3
 80071f0:	3708      	adds	r7, #8
 80071f2:	46bd      	mov	sp, r7
 80071f4:	bd80      	pop	{r7, pc}

080071f6 <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorIxEEEET_t>:
  template<typename P> P GetPointer(voffset_t field) const {
 80071f6:	b580      	push	{r7, lr}
 80071f8:	b082      	sub	sp, #8
 80071fa:	af00      	add	r7, sp, #0
 80071fc:	6078      	str	r0, [r7, #4]
 80071fe:	460b      	mov	r3, r1
 8007200:	807b      	strh	r3, [r7, #2]
    return const_cast<Table *>(this)->GetPointer<P>(field);
 8007202:	887b      	ldrh	r3, [r7, #2]
 8007204:	4619      	mov	r1, r3
 8007206:	6878      	ldr	r0, [r7, #4]
 8007208:	f000 fa1c 	bl	8007644 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIxEEEET_t>
 800720c:	4603      	mov	r3, r0
  }
 800720e:	4618      	mov	r0, r3
 8007210:	3708      	adds	r7, #8
 8007212:	46bd      	mov	sp, r7
 8007214:	bd80      	pop	{r7, pc}

08007216 <_ZNK11flatbuffers5Table10GetPointerIPKN6tflite22QuantizationParametersEEET_t>:
  template<typename P> P GetPointer(voffset_t field) const {
 8007216:	b580      	push	{r7, lr}
 8007218:	b082      	sub	sp, #8
 800721a:	af00      	add	r7, sp, #0
 800721c:	6078      	str	r0, [r7, #4]
 800721e:	460b      	mov	r3, r1
 8007220:	807b      	strh	r3, [r7, #2]
    return const_cast<Table *>(this)->GetPointer<P>(field);
 8007222:	887b      	ldrh	r3, [r7, #2]
 8007224:	4619      	mov	r1, r3
 8007226:	6878      	ldr	r0, [r7, #4]
 8007228:	f000 fa2c 	bl	8007684 <_ZN11flatbuffers5Table10GetPointerIPKN6tflite22QuantizationParametersEEET_t>
 800722c:	4603      	mov	r3, r0
  }
 800722e:	4618      	mov	r0, r3
 8007230:	3708      	adds	r7, #8
 8007232:	46bd      	mov	sp, r7
 8007234:	bd80      	pop	{r7, pc}

08007236 <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite6TensorEEEEEEET_t>:
  template<typename P> P GetPointer(voffset_t field) const {
 8007236:	b580      	push	{r7, lr}
 8007238:	b082      	sub	sp, #8
 800723a:	af00      	add	r7, sp, #0
 800723c:	6078      	str	r0, [r7, #4]
 800723e:	460b      	mov	r3, r1
 8007240:	807b      	strh	r3, [r7, #2]
    return const_cast<Table *>(this)->GetPointer<P>(field);
 8007242:	887b      	ldrh	r3, [r7, #2]
 8007244:	4619      	mov	r1, r3
 8007246:	6878      	ldr	r0, [r7, #4]
 8007248:	f000 fa3c 	bl	80076c4 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite6TensorEEEEEEET_t>
 800724c:	4603      	mov	r3, r0
  }
 800724e:	4618      	mov	r0, r3
 8007250:	3708      	adds	r7, #8
 8007252:	46bd      	mov	sp, r7
 8007254:	bd80      	pop	{r7, pc}

08007256 <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite6BufferEEEEEEET_t>:
  template<typename P> P GetPointer(voffset_t field) const {
 8007256:	b580      	push	{r7, lr}
 8007258:	b082      	sub	sp, #8
 800725a:	af00      	add	r7, sp, #0
 800725c:	6078      	str	r0, [r7, #4]
 800725e:	460b      	mov	r3, r1
 8007260:	807b      	strh	r3, [r7, #2]
    return const_cast<Table *>(this)->GetPointer<P>(field);
 8007262:	887b      	ldrh	r3, [r7, #2]
 8007264:	4619      	mov	r1, r3
 8007266:	6878      	ldr	r0, [r7, #4]
 8007268:	f000 fa4c 	bl	8007704 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite6BufferEEEEEEET_t>
 800726c:	4603      	mov	r3, r0
  }
 800726e:	4618      	mov	r0, r3
 8007270:	3708      	adds	r7, #8
 8007272:	46bd      	mov	sp, r7
 8007274:	bd80      	pop	{r7, pc}

08007276 <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite8MetadataEEEEEEET_t>:
  template<typename P> P GetPointer(voffset_t field) const {
 8007276:	b580      	push	{r7, lr}
 8007278:	b082      	sub	sp, #8
 800727a:	af00      	add	r7, sp, #0
 800727c:	6078      	str	r0, [r7, #4]
 800727e:	460b      	mov	r3, r1
 8007280:	807b      	strh	r3, [r7, #2]
    return const_cast<Table *>(this)->GetPointer<P>(field);
 8007282:	887b      	ldrh	r3, [r7, #2]
 8007284:	4619      	mov	r1, r3
 8007286:	6878      	ldr	r0, [r7, #4]
 8007288:	f000 fa5c 	bl	8007744 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite8MetadataEEEEEEET_t>
 800728c:	4603      	mov	r3, r0
  }
 800728e:	4618      	mov	r0, r3
 8007290:	3708      	adds	r7, #8
 8007292:	46bd      	mov	sp, r7
 8007294:	bd80      	pop	{r7, pc}

08007296 <_ZNK11flatbuffers6VectorIhE4sizeEv>:
  uoffset_t size() const { return EndianScalar(length_); }
 8007296:	b580      	push	{r7, lr}
 8007298:	b082      	sub	sp, #8
 800729a:	af00      	add	r7, sp, #0
 800729c:	6078      	str	r0, [r7, #4]
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	4618      	mov	r0, r3
 80072a4:	f7fa fbff 	bl	8001aa6 <_ZN11flatbuffers12EndianScalarImEET_S1_>
 80072a8:	4603      	mov	r3, r0
 80072aa:	4618      	mov	r0, r3
 80072ac:	3708      	adds	r7, #8
 80072ae:	46bd      	mov	sp, r7
 80072b0:	bd80      	pop	{r7, pc}

080072b2 <_ZNK11flatbuffers6VectorIfE4sizeEv>:
 80072b2:	b580      	push	{r7, lr}
 80072b4:	b082      	sub	sp, #8
 80072b6:	af00      	add	r7, sp, #0
 80072b8:	6078      	str	r0, [r7, #4]
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	4618      	mov	r0, r3
 80072c0:	f7fa fbf1 	bl	8001aa6 <_ZN11flatbuffers12EndianScalarImEET_S1_>
 80072c4:	4603      	mov	r3, r0
 80072c6:	4618      	mov	r0, r3
 80072c8:	3708      	adds	r7, #8
 80072ca:	46bd      	mov	sp, r7
 80072cc:	bd80      	pop	{r7, pc}
	...

080072d0 <_ZNK11flatbuffers6VectorIfE3GetEm>:
  return_type Get(uoffset_t i) const {
 80072d0:	b580      	push	{r7, lr}
 80072d2:	b082      	sub	sp, #8
 80072d4:	af00      	add	r7, sp, #0
 80072d6:	6078      	str	r0, [r7, #4]
 80072d8:	6039      	str	r1, [r7, #0]
    FLATBUFFERS_ASSERT(i < size());
 80072da:	6878      	ldr	r0, [r7, #4]
 80072dc:	f7ff ffe9 	bl	80072b2 <_ZNK11flatbuffers6VectorIfE4sizeEv>
 80072e0:	4602      	mov	r2, r0
 80072e2:	683b      	ldr	r3, [r7, #0]
 80072e4:	4293      	cmp	r3, r2
 80072e6:	d306      	bcc.n	80072f6 <_ZNK11flatbuffers6VectorIfE3GetEm+0x26>
 80072e8:	4b0a      	ldr	r3, [pc, #40]	; (8007314 <_ZNK11flatbuffers6VectorIfE3GetEm+0x44>)
 80072ea:	4a0b      	ldr	r2, [pc, #44]	; (8007318 <_ZNK11flatbuffers6VectorIfE3GetEm+0x48>)
 80072ec:	f44f 7183 	mov.w	r1, #262	; 0x106
 80072f0:	480a      	ldr	r0, [pc, #40]	; (800731c <_ZNK11flatbuffers6VectorIfE3GetEm+0x4c>)
 80072f2:	f003 fecb 	bl	800b08c <__assert_func>
    return IndirectHelper<T>::Read(Data(), i);
 80072f6:	6878      	ldr	r0, [r7, #4]
 80072f8:	f000 fa66 	bl	80077c8 <_ZNK11flatbuffers6VectorIfE4DataEv>
 80072fc:	4603      	mov	r3, r0
 80072fe:	6839      	ldr	r1, [r7, #0]
 8007300:	4618      	mov	r0, r3
 8007302:	f000 fa4b 	bl	800779c <_ZN11flatbuffers14IndirectHelperIfE4ReadEPKhm>
 8007306:	eef0 7a40 	vmov.f32	s15, s0
  }
 800730a:	eeb0 0a67 	vmov.f32	s0, s15
 800730e:	3708      	adds	r7, #8
 8007310:	46bd      	mov	sp, r7
 8007312:	bd80      	pop	{r7, pc}
 8007314:	0800f654 	.word	0x0800f654
 8007318:	0800f660 	.word	0x0800f660
 800731c:	0800f728 	.word	0x0800f728

08007320 <_ZNK11flatbuffers6VectorIxE4sizeEv>:
  uoffset_t size() const { return EndianScalar(length_); }
 8007320:	b580      	push	{r7, lr}
 8007322:	b082      	sub	sp, #8
 8007324:	af00      	add	r7, sp, #0
 8007326:	6078      	str	r0, [r7, #4]
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	4618      	mov	r0, r3
 800732e:	f7fa fbba 	bl	8001aa6 <_ZN11flatbuffers12EndianScalarImEET_S1_>
 8007332:	4603      	mov	r3, r0
 8007334:	4618      	mov	r0, r3
 8007336:	3708      	adds	r7, #8
 8007338:	46bd      	mov	sp, r7
 800733a:	bd80      	pop	{r7, pc}

0800733c <_ZNK11flatbuffers6VectorIxE3GetEm>:
  return_type Get(uoffset_t i) const {
 800733c:	b580      	push	{r7, lr}
 800733e:	b082      	sub	sp, #8
 8007340:	af00      	add	r7, sp, #0
 8007342:	6078      	str	r0, [r7, #4]
 8007344:	6039      	str	r1, [r7, #0]
    FLATBUFFERS_ASSERT(i < size());
 8007346:	6878      	ldr	r0, [r7, #4]
 8007348:	f7ff ffea 	bl	8007320 <_ZNK11flatbuffers6VectorIxE4sizeEv>
 800734c:	4602      	mov	r2, r0
 800734e:	683b      	ldr	r3, [r7, #0]
 8007350:	4293      	cmp	r3, r2
 8007352:	d306      	bcc.n	8007362 <_ZNK11flatbuffers6VectorIxE3GetEm+0x26>
 8007354:	4b0a      	ldr	r3, [pc, #40]	; (8007380 <_ZNK11flatbuffers6VectorIxE3GetEm+0x44>)
 8007356:	4a0b      	ldr	r2, [pc, #44]	; (8007384 <_ZNK11flatbuffers6VectorIxE3GetEm+0x48>)
 8007358:	f44f 7183 	mov.w	r1, #262	; 0x106
 800735c:	480a      	ldr	r0, [pc, #40]	; (8007388 <_ZNK11flatbuffers6VectorIxE3GetEm+0x4c>)
 800735e:	f003 fe95 	bl	800b08c <__assert_func>
    return IndirectHelper<T>::Read(Data(), i);
 8007362:	6878      	ldr	r0, [r7, #4]
 8007364:	f000 fa52 	bl	800780c <_ZNK11flatbuffers6VectorIxE4DataEv>
 8007368:	4603      	mov	r3, r0
 800736a:	6839      	ldr	r1, [r7, #0]
 800736c:	4618      	mov	r0, r3
 800736e:	f000 fa37 	bl	80077e0 <_ZN11flatbuffers14IndirectHelperIxE4ReadEPKhm>
 8007372:	4602      	mov	r2, r0
 8007374:	460b      	mov	r3, r1
  }
 8007376:	4610      	mov	r0, r2
 8007378:	4619      	mov	r1, r3
 800737a:	3708      	adds	r7, #8
 800737c:	46bd      	mov	sp, r7
 800737e:	bd80      	pop	{r7, pc}
 8007380:	0800f654 	.word	0x0800f654
 8007384:	0800f7c4 	.word	0x0800f7c4
 8007388:	0800f728 	.word	0x0800f728

0800738c <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEE4sizeEv>:
  uoffset_t size() const { return EndianScalar(length_); }
 800738c:	b580      	push	{r7, lr}
 800738e:	b082      	sub	sp, #8
 8007390:	af00      	add	r7, sp, #0
 8007392:	6078      	str	r0, [r7, #4]
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	4618      	mov	r0, r3
 800739a:	f7fa fb84 	bl	8001aa6 <_ZN11flatbuffers12EndianScalarImEET_S1_>
 800739e:	4603      	mov	r3, r0
 80073a0:	4618      	mov	r0, r3
 80073a2:	3708      	adds	r7, #8
 80073a4:	46bd      	mov	sp, r7
 80073a6:	bd80      	pop	{r7, pc}

080073a8 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEE3GetEm>:
  return_type Get(uoffset_t i) const {
 80073a8:	b580      	push	{r7, lr}
 80073aa:	b082      	sub	sp, #8
 80073ac:	af00      	add	r7, sp, #0
 80073ae:	6078      	str	r0, [r7, #4]
 80073b0:	6039      	str	r1, [r7, #0]
    FLATBUFFERS_ASSERT(i < size());
 80073b2:	6878      	ldr	r0, [r7, #4]
 80073b4:	f7ff ffea 	bl	800738c <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEE4sizeEv>
 80073b8:	4602      	mov	r2, r0
 80073ba:	683b      	ldr	r3, [r7, #0]
 80073bc:	4293      	cmp	r3, r2
 80073be:	d306      	bcc.n	80073ce <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEE3GetEm+0x26>
 80073c0:	4b09      	ldr	r3, [pc, #36]	; (80073e8 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEE3GetEm+0x40>)
 80073c2:	4a0a      	ldr	r2, [pc, #40]	; (80073ec <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEE3GetEm+0x44>)
 80073c4:	f44f 7183 	mov.w	r1, #262	; 0x106
 80073c8:	4809      	ldr	r0, [pc, #36]	; (80073f0 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEE3GetEm+0x48>)
 80073ca:	f003 fe5f 	bl	800b08c <__assert_func>
    return IndirectHelper<T>::Read(Data(), i);
 80073ce:	6878      	ldr	r0, [r7, #4]
 80073d0:	f000 fa3c 	bl	800784c <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEE4DataEv>
 80073d4:	4603      	mov	r3, r0
 80073d6:	6839      	ldr	r1, [r7, #0]
 80073d8:	4618      	mov	r0, r3
 80073da:	f000 fa23 	bl	8007824 <_ZN11flatbuffers14IndirectHelperINS_6OffsetIN6tflite6TensorEEEE4ReadEPKhm>
 80073de:	4603      	mov	r3, r0
  }
 80073e0:	4618      	mov	r0, r3
 80073e2:	3708      	adds	r7, #8
 80073e4:	46bd      	mov	sp, r7
 80073e6:	bd80      	pop	{r7, pc}
 80073e8:	0800f654 	.word	0x0800f654
 80073ec:	0800f96c 	.word	0x0800f96c
 80073f0:	0800f728 	.word	0x0800f728

080073f4 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8OperatorEEEE3GetEm>:
  return_type Get(uoffset_t i) const {
 80073f4:	b580      	push	{r7, lr}
 80073f6:	b082      	sub	sp, #8
 80073f8:	af00      	add	r7, sp, #0
 80073fa:	6078      	str	r0, [r7, #4]
 80073fc:	6039      	str	r1, [r7, #0]
    FLATBUFFERS_ASSERT(i < size());
 80073fe:	6878      	ldr	r0, [r7, #4]
 8007400:	f7fd ff98 	bl	8005334 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8OperatorEEEE4sizeEv>
 8007404:	4602      	mov	r2, r0
 8007406:	683b      	ldr	r3, [r7, #0]
 8007408:	4293      	cmp	r3, r2
 800740a:	d306      	bcc.n	800741a <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8OperatorEEEE3GetEm+0x26>
 800740c:	4b09      	ldr	r3, [pc, #36]	; (8007434 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8OperatorEEEE3GetEm+0x40>)
 800740e:	4a0a      	ldr	r2, [pc, #40]	; (8007438 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8OperatorEEEE3GetEm+0x44>)
 8007410:	f44f 7183 	mov.w	r1, #262	; 0x106
 8007414:	4809      	ldr	r0, [pc, #36]	; (800743c <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8OperatorEEEE3GetEm+0x48>)
 8007416:	f003 fe39 	bl	800b08c <__assert_func>
    return IndirectHelper<T>::Read(Data(), i);
 800741a:	6878      	ldr	r0, [r7, #4]
 800741c:	f000 fa36 	bl	800788c <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8OperatorEEEE4DataEv>
 8007420:	4603      	mov	r3, r0
 8007422:	6839      	ldr	r1, [r7, #0]
 8007424:	4618      	mov	r0, r3
 8007426:	f000 fa1d 	bl	8007864 <_ZN11flatbuffers14IndirectHelperINS_6OffsetIN6tflite8OperatorEEEE4ReadEPKhm>
 800742a:	4603      	mov	r3, r0
  }
 800742c:	4618      	mov	r0, r3
 800742e:	3708      	adds	r7, #8
 8007430:	46bd      	mov	sp, r7
 8007432:	bd80      	pop	{r7, pc}
 8007434:	0800f654 	.word	0x0800f654
 8007438:	0800fa64 	.word	0x0800fa64
 800743c:	0800f728 	.word	0x0800f728

08007440 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6BufferEEEE4sizeEv>:
  uoffset_t size() const { return EndianScalar(length_); }
 8007440:	b580      	push	{r7, lr}
 8007442:	b082      	sub	sp, #8
 8007444:	af00      	add	r7, sp, #0
 8007446:	6078      	str	r0, [r7, #4]
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	4618      	mov	r0, r3
 800744e:	f7fa fb2a 	bl	8001aa6 <_ZN11flatbuffers12EndianScalarImEET_S1_>
 8007452:	4603      	mov	r3, r0
 8007454:	4618      	mov	r0, r3
 8007456:	3708      	adds	r7, #8
 8007458:	46bd      	mov	sp, r7
 800745a:	bd80      	pop	{r7, pc}

0800745c <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6BufferEEEE3GetEm>:
  return_type Get(uoffset_t i) const {
 800745c:	b580      	push	{r7, lr}
 800745e:	b082      	sub	sp, #8
 8007460:	af00      	add	r7, sp, #0
 8007462:	6078      	str	r0, [r7, #4]
 8007464:	6039      	str	r1, [r7, #0]
    FLATBUFFERS_ASSERT(i < size());
 8007466:	6878      	ldr	r0, [r7, #4]
 8007468:	f7ff ffea 	bl	8007440 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6BufferEEEE4sizeEv>
 800746c:	4602      	mov	r2, r0
 800746e:	683b      	ldr	r3, [r7, #0]
 8007470:	4293      	cmp	r3, r2
 8007472:	d306      	bcc.n	8007482 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6BufferEEEE3GetEm+0x26>
 8007474:	4b09      	ldr	r3, [pc, #36]	; (800749c <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6BufferEEEE3GetEm+0x40>)
 8007476:	4a0a      	ldr	r2, [pc, #40]	; (80074a0 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6BufferEEEE3GetEm+0x44>)
 8007478:	f44f 7183 	mov.w	r1, #262	; 0x106
 800747c:	4809      	ldr	r0, [pc, #36]	; (80074a4 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6BufferEEEE3GetEm+0x48>)
 800747e:	f003 fe05 	bl	800b08c <__assert_func>
    return IndirectHelper<T>::Read(Data(), i);
 8007482:	6878      	ldr	r0, [r7, #4]
 8007484:	f000 fa22 	bl	80078cc <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6BufferEEEE4DataEv>
 8007488:	4603      	mov	r3, r0
 800748a:	6839      	ldr	r1, [r7, #0]
 800748c:	4618      	mov	r0, r3
 800748e:	f000 fa09 	bl	80078a4 <_ZN11flatbuffers14IndirectHelperINS_6OffsetIN6tflite6BufferEEEE4ReadEPKhm>
 8007492:	4603      	mov	r3, r0
  }
 8007494:	4618      	mov	r0, r3
 8007496:	3708      	adds	r7, #8
 8007498:	46bd      	mov	sp, r7
 800749a:	bd80      	pop	{r7, pc}
 800749c:	0800f654 	.word	0x0800f654
 80074a0:	0800fc5c 	.word	0x0800fc5c
 80074a4:	0800f728 	.word	0x0800f728

080074a8 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8MetadataEEEE4sizeEv>:
  uoffset_t size() const { return EndianScalar(length_); }
 80074a8:	b580      	push	{r7, lr}
 80074aa:	b082      	sub	sp, #8
 80074ac:	af00      	add	r7, sp, #0
 80074ae:	6078      	str	r0, [r7, #4]
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	4618      	mov	r0, r3
 80074b6:	f7fa faf6 	bl	8001aa6 <_ZN11flatbuffers12EndianScalarImEET_S1_>
 80074ba:	4603      	mov	r3, r0
 80074bc:	4618      	mov	r0, r3
 80074be:	3708      	adds	r7, #8
 80074c0:	46bd      	mov	sp, r7
 80074c2:	bd80      	pop	{r7, pc}

080074c4 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8MetadataEEEE3GetEm>:
  return_type Get(uoffset_t i) const {
 80074c4:	b580      	push	{r7, lr}
 80074c6:	b082      	sub	sp, #8
 80074c8:	af00      	add	r7, sp, #0
 80074ca:	6078      	str	r0, [r7, #4]
 80074cc:	6039      	str	r1, [r7, #0]
    FLATBUFFERS_ASSERT(i < size());
 80074ce:	6878      	ldr	r0, [r7, #4]
 80074d0:	f7ff ffea 	bl	80074a8 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8MetadataEEEE4sizeEv>
 80074d4:	4602      	mov	r2, r0
 80074d6:	683b      	ldr	r3, [r7, #0]
 80074d8:	4293      	cmp	r3, r2
 80074da:	d306      	bcc.n	80074ea <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8MetadataEEEE3GetEm+0x26>
 80074dc:	4b09      	ldr	r3, [pc, #36]	; (8007504 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8MetadataEEEE3GetEm+0x40>)
 80074de:	4a0a      	ldr	r2, [pc, #40]	; (8007508 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8MetadataEEEE3GetEm+0x44>)
 80074e0:	f44f 7183 	mov.w	r1, #262	; 0x106
 80074e4:	4809      	ldr	r0, [pc, #36]	; (800750c <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8MetadataEEEE3GetEm+0x48>)
 80074e6:	f003 fdd1 	bl	800b08c <__assert_func>
    return IndirectHelper<T>::Read(Data(), i);
 80074ea:	6878      	ldr	r0, [r7, #4]
 80074ec:	f000 fa0e 	bl	800790c <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8MetadataEEEE4DataEv>
 80074f0:	4603      	mov	r3, r0
 80074f2:	6839      	ldr	r1, [r7, #0]
 80074f4:	4618      	mov	r0, r3
 80074f6:	f000 f9f5 	bl	80078e4 <_ZN11flatbuffers14IndirectHelperINS_6OffsetIN6tflite8MetadataEEEE4ReadEPKhm>
 80074fa:	4603      	mov	r3, r0
  }
 80074fc:	4618      	mov	r0, r3
 80074fe:	3708      	adds	r7, #8
 8007500:	46bd      	mov	sp, r7
 8007502:	bd80      	pop	{r7, pc}
 8007504:	0800f654 	.word	0x0800f654
 8007508:	0800fd54 	.word	0x0800fd54
 800750c:	0800f728 	.word	0x0800f728

08007510 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEEixEm>:
  return_type operator[](uoffset_t i) const { return Get(i); }
 8007510:	b580      	push	{r7, lr}
 8007512:	b082      	sub	sp, #8
 8007514:	af00      	add	r7, sp, #0
 8007516:	6078      	str	r0, [r7, #4]
 8007518:	6039      	str	r1, [r7, #0]
 800751a:	6839      	ldr	r1, [r7, #0]
 800751c:	6878      	ldr	r0, [r7, #4]
 800751e:	f7fd ff25 	bl	800536c <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE3GetEm>
 8007522:	4603      	mov	r3, r0
 8007524:	4618      	mov	r0, r3
 8007526:	3708      	adds	r7, #8
 8007528:	46bd      	mov	sp, r7
 800752a:	bd80      	pop	{r7, pc}

0800752c <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6BufferEEEEixEm>:
 800752c:	b580      	push	{r7, lr}
 800752e:	b082      	sub	sp, #8
 8007530:	af00      	add	r7, sp, #0
 8007532:	6078      	str	r0, [r7, #4]
 8007534:	6039      	str	r1, [r7, #0]
 8007536:	6839      	ldr	r1, [r7, #0]
 8007538:	6878      	ldr	r0, [r7, #4]
 800753a:	f7ff ff8f 	bl	800745c <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6BufferEEEE3GetEm>
 800753e:	4603      	mov	r3, r0
 8007540:	4618      	mov	r0, r3
 8007542:	3708      	adds	r7, #8
 8007544:	46bd      	mov	sp, r7
 8007546:	bd80      	pop	{r7, pc}

08007548 <_ZNK11flatbuffers6VectorIhE4dataEv>:
  const T *data() const { return reinterpret_cast<const T *>(Data()); }
 8007548:	b580      	push	{r7, lr}
 800754a:	b082      	sub	sp, #8
 800754c:	af00      	add	r7, sp, #0
 800754e:	6078      	str	r0, [r7, #4]
 8007550:	6878      	ldr	r0, [r7, #4]
 8007552:	f000 f917 	bl	8007784 <_ZNK11flatbuffers6VectorIhE4DataEv>
 8007556:	4603      	mov	r3, r0
 8007558:	4618      	mov	r0, r3
 800755a:	3708      	adds	r7, #8
 800755c:	46bd      	mov	sp, r7
 800755e:	bd80      	pop	{r7, pc}

08007560 <_ZN6tflite8internal33FlatBufferVectorToTfLiteTypeArrayIl14TfLiteIntArrayEE12TfLiteStatusPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterEPKN11flatbuffers6VectorIT_EEPPT0_>:
TfLiteStatus FlatBufferVectorToTfLiteTypeArray(
 8007560:	b580      	push	{r7, lr}
 8007562:	b084      	sub	sp, #16
 8007564:	af00      	add	r7, sp, #0
 8007566:	60f8      	str	r0, [r7, #12]
 8007568:	60b9      	str	r1, [r7, #8]
 800756a:	607a      	str	r2, [r7, #4]
 800756c:	603b      	str	r3, [r7, #0]
  TFLITE_DCHECK(error_reporter != nullptr);
 800756e:	68bb      	ldr	r3, [r7, #8]
 8007570:	2b00      	cmp	r3, #0
 8007572:	d101      	bne.n	8007578 <_ZN6tflite8internal33FlatBufferVectorToTfLiteTypeArrayIl14TfLiteIntArrayEE12TfLiteStatusPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterEPKN11flatbuffers6VectorIT_EEPPT0_+0x18>
 8007574:	f003 fd82 	bl	800b07c <abort>
  TFLITE_DCHECK(flatbuffer_array != nullptr);
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	2b00      	cmp	r3, #0
 800757c:	d101      	bne.n	8007582 <_ZN6tflite8internal33FlatBufferVectorToTfLiteTypeArrayIl14TfLiteIntArrayEE12TfLiteStatusPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterEPKN11flatbuffers6VectorIT_EEPPT0_+0x22>
 800757e:	f003 fd7d 	bl	800b07c <abort>
    *result = const_cast<kTfLiteArrayType*>(
 8007582:	683b      	ldr	r3, [r7, #0]
 8007584:	687a      	ldr	r2, [r7, #4]
 8007586:	601a      	str	r2, [r3, #0]
  return kTfLiteOk;
 8007588:	2300      	movs	r3, #0
}
 800758a:	4618      	mov	r0, r3
 800758c:	3710      	adds	r7, #16
 800758e:	46bd      	mov	sp, r7
 8007590:	bd80      	pop	{r7, pc}

08007592 <_ZN6tflite8internal33FlatBufferVectorToTfLiteTypeArrayIf16TfLiteFloatArrayEE12TfLiteStatusPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterEPKN11flatbuffers6VectorIT_EEPPT0_>:
TfLiteStatus FlatBufferVectorToTfLiteTypeArray(
 8007592:	b580      	push	{r7, lr}
 8007594:	b084      	sub	sp, #16
 8007596:	af00      	add	r7, sp, #0
 8007598:	60f8      	str	r0, [r7, #12]
 800759a:	60b9      	str	r1, [r7, #8]
 800759c:	607a      	str	r2, [r7, #4]
 800759e:	603b      	str	r3, [r7, #0]
  TFLITE_DCHECK(error_reporter != nullptr);
 80075a0:	68bb      	ldr	r3, [r7, #8]
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d101      	bne.n	80075aa <_ZN6tflite8internal33FlatBufferVectorToTfLiteTypeArrayIf16TfLiteFloatArrayEE12TfLiteStatusPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterEPKN11flatbuffers6VectorIT_EEPPT0_+0x18>
 80075a6:	f003 fd69 	bl	800b07c <abort>
  TFLITE_DCHECK(flatbuffer_array != nullptr);
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	d101      	bne.n	80075b4 <_ZN6tflite8internal33FlatBufferVectorToTfLiteTypeArrayIf16TfLiteFloatArrayEE12TfLiteStatusPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterEPKN11flatbuffers6VectorIT_EEPPT0_+0x22>
 80075b0:	f003 fd64 	bl	800b07c <abort>
    *result = const_cast<kTfLiteArrayType*>(
 80075b4:	683b      	ldr	r3, [r7, #0]
 80075b6:	687a      	ldr	r2, [r7, #4]
 80075b8:	601a      	str	r2, [r3, #0]
  return kTfLiteOk;
 80075ba:	2300      	movs	r3, #0
}
 80075bc:	4618      	mov	r0, r3
 80075be:	3710      	adds	r7, #16
 80075c0:	46bd      	mov	sp, r7
 80075c2:	bd80      	pop	{r7, pc}

080075c4 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIhEEEET_t>:
  template<typename P> P GetPointer(voffset_t field) {
 80075c4:	b580      	push	{r7, lr}
 80075c6:	b084      	sub	sp, #16
 80075c8:	af00      	add	r7, sp, #0
 80075ca:	6078      	str	r0, [r7, #4]
 80075cc:	460b      	mov	r3, r1
 80075ce:	807b      	strh	r3, [r7, #2]
    auto field_offset = GetOptionalFieldOffset(field);
 80075d0:	887b      	ldrh	r3, [r7, #2]
 80075d2:	4619      	mov	r1, r3
 80075d4:	6878      	ldr	r0, [r7, #4]
 80075d6:	f7f9 fd87 	bl	80010e8 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
 80075da:	4603      	mov	r3, r0
 80075dc:	81fb      	strh	r3, [r7, #14]
    auto p = data_ + field_offset;
 80075de:	687a      	ldr	r2, [r7, #4]
 80075e0:	89fb      	ldrh	r3, [r7, #14]
 80075e2:	4413      	add	r3, r2
 80075e4:	60bb      	str	r3, [r7, #8]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 80075e6:	89fb      	ldrh	r3, [r7, #14]
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	d006      	beq.n	80075fa <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIhEEEET_t+0x36>
 80075ec:	68b8      	ldr	r0, [r7, #8]
 80075ee:	f7fa fa73 	bl	8001ad8 <_ZN11flatbuffers10ReadScalarImEET_PKv>
 80075f2:	4602      	mov	r2, r0
 80075f4:	68bb      	ldr	r3, [r7, #8]
 80075f6:	4413      	add	r3, r2
                        : nullptr;
 80075f8:	e000      	b.n	80075fc <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIhEEEET_t+0x38>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 80075fa:	2300      	movs	r3, #0
  }
 80075fc:	4618      	mov	r0, r3
 80075fe:	3710      	adds	r7, #16
 8007600:	46bd      	mov	sp, r7
 8007602:	bd80      	pop	{r7, pc}

08007604 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIfEEEET_t>:
  template<typename P> P GetPointer(voffset_t field) {
 8007604:	b580      	push	{r7, lr}
 8007606:	b084      	sub	sp, #16
 8007608:	af00      	add	r7, sp, #0
 800760a:	6078      	str	r0, [r7, #4]
 800760c:	460b      	mov	r3, r1
 800760e:	807b      	strh	r3, [r7, #2]
    auto field_offset = GetOptionalFieldOffset(field);
 8007610:	887b      	ldrh	r3, [r7, #2]
 8007612:	4619      	mov	r1, r3
 8007614:	6878      	ldr	r0, [r7, #4]
 8007616:	f7f9 fd67 	bl	80010e8 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
 800761a:	4603      	mov	r3, r0
 800761c:	81fb      	strh	r3, [r7, #14]
    auto p = data_ + field_offset;
 800761e:	687a      	ldr	r2, [r7, #4]
 8007620:	89fb      	ldrh	r3, [r7, #14]
 8007622:	4413      	add	r3, r2
 8007624:	60bb      	str	r3, [r7, #8]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 8007626:	89fb      	ldrh	r3, [r7, #14]
 8007628:	2b00      	cmp	r3, #0
 800762a:	d006      	beq.n	800763a <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIfEEEET_t+0x36>
 800762c:	68b8      	ldr	r0, [r7, #8]
 800762e:	f7fa fa53 	bl	8001ad8 <_ZN11flatbuffers10ReadScalarImEET_PKv>
 8007632:	4602      	mov	r2, r0
 8007634:	68bb      	ldr	r3, [r7, #8]
 8007636:	4413      	add	r3, r2
                        : nullptr;
 8007638:	e000      	b.n	800763c <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIfEEEET_t+0x38>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 800763a:	2300      	movs	r3, #0
  }
 800763c:	4618      	mov	r0, r3
 800763e:	3710      	adds	r7, #16
 8007640:	46bd      	mov	sp, r7
 8007642:	bd80      	pop	{r7, pc}

08007644 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIxEEEET_t>:
  template<typename P> P GetPointer(voffset_t field) {
 8007644:	b580      	push	{r7, lr}
 8007646:	b084      	sub	sp, #16
 8007648:	af00      	add	r7, sp, #0
 800764a:	6078      	str	r0, [r7, #4]
 800764c:	460b      	mov	r3, r1
 800764e:	807b      	strh	r3, [r7, #2]
    auto field_offset = GetOptionalFieldOffset(field);
 8007650:	887b      	ldrh	r3, [r7, #2]
 8007652:	4619      	mov	r1, r3
 8007654:	6878      	ldr	r0, [r7, #4]
 8007656:	f7f9 fd47 	bl	80010e8 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
 800765a:	4603      	mov	r3, r0
 800765c:	81fb      	strh	r3, [r7, #14]
    auto p = data_ + field_offset;
 800765e:	687a      	ldr	r2, [r7, #4]
 8007660:	89fb      	ldrh	r3, [r7, #14]
 8007662:	4413      	add	r3, r2
 8007664:	60bb      	str	r3, [r7, #8]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 8007666:	89fb      	ldrh	r3, [r7, #14]
 8007668:	2b00      	cmp	r3, #0
 800766a:	d006      	beq.n	800767a <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIxEEEET_t+0x36>
 800766c:	68b8      	ldr	r0, [r7, #8]
 800766e:	f7fa fa33 	bl	8001ad8 <_ZN11flatbuffers10ReadScalarImEET_PKv>
 8007672:	4602      	mov	r2, r0
 8007674:	68bb      	ldr	r3, [r7, #8]
 8007676:	4413      	add	r3, r2
                        : nullptr;
 8007678:	e000      	b.n	800767c <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIxEEEET_t+0x38>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 800767a:	2300      	movs	r3, #0
  }
 800767c:	4618      	mov	r0, r3
 800767e:	3710      	adds	r7, #16
 8007680:	46bd      	mov	sp, r7
 8007682:	bd80      	pop	{r7, pc}

08007684 <_ZN11flatbuffers5Table10GetPointerIPKN6tflite22QuantizationParametersEEET_t>:
  template<typename P> P GetPointer(voffset_t field) {
 8007684:	b580      	push	{r7, lr}
 8007686:	b084      	sub	sp, #16
 8007688:	af00      	add	r7, sp, #0
 800768a:	6078      	str	r0, [r7, #4]
 800768c:	460b      	mov	r3, r1
 800768e:	807b      	strh	r3, [r7, #2]
    auto field_offset = GetOptionalFieldOffset(field);
 8007690:	887b      	ldrh	r3, [r7, #2]
 8007692:	4619      	mov	r1, r3
 8007694:	6878      	ldr	r0, [r7, #4]
 8007696:	f7f9 fd27 	bl	80010e8 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
 800769a:	4603      	mov	r3, r0
 800769c:	81fb      	strh	r3, [r7, #14]
    auto p = data_ + field_offset;
 800769e:	687a      	ldr	r2, [r7, #4]
 80076a0:	89fb      	ldrh	r3, [r7, #14]
 80076a2:	4413      	add	r3, r2
 80076a4:	60bb      	str	r3, [r7, #8]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 80076a6:	89fb      	ldrh	r3, [r7, #14]
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	d006      	beq.n	80076ba <_ZN11flatbuffers5Table10GetPointerIPKN6tflite22QuantizationParametersEEET_t+0x36>
 80076ac:	68b8      	ldr	r0, [r7, #8]
 80076ae:	f7fa fa13 	bl	8001ad8 <_ZN11flatbuffers10ReadScalarImEET_PKv>
 80076b2:	4602      	mov	r2, r0
 80076b4:	68bb      	ldr	r3, [r7, #8]
 80076b6:	4413      	add	r3, r2
                        : nullptr;
 80076b8:	e000      	b.n	80076bc <_ZN11flatbuffers5Table10GetPointerIPKN6tflite22QuantizationParametersEEET_t+0x38>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 80076ba:	2300      	movs	r3, #0
  }
 80076bc:	4618      	mov	r0, r3
 80076be:	3710      	adds	r7, #16
 80076c0:	46bd      	mov	sp, r7
 80076c2:	bd80      	pop	{r7, pc}

080076c4 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite6TensorEEEEEEET_t>:
  template<typename P> P GetPointer(voffset_t field) {
 80076c4:	b580      	push	{r7, lr}
 80076c6:	b084      	sub	sp, #16
 80076c8:	af00      	add	r7, sp, #0
 80076ca:	6078      	str	r0, [r7, #4]
 80076cc:	460b      	mov	r3, r1
 80076ce:	807b      	strh	r3, [r7, #2]
    auto field_offset = GetOptionalFieldOffset(field);
 80076d0:	887b      	ldrh	r3, [r7, #2]
 80076d2:	4619      	mov	r1, r3
 80076d4:	6878      	ldr	r0, [r7, #4]
 80076d6:	f7f9 fd07 	bl	80010e8 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
 80076da:	4603      	mov	r3, r0
 80076dc:	81fb      	strh	r3, [r7, #14]
    auto p = data_ + field_offset;
 80076de:	687a      	ldr	r2, [r7, #4]
 80076e0:	89fb      	ldrh	r3, [r7, #14]
 80076e2:	4413      	add	r3, r2
 80076e4:	60bb      	str	r3, [r7, #8]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 80076e6:	89fb      	ldrh	r3, [r7, #14]
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	d006      	beq.n	80076fa <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite6TensorEEEEEEET_t+0x36>
 80076ec:	68b8      	ldr	r0, [r7, #8]
 80076ee:	f7fa f9f3 	bl	8001ad8 <_ZN11flatbuffers10ReadScalarImEET_PKv>
 80076f2:	4602      	mov	r2, r0
 80076f4:	68bb      	ldr	r3, [r7, #8]
 80076f6:	4413      	add	r3, r2
                        : nullptr;
 80076f8:	e000      	b.n	80076fc <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite6TensorEEEEEEET_t+0x38>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 80076fa:	2300      	movs	r3, #0
  }
 80076fc:	4618      	mov	r0, r3
 80076fe:	3710      	adds	r7, #16
 8007700:	46bd      	mov	sp, r7
 8007702:	bd80      	pop	{r7, pc}

08007704 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite6BufferEEEEEEET_t>:
  template<typename P> P GetPointer(voffset_t field) {
 8007704:	b580      	push	{r7, lr}
 8007706:	b084      	sub	sp, #16
 8007708:	af00      	add	r7, sp, #0
 800770a:	6078      	str	r0, [r7, #4]
 800770c:	460b      	mov	r3, r1
 800770e:	807b      	strh	r3, [r7, #2]
    auto field_offset = GetOptionalFieldOffset(field);
 8007710:	887b      	ldrh	r3, [r7, #2]
 8007712:	4619      	mov	r1, r3
 8007714:	6878      	ldr	r0, [r7, #4]
 8007716:	f7f9 fce7 	bl	80010e8 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
 800771a:	4603      	mov	r3, r0
 800771c:	81fb      	strh	r3, [r7, #14]
    auto p = data_ + field_offset;
 800771e:	687a      	ldr	r2, [r7, #4]
 8007720:	89fb      	ldrh	r3, [r7, #14]
 8007722:	4413      	add	r3, r2
 8007724:	60bb      	str	r3, [r7, #8]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 8007726:	89fb      	ldrh	r3, [r7, #14]
 8007728:	2b00      	cmp	r3, #0
 800772a:	d006      	beq.n	800773a <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite6BufferEEEEEEET_t+0x36>
 800772c:	68b8      	ldr	r0, [r7, #8]
 800772e:	f7fa f9d3 	bl	8001ad8 <_ZN11flatbuffers10ReadScalarImEET_PKv>
 8007732:	4602      	mov	r2, r0
 8007734:	68bb      	ldr	r3, [r7, #8]
 8007736:	4413      	add	r3, r2
                        : nullptr;
 8007738:	e000      	b.n	800773c <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite6BufferEEEEEEET_t+0x38>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 800773a:	2300      	movs	r3, #0
  }
 800773c:	4618      	mov	r0, r3
 800773e:	3710      	adds	r7, #16
 8007740:	46bd      	mov	sp, r7
 8007742:	bd80      	pop	{r7, pc}

08007744 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite8MetadataEEEEEEET_t>:
  template<typename P> P GetPointer(voffset_t field) {
 8007744:	b580      	push	{r7, lr}
 8007746:	b084      	sub	sp, #16
 8007748:	af00      	add	r7, sp, #0
 800774a:	6078      	str	r0, [r7, #4]
 800774c:	460b      	mov	r3, r1
 800774e:	807b      	strh	r3, [r7, #2]
    auto field_offset = GetOptionalFieldOffset(field);
 8007750:	887b      	ldrh	r3, [r7, #2]
 8007752:	4619      	mov	r1, r3
 8007754:	6878      	ldr	r0, [r7, #4]
 8007756:	f7f9 fcc7 	bl	80010e8 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
 800775a:	4603      	mov	r3, r0
 800775c:	81fb      	strh	r3, [r7, #14]
    auto p = data_ + field_offset;
 800775e:	687a      	ldr	r2, [r7, #4]
 8007760:	89fb      	ldrh	r3, [r7, #14]
 8007762:	4413      	add	r3, r2
 8007764:	60bb      	str	r3, [r7, #8]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 8007766:	89fb      	ldrh	r3, [r7, #14]
 8007768:	2b00      	cmp	r3, #0
 800776a:	d006      	beq.n	800777a <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite8MetadataEEEEEEET_t+0x36>
 800776c:	68b8      	ldr	r0, [r7, #8]
 800776e:	f7fa f9b3 	bl	8001ad8 <_ZN11flatbuffers10ReadScalarImEET_PKv>
 8007772:	4602      	mov	r2, r0
 8007774:	68bb      	ldr	r3, [r7, #8]
 8007776:	4413      	add	r3, r2
                        : nullptr;
 8007778:	e000      	b.n	800777c <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite8MetadataEEEEEEET_t+0x38>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 800777a:	2300      	movs	r3, #0
  }
 800777c:	4618      	mov	r0, r3
 800777e:	3710      	adds	r7, #16
 8007780:	46bd      	mov	sp, r7
 8007782:	bd80      	pop	{r7, pc}

08007784 <_ZNK11flatbuffers6VectorIhE4DataEv>:
  const uint8_t *Data() const {
 8007784:	b480      	push	{r7}
 8007786:	b083      	sub	sp, #12
 8007788:	af00      	add	r7, sp, #0
 800778a:	6078      	str	r0, [r7, #4]
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	3304      	adds	r3, #4
  }
 8007790:	4618      	mov	r0, r3
 8007792:	370c      	adds	r7, #12
 8007794:	46bd      	mov	sp, r7
 8007796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800779a:	4770      	bx	lr

0800779c <_ZN11flatbuffers14IndirectHelperIfE4ReadEPKhm>:
  static return_type Read(const uint8_t *p, uoffset_t i) {
 800779c:	b580      	push	{r7, lr}
 800779e:	b082      	sub	sp, #8
 80077a0:	af00      	add	r7, sp, #0
 80077a2:	6078      	str	r0, [r7, #4]
 80077a4:	6039      	str	r1, [r7, #0]
    return EndianScalar((reinterpret_cast<const T *>(p))[i]);
 80077a6:	683b      	ldr	r3, [r7, #0]
 80077a8:	009b      	lsls	r3, r3, #2
 80077aa:	687a      	ldr	r2, [r7, #4]
 80077ac:	4413      	add	r3, r2
 80077ae:	edd3 7a00 	vldr	s15, [r3]
 80077b2:	eeb0 0a67 	vmov.f32	s0, s15
 80077b6:	f7fc fee1 	bl	800457c <_ZN11flatbuffers12EndianScalarIfEET_S1_>
 80077ba:	eef0 7a40 	vmov.f32	s15, s0
  }
 80077be:	eeb0 0a67 	vmov.f32	s0, s15
 80077c2:	3708      	adds	r7, #8
 80077c4:	46bd      	mov	sp, r7
 80077c6:	bd80      	pop	{r7, pc}

080077c8 <_ZNK11flatbuffers6VectorIfE4DataEv>:
  const uint8_t *Data() const {
 80077c8:	b480      	push	{r7}
 80077ca:	b083      	sub	sp, #12
 80077cc:	af00      	add	r7, sp, #0
 80077ce:	6078      	str	r0, [r7, #4]
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	3304      	adds	r3, #4
  }
 80077d4:	4618      	mov	r0, r3
 80077d6:	370c      	adds	r7, #12
 80077d8:	46bd      	mov	sp, r7
 80077da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077de:	4770      	bx	lr

080077e0 <_ZN11flatbuffers14IndirectHelperIxE4ReadEPKhm>:
  static return_type Read(const uint8_t *p, uoffset_t i) {
 80077e0:	b580      	push	{r7, lr}
 80077e2:	b082      	sub	sp, #8
 80077e4:	af00      	add	r7, sp, #0
 80077e6:	6078      	str	r0, [r7, #4]
 80077e8:	6039      	str	r1, [r7, #0]
    return EndianScalar((reinterpret_cast<const T *>(p))[i]);
 80077ea:	683b      	ldr	r3, [r7, #0]
 80077ec:	00db      	lsls	r3, r3, #3
 80077ee:	687a      	ldr	r2, [r7, #4]
 80077f0:	4413      	add	r3, r2
 80077f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077f6:	4610      	mov	r0, r2
 80077f8:	4619      	mov	r1, r3
 80077fa:	f7fd fddd 	bl	80053b8 <_ZN11flatbuffers12EndianScalarIxEET_S1_>
 80077fe:	4602      	mov	r2, r0
 8007800:	460b      	mov	r3, r1
  }
 8007802:	4610      	mov	r0, r2
 8007804:	4619      	mov	r1, r3
 8007806:	3708      	adds	r7, #8
 8007808:	46bd      	mov	sp, r7
 800780a:	bd80      	pop	{r7, pc}

0800780c <_ZNK11flatbuffers6VectorIxE4DataEv>:
  const uint8_t *Data() const {
 800780c:	b480      	push	{r7}
 800780e:	b083      	sub	sp, #12
 8007810:	af00      	add	r7, sp, #0
 8007812:	6078      	str	r0, [r7, #4]
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	3304      	adds	r3, #4
  }
 8007818:	4618      	mov	r0, r3
 800781a:	370c      	adds	r7, #12
 800781c:	46bd      	mov	sp, r7
 800781e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007822:	4770      	bx	lr

08007824 <_ZN11flatbuffers14IndirectHelperINS_6OffsetIN6tflite6TensorEEEE4ReadEPKhm>:
  static return_type Read(const uint8_t *p, uoffset_t i) {
 8007824:	b580      	push	{r7, lr}
 8007826:	b082      	sub	sp, #8
 8007828:	af00      	add	r7, sp, #0
 800782a:	6078      	str	r0, [r7, #4]
 800782c:	6039      	str	r1, [r7, #0]
    p += i * sizeof(uoffset_t);
 800782e:	683b      	ldr	r3, [r7, #0]
 8007830:	009b      	lsls	r3, r3, #2
 8007832:	687a      	ldr	r2, [r7, #4]
 8007834:	4413      	add	r3, r2
 8007836:	607b      	str	r3, [r7, #4]
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
 8007838:	6878      	ldr	r0, [r7, #4]
 800783a:	f7fa f94d 	bl	8001ad8 <_ZN11flatbuffers10ReadScalarImEET_PKv>
 800783e:	4602      	mov	r2, r0
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	4413      	add	r3, r2
  }
 8007844:	4618      	mov	r0, r3
 8007846:	3708      	adds	r7, #8
 8007848:	46bd      	mov	sp, r7
 800784a:	bd80      	pop	{r7, pc}

0800784c <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEE4DataEv>:
  const uint8_t *Data() const {
 800784c:	b480      	push	{r7}
 800784e:	b083      	sub	sp, #12
 8007850:	af00      	add	r7, sp, #0
 8007852:	6078      	str	r0, [r7, #4]
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	3304      	adds	r3, #4
  }
 8007858:	4618      	mov	r0, r3
 800785a:	370c      	adds	r7, #12
 800785c:	46bd      	mov	sp, r7
 800785e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007862:	4770      	bx	lr

08007864 <_ZN11flatbuffers14IndirectHelperINS_6OffsetIN6tflite8OperatorEEEE4ReadEPKhm>:
  static return_type Read(const uint8_t *p, uoffset_t i) {
 8007864:	b580      	push	{r7, lr}
 8007866:	b082      	sub	sp, #8
 8007868:	af00      	add	r7, sp, #0
 800786a:	6078      	str	r0, [r7, #4]
 800786c:	6039      	str	r1, [r7, #0]
    p += i * sizeof(uoffset_t);
 800786e:	683b      	ldr	r3, [r7, #0]
 8007870:	009b      	lsls	r3, r3, #2
 8007872:	687a      	ldr	r2, [r7, #4]
 8007874:	4413      	add	r3, r2
 8007876:	607b      	str	r3, [r7, #4]
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
 8007878:	6878      	ldr	r0, [r7, #4]
 800787a:	f7fa f92d 	bl	8001ad8 <_ZN11flatbuffers10ReadScalarImEET_PKv>
 800787e:	4602      	mov	r2, r0
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	4413      	add	r3, r2
  }
 8007884:	4618      	mov	r0, r3
 8007886:	3708      	adds	r7, #8
 8007888:	46bd      	mov	sp, r7
 800788a:	bd80      	pop	{r7, pc}

0800788c <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8OperatorEEEE4DataEv>:
  const uint8_t *Data() const {
 800788c:	b480      	push	{r7}
 800788e:	b083      	sub	sp, #12
 8007890:	af00      	add	r7, sp, #0
 8007892:	6078      	str	r0, [r7, #4]
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	3304      	adds	r3, #4
  }
 8007898:	4618      	mov	r0, r3
 800789a:	370c      	adds	r7, #12
 800789c:	46bd      	mov	sp, r7
 800789e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078a2:	4770      	bx	lr

080078a4 <_ZN11flatbuffers14IndirectHelperINS_6OffsetIN6tflite6BufferEEEE4ReadEPKhm>:
  static return_type Read(const uint8_t *p, uoffset_t i) {
 80078a4:	b580      	push	{r7, lr}
 80078a6:	b082      	sub	sp, #8
 80078a8:	af00      	add	r7, sp, #0
 80078aa:	6078      	str	r0, [r7, #4]
 80078ac:	6039      	str	r1, [r7, #0]
    p += i * sizeof(uoffset_t);
 80078ae:	683b      	ldr	r3, [r7, #0]
 80078b0:	009b      	lsls	r3, r3, #2
 80078b2:	687a      	ldr	r2, [r7, #4]
 80078b4:	4413      	add	r3, r2
 80078b6:	607b      	str	r3, [r7, #4]
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
 80078b8:	6878      	ldr	r0, [r7, #4]
 80078ba:	f7fa f90d 	bl	8001ad8 <_ZN11flatbuffers10ReadScalarImEET_PKv>
 80078be:	4602      	mov	r2, r0
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	4413      	add	r3, r2
  }
 80078c4:	4618      	mov	r0, r3
 80078c6:	3708      	adds	r7, #8
 80078c8:	46bd      	mov	sp, r7
 80078ca:	bd80      	pop	{r7, pc}

080078cc <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6BufferEEEE4DataEv>:
  const uint8_t *Data() const {
 80078cc:	b480      	push	{r7}
 80078ce:	b083      	sub	sp, #12
 80078d0:	af00      	add	r7, sp, #0
 80078d2:	6078      	str	r0, [r7, #4]
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	3304      	adds	r3, #4
  }
 80078d8:	4618      	mov	r0, r3
 80078da:	370c      	adds	r7, #12
 80078dc:	46bd      	mov	sp, r7
 80078de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078e2:	4770      	bx	lr

080078e4 <_ZN11flatbuffers14IndirectHelperINS_6OffsetIN6tflite8MetadataEEEE4ReadEPKhm>:
  static return_type Read(const uint8_t *p, uoffset_t i) {
 80078e4:	b580      	push	{r7, lr}
 80078e6:	b082      	sub	sp, #8
 80078e8:	af00      	add	r7, sp, #0
 80078ea:	6078      	str	r0, [r7, #4]
 80078ec:	6039      	str	r1, [r7, #0]
    p += i * sizeof(uoffset_t);
 80078ee:	683b      	ldr	r3, [r7, #0]
 80078f0:	009b      	lsls	r3, r3, #2
 80078f2:	687a      	ldr	r2, [r7, #4]
 80078f4:	4413      	add	r3, r2
 80078f6:	607b      	str	r3, [r7, #4]
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
 80078f8:	6878      	ldr	r0, [r7, #4]
 80078fa:	f7fa f8ed 	bl	8001ad8 <_ZN11flatbuffers10ReadScalarImEET_PKv>
 80078fe:	4602      	mov	r2, r0
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	4413      	add	r3, r2
  }
 8007904:	4618      	mov	r0, r3
 8007906:	3708      	adds	r7, #8
 8007908:	46bd      	mov	sp, r7
 800790a:	bd80      	pop	{r7, pc}

0800790c <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8MetadataEEEE4DataEv>:
  const uint8_t *Data() const {
 800790c:	b480      	push	{r7}
 800790e:	b083      	sub	sp, #12
 8007910:	af00      	add	r7, sp, #0
 8007912:	6078      	str	r0, [r7, #4]
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	3304      	adds	r3, #4
  }
 8007918:	4618      	mov	r0, r3
 800791a:	370c      	adds	r7, #12
 800791c:	46bd      	mov	sp, r7
 800791e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007922:	4770      	bx	lr

08007924 <_ZN6tflite12_GLOBAL__N_125MicroBuiltinDataAllocatorD1Ev>:
class MicroBuiltinDataAllocator : public BuiltinDataAllocator {
 8007924:	b580      	push	{r7, lr}
 8007926:	b082      	sub	sp, #8
 8007928:	af00      	add	r7, sp, #0
 800792a:	6078      	str	r0, [r7, #4]
 800792c:	4a05      	ldr	r2, [pc, #20]	; (8007944 <_ZN6tflite12_GLOBAL__N_125MicroBuiltinDataAllocatorD1Ev+0x20>)
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	601a      	str	r2, [r3, #0]
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	4618      	mov	r0, r3
 8007936:	f7fe f8af 	bl	8005a98 <_ZN6tflite20BuiltinDataAllocatorD1Ev>
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	4618      	mov	r0, r3
 800793e:	3708      	adds	r7, #8
 8007940:	46bd      	mov	sp, r7
 8007942:	bd80      	pop	{r7, pc}
 8007944:	08021ae8 	.word	0x08021ae8

08007948 <_ZN6tflite12_GLOBAL__N_125MicroBuiltinDataAllocatorD0Ev>:
 8007948:	b580      	push	{r7, lr}
 800794a:	b082      	sub	sp, #8
 800794c:	af00      	add	r7, sp, #0
 800794e:	6078      	str	r0, [r7, #4]
 8007950:	6878      	ldr	r0, [r7, #4]
 8007952:	f7ff ffe7 	bl	8007924 <_ZN6tflite12_GLOBAL__N_125MicroBuiltinDataAllocatorD1Ev>
 8007956:	2108      	movs	r1, #8
 8007958:	6878      	ldr	r0, [r7, #4]
 800795a:	f003 faa8 	bl	800aeae <_ZdlPvj>
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	4618      	mov	r0, r3
 8007962:	3708      	adds	r7, #8
 8007964:	46bd      	mov	sp, r7
 8007966:	bd80      	pop	{r7, pc}

08007968 <_ZN12_GLOBAL__N_13LogEPKcSt9__va_list>:

namespace {
uint8_t micro_error_reporter_buffer[sizeof(tflite::MicroErrorReporter)];
tflite::MicroErrorReporter* error_reporter_ = nullptr;

void Log(const char* format, va_list args) {
 8007968:	b580      	push	{r7, lr}
 800796a:	b0c2      	sub	sp, #264	; 0x108
 800796c:	af00      	add	r7, sp, #0
 800796e:	1d3b      	adds	r3, r7, #4
 8007970:	6018      	str	r0, [r3, #0]
 8007972:	463b      	mov	r3, r7
 8007974:	6019      	str	r1, [r3, #0]
  // Only pulling in the implementation of this function for builds where we
  // expect to make use of it to be extra cautious about not increasing the code
  // size.
  static constexpr int kMaxLogLen = 256;
  char log_buffer[kMaxLogLen];
  MicroVsnprintf(log_buffer, kMaxLogLen, format, args);
 8007976:	463b      	mov	r3, r7
 8007978:	1d3a      	adds	r2, r7, #4
 800797a:	f107 0008 	add.w	r0, r7, #8
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	6812      	ldr	r2, [r2, #0]
 8007982:	f44f 7180 	mov.w	r1, #256	; 0x100
 8007986:	f001 fbe1 	bl	800914c <MicroVsnprintf>
  DebugLog(log_buffer);
 800798a:	f107 0308 	add.w	r3, r7, #8
 800798e:	4618      	mov	r0, r3
 8007990:	f7fa f870 	bl	8001a74 <DebugLog>
  DebugLog("\r\n");
 8007994:	4803      	ldr	r0, [pc, #12]	; (80079a4 <_ZN12_GLOBAL__N_13LogEPKcSt9__va_list+0x3c>)
 8007996:	f7fa f86d 	bl	8001a74 <DebugLog>
#endif
}
 800799a:	bf00      	nop
 800799c:	f507 7784 	add.w	r7, r7, #264	; 0x108
 80079a0:	46bd      	mov	sp, r7
 80079a2:	bd80      	pop	{r7, pc}
 80079a4:	0800fe50 	.word	0x0800fe50

080079a8 <_Z11MicroPrintfPKcz>:

}  // namespace

#if !defined(TF_LITE_STRIP_ERROR_STRINGS)
void MicroPrintf(const char* format, ...) {
 80079a8:	b40f      	push	{r0, r1, r2, r3}
 80079aa:	b580      	push	{r7, lr}
 80079ac:	b082      	sub	sp, #8
 80079ae:	af00      	add	r7, sp, #0
  va_list args;
  va_start(args, format);
 80079b0:	f107 0314 	add.w	r3, r7, #20
 80079b4:	607b      	str	r3, [r7, #4]
  Log(format, args);
 80079b6:	6879      	ldr	r1, [r7, #4]
 80079b8:	6938      	ldr	r0, [r7, #16]
 80079ba:	f7ff ffd5 	bl	8007968 <_ZN12_GLOBAL__N_13LogEPKcSt9__va_list>
  va_end(args);
}
 80079be:	bf00      	nop
 80079c0:	3708      	adds	r7, #8
 80079c2:	46bd      	mov	sp, r7
 80079c4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80079c8:	b004      	add	sp, #16
 80079ca:	4770      	bx	lr

080079cc <_ZN6tflite18MicroErrorReporter6ReportEPKcSt9__va_list>:
    error_reporter_ = new (micro_error_reporter_buffer) MicroErrorReporter();
  }
  return error_reporter_;
}

int MicroErrorReporter::Report(const char* format, va_list args) {
 80079cc:	b580      	push	{r7, lr}
 80079ce:	b084      	sub	sp, #16
 80079d0:	af00      	add	r7, sp, #0
 80079d2:	60f8      	str	r0, [r7, #12]
 80079d4:	60b9      	str	r1, [r7, #8]
 80079d6:	607a      	str	r2, [r7, #4]
  Log(format, args);
 80079d8:	6879      	ldr	r1, [r7, #4]
 80079da:	68b8      	ldr	r0, [r7, #8]
 80079dc:	f7ff ffc4 	bl	8007968 <_ZN12_GLOBAL__N_13LogEPKcSt9__va_list>
  return 0;
 80079e0:	2300      	movs	r3, #0
}
 80079e2:	4618      	mov	r0, r3
 80079e4:	3710      	adds	r7, #16
 80079e6:	46bd      	mov	sp, r7
 80079e8:	bd80      	pop	{r7, pc}

080079ea <_ZN6tflite19ScopedMicroProfilerC1EPKcPNS_13MicroProfilerE>:
//   ScopedMicroProfiler scoped_profiler("custom_tag", profiler);
//   work_to_profile();
// }
class ScopedMicroProfiler {
 public:
  explicit ScopedMicroProfiler(const char* tag, MicroProfiler* profiler)
 80079ea:	b580      	push	{r7, lr}
 80079ec:	b084      	sub	sp, #16
 80079ee:	af00      	add	r7, sp, #0
 80079f0:	60f8      	str	r0, [r7, #12]
 80079f2:	60b9      	str	r1, [r7, #8]
 80079f4:	607a      	str	r2, [r7, #4]
      : profiler_(profiler) {
 80079f6:	68fb      	ldr	r3, [r7, #12]
 80079f8:	2200      	movs	r2, #0
 80079fa:	601a      	str	r2, [r3, #0]
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	687a      	ldr	r2, [r7, #4]
 8007a00:	605a      	str	r2, [r3, #4]
    if (profiler_ != nullptr) {
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	685b      	ldr	r3, [r3, #4]
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	d00c      	beq.n	8007a24 <_ZN6tflite19ScopedMicroProfilerC1EPKcPNS_13MicroProfilerE+0x3a>
      event_handle_ = profiler_->BeginEvent(tag);
 8007a0a:	68fb      	ldr	r3, [r7, #12]
 8007a0c:	685a      	ldr	r2, [r3, #4]
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	685b      	ldr	r3, [r3, #4]
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	3308      	adds	r3, #8
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	68b9      	ldr	r1, [r7, #8]
 8007a1a:	4610      	mov	r0, r2
 8007a1c:	4798      	blx	r3
 8007a1e:	4602      	mov	r2, r0
 8007a20:	68fb      	ldr	r3, [r7, #12]
 8007a22:	601a      	str	r2, [r3, #0]
    }
  }
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	4618      	mov	r0, r3
 8007a28:	3710      	adds	r7, #16
 8007a2a:	46bd      	mov	sp, r7
 8007a2c:	bd80      	pop	{r7, pc}

08007a2e <_ZN6tflite19ScopedMicroProfilerD1Ev>:

  ~ScopedMicroProfiler() {
 8007a2e:	b580      	push	{r7, lr}
 8007a30:	b082      	sub	sp, #8
 8007a32:	af00      	add	r7, sp, #0
 8007a34:	6078      	str	r0, [r7, #4]
    if (profiler_ != nullptr) {
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	685b      	ldr	r3, [r3, #4]
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	d00a      	beq.n	8007a54 <_ZN6tflite19ScopedMicroProfilerD1Ev+0x26>
      profiler_->EndEvent(event_handle_);
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	6858      	ldr	r0, [r3, #4]
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	685b      	ldr	r3, [r3, #4]
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	330c      	adds	r3, #12
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	687a      	ldr	r2, [r7, #4]
 8007a4e:	6812      	ldr	r2, [r2, #0]
 8007a50:	4611      	mov	r1, r2
 8007a52:	4798      	blx	r3
    }
  }
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	4618      	mov	r0, r3
 8007a58:	3708      	adds	r7, #8
 8007a5a:	46bd      	mov	sp, r7
 8007a5c:	bd80      	pop	{r7, pc}

08007a5e <_ZN6tflite12_GLOBAL__N_122OpNameFromRegistrationEPK18TfLiteRegistration>:

namespace tflite {
namespace {

#ifndef TF_LITE_STRIP_ERROR_STRINGS
const char* OpNameFromRegistration(const TfLiteRegistration* registration) {
 8007a5e:	b580      	push	{r7, lr}
 8007a60:	b082      	sub	sp, #8
 8007a62:	af00      	add	r7, sp, #0
 8007a64:	6078      	str	r0, [r7, #4]
  if (registration->builtin_code == BuiltinOperator_CUSTOM) {
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	695b      	ldr	r3, [r3, #20]
 8007a6a:	2b20      	cmp	r3, #32
 8007a6c:	d102      	bne.n	8007a74 <_ZN6tflite12_GLOBAL__N_122OpNameFromRegistrationEPK18TfLiteRegistration+0x16>
    return registration->custom_name;
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	699b      	ldr	r3, [r3, #24]
 8007a72:	e007      	b.n	8007a84 <_ZN6tflite12_GLOBAL__N_122OpNameFromRegistrationEPK18TfLiteRegistration+0x26>
  } else {
    return EnumNameBuiltinOperator(BuiltinOperator(registration->builtin_code));
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	695b      	ldr	r3, [r3, #20]
 8007a78:	b2db      	uxtb	r3, r3
 8007a7a:	4618      	mov	r0, r3
 8007a7c:	f7fc feca 	bl	8004814 <_ZN6tflite23EnumNameBuiltinOperatorENS_15BuiltinOperatorE>
 8007a80:	4603      	mov	r3, r0
 8007a82:	bf00      	nop
  }
}
 8007a84:	4618      	mov	r0, r3
 8007a86:	3708      	adds	r7, #8
 8007a88:	46bd      	mov	sp, r7
 8007a8a:	bd80      	pop	{r7, pc}

08007a8c <_ZN6tflite10MicroGraphC1EP13TfLiteContextPKNS_5ModelEPNS_14MicroAllocatorE>:
#endif  // !defined(TF_LITE_STRIP_ERROR_STRINGS)

}  // namespace

MicroGraph::MicroGraph(TfLiteContext* context, const Model* model,
 8007a8c:	b580      	push	{r7, lr}
 8007a8e:	b084      	sub	sp, #16
 8007a90:	af00      	add	r7, sp, #0
 8007a92:	60f8      	str	r0, [r7, #12]
 8007a94:	60b9      	str	r1, [r7, #8]
 8007a96:	607a      	str	r2, [r7, #4]
 8007a98:	603b      	str	r3, [r7, #0]
                       MicroAllocator* allocator)
    : context_(context),
      model_(model),
      allocator_(allocator),
      current_subgraph_index_(0) {
 8007a9a:	4a10      	ldr	r2, [pc, #64]	; (8007adc <_ZN6tflite10MicroGraphC1EP13TfLiteContextPKNS_5ModelEPNS_14MicroAllocatorE+0x50>)
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	601a      	str	r2, [r3, #0]
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	68ba      	ldr	r2, [r7, #8]
 8007aa4:	605a      	str	r2, [r3, #4]
 8007aa6:	68fb      	ldr	r3, [r7, #12]
 8007aa8:	687a      	ldr	r2, [r7, #4]
 8007aaa:	609a      	str	r2, [r3, #8]
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	683a      	ldr	r2, [r7, #0]
 8007ab0:	60da      	str	r2, [r3, #12]
 8007ab2:	68fb      	ldr	r3, [r7, #12]
 8007ab4:	2200      	movs	r2, #0
 8007ab6:	611a      	str	r2, [r3, #16]
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	2200      	movs	r2, #0
 8007abc:	615a      	str	r2, [r3, #20]
  if (model != nullptr) {
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	d005      	beq.n	8007ad0 <_ZN6tflite10MicroGraphC1EP13TfLiteContextPKNS_5ModelEPNS_14MicroAllocatorE+0x44>
    subgraphs_ = model->subgraphs();
 8007ac4:	6878      	ldr	r0, [r7, #4]
 8007ac6:	f7fd fbd3 	bl	8005270 <_ZNK6tflite5Model9subgraphsEv>
 8007aca:	4602      	mov	r2, r0
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	619a      	str	r2, [r3, #24]
  }
}
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	4618      	mov	r0, r3
 8007ad4:	3710      	adds	r7, #16
 8007ad6:	46bd      	mov	sp, r7
 8007ad8:	bd80      	pop	{r7, pc}
 8007ada:	bf00      	nop
 8007adc:	08021b68 	.word	0x08021b68

08007ae0 <_ZN6tflite10MicroGraphD1Ev>:

MicroGraph::~MicroGraph() {}
 8007ae0:	b480      	push	{r7}
 8007ae2:	b083      	sub	sp, #12
 8007ae4:	af00      	add	r7, sp, #0
 8007ae6:	6078      	str	r0, [r7, #4]
 8007ae8:	4a04      	ldr	r2, [pc, #16]	; (8007afc <_ZN6tflite10MicroGraphD1Ev+0x1c>)
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	601a      	str	r2, [r3, #0]
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	4618      	mov	r0, r3
 8007af2:	370c      	adds	r7, #12
 8007af4:	46bd      	mov	sp, r7
 8007af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007afa:	4770      	bx	lr
 8007afc:	08021b68 	.word	0x08021b68

08007b00 <_ZN6tflite10MicroGraphD0Ev>:
 8007b00:	b580      	push	{r7, lr}
 8007b02:	b082      	sub	sp, #8
 8007b04:	af00      	add	r7, sp, #0
 8007b06:	6078      	str	r0, [r7, #4]
 8007b08:	6878      	ldr	r0, [r7, #4]
 8007b0a:	f7ff ffe9 	bl	8007ae0 <_ZN6tflite10MicroGraphD1Ev>
 8007b0e:	211c      	movs	r1, #28
 8007b10:	6878      	ldr	r0, [r7, #4]
 8007b12:	f003 f9cc 	bl	800aeae <_ZdlPvj>
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	4618      	mov	r0, r3
 8007b1a:	3708      	adds	r7, #8
 8007b1c:	46bd      	mov	sp, r7
 8007b1e:	bd80      	pop	{r7, pc}

08007b20 <_ZN6tflite10MicroGraph13InitSubgraphsEv>:

TfLiteStatus MicroGraph::InitSubgraphs() {
 8007b20:	b580      	push	{r7, lr}
 8007b22:	b08a      	sub	sp, #40	; 0x28
 8007b24:	af00      	add	r7, sp, #0
 8007b26:	6078      	str	r0, [r7, #4]
  int previous_subgraph_idx = current_subgraph_index_;
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	695b      	ldr	r3, [r3, #20]
 8007b2c:	617b      	str	r3, [r7, #20]

  for (size_t subgraph_idx = 0; subgraph_idx < subgraphs_->size();
 8007b2e:	2300      	movs	r3, #0
 8007b30:	627b      	str	r3, [r7, #36]	; 0x24
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	699b      	ldr	r3, [r3, #24]
 8007b36:	4618      	mov	r0, r3
 8007b38:	f7fd fc0a 	bl	8005350 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE4sizeEv>
 8007b3c:	4602      	mov	r2, r0
 8007b3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b40:	4293      	cmp	r3, r2
 8007b42:	bf34      	ite	cc
 8007b44:	2301      	movcc	r3, #1
 8007b46:	2300      	movcs	r3, #0
 8007b48:	b2db      	uxtb	r3, r3
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	d04f      	beq.n	8007bee <_ZN6tflite10MicroGraph13InitSubgraphsEv+0xce>
       subgraph_idx++) {
    current_subgraph_index_ = subgraph_idx;
 8007b4e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	615a      	str	r2, [r3, #20]
    uint32_t operators_size = NumSubgraphOperators(model_, subgraph_idx);
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	689b      	ldr	r3, [r3, #8]
 8007b58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007b5a:	4611      	mov	r1, r2
 8007b5c:	4618      	mov	r0, r3
 8007b5e:	f7fd fbb2 	bl	80052c6 <_ZN6tflite20NumSubgraphOperatorsEPKNS_5ModelEi>
 8007b62:	6138      	str	r0, [r7, #16]
    for (size_t i = 0; i < operators_size; ++i) {
 8007b64:	2300      	movs	r3, #0
 8007b66:	623b      	str	r3, [r7, #32]
 8007b68:	6a3a      	ldr	r2, [r7, #32]
 8007b6a:	693b      	ldr	r3, [r7, #16]
 8007b6c:	429a      	cmp	r2, r3
 8007b6e:	d23a      	bcs.n	8007be6 <_ZN6tflite10MicroGraph13InitSubgraphsEv+0xc6>
      TfLiteNode* node =
          &(subgraph_allocations_[subgraph_idx].node_and_registrations[i].node);
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	691a      	ldr	r2, [r3, #16]
 8007b74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b76:	00db      	lsls	r3, r3, #3
 8007b78:	4413      	add	r3, r2
 8007b7a:	681a      	ldr	r2, [r3, #0]
 8007b7c:	6a3b      	ldr	r3, [r7, #32]
 8007b7e:	212c      	movs	r1, #44	; 0x2c
 8007b80:	fb01 f303 	mul.w	r3, r1, r3
 8007b84:	4413      	add	r3, r2
      TfLiteNode* node =
 8007b86:	60fb      	str	r3, [r7, #12]
      const TfLiteRegistration* registration =
          subgraph_allocations_[subgraph_idx]
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	691a      	ldr	r2, [r3, #16]
 8007b8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b8e:	00db      	lsls	r3, r3, #3
 8007b90:	4413      	add	r3, r2
              .node_and_registrations[i]
 8007b92:	681a      	ldr	r2, [r3, #0]
 8007b94:	6a3b      	ldr	r3, [r7, #32]
 8007b96:	212c      	movs	r1, #44	; 0x2c
 8007b98:	fb01 f303 	mul.w	r3, r1, r3
 8007b9c:	4413      	add	r3, r2
      const TfLiteRegistration* registration =
 8007b9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ba0:	60bb      	str	r3, [r7, #8]
              .registration;
      size_t init_data_size;
      const char* init_data;
      if (registration->builtin_code == BuiltinOperator_CUSTOM) {
 8007ba2:	68bb      	ldr	r3, [r7, #8]
 8007ba4:	695b      	ldr	r3, [r3, #20]
 8007ba6:	2b20      	cmp	r3, #32
 8007ba8:	d106      	bne.n	8007bb8 <_ZN6tflite10MicroGraph13InitSubgraphsEv+0x98>
        init_data = reinterpret_cast<const char*>(node->custom_initial_data);
 8007baa:	68fb      	ldr	r3, [r7, #12]
 8007bac:	699b      	ldr	r3, [r3, #24]
 8007bae:	61bb      	str	r3, [r7, #24]
        init_data_size = node->custom_initial_data_size;
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	69db      	ldr	r3, [r3, #28]
 8007bb4:	61fb      	str	r3, [r7, #28]
 8007bb6:	e004      	b.n	8007bc2 <_ZN6tflite10MicroGraph13InitSubgraphsEv+0xa2>
      } else {
        init_data = reinterpret_cast<const char*>(node->builtin_data);
 8007bb8:	68fb      	ldr	r3, [r7, #12]
 8007bba:	695b      	ldr	r3, [r3, #20]
 8007bbc:	61bb      	str	r3, [r7, #24]
        init_data_size = 0;
 8007bbe:	2300      	movs	r3, #0
 8007bc0:	61fb      	str	r3, [r7, #28]
      }
      if (registration->init) {
 8007bc2:	68bb      	ldr	r3, [r7, #8]
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	d009      	beq.n	8007bde <_ZN6tflite10MicroGraph13InitSubgraphsEv+0xbe>
        node->user_data =
            registration->init(context_, init_data, init_data_size);
 8007bca:	68bb      	ldr	r3, [r7, #8]
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	687a      	ldr	r2, [r7, #4]
 8007bd0:	6850      	ldr	r0, [r2, #4]
 8007bd2:	69fa      	ldr	r2, [r7, #28]
 8007bd4:	69b9      	ldr	r1, [r7, #24]
 8007bd6:	4798      	blx	r3
 8007bd8:	4602      	mov	r2, r0
        node->user_data =
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	611a      	str	r2, [r3, #16]
    for (size_t i = 0; i < operators_size; ++i) {
 8007bde:	6a3b      	ldr	r3, [r7, #32]
 8007be0:	3301      	adds	r3, #1
 8007be2:	623b      	str	r3, [r7, #32]
 8007be4:	e7c0      	b.n	8007b68 <_ZN6tflite10MicroGraph13InitSubgraphsEv+0x48>
  for (size_t subgraph_idx = 0; subgraph_idx < subgraphs_->size();
 8007be6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007be8:	3301      	adds	r3, #1
 8007bea:	627b      	str	r3, [r7, #36]	; 0x24
 8007bec:	e7a1      	b.n	8007b32 <_ZN6tflite10MicroGraph13InitSubgraphsEv+0x12>
      }
    }
  }
  current_subgraph_index_ = previous_subgraph_idx;
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	697a      	ldr	r2, [r7, #20]
 8007bf2:	615a      	str	r2, [r3, #20]

  return kTfLiteOk;
 8007bf4:	2300      	movs	r3, #0
}
 8007bf6:	4618      	mov	r0, r3
 8007bf8:	3728      	adds	r7, #40	; 0x28
 8007bfa:	46bd      	mov	sp, r7
 8007bfc:	bd80      	pop	{r7, pc}
	...

08007c00 <_ZN6tflite10MicroGraph16PrepareSubgraphsEv>:

TfLiteStatus MicroGraph::PrepareSubgraphs() {
 8007c00:	b580      	push	{r7, lr}
 8007c02:	b08a      	sub	sp, #40	; 0x28
 8007c04:	af00      	add	r7, sp, #0
 8007c06:	6078      	str	r0, [r7, #4]
  int previous_subgraph_idx = current_subgraph_index_;
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	695b      	ldr	r3, [r3, #20]
 8007c0c:	61fb      	str	r3, [r7, #28]

  for (size_t subgraph_idx = 0; subgraph_idx < subgraphs_->size();
 8007c0e:	2300      	movs	r3, #0
 8007c10:	627b      	str	r3, [r7, #36]	; 0x24
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	699b      	ldr	r3, [r3, #24]
 8007c16:	4618      	mov	r0, r3
 8007c18:	f7fd fb9a 	bl	8005350 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE4sizeEv>
 8007c1c:	4602      	mov	r2, r0
 8007c1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c20:	4293      	cmp	r3, r2
 8007c22:	bf34      	ite	cc
 8007c24:	2301      	movcc	r3, #1
 8007c26:	2300      	movcs	r3, #0
 8007c28:	b2db      	uxtb	r3, r3
 8007c2a:	2b00      	cmp	r3, #0
 8007c2c:	d053      	beq.n	8007cd6 <_ZN6tflite10MicroGraph16PrepareSubgraphsEv+0xd6>
       subgraph_idx++) {
    current_subgraph_index_ = subgraph_idx;
 8007c2e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	615a      	str	r2, [r3, #20]
    uint32_t operators_size = NumSubgraphOperators(model_, subgraph_idx);
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	689b      	ldr	r3, [r3, #8]
 8007c38:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007c3a:	4611      	mov	r1, r2
 8007c3c:	4618      	mov	r0, r3
 8007c3e:	f7fd fb42 	bl	80052c6 <_ZN6tflite20NumSubgraphOperatorsEPKNS_5ModelEi>
 8007c42:	61b8      	str	r0, [r7, #24]
    for (size_t i = 0; i < operators_size; ++i) {
 8007c44:	2300      	movs	r3, #0
 8007c46:	623b      	str	r3, [r7, #32]
 8007c48:	6a3a      	ldr	r2, [r7, #32]
 8007c4a:	69bb      	ldr	r3, [r7, #24]
 8007c4c:	429a      	cmp	r2, r3
 8007c4e:	d23e      	bcs.n	8007cce <_ZN6tflite10MicroGraph16PrepareSubgraphsEv+0xce>
      TfLiteNode* node =
          &(subgraph_allocations_[subgraph_idx].node_and_registrations[i].node);
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	691a      	ldr	r2, [r3, #16]
 8007c54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c56:	00db      	lsls	r3, r3, #3
 8007c58:	4413      	add	r3, r2
 8007c5a:	681a      	ldr	r2, [r3, #0]
 8007c5c:	6a3b      	ldr	r3, [r7, #32]
 8007c5e:	212c      	movs	r1, #44	; 0x2c
 8007c60:	fb01 f303 	mul.w	r3, r1, r3
 8007c64:	4413      	add	r3, r2
      TfLiteNode* node =
 8007c66:	617b      	str	r3, [r7, #20]
      const TfLiteRegistration* registration =
          subgraph_allocations_[subgraph_idx]
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	691a      	ldr	r2, [r3, #16]
 8007c6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c6e:	00db      	lsls	r3, r3, #3
 8007c70:	4413      	add	r3, r2
              .node_and_registrations[i]
 8007c72:	681a      	ldr	r2, [r3, #0]
 8007c74:	6a3b      	ldr	r3, [r7, #32]
 8007c76:	212c      	movs	r1, #44	; 0x2c
 8007c78:	fb01 f303 	mul.w	r3, r1, r3
 8007c7c:	4413      	add	r3, r2
      const TfLiteRegistration* registration =
 8007c7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c80:	613b      	str	r3, [r7, #16]
              .registration;
      if (registration->prepare != nullptr) {
 8007c82:	693b      	ldr	r3, [r7, #16]
 8007c84:	689b      	ldr	r3, [r3, #8]
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d016      	beq.n	8007cb8 <_ZN6tflite10MicroGraph16PrepareSubgraphsEv+0xb8>
        TfLiteStatus prepare_status = registration->prepare(context_, node);
 8007c8a:	693b      	ldr	r3, [r7, #16]
 8007c8c:	689b      	ldr	r3, [r3, #8]
 8007c8e:	687a      	ldr	r2, [r7, #4]
 8007c90:	6852      	ldr	r2, [r2, #4]
 8007c92:	6979      	ldr	r1, [r7, #20]
 8007c94:	4610      	mov	r0, r2
 8007c96:	4798      	blx	r3
 8007c98:	4603      	mov	r3, r0
 8007c9a:	73fb      	strb	r3, [r7, #15]
        if (prepare_status != kTfLiteOk) {
 8007c9c:	7bfb      	ldrb	r3, [r7, #15]
 8007c9e:	2b00      	cmp	r3, #0
 8007ca0:	d00a      	beq.n	8007cb8 <_ZN6tflite10MicroGraph16PrepareSubgraphsEv+0xb8>
          MicroPrintf("Node %s (number %df) failed to prepare with status %d",
 8007ca2:	6938      	ldr	r0, [r7, #16]
 8007ca4:	f7ff fedb 	bl	8007a5e <_ZN6tflite12_GLOBAL__N_122OpNameFromRegistrationEPK18TfLiteRegistration>
 8007ca8:	4601      	mov	r1, r0
 8007caa:	7bfb      	ldrb	r3, [r7, #15]
 8007cac:	6a3a      	ldr	r2, [r7, #32]
 8007cae:	480e      	ldr	r0, [pc, #56]	; (8007ce8 <_ZN6tflite10MicroGraph16PrepareSubgraphsEv+0xe8>)
 8007cb0:	f7ff fe7a 	bl	80079a8 <_Z11MicroPrintfPKcz>
                      OpNameFromRegistration(registration), i, prepare_status);
          return kTfLiteError;
 8007cb4:	2301      	movs	r3, #1
 8007cb6:	e012      	b.n	8007cde <_ZN6tflite10MicroGraph16PrepareSubgraphsEv+0xde>
        }
      }
      allocator_->FinishPrepareNodeAllocations(/*node_id=*/i);
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	68db      	ldr	r3, [r3, #12]
 8007cbc:	6a3a      	ldr	r2, [r7, #32]
 8007cbe:	4611      	mov	r1, r2
 8007cc0:	4618      	mov	r0, r3
 8007cc2:	f7fe fdf1 	bl	80068a8 <_ZN6tflite14MicroAllocator28FinishPrepareNodeAllocationsEi>
    for (size_t i = 0; i < operators_size; ++i) {
 8007cc6:	6a3b      	ldr	r3, [r7, #32]
 8007cc8:	3301      	adds	r3, #1
 8007cca:	623b      	str	r3, [r7, #32]
 8007ccc:	e7bc      	b.n	8007c48 <_ZN6tflite10MicroGraph16PrepareSubgraphsEv+0x48>
  for (size_t subgraph_idx = 0; subgraph_idx < subgraphs_->size();
 8007cce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cd0:	3301      	adds	r3, #1
 8007cd2:	627b      	str	r3, [r7, #36]	; 0x24
 8007cd4:	e79d      	b.n	8007c12 <_ZN6tflite10MicroGraph16PrepareSubgraphsEv+0x12>
    }
  }
  current_subgraph_index_ = previous_subgraph_idx;
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	69fa      	ldr	r2, [r7, #28]
 8007cda:	615a      	str	r2, [r3, #20]

  return kTfLiteOk;
 8007cdc:	2300      	movs	r3, #0
}
 8007cde:	4618      	mov	r0, r3
 8007ce0:	3728      	adds	r7, #40	; 0x28
 8007ce2:	46bd      	mov	sp, r7
 8007ce4:	bd80      	pop	{r7, pc}
 8007ce6:	bf00      	nop
 8007ce8:	0801053c 	.word	0x0801053c

08007cec <_ZN6tflite10MicroGraph13FreeSubgraphsEv>:

TfLiteStatus MicroGraph::FreeSubgraphs() {
 8007cec:	b580      	push	{r7, lr}
 8007cee:	b088      	sub	sp, #32
 8007cf0:	af00      	add	r7, sp, #0
 8007cf2:	6078      	str	r0, [r7, #4]
  int previous_subgraph_idx = current_subgraph_index_;
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	695b      	ldr	r3, [r3, #20]
 8007cf8:	617b      	str	r3, [r7, #20]

  for (size_t subgraph_idx = 0; subgraph_idx < subgraphs_->size();
 8007cfa:	2300      	movs	r3, #0
 8007cfc:	61fb      	str	r3, [r7, #28]
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	699b      	ldr	r3, [r3, #24]
 8007d02:	4618      	mov	r0, r3
 8007d04:	f7fd fb24 	bl	8005350 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE4sizeEv>
 8007d08:	4602      	mov	r2, r0
 8007d0a:	69fb      	ldr	r3, [r7, #28]
 8007d0c:	4293      	cmp	r3, r2
 8007d0e:	bf34      	ite	cc
 8007d10:	2301      	movcc	r3, #1
 8007d12:	2300      	movcs	r3, #0
 8007d14:	b2db      	uxtb	r3, r3
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	d040      	beq.n	8007d9c <_ZN6tflite10MicroGraph13FreeSubgraphsEv+0xb0>
       subgraph_idx++) {
    current_subgraph_index_ = subgraph_idx;
 8007d1a:	69fa      	ldr	r2, [r7, #28]
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	615a      	str	r2, [r3, #20]
    uint32_t operators_size = NumSubgraphOperators(model_, subgraph_idx);
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	689b      	ldr	r3, [r3, #8]
 8007d24:	69fa      	ldr	r2, [r7, #28]
 8007d26:	4611      	mov	r1, r2
 8007d28:	4618      	mov	r0, r3
 8007d2a:	f7fd facc 	bl	80052c6 <_ZN6tflite20NumSubgraphOperatorsEPKNS_5ModelEi>
 8007d2e:	6138      	str	r0, [r7, #16]
    for (size_t i = 0; i < operators_size; ++i) {
 8007d30:	2300      	movs	r3, #0
 8007d32:	61bb      	str	r3, [r7, #24]
 8007d34:	69ba      	ldr	r2, [r7, #24]
 8007d36:	693b      	ldr	r3, [r7, #16]
 8007d38:	429a      	cmp	r2, r3
 8007d3a:	d22b      	bcs.n	8007d94 <_ZN6tflite10MicroGraph13FreeSubgraphsEv+0xa8>
      TfLiteNode* node =
          &(subgraph_allocations_[subgraph_idx].node_and_registrations[i].node);
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	691a      	ldr	r2, [r3, #16]
 8007d40:	69fb      	ldr	r3, [r7, #28]
 8007d42:	00db      	lsls	r3, r3, #3
 8007d44:	4413      	add	r3, r2
 8007d46:	681a      	ldr	r2, [r3, #0]
 8007d48:	69bb      	ldr	r3, [r7, #24]
 8007d4a:	212c      	movs	r1, #44	; 0x2c
 8007d4c:	fb01 f303 	mul.w	r3, r1, r3
 8007d50:	4413      	add	r3, r2
      TfLiteNode* node =
 8007d52:	60fb      	str	r3, [r7, #12]
      const TfLiteRegistration* registration =
          subgraph_allocations_[subgraph_idx]
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	691a      	ldr	r2, [r3, #16]
 8007d58:	69fb      	ldr	r3, [r7, #28]
 8007d5a:	00db      	lsls	r3, r3, #3
 8007d5c:	4413      	add	r3, r2
              .node_and_registrations[i]
 8007d5e:	681a      	ldr	r2, [r3, #0]
 8007d60:	69bb      	ldr	r3, [r7, #24]
 8007d62:	212c      	movs	r1, #44	; 0x2c
 8007d64:	fb01 f303 	mul.w	r3, r1, r3
 8007d68:	4413      	add	r3, r2
      const TfLiteRegistration* registration =
 8007d6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d6c:	60bb      	str	r3, [r7, #8]
              .registration;
      // registration is allocated outside the interpreter, so double check to
      // make sure it's not nullptr;
      if (registration != nullptr && registration->free != nullptr) {
 8007d6e:	68bb      	ldr	r3, [r7, #8]
 8007d70:	2b00      	cmp	r3, #0
 8007d72:	d00b      	beq.n	8007d8c <_ZN6tflite10MicroGraph13FreeSubgraphsEv+0xa0>
 8007d74:	68bb      	ldr	r3, [r7, #8]
 8007d76:	685b      	ldr	r3, [r3, #4]
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	d007      	beq.n	8007d8c <_ZN6tflite10MicroGraph13FreeSubgraphsEv+0xa0>
        registration->free(context_, node->user_data);
 8007d7c:	68bb      	ldr	r3, [r7, #8]
 8007d7e:	685b      	ldr	r3, [r3, #4]
 8007d80:	687a      	ldr	r2, [r7, #4]
 8007d82:	6850      	ldr	r0, [r2, #4]
 8007d84:	68fa      	ldr	r2, [r7, #12]
 8007d86:	6912      	ldr	r2, [r2, #16]
 8007d88:	4611      	mov	r1, r2
 8007d8a:	4798      	blx	r3
    for (size_t i = 0; i < operators_size; ++i) {
 8007d8c:	69bb      	ldr	r3, [r7, #24]
 8007d8e:	3301      	adds	r3, #1
 8007d90:	61bb      	str	r3, [r7, #24]
 8007d92:	e7cf      	b.n	8007d34 <_ZN6tflite10MicroGraph13FreeSubgraphsEv+0x48>
  for (size_t subgraph_idx = 0; subgraph_idx < subgraphs_->size();
 8007d94:	69fb      	ldr	r3, [r7, #28]
 8007d96:	3301      	adds	r3, #1
 8007d98:	61fb      	str	r3, [r7, #28]
 8007d9a:	e7b0      	b.n	8007cfe <_ZN6tflite10MicroGraph13FreeSubgraphsEv+0x12>
      }
    }
  }
  current_subgraph_index_ = previous_subgraph_idx;
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	697a      	ldr	r2, [r7, #20]
 8007da0:	615a      	str	r2, [r3, #20]

  return kTfLiteOk;
 8007da2:	2300      	movs	r3, #0
}
 8007da4:	4618      	mov	r0, r3
 8007da6:	3720      	adds	r7, #32
 8007da8:	46bd      	mov	sp, r7
 8007daa:	bd80      	pop	{r7, pc}

08007dac <_ZN6tflite10MicroGraph14InvokeSubgraphEi>:

TfLiteStatus MicroGraph::InvokeSubgraph(int subgraph_idx) {
 8007dac:	b5b0      	push	{r4, r5, r7, lr}
 8007dae:	b08a      	sub	sp, #40	; 0x28
 8007db0:	af00      	add	r7, sp, #0
 8007db2:	6078      	str	r0, [r7, #4]
 8007db4:	6039      	str	r1, [r7, #0]
 8007db6:	2400      	movs	r4, #0
  int previous_subgraph_idx = current_subgraph_index_;
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	695b      	ldr	r3, [r3, #20]
 8007dbc:	623b      	str	r3, [r7, #32]
  current_subgraph_index_ = subgraph_idx;
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	683a      	ldr	r2, [r7, #0]
 8007dc2:	615a      	str	r2, [r3, #20]

  if (static_cast<size_t>(subgraph_idx) >= subgraphs_->size()) {
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	699b      	ldr	r3, [r3, #24]
 8007dc8:	4618      	mov	r0, r3
 8007dca:	f7fd fac1 	bl	8005350 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE4sizeEv>
 8007dce:	4602      	mov	r2, r0
 8007dd0:	683b      	ldr	r3, [r7, #0]
 8007dd2:	429a      	cmp	r2, r3
 8007dd4:	bf94      	ite	ls
 8007dd6:	2301      	movls	r3, #1
 8007dd8:	2300      	movhi	r3, #0
 8007dda:	b2db      	uxtb	r3, r3
 8007ddc:	2b00      	cmp	r3, #0
 8007dde:	d00c      	beq.n	8007dfa <_ZN6tflite10MicroGraph14InvokeSubgraphEi+0x4e>
    MicroPrintf("Accessing subgraph %d but only %d subgraphs found",
                subgraph_idx, subgraphs_->size());
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	699b      	ldr	r3, [r3, #24]
    MicroPrintf("Accessing subgraph %d but only %d subgraphs found",
 8007de4:	4618      	mov	r0, r3
 8007de6:	f7fd fab3 	bl	8005350 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE4sizeEv>
 8007dea:	4603      	mov	r3, r0
 8007dec:	461a      	mov	r2, r3
 8007dee:	6839      	ldr	r1, [r7, #0]
 8007df0:	483c      	ldr	r0, [pc, #240]	; (8007ee4 <_ZN6tflite10MicroGraph14InvokeSubgraphEi+0x138>)
 8007df2:	f7ff fdd9 	bl	80079a8 <_Z11MicroPrintfPKcz>
    return kTfLiteError;
 8007df6:	2401      	movs	r4, #1
 8007df8:	e06e      	b.n	8007ed8 <_ZN6tflite10MicroGraph14InvokeSubgraphEi+0x12c>
  }
  uint32_t operators_size = NumSubgraphOperators(model_, subgraph_idx);
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	689b      	ldr	r3, [r3, #8]
 8007dfe:	6839      	ldr	r1, [r7, #0]
 8007e00:	4618      	mov	r0, r3
 8007e02:	f7fd fa60 	bl	80052c6 <_ZN6tflite20NumSubgraphOperatorsEPKNS_5ModelEi>
 8007e06:	61f8      	str	r0, [r7, #28]
  for (size_t i = 0; i < operators_size; ++i) {
 8007e08:	2300      	movs	r3, #0
 8007e0a:	627b      	str	r3, [r7, #36]	; 0x24
 8007e0c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007e0e:	69fb      	ldr	r3, [r7, #28]
 8007e10:	429a      	cmp	r2, r3
 8007e12:	d25d      	bcs.n	8007ed0 <_ZN6tflite10MicroGraph14InvokeSubgraphEi+0x124>
    TfLiteNode* node =
        &(subgraph_allocations_[subgraph_idx].node_and_registrations[i].node);
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	691a      	ldr	r2, [r3, #16]
 8007e18:	683b      	ldr	r3, [r7, #0]
 8007e1a:	00db      	lsls	r3, r3, #3
 8007e1c:	4413      	add	r3, r2
 8007e1e:	681a      	ldr	r2, [r3, #0]
 8007e20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e22:	212c      	movs	r1, #44	; 0x2c
 8007e24:	fb01 f303 	mul.w	r3, r1, r3
 8007e28:	4413      	add	r3, r2
    TfLiteNode* node =
 8007e2a:	61bb      	str	r3, [r7, #24]
    const TfLiteRegistration* registration = subgraph_allocations_[subgraph_idx]
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	691a      	ldr	r2, [r3, #16]
 8007e30:	683b      	ldr	r3, [r7, #0]
 8007e32:	00db      	lsls	r3, r3, #3
 8007e34:	4413      	add	r3, r2
                                                 .node_and_registrations[i]
 8007e36:	681a      	ldr	r2, [r3, #0]
 8007e38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e3a:	212c      	movs	r1, #44	; 0x2c
 8007e3c:	fb01 f303 	mul.w	r3, r1, r3
 8007e40:	4413      	add	r3, r2
    const TfLiteRegistration* registration = subgraph_allocations_[subgraph_idx]
 8007e42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e44:	617b      	str	r3, [r7, #20]
// -DTF_LITE_STRIP_ERROR_STRINGS) because the function OpNameFromRegistration is
// only defined for builds with the error strings.
#if !defined(TF_LITE_STRIP_ERROR_STRINGS)
    ScopedMicroProfiler scoped_profiler(
        OpNameFromRegistration(registration),
        reinterpret_cast<MicroProfiler*>(context_->profiler));
 8007e46:	6978      	ldr	r0, [r7, #20]
 8007e48:	f7ff fe09 	bl	8007a5e <_ZN6tflite12_GLOBAL__N_122OpNameFromRegistrationEPK18TfLiteRegistration>
 8007e4c:	4601      	mov	r1, r0
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	685b      	ldr	r3, [r3, #4]
 8007e52:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007e54:	f107 0308 	add.w	r3, r7, #8
 8007e58:	4618      	mov	r0, r3
 8007e5a:	f7ff fdc6 	bl	80079ea <_ZN6tflite19ScopedMicroProfilerC1EPKcPNS_13MicroProfilerE>
#endif

    TFLITE_DCHECK(registration->invoke);
 8007e5e:	697b      	ldr	r3, [r7, #20]
 8007e60:	68db      	ldr	r3, [r3, #12]
 8007e62:	2b00      	cmp	r3, #0
 8007e64:	d101      	bne.n	8007e6a <_ZN6tflite10MicroGraph14InvokeSubgraphEi+0xbe>
 8007e66:	f003 f909 	bl	800b07c <abort>
    TfLiteStatus invoke_status = registration->invoke(context_, node);
 8007e6a:	697b      	ldr	r3, [r7, #20]
 8007e6c:	68db      	ldr	r3, [r3, #12]
 8007e6e:	687a      	ldr	r2, [r7, #4]
 8007e70:	6852      	ldr	r2, [r2, #4]
 8007e72:	69b9      	ldr	r1, [r7, #24]
 8007e74:	4610      	mov	r0, r2
 8007e76:	4798      	blx	r3
 8007e78:	4603      	mov	r3, r0
 8007e7a:	74fb      	strb	r3, [r7, #19]

    // All TfLiteTensor structs used in the kernel are allocated from temp
    // memory in the allocator. This creates a chain of allocations in the
    // temp section. The call below resets the chain of allocations to
    // prepare for the next call.
    allocator_->ResetTempAllocations();
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	68da      	ldr	r2, [r3, #12]
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	68db      	ldr	r3, [r3, #12]
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	3308      	adds	r3, #8
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	4610      	mov	r0, r2
 8007e8c:	4798      	blx	r3

    if (invoke_status == kTfLiteError) {
 8007e8e:	7cfb      	ldrb	r3, [r7, #19]
 8007e90:	2b01      	cmp	r3, #1
 8007e92:	d10b      	bne.n	8007eac <_ZN6tflite10MicroGraph14InvokeSubgraphEi+0x100>
      MicroPrintf("Node %s (number %d) failed to invoke with status %d",
 8007e94:	6978      	ldr	r0, [r7, #20]
 8007e96:	f7ff fde2 	bl	8007a5e <_ZN6tflite12_GLOBAL__N_122OpNameFromRegistrationEPK18TfLiteRegistration>
 8007e9a:	4601      	mov	r1, r0
 8007e9c:	7cfb      	ldrb	r3, [r7, #19]
 8007e9e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007ea0:	4811      	ldr	r0, [pc, #68]	; (8007ee8 <_ZN6tflite10MicroGraph14InvokeSubgraphEi+0x13c>)
 8007ea2:	f7ff fd81 	bl	80079a8 <_Z11MicroPrintfPKcz>
                  OpNameFromRegistration(registration), i, invoke_status);
      return kTfLiteError;
 8007ea6:	2401      	movs	r4, #1
 8007ea8:	2500      	movs	r5, #0
 8007eaa:	e006      	b.n	8007eba <_ZN6tflite10MicroGraph14InvokeSubgraphEi+0x10e>
    } else if (invoke_status != kTfLiteOk) {
 8007eac:	7cfb      	ldrb	r3, [r7, #19]
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	d002      	beq.n	8007eb8 <_ZN6tflite10MicroGraph14InvokeSubgraphEi+0x10c>
      return invoke_status;
 8007eb2:	7cfc      	ldrb	r4, [r7, #19]
 8007eb4:	2500      	movs	r5, #0
 8007eb6:	e000      	b.n	8007eba <_ZN6tflite10MicroGraph14InvokeSubgraphEi+0x10e>
        reinterpret_cast<MicroProfiler*>(context_->profiler));
 8007eb8:	2501      	movs	r5, #1
 8007eba:	f107 0308 	add.w	r3, r7, #8
 8007ebe:	4618      	mov	r0, r3
 8007ec0:	f7ff fdb5 	bl	8007a2e <_ZN6tflite19ScopedMicroProfilerD1Ev>
 8007ec4:	2d01      	cmp	r5, #1
 8007ec6:	d107      	bne.n	8007ed8 <_ZN6tflite10MicroGraph14InvokeSubgraphEi+0x12c>
  for (size_t i = 0; i < operators_size; ++i) {
 8007ec8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007eca:	3301      	adds	r3, #1
 8007ecc:	627b      	str	r3, [r7, #36]	; 0x24
 8007ece:	e79d      	b.n	8007e0c <_ZN6tflite10MicroGraph14InvokeSubgraphEi+0x60>
    }
  }
  current_subgraph_index_ = previous_subgraph_idx;
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	6a3a      	ldr	r2, [r7, #32]
 8007ed4:	615a      	str	r2, [r3, #20]
  return kTfLiteOk;
 8007ed6:	2400      	movs	r4, #0
 8007ed8:	4623      	mov	r3, r4
}
 8007eda:	4618      	mov	r0, r3
 8007edc:	3728      	adds	r7, #40	; 0x28
 8007ede:	46bd      	mov	sp, r7
 8007ee0:	bdb0      	pop	{r4, r5, r7, pc}
 8007ee2:	bf00      	nop
 8007ee4:	08010574 	.word	0x08010574
 8007ee8:	080105a8 	.word	0x080105a8

08007eec <_ZN6tflite10MicroGraph20ResetVariableTensorsEv>:

TfLiteStatus MicroGraph::ResetVariableTensors() {
 8007eec:	b580      	push	{r7, lr}
 8007eee:	b08a      	sub	sp, #40	; 0x28
 8007ef0:	af00      	add	r7, sp, #0
 8007ef2:	6078      	str	r0, [r7, #4]
  for (size_t subgraph_idx = 0; subgraph_idx < subgraphs_->size();
 8007ef4:	2300      	movs	r3, #0
 8007ef6:	627b      	str	r3, [r7, #36]	; 0x24
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	699b      	ldr	r3, [r3, #24]
 8007efc:	4618      	mov	r0, r3
 8007efe:	f7fd fa27 	bl	8005350 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE4sizeEv>
 8007f02:	4602      	mov	r2, r0
 8007f04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f06:	4293      	cmp	r3, r2
 8007f08:	bf34      	ite	cc
 8007f0a:	2301      	movcc	r3, #1
 8007f0c:	2300      	movcs	r3, #0
 8007f0e:	b2db      	uxtb	r3, r3
 8007f10:	2b00      	cmp	r3, #0
 8007f12:	d077      	beq.n	8008004 <_ZN6tflite10MicroGraph20ResetVariableTensorsEv+0x118>
       subgraph_idx++) {
    const SubGraph* subgraph = (*subgraphs_)[subgraph_idx];
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	699b      	ldr	r3, [r3, #24]
 8007f18:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007f1a:	4618      	mov	r0, r3
 8007f1c:	f7ff faf8 	bl	8007510 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEEixEm>
 8007f20:	61b8      	str	r0, [r7, #24]
    for (size_t i = 0; i < subgraph->tensors()->size(); ++i) {
 8007f22:	2300      	movs	r3, #0
 8007f24:	623b      	str	r3, [r7, #32]
 8007f26:	69b8      	ldr	r0, [r7, #24]
 8007f28:	f7fd fd45 	bl	80059b6 <_ZNK6tflite8SubGraph7tensorsEv>
 8007f2c:	4603      	mov	r3, r0
 8007f2e:	4618      	mov	r0, r3
 8007f30:	f7ff fa2c 	bl	800738c <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEE4sizeEv>
 8007f34:	4602      	mov	r2, r0
 8007f36:	6a3b      	ldr	r3, [r7, #32]
 8007f38:	4293      	cmp	r3, r2
 8007f3a:	bf34      	ite	cc
 8007f3c:	2301      	movcc	r3, #1
 8007f3e:	2300      	movcs	r3, #0
 8007f40:	b2db      	uxtb	r3, r3
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	d05a      	beq.n	8007ffc <_ZN6tflite10MicroGraph20ResetVariableTensorsEv+0x110>
      auto* tensor = subgraph->tensors()->Get(i);
 8007f46:	69b8      	ldr	r0, [r7, #24]
 8007f48:	f7fd fd35 	bl	80059b6 <_ZNK6tflite8SubGraph7tensorsEv>
 8007f4c:	4603      	mov	r3, r0
 8007f4e:	6a39      	ldr	r1, [r7, #32]
 8007f50:	4618      	mov	r0, r3
 8007f52:	f7ff fa29 	bl	80073a8 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEE3GetEm>
 8007f56:	6178      	str	r0, [r7, #20]
      if (tensor->is_variable()) {
 8007f58:	6978      	ldr	r0, [r7, #20]
 8007f5a:	f7fd fcfc 	bl	8005956 <_ZNK6tflite6Tensor11is_variableEv>
 8007f5e:	4603      	mov	r3, r0
 8007f60:	2b00      	cmp	r3, #0
 8007f62:	d047      	beq.n	8007ff4 <_ZN6tflite10MicroGraph20ResetVariableTensorsEv+0x108>
        size_t buffer_size;
        TF_LITE_ENSURE_STATUS(TfLiteEvalTensorByteLength(
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	691a      	ldr	r2, [r3, #16]
 8007f68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f6a:	00db      	lsls	r3, r3, #3
 8007f6c:	4413      	add	r3, r2
 8007f6e:	6859      	ldr	r1, [r3, #4]
 8007f70:	6a3a      	ldr	r2, [r7, #32]
 8007f72:	4613      	mov	r3, r2
 8007f74:	005b      	lsls	r3, r3, #1
 8007f76:	4413      	add	r3, r2
 8007f78:	009b      	lsls	r3, r3, #2
 8007f7a:	440b      	add	r3, r1
 8007f7c:	f107 020c 	add.w	r2, r7, #12
 8007f80:	4611      	mov	r1, r2
 8007f82:	4618      	mov	r0, r3
 8007f84:	f7fd fc53 	bl	800582e <_ZN6tflite26TfLiteEvalTensorByteLengthEPK16TfLiteEvalTensorPj>
 8007f88:	4603      	mov	r3, r0
 8007f8a:	74fb      	strb	r3, [r7, #19]
 8007f8c:	7cfb      	ldrb	r3, [r7, #19]
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	d001      	beq.n	8007f96 <_ZN6tflite10MicroGraph20ResetVariableTensorsEv+0xaa>
 8007f92:	7cfb      	ldrb	r3, [r7, #19]
 8007f94:	e037      	b.n	8008006 <_ZN6tflite10MicroGraph20ResetVariableTensorsEv+0x11a>
            &subgraph_allocations_[subgraph_idx].tensors[i], &buffer_size));

        int value = 0;
 8007f96:	2300      	movs	r3, #0
 8007f98:	61fb      	str	r3, [r7, #28]
        if (tensor->type() == tflite::TensorType_INT8) {
 8007f9a:	6978      	ldr	r0, [r7, #20]
 8007f9c:	f7fd fa88 	bl	80054b0 <_ZNK6tflite6Tensor4typeEv>
 8007fa0:	4603      	mov	r3, r0
 8007fa2:	2b09      	cmp	r3, #9
 8007fa4:	bf0c      	ite	eq
 8007fa6:	2301      	moveq	r3, #1
 8007fa8:	2300      	movne	r3, #0
 8007faa:	b2db      	uxtb	r3, r3
 8007fac:	2b00      	cmp	r3, #0
 8007fae:	d00f      	beq.n	8007fd0 <_ZN6tflite10MicroGraph20ResetVariableTensorsEv+0xe4>
          value = tensor->quantization()->zero_point()->Get(0);
 8007fb0:	6978      	ldr	r0, [r7, #20]
 8007fb2:	f7fd fcc2 	bl	800593a <_ZNK6tflite6Tensor12quantizationEv>
 8007fb6:	4603      	mov	r3, r0
 8007fb8:	4618      	mov	r0, r3
 8007fba:	f7fd fc92 	bl	80058e2 <_ZNK6tflite22QuantizationParameters10zero_pointEv>
 8007fbe:	4603      	mov	r3, r0
 8007fc0:	2100      	movs	r1, #0
 8007fc2:	4618      	mov	r0, r3
 8007fc4:	f7ff f9ba 	bl	800733c <_ZNK11flatbuffers6VectorIxE3GetEm>
 8007fc8:	4602      	mov	r2, r0
 8007fca:	460b      	mov	r3, r1
 8007fcc:	4613      	mov	r3, r2
 8007fce:	61fb      	str	r3, [r7, #28]
        }
        memset(subgraph_allocations_[subgraph_idx].tensors[i].data.raw, value,
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	691a      	ldr	r2, [r3, #16]
 8007fd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fd6:	00db      	lsls	r3, r3, #3
 8007fd8:	4413      	add	r3, r2
 8007fda:	6859      	ldr	r1, [r3, #4]
 8007fdc:	6a3a      	ldr	r2, [r7, #32]
 8007fde:	4613      	mov	r3, r2
 8007fe0:	005b      	lsls	r3, r3, #1
 8007fe2:	4413      	add	r3, r2
 8007fe4:	009b      	lsls	r3, r3, #2
 8007fe6:	440b      	add	r3, r1
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	68fa      	ldr	r2, [r7, #12]
 8007fec:	69f9      	ldr	r1, [r7, #28]
 8007fee:	4618      	mov	r0, r3
 8007ff0:	f003 faea 	bl	800b5c8 <memset>
    for (size_t i = 0; i < subgraph->tensors()->size(); ++i) {
 8007ff4:	6a3b      	ldr	r3, [r7, #32]
 8007ff6:	3301      	adds	r3, #1
 8007ff8:	623b      	str	r3, [r7, #32]
 8007ffa:	e794      	b.n	8007f26 <_ZN6tflite10MicroGraph20ResetVariableTensorsEv+0x3a>
  for (size_t subgraph_idx = 0; subgraph_idx < subgraphs_->size();
 8007ffc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ffe:	3301      	adds	r3, #1
 8008000:	627b      	str	r3, [r7, #36]	; 0x24
 8008002:	e779      	b.n	8007ef8 <_ZN6tflite10MicroGraph20ResetVariableTensorsEv+0xc>
               buffer_size);
      }
    }
  }

  return kTfLiteOk;
 8008004:	2300      	movs	r3, #0
}
 8008006:	4618      	mov	r0, r3
 8008008:	3728      	adds	r7, #40	; 0x28
 800800a:	46bd      	mov	sp, r7
 800800c:	bd80      	pop	{r7, pc}

0800800e <_ZN6tflite10MicroGraph12NumSubgraphsEv>:

int MicroGraph::NumSubgraphs() { return model_->subgraphs()->size(); }
 800800e:	b580      	push	{r7, lr}
 8008010:	b082      	sub	sp, #8
 8008012:	af00      	add	r7, sp, #0
 8008014:	6078      	str	r0, [r7, #4]
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	689b      	ldr	r3, [r3, #8]
 800801a:	4618      	mov	r0, r3
 800801c:	f7fd f928 	bl	8005270 <_ZNK6tflite5Model9subgraphsEv>
 8008020:	4603      	mov	r3, r0
 8008022:	4618      	mov	r0, r3
 8008024:	f7fd f994 	bl	8005350 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE4sizeEv>
 8008028:	4603      	mov	r3, r0
 800802a:	4618      	mov	r0, r3
 800802c:	3708      	adds	r7, #8
 800802e:	46bd      	mov	sp, r7
 8008030:	bd80      	pop	{r7, pc}

08008032 <_ZN6tflite10MicroGraph22SetSubgraphAllocationsEPNS_19SubgraphAllocationsE>:

void MicroGraph::SetSubgraphAllocations(
    SubgraphAllocations* subgraph_allocations) {
 8008032:	b480      	push	{r7}
 8008034:	b083      	sub	sp, #12
 8008036:	af00      	add	r7, sp, #0
 8008038:	6078      	str	r0, [r7, #4]
 800803a:	6039      	str	r1, [r7, #0]
  subgraph_allocations_ = subgraph_allocations;
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	683a      	ldr	r2, [r7, #0]
 8008040:	611a      	str	r2, [r3, #16]
}
 8008042:	bf00      	nop
 8008044:	370c      	adds	r7, #12
 8008046:	46bd      	mov	sp, r7
 8008048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800804c:	4770      	bx	lr

0800804e <_ZN6tflite10MicroGraph17NumSubgraphInputsEi>:

size_t MicroGraph::NumSubgraphInputs(int subgraph_idx) {
 800804e:	b580      	push	{r7, lr}
 8008050:	b082      	sub	sp, #8
 8008052:	af00      	add	r7, sp, #0
 8008054:	6078      	str	r0, [r7, #4]
 8008056:	6039      	str	r1, [r7, #0]
  return model_->subgraphs()->Get(subgraph_idx)->inputs()->size();
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	689b      	ldr	r3, [r3, #8]
 800805c:	4618      	mov	r0, r3
 800805e:	f7fd f907 	bl	8005270 <_ZNK6tflite5Model9subgraphsEv>
 8008062:	4602      	mov	r2, r0
 8008064:	683b      	ldr	r3, [r7, #0]
 8008066:	4619      	mov	r1, r3
 8008068:	4610      	mov	r0, r2
 800806a:	f7fd f97f 	bl	800536c <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE3GetEm>
 800806e:	4603      	mov	r3, r0
 8008070:	4618      	mov	r0, r3
 8008072:	f7fd fcae 	bl	80059d2 <_ZNK6tflite8SubGraph6inputsEv>
 8008076:	4603      	mov	r3, r0
 8008078:	4618      	mov	r0, r3
 800807a:	f7fc f8a4 	bl	80041c6 <_ZNK11flatbuffers6VectorIlE4sizeEv>
 800807e:	4603      	mov	r3, r0
}
 8008080:	4618      	mov	r0, r3
 8008082:	3708      	adds	r7, #8
 8008084:	46bd      	mov	sp, r7
 8008086:	bd80      	pop	{r7, pc}

08008088 <_ZN6tflite10MicroGraph16GetSubgraphInputEii>:

TfLiteEvalTensor* MicroGraph::GetSubgraphInput(int subgraph_idx,
                                               int input_idx) {
 8008088:	b580      	push	{r7, lr}
 800808a:	b086      	sub	sp, #24
 800808c:	af00      	add	r7, sp, #0
 800808e:	60f8      	str	r0, [r7, #12]
 8008090:	60b9      	str	r1, [r7, #8]
 8008092:	607a      	str	r2, [r7, #4]
  int tensor_idx =
      model_->subgraphs()->Get(subgraph_idx)->inputs()->Get(input_idx);
 8008094:	68fb      	ldr	r3, [r7, #12]
 8008096:	689b      	ldr	r3, [r3, #8]
 8008098:	4618      	mov	r0, r3
 800809a:	f7fd f8e9 	bl	8005270 <_ZNK6tflite5Model9subgraphsEv>
 800809e:	4602      	mov	r2, r0
 80080a0:	68bb      	ldr	r3, [r7, #8]
 80080a2:	4619      	mov	r1, r3
 80080a4:	4610      	mov	r0, r2
 80080a6:	f7fd f961 	bl	800536c <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE3GetEm>
 80080aa:	4603      	mov	r3, r0
 80080ac:	4618      	mov	r0, r3
 80080ae:	f7fd fc90 	bl	80059d2 <_ZNK6tflite8SubGraph6inputsEv>
 80080b2:	4602      	mov	r2, r0
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	4619      	mov	r1, r3
 80080b8:	4610      	mov	r0, r2
 80080ba:	f7fc f893 	bl	80041e4 <_ZNK11flatbuffers6VectorIlE3GetEm>
 80080be:	6178      	str	r0, [r7, #20]
  return &subgraph_allocations_[subgraph_idx].tensors[tensor_idx];
 80080c0:	68fb      	ldr	r3, [r7, #12]
 80080c2:	691a      	ldr	r2, [r3, #16]
 80080c4:	68bb      	ldr	r3, [r7, #8]
 80080c6:	00db      	lsls	r3, r3, #3
 80080c8:	4413      	add	r3, r2
 80080ca:	6859      	ldr	r1, [r3, #4]
 80080cc:	697a      	ldr	r2, [r7, #20]
 80080ce:	4613      	mov	r3, r2
 80080d0:	005b      	lsls	r3, r3, #1
 80080d2:	4413      	add	r3, r2
 80080d4:	009b      	lsls	r3, r3, #2
 80080d6:	440b      	add	r3, r1
}
 80080d8:	4618      	mov	r0, r3
 80080da:	3718      	adds	r7, #24
 80080dc:	46bd      	mov	sp, r7
 80080de:	bd80      	pop	{r7, pc}

080080e0 <_ZN6tflite10MicroGraph18NumSubgraphOutputsEi>:

size_t MicroGraph::NumSubgraphOutputs(int subgraph_idx) {
 80080e0:	b580      	push	{r7, lr}
 80080e2:	b082      	sub	sp, #8
 80080e4:	af00      	add	r7, sp, #0
 80080e6:	6078      	str	r0, [r7, #4]
 80080e8:	6039      	str	r1, [r7, #0]
  return model_->subgraphs()->Get(subgraph_idx)->outputs()->size();
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	689b      	ldr	r3, [r3, #8]
 80080ee:	4618      	mov	r0, r3
 80080f0:	f7fd f8be 	bl	8005270 <_ZNK6tflite5Model9subgraphsEv>
 80080f4:	4602      	mov	r2, r0
 80080f6:	683b      	ldr	r3, [r7, #0]
 80080f8:	4619      	mov	r1, r3
 80080fa:	4610      	mov	r0, r2
 80080fc:	f7fd f936 	bl	800536c <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE3GetEm>
 8008100:	4603      	mov	r3, r0
 8008102:	4618      	mov	r0, r3
 8008104:	f7fd fc73 	bl	80059ee <_ZNK6tflite8SubGraph7outputsEv>
 8008108:	4603      	mov	r3, r0
 800810a:	4618      	mov	r0, r3
 800810c:	f7fc f85b 	bl	80041c6 <_ZNK11flatbuffers6VectorIlE4sizeEv>
 8008110:	4603      	mov	r3, r0
}
 8008112:	4618      	mov	r0, r3
 8008114:	3708      	adds	r7, #8
 8008116:	46bd      	mov	sp, r7
 8008118:	bd80      	pop	{r7, pc}

0800811a <_ZN6tflite10MicroGraph17GetSubgraphOutputEii>:

TfLiteEvalTensor* MicroGraph::GetSubgraphOutput(int subgraph_idx,
                                                int output_idx) {
 800811a:	b580      	push	{r7, lr}
 800811c:	b086      	sub	sp, #24
 800811e:	af00      	add	r7, sp, #0
 8008120:	60f8      	str	r0, [r7, #12]
 8008122:	60b9      	str	r1, [r7, #8]
 8008124:	607a      	str	r2, [r7, #4]
  int tensor_idx =
      model_->subgraphs()->Get(subgraph_idx)->outputs()->Get(output_idx);
 8008126:	68fb      	ldr	r3, [r7, #12]
 8008128:	689b      	ldr	r3, [r3, #8]
 800812a:	4618      	mov	r0, r3
 800812c:	f7fd f8a0 	bl	8005270 <_ZNK6tflite5Model9subgraphsEv>
 8008130:	4602      	mov	r2, r0
 8008132:	68bb      	ldr	r3, [r7, #8]
 8008134:	4619      	mov	r1, r3
 8008136:	4610      	mov	r0, r2
 8008138:	f7fd f918 	bl	800536c <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE3GetEm>
 800813c:	4603      	mov	r3, r0
 800813e:	4618      	mov	r0, r3
 8008140:	f7fd fc55 	bl	80059ee <_ZNK6tflite8SubGraph7outputsEv>
 8008144:	4602      	mov	r2, r0
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	4619      	mov	r1, r3
 800814a:	4610      	mov	r0, r2
 800814c:	f7fc f84a 	bl	80041e4 <_ZNK11flatbuffers6VectorIlE3GetEm>
 8008150:	6178      	str	r0, [r7, #20]
  return &subgraph_allocations_[subgraph_idx].tensors[tensor_idx];
 8008152:	68fb      	ldr	r3, [r7, #12]
 8008154:	691a      	ldr	r2, [r3, #16]
 8008156:	68bb      	ldr	r3, [r7, #8]
 8008158:	00db      	lsls	r3, r3, #3
 800815a:	4413      	add	r3, r2
 800815c:	6859      	ldr	r1, [r3, #4]
 800815e:	697a      	ldr	r2, [r7, #20]
 8008160:	4613      	mov	r3, r2
 8008162:	005b      	lsls	r3, r3, #1
 8008164:	4413      	add	r3, r2
 8008166:	009b      	lsls	r3, r3, #2
 8008168:	440b      	add	r3, r1
}
 800816a:	4618      	mov	r0, r3
 800816c:	3718      	adds	r7, #24
 800816e:	46bd      	mov	sp, r7
 8008170:	bd80      	pop	{r7, pc}

08008172 <_ZNK6tflite8Operator12opcode_indexEv>:
  uint32_t opcode_index() const {
 8008172:	b580      	push	{r7, lr}
 8008174:	b082      	sub	sp, #8
 8008176:	af00      	add	r7, sp, #0
 8008178:	6078      	str	r0, [r7, #4]
    return GetField<uint32_t>(VT_OPCODE_INDEX, 0);
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	2200      	movs	r2, #0
 800817e:	2104      	movs	r1, #4
 8008180:	4618      	mov	r0, r3
 8008182:	f7f9 fcc5 	bl	8001b10 <_ZNK11flatbuffers5Table8GetFieldImEET_tS2_>
 8008186:	4603      	mov	r3, r0
  }
 8008188:	4618      	mov	r0, r3
 800818a:	3708      	adds	r7, #8
 800818c:	46bd      	mov	sp, r7
 800818e:	bd80      	pop	{r7, pc}

08008190 <_ZNK6tflite8Operator14custom_optionsEv>:
  const flatbuffers::Vector<uint8_t> *custom_options() const {
 8008190:	b580      	push	{r7, lr}
 8008192:	b082      	sub	sp, #8
 8008194:	af00      	add	r7, sp, #0
 8008196:	6078      	str	r0, [r7, #4]
    return GetPointer<const flatbuffers::Vector<uint8_t> *>(VT_CUSTOM_OPTIONS);
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	210e      	movs	r1, #14
 800819c:	4618      	mov	r0, r3
 800819e:	f7ff f80a 	bl	80071b6 <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorIhEEEET_t>
 80081a2:	4603      	mov	r3, r0
  }
 80081a4:	4618      	mov	r0, r3
 80081a6:	3708      	adds	r7, #8
 80081a8:	46bd      	mov	sp, r7
 80081aa:	bd80      	pop	{r7, pc}

080081ac <_ZNK6tflite5Model14operator_codesEv>:
  const flatbuffers::Vector<flatbuffers::Offset<tflite::OperatorCode>> *operator_codes() const {
 80081ac:	b580      	push	{r7, lr}
 80081ae:	b082      	sub	sp, #8
 80081b0:	af00      	add	r7, sp, #0
 80081b2:	6078      	str	r0, [r7, #4]
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<tflite::OperatorCode>> *>(VT_OPERATOR_CODES);
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	2106      	movs	r1, #6
 80081b8:	4618      	mov	r0, r3
 80081ba:	f000 fd30 	bl	8008c1e <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite12OperatorCodeEEEEEEET_t>
 80081be:	4603      	mov	r3, r0
  }
 80081c0:	4618      	mov	r0, r3
 80081c2:	3708      	adds	r7, #8
 80081c4:	46bd      	mov	sp, r7
 80081c6:	bd80      	pop	{r7, pc}

080081c8 <_ZN6tflite10MicroGraph23GetCurrentSubgraphIndexEv>:
  // allowing MicroGraph to init / prepare / invoke subgraphs in the model.
  void SetSubgraphAllocations(SubgraphAllocations* subgraph_allocations);

  // Get the current subgraph index. Within an on operator, this is guaranteed
  // to be the subgraph of that operator.
  int GetCurrentSubgraphIndex() { return current_subgraph_index_; }
 80081c8:	b480      	push	{r7}
 80081ca:	b083      	sub	sp, #12
 80081cc:	af00      	add	r7, sp, #0
 80081ce:	6078      	str	r0, [r7, #4]
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	695b      	ldr	r3, [r3, #20]
 80081d4:	4618      	mov	r0, r3
 80081d6:	370c      	adds	r7, #12
 80081d8:	46bd      	mov	sp, r7
 80081da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081de:	4770      	bx	lr

080081e0 <_ZN6tflite10MicroGraph14GetAllocationsEv>:

  // Gets the list of alloctions for each subgraph. This is the source of truth
  // for all per-subgraph allocation data.
  SubgraphAllocations* GetAllocations() { return subgraph_allocations_; }
 80081e0:	b480      	push	{r7}
 80081e2:	b083      	sub	sp, #12
 80081e4:	af00      	add	r7, sp, #0
 80081e6:	6078      	str	r0, [r7, #4]
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	691b      	ldr	r3, [r3, #16]
 80081ec:	4618      	mov	r0, r3
 80081ee:	370c      	adds	r7, #12
 80081f0:	46bd      	mov	sp, r7
 80081f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081f6:	4770      	bx	lr

080081f8 <_ZNK6tflite16MicroInterpreter11inputs_sizeEv>:
  // values other than kTfLiteOk and kTfLiteError.
  // TODO(b/149795762): Add this to the TfLiteStatus enum.
  TfLiteStatus Invoke();

  TfLiteTensor* input(size_t index);
  size_t inputs_size() const {
 80081f8:	b580      	push	{r7, lr}
 80081fa:	b082      	sub	sp, #8
 80081fc:	af00      	add	r7, sp, #0
 80081fe:	6078      	str	r0, [r7, #4]
    return model_->subgraphs()->Get(0)->inputs()->size();
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	4618      	mov	r0, r3
 8008206:	f7fd f833 	bl	8005270 <_ZNK6tflite5Model9subgraphsEv>
 800820a:	4603      	mov	r3, r0
 800820c:	2100      	movs	r1, #0
 800820e:	4618      	mov	r0, r3
 8008210:	f7fd f8ac 	bl	800536c <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE3GetEm>
 8008214:	4603      	mov	r3, r0
 8008216:	4618      	mov	r0, r3
 8008218:	f7fd fbdb 	bl	80059d2 <_ZNK6tflite8SubGraph6inputsEv>
 800821c:	4603      	mov	r3, r0
 800821e:	4618      	mov	r0, r3
 8008220:	f7fb ffd1 	bl	80041c6 <_ZNK11flatbuffers6VectorIlE4sizeEv>
 8008224:	4603      	mov	r3, r0
  }
 8008226:	4618      	mov	r0, r3
 8008228:	3708      	adds	r7, #8
 800822a:	46bd      	mov	sp, r7
 800822c:	bd80      	pop	{r7, pc}

0800822e <_ZNK6tflite16MicroInterpreter6inputsEv>:
  const flatbuffers::Vector<int32_t>& inputs() const {
 800822e:	b580      	push	{r7, lr}
 8008230:	b082      	sub	sp, #8
 8008232:	af00      	add	r7, sp, #0
 8008234:	6078      	str	r0, [r7, #4]
    return *model_->subgraphs()->Get(0)->inputs();
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	4618      	mov	r0, r3
 800823c:	f7fd f818 	bl	8005270 <_ZNK6tflite5Model9subgraphsEv>
 8008240:	4603      	mov	r3, r0
 8008242:	2100      	movs	r1, #0
 8008244:	4618      	mov	r0, r3
 8008246:	f7fd f891 	bl	800536c <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE3GetEm>
 800824a:	4603      	mov	r3, r0
 800824c:	4618      	mov	r0, r3
 800824e:	f7fd fbc0 	bl	80059d2 <_ZNK6tflite8SubGraph6inputsEv>
 8008252:	4603      	mov	r3, r0
  }
 8008254:	4618      	mov	r0, r3
 8008256:	3708      	adds	r7, #8
 8008258:	46bd      	mov	sp, r7
 800825a:	bd80      	pop	{r7, pc}

0800825c <_ZNK6tflite16MicroInterpreter12outputs_sizeEv>:
    }
    return nullptr;
  }

  TfLiteTensor* output(size_t index);
  size_t outputs_size() const {
 800825c:	b580      	push	{r7, lr}
 800825e:	b082      	sub	sp, #8
 8008260:	af00      	add	r7, sp, #0
 8008262:	6078      	str	r0, [r7, #4]
    return model_->subgraphs()->Get(0)->outputs()->size();
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	4618      	mov	r0, r3
 800826a:	f7fd f801 	bl	8005270 <_ZNK6tflite5Model9subgraphsEv>
 800826e:	4603      	mov	r3, r0
 8008270:	2100      	movs	r1, #0
 8008272:	4618      	mov	r0, r3
 8008274:	f7fd f87a 	bl	800536c <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE3GetEm>
 8008278:	4603      	mov	r3, r0
 800827a:	4618      	mov	r0, r3
 800827c:	f7fd fbb7 	bl	80059ee <_ZNK6tflite8SubGraph7outputsEv>
 8008280:	4603      	mov	r3, r0
 8008282:	4618      	mov	r0, r3
 8008284:	f7fb ff9f 	bl	80041c6 <_ZNK11flatbuffers6VectorIlE4sizeEv>
 8008288:	4603      	mov	r3, r0
  }
 800828a:	4618      	mov	r0, r3
 800828c:	3708      	adds	r7, #8
 800828e:	46bd      	mov	sp, r7
 8008290:	bd80      	pop	{r7, pc}

08008292 <_ZNK6tflite16MicroInterpreter7outputsEv>:
  const flatbuffers::Vector<int32_t>& outputs() const {
 8008292:	b580      	push	{r7, lr}
 8008294:	b082      	sub	sp, #8
 8008296:	af00      	add	r7, sp, #0
 8008298:	6078      	str	r0, [r7, #4]
    return *model_->subgraphs()->Get(0)->outputs();
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	4618      	mov	r0, r3
 80082a0:	f7fc ffe6 	bl	8005270 <_ZNK6tflite5Model9subgraphsEv>
 80082a4:	4603      	mov	r3, r0
 80082a6:	2100      	movs	r1, #0
 80082a8:	4618      	mov	r0, r3
 80082aa:	f7fd f85f 	bl	800536c <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE3GetEm>
 80082ae:	4603      	mov	r3, r0
 80082b0:	4618      	mov	r0, r3
 80082b2:	f7fd fb9c 	bl	80059ee <_ZNK6tflite8SubGraph7outputsEv>
 80082b6:	4603      	mov	r3, r0
  }
 80082b8:	4618      	mov	r0, r3
 80082ba:	3708      	adds	r7, #8
 80082bc:	46bd      	mov	sp, r7
 80082be:	bd80      	pop	{r7, pc}

080082c0 <_ZN6tflite16MicroInterpreter18get_subgraph_indexEv>:
  // TODO(b/158263161): Consider switching to Create() function to enable better
  // error reporting during initialization.
  void Init(MicroProfiler* profiler);

  // Gets the current subgraph index used from within context methods.
  int get_subgraph_index() { return graph_.GetCurrentSubgraphIndex(); }
 80082c0:	b580      	push	{r7, lr}
 80082c2:	b082      	sub	sp, #8
 80082c4:	af00      	add	r7, sp, #0
 80082c6:	6078      	str	r0, [r7, #4]
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	336c      	adds	r3, #108	; 0x6c
 80082cc:	4618      	mov	r0, r3
 80082ce:	f7ff ff7b 	bl	80081c8 <_ZN6tflite10MicroGraph23GetCurrentSubgraphIndexEv>
 80082d2:	4603      	mov	r3, r0
 80082d4:	4618      	mov	r0, r3
 80082d6:	3708      	adds	r7, #8
 80082d8:	46bd      	mov	sp, r7
 80082da:	bd80      	pop	{r7, pc}

080082dc <_ZN6tflite16MicroInterpreterC1EPKNS_5ModelERKNS_15MicroOpResolverEPhjPNS_13ErrorReporterEPNS_13MicroProfilerE>:
#include "tensorflow/lite/schema/schema_generated.h"
#include "tensorflow/lite/schema/schema_utils.h"

namespace tflite {

MicroInterpreter::MicroInterpreter(const Model* model,
 80082dc:	b580      	push	{r7, lr}
 80082de:	b084      	sub	sp, #16
 80082e0:	af00      	add	r7, sp, #0
 80082e2:	60f8      	str	r0, [r7, #12]
 80082e4:	60b9      	str	r1, [r7, #8]
 80082e6:	607a      	str	r2, [r7, #4]
 80082e8:	603b      	str	r3, [r7, #0]

      graph_(&context_, model, &allocator_),
      tensors_allocated_(false),
      initialization_status_(kTfLiteError),
      input_tensors_(nullptr),
      output_tensors_(nullptr) {
 80082ea:	68fb      	ldr	r3, [r7, #12]
 80082ec:	68ba      	ldr	r2, [r7, #8]
 80082ee:	601a      	str	r2, [r3, #0]
 80082f0:	68fb      	ldr	r3, [r7, #12]
 80082f2:	687a      	ldr	r2, [r7, #4]
 80082f4:	605a      	str	r2, [r3, #4]
 80082f6:	68fb      	ldr	r3, [r7, #12]
 80082f8:	69fa      	ldr	r2, [r7, #28]
 80082fa:	609a      	str	r2, [r3, #8]
 80082fc:	68fb      	ldr	r3, [r7, #12]
 80082fe:	330c      	adds	r3, #12
 8008300:	225c      	movs	r2, #92	; 0x5c
 8008302:	2100      	movs	r1, #0
 8008304:	4618      	mov	r0, r3
 8008306:	f003 f95f 	bl	800b5c8 <memset>
      allocator_(*MicroAllocator::Create(tensor_arena, tensor_arena_size,
 800830a:	69fa      	ldr	r2, [r7, #28]
 800830c:	69b9      	ldr	r1, [r7, #24]
 800830e:	6838      	ldr	r0, [r7, #0]
 8008310:	f7fe f918 	bl	8006544 <_ZN6tflite14MicroAllocator6CreateEPhjPNS_13ErrorReporterE>
 8008314:	4602      	mov	r2, r0
      output_tensors_(nullptr) {
 8008316:	68fb      	ldr	r3, [r7, #12]
 8008318:	669a      	str	r2, [r3, #104]	; 0x68
 800831a:	68fb      	ldr	r3, [r7, #12]
 800831c:	f103 006c 	add.w	r0, r3, #108	; 0x6c
 8008320:	68fb      	ldr	r3, [r7, #12]
 8008322:	f103 010c 	add.w	r1, r3, #12
      graph_(&context_, model, &allocator_),
 8008326:	68fb      	ldr	r3, [r7, #12]
 8008328:	6e9b      	ldr	r3, [r3, #104]	; 0x68
      output_tensors_(nullptr) {
 800832a:	68ba      	ldr	r2, [r7, #8]
 800832c:	f7ff fbae 	bl	8007a8c <_ZN6tflite10MicroGraphC1EP13TfLiteContextPKNS_5ModelEPNS_14MicroAllocatorE>
 8008330:	68fb      	ldr	r3, [r7, #12]
 8008332:	2200      	movs	r2, #0
 8008334:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
 8008338:	68fb      	ldr	r3, [r7, #12]
 800833a:	2201      	movs	r2, #1
 800833c:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
 8008340:	68fb      	ldr	r3, [r7, #12]
 8008342:	2200      	movs	r2, #0
 8008344:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
 8008348:	68fb      	ldr	r3, [r7, #12]
 800834a:	2200      	movs	r2, #0
 800834c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 8008350:	68fb      	ldr	r3, [r7, #12]
 8008352:	2200      	movs	r2, #0
 8008354:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  Init(profiler);
 8008358:	6a39      	ldr	r1, [r7, #32]
 800835a:	68f8      	ldr	r0, [r7, #12]
 800835c:	f000 f806 	bl	800836c <_ZN6tflite16MicroInterpreter4InitEPNS_13MicroProfilerE>
}
 8008360:	68fb      	ldr	r3, [r7, #12]
 8008362:	4618      	mov	r0, r3
 8008364:	3710      	adds	r7, #16
 8008366:	46bd      	mov	sp, r7
 8008368:	bd80      	pop	{r7, pc}
	...

0800836c <_ZN6tflite16MicroInterpreter4InitEPNS_13MicroProfilerE>:
  if (graph_.GetAllocations() != nullptr) {
    graph_.FreeSubgraphs();
  }
}

void MicroInterpreter::Init(MicroProfiler* profiler) {
 800836c:	b480      	push	{r7}
 800836e:	b083      	sub	sp, #12
 8008370:	af00      	add	r7, sp, #0
 8008372:	6078      	str	r0, [r7, #4]
 8008374:	6039      	str	r1, [r7, #0]
  context_.impl_ = static_cast<void*>(this);
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	687a      	ldr	r2, [r7, #4]
 800837a:	619a      	str	r2, [r3, #24]
  context_.ReportError = ReportOpError;
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	4a0d      	ldr	r2, [pc, #52]	; (80083b4 <_ZN6tflite16MicroInterpreter4InitEPNS_13MicroProfilerE+0x48>)
 8008380:	621a      	str	r2, [r3, #32]
  context_.GetTensor = GetTensor;
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	4a0c      	ldr	r2, [pc, #48]	; (80083b8 <_ZN6tflite16MicroInterpreter4InitEPNS_13MicroProfilerE+0x4c>)
 8008386:	65da      	str	r2, [r3, #92]	; 0x5c
  context_.ReportError = ReportOpError;
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	4a0a      	ldr	r2, [pc, #40]	; (80083b4 <_ZN6tflite16MicroInterpreter4InitEPNS_13MicroProfilerE+0x48>)
 800838c:	621a      	str	r2, [r3, #32]
  context_.GetTensor = GetTensor;
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	4a09      	ldr	r2, [pc, #36]	; (80083b8 <_ZN6tflite16MicroInterpreter4InitEPNS_13MicroProfilerE+0x4c>)
 8008392:	65da      	str	r2, [r3, #92]	; 0x5c
  context_.GetEvalTensor = GetEvalTensor;
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	4a09      	ldr	r2, [pc, #36]	; (80083bc <_ZN6tflite16MicroInterpreter4InitEPNS_13MicroProfilerE+0x50>)
 8008398:	661a      	str	r2, [r3, #96]	; 0x60
  context_.profiler = profiler;
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	683a      	ldr	r2, [r7, #0]
 800839e:	641a      	str	r2, [r3, #64]	; 0x40

  initialization_status_ = kTfLiteOk;
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	2200      	movs	r2, #0
 80083a4:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
}
 80083a8:	bf00      	nop
 80083aa:	370c      	adds	r7, #12
 80083ac:	46bd      	mov	sp, r7
 80083ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083b2:	4770      	bx	lr
 80083b4:	08008b31 	.word	0x08008b31
 80083b8:	08008b69 	.word	0x08008b69
 80083bc:	08008bb9 	.word	0x08008bb9

080083c0 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv>:

TfLiteStatus MicroInterpreter::PrepareNodeAndRegistrationDataFromFlatbuffer() {
 80083c0:	b5b0      	push	{r4, r5, r7, lr}
 80083c2:	b096      	sub	sp, #88	; 0x58
 80083c4:	af00      	add	r7, sp, #0
 80083c6:	6078      	str	r0, [r7, #4]
  for (int subgraph_idx = 0; subgraph_idx < graph_.NumSubgraphs();
 80083c8:	2300      	movs	r3, #0
 80083ca:	657b      	str	r3, [r7, #84]	; 0x54
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	336c      	adds	r3, #108	; 0x6c
 80083d0:	4618      	mov	r0, r3
 80083d2:	f7ff fe1c 	bl	800800e <_ZN6tflite10MicroGraph12NumSubgraphsEv>
 80083d6:	4602      	mov	r2, r0
 80083d8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80083da:	4293      	cmp	r3, r2
 80083dc:	bfb4      	ite	lt
 80083de:	2301      	movlt	r3, #1
 80083e0:	2300      	movge	r3, #0
 80083e2:	b2db      	uxtb	r3, r3
 80083e4:	2b00      	cmp	r3, #0
 80083e6:	f000 8155 	beq.w	8008694 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x2d4>
       subgraph_idx++) {
    const SubGraph* subgraph = model_->subgraphs()->Get(subgraph_idx);
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	4618      	mov	r0, r3
 80083f0:	f7fc ff3e 	bl	8005270 <_ZNK6tflite5Model9subgraphsEv>
 80083f4:	4602      	mov	r2, r0
 80083f6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80083f8:	4619      	mov	r1, r3
 80083fa:	4610      	mov	r0, r2
 80083fc:	f7fc ffb6 	bl	800536c <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE3GetEm>
 8008400:	6478      	str	r0, [r7, #68]	; 0x44
    TFLITE_DCHECK(subgraph != nullptr);
 8008402:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008404:	2b00      	cmp	r3, #0
 8008406:	d101      	bne.n	800840c <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x4c>
 8008408:	f002 fe38 	bl	800b07c <abort>

    auto* opcodes = model_->operator_codes();
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	4618      	mov	r0, r3
 8008412:	f7ff fecb 	bl	80081ac <_ZNK6tflite5Model14operator_codesEv>
 8008416:	6438      	str	r0, [r7, #64]	; 0x40
    BuiltinDataAllocator* builtin_data_allocator =
        allocator_.GetBuiltinDataAllocator();
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800841c:	4618      	mov	r0, r3
 800841e:	f7fe febe 	bl	800719e <_ZN6tflite14MicroAllocator23GetBuiltinDataAllocatorEv>
 8008422:	63f8      	str	r0, [r7, #60]	; 0x3c
    uint32_t operators_size = NumSubgraphOperators(subgraph);
 8008424:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8008426:	f7fc ff31 	bl	800528c <_ZN6tflite20NumSubgraphOperatorsEPKNS_8SubGraphE>
 800842a:	63b8      	str	r0, [r7, #56]	; 0x38
    for (size_t i = 0; i < operators_size; ++i) {
 800842c:	2300      	movs	r3, #0
 800842e:	653b      	str	r3, [r7, #80]	; 0x50
 8008430:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008432:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008434:	429a      	cmp	r2, r3
 8008436:	f080 8129 	bcs.w	800868c <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x2cc>
      const auto* op = subgraph->operators()->Get(i);
 800843a:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800843c:	f7fc ff0a 	bl	8005254 <_ZNK6tflite8SubGraph9operatorsEv>
 8008440:	4603      	mov	r3, r0
 8008442:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8008444:	4618      	mov	r0, r3
 8008446:	f7fe ffd5 	bl	80073f4 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8OperatorEEEE3GetEm>
 800844a:	6378      	str	r0, [r7, #52]	; 0x34
      const size_t index = op->opcode_index();
 800844c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800844e:	f7ff fe90 	bl	8008172 <_ZNK6tflite8Operator12opcode_indexEv>
 8008452:	6338      	str	r0, [r7, #48]	; 0x30
      if (index >= opcodes->size()) {
 8008454:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8008456:	f000 fbf2 	bl	8008c3e <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite12OperatorCodeEEEE4sizeEv>
 800845a:	4602      	mov	r2, r0
 800845c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800845e:	4293      	cmp	r3, r2
 8008460:	bf2c      	ite	cs
 8008462:	2301      	movcs	r3, #1
 8008464:	2300      	movcc	r3, #0
 8008466:	b2db      	uxtb	r3, r3
 8008468:	2b00      	cmp	r3, #0
 800846a:	d005      	beq.n	8008478 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0xb8>
        MicroPrintf("Missing registration for opcode_index %d\n", index);
 800846c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800846e:	488c      	ldr	r0, [pc, #560]	; (80086a0 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x2e0>)
 8008470:	f7ff fa9a 	bl	80079a8 <_Z11MicroPrintfPKcz>
        return kTfLiteError;
 8008474:	2301      	movs	r3, #1
 8008476:	e10e      	b.n	8008696 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x2d6>
      }
      const auto* opcode = opcodes->Get(index);
 8008478:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800847a:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800847c:	f000 fbee 	bl	8008c5c <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite12OperatorCodeEEEE3GetEm>
 8008480:	62f8      	str	r0, [r7, #44]	; 0x2c
      TfLiteStatus status =
          GetRegistrationFromOpCode(opcode, op_resolver_, error_reporter_,
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	685b      	ldr	r3, [r3, #4]
 8008486:	461d      	mov	r5, r3
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	689c      	ldr	r4, [r3, #8]
                                    &(graph_.GetAllocations()[subgraph_idx]
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	336c      	adds	r3, #108	; 0x6c
 8008490:	4618      	mov	r0, r3
 8008492:	f7ff fea5 	bl	80081e0 <_ZN6tflite10MicroGraph14GetAllocationsEv>
 8008496:	4602      	mov	r2, r0
 8008498:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800849a:	00db      	lsls	r3, r3, #3
 800849c:	4413      	add	r3, r2
                                          .node_and_registrations[i]
 800849e:	681a      	ldr	r2, [r3, #0]
 80084a0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80084a2:	212c      	movs	r1, #44	; 0x2c
 80084a4:	fb01 f303 	mul.w	r3, r1, r3
 80084a8:	4413      	add	r3, r2
          GetRegistrationFromOpCode(opcode, op_resolver_, error_reporter_,
 80084aa:	3328      	adds	r3, #40	; 0x28
 80084ac:	4622      	mov	r2, r4
 80084ae:	4629      	mov	r1, r5
 80084b0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80084b2:	f7fc f9f3 	bl	800489c <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration>
 80084b6:	4603      	mov	r3, r0
 80084b8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
                                          .registration));
      if (status != kTfLiteOk) {
 80084bc:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80084c0:	2b00      	cmp	r3, #0
 80084c2:	d00e      	beq.n	80084e2 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x122>
        MicroPrintf("Failed to get registration from op code %s\n ",
 80084c4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80084c6:	f002 fcba 	bl	800ae3e <_ZN6tflite14GetBuiltinCodeEPKNS_12OperatorCodeE>
 80084ca:	4603      	mov	r3, r0
 80084cc:	4618      	mov	r0, r3
 80084ce:	f7fc f9a1 	bl	8004814 <_ZN6tflite23EnumNameBuiltinOperatorENS_15BuiltinOperatorE>
 80084d2:	4603      	mov	r3, r0
 80084d4:	4619      	mov	r1, r3
 80084d6:	4873      	ldr	r0, [pc, #460]	; (80086a4 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x2e4>)
 80084d8:	f7ff fa66 	bl	80079a8 <_Z11MicroPrintfPKcz>
                    EnumNameBuiltinOperator(GetBuiltinCode(opcode)));
        return status;
 80084dc:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80084e0:	e0d9      	b.n	8008696 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x2d6>
      }
      const auto* registration = graph_.GetAllocations()[subgraph_idx]
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	336c      	adds	r3, #108	; 0x6c
 80084e6:	4618      	mov	r0, r3
 80084e8:	f7ff fe7a 	bl	80081e0 <_ZN6tflite10MicroGraph14GetAllocationsEv>
 80084ec:	4602      	mov	r2, r0
 80084ee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80084f0:	00db      	lsls	r3, r3, #3
 80084f2:	4413      	add	r3, r2
                                     .node_and_registrations[i]
 80084f4:	681a      	ldr	r2, [r3, #0]
 80084f6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80084f8:	212c      	movs	r1, #44	; 0x2c
 80084fa:	fb01 f303 	mul.w	r3, r1, r3
 80084fe:	4413      	add	r3, r2
                                     .registration;
 8008500:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008502:	627b      	str	r3, [r7, #36]	; 0x24
      if (registration == nullptr) {
 8008504:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008506:	2b00      	cmp	r3, #0
 8008508:	d105      	bne.n	8008516 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x156>
        MicroPrintf("Skipping op for opcode_index %d\n", index);
 800850a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800850c:	4866      	ldr	r0, [pc, #408]	; (80086a8 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x2e8>)
 800850e:	f7ff fa4b 	bl	80079a8 <_Z11MicroPrintfPKcz>
        return kTfLiteError;
 8008512:	2301      	movs	r3, #1
 8008514:	e0bf      	b.n	8008696 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x2d6>
      }
      BuiltinOperator op_type =
          static_cast<BuiltinOperator>(registration->builtin_code);
 8008516:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008518:	695b      	ldr	r3, [r3, #20]
      BuiltinOperator op_type =
 800851a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

      const char* custom_data = nullptr;
 800851e:	2300      	movs	r3, #0
 8008520:	64fb      	str	r3, [r7, #76]	; 0x4c
      size_t custom_data_size = 0;
 8008522:	2300      	movs	r3, #0
 8008524:	64bb      	str	r3, [r7, #72]	; 0x48
      unsigned char* builtin_data = nullptr;
 8008526:	2300      	movs	r3, #0
 8008528:	613b      	str	r3, [r7, #16]

      if (op_type == BuiltinOperator_CUSTOM) {
 800852a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800852e:	2b20      	cmp	r3, #32
 8008530:	d11b      	bne.n	800856a <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x1aa>
        // Custom Ops may or may not have a non-null custom_options field.
        if (op->custom_options() != nullptr) {
 8008532:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8008534:	f7ff fe2c 	bl	8008190 <_ZNK6tflite8Operator14custom_optionsEv>
 8008538:	4603      	mov	r3, r0
 800853a:	2b00      	cmp	r3, #0
 800853c:	bf14      	ite	ne
 800853e:	2301      	movne	r3, #1
 8008540:	2300      	moveq	r3, #0
 8008542:	b2db      	uxtb	r3, r3
 8008544:	2b00      	cmp	r3, #0
 8008546:	d051      	beq.n	80085ec <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x22c>
          custom_data =
              reinterpret_cast<const char*>(op->custom_options()->data());
 8008548:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800854a:	f7ff fe21 	bl	8008190 <_ZNK6tflite8Operator14custom_optionsEv>
 800854e:	4603      	mov	r3, r0
 8008550:	4618      	mov	r0, r3
 8008552:	f7fe fff9 	bl	8007548 <_ZNK11flatbuffers6VectorIhE4dataEv>
 8008556:	64f8      	str	r0, [r7, #76]	; 0x4c
          custom_data_size = op->custom_options()->size();
 8008558:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800855a:	f7ff fe19 	bl	8008190 <_ZNK6tflite8Operator14custom_optionsEv>
 800855e:	4603      	mov	r3, r0
 8008560:	4618      	mov	r0, r3
 8008562:	f7fe fe98 	bl	8007296 <_ZNK11flatbuffers6VectorIhE4sizeEv>
 8008566:	64b8      	str	r0, [r7, #72]	; 0x48
 8008568:	e040      	b.n	80085ec <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x22c>
        }
      } else {
        if (op->custom_options() != nullptr) {
 800856a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800856c:	f7ff fe10 	bl	8008190 <_ZNK6tflite8Operator14custom_optionsEv>
 8008570:	4603      	mov	r3, r0
 8008572:	2b00      	cmp	r3, #0
 8008574:	bf14      	ite	ne
 8008576:	2301      	movne	r3, #1
 8008578:	2300      	moveq	r3, #0
 800857a:	b2db      	uxtb	r3, r3
 800857c:	2b00      	cmp	r3, #0
 800857e:	d00b      	beq.n	8008598 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x1d8>
          MicroPrintf(
 8008580:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008584:	4618      	mov	r0, r3
 8008586:	f7fc f945 	bl	8004814 <_ZN6tflite23EnumNameBuiltinOperatorENS_15BuiltinOperatorE>
 800858a:	4603      	mov	r3, r0
 800858c:	4619      	mov	r1, r3
 800858e:	4847      	ldr	r0, [pc, #284]	; (80086ac <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x2ec>)
 8008590:	f7ff fa0a 	bl	80079a8 <_Z11MicroPrintfPKcz>
              "Unsupported behavior: found builtin operator %s with custom "
              "options.\n",
              EnumNameBuiltinOperator(op_type));
          return kTfLiteError;
 8008594:	2301      	movs	r3, #1
 8008596:	e07e      	b.n	8008696 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x2d6>
        }

        MicroOpResolver::BuiltinParseFunction parser =
            op_resolver_.GetOpDataParser(op_type);
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	685a      	ldr	r2, [r3, #4]
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	685b      	ldr	r3, [r3, #4]
 80085a0:	681b      	ldr	r3, [r3, #0]
 80085a2:	3320      	adds	r3, #32
 80085a4:	681b      	ldr	r3, [r3, #0]
 80085a6:	f897 1023 	ldrb.w	r1, [r7, #35]	; 0x23
 80085aa:	4610      	mov	r0, r2
 80085ac:	4798      	blx	r3
 80085ae:	61f8      	str	r0, [r7, #28]
        if (parser == nullptr) {
 80085b0:	69fb      	ldr	r3, [r7, #28]
 80085b2:	2b00      	cmp	r3, #0
 80085b4:	d10b      	bne.n	80085ce <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x20e>
          MicroPrintf("Did not find a parser for %s",
 80085b6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80085ba:	4618      	mov	r0, r3
 80085bc:	f7fc f92a 	bl	8004814 <_ZN6tflite23EnumNameBuiltinOperatorENS_15BuiltinOperatorE>
 80085c0:	4603      	mov	r3, r0
 80085c2:	4619      	mov	r1, r3
 80085c4:	483a      	ldr	r0, [pc, #232]	; (80086b0 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x2f0>)
 80085c6:	f7ff f9ef 	bl	80079a8 <_Z11MicroPrintfPKcz>
                      EnumNameBuiltinOperator(op_type));

          return kTfLiteError;
 80085ca:	2301      	movs	r3, #1
 80085cc:	e063      	b.n	8008696 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x2d6>
        }
        TF_LITE_ENSURE_STATUS(parser(op, error_reporter_,
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	6899      	ldr	r1, [r3, #8]
 80085d2:	f107 0310 	add.w	r3, r7, #16
 80085d6:	69fc      	ldr	r4, [r7, #28]
 80085d8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80085da:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80085dc:	47a0      	blx	r4
 80085de:	4603      	mov	r3, r0
 80085e0:	76fb      	strb	r3, [r7, #27]
 80085e2:	7efb      	ldrb	r3, [r7, #27]
 80085e4:	2b00      	cmp	r3, #0
 80085e6:	d001      	beq.n	80085ec <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x22c>
 80085e8:	7efb      	ldrb	r3, [r7, #27]
 80085ea:	e054      	b.n	8008696 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x2d6>
                                     builtin_data_allocator,
                                     (void**)(&builtin_data)));
      }

      TfLiteIntArray* inputs_array;
      TF_LITE_ENSURE_STATUS(allocator_.FlatBufferVectorToTfLiteTypeArray(
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	6e9c      	ldr	r4, [r3, #104]	; 0x68
 80085f0:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80085f2:	f7fd f9c4 	bl	800597e <_ZNK6tflite8Operator6inputsEv>
 80085f6:	4601      	mov	r1, r0
 80085f8:	f107 030c 	add.w	r3, r7, #12
 80085fc:	461a      	mov	r2, r3
 80085fe:	4620      	mov	r0, r4
 8008600:	f7fe fdba 	bl	8007178 <_ZN6tflite14MicroAllocator33FlatBufferVectorToTfLiteTypeArrayEPKN11flatbuffers6VectorIlEEPP14TfLiteIntArray>
 8008604:	4603      	mov	r3, r0
 8008606:	76bb      	strb	r3, [r7, #26]
 8008608:	7ebb      	ldrb	r3, [r7, #26]
 800860a:	2b00      	cmp	r3, #0
 800860c:	d001      	beq.n	8008612 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x252>
 800860e:	7ebb      	ldrb	r3, [r7, #26]
 8008610:	e041      	b.n	8008696 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x2d6>
          op->inputs(), &inputs_array));

      TfLiteIntArray* outputs_array;
      TF_LITE_ENSURE_STATUS(allocator_.FlatBufferVectorToTfLiteTypeArray(
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	6e9c      	ldr	r4, [r3, #104]	; 0x68
 8008616:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8008618:	f7fd f9bf 	bl	800599a <_ZNK6tflite8Operator7outputsEv>
 800861c:	4601      	mov	r1, r0
 800861e:	f107 0308 	add.w	r3, r7, #8
 8008622:	461a      	mov	r2, r3
 8008624:	4620      	mov	r0, r4
 8008626:	f7fe fda7 	bl	8007178 <_ZN6tflite14MicroAllocator33FlatBufferVectorToTfLiteTypeArrayEPKN11flatbuffers6VectorIlEEPP14TfLiteIntArray>
 800862a:	4603      	mov	r3, r0
 800862c:	767b      	strb	r3, [r7, #25]
 800862e:	7e7b      	ldrb	r3, [r7, #25]
 8008630:	2b00      	cmp	r3, #0
 8008632:	d001      	beq.n	8008638 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x278>
 8008634:	7e7b      	ldrb	r3, [r7, #25]
 8008636:	e02e      	b.n	8008696 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x2d6>
          op->outputs(), &outputs_array));

      TfLiteNode* node = &(
          graph_.GetAllocations()[subgraph_idx].node_and_registrations[i].node);
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	336c      	adds	r3, #108	; 0x6c
 800863c:	4618      	mov	r0, r3
 800863e:	f7ff fdcf 	bl	80081e0 <_ZN6tflite10MicroGraph14GetAllocationsEv>
 8008642:	4602      	mov	r2, r0
 8008644:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008646:	00db      	lsls	r3, r3, #3
 8008648:	4413      	add	r3, r2
 800864a:	681a      	ldr	r2, [r3, #0]
 800864c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800864e:	212c      	movs	r1, #44	; 0x2c
 8008650:	fb01 f303 	mul.w	r3, r1, r3
 8008654:	4413      	add	r3, r2
 8008656:	617b      	str	r3, [r7, #20]
      *node = {};
 8008658:	697b      	ldr	r3, [r7, #20]
 800865a:	4618      	mov	r0, r3
 800865c:	2328      	movs	r3, #40	; 0x28
 800865e:	461a      	mov	r2, r3
 8008660:	2100      	movs	r1, #0
 8008662:	f002 ffb1 	bl	800b5c8 <memset>
      node->inputs = inputs_array;
 8008666:	68fa      	ldr	r2, [r7, #12]
 8008668:	697b      	ldr	r3, [r7, #20]
 800866a:	601a      	str	r2, [r3, #0]
      node->outputs = outputs_array;
 800866c:	68ba      	ldr	r2, [r7, #8]
 800866e:	697b      	ldr	r3, [r7, #20]
 8008670:	605a      	str	r2, [r3, #4]
      node->builtin_data = reinterpret_cast<void*>(builtin_data);
 8008672:	693a      	ldr	r2, [r7, #16]
 8008674:	697b      	ldr	r3, [r7, #20]
 8008676:	615a      	str	r2, [r3, #20]
      node->custom_initial_data = custom_data;
 8008678:	697b      	ldr	r3, [r7, #20]
 800867a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800867c:	619a      	str	r2, [r3, #24]
      node->custom_initial_data_size = custom_data_size;
 800867e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008680:	697b      	ldr	r3, [r7, #20]
 8008682:	61da      	str	r2, [r3, #28]
    for (size_t i = 0; i < operators_size; ++i) {
 8008684:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008686:	3301      	adds	r3, #1
 8008688:	653b      	str	r3, [r7, #80]	; 0x50
 800868a:	e6d1      	b.n	8008430 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x70>
  for (int subgraph_idx = 0; subgraph_idx < graph_.NumSubgraphs();
 800868c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800868e:	3301      	adds	r3, #1
 8008690:	657b      	str	r3, [r7, #84]	; 0x54
 8008692:	e69b      	b.n	80083cc <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0xc>
    }
  }
  return kTfLiteOk;
 8008694:	2300      	movs	r3, #0
}
 8008696:	4618      	mov	r0, r3
 8008698:	3758      	adds	r7, #88	; 0x58
 800869a:	46bd      	mov	sp, r7
 800869c:	bdb0      	pop	{r4, r5, r7, pc}
 800869e:	bf00      	nop
 80086a0:	08011108 	.word	0x08011108
 80086a4:	08011134 	.word	0x08011134
 80086a8:	08011164 	.word	0x08011164
 80086ac:	08011188 	.word	0x08011188
 80086b0:	080111d0 	.word	0x080111d0

080086b4 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv>:

TfLiteStatus MicroInterpreter::AllocateTensors() {
 80086b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80086b8:	b088      	sub	sp, #32
 80086ba:	af02      	add	r7, sp, #8
 80086bc:	6078      	str	r0, [r7, #4]
  SubgraphAllocations* allocations = allocator_.StartModelAllocation(model_);
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	4619      	mov	r1, r3
 80086c8:	4610      	mov	r0, r2
 80086ca:	f7fd ff85 	bl	80065d8 <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelE>
 80086ce:	60f8      	str	r0, [r7, #12]

  if (allocations == nullptr) {
 80086d0:	68fb      	ldr	r3, [r7, #12]
 80086d2:	2b00      	cmp	r3, #0
 80086d4:	d10b      	bne.n	80086ee <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x3a>
    TF_LITE_REPORT_ERROR(error_reporter_,
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	689b      	ldr	r3, [r3, #8]
 80086da:	49a4      	ldr	r1, [pc, #656]	; (800896c <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x2b8>)
 80086dc:	4618      	mov	r0, r3
 80086de:	f7fb fa5d 	bl	8003b9c <_ZN6tflite13ErrorReporter6ReportEPKcz>
                         "Failed starting model allocation.\n");
    initialization_status_ = kTfLiteError;
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	2201      	movs	r2, #1
 80086e6:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
    return kTfLiteError;
 80086ea:	2301      	movs	r3, #1
 80086ec:	e139      	b.n	8008962 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x2ae>
  }

  graph_.SetSubgraphAllocations(allocations);
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	336c      	adds	r3, #108	; 0x6c
 80086f2:	68f9      	ldr	r1, [r7, #12]
 80086f4:	4618      	mov	r0, r3
 80086f6:	f7ff fc9c 	bl	8008032 <_ZN6tflite10MicroGraph22SetSubgraphAllocationsEPNS_19SubgraphAllocationsE>

  TF_LITE_ENSURE_STATUS(PrepareNodeAndRegistrationDataFromFlatbuffer());
 80086fa:	6878      	ldr	r0, [r7, #4]
 80086fc:	f7ff fe60 	bl	80083c0 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv>
 8008700:	4603      	mov	r3, r0
 8008702:	72fb      	strb	r3, [r7, #11]
 8008704:	7afb      	ldrb	r3, [r7, #11]
 8008706:	2b00      	cmp	r3, #0
 8008708:	d001      	beq.n	800870e <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x5a>
 800870a:	7afb      	ldrb	r3, [r7, #11]
 800870c:	e129      	b.n	8008962 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x2ae>

  // Only allow AllocatePersistentBuffer in Init stage.
  context_.AllocatePersistentBuffer = AllocatePersistentBuffer;
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	4a97      	ldr	r2, [pc, #604]	; (8008970 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x2bc>)
 8008712:	645a      	str	r2, [r3, #68]	; 0x44
  context_.RequestScratchBufferInArena = nullptr;
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	2200      	movs	r2, #0
 8008718:	64da      	str	r2, [r3, #76]	; 0x4c
  context_.GetScratchBuffer = nullptr;
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	2200      	movs	r2, #0
 800871e:	651a      	str	r2, [r3, #80]	; 0x50
  context_.GetExecutionPlan = GetGraph;
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	4a94      	ldr	r2, [pc, #592]	; (8008974 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x2c0>)
 8008724:	611a      	str	r2, [r3, #16]
  graph_.InitSubgraphs();
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	336c      	adds	r3, #108	; 0x6c
 800872a:	4618      	mov	r0, r3
 800872c:	f7ff f9f8 	bl	8007b20 <_ZN6tflite10MicroGraph13InitSubgraphsEv>

  // Both AllocatePersistentBuffer and RequestScratchBufferInArena is
  // available in Prepare stage.
  context_.RequestScratchBufferInArena = RequestScratchBufferInArena;
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	4a91      	ldr	r2, [pc, #580]	; (8008978 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x2c4>)
 8008734:	64da      	str	r2, [r3, #76]	; 0x4c
  graph_.PrepareSubgraphs();
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	336c      	adds	r3, #108	; 0x6c
 800873a:	4618      	mov	r0, r3
 800873c:	f7ff fa60 	bl	8007c00 <_ZN6tflite10MicroGraph16PrepareSubgraphsEv>

  // Prepare is done, we're ready for Invoke. Memory allocation is no longer
  // allowed. Kernels can only fetch scratch buffers via GetScratchBuffer.
  context_.AllocatePersistentBuffer = nullptr;
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	2200      	movs	r2, #0
 8008744:	645a      	str	r2, [r3, #68]	; 0x44
  context_.RequestScratchBufferInArena = nullptr;
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	2200      	movs	r2, #0
 800874a:	64da      	str	r2, [r3, #76]	; 0x4c
  context_.GetScratchBuffer = GetScratchBuffer;
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	4a8b      	ldr	r2, [pc, #556]	; (800897c <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x2c8>)
 8008750:	651a      	str	r2, [r3, #80]	; 0x50

  TF_LITE_ENSURE_OK(&context_, allocator_.FinishModelAllocation(
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	6e9c      	ldr	r4, [r3, #104]	; 0x68
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	681d      	ldr	r5, [r3, #0]
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	336c      	adds	r3, #108	; 0x6c
 800875e:	4618      	mov	r0, r3
 8008760:	f7ff fd3e 	bl	80081e0 <_ZN6tflite10MicroGraph14GetAllocationsEv>
 8008764:	4602      	mov	r2, r0
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	338c      	adds	r3, #140	; 0x8c
 800876a:	4629      	mov	r1, r5
 800876c:	4620      	mov	r0, r4
 800876e:	f7fd ffb5 	bl	80066dc <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEPNS_19SubgraphAllocationsEPPNS_19ScratchBufferHandleE>
 8008772:	4603      	mov	r3, r0
 8008774:	72bb      	strb	r3, [r7, #10]
 8008776:	7abb      	ldrb	r3, [r7, #10]
 8008778:	2b00      	cmp	r3, #0
 800877a:	d001      	beq.n	8008780 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0xcc>
 800877c:	7abb      	ldrb	r3, [r7, #10]
 800877e:	e0f0      	b.n	8008962 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x2ae>
                                   &scratch_buffer_handles_));

  // TODO(b/162311891): Drop these allocations when the interpreter supports
  // handling buffers from TfLiteEvalTensor.
  input_tensors_ =
      reinterpret_cast<TfLiteTensor**>(allocator_.AllocatePersistentBuffer(
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	6e9d      	ldr	r5, [r3, #104]	; 0x68
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	6e9b      	ldr	r3, [r3, #104]	; 0x68
          sizeof(TfLiteTensor*) * inputs_size()));
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	330c      	adds	r3, #12
 800878c:	681c      	ldr	r4, [r3, #0]
 800878e:	6878      	ldr	r0, [r7, #4]
 8008790:	f7ff fd32 	bl	80081f8 <_ZNK6tflite16MicroInterpreter11inputs_sizeEv>
 8008794:	4603      	mov	r3, r0
      reinterpret_cast<TfLiteTensor**>(allocator_.AllocatePersistentBuffer(
 8008796:	009b      	lsls	r3, r3, #2
 8008798:	4619      	mov	r1, r3
 800879a:	4628      	mov	r0, r5
 800879c:	47a0      	blx	r4
 800879e:	4602      	mov	r2, r0
  input_tensors_ =
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  if (input_tensors_ == nullptr) {
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80087ac:	2b00      	cmp	r3, #0
 80087ae:	d10d      	bne.n	80087cc <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x118>
    TF_LITE_REPORT_ERROR(
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	689c      	ldr	r4, [r3, #8]
 80087b4:	6878      	ldr	r0, [r7, #4]
 80087b6:	f7ff fd1f 	bl	80081f8 <_ZNK6tflite16MicroInterpreter11inputs_sizeEv>
 80087ba:	4603      	mov	r3, r0
 80087bc:	009b      	lsls	r3, r3, #2
 80087be:	461a      	mov	r2, r3
 80087c0:	496f      	ldr	r1, [pc, #444]	; (8008980 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x2cc>)
 80087c2:	4620      	mov	r0, r4
 80087c4:	f7fb f9ea 	bl	8003b9c <_ZN6tflite13ErrorReporter6ReportEPKcz>
        error_reporter_,
        "Failed to allocate memory for context->input_tensors_, "
        "%d bytes required",
        sizeof(TfLiteTensor*) * inputs_size());
    return kTfLiteError;
 80087c8:	2301      	movs	r3, #1
 80087ca:	e0ca      	b.n	8008962 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x2ae>
  }

  for (size_t i = 0; i < inputs_size(); ++i) {
 80087cc:	2300      	movs	r3, #0
 80087ce:	617b      	str	r3, [r7, #20]
 80087d0:	6878      	ldr	r0, [r7, #4]
 80087d2:	f7ff fd11 	bl	80081f8 <_ZNK6tflite16MicroInterpreter11inputs_sizeEv>
 80087d6:	4602      	mov	r2, r0
 80087d8:	697b      	ldr	r3, [r7, #20]
 80087da:	4293      	cmp	r3, r2
 80087dc:	bf34      	ite	cc
 80087de:	2301      	movcc	r3, #1
 80087e0:	2300      	movcs	r3, #0
 80087e2:	b2db      	uxtb	r3, r3
 80087e4:	2b00      	cmp	r3, #0
 80087e6:	d03c      	beq.n	8008862 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x1ae>
    input_tensors_[i] = allocator_.AllocatePersistentTfLiteTensor(
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	6e9e      	ldr	r6, [r3, #104]	; 0x68
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	6e9b      	ldr	r3, [r3, #104]	; 0x68
        model_, graph_.GetAllocations(), inputs().Get(i), 0);
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	681d      	ldr	r5, [r3, #0]
    input_tensors_[i] = allocator_.AllocatePersistentTfLiteTensor(
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	603b      	str	r3, [r7, #0]
        model_, graph_.GetAllocations(), inputs().Get(i), 0);
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	336c      	adds	r3, #108	; 0x6c
 80087fe:	4618      	mov	r0, r3
 8008800:	f7ff fcee 	bl	80081e0 <_ZN6tflite10MicroGraph14GetAllocationsEv>
 8008804:	4680      	mov	r8, r0
 8008806:	6878      	ldr	r0, [r7, #4]
 8008808:	f7ff fd11 	bl	800822e <_ZNK6tflite16MicroInterpreter6inputsEv>
 800880c:	4603      	mov	r3, r0
 800880e:	6979      	ldr	r1, [r7, #20]
 8008810:	4618      	mov	r0, r3
 8008812:	f7fb fce7 	bl	80041e4 <_ZNK11flatbuffers6VectorIlE3GetEm>
 8008816:	4601      	mov	r1, r0
    input_tensors_[i] = allocator_.AllocatePersistentTfLiteTensor(
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 800881e:	697b      	ldr	r3, [r7, #20]
 8008820:	009b      	lsls	r3, r3, #2
 8008822:	18d4      	adds	r4, r2, r3
 8008824:	2300      	movs	r3, #0
 8008826:	9300      	str	r3, [sp, #0]
 8008828:	460b      	mov	r3, r1
 800882a:	4642      	mov	r2, r8
 800882c:	6839      	ldr	r1, [r7, #0]
 800882e:	4630      	mov	r0, r6
 8008830:	47a8      	blx	r5
 8008832:	4603      	mov	r3, r0
 8008834:	6023      	str	r3, [r4, #0]
    if (input_tensors_[i] == nullptr) {
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 800883c:	697b      	ldr	r3, [r7, #20]
 800883e:	009b      	lsls	r3, r3, #2
 8008840:	4413      	add	r3, r2
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	2b00      	cmp	r3, #0
 8008846:	d108      	bne.n	800885a <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x1a6>
      TF_LITE_REPORT_ERROR(error_reporter_,
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	689b      	ldr	r3, [r3, #8]
 800884c:	697a      	ldr	r2, [r7, #20]
 800884e:	494d      	ldr	r1, [pc, #308]	; (8008984 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x2d0>)
 8008850:	4618      	mov	r0, r3
 8008852:	f7fb f9a3 	bl	8003b9c <_ZN6tflite13ErrorReporter6ReportEPKcz>
                           "Failed to initialize input tensor %d", i);
      return kTfLiteError;
 8008856:	2301      	movs	r3, #1
 8008858:	e083      	b.n	8008962 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x2ae>
  for (size_t i = 0; i < inputs_size(); ++i) {
 800885a:	697b      	ldr	r3, [r7, #20]
 800885c:	3301      	adds	r3, #1
 800885e:	617b      	str	r3, [r7, #20]
 8008860:	e7b6      	b.n	80087d0 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x11c>
  }

  // TODO(b/162311891): Drop these allocations when the interpreter supports
  // handling buffers from TfLiteEvalTensor.
  output_tensors_ =
      reinterpret_cast<TfLiteTensor**>(allocator_.AllocatePersistentBuffer(
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	6e9d      	ldr	r5, [r3, #104]	; 0x68
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	6e9b      	ldr	r3, [r3, #104]	; 0x68
          sizeof(TfLiteTensor*) * outputs_size()));
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	330c      	adds	r3, #12
 800886e:	681c      	ldr	r4, [r3, #0]
 8008870:	6878      	ldr	r0, [r7, #4]
 8008872:	f7ff fcf3 	bl	800825c <_ZNK6tflite16MicroInterpreter12outputs_sizeEv>
 8008876:	4603      	mov	r3, r0
      reinterpret_cast<TfLiteTensor**>(allocator_.AllocatePersistentBuffer(
 8008878:	009b      	lsls	r3, r3, #2
 800887a:	4619      	mov	r1, r3
 800887c:	4628      	mov	r0, r5
 800887e:	47a0      	blx	r4
 8008880:	4602      	mov	r2, r0
  output_tensors_ =
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  if (output_tensors_ == nullptr) {
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800888e:	2b00      	cmp	r3, #0
 8008890:	d10d      	bne.n	80088ae <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x1fa>
    TF_LITE_REPORT_ERROR(
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	689c      	ldr	r4, [r3, #8]
 8008896:	6878      	ldr	r0, [r7, #4]
 8008898:	f7ff fce0 	bl	800825c <_ZNK6tflite16MicroInterpreter12outputs_sizeEv>
 800889c:	4603      	mov	r3, r0
 800889e:	009b      	lsls	r3, r3, #2
 80088a0:	461a      	mov	r2, r3
 80088a2:	4939      	ldr	r1, [pc, #228]	; (8008988 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x2d4>)
 80088a4:	4620      	mov	r0, r4
 80088a6:	f7fb f979 	bl	8003b9c <_ZN6tflite13ErrorReporter6ReportEPKcz>
        error_reporter_,
        "Failed to allocate memory for context->output_tensors_, "
        "%d bytes required",
        sizeof(TfLiteTensor*) * outputs_size());
    return kTfLiteError;
 80088aa:	2301      	movs	r3, #1
 80088ac:	e059      	b.n	8008962 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x2ae>
  }

  for (size_t i = 0; i < outputs_size(); ++i) {
 80088ae:	2300      	movs	r3, #0
 80088b0:	613b      	str	r3, [r7, #16]
 80088b2:	6878      	ldr	r0, [r7, #4]
 80088b4:	f7ff fcd2 	bl	800825c <_ZNK6tflite16MicroInterpreter12outputs_sizeEv>
 80088b8:	4602      	mov	r2, r0
 80088ba:	693b      	ldr	r3, [r7, #16]
 80088bc:	4293      	cmp	r3, r2
 80088be:	bf34      	ite	cc
 80088c0:	2301      	movcc	r3, #1
 80088c2:	2300      	movcs	r3, #0
 80088c4:	b2db      	uxtb	r3, r3
 80088c6:	2b00      	cmp	r3, #0
 80088c8:	d03c      	beq.n	8008944 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x290>
    output_tensors_[i] = allocator_.AllocatePersistentTfLiteTensor(
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	6e9e      	ldr	r6, [r3, #104]	; 0x68
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
        model_, graph_.GetAllocations(), outputs().Get(i), 0);
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	681d      	ldr	r5, [r3, #0]
    output_tensors_[i] = allocator_.AllocatePersistentTfLiteTensor(
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	681b      	ldr	r3, [r3, #0]
 80088da:	603b      	str	r3, [r7, #0]
        model_, graph_.GetAllocations(), outputs().Get(i), 0);
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	336c      	adds	r3, #108	; 0x6c
 80088e0:	4618      	mov	r0, r3
 80088e2:	f7ff fc7d 	bl	80081e0 <_ZN6tflite10MicroGraph14GetAllocationsEv>
 80088e6:	4680      	mov	r8, r0
 80088e8:	6878      	ldr	r0, [r7, #4]
 80088ea:	f7ff fcd2 	bl	8008292 <_ZNK6tflite16MicroInterpreter7outputsEv>
 80088ee:	4603      	mov	r3, r0
 80088f0:	6939      	ldr	r1, [r7, #16]
 80088f2:	4618      	mov	r0, r3
 80088f4:	f7fb fc76 	bl	80041e4 <_ZNK11flatbuffers6VectorIlE3GetEm>
 80088f8:	4601      	mov	r1, r0
    output_tensors_[i] = allocator_.AllocatePersistentTfLiteTensor(
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 8008900:	693b      	ldr	r3, [r7, #16]
 8008902:	009b      	lsls	r3, r3, #2
 8008904:	18d4      	adds	r4, r2, r3
 8008906:	2300      	movs	r3, #0
 8008908:	9300      	str	r3, [sp, #0]
 800890a:	460b      	mov	r3, r1
 800890c:	4642      	mov	r2, r8
 800890e:	6839      	ldr	r1, [r7, #0]
 8008910:	4630      	mov	r0, r6
 8008912:	47a8      	blx	r5
 8008914:	4603      	mov	r3, r0
 8008916:	6023      	str	r3, [r4, #0]
    if (output_tensors_[i] == nullptr) {
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 800891e:	693b      	ldr	r3, [r7, #16]
 8008920:	009b      	lsls	r3, r3, #2
 8008922:	4413      	add	r3, r2
 8008924:	681b      	ldr	r3, [r3, #0]
 8008926:	2b00      	cmp	r3, #0
 8008928:	d108      	bne.n	800893c <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x288>
      TF_LITE_REPORT_ERROR(error_reporter_,
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	689b      	ldr	r3, [r3, #8]
 800892e:	693a      	ldr	r2, [r7, #16]
 8008930:	4916      	ldr	r1, [pc, #88]	; (800898c <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x2d8>)
 8008932:	4618      	mov	r0, r3
 8008934:	f7fb f932 	bl	8003b9c <_ZN6tflite13ErrorReporter6ReportEPKcz>
                           "Failed to initialize output tensor %d", i);
      return kTfLiteError;
 8008938:	2301      	movs	r3, #1
 800893a:	e012      	b.n	8008962 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x2ae>
  for (size_t i = 0; i < outputs_size(); ++i) {
 800893c:	693b      	ldr	r3, [r7, #16]
 800893e:	3301      	adds	r3, #1
 8008940:	613b      	str	r3, [r7, #16]
 8008942:	e7b6      	b.n	80088b2 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x1fe>
    }
  }

  TF_LITE_ENSURE_STATUS(ResetVariableTensors());
 8008944:	6878      	ldr	r0, [r7, #4]
 8008946:	f000 f89d 	bl	8008a84 <_ZN6tflite16MicroInterpreter20ResetVariableTensorsEv>
 800894a:	4603      	mov	r3, r0
 800894c:	727b      	strb	r3, [r7, #9]
 800894e:	7a7b      	ldrb	r3, [r7, #9]
 8008950:	2b00      	cmp	r3, #0
 8008952:	d001      	beq.n	8008958 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x2a4>
 8008954:	7a7b      	ldrb	r3, [r7, #9]
 8008956:	e004      	b.n	8008962 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x2ae>

  tensors_allocated_ = true;
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	2201      	movs	r2, #1
 800895c:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
  return kTfLiteOk;
 8008960:	2300      	movs	r3, #0
}
 8008962:	4618      	mov	r0, r3
 8008964:	3718      	adds	r7, #24
 8008966:	46bd      	mov	sp, r7
 8008968:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800896c:	080111f0 	.word	0x080111f0
 8008970:	08008aa1 	.word	0x08008aa1
 8008974:	08008bf7 	.word	0x08008bf7
 8008978:	08008acd 	.word	0x08008acd
 800897c:	08008b03 	.word	0x08008b03
 8008980:	08011214 	.word	0x08011214
 8008984:	08011260 	.word	0x08011260
 8008988:	08011288 	.word	0x08011288
 800898c:	080112d4 	.word	0x080112d4

08008990 <_ZN6tflite16MicroInterpreter6InvokeEv>:

TfLiteStatus MicroInterpreter::Invoke() {
 8008990:	b580      	push	{r7, lr}
 8008992:	b084      	sub	sp, #16
 8008994:	af00      	add	r7, sp, #0
 8008996:	6078      	str	r0, [r7, #4]
  if (initialization_status_ != kTfLiteOk) {
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 800899e:	2b00      	cmp	r3, #0
 80089a0:	d007      	beq.n	80089b2 <_ZN6tflite16MicroInterpreter6InvokeEv+0x22>
    TF_LITE_REPORT_ERROR(error_reporter_,
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	689b      	ldr	r3, [r3, #8]
 80089a6:	4912      	ldr	r1, [pc, #72]	; (80089f0 <_ZN6tflite16MicroInterpreter6InvokeEv+0x60>)
 80089a8:	4618      	mov	r0, r3
 80089aa:	f7fb f8f7 	bl	8003b9c <_ZN6tflite13ErrorReporter6ReportEPKcz>
                         "Invoke() called after initialization failed\n");
    return kTfLiteError;
 80089ae:	2301      	movs	r3, #1
 80089b0:	e019      	b.n	80089e6 <_ZN6tflite16MicroInterpreter6InvokeEv+0x56>
  }

  // Ensure tensors are allocated before the interpreter is invoked to avoid
  // difficult to debug segfaults.
  if (!tensors_allocated_) {
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 80089b8:	f083 0301 	eor.w	r3, r3, #1
 80089bc:	b2db      	uxtb	r3, r3
 80089be:	2b00      	cmp	r3, #0
 80089c0:	d009      	beq.n	80089d6 <_ZN6tflite16MicroInterpreter6InvokeEv+0x46>
    TF_LITE_ENSURE_OK(&context_, AllocateTensors());
 80089c2:	6878      	ldr	r0, [r7, #4]
 80089c4:	f7ff fe76 	bl	80086b4 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv>
 80089c8:	4603      	mov	r3, r0
 80089ca:	73fb      	strb	r3, [r7, #15]
 80089cc:	7bfb      	ldrb	r3, [r7, #15]
 80089ce:	2b00      	cmp	r3, #0
 80089d0:	d001      	beq.n	80089d6 <_ZN6tflite16MicroInterpreter6InvokeEv+0x46>
 80089d2:	7bfb      	ldrb	r3, [r7, #15]
 80089d4:	e007      	b.n	80089e6 <_ZN6tflite16MicroInterpreter6InvokeEv+0x56>
  }
  return graph_.InvokeSubgraph(0);
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	336c      	adds	r3, #108	; 0x6c
 80089da:	2100      	movs	r1, #0
 80089dc:	4618      	mov	r0, r3
 80089de:	f7ff f9e5 	bl	8007dac <_ZN6tflite10MicroGraph14InvokeSubgraphEi>
 80089e2:	4603      	mov	r3, r0
 80089e4:	bf00      	nop
}
 80089e6:	4618      	mov	r0, r3
 80089e8:	3710      	adds	r7, #16
 80089ea:	46bd      	mov	sp, r7
 80089ec:	bd80      	pop	{r7, pc}
 80089ee:	bf00      	nop
 80089f0:	080112fc 	.word	0x080112fc

080089f4 <_ZN6tflite16MicroInterpreter5inputEj>:

TfLiteTensor* MicroInterpreter::input(size_t index) {
 80089f4:	b580      	push	{r7, lr}
 80089f6:	b084      	sub	sp, #16
 80089f8:	af00      	add	r7, sp, #0
 80089fa:	6078      	str	r0, [r7, #4]
 80089fc:	6039      	str	r1, [r7, #0]
  const size_t length = inputs_size();
 80089fe:	6878      	ldr	r0, [r7, #4]
 8008a00:	f7ff fbfa 	bl	80081f8 <_ZNK6tflite16MicroInterpreter11inputs_sizeEv>
 8008a04:	60f8      	str	r0, [r7, #12]
  if (index >= length) {
 8008a06:	683a      	ldr	r2, [r7, #0]
 8008a08:	68fb      	ldr	r3, [r7, #12]
 8008a0a:	429a      	cmp	r2, r3
 8008a0c:	d308      	bcc.n	8008a20 <_ZN6tflite16MicroInterpreter5inputEj+0x2c>
    TF_LITE_REPORT_ERROR(error_reporter_,
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	6898      	ldr	r0, [r3, #8]
 8008a12:	68fb      	ldr	r3, [r7, #12]
 8008a14:	683a      	ldr	r2, [r7, #0]
 8008a16:	4908      	ldr	r1, [pc, #32]	; (8008a38 <_ZN6tflite16MicroInterpreter5inputEj+0x44>)
 8008a18:	f7fb f8c0 	bl	8003b9c <_ZN6tflite13ErrorReporter6ReportEPKcz>
                         "Input index %d out of range (length is %d)", index,
                         length);
    return nullptr;
 8008a1c:	2300      	movs	r3, #0
 8008a1e:	e006      	b.n	8008a2e <_ZN6tflite16MicroInterpreter5inputEj+0x3a>
  }
  return input_tensors_[index];
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8008a26:	683b      	ldr	r3, [r7, #0]
 8008a28:	009b      	lsls	r3, r3, #2
 8008a2a:	4413      	add	r3, r2
 8008a2c:	681b      	ldr	r3, [r3, #0]
}
 8008a2e:	4618      	mov	r0, r3
 8008a30:	3710      	adds	r7, #16
 8008a32:	46bd      	mov	sp, r7
 8008a34:	bd80      	pop	{r7, pc}
 8008a36:	bf00      	nop
 8008a38:	0801132c 	.word	0x0801132c

08008a3c <_ZN6tflite16MicroInterpreter6outputEj>:

TfLiteTensor* MicroInterpreter::output(size_t index) {
 8008a3c:	b580      	push	{r7, lr}
 8008a3e:	b084      	sub	sp, #16
 8008a40:	af00      	add	r7, sp, #0
 8008a42:	6078      	str	r0, [r7, #4]
 8008a44:	6039      	str	r1, [r7, #0]
  const size_t length = outputs_size();
 8008a46:	6878      	ldr	r0, [r7, #4]
 8008a48:	f7ff fc08 	bl	800825c <_ZNK6tflite16MicroInterpreter12outputs_sizeEv>
 8008a4c:	60f8      	str	r0, [r7, #12]
  if (index >= length) {
 8008a4e:	683a      	ldr	r2, [r7, #0]
 8008a50:	68fb      	ldr	r3, [r7, #12]
 8008a52:	429a      	cmp	r2, r3
 8008a54:	d308      	bcc.n	8008a68 <_ZN6tflite16MicroInterpreter6outputEj+0x2c>
    TF_LITE_REPORT_ERROR(error_reporter_,
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	6898      	ldr	r0, [r3, #8]
 8008a5a:	68fb      	ldr	r3, [r7, #12]
 8008a5c:	683a      	ldr	r2, [r7, #0]
 8008a5e:	4908      	ldr	r1, [pc, #32]	; (8008a80 <_ZN6tflite16MicroInterpreter6outputEj+0x44>)
 8008a60:	f7fb f89c 	bl	8003b9c <_ZN6tflite13ErrorReporter6ReportEPKcz>
                         "Output index %d out of range (length is %d)", index,
                         length);
    return nullptr;
 8008a64:	2300      	movs	r3, #0
 8008a66:	e006      	b.n	8008a76 <_ZN6tflite16MicroInterpreter6outputEj+0x3a>
  }
  return output_tensors_[index];
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 8008a6e:	683b      	ldr	r3, [r7, #0]
 8008a70:	009b      	lsls	r3, r3, #2
 8008a72:	4413      	add	r3, r2
 8008a74:	681b      	ldr	r3, [r3, #0]
}
 8008a76:	4618      	mov	r0, r3
 8008a78:	3710      	adds	r7, #16
 8008a7a:	46bd      	mov	sp, r7
 8008a7c:	bd80      	pop	{r7, pc}
 8008a7e:	bf00      	nop
 8008a80:	08011358 	.word	0x08011358

08008a84 <_ZN6tflite16MicroInterpreter20ResetVariableTensorsEv>:

TfLiteStatus MicroInterpreter::ResetVariableTensors() {
 8008a84:	b580      	push	{r7, lr}
 8008a86:	b082      	sub	sp, #8
 8008a88:	af00      	add	r7, sp, #0
 8008a8a:	6078      	str	r0, [r7, #4]
  return graph_.ResetVariableTensors();
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	336c      	adds	r3, #108	; 0x6c
 8008a90:	4618      	mov	r0, r3
 8008a92:	f7ff fa2b 	bl	8007eec <_ZN6tflite10MicroGraph20ResetVariableTensorsEv>
 8008a96:	4603      	mov	r3, r0
}
 8008a98:	4618      	mov	r0, r3
 8008a9a:	3708      	adds	r7, #8
 8008a9c:	46bd      	mov	sp, r7
 8008a9e:	bd80      	pop	{r7, pc}

08008aa0 <_ZN6tflite16MicroInterpreter24AllocatePersistentBufferEP13TfLiteContextj>:

void* MicroInterpreter::AllocatePersistentBuffer(TfLiteContext* ctx,
                                                 size_t bytes) {
 8008aa0:	b580      	push	{r7, lr}
 8008aa2:	b082      	sub	sp, #8
 8008aa4:	af00      	add	r7, sp, #0
 8008aa6:	6078      	str	r0, [r7, #4]
 8008aa8:	6039      	str	r1, [r7, #0]
  return reinterpret_cast<MicroInterpreter*>(ctx->impl_)
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	68db      	ldr	r3, [r3, #12]
      ->allocator_.AllocatePersistentBuffer(bytes);
 8008aae:	6e9a      	ldr	r2, [r3, #104]	; 0x68
  return reinterpret_cast<MicroInterpreter*>(ctx->impl_)
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	68db      	ldr	r3, [r3, #12]
      ->allocator_.AllocatePersistentBuffer(bytes);
 8008ab4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	330c      	adds	r3, #12
 8008aba:	681b      	ldr	r3, [r3, #0]
 8008abc:	6839      	ldr	r1, [r7, #0]
 8008abe:	4610      	mov	r0, r2
 8008ac0:	4798      	blx	r3
 8008ac2:	4603      	mov	r3, r0
}
 8008ac4:	4618      	mov	r0, r3
 8008ac6:	3708      	adds	r7, #8
 8008ac8:	46bd      	mov	sp, r7
 8008aca:	bd80      	pop	{r7, pc}

08008acc <_ZN6tflite16MicroInterpreter27RequestScratchBufferInArenaEP13TfLiteContextjPi>:

TfLiteStatus MicroInterpreter::RequestScratchBufferInArena(TfLiteContext* ctx,
                                                           size_t bytes,
                                                           int* buffer_idx) {
 8008acc:	b590      	push	{r4, r7, lr}
 8008ace:	b087      	sub	sp, #28
 8008ad0:	af00      	add	r7, sp, #0
 8008ad2:	60f8      	str	r0, [r7, #12]
 8008ad4:	60b9      	str	r1, [r7, #8]
 8008ad6:	607a      	str	r2, [r7, #4]
  MicroInterpreter* interpreter =
 8008ad8:	68fb      	ldr	r3, [r7, #12]
 8008ada:	68db      	ldr	r3, [r3, #12]
 8008adc:	617b      	str	r3, [r7, #20]
      reinterpret_cast<MicroInterpreter*>(ctx->impl_);
  return interpreter->allocator_.RequestScratchBufferInArena(
 8008ade:	697b      	ldr	r3, [r7, #20]
 8008ae0:	6e9c      	ldr	r4, [r3, #104]	; 0x68
 8008ae2:	697b      	ldr	r3, [r7, #20]
 8008ae4:	336c      	adds	r3, #108	; 0x6c
 8008ae6:	4618      	mov	r0, r3
 8008ae8:	f7ff fb6e 	bl	80081c8 <_ZN6tflite10MicroGraph23GetCurrentSubgraphIndexEv>
 8008aec:	4602      	mov	r2, r0
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	68b9      	ldr	r1, [r7, #8]
 8008af2:	4620      	mov	r0, r4
 8008af4:	f7fd fe86 	bl	8006804 <_ZN6tflite14MicroAllocator27RequestScratchBufferInArenaEjiPi>
 8008af8:	4603      	mov	r3, r0
      bytes, interpreter->graph_.GetCurrentSubgraphIndex(), buffer_idx);
}
 8008afa:	4618      	mov	r0, r3
 8008afc:	371c      	adds	r7, #28
 8008afe:	46bd      	mov	sp, r7
 8008b00:	bd90      	pop	{r4, r7, pc}

08008b02 <_ZN6tflite16MicroInterpreter16GetScratchBufferEP13TfLiteContexti>:

void* MicroInterpreter::GetScratchBuffer(TfLiteContext* ctx, int buffer_idx) {
 8008b02:	b480      	push	{r7}
 8008b04:	b085      	sub	sp, #20
 8008b06:	af00      	add	r7, sp, #0
 8008b08:	6078      	str	r0, [r7, #4]
 8008b0a:	6039      	str	r1, [r7, #0]
  MicroInterpreter* interpreter =
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	68db      	ldr	r3, [r3, #12]
 8008b10:	60fb      	str	r3, [r7, #12]
      reinterpret_cast<MicroInterpreter*>(ctx->impl_);
  ScratchBufferHandle* handle =
      interpreter->scratch_buffer_handles_ + buffer_idx;
 8008b12:	68fb      	ldr	r3, [r7, #12]
 8008b14:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8008b18:	683b      	ldr	r3, [r7, #0]
 8008b1a:	009b      	lsls	r3, r3, #2
  ScratchBufferHandle* handle =
 8008b1c:	4413      	add	r3, r2
 8008b1e:	60bb      	str	r3, [r7, #8]
  return handle->data;
 8008b20:	68bb      	ldr	r3, [r7, #8]
 8008b22:	681b      	ldr	r3, [r3, #0]
}
 8008b24:	4618      	mov	r0, r3
 8008b26:	3714      	adds	r7, #20
 8008b28:	46bd      	mov	sp, r7
 8008b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b2e:	4770      	bx	lr

08008b30 <_ZN6tflite16MicroInterpreter13ReportOpErrorEP13TfLiteContextPKcz>:

void MicroInterpreter::ReportOpError(struct TfLiteContext* context,
                                     const char* format, ...) {
 8008b30:	b40e      	push	{r1, r2, r3}
 8008b32:	b580      	push	{r7, lr}
 8008b34:	b085      	sub	sp, #20
 8008b36:	af00      	add	r7, sp, #0
 8008b38:	6078      	str	r0, [r7, #4]
#ifndef TF_LITE_STRIP_ERROR_STRINGS
  MicroInterpreter* interpreter =
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	68db      	ldr	r3, [r3, #12]
 8008b3e:	60fb      	str	r3, [r7, #12]
      static_cast<MicroInterpreter*>(context->impl_);
  va_list args;
  va_start(args, format);
 8008b40:	f107 0320 	add.w	r3, r7, #32
 8008b44:	60bb      	str	r3, [r7, #8]
  TF_LITE_REPORT_ERROR(interpreter->error_reporter_, format, args);
 8008b46:	68fb      	ldr	r3, [r7, #12]
 8008b48:	6898      	ldr	r0, [r3, #8]
 8008b4a:	68fb      	ldr	r3, [r7, #12]
 8008b4c:	689b      	ldr	r3, [r3, #8]
 8008b4e:	681b      	ldr	r3, [r3, #0]
 8008b50:	3308      	adds	r3, #8
 8008b52:	681b      	ldr	r3, [r3, #0]
 8008b54:	68ba      	ldr	r2, [r7, #8]
 8008b56:	69f9      	ldr	r1, [r7, #28]
 8008b58:	4798      	blx	r3
  va_end(args);
#endif
}
 8008b5a:	bf00      	nop
 8008b5c:	3714      	adds	r7, #20
 8008b5e:	46bd      	mov	sp, r7
 8008b60:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008b64:	b003      	add	sp, #12
 8008b66:	4770      	bx	lr

08008b68 <_ZN6tflite16MicroInterpreter9GetTensorEPK13TfLiteContexti>:

TfLiteTensor* MicroInterpreter::GetTensor(const struct TfLiteContext* context,
                                          int tensor_idx) {
 8008b68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008b6c:	b086      	sub	sp, #24
 8008b6e:	af02      	add	r7, sp, #8
 8008b70:	6078      	str	r0, [r7, #4]
 8008b72:	6039      	str	r1, [r7, #0]
  MicroInterpreter* interpreter =
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	68db      	ldr	r3, [r3, #12]
 8008b78:	60fb      	str	r3, [r7, #12]
      static_cast<MicroInterpreter*>(context->impl_);
  return interpreter->allocator_.AllocateTempTfLiteTensor(
 8008b7a:	68fb      	ldr	r3, [r7, #12]
 8008b7c:	6e9d      	ldr	r5, [r3, #104]	; 0x68
 8008b7e:	68fb      	ldr	r3, [r7, #12]
 8008b80:	6e9b      	ldr	r3, [r3, #104]	; 0x68
      interpreter->model_, interpreter->graph_.GetAllocations(), tensor_idx,
      interpreter->get_subgraph_index());
 8008b82:	681b      	ldr	r3, [r3, #0]
 8008b84:	3304      	adds	r3, #4
 8008b86:	681c      	ldr	r4, [r3, #0]
  return interpreter->allocator_.AllocateTempTfLiteTensor(
 8008b88:	68fb      	ldr	r3, [r7, #12]
 8008b8a:	681e      	ldr	r6, [r3, #0]
      interpreter->model_, interpreter->graph_.GetAllocations(), tensor_idx,
 8008b8c:	68fb      	ldr	r3, [r7, #12]
 8008b8e:	336c      	adds	r3, #108	; 0x6c
 8008b90:	4618      	mov	r0, r3
 8008b92:	f7ff fb25 	bl	80081e0 <_ZN6tflite10MicroGraph14GetAllocationsEv>
 8008b96:	4680      	mov	r8, r0
  return interpreter->allocator_.AllocateTempTfLiteTensor(
 8008b98:	68f8      	ldr	r0, [r7, #12]
 8008b9a:	f7ff fb91 	bl	80082c0 <_ZN6tflite16MicroInterpreter18get_subgraph_indexEv>
 8008b9e:	4603      	mov	r3, r0
 8008ba0:	9300      	str	r3, [sp, #0]
 8008ba2:	683b      	ldr	r3, [r7, #0]
 8008ba4:	4642      	mov	r2, r8
 8008ba6:	4631      	mov	r1, r6
 8008ba8:	4628      	mov	r0, r5
 8008baa:	47a0      	blx	r4
 8008bac:	4603      	mov	r3, r0
}
 8008bae:	4618      	mov	r0, r3
 8008bb0:	3710      	adds	r7, #16
 8008bb2:	46bd      	mov	sp, r7
 8008bb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08008bb8 <_ZN6tflite16MicroInterpreter13GetEvalTensorEPK13TfLiteContexti>:

TfLiteEvalTensor* MicroInterpreter::GetEvalTensor(
    const struct TfLiteContext* context, int tensor_idx) {
 8008bb8:	b590      	push	{r4, r7, lr}
 8008bba:	b085      	sub	sp, #20
 8008bbc:	af00      	add	r7, sp, #0
 8008bbe:	6078      	str	r0, [r7, #4]
 8008bc0:	6039      	str	r1, [r7, #0]
  MicroInterpreter* interpreter =
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	68db      	ldr	r3, [r3, #12]
 8008bc6:	60fb      	str	r3, [r7, #12]
      reinterpret_cast<MicroInterpreter*>(context->impl_);
  return &interpreter->graph_
              .GetAllocations()[interpreter->get_subgraph_index()]
 8008bc8:	68fb      	ldr	r3, [r7, #12]
 8008bca:	336c      	adds	r3, #108	; 0x6c
 8008bcc:	4618      	mov	r0, r3
 8008bce:	f7ff fb07 	bl	80081e0 <_ZN6tflite10MicroGraph14GetAllocationsEv>
 8008bd2:	4604      	mov	r4, r0
 8008bd4:	68f8      	ldr	r0, [r7, #12]
 8008bd6:	f7ff fb73 	bl	80082c0 <_ZN6tflite16MicroInterpreter18get_subgraph_indexEv>
 8008bda:	4603      	mov	r3, r0
 8008bdc:	00db      	lsls	r3, r3, #3
 8008bde:	4423      	add	r3, r4
              .tensors[tensor_idx];
 8008be0:	6859      	ldr	r1, [r3, #4]
 8008be2:	683a      	ldr	r2, [r7, #0]
 8008be4:	4613      	mov	r3, r2
 8008be6:	005b      	lsls	r3, r3, #1
 8008be8:	4413      	add	r3, r2
 8008bea:	009b      	lsls	r3, r3, #2
 8008bec:	440b      	add	r3, r1
}
 8008bee:	4618      	mov	r0, r3
 8008bf0:	3714      	adds	r7, #20
 8008bf2:	46bd      	mov	sp, r7
 8008bf4:	bd90      	pop	{r4, r7, pc}

08008bf6 <_ZN6tflite16MicroInterpreter8GetGraphEP13TfLiteContextPP14TfLiteIntArray>:

TfLiteStatus MicroInterpreter::GetGraph(struct TfLiteContext* context,
                                        TfLiteIntArray** args) {
 8008bf6:	b480      	push	{r7}
 8008bf8:	b085      	sub	sp, #20
 8008bfa:	af00      	add	r7, sp, #0
 8008bfc:	6078      	str	r0, [r7, #4]
 8008bfe:	6039      	str	r1, [r7, #0]
  MicroInterpreter* interpreter =
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	68db      	ldr	r3, [r3, #12]
 8008c04:	60fb      	str	r3, [r7, #12]
      reinterpret_cast<MicroInterpreter*>(context->impl_);
  *args = reinterpret_cast<TfLiteIntArray*>(&interpreter->graph_);
 8008c06:	68fb      	ldr	r3, [r7, #12]
 8008c08:	f103 026c 	add.w	r2, r3, #108	; 0x6c
 8008c0c:	683b      	ldr	r3, [r7, #0]
 8008c0e:	601a      	str	r2, [r3, #0]
  return kTfLiteOk;
 8008c10:	2300      	movs	r3, #0
}
 8008c12:	4618      	mov	r0, r3
 8008c14:	3714      	adds	r7, #20
 8008c16:	46bd      	mov	sp, r7
 8008c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c1c:	4770      	bx	lr

08008c1e <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite12OperatorCodeEEEEEEET_t>:
  template<typename P> P GetPointer(voffset_t field) const {
 8008c1e:	b580      	push	{r7, lr}
 8008c20:	b082      	sub	sp, #8
 8008c22:	af00      	add	r7, sp, #0
 8008c24:	6078      	str	r0, [r7, #4]
 8008c26:	460b      	mov	r3, r1
 8008c28:	807b      	strh	r3, [r7, #2]
    return const_cast<Table *>(this)->GetPointer<P>(field);
 8008c2a:	887b      	ldrh	r3, [r7, #2]
 8008c2c:	4619      	mov	r1, r3
 8008c2e:	6878      	ldr	r0, [r7, #4]
 8008c30:	f000 f83a 	bl	8008ca8 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite12OperatorCodeEEEEEEET_t>
 8008c34:	4603      	mov	r3, r0
  }
 8008c36:	4618      	mov	r0, r3
 8008c38:	3708      	adds	r7, #8
 8008c3a:	46bd      	mov	sp, r7
 8008c3c:	bd80      	pop	{r7, pc}

08008c3e <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite12OperatorCodeEEEE4sizeEv>:
  uoffset_t size() const { return EndianScalar(length_); }
 8008c3e:	b580      	push	{r7, lr}
 8008c40:	b082      	sub	sp, #8
 8008c42:	af00      	add	r7, sp, #0
 8008c44:	6078      	str	r0, [r7, #4]
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	681b      	ldr	r3, [r3, #0]
 8008c4a:	4618      	mov	r0, r3
 8008c4c:	f7f8 ff2b 	bl	8001aa6 <_ZN11flatbuffers12EndianScalarImEET_S1_>
 8008c50:	4603      	mov	r3, r0
 8008c52:	4618      	mov	r0, r3
 8008c54:	3708      	adds	r7, #8
 8008c56:	46bd      	mov	sp, r7
 8008c58:	bd80      	pop	{r7, pc}
	...

08008c5c <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite12OperatorCodeEEEE3GetEm>:
  return_type Get(uoffset_t i) const {
 8008c5c:	b580      	push	{r7, lr}
 8008c5e:	b082      	sub	sp, #8
 8008c60:	af00      	add	r7, sp, #0
 8008c62:	6078      	str	r0, [r7, #4]
 8008c64:	6039      	str	r1, [r7, #0]
    FLATBUFFERS_ASSERT(i < size());
 8008c66:	6878      	ldr	r0, [r7, #4]
 8008c68:	f7ff ffe9 	bl	8008c3e <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite12OperatorCodeEEEE4sizeEv>
 8008c6c:	4602      	mov	r2, r0
 8008c6e:	683b      	ldr	r3, [r7, #0]
 8008c70:	4293      	cmp	r3, r2
 8008c72:	d306      	bcc.n	8008c82 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite12OperatorCodeEEEE3GetEm+0x26>
 8008c74:	4b09      	ldr	r3, [pc, #36]	; (8008c9c <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite12OperatorCodeEEEE3GetEm+0x40>)
 8008c76:	4a0a      	ldr	r2, [pc, #40]	; (8008ca0 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite12OperatorCodeEEEE3GetEm+0x44>)
 8008c78:	f44f 7183 	mov.w	r1, #262	; 0x106
 8008c7c:	4809      	ldr	r0, [pc, #36]	; (8008ca4 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite12OperatorCodeEEEE3GetEm+0x48>)
 8008c7e:	f002 fa05 	bl	800b08c <__assert_func>
    return IndirectHelper<T>::Read(Data(), i);
 8008c82:	6878      	ldr	r0, [r7, #4]
 8008c84:	f000 f844 	bl	8008d10 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite12OperatorCodeEEEE4DataEv>
 8008c88:	4603      	mov	r3, r0
 8008c8a:	6839      	ldr	r1, [r7, #0]
 8008c8c:	4618      	mov	r0, r3
 8008c8e:	f000 f82b 	bl	8008ce8 <_ZN11flatbuffers14IndirectHelperINS_6OffsetIN6tflite12OperatorCodeEEEE4ReadEPKhm>
 8008c92:	4603      	mov	r3, r0
  }
 8008c94:	4618      	mov	r0, r3
 8008c96:	3708      	adds	r7, #8
 8008c98:	46bd      	mov	sp, r7
 8008c9a:	bd80      	pop	{r7, pc}
 8008c9c:	08011384 	.word	0x08011384
 8008ca0:	080115f8 	.word	0x080115f8
 8008ca4:	08011460 	.word	0x08011460

08008ca8 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite12OperatorCodeEEEEEEET_t>:
  template<typename P> P GetPointer(voffset_t field) {
 8008ca8:	b580      	push	{r7, lr}
 8008caa:	b084      	sub	sp, #16
 8008cac:	af00      	add	r7, sp, #0
 8008cae:	6078      	str	r0, [r7, #4]
 8008cb0:	460b      	mov	r3, r1
 8008cb2:	807b      	strh	r3, [r7, #2]
    auto field_offset = GetOptionalFieldOffset(field);
 8008cb4:	887b      	ldrh	r3, [r7, #2]
 8008cb6:	4619      	mov	r1, r3
 8008cb8:	6878      	ldr	r0, [r7, #4]
 8008cba:	f7f8 fa15 	bl	80010e8 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
 8008cbe:	4603      	mov	r3, r0
 8008cc0:	81fb      	strh	r3, [r7, #14]
    auto p = data_ + field_offset;
 8008cc2:	687a      	ldr	r2, [r7, #4]
 8008cc4:	89fb      	ldrh	r3, [r7, #14]
 8008cc6:	4413      	add	r3, r2
 8008cc8:	60bb      	str	r3, [r7, #8]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 8008cca:	89fb      	ldrh	r3, [r7, #14]
 8008ccc:	2b00      	cmp	r3, #0
 8008cce:	d006      	beq.n	8008cde <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite12OperatorCodeEEEEEEET_t+0x36>
 8008cd0:	68b8      	ldr	r0, [r7, #8]
 8008cd2:	f7f8 ff01 	bl	8001ad8 <_ZN11flatbuffers10ReadScalarImEET_PKv>
 8008cd6:	4602      	mov	r2, r0
 8008cd8:	68bb      	ldr	r3, [r7, #8]
 8008cda:	4413      	add	r3, r2
                        : nullptr;
 8008cdc:	e000      	b.n	8008ce0 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite12OperatorCodeEEEEEEET_t+0x38>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 8008cde:	2300      	movs	r3, #0
  }
 8008ce0:	4618      	mov	r0, r3
 8008ce2:	3710      	adds	r7, #16
 8008ce4:	46bd      	mov	sp, r7
 8008ce6:	bd80      	pop	{r7, pc}

08008ce8 <_ZN11flatbuffers14IndirectHelperINS_6OffsetIN6tflite12OperatorCodeEEEE4ReadEPKhm>:
  static return_type Read(const uint8_t *p, uoffset_t i) {
 8008ce8:	b580      	push	{r7, lr}
 8008cea:	b082      	sub	sp, #8
 8008cec:	af00      	add	r7, sp, #0
 8008cee:	6078      	str	r0, [r7, #4]
 8008cf0:	6039      	str	r1, [r7, #0]
    p += i * sizeof(uoffset_t);
 8008cf2:	683b      	ldr	r3, [r7, #0]
 8008cf4:	009b      	lsls	r3, r3, #2
 8008cf6:	687a      	ldr	r2, [r7, #4]
 8008cf8:	4413      	add	r3, r2
 8008cfa:	607b      	str	r3, [r7, #4]
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
 8008cfc:	6878      	ldr	r0, [r7, #4]
 8008cfe:	f7f8 feeb 	bl	8001ad8 <_ZN11flatbuffers10ReadScalarImEET_PKv>
 8008d02:	4602      	mov	r2, r0
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	4413      	add	r3, r2
  }
 8008d08:	4618      	mov	r0, r3
 8008d0a:	3708      	adds	r7, #8
 8008d0c:	46bd      	mov	sp, r7
 8008d0e:	bd80      	pop	{r7, pc}

08008d10 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite12OperatorCodeEEEE4DataEv>:
  const uint8_t *Data() const {
 8008d10:	b480      	push	{r7}
 8008d12:	b083      	sub	sp, #12
 8008d14:	af00      	add	r7, sp, #0
 8008d16:	6078      	str	r0, [r7, #4]
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	3304      	adds	r3, #4
  }
 8008d1c:	4618      	mov	r0, r3
 8008d1e:	370c      	adds	r7, #12
 8008d20:	46bd      	mov	sp, r7
 8008d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d26:	4770      	bx	lr

08008d28 <_ZN12_GLOBAL__N_120ReverseStringInPlaceEPcS0_>:

// All input buffers to the number conversion functions must be this long.
const int kFastToBufferSize = 48;

// Reverses a zero-terminated string in-place.
char* ReverseStringInPlace(char* start, char* end) {
 8008d28:	b480      	push	{r7}
 8008d2a:	b087      	sub	sp, #28
 8008d2c:	af00      	add	r7, sp, #0
 8008d2e:	6078      	str	r0, [r7, #4]
 8008d30:	6039      	str	r1, [r7, #0]
  char* p1 = start;
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	617b      	str	r3, [r7, #20]
  char* p2 = end - 1;
 8008d36:	683b      	ldr	r3, [r7, #0]
 8008d38:	3b01      	subs	r3, #1
 8008d3a:	613b      	str	r3, [r7, #16]
  while (p1 < p2) {
 8008d3c:	697a      	ldr	r2, [r7, #20]
 8008d3e:	693b      	ldr	r3, [r7, #16]
 8008d40:	429a      	cmp	r2, r3
 8008d42:	d20e      	bcs.n	8008d62 <_ZN12_GLOBAL__N_120ReverseStringInPlaceEPcS0_+0x3a>
    char tmp = *p1;
 8008d44:	697b      	ldr	r3, [r7, #20]
 8008d46:	781b      	ldrb	r3, [r3, #0]
 8008d48:	73fb      	strb	r3, [r7, #15]
    *p1++ = *p2;
 8008d4a:	697b      	ldr	r3, [r7, #20]
 8008d4c:	1c5a      	adds	r2, r3, #1
 8008d4e:	617a      	str	r2, [r7, #20]
 8008d50:	693a      	ldr	r2, [r7, #16]
 8008d52:	7812      	ldrb	r2, [r2, #0]
 8008d54:	701a      	strb	r2, [r3, #0]
    *p2-- = tmp;
 8008d56:	693b      	ldr	r3, [r7, #16]
 8008d58:	1e5a      	subs	r2, r3, #1
 8008d5a:	613a      	str	r2, [r7, #16]
 8008d5c:	7bfa      	ldrb	r2, [r7, #15]
 8008d5e:	701a      	strb	r2, [r3, #0]
  while (p1 < p2) {
 8008d60:	e7ec      	b.n	8008d3c <_ZN12_GLOBAL__N_120ReverseStringInPlaceEPcS0_+0x14>
  }
  return start;
 8008d62:	687b      	ldr	r3, [r7, #4]
}
 8008d64:	4618      	mov	r0, r3
 8008d66:	371c      	adds	r7, #28
 8008d68:	46bd      	mov	sp, r7
 8008d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d6e:	4770      	bx	lr

08008d70 <_ZN12_GLOBAL__N_19StrCatStrEPciPKc>:

// Appends a string to a string, in-place. You need to pass in the maximum
// string length as the second argument.
char* StrCatStr(char* main, int main_max_length, const char* to_append) {
 8008d70:	b480      	push	{r7}
 8008d72:	b087      	sub	sp, #28
 8008d74:	af00      	add	r7, sp, #0
 8008d76:	60f8      	str	r0, [r7, #12]
 8008d78:	60b9      	str	r1, [r7, #8]
 8008d7a:	607a      	str	r2, [r7, #4]
  char* current = main;
 8008d7c:	68fb      	ldr	r3, [r7, #12]
 8008d7e:	617b      	str	r3, [r7, #20]
  while (*current != 0) {
 8008d80:	697b      	ldr	r3, [r7, #20]
 8008d82:	781b      	ldrb	r3, [r3, #0]
 8008d84:	2b00      	cmp	r3, #0
 8008d86:	d003      	beq.n	8008d90 <_ZN12_GLOBAL__N_19StrCatStrEPciPKc+0x20>
    ++current;
 8008d88:	697b      	ldr	r3, [r7, #20]
 8008d8a:	3301      	adds	r3, #1
 8008d8c:	617b      	str	r3, [r7, #20]
  while (*current != 0) {
 8008d8e:	e7f7      	b.n	8008d80 <_ZN12_GLOBAL__N_19StrCatStrEPciPKc+0x10>
  }
  char* current_end = main + (main_max_length - 1);
 8008d90:	68bb      	ldr	r3, [r7, #8]
 8008d92:	3b01      	subs	r3, #1
 8008d94:	68fa      	ldr	r2, [r7, #12]
 8008d96:	4413      	add	r3, r2
 8008d98:	613b      	str	r3, [r7, #16]
  while ((*to_append != 0) && (current < current_end)) {
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	781b      	ldrb	r3, [r3, #0]
 8008d9e:	2b00      	cmp	r3, #0
 8008da0:	d00e      	beq.n	8008dc0 <_ZN12_GLOBAL__N_19StrCatStrEPciPKc+0x50>
 8008da2:	697a      	ldr	r2, [r7, #20]
 8008da4:	693b      	ldr	r3, [r7, #16]
 8008da6:	429a      	cmp	r2, r3
 8008da8:	d20a      	bcs.n	8008dc0 <_ZN12_GLOBAL__N_19StrCatStrEPciPKc+0x50>
    *current = *to_append;
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	781a      	ldrb	r2, [r3, #0]
 8008dae:	697b      	ldr	r3, [r7, #20]
 8008db0:	701a      	strb	r2, [r3, #0]
    ++current;
 8008db2:	697b      	ldr	r3, [r7, #20]
 8008db4:	3301      	adds	r3, #1
 8008db6:	617b      	str	r3, [r7, #20]
    ++to_append;
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	3301      	adds	r3, #1
 8008dbc:	607b      	str	r3, [r7, #4]
  while ((*to_append != 0) && (current < current_end)) {
 8008dbe:	e7ec      	b.n	8008d9a <_ZN12_GLOBAL__N_19StrCatStrEPciPKc+0x2a>
  }
  *current = 0;
 8008dc0:	697b      	ldr	r3, [r7, #20]
 8008dc2:	2200      	movs	r2, #0
 8008dc4:	701a      	strb	r2, [r3, #0]
  return current;
 8008dc6:	697b      	ldr	r3, [r7, #20]
}
 8008dc8:	4618      	mov	r0, r3
 8008dca:	371c      	adds	r7, #28
 8008dcc:	46bd      	mov	sp, r7
 8008dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dd2:	4770      	bx	lr

08008dd4 <_ZN12_GLOBAL__N_122FastUInt32ToBufferLeftEmPci>:

// Populates the provided buffer with an ASCII representation of the number.
char* FastUInt32ToBufferLeft(uint32_t i, char* buffer, int base) {
 8008dd4:	b580      	push	{r7, lr}
 8008dd6:	b088      	sub	sp, #32
 8008dd8:	af00      	add	r7, sp, #0
 8008dda:	60f8      	str	r0, [r7, #12]
 8008ddc:	60b9      	str	r1, [r7, #8]
 8008dde:	607a      	str	r2, [r7, #4]
  char* start = buffer;
 8008de0:	68bb      	ldr	r3, [r7, #8]
 8008de2:	61bb      	str	r3, [r7, #24]
  do {
    int32_t digit = i % base;
 8008de4:	687a      	ldr	r2, [r7, #4]
 8008de6:	68fb      	ldr	r3, [r7, #12]
 8008de8:	fbb3 f1f2 	udiv	r1, r3, r2
 8008dec:	fb02 f201 	mul.w	r2, r2, r1
 8008df0:	1a9b      	subs	r3, r3, r2
 8008df2:	617b      	str	r3, [r7, #20]
    char character;
    if (digit < 10) {
 8008df4:	697b      	ldr	r3, [r7, #20]
 8008df6:	2b09      	cmp	r3, #9
 8008df8:	dc04      	bgt.n	8008e04 <_ZN12_GLOBAL__N_122FastUInt32ToBufferLeftEmPci+0x30>
      character = '0' + digit;
 8008dfa:	697b      	ldr	r3, [r7, #20]
 8008dfc:	b2db      	uxtb	r3, r3
 8008dfe:	3330      	adds	r3, #48	; 0x30
 8008e00:	77fb      	strb	r3, [r7, #31]
 8008e02:	e003      	b.n	8008e0c <_ZN12_GLOBAL__N_122FastUInt32ToBufferLeftEmPci+0x38>
    } else {
      character = 'a' + (digit - 10);
 8008e04:	697b      	ldr	r3, [r7, #20]
 8008e06:	b2db      	uxtb	r3, r3
 8008e08:	3357      	adds	r3, #87	; 0x57
 8008e0a:	77fb      	strb	r3, [r7, #31]
    }
    *buffer++ = character;
 8008e0c:	68bb      	ldr	r3, [r7, #8]
 8008e0e:	1c5a      	adds	r2, r3, #1
 8008e10:	60ba      	str	r2, [r7, #8]
 8008e12:	7ffa      	ldrb	r2, [r7, #31]
 8008e14:	701a      	strb	r2, [r3, #0]
    i /= base;
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	68fa      	ldr	r2, [r7, #12]
 8008e1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8008e1e:	60fb      	str	r3, [r7, #12]
  } while (i > 0);
 8008e20:	68fb      	ldr	r3, [r7, #12]
 8008e22:	2b00      	cmp	r3, #0
 8008e24:	d000      	beq.n	8008e28 <_ZN12_GLOBAL__N_122FastUInt32ToBufferLeftEmPci+0x54>
  do {
 8008e26:	e7dd      	b.n	8008de4 <_ZN12_GLOBAL__N_122FastUInt32ToBufferLeftEmPci+0x10>
  *buffer = 0;
 8008e28:	68bb      	ldr	r3, [r7, #8]
 8008e2a:	2200      	movs	r2, #0
 8008e2c:	701a      	strb	r2, [r3, #0]
  ReverseStringInPlace(start, buffer);
 8008e2e:	68b9      	ldr	r1, [r7, #8]
 8008e30:	69b8      	ldr	r0, [r7, #24]
 8008e32:	f7ff ff79 	bl	8008d28 <_ZN12_GLOBAL__N_120ReverseStringInPlaceEPcS0_>
  return buffer;
 8008e36:	68bb      	ldr	r3, [r7, #8]
}
 8008e38:	4618      	mov	r0, r3
 8008e3a:	3720      	adds	r7, #32
 8008e3c:	46bd      	mov	sp, r7
 8008e3e:	bd80      	pop	{r7, pc}

08008e40 <_ZN12_GLOBAL__N_121FastInt32ToBufferLeftElPc>:

// Populates the provided buffer with an ASCII representation of the number.
char* FastInt32ToBufferLeft(int32_t i, char* buffer) {
 8008e40:	b580      	push	{r7, lr}
 8008e42:	b084      	sub	sp, #16
 8008e44:	af00      	add	r7, sp, #0
 8008e46:	6078      	str	r0, [r7, #4]
 8008e48:	6039      	str	r1, [r7, #0]
  uint32_t u = i;
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	60fb      	str	r3, [r7, #12]
  if (i < 0) {
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	2b00      	cmp	r3, #0
 8008e52:	da07      	bge.n	8008e64 <_ZN12_GLOBAL__N_121FastInt32ToBufferLeftElPc+0x24>
    *buffer++ = '-';
 8008e54:	683b      	ldr	r3, [r7, #0]
 8008e56:	1c5a      	adds	r2, r3, #1
 8008e58:	603a      	str	r2, [r7, #0]
 8008e5a:	222d      	movs	r2, #45	; 0x2d
 8008e5c:	701a      	strb	r2, [r3, #0]
    u = -u;
 8008e5e:	68fb      	ldr	r3, [r7, #12]
 8008e60:	425b      	negs	r3, r3
 8008e62:	60fb      	str	r3, [r7, #12]
  }
  return FastUInt32ToBufferLeft(u, buffer, 10);
 8008e64:	220a      	movs	r2, #10
 8008e66:	6839      	ldr	r1, [r7, #0]
 8008e68:	68f8      	ldr	r0, [r7, #12]
 8008e6a:	f7ff ffb3 	bl	8008dd4 <_ZN12_GLOBAL__N_122FastUInt32ToBufferLeftEmPci>
 8008e6e:	4603      	mov	r3, r0
}
 8008e70:	4618      	mov	r0, r3
 8008e72:	3710      	adds	r7, #16
 8008e74:	46bd      	mov	sp, r7
 8008e76:	bd80      	pop	{r7, pc}

08008e78 <_ZN12_GLOBAL__N_111StrCatInt32EPcil>:

// Converts a number to a string and appends it to another.
char* StrCatInt32(char* main, int main_max_length, int32_t number) {
 8008e78:	b580      	push	{r7, lr}
 8008e7a:	b090      	sub	sp, #64	; 0x40
 8008e7c:	af00      	add	r7, sp, #0
 8008e7e:	60f8      	str	r0, [r7, #12]
 8008e80:	60b9      	str	r1, [r7, #8]
 8008e82:	607a      	str	r2, [r7, #4]
  char number_string[kFastToBufferSize];
  FastInt32ToBufferLeft(number, number_string);
 8008e84:	f107 0310 	add.w	r3, r7, #16
 8008e88:	4619      	mov	r1, r3
 8008e8a:	6878      	ldr	r0, [r7, #4]
 8008e8c:	f7ff ffd8 	bl	8008e40 <_ZN12_GLOBAL__N_121FastInt32ToBufferLeftElPc>
  return StrCatStr(main, main_max_length, number_string);
 8008e90:	f107 0310 	add.w	r3, r7, #16
 8008e94:	461a      	mov	r2, r3
 8008e96:	68b9      	ldr	r1, [r7, #8]
 8008e98:	68f8      	ldr	r0, [r7, #12]
 8008e9a:	f7ff ff69 	bl	8008d70 <_ZN12_GLOBAL__N_19StrCatStrEPciPKc>
 8008e9e:	4603      	mov	r3, r0
}
 8008ea0:	4618      	mov	r0, r3
 8008ea2:	3740      	adds	r7, #64	; 0x40
 8008ea4:	46bd      	mov	sp, r7
 8008ea6:	bd80      	pop	{r7, pc}

08008ea8 <_ZN12_GLOBAL__N_112StrCatUInt32EPcimi>:

// Converts a number to a string and appends it to another.
char* StrCatUInt32(char* main, int main_max_length, uint32_t number, int base) {
 8008ea8:	b580      	push	{r7, lr}
 8008eaa:	b090      	sub	sp, #64	; 0x40
 8008eac:	af00      	add	r7, sp, #0
 8008eae:	60f8      	str	r0, [r7, #12]
 8008eb0:	60b9      	str	r1, [r7, #8]
 8008eb2:	607a      	str	r2, [r7, #4]
 8008eb4:	603b      	str	r3, [r7, #0]
  char number_string[kFastToBufferSize];
  FastUInt32ToBufferLeft(number, number_string, base);
 8008eb6:	f107 0310 	add.w	r3, r7, #16
 8008eba:	683a      	ldr	r2, [r7, #0]
 8008ebc:	4619      	mov	r1, r3
 8008ebe:	6878      	ldr	r0, [r7, #4]
 8008ec0:	f7ff ff88 	bl	8008dd4 <_ZN12_GLOBAL__N_122FastUInt32ToBufferLeftEmPci>
  return StrCatStr(main, main_max_length, number_string);
 8008ec4:	f107 0310 	add.w	r3, r7, #16
 8008ec8:	461a      	mov	r2, r3
 8008eca:	68b9      	ldr	r1, [r7, #8]
 8008ecc:	68f8      	ldr	r0, [r7, #12]
 8008ece:	f7ff ff4f 	bl	8008d70 <_ZN12_GLOBAL__N_19StrCatStrEPciPKc>
 8008ed2:	4603      	mov	r3, r0
}
 8008ed4:	4618      	mov	r0, r3
 8008ed6:	3740      	adds	r7, #64	; 0x40
 8008ed8:	46bd      	mov	sp, r7
 8008eda:	bd80      	pop	{r7, pc}

08008edc <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc>:

// Populates the provided buffer with ASCII representation of the float number.
// Avoids the use of any floating point instructions (since these aren't
// supported on many microcontrollers) and as a consequence prints values with
// power-of-two exponents.
char* FastFloatToBufferLeft(float f, char* buffer) {
 8008edc:	b590      	push	{r4, r7, lr}
 8008ede:	b09b      	sub	sp, #108	; 0x6c
 8008ee0:	af00      	add	r7, sp, #0
 8008ee2:	ed87 0a01 	vstr	s0, [r7, #4]
 8008ee6:	6038      	str	r0, [r7, #0]
  char* current = buffer;
 8008ee8:	683b      	ldr	r3, [r7, #0]
 8008eea:	667b      	str	r3, [r7, #100]	; 0x64
  char* current_end = buffer + (kFastToBufferSize - 1);
 8008eec:	683b      	ldr	r3, [r7, #0]
 8008eee:	332f      	adds	r3, #47	; 0x2f
 8008ef0:	653b      	str	r3, [r7, #80]	; 0x50
  // Access the bit fields of the floating point value to avoid requiring any
  // float instructions. These constants are derived from IEEE 754.
  const uint32_t sign_mask = 0x80000000;
 8008ef2:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008ef6:	64fb      	str	r3, [r7, #76]	; 0x4c
  const uint32_t exponent_mask = 0x7f800000;
 8008ef8:	f04f 43ff 	mov.w	r3, #2139095040	; 0x7f800000
 8008efc:	64bb      	str	r3, [r7, #72]	; 0x48
  const int32_t exponent_shift = 23;
 8008efe:	2317      	movs	r3, #23
 8008f00:	647b      	str	r3, [r7, #68]	; 0x44
  const int32_t exponent_bias = 127;
 8008f02:	237f      	movs	r3, #127	; 0x7f
 8008f04:	643b      	str	r3, [r7, #64]	; 0x40
  const uint32_t fraction_mask = 0x007fffff;
 8008f06:	4b6a      	ldr	r3, [pc, #424]	; (80090b0 <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0x1d4>)
 8008f08:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008f0a:	687b      	ldr	r3, [r7, #4]
  uint32_t u;
  memcpy(&u, &f, sizeof(int32_t));
 8008f0c:	61fb      	str	r3, [r7, #28]
  const int32_t exponent =
      ((u & exponent_mask) >> exponent_shift) - exponent_bias;
 8008f0e:	69fb      	ldr	r3, [r7, #28]
 8008f10:	0ddb      	lsrs	r3, r3, #23
 8008f12:	b2db      	uxtb	r3, r3
 8008f14:	3b7f      	subs	r3, #127	; 0x7f
  const int32_t exponent =
 8008f16:	63bb      	str	r3, [r7, #56]	; 0x38
  const uint32_t fraction = (u & fraction_mask);
 8008f18:	69fb      	ldr	r3, [r7, #28]
 8008f1a:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8008f1e:	637b      	str	r3, [r7, #52]	; 0x34
  // Expect ~0x2B1B9D3 for fraction.
  if (u & sign_mask) {
 8008f20:	69fb      	ldr	r3, [r7, #28]
 8008f22:	2b00      	cmp	r3, #0
 8008f24:	da05      	bge.n	8008f32 <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0x56>
    *current = '-';
 8008f26:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008f28:	222d      	movs	r2, #45	; 0x2d
 8008f2a:	701a      	strb	r2, [r3, #0]
    current += 1;
 8008f2c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008f2e:	3301      	adds	r3, #1
 8008f30:	667b      	str	r3, [r7, #100]	; 0x64
  }
  *current = 0;
 8008f32:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008f34:	2200      	movs	r2, #0
 8008f36:	701a      	strb	r2, [r3, #0]
  // These are special cases for infinities and not-a-numbers.
  if (exponent == 128) {
 8008f38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f3a:	2b80      	cmp	r3, #128	; 0x80
 8008f3c:	d118      	bne.n	8008f70 <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0x94>
    if (fraction == 0) {
 8008f3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008f40:	2b00      	cmp	r3, #0
 8008f42:	d10a      	bne.n	8008f5a <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0x7e>
      current = StrCatStr(current, (current_end - current), "Inf");
 8008f44:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008f46:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008f48:	1ad3      	subs	r3, r2, r3
 8008f4a:	4a5a      	ldr	r2, [pc, #360]	; (80090b4 <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0x1d8>)
 8008f4c:	4619      	mov	r1, r3
 8008f4e:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8008f50:	f7ff ff0e 	bl	8008d70 <_ZN12_GLOBAL__N_19StrCatStrEPciPKc>
 8008f54:	6678      	str	r0, [r7, #100]	; 0x64
      return current;
 8008f56:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008f58:	e0a5      	b.n	80090a6 <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0x1ca>
    } else {
      current = StrCatStr(current, (current_end - current), "NaN");
 8008f5a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008f5c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008f5e:	1ad3      	subs	r3, r2, r3
 8008f60:	4a55      	ldr	r2, [pc, #340]	; (80090b8 <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0x1dc>)
 8008f62:	4619      	mov	r1, r3
 8008f64:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8008f66:	f7ff ff03 	bl	8008d70 <_ZN12_GLOBAL__N_19StrCatStrEPciPKc>
 8008f6a:	6678      	str	r0, [r7, #100]	; 0x64
      return current;
 8008f6c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008f6e:	e09a      	b.n	80090a6 <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0x1ca>
  // correct decimal digits we need to scale our value before passing it to the
  // conversion function. This scale should be 10000000/8388608 = 1.1920928955.
  // We can approximate this using multiply-adds and right-shifts using the
  // values in this array. The 1. portion of the number string is printed out
  // in a fixed way before the fraction, below.
  const int32_t scale_shifts_size = 13;
 8008f70:	230d      	movs	r3, #13
 8008f72:	633b      	str	r3, [r7, #48]	; 0x30
  const int8_t scale_shifts[13] = {3,  4,  8,  11, 13, 14, 17,
 8008f74:	4b51      	ldr	r3, [pc, #324]	; (80090bc <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0x1e0>)
 8008f76:	f107 040c 	add.w	r4, r7, #12
 8008f7a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8008f7c:	c407      	stmia	r4!, {r0, r1, r2}
 8008f7e:	7023      	strb	r3, [r4, #0]
                                   18, 19, 20, 21, 22, 23};
  uint32_t scaled_fraction = fraction;
 8008f80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008f82:	663b      	str	r3, [r7, #96]	; 0x60
  for (int i = 0; i < scale_shifts_size; ++i) {
 8008f84:	2300      	movs	r3, #0
 8008f86:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008f88:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008f8a:	2b0c      	cmp	r3, #12
 8008f8c:	dc0f      	bgt.n	8008fae <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0xd2>
    scaled_fraction += (fraction >> scale_shifts[i]);
 8008f8e:	f107 020c 	add.w	r2, r7, #12
 8008f92:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008f94:	4413      	add	r3, r2
 8008f96:	f993 3000 	ldrsb.w	r3, [r3]
 8008f9a:	461a      	mov	r2, r3
 8008f9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008f9e:	40d3      	lsrs	r3, r2
 8008fa0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8008fa2:	4413      	add	r3, r2
 8008fa4:	663b      	str	r3, [r7, #96]	; 0x60
  for (int i = 0; i < scale_shifts_size; ++i) {
 8008fa6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008fa8:	3301      	adds	r3, #1
 8008faa:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008fac:	e7ec      	b.n	8008f88 <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0xac>
  }
  *current = '1';
 8008fae:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008fb0:	2231      	movs	r2, #49	; 0x31
 8008fb2:	701a      	strb	r2, [r3, #0]
  current += 1;
 8008fb4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008fb6:	3301      	adds	r3, #1
 8008fb8:	667b      	str	r3, [r7, #100]	; 0x64
  *current = '.';
 8008fba:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008fbc:	222e      	movs	r2, #46	; 0x2e
 8008fbe:	701a      	strb	r2, [r3, #0]
  current += 1;
 8008fc0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008fc2:	3301      	adds	r3, #1
 8008fc4:	667b      	str	r3, [r7, #100]	; 0x64
  *current = 0;
 8008fc6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008fc8:	2200      	movs	r2, #0
 8008fca:	701a      	strb	r2, [r3, #0]

  // Prepend leading zeros to fill in all 7 bytes of the fraction. Truncate
  // zeros off the end of the fraction. Every fractional value takes 7 bytes.
  // For example, 2500 would be written into the buffer as 0002500 since it
  // represents .00025.
  constexpr int kMaxFractionalDigits = 7;
 8008fcc:	2307      	movs	r3, #7
 8008fce:	62fb      	str	r3, [r7, #44]	; 0x2c

  // Abort early if there is not enough space in the buffer.
  if (current_end - current <= kMaxFractionalDigits) {
 8008fd0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008fd2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008fd4:	1ad3      	subs	r3, r2, r3
 8008fd6:	2b07      	cmp	r3, #7
 8008fd8:	dc01      	bgt.n	8008fde <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0x102>
    return current;
 8008fda:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008fdc:	e063      	b.n	80090a6 <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0x1ca>
  }

  // Pre-fill buffer with zeros to ensure zero-truncation works properly.
  for (int i = 1; i < kMaxFractionalDigits; i++) {
 8008fde:	2301      	movs	r3, #1
 8008fe0:	65bb      	str	r3, [r7, #88]	; 0x58
 8008fe2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008fe4:	2b06      	cmp	r3, #6
 8008fe6:	dc08      	bgt.n	8008ffa <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0x11e>
    *(current + i) = '0';
 8008fe8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008fea:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8008fec:	4413      	add	r3, r2
 8008fee:	2230      	movs	r2, #48	; 0x30
 8008ff0:	701a      	strb	r2, [r3, #0]
  for (int i = 1; i < kMaxFractionalDigits; i++) {
 8008ff2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008ff4:	3301      	adds	r3, #1
 8008ff6:	65bb      	str	r3, [r7, #88]	; 0x58
 8008ff8:	e7f3      	b.n	8008fe2 <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0x106>
  }

  // Track how large the fraction is to add leading zeros.
  char* previous = current;
 8008ffa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008ffc:	62bb      	str	r3, [r7, #40]	; 0x28
  current = StrCatUInt32(current, (current_end - current), scaled_fraction, 10);
 8008ffe:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8009000:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009002:	1ad1      	subs	r1, r2, r3
 8009004:	230a      	movs	r3, #10
 8009006:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8009008:	6e78      	ldr	r0, [r7, #100]	; 0x64
 800900a:	f7ff ff4d 	bl	8008ea8 <_ZN12_GLOBAL__N_112StrCatUInt32EPcimi>
 800900e:	6678      	str	r0, [r7, #100]	; 0x64
  int fraction_digits = current - previous;
 8009010:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8009012:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009014:	1ad3      	subs	r3, r2, r3
 8009016:	627b      	str	r3, [r7, #36]	; 0x24
  int leading_zeros = kMaxFractionalDigits - fraction_digits;
 8009018:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800901a:	f1c3 0307 	rsb	r3, r3, #7
 800901e:	623b      	str	r3, [r7, #32]

  // Overwrite the null terminator from StrCatUInt32 to ensure zero-trunctaion
  // works properly.
  *current = '0';
 8009020:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009022:	2230      	movs	r2, #48	; 0x30
 8009024:	701a      	strb	r2, [r3, #0]

  // Shift fraction values and prepend zeros if necessary.
  if (leading_zeros != 0) {
 8009026:	6a3b      	ldr	r3, [r7, #32]
 8009028:	2b00      	cmp	r3, #0
 800902a:	d018      	beq.n	800905e <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0x182>
    for (int i = 0; i < fraction_digits; i++) {
 800902c:	2300      	movs	r3, #0
 800902e:	657b      	str	r3, [r7, #84]	; 0x54
 8009030:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8009032:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009034:	429a      	cmp	r2, r3
 8009036:	da0f      	bge.n	8009058 <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0x17c>
      current--;
 8009038:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800903a:	3b01      	subs	r3, #1
 800903c:	667b      	str	r3, [r7, #100]	; 0x64
      *(current + leading_zeros) = *current;
 800903e:	6a3b      	ldr	r3, [r7, #32]
 8009040:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8009042:	4413      	add	r3, r2
 8009044:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8009046:	7812      	ldrb	r2, [r2, #0]
 8009048:	701a      	strb	r2, [r3, #0]
      *current = '0';
 800904a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800904c:	2230      	movs	r2, #48	; 0x30
 800904e:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < fraction_digits; i++) {
 8009050:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009052:	3301      	adds	r3, #1
 8009054:	657b      	str	r3, [r7, #84]	; 0x54
 8009056:	e7eb      	b.n	8009030 <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0x154>
    }
    current += kMaxFractionalDigits;
 8009058:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800905a:	3307      	adds	r3, #7
 800905c:	667b      	str	r3, [r7, #100]	; 0x64
  }

  // Truncate trailing zeros for cleaner logs. Ensure we leave at least one
  // fractional character for the case when scaled_fraction is 0.
  while (*(current - 1) == '0' && (current - 1) > previous) {
 800905e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009060:	3b01      	subs	r3, #1
 8009062:	781b      	ldrb	r3, [r3, #0]
 8009064:	2b30      	cmp	r3, #48	; 0x30
 8009066:	d108      	bne.n	800907a <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0x19e>
 8009068:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800906a:	3b01      	subs	r3, #1
 800906c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800906e:	429a      	cmp	r2, r3
 8009070:	d203      	bcs.n	800907a <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0x19e>
    current--;
 8009072:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009074:	3b01      	subs	r3, #1
 8009076:	667b      	str	r3, [r7, #100]	; 0x64
  while (*(current - 1) == '0' && (current - 1) > previous) {
 8009078:	e7f1      	b.n	800905e <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0x182>
  }
  *current = 0;
 800907a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800907c:	2200      	movs	r2, #0
 800907e:	701a      	strb	r2, [r3, #0]
  current = StrCatStr(current, (current_end - current), "*2^");
 8009080:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8009082:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009084:	1ad3      	subs	r3, r2, r3
 8009086:	4a0e      	ldr	r2, [pc, #56]	; (80090c0 <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0x1e4>)
 8009088:	4619      	mov	r1, r3
 800908a:	6e78      	ldr	r0, [r7, #100]	; 0x64
 800908c:	f7ff fe70 	bl	8008d70 <_ZN12_GLOBAL__N_19StrCatStrEPciPKc>
 8009090:	6678      	str	r0, [r7, #100]	; 0x64
  current = StrCatInt32(current, (current_end - current), exponent);
 8009092:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8009094:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009096:	1ad3      	subs	r3, r2, r3
 8009098:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800909a:	4619      	mov	r1, r3
 800909c:	6e78      	ldr	r0, [r7, #100]	; 0x64
 800909e:	f7ff feeb 	bl	8008e78 <_ZN12_GLOBAL__N_111StrCatInt32EPcil>
 80090a2:	6678      	str	r0, [r7, #100]	; 0x64
  return current;
 80090a4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
}
 80090a6:	4618      	mov	r0, r3
 80090a8:	376c      	adds	r7, #108	; 0x6c
 80090aa:	46bd      	mov	sp, r7
 80090ac:	bd90      	pop	{r4, r7, pc}
 80090ae:	bf00      	nop
 80090b0:	007fffff 	.word	0x007fffff
 80090b4:	080117f8 	.word	0x080117f8
 80090b8:	080117fc 	.word	0x080117fc
 80090bc:	08011804 	.word	0x08011804
 80090c0:	08011800 	.word	0x08011800

080090c4 <_ZN12_GLOBAL__N_111FormatInt32EPcl>:

int FormatInt32(char* output, int32_t i) {
 80090c4:	b580      	push	{r7, lr}
 80090c6:	b082      	sub	sp, #8
 80090c8:	af00      	add	r7, sp, #0
 80090ca:	6078      	str	r0, [r7, #4]
 80090cc:	6039      	str	r1, [r7, #0]
  return static_cast<int>(FastInt32ToBufferLeft(i, output) - output);
 80090ce:	6879      	ldr	r1, [r7, #4]
 80090d0:	6838      	ldr	r0, [r7, #0]
 80090d2:	f7ff feb5 	bl	8008e40 <_ZN12_GLOBAL__N_121FastInt32ToBufferLeftElPc>
 80090d6:	4602      	mov	r2, r0
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	1ad3      	subs	r3, r2, r3
}
 80090dc:	4618      	mov	r0, r3
 80090de:	3708      	adds	r7, #8
 80090e0:	46bd      	mov	sp, r7
 80090e2:	bd80      	pop	{r7, pc}

080090e4 <_ZN12_GLOBAL__N_112FormatUInt32EPcm>:

int FormatUInt32(char* output, uint32_t i) {
 80090e4:	b580      	push	{r7, lr}
 80090e6:	b082      	sub	sp, #8
 80090e8:	af00      	add	r7, sp, #0
 80090ea:	6078      	str	r0, [r7, #4]
 80090ec:	6039      	str	r1, [r7, #0]
  return static_cast<int>(FastUInt32ToBufferLeft(i, output, 10) - output);
 80090ee:	220a      	movs	r2, #10
 80090f0:	6879      	ldr	r1, [r7, #4]
 80090f2:	6838      	ldr	r0, [r7, #0]
 80090f4:	f7ff fe6e 	bl	8008dd4 <_ZN12_GLOBAL__N_122FastUInt32ToBufferLeftEmPci>
 80090f8:	4602      	mov	r2, r0
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	1ad3      	subs	r3, r2, r3
}
 80090fe:	4618      	mov	r0, r3
 8009100:	3708      	adds	r7, #8
 8009102:	46bd      	mov	sp, r7
 8009104:	bd80      	pop	{r7, pc}

08009106 <_ZN12_GLOBAL__N_19FormatHexEPcm>:

int FormatHex(char* output, uint32_t i) {
 8009106:	b580      	push	{r7, lr}
 8009108:	b082      	sub	sp, #8
 800910a:	af00      	add	r7, sp, #0
 800910c:	6078      	str	r0, [r7, #4]
 800910e:	6039      	str	r1, [r7, #0]
  return static_cast<int>(FastUInt32ToBufferLeft(i, output, 16) - output);
 8009110:	2210      	movs	r2, #16
 8009112:	6879      	ldr	r1, [r7, #4]
 8009114:	6838      	ldr	r0, [r7, #0]
 8009116:	f7ff fe5d 	bl	8008dd4 <_ZN12_GLOBAL__N_122FastUInt32ToBufferLeftEmPci>
 800911a:	4602      	mov	r2, r0
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	1ad3      	subs	r3, r2, r3
}
 8009120:	4618      	mov	r0, r3
 8009122:	3708      	adds	r7, #8
 8009124:	46bd      	mov	sp, r7
 8009126:	bd80      	pop	{r7, pc}

08009128 <_ZN12_GLOBAL__N_111FormatFloatEPcf>:

int FormatFloat(char* output, float i) {
 8009128:	b580      	push	{r7, lr}
 800912a:	b082      	sub	sp, #8
 800912c:	af00      	add	r7, sp, #0
 800912e:	6078      	str	r0, [r7, #4]
 8009130:	ed87 0a00 	vstr	s0, [r7]
  return static_cast<int>(FastFloatToBufferLeft(i, output) - output);
 8009134:	6878      	ldr	r0, [r7, #4]
 8009136:	ed97 0a00 	vldr	s0, [r7]
 800913a:	f7ff fecf 	bl	8008edc <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc>
 800913e:	4602      	mov	r2, r0
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	1ad3      	subs	r3, r2, r3
}
 8009144:	4618      	mov	r0, r3
 8009146:	3708      	adds	r7, #8
 8009148:	46bd      	mov	sp, r7
 800914a:	bd80      	pop	{r7, pc}

0800914c <MicroVsnprintf>:

}  // namespace

extern "C" int MicroVsnprintf(char* output, int len, const char* format,
                              va_list args) {
 800914c:	b590      	push	{r4, r7, lr}
 800914e:	b08b      	sub	sp, #44	; 0x2c
 8009150:	af00      	add	r7, sp, #0
 8009152:	60f8      	str	r0, [r7, #12]
 8009154:	60b9      	str	r1, [r7, #8]
 8009156:	607a      	str	r2, [r7, #4]
 8009158:	603b      	str	r3, [r7, #0]
  int output_index = 0;
 800915a:	2300      	movs	r3, #0
 800915c:	627b      	str	r3, [r7, #36]	; 0x24
  const char* current = format;
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	623b      	str	r3, [r7, #32]
  // One extra character must be left for the null terminator.
  const int usable_length = len - 1;
 8009162:	68bb      	ldr	r3, [r7, #8]
 8009164:	3b01      	subs	r3, #1
 8009166:	61bb      	str	r3, [r7, #24]
  while (*current != '\0' && output_index < usable_length) {
 8009168:	6a3b      	ldr	r3, [r7, #32]
 800916a:	781b      	ldrb	r3, [r3, #0]
 800916c:	2b00      	cmp	r3, #0
 800916e:	f000 8151 	beq.w	8009414 <MicroVsnprintf+0x2c8>
 8009172:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009174:	69bb      	ldr	r3, [r7, #24]
 8009176:	429a      	cmp	r2, r3
 8009178:	f280 814c 	bge.w	8009414 <MicroVsnprintf+0x2c8>
    if (*current == '%') {
 800917c:	6a3b      	ldr	r3, [r7, #32]
 800917e:	781b      	ldrb	r3, [r3, #0]
 8009180:	2b25      	cmp	r3, #37	; 0x25
 8009182:	f040 813b 	bne.w	80093fc <MicroVsnprintf+0x2b0>
      current++;
 8009186:	6a3b      	ldr	r3, [r7, #32]
 8009188:	3301      	adds	r3, #1
 800918a:	623b      	str	r3, [r7, #32]
      switch (*current) {
 800918c:	6a3b      	ldr	r3, [r7, #32]
 800918e:	781b      	ldrb	r3, [r3, #0]
 8009190:	2b25      	cmp	r3, #37	; 0x25
 8009192:	f000 80e2 	beq.w	800935a <MicroVsnprintf+0x20e>
 8009196:	2b25      	cmp	r3, #37	; 0x25
 8009198:	dbe6      	blt.n	8009168 <MicroVsnprintf+0x1c>
 800919a:	2b78      	cmp	r3, #120	; 0x78
 800919c:	dce4      	bgt.n	8009168 <MicroVsnprintf+0x1c>
 800919e:	2b63      	cmp	r3, #99	; 0x63
 80091a0:	dbe2      	blt.n	8009168 <MicroVsnprintf+0x1c>
 80091a2:	3b63      	subs	r3, #99	; 0x63
 80091a4:	2b15      	cmp	r3, #21
 80091a6:	d8df      	bhi.n	8009168 <MicroVsnprintf+0x1c>
 80091a8:	a201      	add	r2, pc, #4	; (adr r2, 80091b0 <MicroVsnprintf+0x64>)
 80091aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80091ae:	bf00      	nop
 80091b0:	08009373 	.word	0x08009373
 80091b4:	08009209 	.word	0x08009209
 80091b8:	08009169 	.word	0x08009169
 80091bc:	080092ef 	.word	0x080092ef
 80091c0:	08009169 	.word	0x08009169
 80091c4:	08009169 	.word	0x08009169
 80091c8:	08009169 	.word	0x08009169
 80091cc:	08009169 	.word	0x08009169
 80091d0:	08009169 	.word	0x08009169
 80091d4:	08009169 	.word	0x08009169
 80091d8:	08009169 	.word	0x08009169
 80091dc:	08009169 	.word	0x08009169
 80091e0:	08009169 	.word	0x08009169
 80091e4:	08009169 	.word	0x08009169
 80091e8:	08009169 	.word	0x08009169
 80091ec:	08009169 	.word	0x08009169
 80091f0:	080093b1 	.word	0x080093b1
 80091f4:	08009169 	.word	0x08009169
 80091f8:	0800924b 	.word	0x0800924b
 80091fc:	08009169 	.word	0x08009169
 8009200:	08009169 	.word	0x08009169
 8009204:	0800928d 	.word	0x0800928d
        case 'd':
          // Cut off log message if format could exceed log buffer length.
          if (usable_length - output_index < kMaxIntCharsNeeded) {
 8009208:	69ba      	ldr	r2, [r7, #24]
 800920a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800920c:	1ad3      	subs	r3, r2, r3
 800920e:	2b0a      	cmp	r3, #10
 8009210:	dc09      	bgt.n	8009226 <MicroVsnprintf+0xda>
            output[output_index++] = '\0';
 8009212:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009214:	1c5a      	adds	r2, r3, #1
 8009216:	627a      	str	r2, [r7, #36]	; 0x24
 8009218:	461a      	mov	r2, r3
 800921a:	68fb      	ldr	r3, [r7, #12]
 800921c:	4413      	add	r3, r2
 800921e:	2200      	movs	r2, #0
 8009220:	701a      	strb	r2, [r3, #0]
            return output_index;
 8009222:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009224:	e0ff      	b.n	8009426 <MicroVsnprintf+0x2da>
          }
          output_index +=
              FormatInt32(&output[output_index], va_arg(args, int32_t));
 8009226:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009228:	68fa      	ldr	r2, [r7, #12]
 800922a:	18d0      	adds	r0, r2, r3
 800922c:	683b      	ldr	r3, [r7, #0]
 800922e:	1d1a      	adds	r2, r3, #4
 8009230:	603a      	str	r2, [r7, #0]
 8009232:	681b      	ldr	r3, [r3, #0]
 8009234:	4619      	mov	r1, r3
 8009236:	f7ff ff45 	bl	80090c4 <_ZN12_GLOBAL__N_111FormatInt32EPcl>
 800923a:	4602      	mov	r2, r0
          output_index +=
 800923c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800923e:	4413      	add	r3, r2
 8009240:	627b      	str	r3, [r7, #36]	; 0x24
          current++;
 8009242:	6a3b      	ldr	r3, [r7, #32]
 8009244:	3301      	adds	r3, #1
 8009246:	623b      	str	r3, [r7, #32]
          break;
 8009248:	e0e3      	b.n	8009412 <MicroVsnprintf+0x2c6>
        case 'u':
          if (usable_length - output_index < kMaxIntCharsNeeded) {
 800924a:	69ba      	ldr	r2, [r7, #24]
 800924c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800924e:	1ad3      	subs	r3, r2, r3
 8009250:	2b0a      	cmp	r3, #10
 8009252:	dc09      	bgt.n	8009268 <MicroVsnprintf+0x11c>
            output[output_index++] = '\0';
 8009254:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009256:	1c5a      	adds	r2, r3, #1
 8009258:	627a      	str	r2, [r7, #36]	; 0x24
 800925a:	461a      	mov	r2, r3
 800925c:	68fb      	ldr	r3, [r7, #12]
 800925e:	4413      	add	r3, r2
 8009260:	2200      	movs	r2, #0
 8009262:	701a      	strb	r2, [r3, #0]
            return output_index;
 8009264:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009266:	e0de      	b.n	8009426 <MicroVsnprintf+0x2da>
          }
          output_index +=
              FormatUInt32(&output[output_index], va_arg(args, uint32_t));
 8009268:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800926a:	68fa      	ldr	r2, [r7, #12]
 800926c:	18d0      	adds	r0, r2, r3
 800926e:	683b      	ldr	r3, [r7, #0]
 8009270:	1d1a      	adds	r2, r3, #4
 8009272:	603a      	str	r2, [r7, #0]
 8009274:	681b      	ldr	r3, [r3, #0]
 8009276:	4619      	mov	r1, r3
 8009278:	f7ff ff34 	bl	80090e4 <_ZN12_GLOBAL__N_112FormatUInt32EPcm>
 800927c:	4602      	mov	r2, r0
          output_index +=
 800927e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009280:	4413      	add	r3, r2
 8009282:	627b      	str	r3, [r7, #36]	; 0x24
          current++;
 8009284:	6a3b      	ldr	r3, [r7, #32]
 8009286:	3301      	adds	r3, #1
 8009288:	623b      	str	r3, [r7, #32]
          break;
 800928a:	e0c2      	b.n	8009412 <MicroVsnprintf+0x2c6>
        case 'x':
          if (usable_length - output_index < kMaxHexCharsNeeded) {
 800928c:	69ba      	ldr	r2, [r7, #24]
 800928e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009290:	1ad3      	subs	r3, r2, r3
 8009292:	2b09      	cmp	r3, #9
 8009294:	dc09      	bgt.n	80092aa <MicroVsnprintf+0x15e>
            output[output_index++] = '\0';
 8009296:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009298:	1c5a      	adds	r2, r3, #1
 800929a:	627a      	str	r2, [r7, #36]	; 0x24
 800929c:	461a      	mov	r2, r3
 800929e:	68fb      	ldr	r3, [r7, #12]
 80092a0:	4413      	add	r3, r2
 80092a2:	2200      	movs	r2, #0
 80092a4:	701a      	strb	r2, [r3, #0]
            return output_index;
 80092a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092a8:	e0bd      	b.n	8009426 <MicroVsnprintf+0x2da>
          }
          output[output_index++] = '0';
 80092aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092ac:	1c5a      	adds	r2, r3, #1
 80092ae:	627a      	str	r2, [r7, #36]	; 0x24
 80092b0:	461a      	mov	r2, r3
 80092b2:	68fb      	ldr	r3, [r7, #12]
 80092b4:	4413      	add	r3, r2
 80092b6:	2230      	movs	r2, #48	; 0x30
 80092b8:	701a      	strb	r2, [r3, #0]
          output[output_index++] = 'x';
 80092ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092bc:	1c5a      	adds	r2, r3, #1
 80092be:	627a      	str	r2, [r7, #36]	; 0x24
 80092c0:	461a      	mov	r2, r3
 80092c2:	68fb      	ldr	r3, [r7, #12]
 80092c4:	4413      	add	r3, r2
 80092c6:	2278      	movs	r2, #120	; 0x78
 80092c8:	701a      	strb	r2, [r3, #0]
          output_index +=
              FormatHex(&output[output_index], va_arg(args, uint32_t));
 80092ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092cc:	68fa      	ldr	r2, [r7, #12]
 80092ce:	18d0      	adds	r0, r2, r3
 80092d0:	683b      	ldr	r3, [r7, #0]
 80092d2:	1d1a      	adds	r2, r3, #4
 80092d4:	603a      	str	r2, [r7, #0]
 80092d6:	681b      	ldr	r3, [r3, #0]
 80092d8:	4619      	mov	r1, r3
 80092da:	f7ff ff14 	bl	8009106 <_ZN12_GLOBAL__N_19FormatHexEPcm>
 80092de:	4602      	mov	r2, r0
          output_index +=
 80092e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092e2:	4413      	add	r3, r2
 80092e4:	627b      	str	r3, [r7, #36]	; 0x24
          current++;
 80092e6:	6a3b      	ldr	r3, [r7, #32]
 80092e8:	3301      	adds	r3, #1
 80092ea:	623b      	str	r3, [r7, #32]
          break;
 80092ec:	e091      	b.n	8009412 <MicroVsnprintf+0x2c6>
        case 'f':
          if (usable_length - output_index < kMaxFloatCharsNeeded) {
 80092ee:	69ba      	ldr	r2, [r7, #24]
 80092f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092f2:	1ad3      	subs	r3, r2, r3
 80092f4:	ee07 3a90 	vmov	s15, r3
 80092f8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80092fc:	eeb2 7a0c 	vmov.f32	s14, #44	; 0x41600000  14.0
 8009300:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009304:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009308:	d509      	bpl.n	800931e <MicroVsnprintf+0x1d2>
            output[output_index++] = '\0';
 800930a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800930c:	1c5a      	adds	r2, r3, #1
 800930e:	627a      	str	r2, [r7, #36]	; 0x24
 8009310:	461a      	mov	r2, r3
 8009312:	68fb      	ldr	r3, [r7, #12]
 8009314:	4413      	add	r3, r2
 8009316:	2200      	movs	r2, #0
 8009318:	701a      	strb	r2, [r3, #0]
            return output_index;
 800931a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800931c:	e083      	b.n	8009426 <MicroVsnprintf+0x2da>
          }
          output_index +=
              FormatFloat(&output[output_index], va_arg(args, double));
 800931e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009320:	68fa      	ldr	r2, [r7, #12]
 8009322:	18d4      	adds	r4, r2, r3
 8009324:	683b      	ldr	r3, [r7, #0]
 8009326:	3307      	adds	r3, #7
 8009328:	f023 0307 	bic.w	r3, r3, #7
 800932c:	f103 0208 	add.w	r2, r3, #8
 8009330:	603a      	str	r2, [r7, #0]
 8009332:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009336:	4610      	mov	r0, r2
 8009338:	4619      	mov	r1, r3
 800933a:	f7f7 fc47 	bl	8000bcc <__aeabi_d2f>
 800933e:	4603      	mov	r3, r0
 8009340:	ee00 3a10 	vmov	s0, r3
 8009344:	4620      	mov	r0, r4
 8009346:	f7ff feef 	bl	8009128 <_ZN12_GLOBAL__N_111FormatFloatEPcf>
 800934a:	4602      	mov	r2, r0
          output_index +=
 800934c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800934e:	4413      	add	r3, r2
 8009350:	627b      	str	r3, [r7, #36]	; 0x24
          current++;
 8009352:	6a3b      	ldr	r3, [r7, #32]
 8009354:	3301      	adds	r3, #1
 8009356:	623b      	str	r3, [r7, #32]
          break;
 8009358:	e05b      	b.n	8009412 <MicroVsnprintf+0x2c6>
        case '%':
          output[output_index++] = *current++;
 800935a:	6a3b      	ldr	r3, [r7, #32]
 800935c:	1c5a      	adds	r2, r3, #1
 800935e:	623a      	str	r2, [r7, #32]
 8009360:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009362:	1c51      	adds	r1, r2, #1
 8009364:	6279      	str	r1, [r7, #36]	; 0x24
 8009366:	4611      	mov	r1, r2
 8009368:	68fa      	ldr	r2, [r7, #12]
 800936a:	440a      	add	r2, r1
 800936c:	781b      	ldrb	r3, [r3, #0]
 800936e:	7013      	strb	r3, [r2, #0]
          break;
 8009370:	e04f      	b.n	8009412 <MicroVsnprintf+0x2c6>
        case 'c':
          if (usable_length - output_index < 1) {
 8009372:	69ba      	ldr	r2, [r7, #24]
 8009374:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009376:	1ad3      	subs	r3, r2, r3
 8009378:	2b00      	cmp	r3, #0
 800937a:	dc09      	bgt.n	8009390 <MicroVsnprintf+0x244>
            output[output_index++] = '\0';
 800937c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800937e:	1c5a      	adds	r2, r3, #1
 8009380:	627a      	str	r2, [r7, #36]	; 0x24
 8009382:	461a      	mov	r2, r3
 8009384:	68fb      	ldr	r3, [r7, #12]
 8009386:	4413      	add	r3, r2
 8009388:	2200      	movs	r2, #0
 800938a:	701a      	strb	r2, [r3, #0]
            return output_index;
 800938c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800938e:	e04a      	b.n	8009426 <MicroVsnprintf+0x2da>
          }
          output[output_index++] = va_arg(args, int32_t);
 8009390:	683b      	ldr	r3, [r7, #0]
 8009392:	1d1a      	adds	r2, r3, #4
 8009394:	603a      	str	r2, [r7, #0]
 8009396:	6819      	ldr	r1, [r3, #0]
 8009398:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800939a:	1c5a      	adds	r2, r3, #1
 800939c:	627a      	str	r2, [r7, #36]	; 0x24
 800939e:	461a      	mov	r2, r3
 80093a0:	68fb      	ldr	r3, [r7, #12]
 80093a2:	4413      	add	r3, r2
 80093a4:	b2ca      	uxtb	r2, r1
 80093a6:	701a      	strb	r2, [r3, #0]
          current++;
 80093a8:	6a3b      	ldr	r3, [r7, #32]
 80093aa:	3301      	adds	r3, #1
 80093ac:	623b      	str	r3, [r7, #32]
          break;
 80093ae:	e030      	b.n	8009412 <MicroVsnprintf+0x2c6>
        case 's':
          char* string = va_arg(args, char*);
 80093b0:	683b      	ldr	r3, [r7, #0]
 80093b2:	1d1a      	adds	r2, r3, #4
 80093b4:	603a      	str	r2, [r7, #0]
 80093b6:	681b      	ldr	r3, [r3, #0]
 80093b8:	617b      	str	r3, [r7, #20]
          int string_idx = 0;
 80093ba:	2300      	movs	r3, #0
 80093bc:	61fb      	str	r3, [r7, #28]
          while (string_idx + output_index < usable_length &&
 80093be:	69fa      	ldr	r2, [r7, #28]
 80093c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093c2:	4413      	add	r3, r2
 80093c4:	69ba      	ldr	r2, [r7, #24]
 80093c6:	429a      	cmp	r2, r3
 80093c8:	dd14      	ble.n	80093f4 <MicroVsnprintf+0x2a8>
                 string[string_idx] != '\0') {
 80093ca:	69fb      	ldr	r3, [r7, #28]
 80093cc:	697a      	ldr	r2, [r7, #20]
 80093ce:	4413      	add	r3, r2
 80093d0:	781b      	ldrb	r3, [r3, #0]
          while (string_idx + output_index < usable_length &&
 80093d2:	2b00      	cmp	r3, #0
 80093d4:	d00e      	beq.n	80093f4 <MicroVsnprintf+0x2a8>
            output[output_index++] = string[string_idx++];
 80093d6:	69fb      	ldr	r3, [r7, #28]
 80093d8:	1c5a      	adds	r2, r3, #1
 80093da:	61fa      	str	r2, [r7, #28]
 80093dc:	461a      	mov	r2, r3
 80093de:	697b      	ldr	r3, [r7, #20]
 80093e0:	441a      	add	r2, r3
 80093e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093e4:	1c59      	adds	r1, r3, #1
 80093e6:	6279      	str	r1, [r7, #36]	; 0x24
 80093e8:	4619      	mov	r1, r3
 80093ea:	68fb      	ldr	r3, [r7, #12]
 80093ec:	440b      	add	r3, r1
 80093ee:	7812      	ldrb	r2, [r2, #0]
 80093f0:	701a      	strb	r2, [r3, #0]
          while (string_idx + output_index < usable_length &&
 80093f2:	e7e4      	b.n	80093be <MicroVsnprintf+0x272>
          }
          current++;
 80093f4:	6a3b      	ldr	r3, [r7, #32]
 80093f6:	3301      	adds	r3, #1
 80093f8:	623b      	str	r3, [r7, #32]
 80093fa:	e6b5      	b.n	8009168 <MicroVsnprintf+0x1c>
      }
    } else {
      output[output_index++] = *current++;
 80093fc:	6a3b      	ldr	r3, [r7, #32]
 80093fe:	1c5a      	adds	r2, r3, #1
 8009400:	623a      	str	r2, [r7, #32]
 8009402:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009404:	1c51      	adds	r1, r2, #1
 8009406:	6279      	str	r1, [r7, #36]	; 0x24
 8009408:	4611      	mov	r1, r2
 800940a:	68fa      	ldr	r2, [r7, #12]
 800940c:	440a      	add	r2, r1
 800940e:	781b      	ldrb	r3, [r3, #0]
 8009410:	7013      	strb	r3, [r2, #0]
  while (*current != '\0' && output_index < usable_length) {
 8009412:	e6a9      	b.n	8009168 <MicroVsnprintf+0x1c>
    }
  }
  output[output_index++] = '\0';
 8009414:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009416:	1c5a      	adds	r2, r3, #1
 8009418:	627a      	str	r2, [r7, #36]	; 0x24
 800941a:	461a      	mov	r2, r3
 800941c:	68fb      	ldr	r3, [r7, #12]
 800941e:	4413      	add	r3, r2
 8009420:	2200      	movs	r2, #0
 8009422:	701a      	strb	r2, [r3, #0]
  return output_index;
 8009424:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8009426:	4618      	mov	r0, r3
 8009428:	372c      	adds	r7, #44	; 0x2c
 800942a:	46bd      	mov	sp, r7
 800942c:	bd90      	pop	{r4, r7, pc}
 800942e:	bf00      	nop

08009430 <_ZN6tflite21SimpleMemoryAllocatorC1ERKS0_>:
namespace tflite {

// TODO(petewarden): This allocator never frees up or reuses  any memory, even
// though we have enough information about lifetimes of the tensors to do so.
// This makes it pretty wasteful, so we should use a more intelligent method.
class SimpleMemoryAllocator {
 8009430:	b480      	push	{r7}
 8009432:	b083      	sub	sp, #12
 8009434:	af00      	add	r7, sp, #0
 8009436:	6078      	str	r0, [r7, #4]
 8009438:	6039      	str	r1, [r7, #0]
 800943a:	4a11      	ldr	r2, [pc, #68]	; (8009480 <_ZN6tflite21SimpleMemoryAllocatorC1ERKS0_+0x50>)
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	601a      	str	r2, [r3, #0]
 8009440:	683b      	ldr	r3, [r7, #0]
 8009442:	685a      	ldr	r2, [r3, #4]
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	605a      	str	r2, [r3, #4]
 8009448:	683b      	ldr	r3, [r7, #0]
 800944a:	689a      	ldr	r2, [r3, #8]
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	609a      	str	r2, [r3, #8]
 8009450:	683b      	ldr	r3, [r7, #0]
 8009452:	68da      	ldr	r2, [r3, #12]
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	60da      	str	r2, [r3, #12]
 8009458:	683b      	ldr	r3, [r7, #0]
 800945a:	691a      	ldr	r2, [r3, #16]
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	611a      	str	r2, [r3, #16]
 8009460:	683b      	ldr	r3, [r7, #0]
 8009462:	695a      	ldr	r2, [r3, #20]
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	615a      	str	r2, [r3, #20]
 8009468:	683b      	ldr	r3, [r7, #0]
 800946a:	699a      	ldr	r2, [r3, #24]
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	619a      	str	r2, [r3, #24]
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	4618      	mov	r0, r3
 8009474:	370c      	adds	r7, #12
 8009476:	46bd      	mov	sp, r7
 8009478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800947c:	4770      	bx	lr
 800947e:	bf00      	nop
 8009480:	08021ba0 	.word	0x08021ba0

08009484 <_ZN6tflite21SimpleMemoryAllocatorC1EPNS_13ErrorReporterEPhS3_>:
#include "tensorflow/lite/kernels/internal/compatibility.h"
#include "tensorflow/lite/micro/memory_helpers.h"

namespace tflite {

SimpleMemoryAllocator::SimpleMemoryAllocator(ErrorReporter* error_reporter,
 8009484:	b480      	push	{r7}
 8009486:	b085      	sub	sp, #20
 8009488:	af00      	add	r7, sp, #0
 800948a:	60f8      	str	r0, [r7, #12]
 800948c:	60b9      	str	r1, [r7, #8]
 800948e:	607a      	str	r2, [r7, #4]
 8009490:	603b      	str	r3, [r7, #0]
    : error_reporter_(error_reporter),
      buffer_head_(buffer_head),
      buffer_tail_(buffer_tail),
      head_(buffer_head),
      tail_(buffer_tail),
      temp_(buffer_head_) {}
 8009492:	4a0e      	ldr	r2, [pc, #56]	; (80094cc <_ZN6tflite21SimpleMemoryAllocatorC1EPNS_13ErrorReporterEPhS3_+0x48>)
 8009494:	68fb      	ldr	r3, [r7, #12]
 8009496:	601a      	str	r2, [r3, #0]
 8009498:	68fb      	ldr	r3, [r7, #12]
 800949a:	68ba      	ldr	r2, [r7, #8]
 800949c:	605a      	str	r2, [r3, #4]
 800949e:	68fb      	ldr	r3, [r7, #12]
 80094a0:	687a      	ldr	r2, [r7, #4]
 80094a2:	609a      	str	r2, [r3, #8]
 80094a4:	68fb      	ldr	r3, [r7, #12]
 80094a6:	683a      	ldr	r2, [r7, #0]
 80094a8:	60da      	str	r2, [r3, #12]
 80094aa:	68fb      	ldr	r3, [r7, #12]
 80094ac:	687a      	ldr	r2, [r7, #4]
 80094ae:	611a      	str	r2, [r3, #16]
 80094b0:	68fb      	ldr	r3, [r7, #12]
 80094b2:	683a      	ldr	r2, [r7, #0]
 80094b4:	615a      	str	r2, [r3, #20]
 80094b6:	68fb      	ldr	r3, [r7, #12]
 80094b8:	689a      	ldr	r2, [r3, #8]
 80094ba:	68fb      	ldr	r3, [r7, #12]
 80094bc:	619a      	str	r2, [r3, #24]
 80094be:	68fb      	ldr	r3, [r7, #12]
 80094c0:	4618      	mov	r0, r3
 80094c2:	3714      	adds	r7, #20
 80094c4:	46bd      	mov	sp, r7
 80094c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094ca:	4770      	bx	lr
 80094cc:	08021ba0 	.word	0x08021ba0

080094d0 <_ZN6tflite21SimpleMemoryAllocatorC1EPNS_13ErrorReporterEPhj>:

SimpleMemoryAllocator::SimpleMemoryAllocator(ErrorReporter* error_reporter,
 80094d0:	b580      	push	{r7, lr}
 80094d2:	b084      	sub	sp, #16
 80094d4:	af00      	add	r7, sp, #0
 80094d6:	60f8      	str	r0, [r7, #12]
 80094d8:	60b9      	str	r1, [r7, #8]
 80094da:	607a      	str	r2, [r7, #4]
 80094dc:	603b      	str	r3, [r7, #0]
                                             uint8_t* buffer,
                                             size_t buffer_size)
    : SimpleMemoryAllocator(error_reporter, buffer, buffer + buffer_size) {}
 80094de:	687a      	ldr	r2, [r7, #4]
 80094e0:	683b      	ldr	r3, [r7, #0]
 80094e2:	4413      	add	r3, r2
 80094e4:	687a      	ldr	r2, [r7, #4]
 80094e6:	68b9      	ldr	r1, [r7, #8]
 80094e8:	68f8      	ldr	r0, [r7, #12]
 80094ea:	f7ff ffcb 	bl	8009484 <_ZN6tflite21SimpleMemoryAllocatorC1EPNS_13ErrorReporterEPhS3_>
 80094ee:	68fb      	ldr	r3, [r7, #12]
 80094f0:	4618      	mov	r0, r3
 80094f2:	3710      	adds	r7, #16
 80094f4:	46bd      	mov	sp, r7
 80094f6:	bd80      	pop	{r7, pc}

080094f8 <_ZN6tflite21SimpleMemoryAllocator6CreateEPNS_13ErrorReporterEPhj>:

/* static */
SimpleMemoryAllocator* SimpleMemoryAllocator::Create(
    ErrorReporter* error_reporter, uint8_t* buffer_head, size_t buffer_size) {
 80094f8:	b590      	push	{r4, r7, lr}
 80094fa:	b08d      	sub	sp, #52	; 0x34
 80094fc:	af00      	add	r7, sp, #0
 80094fe:	60f8      	str	r0, [r7, #12]
 8009500:	60b9      	str	r1, [r7, #8]
 8009502:	607a      	str	r2, [r7, #4]
  TFLITE_DCHECK(error_reporter != nullptr);
 8009504:	68fb      	ldr	r3, [r7, #12]
 8009506:	2b00      	cmp	r3, #0
 8009508:	d101      	bne.n	800950e <_ZN6tflite21SimpleMemoryAllocator6CreateEPNS_13ErrorReporterEPhj+0x16>
 800950a:	f001 fdb7 	bl	800b07c <abort>
  TFLITE_DCHECK(buffer_head != nullptr);
 800950e:	68bb      	ldr	r3, [r7, #8]
 8009510:	2b00      	cmp	r3, #0
 8009512:	d101      	bne.n	8009518 <_ZN6tflite21SimpleMemoryAllocator6CreateEPNS_13ErrorReporterEPhj+0x20>
 8009514:	f001 fdb2 	bl	800b07c <abort>
  SimpleMemoryAllocator tmp =
      SimpleMemoryAllocator(error_reporter, buffer_head, buffer_size);
 8009518:	f107 0010 	add.w	r0, r7, #16
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	68ba      	ldr	r2, [r7, #8]
 8009520:	68f9      	ldr	r1, [r7, #12]
 8009522:	f7ff ffd5 	bl	80094d0 <_ZN6tflite21SimpleMemoryAllocatorC1EPNS_13ErrorReporterEPhj>

  // Allocate enough bytes from the buffer to create a SimpleMemoryAllocator.
  // The new instance will use the current adjusted tail buffer from the tmp
  // allocator instance.
  uint8_t* allocator_buffer = tmp.AllocateFromTail(
 8009526:	f107 0310 	add.w	r3, r7, #16
 800952a:	2204      	movs	r2, #4
 800952c:	211c      	movs	r1, #28
 800952e:	4618      	mov	r0, r3
 8009530:	f000 f87c 	bl	800962c <_ZN6tflite21SimpleMemoryAllocator16AllocateFromTailEjj>
 8009534:	62f8      	str	r0, [r7, #44]	; 0x2c
      sizeof(SimpleMemoryAllocator), alignof(SimpleMemoryAllocator));
  // Use the default copy constructor to populate internal states.
  return new (allocator_buffer) SimpleMemoryAllocator(tmp);
 8009536:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009538:	4619      	mov	r1, r3
 800953a:	201c      	movs	r0, #28
 800953c:	f7fa fb61 	bl	8003c02 <_ZnwjPv>
 8009540:	4604      	mov	r4, r0
 8009542:	f107 0310 	add.w	r3, r7, #16
 8009546:	4619      	mov	r1, r3
 8009548:	4620      	mov	r0, r4
 800954a:	f7ff ff71 	bl	8009430 <_ZN6tflite21SimpleMemoryAllocatorC1ERKS0_>
      SimpleMemoryAllocator(error_reporter, buffer_head, buffer_size);
 800954e:	f107 0310 	add.w	r3, r7, #16
 8009552:	4618      	mov	r0, r3
 8009554:	f000 f806 	bl	8009564 <_ZN6tflite21SimpleMemoryAllocatorD1Ev>
  return new (allocator_buffer) SimpleMemoryAllocator(tmp);
 8009558:	4623      	mov	r3, r4
}
 800955a:	4618      	mov	r0, r3
 800955c:	3734      	adds	r7, #52	; 0x34
 800955e:	46bd      	mov	sp, r7
 8009560:	bd90      	pop	{r4, r7, pc}
	...

08009564 <_ZN6tflite21SimpleMemoryAllocatorD1Ev>:

SimpleMemoryAllocator::~SimpleMemoryAllocator() {}
 8009564:	b480      	push	{r7}
 8009566:	b083      	sub	sp, #12
 8009568:	af00      	add	r7, sp, #0
 800956a:	6078      	str	r0, [r7, #4]
 800956c:	4a04      	ldr	r2, [pc, #16]	; (8009580 <_ZN6tflite21SimpleMemoryAllocatorD1Ev+0x1c>)
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	601a      	str	r2, [r3, #0]
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	4618      	mov	r0, r3
 8009576:	370c      	adds	r7, #12
 8009578:	46bd      	mov	sp, r7
 800957a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800957e:	4770      	bx	lr
 8009580:	08021ba0 	.word	0x08021ba0

08009584 <_ZN6tflite21SimpleMemoryAllocatorD0Ev>:
 8009584:	b580      	push	{r7, lr}
 8009586:	b082      	sub	sp, #8
 8009588:	af00      	add	r7, sp, #0
 800958a:	6078      	str	r0, [r7, #4]
 800958c:	6878      	ldr	r0, [r7, #4]
 800958e:	f7ff ffe9 	bl	8009564 <_ZN6tflite21SimpleMemoryAllocatorD1Ev>
 8009592:	211c      	movs	r1, #28
 8009594:	6878      	ldr	r0, [r7, #4]
 8009596:	f001 fc8a 	bl	800aeae <_ZdlPvj>
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	4618      	mov	r0, r3
 800959e:	3708      	adds	r7, #8
 80095a0:	46bd      	mov	sp, r7
 80095a2:	bd80      	pop	{r7, pc}

080095a4 <_ZN6tflite21SimpleMemoryAllocator17SetHeadBufferSizeEjj>:

TfLiteStatus SimpleMemoryAllocator::SetHeadBufferSize(size_t size,
                                                      size_t alignment) {
 80095a4:	b580      	push	{r7, lr}
 80095a6:	b088      	sub	sp, #32
 80095a8:	af02      	add	r7, sp, #8
 80095aa:	60f8      	str	r0, [r7, #12]
 80095ac:	60b9      	str	r1, [r7, #8]
 80095ae:	607a      	str	r2, [r7, #4]
  if (head_ != temp_) {
 80095b0:	68fb      	ldr	r3, [r7, #12]
 80095b2:	691a      	ldr	r2, [r3, #16]
 80095b4:	68fb      	ldr	r3, [r7, #12]
 80095b6:	699b      	ldr	r3, [r3, #24]
 80095b8:	429a      	cmp	r2, r3
 80095ba:	d007      	beq.n	80095cc <_ZN6tflite21SimpleMemoryAllocator17SetHeadBufferSizeEjj+0x28>
    TF_LITE_REPORT_ERROR(
 80095bc:	68fb      	ldr	r3, [r7, #12]
 80095be:	685b      	ldr	r3, [r3, #4]
 80095c0:	4918      	ldr	r1, [pc, #96]	; (8009624 <_ZN6tflite21SimpleMemoryAllocator17SetHeadBufferSizeEjj+0x80>)
 80095c2:	4618      	mov	r0, r3
 80095c4:	f7fa faea 	bl	8003b9c <_ZN6tflite13ErrorReporter6ReportEPKcz>
        error_reporter_,
        "Internal error: SetHeadBufferSize() needs to be called "
        "after ResetTempAllocations().");
    return kTfLiteError;
 80095c8:	2301      	movs	r3, #1
 80095ca:	e026      	b.n	800961a <_ZN6tflite21SimpleMemoryAllocator17SetHeadBufferSizeEjj+0x76>
  }

  uint8_t* const aligned_result = AlignPointerUp(buffer_head_, alignment);
 80095cc:	68fb      	ldr	r3, [r7, #12]
 80095ce:	689b      	ldr	r3, [r3, #8]
 80095d0:	6879      	ldr	r1, [r7, #4]
 80095d2:	4618      	mov	r0, r3
 80095d4:	f7fc f817 	bl	8005606 <_ZN6tflite14AlignPointerUpEPhj>
 80095d8:	6178      	str	r0, [r7, #20]
  const size_t available_memory = tail_ - aligned_result;
 80095da:	68fb      	ldr	r3, [r7, #12]
 80095dc:	695a      	ldr	r2, [r3, #20]
 80095de:	697b      	ldr	r3, [r7, #20]
 80095e0:	1ad3      	subs	r3, r2, r3
 80095e2:	613b      	str	r3, [r7, #16]
  if (available_memory < size) {
 80095e4:	693a      	ldr	r2, [r7, #16]
 80095e6:	68bb      	ldr	r3, [r7, #8]
 80095e8:	429a      	cmp	r2, r3
 80095ea:	d20c      	bcs.n	8009606 <_ZN6tflite21SimpleMemoryAllocator17SetHeadBufferSizeEjj+0x62>
    TF_LITE_REPORT_ERROR(
 80095ec:	68fb      	ldr	r3, [r7, #12]
 80095ee:	6858      	ldr	r0, [r3, #4]
 80095f0:	68ba      	ldr	r2, [r7, #8]
 80095f2:	693b      	ldr	r3, [r7, #16]
 80095f4:	1ad3      	subs	r3, r2, r3
 80095f6:	9300      	str	r3, [sp, #0]
 80095f8:	693b      	ldr	r3, [r7, #16]
 80095fa:	68ba      	ldr	r2, [r7, #8]
 80095fc:	490a      	ldr	r1, [pc, #40]	; (8009628 <_ZN6tflite21SimpleMemoryAllocator17SetHeadBufferSizeEjj+0x84>)
 80095fe:	f7fa facd 	bl	8003b9c <_ZN6tflite13ErrorReporter6ReportEPKcz>
        error_reporter_,
        "Failed to set head size. Requested: %u, available %u, missing: %u",
        size, available_memory, size - available_memory);
    return kTfLiteError;
 8009602:	2301      	movs	r3, #1
 8009604:	e009      	b.n	800961a <_ZN6tflite21SimpleMemoryAllocator17SetHeadBufferSizeEjj+0x76>
  }
  head_ = aligned_result + size;
 8009606:	697a      	ldr	r2, [r7, #20]
 8009608:	68bb      	ldr	r3, [r7, #8]
 800960a:	441a      	add	r2, r3
 800960c:	68fb      	ldr	r3, [r7, #12]
 800960e:	611a      	str	r2, [r3, #16]
  temp_ = head_;
 8009610:	68fb      	ldr	r3, [r7, #12]
 8009612:	691a      	ldr	r2, [r3, #16]
 8009614:	68fb      	ldr	r3, [r7, #12]
 8009616:	619a      	str	r2, [r3, #24]

  return kTfLiteOk;
 8009618:	2300      	movs	r3, #0
}
 800961a:	4618      	mov	r0, r3
 800961c:	3718      	adds	r7, #24
 800961e:	46bd      	mov	sp, r7
 8009620:	bd80      	pop	{r7, pc}
 8009622:	bf00      	nop
 8009624:	08011828 	.word	0x08011828
 8009628:	08011880 	.word	0x08011880

0800962c <_ZN6tflite21SimpleMemoryAllocator16AllocateFromTailEjj>:

uint8_t* SimpleMemoryAllocator::AllocateFromTail(size_t size,
                                                 size_t alignment) {
 800962c:	b580      	push	{r7, lr}
 800962e:	b088      	sub	sp, #32
 8009630:	af02      	add	r7, sp, #8
 8009632:	60f8      	str	r0, [r7, #12]
 8009634:	60b9      	str	r1, [r7, #8]
 8009636:	607a      	str	r2, [r7, #4]
  uint8_t* const aligned_result = AlignPointerDown(tail_ - size, alignment);
 8009638:	68fb      	ldr	r3, [r7, #12]
 800963a:	695a      	ldr	r2, [r3, #20]
 800963c:	68bb      	ldr	r3, [r7, #8]
 800963e:	425b      	negs	r3, r3
 8009640:	4413      	add	r3, r2
 8009642:	6879      	ldr	r1, [r7, #4]
 8009644:	4618      	mov	r0, r3
 8009646:	f7fb fff7 	bl	8005638 <_ZN6tflite16AlignPointerDownEPhj>
 800964a:	6178      	str	r0, [r7, #20]
  if (aligned_result < head_) {
 800964c:	68fb      	ldr	r3, [r7, #12]
 800964e:	691b      	ldr	r3, [r3, #16]
 8009650:	697a      	ldr	r2, [r7, #20]
 8009652:	429a      	cmp	r2, r3
 8009654:	d212      	bcs.n	800967c <_ZN6tflite21SimpleMemoryAllocator16AllocateFromTailEjj+0x50>
#ifndef TF_LITE_STRIP_ERROR_STRINGS
    const size_t missing_memory = head_ - aligned_result;
 8009656:	68fb      	ldr	r3, [r7, #12]
 8009658:	691a      	ldr	r2, [r3, #16]
 800965a:	697b      	ldr	r3, [r7, #20]
 800965c:	1ad3      	subs	r3, r2, r3
 800965e:	613b      	str	r3, [r7, #16]
    TF_LITE_REPORT_ERROR(error_reporter_,
 8009660:	68fb      	ldr	r3, [r7, #12]
 8009662:	6858      	ldr	r0, [r3, #4]
 8009664:	68ba      	ldr	r2, [r7, #8]
 8009666:	693b      	ldr	r3, [r7, #16]
 8009668:	1ad2      	subs	r2, r2, r3
 800966a:	693b      	ldr	r3, [r7, #16]
 800966c:	9300      	str	r3, [sp, #0]
 800966e:	4613      	mov	r3, r2
 8009670:	68ba      	ldr	r2, [r7, #8]
 8009672:	4906      	ldr	r1, [pc, #24]	; (800968c <_ZN6tflite21SimpleMemoryAllocator16AllocateFromTailEjj+0x60>)
 8009674:	f7fa fa92 	bl	8003b9c <_ZN6tflite13ErrorReporter6ReportEPKcz>
                         "Failed to allocate tail memory. Requested: %u, "
                         "available %u, missing: %u",
                         size, size - missing_memory, missing_memory);
#endif
    return nullptr;
 8009678:	2300      	movs	r3, #0
 800967a:	e003      	b.n	8009684 <_ZN6tflite21SimpleMemoryAllocator16AllocateFromTailEjj+0x58>
  }
  tail_ = aligned_result;
 800967c:	68fb      	ldr	r3, [r7, #12]
 800967e:	697a      	ldr	r2, [r7, #20]
 8009680:	615a      	str	r2, [r3, #20]
  return aligned_result;
 8009682:	697b      	ldr	r3, [r7, #20]
}
 8009684:	4618      	mov	r0, r3
 8009686:	3718      	adds	r7, #24
 8009688:	46bd      	mov	sp, r7
 800968a:	bd80      	pop	{r7, pc}
 800968c:	080118c4 	.word	0x080118c4

08009690 <_ZN6tflite21SimpleMemoryAllocator12AllocateTempEjj>:

uint8_t* SimpleMemoryAllocator::AllocateTemp(size_t size, size_t alignment) {
 8009690:	b580      	push	{r7, lr}
 8009692:	b088      	sub	sp, #32
 8009694:	af02      	add	r7, sp, #8
 8009696:	60f8      	str	r0, [r7, #12]
 8009698:	60b9      	str	r1, [r7, #8]
 800969a:	607a      	str	r2, [r7, #4]
  uint8_t* const aligned_result = AlignPointerUp(temp_, alignment);
 800969c:	68fb      	ldr	r3, [r7, #12]
 800969e:	699b      	ldr	r3, [r3, #24]
 80096a0:	6879      	ldr	r1, [r7, #4]
 80096a2:	4618      	mov	r0, r3
 80096a4:	f7fb ffaf 	bl	8005606 <_ZN6tflite14AlignPointerUpEPhj>
 80096a8:	6178      	str	r0, [r7, #20]
  const size_t available_memory = tail_ - aligned_result;
 80096aa:	68fb      	ldr	r3, [r7, #12]
 80096ac:	695a      	ldr	r2, [r3, #20]
 80096ae:	697b      	ldr	r3, [r7, #20]
 80096b0:	1ad3      	subs	r3, r2, r3
 80096b2:	613b      	str	r3, [r7, #16]
  if (available_memory < size) {
 80096b4:	693a      	ldr	r2, [r7, #16]
 80096b6:	68bb      	ldr	r3, [r7, #8]
 80096b8:	429a      	cmp	r2, r3
 80096ba:	d20c      	bcs.n	80096d6 <_ZN6tflite21SimpleMemoryAllocator12AllocateTempEjj+0x46>
    TF_LITE_REPORT_ERROR(error_reporter_,
 80096bc:	68fb      	ldr	r3, [r7, #12]
 80096be:	6858      	ldr	r0, [r3, #4]
 80096c0:	68ba      	ldr	r2, [r7, #8]
 80096c2:	693b      	ldr	r3, [r7, #16]
 80096c4:	1ad3      	subs	r3, r2, r3
 80096c6:	9300      	str	r3, [sp, #0]
 80096c8:	693b      	ldr	r3, [r7, #16]
 80096ca:	68ba      	ldr	r2, [r7, #8]
 80096cc:	4907      	ldr	r1, [pc, #28]	; (80096ec <_ZN6tflite21SimpleMemoryAllocator12AllocateTempEjj+0x5c>)
 80096ce:	f7fa fa65 	bl	8003b9c <_ZN6tflite13ErrorReporter6ReportEPKcz>
                         "Failed to allocate temp memory. Requested: %u, "
                         "available %u, missing: %u",
                         size, available_memory, size - available_memory);
    return nullptr;
 80096d2:	2300      	movs	r3, #0
 80096d4:	e005      	b.n	80096e2 <_ZN6tflite21SimpleMemoryAllocator12AllocateTempEjj+0x52>
  }
  temp_ = aligned_result + size;
 80096d6:	697a      	ldr	r2, [r7, #20]
 80096d8:	68bb      	ldr	r3, [r7, #8]
 80096da:	441a      	add	r2, r3
 80096dc:	68fb      	ldr	r3, [r7, #12]
 80096de:	619a      	str	r2, [r3, #24]
  return aligned_result;
 80096e0:	697b      	ldr	r3, [r7, #20]
}
 80096e2:	4618      	mov	r0, r3
 80096e4:	3718      	adds	r7, #24
 80096e6:	46bd      	mov	sp, r7
 80096e8:	bd80      	pop	{r7, pc}
 80096ea:	bf00      	nop
 80096ec:	08011910 	.word	0x08011910

080096f0 <_ZN6tflite21SimpleMemoryAllocator20ResetTempAllocationsEv>:

void SimpleMemoryAllocator::ResetTempAllocations() { temp_ = head_; }
 80096f0:	b480      	push	{r7}
 80096f2:	b083      	sub	sp, #12
 80096f4:	af00      	add	r7, sp, #0
 80096f6:	6078      	str	r0, [r7, #4]
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	691a      	ldr	r2, [r3, #16]
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	619a      	str	r2, [r3, #24]
 8009700:	bf00      	nop
 8009702:	370c      	adds	r7, #12
 8009704:	46bd      	mov	sp, r7
 8009706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800970a:	4770      	bx	lr

0800970c <_ZNK6tflite21SimpleMemoryAllocator13GetHeadBufferEv>:

uint8_t* SimpleMemoryAllocator::GetHeadBuffer() const { return buffer_head_; }
 800970c:	b480      	push	{r7}
 800970e:	b083      	sub	sp, #12
 8009710:	af00      	add	r7, sp, #0
 8009712:	6078      	str	r0, [r7, #4]
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	689b      	ldr	r3, [r3, #8]
 8009718:	4618      	mov	r0, r3
 800971a:	370c      	adds	r7, #12
 800971c:	46bd      	mov	sp, r7
 800971e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009722:	4770      	bx	lr

08009724 <_ZNK6tflite21SimpleMemoryAllocator18GetAvailableMemoryEj>:

size_t SimpleMemoryAllocator::GetTailUsedBytes() const {
  return buffer_tail_ - tail_;
}

size_t SimpleMemoryAllocator::GetAvailableMemory(size_t alignment) const {
 8009724:	b580      	push	{r7, lr}
 8009726:	b084      	sub	sp, #16
 8009728:	af00      	add	r7, sp, #0
 800972a:	6078      	str	r0, [r7, #4]
 800972c:	6039      	str	r1, [r7, #0]
  uint8_t* const aligned_temp = AlignPointerUp(temp_, alignment);
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	699b      	ldr	r3, [r3, #24]
 8009732:	6839      	ldr	r1, [r7, #0]
 8009734:	4618      	mov	r0, r3
 8009736:	f7fb ff66 	bl	8005606 <_ZN6tflite14AlignPointerUpEPhj>
 800973a:	60f8      	str	r0, [r7, #12]
  uint8_t* const aligned_tail = AlignPointerDown(tail_, alignment);
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	695b      	ldr	r3, [r3, #20]
 8009740:	6839      	ldr	r1, [r7, #0]
 8009742:	4618      	mov	r0, r3
 8009744:	f7fb ff78 	bl	8005638 <_ZN6tflite16AlignPointerDownEPhj>
 8009748:	60b8      	str	r0, [r7, #8]
  return aligned_tail - aligned_temp;
 800974a:	68ba      	ldr	r2, [r7, #8]
 800974c:	68fb      	ldr	r3, [r7, #12]
 800974e:	1ad3      	subs	r3, r2, r3
}
 8009750:	4618      	mov	r0, r3
 8009752:	3710      	adds	r7, #16
 8009754:	46bd      	mov	sp, r7
 8009756:	bd80      	pop	{r7, pc}

08009758 <_ZN6tflite5micro19GetMutableEvalInputEPK13TfLiteContextPK10TfLiteNodei>:

// Returns a mutable tensor for a given input index. is_variable must be checked
// during prepare when the full TfLiteTensor is available.
inline TfLiteEvalTensor* GetMutableEvalInput(const TfLiteContext* context,
                                             const TfLiteNode* node,
                                             int index) {
 8009758:	b580      	push	{r7, lr}
 800975a:	b084      	sub	sp, #16
 800975c:	af00      	add	r7, sp, #0
 800975e:	60f8      	str	r0, [r7, #12]
 8009760:	60b9      	str	r1, [r7, #8]
 8009762:	607a      	str	r2, [r7, #4]
  TFLITE_DCHECK(context != nullptr);
 8009764:	68fb      	ldr	r3, [r7, #12]
 8009766:	2b00      	cmp	r3, #0
 8009768:	d101      	bne.n	800976e <_ZN6tflite5micro19GetMutableEvalInputEPK13TfLiteContextPK10TfLiteNodei+0x16>
 800976a:	f001 fc87 	bl	800b07c <abort>
  TFLITE_DCHECK(node != nullptr);
 800976e:	68bb      	ldr	r3, [r7, #8]
 8009770:	2b00      	cmp	r3, #0
 8009772:	d101      	bne.n	8009778 <_ZN6tflite5micro19GetMutableEvalInputEPK13TfLiteContextPK10TfLiteNodei+0x20>
 8009774:	f001 fc82 	bl	800b07c <abort>
  return context->GetEvalTensor(context, node->inputs->data[index]);
 8009778:	68fb      	ldr	r3, [r7, #12]
 800977a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800977c:	68bb      	ldr	r3, [r7, #8]
 800977e:	6819      	ldr	r1, [r3, #0]
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	009b      	lsls	r3, r3, #2
 8009784:	440b      	add	r3, r1
 8009786:	685b      	ldr	r3, [r3, #4]
 8009788:	4619      	mov	r1, r3
 800978a:	68f8      	ldr	r0, [r7, #12]
 800978c:	4790      	blx	r2
 800978e:	4603      	mov	r3, r0
}
 8009790:	4618      	mov	r0, r3
 8009792:	3710      	adds	r7, #16
 8009794:	46bd      	mov	sp, r7
 8009796:	bd80      	pop	{r7, pc}

08009798 <_ZN6tflite5micro12GetEvalInputEPK13TfLiteContextPK10TfLiteNodei>:

// Returns the TfLiteEvalTensor struct for a given input index in a node.
inline const TfLiteEvalTensor* GetEvalInput(const TfLiteContext* context,
                                            const TfLiteNode* node, int index) {
 8009798:	b580      	push	{r7, lr}
 800979a:	b084      	sub	sp, #16
 800979c:	af00      	add	r7, sp, #0
 800979e:	60f8      	str	r0, [r7, #12]
 80097a0:	60b9      	str	r1, [r7, #8]
 80097a2:	607a      	str	r2, [r7, #4]
  return GetMutableEvalInput(context, node, index);
 80097a4:	687a      	ldr	r2, [r7, #4]
 80097a6:	68b9      	ldr	r1, [r7, #8]
 80097a8:	68f8      	ldr	r0, [r7, #12]
 80097aa:	f7ff ffd5 	bl	8009758 <_ZN6tflite5micro19GetMutableEvalInputEPK13TfLiteContextPK10TfLiteNodei>
 80097ae:	4603      	mov	r3, r0
}
 80097b0:	4618      	mov	r0, r3
 80097b2:	3710      	adds	r7, #16
 80097b4:	46bd      	mov	sp, r7
 80097b6:	bd80      	pop	{r7, pc}

080097b8 <_ZN6tflite5micro13GetEvalOutputEPK13TfLiteContextPK10TfLiteNodei>:

// Returns the TfLiteEvalTensor struct for a given output index in a node.
inline TfLiteEvalTensor* GetEvalOutput(const TfLiteContext* context,
                                       const TfLiteNode* node, int index) {
 80097b8:	b580      	push	{r7, lr}
 80097ba:	b084      	sub	sp, #16
 80097bc:	af00      	add	r7, sp, #0
 80097be:	60f8      	str	r0, [r7, #12]
 80097c0:	60b9      	str	r1, [r7, #8]
 80097c2:	607a      	str	r2, [r7, #4]
  TFLITE_DCHECK(context != nullptr);
 80097c4:	68fb      	ldr	r3, [r7, #12]
 80097c6:	2b00      	cmp	r3, #0
 80097c8:	d101      	bne.n	80097ce <_ZN6tflite5micro13GetEvalOutputEPK13TfLiteContextPK10TfLiteNodei+0x16>
 80097ca:	f001 fc57 	bl	800b07c <abort>
  TFLITE_DCHECK(node != nullptr);
 80097ce:	68bb      	ldr	r3, [r7, #8]
 80097d0:	2b00      	cmp	r3, #0
 80097d2:	d101      	bne.n	80097d8 <_ZN6tflite5micro13GetEvalOutputEPK13TfLiteContextPK10TfLiteNodei+0x20>
 80097d4:	f001 fc52 	bl	800b07c <abort>
  return context->GetEvalTensor(context, node->outputs->data[index]);
 80097d8:	68fb      	ldr	r3, [r7, #12]
 80097da:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80097dc:	68bb      	ldr	r3, [r7, #8]
 80097de:	6859      	ldr	r1, [r3, #4]
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	009b      	lsls	r3, r3, #2
 80097e4:	440b      	add	r3, r1
 80097e6:	685b      	ldr	r3, [r3, #4]
 80097e8:	4619      	mov	r1, r3
 80097ea:	68f8      	ldr	r0, [r7, #12]
 80097ec:	4790      	blx	r2
 80097ee:	4603      	mov	r3, r0
}
 80097f0:	4618      	mov	r0, r3
 80097f2:	3710      	adds	r7, #16
 80097f4:	46bd      	mov	sp, r7
 80097f6:	bd80      	pop	{r7, pc}

080097f8 <_ZN6tflite5micro13GetTensorDataIfEEPKT_PK16TfLiteEvalTensor>:
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
}

// Returns const data for a TfLiteEvalTensor struct.
template <typename T>
const T* GetTensorData(const TfLiteEvalTensor* tensor) {
 80097f8:	b580      	push	{r7, lr}
 80097fa:	b082      	sub	sp, #8
 80097fc:	af00      	add	r7, sp, #0
 80097fe:	6078      	str	r0, [r7, #4]
  TFLITE_DCHECK(tensor != nullptr);
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	2b00      	cmp	r3, #0
 8009804:	d101      	bne.n	800980a <_ZN6tflite5micro13GetTensorDataIfEEPKT_PK16TfLiteEvalTensor+0x12>
 8009806:	f001 fc39 	bl	800b07c <abort>
  return reinterpret_cast<const T*>(tensor->data.raw);
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	681b      	ldr	r3, [r3, #0]
}
 800980e:	4618      	mov	r0, r3
 8009810:	3708      	adds	r7, #8
 8009812:	46bd      	mov	sp, r7
 8009814:	bd80      	pop	{r7, pc}

08009816 <_ZN6tflite5micro13GetTensorDataIfEEPT_P16TfLiteEvalTensor>:
T* GetTensorData(TfLiteEvalTensor* tensor) {
 8009816:	b480      	push	{r7}
 8009818:	b083      	sub	sp, #12
 800981a:	af00      	add	r7, sp, #0
 800981c:	6078      	str	r0, [r7, #4]
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	2b00      	cmp	r3, #0
 8009822:	d002      	beq.n	800982a <_ZN6tflite5micro13GetTensorDataIfEEPT_P16TfLiteEvalTensor+0x14>
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	681b      	ldr	r3, [r3, #0]
 8009828:	e000      	b.n	800982c <_ZN6tflite5micro13GetTensorDataIfEEPT_P16TfLiteEvalTensor+0x16>
 800982a:	2300      	movs	r3, #0
}
 800982c:	4618      	mov	r0, r3
 800982e:	370c      	adds	r7, #12
 8009830:	46bd      	mov	sp, r7
 8009832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009836:	4770      	bx	lr

08009838 <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor>:
const T* GetTensorData(const TfLiteEvalTensor* tensor) {
 8009838:	b580      	push	{r7, lr}
 800983a:	b082      	sub	sp, #8
 800983c:	af00      	add	r7, sp, #0
 800983e:	6078      	str	r0, [r7, #4]
  TFLITE_DCHECK(tensor != nullptr);
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	2b00      	cmp	r3, #0
 8009844:	d101      	bne.n	800984a <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor+0x12>
 8009846:	f001 fc19 	bl	800b07c <abort>
  return reinterpret_cast<const T*>(tensor->data.raw);
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	681b      	ldr	r3, [r3, #0]
}
 800984e:	4618      	mov	r0, r3
 8009850:	3708      	adds	r7, #8
 8009852:	46bd      	mov	sp, r7
 8009854:	bd80      	pop	{r7, pc}

08009856 <_ZN6tflite5micro13GetTensorDataIaEEPT_P16TfLiteEvalTensor>:
T* GetTensorData(TfLiteEvalTensor* tensor) {
 8009856:	b480      	push	{r7}
 8009858:	b083      	sub	sp, #12
 800985a:	af00      	add	r7, sp, #0
 800985c:	6078      	str	r0, [r7, #4]
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	2b00      	cmp	r3, #0
 8009862:	d002      	beq.n	800986a <_ZN6tflite5micro13GetTensorDataIaEEPT_P16TfLiteEvalTensor+0x14>
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	681b      	ldr	r3, [r3, #0]
 8009868:	e000      	b.n	800986c <_ZN6tflite5micro13GetTensorDataIaEEPT_P16TfLiteEvalTensor+0x16>
 800986a:	2300      	movs	r3, #0
}
 800986c:	4618      	mov	r0, r3
 800986e:	370c      	adds	r7, #12
 8009870:	46bd      	mov	sp, r7
 8009872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009876:	4770      	bx	lr

08009878 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_>:

// This function implements the same computation as the ARMv7 NEON VQRDMULH
// instruction.
template <>
inline std::int32_t SaturatingRoundingDoublingHighMul(std::int32_t a,
                                                      std::int32_t b) {
 8009878:	b5b0      	push	{r4, r5, r7, lr}
 800987a:	b08c      	sub	sp, #48	; 0x30
 800987c:	af00      	add	r7, sp, #0
 800987e:	6078      	str	r0, [r7, #4]
 8009880:	6039      	str	r1, [r7, #0]
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
 8009882:	687a      	ldr	r2, [r7, #4]
 8009884:	683b      	ldr	r3, [r7, #0]
 8009886:	429a      	cmp	r2, r3
 8009888:	d107      	bne.n	800989a <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_+0x22>
 800988a:	f7f8 fb42 	bl	8001f12 <_ZNSt14numeric_limitsIlE3minEv>
 800988e:	4602      	mov	r2, r0
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	4293      	cmp	r3, r2
 8009894:	d101      	bne.n	800989a <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_+0x22>
 8009896:	2301      	movs	r3, #1
 8009898:	e000      	b.n	800989c <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_+0x24>
 800989a:	2300      	movs	r3, #0
 800989c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  std::int64_t a_64(a);
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	461a      	mov	r2, r3
 80098a4:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80098a8:	e9c7 2308 	strd	r2, r3, [r7, #32]
  std::int64_t b_64(b);
 80098ac:	683b      	ldr	r3, [r7, #0]
 80098ae:	461a      	mov	r2, r3
 80098b0:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80098b4:	e9c7 2306 	strd	r2, r3, [r7, #24]
  std::int64_t ab_64 = a_64 * b_64;
 80098b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098ba:	69ba      	ldr	r2, [r7, #24]
 80098bc:	fb02 f203 	mul.w	r2, r2, r3
 80098c0:	69fb      	ldr	r3, [r7, #28]
 80098c2:	6a39      	ldr	r1, [r7, #32]
 80098c4:	fb01 f303 	mul.w	r3, r1, r3
 80098c8:	18d1      	adds	r1, r2, r3
 80098ca:	6a3a      	ldr	r2, [r7, #32]
 80098cc:	69bb      	ldr	r3, [r7, #24]
 80098ce:	fba2 2303 	umull	r2, r3, r2, r3
 80098d2:	4419      	add	r1, r3
 80098d4:	460b      	mov	r3, r1
 80098d6:	e9c7 2304 	strd	r2, r3, [r7, #16]
 80098da:	e9c7 2304 	strd	r2, r3, [r7, #16]
  std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
 80098de:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80098e2:	2a00      	cmp	r2, #0
 80098e4:	f173 0300 	sbcs.w	r3, r3, #0
 80098e8:	db02      	blt.n	80098f0 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_+0x78>
 80098ea:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80098ee:	e000      	b.n	80098f2 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_+0x7a>
 80098f0:	4b18      	ldr	r3, [pc, #96]	; (8009954 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_+0xdc>)
 80098f2:	60fb      	str	r3, [r7, #12]
  std::int32_t ab_x2_high32 =
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
 80098f4:	68fb      	ldr	r3, [r7, #12]
 80098f6:	4618      	mov	r0, r3
 80098f8:	ea4f 71e0 	mov.w	r1, r0, asr #31
 80098fc:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8009900:	1884      	adds	r4, r0, r2
 8009902:	eb41 0503 	adc.w	r5, r1, r3
 8009906:	4622      	mov	r2, r4
 8009908:	462b      	mov	r3, r5
 800990a:	2a00      	cmp	r2, #0
 800990c:	f173 0100 	sbcs.w	r1, r3, #0
 8009910:	da06      	bge.n	8009920 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_+0xa8>
 8009912:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 8009916:	f04f 0100 	mov.w	r1, #0
 800991a:	1812      	adds	r2, r2, r0
 800991c:	eb41 0303 	adc.w	r3, r1, r3
 8009920:	f04f 0000 	mov.w	r0, #0
 8009924:	f04f 0100 	mov.w	r1, #0
 8009928:	0fd0      	lsrs	r0, r2, #31
 800992a:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 800992e:	17d9      	asrs	r1, r3, #31
 8009930:	4602      	mov	r2, r0
 8009932:	460b      	mov	r3, r1
  std::int32_t ab_x2_high32 =
 8009934:	4613      	mov	r3, r2
 8009936:	60bb      	str	r3, [r7, #8]
  return overflow ? std::numeric_limits<std::int32_t>::max() : ab_x2_high32;
 8009938:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800993c:	2b00      	cmp	r3, #0
 800993e:	d003      	beq.n	8009948 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_+0xd0>
 8009940:	f7f8 faf0 	bl	8001f24 <_ZNSt14numeric_limitsIlE3maxEv>
 8009944:	4603      	mov	r3, r0
 8009946:	e000      	b.n	800994a <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_+0xd2>
 8009948:	68bb      	ldr	r3, [r7, #8]
}
 800994a:	4618      	mov	r0, r3
 800994c:	3730      	adds	r7, #48	; 0x30
 800994e:	46bd      	mov	sp, r7
 8009950:	bdb0      	pop	{r4, r5, r7, pc}
 8009952:	bf00      	nop
 8009954:	c0000001 	.word	0xc0000001

08009958 <_ZNK6tflite12RuntimeShape4DimsEi>:
  inline int32_t Dims(int i) const {
 8009958:	b580      	push	{r7, lr}
 800995a:	b082      	sub	sp, #8
 800995c:	af00      	add	r7, sp, #0
 800995e:	6078      	str	r0, [r7, #4]
 8009960:	6039      	str	r1, [r7, #0]
    TFLITE_DCHECK_GE(i, 0);
 8009962:	683b      	ldr	r3, [r7, #0]
 8009964:	2b00      	cmp	r3, #0
 8009966:	da01      	bge.n	800996c <_ZNK6tflite12RuntimeShape4DimsEi+0x14>
 8009968:	f001 fb88 	bl	800b07c <abort>
    TFLITE_DCHECK_LT(i, size_);
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	681b      	ldr	r3, [r3, #0]
 8009970:	683a      	ldr	r2, [r7, #0]
 8009972:	429a      	cmp	r2, r3
 8009974:	db01      	blt.n	800997a <_ZNK6tflite12RuntimeShape4DimsEi+0x22>
 8009976:	f001 fb81 	bl	800b07c <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	681b      	ldr	r3, [r3, #0]
 800997e:	2b05      	cmp	r3, #5
 8009980:	dd06      	ble.n	8009990 <_ZNK6tflite12RuntimeShape4DimsEi+0x38>
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	685a      	ldr	r2, [r3, #4]
 8009986:	683b      	ldr	r3, [r7, #0]
 8009988:	009b      	lsls	r3, r3, #2
 800998a:	4413      	add	r3, r2
 800998c:	681b      	ldr	r3, [r3, #0]
 800998e:	e004      	b.n	800999a <_ZNK6tflite12RuntimeShape4DimsEi+0x42>
 8009990:	687a      	ldr	r2, [r7, #4]
 8009992:	683b      	ldr	r3, [r7, #0]
 8009994:	009b      	lsls	r3, r3, #2
 8009996:	4413      	add	r3, r2
 8009998:	685b      	ldr	r3, [r3, #4]
  }
 800999a:	4618      	mov	r0, r3
 800999c:	3708      	adds	r7, #8
 800999e:	46bd      	mov	sp, r7
 80099a0:	bd80      	pop	{r7, pc}

080099a2 <_ZNK6tflite12RuntimeShape8DimsDataEv>:
  inline const int32_t* DimsData() const {
 80099a2:	b480      	push	{r7}
 80099a4:	b083      	sub	sp, #12
 80099a6:	af00      	add	r7, sp, #0
 80099a8:	6078      	str	r0, [r7, #4]
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	681b      	ldr	r3, [r3, #0]
 80099ae:	2b05      	cmp	r3, #5
 80099b0:	dd02      	ble.n	80099b8 <_ZNK6tflite12RuntimeShape8DimsDataEv+0x16>
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	685b      	ldr	r3, [r3, #4]
 80099b6:	e001      	b.n	80099bc <_ZNK6tflite12RuntimeShape8DimsDataEv+0x1a>
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	3304      	adds	r3, #4
  }
 80099bc:	4618      	mov	r0, r3
 80099be:	370c      	adds	r7, #12
 80099c0:	46bd      	mov	sp, r7
 80099c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099c6:	4770      	bx	lr

080099c8 <_ZN6tflite29MultiplyByQuantizedMultiplierElli>:
                                           quantized_multiplier);
}

inline int32_t MultiplyByQuantizedMultiplier(int32_t x,
                                             int32_t quantized_multiplier,
                                             int shift) {
 80099c8:	b580      	push	{r7, lr}
 80099ca:	b086      	sub	sp, #24
 80099cc:	af00      	add	r7, sp, #0
 80099ce:	60f8      	str	r0, [r7, #12]
 80099d0:	60b9      	str	r1, [r7, #8]
 80099d2:	607a      	str	r2, [r7, #4]
  using gemmlowp::RoundingDivideByPOT;
  using gemmlowp::SaturatingRoundingDoublingHighMul;
  int left_shift = shift > 0 ? shift : 0;
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80099da:	617b      	str	r3, [r7, #20]
  int right_shift = shift > 0 ? 0 : -shift;
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	2b00      	cmp	r3, #0
 80099e0:	dc02      	bgt.n	80099e8 <_ZN6tflite29MultiplyByQuantizedMultiplierElli+0x20>
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	425b      	negs	r3, r3
 80099e6:	e000      	b.n	80099ea <_ZN6tflite29MultiplyByQuantizedMultiplierElli+0x22>
 80099e8:	2300      	movs	r3, #0
 80099ea:	613b      	str	r3, [r7, #16]
  return RoundingDivideByPOT(SaturatingRoundingDoublingHighMul(
 80099ec:	68fa      	ldr	r2, [r7, #12]
 80099ee:	697b      	ldr	r3, [r7, #20]
 80099f0:	fa02 f303 	lsl.w	r3, r2, r3
 80099f4:	68b9      	ldr	r1, [r7, #8]
 80099f6:	4618      	mov	r0, r3
 80099f8:	f7ff ff3e 	bl	8009878 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_>
 80099fc:	4603      	mov	r3, r0
 80099fe:	6939      	ldr	r1, [r7, #16]
 8009a00:	4618      	mov	r0, r3
 8009a02:	f000 f805 	bl	8009a10 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i>
 8009a06:	4603      	mov	r3, r0
                                 x * (1 << left_shift), quantized_multiplier),
                             right_shift);
}
 8009a08:	4618      	mov	r0, r3
 8009a0a:	3718      	adds	r7, #24
 8009a0c:	46bd      	mov	sp, r7
 8009a0e:	bd80      	pop	{r7, pc}

08009a10 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i>:
}

// Correctly-rounded-to-nearest division by a power-of-two.
// Also known as a rounding arithmetic right shift.
template <typename IntegerType>
inline IntegerType RoundingDivideByPOT(IntegerType x, int exponent) {
 8009a10:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009a12:	b089      	sub	sp, #36	; 0x24
 8009a14:	af00      	add	r7, sp, #0
 8009a16:	6078      	str	r0, [r7, #4]
 8009a18:	6039      	str	r1, [r7, #0]
  assert(exponent >= 0);
 8009a1a:	6839      	ldr	r1, [r7, #0]
 8009a1c:	2900      	cmp	r1, #0
 8009a1e:	da06      	bge.n	8009a2e <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i+0x1e>
 8009a20:	4b31      	ldr	r3, [pc, #196]	; (8009ae8 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i+0xd8>)
 8009a22:	4a32      	ldr	r2, [pc, #200]	; (8009aec <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i+0xdc>)
 8009a24:	f44f 71b3 	mov.w	r1, #358	; 0x166
 8009a28:	4831      	ldr	r0, [pc, #196]	; (8009af0 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i+0xe0>)
 8009a2a:	f001 fb2f 	bl	800b08c <__assert_func>
  assert(exponent <= 31);
 8009a2e:	6839      	ldr	r1, [r7, #0]
 8009a30:	291f      	cmp	r1, #31
 8009a32:	dd06      	ble.n	8009a42 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i+0x32>
 8009a34:	4b2f      	ldr	r3, [pc, #188]	; (8009af4 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i+0xe4>)
 8009a36:	4a2d      	ldr	r2, [pc, #180]	; (8009aec <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i+0xdc>)
 8009a38:	f240 1167 	movw	r1, #359	; 0x167
 8009a3c:	482c      	ldr	r0, [pc, #176]	; (8009af0 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i+0xe0>)
 8009a3e:	f001 fb25 	bl	800b08c <__assert_func>
  const IntegerType mask = Dup<IntegerType>((1ll << exponent) - 1);
 8009a42:	f04f 0001 	mov.w	r0, #1
 8009a46:	f04f 0100 	mov.w	r1, #0
 8009a4a:	683c      	ldr	r4, [r7, #0]
 8009a4c:	f1a4 0620 	sub.w	r6, r4, #32
 8009a50:	f1c4 0520 	rsb	r5, r4, #32
 8009a54:	fa01 f304 	lsl.w	r3, r1, r4
 8009a58:	fa00 f606 	lsl.w	r6, r0, r6
 8009a5c:	4333      	orrs	r3, r6
 8009a5e:	fa20 f505 	lsr.w	r5, r0, r5
 8009a62:	432b      	orrs	r3, r5
 8009a64:	fa00 f204 	lsl.w	r2, r0, r4
 8009a68:	4613      	mov	r3, r2
 8009a6a:	3b01      	subs	r3, #1
 8009a6c:	4618      	mov	r0, r3
 8009a6e:	f000 f843 	bl	8009af8 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 8009a72:	61f8      	str	r0, [r7, #28]
  const IntegerType zero = Dup<IntegerType>(0);
 8009a74:	2000      	movs	r0, #0
 8009a76:	f000 f83f 	bl	8009af8 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 8009a7a:	61b8      	str	r0, [r7, #24]
  const IntegerType one = Dup<IntegerType>(1);
 8009a7c:	2001      	movs	r0, #1
 8009a7e:	f000 f83b 	bl	8009af8 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 8009a82:	6178      	str	r0, [r7, #20]
  const IntegerType remainder = BitAnd(x, mask);
 8009a84:	69f9      	ldr	r1, [r7, #28]
 8009a86:	6878      	ldr	r0, [r7, #4]
 8009a88:	f000 f841 	bl	8009b0e <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 8009a8c:	6138      	str	r0, [r7, #16]
  const IntegerType threshold =
      Add(ShiftRight(mask, 1), BitAnd(MaskIfLessThan(x, zero), one));
 8009a8e:	2101      	movs	r1, #1
 8009a90:	69f8      	ldr	r0, [r7, #28]
 8009a92:	f000 f84a 	bl	8009b2a <_ZN8gemmlowp10ShiftRightIlEET_S1_i>
 8009a96:	4604      	mov	r4, r0
 8009a98:	69b9      	ldr	r1, [r7, #24]
 8009a9a:	6878      	ldr	r0, [r7, #4]
 8009a9c:	f000 f854 	bl	8009b48 <_ZN8gemmlowp14MaskIfLessThanIlEET_S1_S1_>
 8009aa0:	4603      	mov	r3, r0
 8009aa2:	6979      	ldr	r1, [r7, #20]
 8009aa4:	4618      	mov	r0, r3
 8009aa6:	f000 f832 	bl	8009b0e <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 8009aaa:	4603      	mov	r3, r0
 8009aac:	4619      	mov	r1, r3
 8009aae:	4620      	mov	r0, r4
 8009ab0:	f000 f85e 	bl	8009b70 <_ZN8gemmlowp3AddIlEET_S1_S1_>
 8009ab4:	60f8      	str	r0, [r7, #12]
  return Add(ShiftRight(x, exponent),
 8009ab6:	6839      	ldr	r1, [r7, #0]
 8009ab8:	6878      	ldr	r0, [r7, #4]
 8009aba:	f000 f836 	bl	8009b2a <_ZN8gemmlowp10ShiftRightIlEET_S1_i>
 8009abe:	4604      	mov	r4, r0
 8009ac0:	68f9      	ldr	r1, [r7, #12]
 8009ac2:	6938      	ldr	r0, [r7, #16]
 8009ac4:	f000 f862 	bl	8009b8c <_ZN8gemmlowp17MaskIfGreaterThanIlEET_S1_S1_>
 8009ac8:	4603      	mov	r3, r0
 8009aca:	6979      	ldr	r1, [r7, #20]
 8009acc:	4618      	mov	r0, r3
 8009ace:	f000 f81e 	bl	8009b0e <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 8009ad2:	4603      	mov	r3, r0
 8009ad4:	4619      	mov	r1, r3
 8009ad6:	4620      	mov	r0, r4
 8009ad8:	f000 f84a 	bl	8009b70 <_ZN8gemmlowp3AddIlEET_S1_S1_>
 8009adc:	4603      	mov	r3, r0
             BitAnd(MaskIfGreaterThan(remainder, threshold), one));
}
 8009ade:	4618      	mov	r0, r3
 8009ae0:	3724      	adds	r7, #36	; 0x24
 8009ae2:	46bd      	mov	sp, r7
 8009ae4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009ae6:	bf00      	nop
 8009ae8:	080119e4 	.word	0x080119e4
 8009aec:	080119f4 	.word	0x080119f4
 8009af0:	08011a50 	.word	0x08011a50
 8009af4:	08011ae0 	.word	0x08011ae0

08009af8 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>:
tRawType Dup(typename FixedPointRawTypeTraits<tRawType>::ScalarRawType x) {
 8009af8:	b480      	push	{r7}
 8009afa:	b083      	sub	sp, #12
 8009afc:	af00      	add	r7, sp, #0
 8009afe:	6078      	str	r0, [r7, #4]
  return x;
 8009b00:	687b      	ldr	r3, [r7, #4]
}
 8009b02:	4618      	mov	r0, r3
 8009b04:	370c      	adds	r7, #12
 8009b06:	46bd      	mov	sp, r7
 8009b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b0c:	4770      	bx	lr

08009b0e <_ZN8gemmlowp6BitAndIlEET_S1_S1_>:
tIntegerType BitAnd(tIntegerType a, tIntegerType b) {
 8009b0e:	b480      	push	{r7}
 8009b10:	b083      	sub	sp, #12
 8009b12:	af00      	add	r7, sp, #0
 8009b14:	6078      	str	r0, [r7, #4]
 8009b16:	6039      	str	r1, [r7, #0]
  return a & b;
 8009b18:	687a      	ldr	r2, [r7, #4]
 8009b1a:	683b      	ldr	r3, [r7, #0]
 8009b1c:	4013      	ands	r3, r2
}
 8009b1e:	4618      	mov	r0, r3
 8009b20:	370c      	adds	r7, #12
 8009b22:	46bd      	mov	sp, r7
 8009b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b28:	4770      	bx	lr

08009b2a <_ZN8gemmlowp10ShiftRightIlEET_S1_i>:
tIntegerType ShiftRight(tIntegerType a, int offset) {
 8009b2a:	b480      	push	{r7}
 8009b2c:	b083      	sub	sp, #12
 8009b2e:	af00      	add	r7, sp, #0
 8009b30:	6078      	str	r0, [r7, #4]
 8009b32:	6039      	str	r1, [r7, #0]
  return a >> offset;
 8009b34:	687a      	ldr	r2, [r7, #4]
 8009b36:	683b      	ldr	r3, [r7, #0]
 8009b38:	fa42 f303 	asr.w	r3, r2, r3
}
 8009b3c:	4618      	mov	r0, r3
 8009b3e:	370c      	adds	r7, #12
 8009b40:	46bd      	mov	sp, r7
 8009b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b46:	4770      	bx	lr

08009b48 <_ZN8gemmlowp14MaskIfLessThanIlEET_S1_S1_>:
tIntegerType MaskIfLessThan(tIntegerType a, tIntegerType b) {
 8009b48:	b580      	push	{r7, lr}
 8009b4a:	b082      	sub	sp, #8
 8009b4c:	af00      	add	r7, sp, #0
 8009b4e:	6078      	str	r0, [r7, #4]
 8009b50:	6039      	str	r1, [r7, #0]
  return MaskIfNonZero<tIntegerType>(a < b);
 8009b52:	687a      	ldr	r2, [r7, #4]
 8009b54:	683b      	ldr	r3, [r7, #0]
 8009b56:	429a      	cmp	r2, r3
 8009b58:	bfb4      	ite	lt
 8009b5a:	2301      	movlt	r3, #1
 8009b5c:	2300      	movge	r3, #0
 8009b5e:	b2db      	uxtb	r3, r3
 8009b60:	4618      	mov	r0, r3
 8009b62:	f000 f827 	bl	8009bb4 <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_>
 8009b66:	4603      	mov	r3, r0
}
 8009b68:	4618      	mov	r0, r3
 8009b6a:	3708      	adds	r7, #8
 8009b6c:	46bd      	mov	sp, r7
 8009b6e:	bd80      	pop	{r7, pc}

08009b70 <_ZN8gemmlowp3AddIlEET_S1_S1_>:
tIntegerType Add(tIntegerType a, tIntegerType b) {
 8009b70:	b480      	push	{r7}
 8009b72:	b083      	sub	sp, #12
 8009b74:	af00      	add	r7, sp, #0
 8009b76:	6078      	str	r0, [r7, #4]
 8009b78:	6039      	str	r1, [r7, #0]
  return a + b;
 8009b7a:	687a      	ldr	r2, [r7, #4]
 8009b7c:	683b      	ldr	r3, [r7, #0]
 8009b7e:	4413      	add	r3, r2
}
 8009b80:	4618      	mov	r0, r3
 8009b82:	370c      	adds	r7, #12
 8009b84:	46bd      	mov	sp, r7
 8009b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b8a:	4770      	bx	lr

08009b8c <_ZN8gemmlowp17MaskIfGreaterThanIlEET_S1_S1_>:
tIntegerType MaskIfGreaterThan(tIntegerType a, tIntegerType b) {
 8009b8c:	b580      	push	{r7, lr}
 8009b8e:	b082      	sub	sp, #8
 8009b90:	af00      	add	r7, sp, #0
 8009b92:	6078      	str	r0, [r7, #4]
 8009b94:	6039      	str	r1, [r7, #0]
  return MaskIfNonZero<tIntegerType>(a > b);
 8009b96:	687a      	ldr	r2, [r7, #4]
 8009b98:	683b      	ldr	r3, [r7, #0]
 8009b9a:	429a      	cmp	r2, r3
 8009b9c:	bfcc      	ite	gt
 8009b9e:	2301      	movgt	r3, #1
 8009ba0:	2300      	movle	r3, #0
 8009ba2:	b2db      	uxtb	r3, r3
 8009ba4:	4618      	mov	r0, r3
 8009ba6:	f000 f805 	bl	8009bb4 <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_>
 8009baa:	4603      	mov	r3, r0
}
 8009bac:	4618      	mov	r0, r3
 8009bae:	3708      	adds	r7, #8
 8009bb0:	46bd      	mov	sp, r7
 8009bb2:	bd80      	pop	{r7, pc}

08009bb4 <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_>:
tIntegerType MaskIfNonZero(tIntegerType a) {
 8009bb4:	b580      	push	{r7, lr}
 8009bb6:	b082      	sub	sp, #8
 8009bb8:	af00      	add	r7, sp, #0
 8009bba:	6078      	str	r0, [r7, #4]
  return a ? BitNot(zero) : zero;
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	2b00      	cmp	r3, #0
 8009bc0:	d004      	beq.n	8009bcc <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_+0x18>
 8009bc2:	2000      	movs	r0, #0
 8009bc4:	f000 f807 	bl	8009bd6 <_ZN8gemmlowp6BitNotIlEET_S1_>
 8009bc8:	4603      	mov	r3, r0
 8009bca:	e000      	b.n	8009bce <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_+0x1a>
 8009bcc:	2300      	movs	r3, #0
}
 8009bce:	4618      	mov	r0, r3
 8009bd0:	3708      	adds	r7, #8
 8009bd2:	46bd      	mov	sp, r7
 8009bd4:	bd80      	pop	{r7, pc}

08009bd6 <_ZN8gemmlowp6BitNotIlEET_S1_>:
tIntegerType BitNot(tIntegerType a) {
 8009bd6:	b480      	push	{r7}
 8009bd8:	b083      	sub	sp, #12
 8009bda:	af00      	add	r7, sp, #0
 8009bdc:	6078      	str	r0, [r7, #4]
  return ~a;
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	43db      	mvns	r3, r3
}
 8009be2:	4618      	mov	r0, r3
 8009be4:	370c      	adds	r7, #12
 8009be6:	46bd      	mov	sp, r7
 8009be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bec:	4770      	bx	lr
	...

08009bf0 <_ZNSt14numeric_limitsIfE3maxEv>:

      static _GLIBCXX_CONSTEXPR float
      min() _GLIBCXX_USE_NOEXCEPT { return __FLT_MIN__; }

      static _GLIBCXX_CONSTEXPR float
      max() _GLIBCXX_USE_NOEXCEPT { return __FLT_MAX__; }
 8009bf0:	b480      	push	{r7}
 8009bf2:	af00      	add	r7, sp, #0
 8009bf4:	4b04      	ldr	r3, [pc, #16]	; (8009c08 <_ZNSt14numeric_limitsIfE3maxEv+0x18>)
 8009bf6:	ee07 3a90 	vmov	s15, r3
 8009bfa:	eeb0 0a67 	vmov.f32	s0, s15
 8009bfe:	46bd      	mov	sp, r7
 8009c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c04:	4770      	bx	lr
 8009c06:	bf00      	nop
 8009c08:	7f7fffff 	.word	0x7f7fffff

08009c0c <_ZNSt14numeric_limitsIfE6lowestEv>:

#if __cplusplus >= 201103L
      static constexpr float
      lowest() noexcept { return -__FLT_MAX__; }
 8009c0c:	b480      	push	{r7}
 8009c0e:	af00      	add	r7, sp, #0
 8009c10:	f46f 0300 	mvn.w	r3, #8388608	; 0x800000
 8009c14:	ee07 3a90 	vmov	s15, r3
 8009c18:	eeb0 0a67 	vmov.f32	s0, s15
 8009c1c:	46bd      	mov	sp, r7
 8009c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c22:	4770      	bx	lr

08009c24 <_ZN6tflite28ActivationFunctionWithMinMaxIfEET_S1_S1_S1_>:
inline T ActivationFunctionWithMinMax(T x, T output_activation_min,
 8009c24:	b580      	push	{r7, lr}
 8009c26:	b084      	sub	sp, #16
 8009c28:	af00      	add	r7, sp, #0
 8009c2a:	ed87 0a03 	vstr	s0, [r7, #12]
 8009c2e:	edc7 0a02 	vstr	s1, [r7, #8]
 8009c32:	ed87 1a01 	vstr	s2, [r7, #4]
  return min(max(x, output_activation_min), output_activation_max);
 8009c36:	f107 0208 	add.w	r2, r7, #8
 8009c3a:	f107 030c 	add.w	r3, r7, #12
 8009c3e:	4611      	mov	r1, r2
 8009c40:	4618      	mov	r0, r3
 8009c42:	f7fa ff70 	bl	8004b26 <_ZSt3maxIfERKT_S2_S2_>
 8009c46:	4602      	mov	r2, r0
 8009c48:	1d3b      	adds	r3, r7, #4
 8009c4a:	4619      	mov	r1, r3
 8009c4c:	4610      	mov	r0, r2
 8009c4e:	f7fa ff51 	bl	8004af4 <_ZSt3minIfERKT_S2_S2_>
 8009c52:	4603      	mov	r3, r0
 8009c54:	681b      	ldr	r3, [r3, #0]
 8009c56:	ee07 3a90 	vmov	s15, r3
}
 8009c5a:	eeb0 0a67 	vmov.f32	s0, s15
 8009c5e:	3710      	adds	r7, #16
 8009c60:	46bd      	mov	sp, r7
 8009c62:	bd80      	pop	{r7, pc}

08009c64 <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_>:
                                               int32_t* act_max);

// Calculates the useful range of an activation layer given its activation
// tensor.a
template <typename T>
void CalculateActivationRange(TfLiteFusedActivation activation,
 8009c64:	b580      	push	{r7, lr}
 8009c66:	b084      	sub	sp, #16
 8009c68:	af00      	add	r7, sp, #0
 8009c6a:	4603      	mov	r3, r0
 8009c6c:	60b9      	str	r1, [r7, #8]
 8009c6e:	607a      	str	r2, [r7, #4]
 8009c70:	73fb      	strb	r3, [r7, #15]
                              T* activation_min, T* activation_max) {
  if (activation == kTfLiteActRelu) {
 8009c72:	7bfb      	ldrb	r3, [r7, #15]
 8009c74:	2b01      	cmp	r3, #1
 8009c76:	d10b      	bne.n	8009c90 <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_+0x2c>
    *activation_min = 0;
 8009c78:	68bb      	ldr	r3, [r7, #8]
 8009c7a:	f04f 0200 	mov.w	r2, #0
 8009c7e:	601a      	str	r2, [r3, #0]
    *activation_max = std::numeric_limits<T>::max();
 8009c80:	f7ff ffb6 	bl	8009bf0 <_ZNSt14numeric_limitsIfE3maxEv>
 8009c84:	eef0 7a40 	vmov.f32	s15, s0
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	edc3 7a00 	vstr	s15, [r3]
    *activation_max = 1;
  } else {
    *activation_min = std::numeric_limits<T>::lowest();
    *activation_max = std::numeric_limits<T>::max();
  }
}
 8009c8e:	e023      	b.n	8009cd8 <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_+0x74>
  } else if (activation == kTfLiteActRelu6) {
 8009c90:	7bfb      	ldrb	r3, [r7, #15]
 8009c92:	2b03      	cmp	r3, #3
 8009c94:	d107      	bne.n	8009ca6 <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_+0x42>
    *activation_min = 0;
 8009c96:	68bb      	ldr	r3, [r7, #8]
 8009c98:	f04f 0200 	mov.w	r2, #0
 8009c9c:	601a      	str	r2, [r3, #0]
    *activation_max = 6;
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	4a0f      	ldr	r2, [pc, #60]	; (8009ce0 <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_+0x7c>)
 8009ca2:	601a      	str	r2, [r3, #0]
}
 8009ca4:	e018      	b.n	8009cd8 <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_+0x74>
  } else if (activation == kTfLiteActReluN1To1) {
 8009ca6:	7bfb      	ldrb	r3, [r7, #15]
 8009ca8:	2b02      	cmp	r3, #2
 8009caa:	d107      	bne.n	8009cbc <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_+0x58>
    *activation_min = -1;
 8009cac:	68bb      	ldr	r3, [r7, #8]
 8009cae:	4a0d      	ldr	r2, [pc, #52]	; (8009ce4 <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_+0x80>)
 8009cb0:	601a      	str	r2, [r3, #0]
    *activation_max = 1;
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8009cb8:	601a      	str	r2, [r3, #0]
}
 8009cba:	e00d      	b.n	8009cd8 <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_+0x74>
    *activation_min = std::numeric_limits<T>::lowest();
 8009cbc:	f7ff ffa6 	bl	8009c0c <_ZNSt14numeric_limitsIfE6lowestEv>
 8009cc0:	eef0 7a40 	vmov.f32	s15, s0
 8009cc4:	68bb      	ldr	r3, [r7, #8]
 8009cc6:	edc3 7a00 	vstr	s15, [r3]
    *activation_max = std::numeric_limits<T>::max();
 8009cca:	f7ff ff91 	bl	8009bf0 <_ZNSt14numeric_limitsIfE3maxEv>
 8009cce:	eef0 7a40 	vmov.f32	s15, s0
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	edc3 7a00 	vstr	s15, [r3]
}
 8009cd8:	bf00      	nop
 8009cda:	3710      	adds	r7, #16
 8009cdc:	46bd      	mov	sp, r7
 8009cde:	bd80      	pop	{r7, pc}
 8009ce0:	40c00000 	.word	0x40c00000
 8009ce4:	bf800000 	.word	0xbf800000

08009ce8 <_ZN6tflite5micro13GetTensorDataIlEEPKT_PK16TfLiteEvalTensor>:
const T* GetTensorData(const TfLiteEvalTensor* tensor) {
 8009ce8:	b580      	push	{r7, lr}
 8009cea:	b082      	sub	sp, #8
 8009cec:	af00      	add	r7, sp, #0
 8009cee:	6078      	str	r0, [r7, #4]
  TFLITE_DCHECK(tensor != nullptr);
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	2b00      	cmp	r3, #0
 8009cf4:	d101      	bne.n	8009cfa <_ZN6tflite5micro13GetTensorDataIlEEPKT_PK16TfLiteEvalTensor+0x12>
 8009cf6:	f001 f9c1 	bl	800b07c <abort>
  return reinterpret_cast<const T*>(tensor->data.raw);
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	681b      	ldr	r3, [r3, #0]
}
 8009cfe:	4618      	mov	r0, r3
 8009d00:	3708      	adds	r7, #8
 8009d02:	46bd      	mov	sp, r7
 8009d04:	bd80      	pop	{r7, pc}

08009d06 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>:
  return MatchingArraySize(array1, index1, args...);
}

// Get common shape dim, DCHECKing that they all agree.
inline int MatchingDim(const RuntimeShape& shape1, int index1,
                       const RuntimeShape& shape2, int index2) {
 8009d06:	b590      	push	{r4, r7, lr}
 8009d08:	b087      	sub	sp, #28
 8009d0a:	af00      	add	r7, sp, #0
 8009d0c:	60f8      	str	r0, [r7, #12]
 8009d0e:	60b9      	str	r1, [r7, #8]
 8009d10:	607a      	str	r2, [r7, #4]
 8009d12:	603b      	str	r3, [r7, #0]
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
 8009d14:	68b9      	ldr	r1, [r7, #8]
 8009d16:	68f8      	ldr	r0, [r7, #12]
 8009d18:	f7ff fe1e 	bl	8009958 <_ZNK6tflite12RuntimeShape4DimsEi>
 8009d1c:	4604      	mov	r4, r0
 8009d1e:	6839      	ldr	r1, [r7, #0]
 8009d20:	6878      	ldr	r0, [r7, #4]
 8009d22:	f7ff fe19 	bl	8009958 <_ZNK6tflite12RuntimeShape4DimsEi>
 8009d26:	4603      	mov	r3, r0
 8009d28:	429c      	cmp	r4, r3
 8009d2a:	d001      	beq.n	8009d30 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i+0x2a>
 8009d2c:	f001 f9a6 	bl	800b07c <abort>
  return std::min(shape1.Dims(index1), shape2.Dims(index2));
 8009d30:	68b9      	ldr	r1, [r7, #8]
 8009d32:	68f8      	ldr	r0, [r7, #12]
 8009d34:	f7ff fe10 	bl	8009958 <_ZNK6tflite12RuntimeShape4DimsEi>
 8009d38:	4603      	mov	r3, r0
 8009d3a:	613b      	str	r3, [r7, #16]
 8009d3c:	6839      	ldr	r1, [r7, #0]
 8009d3e:	6878      	ldr	r0, [r7, #4]
 8009d40:	f7ff fe0a 	bl	8009958 <_ZNK6tflite12RuntimeShape4DimsEi>
 8009d44:	4603      	mov	r3, r0
 8009d46:	617b      	str	r3, [r7, #20]
 8009d48:	f107 0214 	add.w	r2, r7, #20
 8009d4c:	f107 0310 	add.w	r3, r7, #16
 8009d50:	4611      	mov	r1, r2
 8009d52:	4618      	mov	r0, r3
 8009d54:	f7fb fa56 	bl	8005204 <_ZSt3minIlERKT_S2_S2_>
 8009d58:	4603      	mov	r3, r0
 8009d5a:	681b      	ldr	r3, [r3, #0]
}
 8009d5c:	4618      	mov	r0, r3
 8009d5e:	371c      	adds	r7, #28
 8009d60:	46bd      	mov	sp, r7
 8009d62:	bd90      	pop	{r4, r7, pc}

08009d64 <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi>:
}

// Data is required to be contiguous, and so many operators can use either the
// full array flat size or the flat size with one dimension skipped (commonly
// the depth).
inline int FlatSizeSkipDim(const RuntimeShape& shape, int skip_dim) {
 8009d64:	b580      	push	{r7, lr}
 8009d66:	b086      	sub	sp, #24
 8009d68:	af00      	add	r7, sp, #0
 8009d6a:	6078      	str	r0, [r7, #4]
 8009d6c:	6039      	str	r1, [r7, #0]
  const int dims_count = shape.DimensionsCount();
 8009d6e:	6878      	ldr	r0, [r7, #4]
 8009d70:	f7fb fbe5 	bl	800553e <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 8009d74:	60f8      	str	r0, [r7, #12]
  TFLITE_DCHECK(skip_dim >= 0 && skip_dim < dims_count);
 8009d76:	683b      	ldr	r3, [r7, #0]
 8009d78:	2b00      	cmp	r3, #0
 8009d7a:	db03      	blt.n	8009d84 <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi+0x20>
 8009d7c:	683a      	ldr	r2, [r7, #0]
 8009d7e:	68fb      	ldr	r3, [r7, #12]
 8009d80:	429a      	cmp	r2, r3
 8009d82:	db01      	blt.n	8009d88 <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi+0x24>
 8009d84:	f001 f97a 	bl	800b07c <abort>
  const auto* dims_data = shape.DimsData();
 8009d88:	6878      	ldr	r0, [r7, #4]
 8009d8a:	f7ff fe0a 	bl	80099a2 <_ZNK6tflite12RuntimeShape8DimsDataEv>
 8009d8e:	60b8      	str	r0, [r7, #8]
  int flat_size = 1;
 8009d90:	2301      	movs	r3, #1
 8009d92:	617b      	str	r3, [r7, #20]
  for (int i = 0; i < dims_count; ++i) {
 8009d94:	2300      	movs	r3, #0
 8009d96:	613b      	str	r3, [r7, #16]
 8009d98:	693a      	ldr	r2, [r7, #16]
 8009d9a:	68fb      	ldr	r3, [r7, #12]
 8009d9c:	429a      	cmp	r2, r3
 8009d9e:	da12      	bge.n	8009dc6 <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi+0x62>
    flat_size *= (i == skip_dim) ? 1 : dims_data[i];
 8009da0:	693a      	ldr	r2, [r7, #16]
 8009da2:	683b      	ldr	r3, [r7, #0]
 8009da4:	429a      	cmp	r2, r3
 8009da6:	d005      	beq.n	8009db4 <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi+0x50>
 8009da8:	693b      	ldr	r3, [r7, #16]
 8009daa:	009b      	lsls	r3, r3, #2
 8009dac:	68ba      	ldr	r2, [r7, #8]
 8009dae:	4413      	add	r3, r2
 8009db0:	681b      	ldr	r3, [r3, #0]
 8009db2:	e000      	b.n	8009db6 <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi+0x52>
 8009db4:	2301      	movs	r3, #1
 8009db6:	697a      	ldr	r2, [r7, #20]
 8009db8:	fb03 f302 	mul.w	r3, r3, r2
 8009dbc:	617b      	str	r3, [r7, #20]
  for (int i = 0; i < dims_count; ++i) {
 8009dbe:	693b      	ldr	r3, [r7, #16]
 8009dc0:	3301      	adds	r3, #1
 8009dc2:	613b      	str	r3, [r7, #16]
 8009dc4:	e7e8      	b.n	8009d98 <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi+0x34>
  }
  return flat_size;
 8009dc6:	697b      	ldr	r3, [r7, #20]
}
 8009dc8:	4618      	mov	r0, r3
 8009dca:	3718      	adds	r7, #24
 8009dcc:	46bd      	mov	sp, r7
 8009dce:	bd80      	pop	{r7, pc}

08009dd0 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf>:
inline void FullyConnected(
    const FullyConnectedParams& params, const RuntimeShape& input_shape,
    const float* input_data, const RuntimeShape& weights_shape,
    const float* weights_data, const RuntimeShape& bias_shape,
    const float* bias_data, const RuntimeShape& output_shape,
    float* output_data) {
 8009dd0:	b590      	push	{r4, r7, lr}
 8009dd2:	b091      	sub	sp, #68	; 0x44
 8009dd4:	af00      	add	r7, sp, #0
 8009dd6:	60f8      	str	r0, [r7, #12]
 8009dd8:	60b9      	str	r1, [r7, #8]
 8009dda:	607a      	str	r2, [r7, #4]
 8009ddc:	603b      	str	r3, [r7, #0]
  const float output_activation_min = params.float_activation_min;
 8009dde:	68fb      	ldr	r3, [r7, #12]
 8009de0:	69db      	ldr	r3, [r3, #28]
 8009de2:	62bb      	str	r3, [r7, #40]	; 0x28
  const float output_activation_max = params.float_activation_max;
 8009de4:	68fb      	ldr	r3, [r7, #12]
 8009de6:	6a1b      	ldr	r3, [r3, #32]
 8009de8:	627b      	str	r3, [r7, #36]	; 0x24
  // TODO(b/62193649): This really should be:
  //     const int batches = ArraySize(output_dims, 1);
  // but the current --variable_batch hack consists in overwriting the 3rd
  // dimension with the runtime batch size, as we don't keep track for each
  // array of which dimension is the batch dimension in it.
  const int output_dims_count = output_shape.DimensionsCount();
 8009dea:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8009dec:	f7fb fba7 	bl	800553e <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 8009df0:	6238      	str	r0, [r7, #32]
  const int weights_dims_count = weights_shape.DimensionsCount();
 8009df2:	6838      	ldr	r0, [r7, #0]
 8009df4:	f7fb fba3 	bl	800553e <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 8009df8:	61f8      	str	r0, [r7, #28]
  const int batches = FlatSizeSkipDim(output_shape, output_dims_count - 1);
 8009dfa:	6a3b      	ldr	r3, [r7, #32]
 8009dfc:	3b01      	subs	r3, #1
 8009dfe:	4619      	mov	r1, r3
 8009e00:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8009e02:	f7ff ffaf 	bl	8009d64 <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi>
 8009e06:	61b8      	str	r0, [r7, #24]
  const int output_depth = MatchingDim(weights_shape, weights_dims_count - 2,
 8009e08:	69fb      	ldr	r3, [r7, #28]
 8009e0a:	1e99      	subs	r1, r3, #2
 8009e0c:	6a3b      	ldr	r3, [r7, #32]
 8009e0e:	3b01      	subs	r3, #1
 8009e10:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8009e12:	6838      	ldr	r0, [r7, #0]
 8009e14:	f7ff ff77 	bl	8009d06 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 8009e18:	6178      	str	r0, [r7, #20]
                                       output_shape, output_dims_count - 1);
  const int accum_depth = weights_shape.Dims(weights_dims_count - 1);
 8009e1a:	69fb      	ldr	r3, [r7, #28]
 8009e1c:	3b01      	subs	r3, #1
 8009e1e:	4619      	mov	r1, r3
 8009e20:	6838      	ldr	r0, [r7, #0]
 8009e22:	f7ff fd99 	bl	8009958 <_ZNK6tflite12RuntimeShape4DimsEi>
 8009e26:	6138      	str	r0, [r7, #16]
  for (int b = 0; b < batches; ++b) {
 8009e28:	2300      	movs	r3, #0
 8009e2a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009e2c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8009e2e:	69bb      	ldr	r3, [r7, #24]
 8009e30:	429a      	cmp	r2, r3
 8009e32:	da5f      	bge.n	8009ef4 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x124>
    for (int out_c = 0; out_c < output_depth; ++out_c) {
 8009e34:	2300      	movs	r3, #0
 8009e36:	63bb      	str	r3, [r7, #56]	; 0x38
 8009e38:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009e3a:	697b      	ldr	r3, [r7, #20]
 8009e3c:	429a      	cmp	r2, r3
 8009e3e:	da55      	bge.n	8009eec <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x11c>
      float total = 0.f;
 8009e40:	f04f 0300 	mov.w	r3, #0
 8009e44:	637b      	str	r3, [r7, #52]	; 0x34
      for (int d = 0; d < accum_depth; ++d) {
 8009e46:	2300      	movs	r3, #0
 8009e48:	633b      	str	r3, [r7, #48]	; 0x30
 8009e4a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009e4c:	693b      	ldr	r3, [r7, #16]
 8009e4e:	429a      	cmp	r2, r3
 8009e50:	da21      	bge.n	8009e96 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0xc6>
        total += input_data[b * accum_depth + d] *
 8009e52:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009e54:	693a      	ldr	r2, [r7, #16]
 8009e56:	fb02 f203 	mul.w	r2, r2, r3
 8009e5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e5c:	4413      	add	r3, r2
 8009e5e:	009b      	lsls	r3, r3, #2
 8009e60:	687a      	ldr	r2, [r7, #4]
 8009e62:	4413      	add	r3, r2
 8009e64:	ed93 7a00 	vldr	s14, [r3]
                 weights_data[out_c * accum_depth + d];
 8009e68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e6a:	693a      	ldr	r2, [r7, #16]
 8009e6c:	fb02 f203 	mul.w	r2, r2, r3
 8009e70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e72:	4413      	add	r3, r2
 8009e74:	009b      	lsls	r3, r3, #2
 8009e76:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8009e78:	4413      	add	r3, r2
 8009e7a:	edd3 7a00 	vldr	s15, [r3]
        total += input_data[b * accum_depth + d] *
 8009e7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009e82:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8009e86:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009e8a:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
      for (int d = 0; d < accum_depth; ++d) {
 8009e8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e90:	3301      	adds	r3, #1
 8009e92:	633b      	str	r3, [r7, #48]	; 0x30
 8009e94:	e7d9      	b.n	8009e4a <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x7a>
      }
      float bias_value = 0.0f;
 8009e96:	f04f 0300 	mov.w	r3, #0
 8009e9a:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (bias_data) {
 8009e9c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009e9e:	2b00      	cmp	r3, #0
 8009ea0:	d005      	beq.n	8009eae <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0xde>
        bias_value = bias_data[out_c];
 8009ea2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ea4:	009b      	lsls	r3, r3, #2
 8009ea6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009ea8:	4413      	add	r3, r2
 8009eaa:	681b      	ldr	r3, [r3, #0]
 8009eac:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      output_data[out_c + output_depth * b] = ActivationFunctionWithMinMax(
 8009eae:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8009eb2:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8009eb6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009eba:	697b      	ldr	r3, [r7, #20]
 8009ebc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8009ebe:	fb02 f203 	mul.w	r2, r2, r3
 8009ec2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ec4:	4413      	add	r3, r2
 8009ec6:	009b      	lsls	r3, r3, #2
 8009ec8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8009eca:	18d4      	adds	r4, r2, r3
 8009ecc:	ed97 1a09 	vldr	s2, [r7, #36]	; 0x24
 8009ed0:	edd7 0a0a 	vldr	s1, [r7, #40]	; 0x28
 8009ed4:	eeb0 0a67 	vmov.f32	s0, s15
 8009ed8:	f7ff fea4 	bl	8009c24 <_ZN6tflite28ActivationFunctionWithMinMaxIfEET_S1_S1_S1_>
 8009edc:	eef0 7a40 	vmov.f32	s15, s0
 8009ee0:	edc4 7a00 	vstr	s15, [r4]
    for (int out_c = 0; out_c < output_depth; ++out_c) {
 8009ee4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ee6:	3301      	adds	r3, #1
 8009ee8:	63bb      	str	r3, [r7, #56]	; 0x38
 8009eea:	e7a5      	b.n	8009e38 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x68>
  for (int b = 0; b < batches; ++b) {
 8009eec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009eee:	3301      	adds	r3, #1
 8009ef0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009ef2:	e79b      	b.n	8009e2c <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x5c>
          total + bias_value, output_activation_min, output_activation_max);
    }
  }
}
 8009ef4:	bf00      	nop
 8009ef6:	3744      	adds	r7, #68	; 0x44
 8009ef8:	46bd      	mov	sp, r7
 8009efa:	bd90      	pop	{r4, r7, pc}

08009efc <_ZN6tflite21reference_integer_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_PKlS6_Pa>:
inline void FullyConnected(
    const FullyConnectedParams& params, const RuntimeShape& input_shape,
    const int8_t* input_data, const RuntimeShape& filter_shape,
    const int8_t* filter_data, const RuntimeShape& bias_shape,
    const int32_t* bias_data, const RuntimeShape& output_shape,
    int8_t* output_data) {
 8009efc:	b580      	push	{r7, lr}
 8009efe:	b096      	sub	sp, #88	; 0x58
 8009f00:	af00      	add	r7, sp, #0
 8009f02:	60f8      	str	r0, [r7, #12]
 8009f04:	60b9      	str	r1, [r7, #8]
 8009f06:	607a      	str	r2, [r7, #4]
 8009f08:	603b      	str	r3, [r7, #0]
  const int32_t input_offset = params.input_offset;
 8009f0a:	68fb      	ldr	r3, [r7, #12]
 8009f0c:	681b      	ldr	r3, [r3, #0]
 8009f0e:	64bb      	str	r3, [r7, #72]	; 0x48
  const int32_t filter_offset = params.weights_offset;
 8009f10:	68fb      	ldr	r3, [r7, #12]
 8009f12:	685b      	ldr	r3, [r3, #4]
 8009f14:	647b      	str	r3, [r7, #68]	; 0x44
  const int32_t output_offset = params.output_offset;
 8009f16:	68fb      	ldr	r3, [r7, #12]
 8009f18:	689b      	ldr	r3, [r3, #8]
 8009f1a:	643b      	str	r3, [r7, #64]	; 0x40
  const int32_t output_multiplier = params.output_multiplier;
 8009f1c:	68fb      	ldr	r3, [r7, #12]
 8009f1e:	68db      	ldr	r3, [r3, #12]
 8009f20:	63fb      	str	r3, [r7, #60]	; 0x3c
  const int output_shift = params.output_shift;
 8009f22:	68fb      	ldr	r3, [r7, #12]
 8009f24:	691b      	ldr	r3, [r3, #16]
 8009f26:	63bb      	str	r3, [r7, #56]	; 0x38
  const int32_t output_activation_min = params.quantized_activation_min;
 8009f28:	68fb      	ldr	r3, [r7, #12]
 8009f2a:	695b      	ldr	r3, [r3, #20]
 8009f2c:	61fb      	str	r3, [r7, #28]
  const int32_t output_activation_max = params.quantized_activation_max;
 8009f2e:	68fb      	ldr	r3, [r7, #12]
 8009f30:	699b      	ldr	r3, [r3, #24]
 8009f32:	61bb      	str	r3, [r7, #24]
  TFLITE_DCHECK_GE(filter_shape.DimensionsCount(), 2);
 8009f34:	6838      	ldr	r0, [r7, #0]
 8009f36:	f7fb fb02 	bl	800553e <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 8009f3a:	4603      	mov	r3, r0
 8009f3c:	2b01      	cmp	r3, #1
 8009f3e:	dc01      	bgt.n	8009f44 <_ZN6tflite21reference_integer_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_PKlS6_Pa+0x48>
 8009f40:	f001 f89c 	bl	800b07c <abort>
  TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 2);
 8009f44:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8009f46:	f7fb fafa 	bl	800553e <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 8009f4a:	4603      	mov	r3, r0
 8009f4c:	2b02      	cmp	r3, #2
 8009f4e:	d001      	beq.n	8009f54 <_ZN6tflite21reference_integer_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_PKlS6_Pa+0x58>
 8009f50:	f001 f894 	bl	800b07c <abort>

  TFLITE_DCHECK_LE(output_activation_min, output_activation_max);
 8009f54:	69fa      	ldr	r2, [r7, #28]
 8009f56:	69bb      	ldr	r3, [r7, #24]
 8009f58:	429a      	cmp	r2, r3
 8009f5a:	dd01      	ble.n	8009f60 <_ZN6tflite21reference_integer_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_PKlS6_Pa+0x64>
 8009f5c:	f001 f88e 	bl	800b07c <abort>
  const int filter_dim_count = filter_shape.DimensionsCount();
 8009f60:	6838      	ldr	r0, [r7, #0]
 8009f62:	f7fb faec 	bl	800553e <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 8009f66:	6378      	str	r0, [r7, #52]	; 0x34
  const int batches = output_shape.Dims(0);
 8009f68:	2100      	movs	r1, #0
 8009f6a:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8009f6c:	f7ff fcf4 	bl	8009958 <_ZNK6tflite12RuntimeShape4DimsEi>
 8009f70:	6338      	str	r0, [r7, #48]	; 0x30
  const int output_depth = output_shape.Dims(1);
 8009f72:	2101      	movs	r1, #1
 8009f74:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8009f76:	f7ff fcef 	bl	8009958 <_ZNK6tflite12RuntimeShape4DimsEi>
 8009f7a:	62f8      	str	r0, [r7, #44]	; 0x2c
  TFLITE_DCHECK_LE(output_depth, filter_shape.Dims(filter_dim_count - 2));
 8009f7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009f7e:	3b02      	subs	r3, #2
 8009f80:	4619      	mov	r1, r3
 8009f82:	6838      	ldr	r0, [r7, #0]
 8009f84:	f7ff fce8 	bl	8009958 <_ZNK6tflite12RuntimeShape4DimsEi>
 8009f88:	4602      	mov	r2, r0
 8009f8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f8c:	4293      	cmp	r3, r2
 8009f8e:	dd01      	ble.n	8009f94 <_ZN6tflite21reference_integer_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_PKlS6_Pa+0x98>
 8009f90:	f001 f874 	bl	800b07c <abort>
  const int accum_depth = filter_shape.Dims(filter_dim_count - 1);
 8009f94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009f96:	3b01      	subs	r3, #1
 8009f98:	4619      	mov	r1, r3
 8009f9a:	6838      	ldr	r0, [r7, #0]
 8009f9c:	f7ff fcdc 	bl	8009958 <_ZNK6tflite12RuntimeShape4DimsEi>
 8009fa0:	62b8      	str	r0, [r7, #40]	; 0x28
  for (int b = 0; b < batches; ++b) {
 8009fa2:	2300      	movs	r3, #0
 8009fa4:	657b      	str	r3, [r7, #84]	; 0x54
 8009fa6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8009fa8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009faa:	429a      	cmp	r2, r3
 8009fac:	da75      	bge.n	800a09a <_ZN6tflite21reference_integer_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_PKlS6_Pa+0x19e>
    for (int out_c = 0; out_c < output_depth; ++out_c) {
 8009fae:	2300      	movs	r3, #0
 8009fb0:	653b      	str	r3, [r7, #80]	; 0x50
 8009fb2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8009fb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009fb6:	429a      	cmp	r2, r3
 8009fb8:	da6b      	bge.n	800a092 <_ZN6tflite21reference_integer_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_PKlS6_Pa+0x196>
      int32_t acc = 0;
 8009fba:	2300      	movs	r3, #0
 8009fbc:	617b      	str	r3, [r7, #20]
      for (int d = 0; d < accum_depth; ++d) {
 8009fbe:	2300      	movs	r3, #0
 8009fc0:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009fc2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009fc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009fc6:	429a      	cmp	r2, r3
 8009fc8:	da26      	bge.n	800a018 <_ZN6tflite21reference_integer_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_PKlS6_Pa+0x11c>
        int32_t input_val = input_data[b * accum_depth + d];
 8009fca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009fcc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009fce:	fb02 f203 	mul.w	r2, r2, r3
 8009fd2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009fd4:	4413      	add	r3, r2
 8009fd6:	461a      	mov	r2, r3
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	4413      	add	r3, r2
 8009fdc:	f993 3000 	ldrsb.w	r3, [r3]
 8009fe0:	627b      	str	r3, [r7, #36]	; 0x24
        int32_t filter_val = filter_data[out_c * accum_depth + d];
 8009fe2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009fe4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009fe6:	fb02 f203 	mul.w	r2, r2, r3
 8009fea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009fec:	4413      	add	r3, r2
 8009fee:	461a      	mov	r2, r3
 8009ff0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009ff2:	4413      	add	r3, r2
 8009ff4:	f993 3000 	ldrsb.w	r3, [r3]
 8009ff8:	623b      	str	r3, [r7, #32]
        acc += (filter_val + filter_offset) * (input_val + input_offset);
 8009ffa:	6a3a      	ldr	r2, [r7, #32]
 8009ffc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009ffe:	4413      	add	r3, r2
 800a000:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a002:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a004:	440a      	add	r2, r1
 800a006:	fb02 f203 	mul.w	r2, r2, r3
 800a00a:	697b      	ldr	r3, [r7, #20]
 800a00c:	4413      	add	r3, r2
 800a00e:	617b      	str	r3, [r7, #20]
      for (int d = 0; d < accum_depth; ++d) {
 800a010:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a012:	3301      	adds	r3, #1
 800a014:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a016:	e7d4      	b.n	8009fc2 <_ZN6tflite21reference_integer_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_PKlS6_Pa+0xc6>
      }
      if (bias_data) {
 800a018:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800a01a:	2b00      	cmp	r3, #0
 800a01c:	d007      	beq.n	800a02e <_ZN6tflite21reference_integer_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_PKlS6_Pa+0x132>
        acc += bias_data[out_c];
 800a01e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a020:	009b      	lsls	r3, r3, #2
 800a022:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800a024:	4413      	add	r3, r2
 800a026:	681a      	ldr	r2, [r3, #0]
 800a028:	697b      	ldr	r3, [r7, #20]
 800a02a:	4413      	add	r3, r2
 800a02c:	617b      	str	r3, [r7, #20]
      }
      acc = MultiplyByQuantizedMultiplier(acc, output_multiplier, output_shift);
 800a02e:	697b      	ldr	r3, [r7, #20]
 800a030:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a032:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800a034:	4618      	mov	r0, r3
 800a036:	f7ff fcc7 	bl	80099c8 <_ZN6tflite29MultiplyByQuantizedMultiplierElli>
 800a03a:	4603      	mov	r3, r0
 800a03c:	617b      	str	r3, [r7, #20]
      acc += output_offset;
 800a03e:	697a      	ldr	r2, [r7, #20]
 800a040:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a042:	4413      	add	r3, r2
 800a044:	617b      	str	r3, [r7, #20]
      acc = std::max(acc, output_activation_min);
 800a046:	f107 021c 	add.w	r2, r7, #28
 800a04a:	f107 0314 	add.w	r3, r7, #20
 800a04e:	4611      	mov	r1, r2
 800a050:	4618      	mov	r0, r3
 800a052:	f7fb f8eb 	bl	800522c <_ZSt3maxIlERKT_S2_S2_>
 800a056:	4603      	mov	r3, r0
 800a058:	681b      	ldr	r3, [r3, #0]
 800a05a:	617b      	str	r3, [r7, #20]
      acc = std::min(acc, output_activation_max);
 800a05c:	f107 0218 	add.w	r2, r7, #24
 800a060:	f107 0314 	add.w	r3, r7, #20
 800a064:	4611      	mov	r1, r2
 800a066:	4618      	mov	r0, r3
 800a068:	f7fb f8cc 	bl	8005204 <_ZSt3minIlERKT_S2_S2_>
 800a06c:	4603      	mov	r3, r0
 800a06e:	681b      	ldr	r3, [r3, #0]
 800a070:	617b      	str	r3, [r7, #20]
      output_data[out_c + output_depth * b] = static_cast<int8_t>(acc);
 800a072:	6979      	ldr	r1, [r7, #20]
 800a074:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a076:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800a078:	fb02 f203 	mul.w	r2, r2, r3
 800a07c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a07e:	4413      	add	r3, r2
 800a080:	461a      	mov	r2, r3
 800a082:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a084:	4413      	add	r3, r2
 800a086:	b24a      	sxtb	r2, r1
 800a088:	701a      	strb	r2, [r3, #0]
    for (int out_c = 0; out_c < output_depth; ++out_c) {
 800a08a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a08c:	3301      	adds	r3, #1
 800a08e:	653b      	str	r3, [r7, #80]	; 0x50
 800a090:	e78f      	b.n	8009fb2 <_ZN6tflite21reference_integer_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_PKlS6_Pa+0xb6>
  for (int b = 0; b < batches; ++b) {
 800a092:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a094:	3301      	adds	r3, #1
 800a096:	657b      	str	r3, [r7, #84]	; 0x54
 800a098:	e785      	b.n	8009fa6 <_ZN6tflite21reference_integer_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_PKlS6_Pa+0xaa>
    }
  }
}
 800a09a:	bf00      	nop
 800a09c:	3758      	adds	r7, #88	; 0x58
 800a09e:	46bd      	mov	sp, r7
 800a0a0:	bd80      	pop	{r7, pc}

0800a0a2 <_ZN6tflite12_GLOBAL__N_14InitEP13TfLiteContextPKcj>:
#include "tensorflow/lite/micro/kernels/kernel_util.h"

namespace tflite {
namespace {

void* Init(TfLiteContext* context, const char* buffer, size_t length) {
 800a0a2:	b580      	push	{r7, lr}
 800a0a4:	b084      	sub	sp, #16
 800a0a6:	af00      	add	r7, sp, #0
 800a0a8:	60f8      	str	r0, [r7, #12]
 800a0aa:	60b9      	str	r1, [r7, #8]
 800a0ac:	607a      	str	r2, [r7, #4]
  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);
 800a0ae:	68fb      	ldr	r3, [r7, #12]
 800a0b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a0b2:	2b00      	cmp	r3, #0
 800a0b4:	d101      	bne.n	800a0ba <_ZN6tflite12_GLOBAL__N_14InitEP13TfLiteContextPKcj+0x18>
 800a0b6:	f000 ffe1 	bl	800b07c <abort>
  return context->AllocatePersistentBuffer(context,
 800a0ba:	68fb      	ldr	r3, [r7, #12]
 800a0bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a0be:	2120      	movs	r1, #32
 800a0c0:	68f8      	ldr	r0, [r7, #12]
 800a0c2:	4798      	blx	r3
 800a0c4:	4603      	mov	r3, r0
                                           sizeof(OpDataFullyConnected));
}
 800a0c6:	4618      	mov	r0, r3
 800a0c8:	3710      	adds	r7, #16
 800a0ca:	46bd      	mov	sp, r7
 800a0cc:	bd80      	pop	{r7, pc}
	...

0800a0d0 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {
 800a0d0:	b5b0      	push	{r4, r5, r7, lr}
 800a0d2:	b08c      	sub	sp, #48	; 0x30
 800a0d4:	af04      	add	r7, sp, #16
 800a0d6:	6078      	str	r0, [r7, #4]
 800a0d8:	6039      	str	r1, [r7, #0]
  TFLITE_DCHECK(node->user_data != nullptr);
 800a0da:	683b      	ldr	r3, [r7, #0]
 800a0dc:	691b      	ldr	r3, [r3, #16]
 800a0de:	2b00      	cmp	r3, #0
 800a0e0:	d101      	bne.n	800a0e6 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x16>
 800a0e2:	f000 ffcb 	bl	800b07c <abort>
  TFLITE_DCHECK(node->builtin_data != nullptr);
 800a0e6:	683b      	ldr	r3, [r7, #0]
 800a0e8:	695b      	ldr	r3, [r3, #20]
 800a0ea:	2b00      	cmp	r3, #0
 800a0ec:	d101      	bne.n	800a0f2 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x22>
 800a0ee:	f000 ffc5 	bl	800b07c <abort>

  auto* data = static_cast<OpDataFullyConnected*>(node->user_data);
 800a0f2:	683b      	ldr	r3, [r7, #0]
 800a0f4:	691b      	ldr	r3, [r3, #16]
 800a0f6:	61fb      	str	r3, [r7, #28]
  const auto params =
 800a0f8:	683b      	ldr	r3, [r7, #0]
 800a0fa:	695b      	ldr	r3, [r3, #20]
 800a0fc:	61bb      	str	r3, [r7, #24]
      static_cast<const TfLiteFullyConnectedParams*>(node->builtin_data);

  const TfLiteTensor* input =
      GetInput(context, node, kFullyConnectedInputTensor);
 800a0fe:	4b47      	ldr	r3, [pc, #284]	; (800a21c <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x14c>)
 800a100:	681b      	ldr	r3, [r3, #0]
 800a102:	461a      	mov	r2, r3
 800a104:	6839      	ldr	r1, [r7, #0]
 800a106:	6878      	ldr	r0, [r7, #4]
 800a108:	f7fa fdef 	bl	8004cea <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
 800a10c:	6178      	str	r0, [r7, #20]
  TF_LITE_ENSURE(context, input != nullptr);
 800a10e:	697b      	ldr	r3, [r7, #20]
 800a110:	2b00      	cmp	r3, #0
 800a112:	d10a      	bne.n	800a12a <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x5a>
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	695c      	ldr	r4, [r3, #20]
 800a118:	4b41      	ldr	r3, [pc, #260]	; (800a220 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x150>)
 800a11a:	9300      	str	r3, [sp, #0]
 800a11c:	232f      	movs	r3, #47	; 0x2f
 800a11e:	4a41      	ldr	r2, [pc, #260]	; (800a224 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x154>)
 800a120:	4941      	ldr	r1, [pc, #260]	; (800a228 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x158>)
 800a122:	6878      	ldr	r0, [r7, #4]
 800a124:	47a0      	blx	r4
 800a126:	2301      	movs	r3, #1
 800a128:	e073      	b.n	800a212 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x142>
  const TfLiteTensor* filter =
      GetInput(context, node, kFullyConnectedWeightsTensor);
 800a12a:	4b40      	ldr	r3, [pc, #256]	; (800a22c <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x15c>)
 800a12c:	681b      	ldr	r3, [r3, #0]
 800a12e:	461a      	mov	r2, r3
 800a130:	6839      	ldr	r1, [r7, #0]
 800a132:	6878      	ldr	r0, [r7, #4]
 800a134:	f7fa fdd9 	bl	8004cea <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
 800a138:	6138      	str	r0, [r7, #16]
  TF_LITE_ENSURE(context, filter != nullptr);
 800a13a:	693b      	ldr	r3, [r7, #16]
 800a13c:	2b00      	cmp	r3, #0
 800a13e:	d10a      	bne.n	800a156 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x86>
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	695c      	ldr	r4, [r3, #20]
 800a144:	4b3a      	ldr	r3, [pc, #232]	; (800a230 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x160>)
 800a146:	9300      	str	r3, [sp, #0]
 800a148:	2332      	movs	r3, #50	; 0x32
 800a14a:	4a36      	ldr	r2, [pc, #216]	; (800a224 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x154>)
 800a14c:	4936      	ldr	r1, [pc, #216]	; (800a228 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x158>)
 800a14e:	6878      	ldr	r0, [r7, #4]
 800a150:	47a0      	blx	r4
 800a152:	2301      	movs	r3, #1
 800a154:	e05d      	b.n	800a212 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x142>
  const TfLiteTensor* bias =
      GetOptionalInputTensor(context, node, kFullyConnectedBiasTensor);
 800a156:	4b37      	ldr	r3, [pc, #220]	; (800a234 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x164>)
 800a158:	681b      	ldr	r3, [r3, #0]
 800a15a:	461a      	mov	r2, r3
 800a15c:	6839      	ldr	r1, [r7, #0]
 800a15e:	6878      	ldr	r0, [r7, #4]
 800a160:	f7fa fdf3 	bl	8004d4a <_ZN6tflite22GetOptionalInputTensorEPK13TfLiteContextPK10TfLiteNodei>
 800a164:	60f8      	str	r0, [r7, #12]
  TfLiteTensor* output = GetOutput(context, node, kFullyConnectedOutputTensor);
 800a166:	4b34      	ldr	r3, [pc, #208]	; (800a238 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x168>)
 800a168:	681b      	ldr	r3, [r3, #0]
 800a16a:	461a      	mov	r2, r3
 800a16c:	6839      	ldr	r1, [r7, #0]
 800a16e:	6878      	ldr	r0, [r7, #4]
 800a170:	f7fa fdcb 	bl	8004d0a <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei>
 800a174:	60b8      	str	r0, [r7, #8]
  TF_LITE_ENSURE(context, output != nullptr);
 800a176:	68bb      	ldr	r3, [r7, #8]
 800a178:	2b00      	cmp	r3, #0
 800a17a:	d10a      	bne.n	800a192 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0xc2>
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	695c      	ldr	r4, [r3, #20]
 800a180:	4b2e      	ldr	r3, [pc, #184]	; (800a23c <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x16c>)
 800a182:	9300      	str	r3, [sp, #0]
 800a184:	2336      	movs	r3, #54	; 0x36
 800a186:	4a27      	ldr	r2, [pc, #156]	; (800a224 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x154>)
 800a188:	4927      	ldr	r1, [pc, #156]	; (800a228 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x158>)
 800a18a:	6878      	ldr	r0, [r7, #4]
 800a18c:	47a0      	blx	r4
 800a18e:	2301      	movs	r3, #1
 800a190:	e03f      	b.n	800a212 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x142>

  TF_LITE_ENSURE_TYPES_EQ(context, input->type, output->type);
 800a192:	697b      	ldr	r3, [r7, #20]
 800a194:	781a      	ldrb	r2, [r3, #0]
 800a196:	68bb      	ldr	r3, [r7, #8]
 800a198:	781b      	ldrb	r3, [r3, #0]
 800a19a:	429a      	cmp	r2, r3
 800a19c:	d01a      	beq.n	800a1d4 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x104>
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	695c      	ldr	r4, [r3, #20]
 800a1a2:	697b      	ldr	r3, [r7, #20]
 800a1a4:	781b      	ldrb	r3, [r3, #0]
 800a1a6:	4618      	mov	r0, r3
 800a1a8:	f7f9 fc7c 	bl	8003aa4 <TfLiteTypeGetName>
 800a1ac:	4605      	mov	r5, r0
 800a1ae:	68bb      	ldr	r3, [r7, #8]
 800a1b0:	781b      	ldrb	r3, [r3, #0]
 800a1b2:	4618      	mov	r0, r3
 800a1b4:	f7f9 fc76 	bl	8003aa4 <TfLiteTypeGetName>
 800a1b8:	4603      	mov	r3, r0
 800a1ba:	9303      	str	r3, [sp, #12]
 800a1bc:	9502      	str	r5, [sp, #8]
 800a1be:	4b20      	ldr	r3, [pc, #128]	; (800a240 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x170>)
 800a1c0:	9301      	str	r3, [sp, #4]
 800a1c2:	4b20      	ldr	r3, [pc, #128]	; (800a244 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x174>)
 800a1c4:	9300      	str	r3, [sp, #0]
 800a1c6:	2338      	movs	r3, #56	; 0x38
 800a1c8:	4a16      	ldr	r2, [pc, #88]	; (800a224 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x154>)
 800a1ca:	491f      	ldr	r1, [pc, #124]	; (800a248 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x178>)
 800a1cc:	6878      	ldr	r0, [r7, #4]
 800a1ce:	47a0      	blx	r4
 800a1d0:	2301      	movs	r3, #1
 800a1d2:	e01e      	b.n	800a212 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x142>
  TF_LITE_ENSURE_MSG(context, input->type == filter->type,
 800a1d4:	697b      	ldr	r3, [r7, #20]
 800a1d6:	781a      	ldrb	r2, [r3, #0]
 800a1d8:	693b      	ldr	r3, [r7, #16]
 800a1da:	781b      	ldrb	r3, [r3, #0]
 800a1dc:	429a      	cmp	r2, r3
 800a1de:	d006      	beq.n	800a1ee <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x11e>
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	695b      	ldr	r3, [r3, #20]
 800a1e4:	4919      	ldr	r1, [pc, #100]	; (800a24c <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x17c>)
 800a1e6:	6878      	ldr	r0, [r7, #4]
 800a1e8:	4798      	blx	r3
 800a1ea:	2301      	movs	r3, #1
 800a1ec:	e011      	b.n	800a212 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x142>
                     "Hybrid models are not supported on TFLite Micro.");

  return CalculateOpDataFullyConnected(context, params->activation, input->type,
 800a1ee:	69bb      	ldr	r3, [r7, #24]
 800a1f0:	7819      	ldrb	r1, [r3, #0]
 800a1f2:	697b      	ldr	r3, [r7, #20]
 800a1f4:	781a      	ldrb	r2, [r3, #0]
 800a1f6:	69fb      	ldr	r3, [r7, #28]
 800a1f8:	9303      	str	r3, [sp, #12]
 800a1fa:	68bb      	ldr	r3, [r7, #8]
 800a1fc:	9302      	str	r3, [sp, #8]
 800a1fe:	68fb      	ldr	r3, [r7, #12]
 800a200:	9301      	str	r3, [sp, #4]
 800a202:	693b      	ldr	r3, [r7, #16]
 800a204:	9300      	str	r3, [sp, #0]
 800a206:	697b      	ldr	r3, [r7, #20]
 800a208:	6878      	ldr	r0, [r7, #4]
 800a20a:	f000 f9a8 	bl	800a55e <_ZN6tflite29CalculateOpDataFullyConnectedEP13TfLiteContext21TfLiteFusedActivation10TfLiteTypePK12TfLiteTensorS6_S6_PS4_PNS_20OpDataFullyConnectedE>
 800a20e:	4603      	mov	r3, r0
                                       input, filter, bias, output, data);
 800a210:	bf00      	nop
}
 800a212:	4618      	mov	r0, r3
 800a214:	3720      	adds	r7, #32
 800a216:	46bd      	mov	sp, r7
 800a218:	bdb0      	pop	{r4, r5, r7, pc}
 800a21a:	bf00      	nop
 800a21c:	08021bb8 	.word	0x08021bb8
 800a220:	08011b4c 	.word	0x08011b4c
 800a224:	08011af0 	.word	0x08011af0
 800a228:	08011b34 	.word	0x08011b34
 800a22c:	08021bbc 	.word	0x08021bbc
 800a230:	08011b60 	.word	0x08011b60
 800a234:	08021bc0 	.word	0x08021bc0
 800a238:	08021bc4 	.word	0x08021bc4
 800a23c:	08011b74 	.word	0x08011b74
 800a240:	08011ba4 	.word	0x08011ba4
 800a244:	08011bb4 	.word	0x08011bb4
 800a248:	08011b88 	.word	0x08011b88
 800a24c:	08011bc0 	.word	0x08011bc0

0800a250 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
 800a250:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a252:	b0d3      	sub	sp, #332	; 0x14c
 800a254:	af06      	add	r7, sp, #24
 800a256:	1d3b      	adds	r3, r7, #4
 800a258:	6018      	str	r0, [r3, #0]
 800a25a:	463b      	mov	r3, r7
 800a25c:	6019      	str	r1, [r3, #0]
  TFLITE_DCHECK(node->builtin_data != nullptr);
 800a25e:	463b      	mov	r3, r7
 800a260:	681b      	ldr	r3, [r3, #0]
 800a262:	695b      	ldr	r3, [r3, #20]
 800a264:	2b00      	cmp	r3, #0
 800a266:	d101      	bne.n	800a26c <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1c>
 800a268:	f000 ff08 	bl	800b07c <abort>
  const auto* params =
 800a26c:	463b      	mov	r3, r7
 800a26e:	681b      	ldr	r3, [r3, #0]
 800a270:	695b      	ldr	r3, [r3, #20]
 800a272:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
      static_cast<const TfLiteFullyConnectedParams*>(node->builtin_data);

  const TfLiteEvalTensor* input =
      tflite::micro::GetEvalInput(context, node, kFullyConnectedInputTensor);
 800a276:	4b8a      	ldr	r3, [pc, #552]	; (800a4a0 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x250>)
 800a278:	681a      	ldr	r2, [r3, #0]
 800a27a:	4639      	mov	r1, r7
 800a27c:	1d3b      	adds	r3, r7, #4
 800a27e:	6809      	ldr	r1, [r1, #0]
 800a280:	6818      	ldr	r0, [r3, #0]
 800a282:	f7ff fa89 	bl	8009798 <_ZN6tflite5micro12GetEvalInputEPK13TfLiteContextPK10TfLiteNodei>
 800a286:	f8c7 0128 	str.w	r0, [r7, #296]	; 0x128
  const TfLiteEvalTensor* filter =
      tflite::micro::GetEvalInput(context, node, kFullyConnectedWeightsTensor);
 800a28a:	4b86      	ldr	r3, [pc, #536]	; (800a4a4 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x254>)
 800a28c:	681a      	ldr	r2, [r3, #0]
 800a28e:	4639      	mov	r1, r7
 800a290:	1d3b      	adds	r3, r7, #4
 800a292:	6809      	ldr	r1, [r1, #0]
 800a294:	6818      	ldr	r0, [r3, #0]
 800a296:	f7ff fa7f 	bl	8009798 <_ZN6tflite5micro12GetEvalInputEPK13TfLiteContextPK10TfLiteNodei>
 800a29a:	f8c7 0124 	str.w	r0, [r7, #292]	; 0x124
  const TfLiteEvalTensor* bias =
      tflite::micro::GetEvalInput(context, node, kFullyConnectedBiasTensor);
 800a29e:	4b82      	ldr	r3, [pc, #520]	; (800a4a8 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x258>)
 800a2a0:	681a      	ldr	r2, [r3, #0]
 800a2a2:	4639      	mov	r1, r7
 800a2a4:	1d3b      	adds	r3, r7, #4
 800a2a6:	6809      	ldr	r1, [r1, #0]
 800a2a8:	6818      	ldr	r0, [r3, #0]
 800a2aa:	f7ff fa75 	bl	8009798 <_ZN6tflite5micro12GetEvalInputEPK13TfLiteContextPK10TfLiteNodei>
 800a2ae:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120
  TfLiteEvalTensor* output =
      tflite::micro::GetEvalOutput(context, node, kFullyConnectedOutputTensor);
 800a2b2:	4b7e      	ldr	r3, [pc, #504]	; (800a4ac <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x25c>)
 800a2b4:	681a      	ldr	r2, [r3, #0]
 800a2b6:	4639      	mov	r1, r7
 800a2b8:	1d3b      	adds	r3, r7, #4
 800a2ba:	6809      	ldr	r1, [r1, #0]
 800a2bc:	6818      	ldr	r0, [r3, #0]
 800a2be:	f7ff fa7b 	bl	80097b8 <_ZN6tflite5micro13GetEvalOutputEPK13TfLiteContextPK10TfLiteNodei>
 800a2c2:	f8c7 011c 	str.w	r0, [r7, #284]	; 0x11c

  TFLITE_DCHECK(node->user_data != nullptr);
 800a2c6:	463b      	mov	r3, r7
 800a2c8:	681b      	ldr	r3, [r3, #0]
 800a2ca:	691b      	ldr	r3, [r3, #16]
 800a2cc:	2b00      	cmp	r3, #0
 800a2ce:	d101      	bne.n	800a2d4 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x84>
 800a2d0:	f000 fed4 	bl	800b07c <abort>
  const auto& data =
 800a2d4:	463b      	mov	r3, r7
 800a2d6:	681b      	ldr	r3, [r3, #0]
 800a2d8:	691b      	ldr	r3, [r3, #16]
 800a2da:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
      *(static_cast<const OpDataFullyConnected*>(node->user_data));

  // Checks in Prepare ensure input, output and filter types are all the same.
  switch (input->type) {
 800a2de:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a2e2:	7a1b      	ldrb	r3, [r3, #8]
 800a2e4:	2b01      	cmp	r3, #1
 800a2e6:	d002      	beq.n	800a2ee <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x9e>
 800a2e8:	2b09      	cmp	r3, #9
 800a2ea:	d061      	beq.n	800a3b0 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x160>
 800a2ec:	e0bf      	b.n	800a46e <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x21e>
    case kTfLiteFloat32: {
      tflite::reference_ops::FullyConnected(
          FullyConnectedParamsFloat(params->activation),
 800a2ee:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a2f2:	781a      	ldrb	r2, [r3, #0]
 800a2f4:	f107 0308 	add.w	r3, r7, #8
 800a2f8:	4611      	mov	r1, r2
 800a2fa:	4618      	mov	r0, r3
 800a2fc:	f000 f91a 	bl	800a534 <_ZN6tflite25FullyConnectedParamsFloatE21TfLiteFusedActivation>
          tflite::micro::GetTensorShape(input),
 800a300:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800a304:	f8d7 1128 	ldr.w	r1, [r7, #296]	; 0x128
 800a308:	4618      	mov	r0, r3
 800a30a:	f000 f97e 	bl	800a60a <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      tflite::reference_ops::FullyConnected(
 800a30e:	f8d7 0128 	ldr.w	r0, [r7, #296]	; 0x128
 800a312:	f7ff fa71 	bl	80097f8 <_ZN6tflite5micro13GetTensorDataIfEEPKT_PK16TfLiteEvalTensor>
 800a316:	4606      	mov	r6, r0
          tflite::micro::GetTensorData<float>(input),
          tflite::micro::GetTensorShape(filter),
 800a318:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800a31c:	f8d7 1124 	ldr.w	r1, [r7, #292]	; 0x124
 800a320:	4618      	mov	r0, r3
 800a322:	f000 f972 	bl	800a60a <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      tflite::reference_ops::FullyConnected(
 800a326:	f8d7 0124 	ldr.w	r0, [r7, #292]	; 0x124
 800a32a:	f7ff fa65 	bl	80097f8 <_ZN6tflite5micro13GetTensorDataIfEEPKT_PK16TfLiteEvalTensor>
 800a32e:	4604      	mov	r4, r0
          tflite::micro::GetTensorData<float>(filter),
          tflite::micro::GetTensorShape(bias),
 800a330:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800a334:	f8d7 1120 	ldr.w	r1, [r7, #288]	; 0x120
 800a338:	4618      	mov	r0, r3
 800a33a:	f000 f966 	bl	800a60a <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      tflite::reference_ops::FullyConnected(
 800a33e:	f8d7 0120 	ldr.w	r0, [r7, #288]	; 0x120
 800a342:	f7ff fa59 	bl	80097f8 <_ZN6tflite5micro13GetTensorDataIfEEPKT_PK16TfLiteEvalTensor>
 800a346:	4605      	mov	r5, r0
          tflite::micro::GetTensorData<float>(bias),
          tflite::micro::GetTensorShape(output),
 800a348:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800a34c:	f8d7 111c 	ldr.w	r1, [r7, #284]	; 0x11c
 800a350:	4618      	mov	r0, r3
 800a352:	f000 f95a 	bl	800a60a <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      tflite::reference_ops::FullyConnected(
 800a356:	f8d7 011c 	ldr.w	r0, [r7, #284]	; 0x11c
 800a35a:	f7ff fa5c 	bl	8009816 <_ZN6tflite5micro13GetTensorDataIfEEPT_P16TfLiteEvalTensor>
 800a35e:	4603      	mov	r3, r0
 800a360:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800a364:	f107 0130 	add.w	r1, r7, #48	; 0x30
 800a368:	f107 0008 	add.w	r0, r7, #8
 800a36c:	9304      	str	r3, [sp, #16]
 800a36e:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800a372:	9303      	str	r3, [sp, #12]
 800a374:	9502      	str	r5, [sp, #8]
 800a376:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800a37a:	9301      	str	r3, [sp, #4]
 800a37c:	9400      	str	r4, [sp, #0]
 800a37e:	4613      	mov	r3, r2
 800a380:	4632      	mov	r2, r6
 800a382:	f7ff fd25 	bl	8009dd0 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf>
          tflite::micro::GetTensorShape(output),
 800a386:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800a38a:	4618      	mov	r0, r3
 800a38c:	f7fb f8c1 	bl	8005512 <_ZN6tflite12RuntimeShapeD1Ev>
          tflite::micro::GetTensorShape(bias),
 800a390:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800a394:	4618      	mov	r0, r3
 800a396:	f7fb f8bc 	bl	8005512 <_ZN6tflite12RuntimeShapeD1Ev>
          tflite::micro::GetTensorShape(filter),
 800a39a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800a39e:	4618      	mov	r0, r3
 800a3a0:	f7fb f8b7 	bl	8005512 <_ZN6tflite12RuntimeShapeD1Ev>
          tflite::micro::GetTensorShape(input),
 800a3a4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800a3a8:	4618      	mov	r0, r3
 800a3aa:	f7fb f8b2 	bl	8005512 <_ZN6tflite12RuntimeShapeD1Ev>
          tflite::micro::GetTensorData<float>(output));
      break;
 800a3ae:	e071      	b.n	800a494 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x244>
    }

    case kTfLiteInt8: {
      tflite::reference_integer_ops::FullyConnected(
          FullyConnectedParamsQuantized(data),
 800a3b0:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800a3b4:	f8d7 1118 	ldr.w	r1, [r7, #280]	; 0x118
 800a3b8:	4618      	mov	r0, r3
 800a3ba:	f000 f891 	bl	800a4e0 <_ZN6tflite29FullyConnectedParamsQuantizedERKNS_20OpDataFullyConnectedE>
          tflite::micro::GetTensorShape(input),
 800a3be:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 800a3c2:	f8d7 1128 	ldr.w	r1, [r7, #296]	; 0x128
 800a3c6:	4618      	mov	r0, r3
 800a3c8:	f000 f91f 	bl	800a60a <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      tflite::reference_integer_ops::FullyConnected(
 800a3cc:	f8d7 0128 	ldr.w	r0, [r7, #296]	; 0x128
 800a3d0:	f7ff fa32 	bl	8009838 <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor>
 800a3d4:	4606      	mov	r6, r0
          tflite::micro::GetTensorData<int8_t>(input),
          tflite::micro::GetTensorShape(filter),
 800a3d6:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 800a3da:	f8d7 1124 	ldr.w	r1, [r7, #292]	; 0x124
 800a3de:	4618      	mov	r0, r3
 800a3e0:	f000 f913 	bl	800a60a <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      tflite::reference_integer_ops::FullyConnected(
 800a3e4:	f8d7 0124 	ldr.w	r0, [r7, #292]	; 0x124
 800a3e8:	f7ff fa26 	bl	8009838 <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor>
 800a3ec:	4604      	mov	r4, r0
          tflite::micro::GetTensorData<int8_t>(filter),
          tflite::micro::GetTensorShape(bias),
 800a3ee:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 800a3f2:	f8d7 1120 	ldr.w	r1, [r7, #288]	; 0x120
 800a3f6:	4618      	mov	r0, r3
 800a3f8:	f000 f907 	bl	800a60a <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      tflite::reference_integer_ops::FullyConnected(
 800a3fc:	f8d7 0120 	ldr.w	r0, [r7, #288]	; 0x120
 800a400:	f7ff fc72 	bl	8009ce8 <_ZN6tflite5micro13GetTensorDataIlEEPKT_PK16TfLiteEvalTensor>
 800a404:	4605      	mov	r5, r0
          tflite::micro::GetTensorData<int32_t>(bias),
          tflite::micro::GetTensorShape(output),
 800a406:	f507 7380 	add.w	r3, r7, #256	; 0x100
 800a40a:	f8d7 111c 	ldr.w	r1, [r7, #284]	; 0x11c
 800a40e:	4618      	mov	r0, r3
 800a410:	f000 f8fb 	bl	800a60a <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      tflite::reference_integer_ops::FullyConnected(
 800a414:	f8d7 011c 	ldr.w	r0, [r7, #284]	; 0x11c
 800a418:	f7ff fa1d 	bl	8009856 <_ZN6tflite5micro13GetTensorDataIaEEPT_P16TfLiteEvalTensor>
 800a41c:	4603      	mov	r3, r0
 800a41e:	f107 02d0 	add.w	r2, r7, #208	; 0xd0
 800a422:	f107 01b8 	add.w	r1, r7, #184	; 0xb8
 800a426:	f107 0090 	add.w	r0, r7, #144	; 0x90
 800a42a:	9304      	str	r3, [sp, #16]
 800a42c:	f507 7380 	add.w	r3, r7, #256	; 0x100
 800a430:	9303      	str	r3, [sp, #12]
 800a432:	9502      	str	r5, [sp, #8]
 800a434:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 800a438:	9301      	str	r3, [sp, #4]
 800a43a:	9400      	str	r4, [sp, #0]
 800a43c:	4613      	mov	r3, r2
 800a43e:	4632      	mov	r2, r6
 800a440:	f7ff fd5c 	bl	8009efc <_ZN6tflite21reference_integer_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_PKlS6_Pa>
          tflite::micro::GetTensorShape(output),
 800a444:	f507 7380 	add.w	r3, r7, #256	; 0x100
 800a448:	4618      	mov	r0, r3
 800a44a:	f7fb f862 	bl	8005512 <_ZN6tflite12RuntimeShapeD1Ev>
          tflite::micro::GetTensorShape(bias),
 800a44e:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 800a452:	4618      	mov	r0, r3
 800a454:	f7fb f85d 	bl	8005512 <_ZN6tflite12RuntimeShapeD1Ev>
          tflite::micro::GetTensorShape(filter),
 800a458:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 800a45c:	4618      	mov	r0, r3
 800a45e:	f7fb f858 	bl	8005512 <_ZN6tflite12RuntimeShapeD1Ev>
          tflite::micro::GetTensorShape(input),
 800a462:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 800a466:	4618      	mov	r0, r3
 800a468:	f7fb f853 	bl	8005512 <_ZN6tflite12RuntimeShapeD1Ev>
          tflite::micro::GetTensorData<int8_t>(output));
      break;
 800a46c:	e012      	b.n	800a494 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x244>
    }

    default: {
      TF_LITE_KERNEL_LOG(context, "Type %s (%d) not supported.",
 800a46e:	1d3b      	adds	r3, r7, #4
 800a470:	681b      	ldr	r3, [r3, #0]
 800a472:	695c      	ldr	r4, [r3, #20]
 800a474:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a478:	7a1b      	ldrb	r3, [r3, #8]
 800a47a:	4618      	mov	r0, r3
 800a47c:	f7f9 fb12 	bl	8003aa4 <TfLiteTypeGetName>
 800a480:	4602      	mov	r2, r0
 800a482:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a486:	7a1b      	ldrb	r3, [r3, #8]
 800a488:	1d38      	adds	r0, r7, #4
 800a48a:	4909      	ldr	r1, [pc, #36]	; (800a4b0 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x260>)
 800a48c:	6800      	ldr	r0, [r0, #0]
 800a48e:	47a0      	blx	r4
                         TfLiteTypeGetName(input->type), input->type);
      return kTfLiteError;
 800a490:	2301      	movs	r3, #1
 800a492:	e000      	b.n	800a496 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x246>
    }
  }
  return kTfLiteOk;
 800a494:	2300      	movs	r3, #0
}
 800a496:	4618      	mov	r0, r3
 800a498:	f507 779a 	add.w	r7, r7, #308	; 0x134
 800a49c:	46bd      	mov	sp, r7
 800a49e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a4a0:	08021bb8 	.word	0x08021bb8
 800a4a4:	08021bbc 	.word	0x08021bbc
 800a4a8:	08021bc0 	.word	0x08021bc0
 800a4ac:	08021bc4 	.word	0x08021bc4
 800a4b0:	08011c38 	.word	0x08011c38

0800a4b4 <_ZN6tflite24Register_FULLY_CONNECTEDEv>:

}  // namespace

TfLiteRegistration Register_FULLY_CONNECTED() {
 800a4b4:	b4b0      	push	{r4, r5, r7}
 800a4b6:	b083      	sub	sp, #12
 800a4b8:	af00      	add	r7, sp, #0
 800a4ba:	6078      	str	r0, [r7, #4]
          /*prepare=*/Prepare,
          /*invoke=*/Eval,
          /*profiling_string=*/nullptr,
          /*builtin_code=*/0,
          /*custom_name=*/nullptr,
          /*version=*/0};
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	4a07      	ldr	r2, [pc, #28]	; (800a4dc <_ZN6tflite24Register_FULLY_CONNECTEDEv+0x28>)
 800a4c0:	461c      	mov	r4, r3
 800a4c2:	4615      	mov	r5, r2
 800a4c4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a4c6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a4c8:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800a4cc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 800a4d0:	6878      	ldr	r0, [r7, #4]
 800a4d2:	370c      	adds	r7, #12
 800a4d4:	46bd      	mov	sp, r7
 800a4d6:	bcb0      	pop	{r4, r5, r7}
 800a4d8:	4770      	bx	lr
 800a4da:	bf00      	nop
 800a4dc:	08011c54 	.word	0x08011c54

0800a4e0 <_ZN6tflite29FullyConnectedParamsQuantizedERKNS_20OpDataFullyConnectedE>:
const int kFullyConnectedWeightsTensor = 1;
const int kFullyConnectedBiasTensor = 2;
const int kFullyConnectedOutputTensor = 0;

FullyConnectedParams FullyConnectedParamsQuantized(
    const OpDataFullyConnected& op_data) {
 800a4e0:	b480      	push	{r7}
 800a4e2:	b083      	sub	sp, #12
 800a4e4:	af00      	add	r7, sp, #0
 800a4e6:	6078      	str	r0, [r7, #4]
 800a4e8:	6039      	str	r1, [r7, #0]
  FullyConnectedParams op_params;
  op_params.input_offset = -op_data.input_zero_point;
 800a4ea:	683b      	ldr	r3, [r7, #0]
 800a4ec:	695b      	ldr	r3, [r3, #20]
 800a4ee:	425a      	negs	r2, r3
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	601a      	str	r2, [r3, #0]
  op_params.weights_offset = -op_data.filter_zero_point;
 800a4f4:	683b      	ldr	r3, [r7, #0]
 800a4f6:	699b      	ldr	r3, [r3, #24]
 800a4f8:	425a      	negs	r2, r3
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	605a      	str	r2, [r3, #4]
  op_params.output_offset = op_data.output_zero_point;
 800a4fe:	683b      	ldr	r3, [r7, #0]
 800a500:	69da      	ldr	r2, [r3, #28]
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	609a      	str	r2, [r3, #8]
  op_params.output_multiplier = op_data.output_multiplier;
 800a506:	683b      	ldr	r3, [r7, #0]
 800a508:	681a      	ldr	r2, [r3, #0]
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	60da      	str	r2, [r3, #12]
  op_params.output_shift = op_data.output_shift;
 800a50e:	683b      	ldr	r3, [r7, #0]
 800a510:	685a      	ldr	r2, [r3, #4]
 800a512:	687b      	ldr	r3, [r7, #4]
 800a514:	611a      	str	r2, [r3, #16]
  op_params.quantized_activation_min = op_data.output_activation_min;
 800a516:	683b      	ldr	r3, [r7, #0]
 800a518:	689a      	ldr	r2, [r3, #8]
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	615a      	str	r2, [r3, #20]
  op_params.quantized_activation_max = op_data.output_activation_max;
 800a51e:	683b      	ldr	r3, [r7, #0]
 800a520:	68da      	ldr	r2, [r3, #12]
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	619a      	str	r2, [r3, #24]
  return op_params;
 800a526:	bf00      	nop
}
 800a528:	6878      	ldr	r0, [r7, #4]
 800a52a:	370c      	adds	r7, #12
 800a52c:	46bd      	mov	sp, r7
 800a52e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a532:	4770      	bx	lr

0800a534 <_ZN6tflite25FullyConnectedParamsFloatE21TfLiteFusedActivation>:

FullyConnectedParams FullyConnectedParamsFloat(
    TfLiteFusedActivation activation) {
 800a534:	b580      	push	{r7, lr}
 800a536:	b082      	sub	sp, #8
 800a538:	af00      	add	r7, sp, #0
 800a53a:	6078      	str	r0, [r7, #4]
 800a53c:	460b      	mov	r3, r1
 800a53e:	70fb      	strb	r3, [r7, #3]
  FullyConnectedParams op_params;
  CalculateActivationRange(activation, &op_params.float_activation_min,
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	f103 0220 	add.w	r2, r3, #32
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	f103 011c 	add.w	r1, r3, #28
 800a54c:	78fb      	ldrb	r3, [r7, #3]
 800a54e:	4618      	mov	r0, r3
 800a550:	f7ff fb88 	bl	8009c64 <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_>
                           &op_params.float_activation_max);
  return op_params;
 800a554:	bf00      	nop
}
 800a556:	6878      	ldr	r0, [r7, #4]
 800a558:	3708      	adds	r7, #8
 800a55a:	46bd      	mov	sp, r7
 800a55c:	bd80      	pop	{r7, pc}

0800a55e <_ZN6tflite29CalculateOpDataFullyConnectedEP13TfLiteContext21TfLiteFusedActivation10TfLiteTypePK12TfLiteTensorS6_S6_PS4_PNS_20OpDataFullyConnectedE>:

TfLiteStatus CalculateOpDataFullyConnected(
    TfLiteContext* context, TfLiteFusedActivation activation,
    TfLiteType data_type, const TfLiteTensor* input, const TfLiteTensor* filter,
    const TfLiteTensor* bias, TfLiteTensor* output,
    OpDataFullyConnected* data) {
 800a55e:	b580      	push	{r7, lr}
 800a560:	b08a      	sub	sp, #40	; 0x28
 800a562:	af02      	add	r7, sp, #8
 800a564:	60f8      	str	r0, [r7, #12]
 800a566:	607b      	str	r3, [r7, #4]
 800a568:	460b      	mov	r3, r1
 800a56a:	72fb      	strb	r3, [r7, #11]
 800a56c:	4613      	mov	r3, r2
 800a56e:	72bb      	strb	r3, [r7, #10]
  if (data_type != kTfLiteFloat32) {
 800a570:	7abb      	ldrb	r3, [r7, #10]
 800a572:	2b01      	cmp	r3, #1
 800a574:	d044      	beq.n	800a600 <_ZN6tflite29CalculateOpDataFullyConnectedEP13TfLiteContext21TfLiteFusedActivation10TfLiteTypePK12TfLiteTensorS6_S6_PS4_PNS_20OpDataFullyConnectedE+0xa2>
    double real_multiplier = 0.0;
 800a576:	f04f 0200 	mov.w	r2, #0
 800a57a:	f04f 0300 	mov.w	r3, #0
 800a57e:	e9c7 2304 	strd	r2, r3, [r7, #16]
    TF_LITE_ENSURE_STATUS(GetQuantizedConvolutionMultipler(
 800a582:	f107 0310 	add.w	r3, r7, #16
 800a586:	9301      	str	r3, [sp, #4]
 800a588:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a58a:	9300      	str	r3, [sp, #0]
 800a58c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a58e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a590:	6879      	ldr	r1, [r7, #4]
 800a592:	68f8      	ldr	r0, [r7, #12]
 800a594:	f7fa fbec 	bl	8004d70 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd>
 800a598:	4603      	mov	r3, r0
 800a59a:	77fb      	strb	r3, [r7, #31]
 800a59c:	7ffb      	ldrb	r3, [r7, #31]
 800a59e:	2b00      	cmp	r3, #0
 800a5a0:	d001      	beq.n	800a5a6 <_ZN6tflite29CalculateOpDataFullyConnectedEP13TfLiteContext21TfLiteFusedActivation10TfLiteTypePK12TfLiteTensorS6_S6_PS4_PNS_20OpDataFullyConnectedE+0x48>
 800a5a2:	7ffb      	ldrb	r3, [r7, #31]
 800a5a4:	e02d      	b.n	800a602 <_ZN6tflite29CalculateOpDataFullyConnectedEP13TfLiteContext21TfLiteFusedActivation10TfLiteTypePK12TfLiteTensorS6_S6_PS4_PNS_20OpDataFullyConnectedE+0xa4>
        context, input, filter, bias, output, &real_multiplier));
    QuantizeMultiplier(real_multiplier, &data->output_multiplier,
 800a5a6:	ed97 7b04 	vldr	d7, [r7, #16]
 800a5aa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a5ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a5ae:	3304      	adds	r3, #4
 800a5b0:	4619      	mov	r1, r3
 800a5b2:	4610      	mov	r0, r2
 800a5b4:	eeb0 0a47 	vmov.f32	s0, s14
 800a5b8:	eef0 0a67 	vmov.f32	s1, s15
 800a5bc:	f7fa fa10 	bl	80049e0 <_ZN6tflite18QuantizeMultiplierEdPlPi>
                       &data->output_shift);

    data->input_zero_point = input->params.zero_point;
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	691a      	ldr	r2, [r3, #16]
 800a5c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a5c6:	615a      	str	r2, [r3, #20]
    // Filter weights will always be symmetric quantized since we only support
    // int8 quantization. See
    // https://github.com/tensorflow/tensorflow/issues/44912 for additional
    // context.
    TFLITE_DCHECK(filter->params.zero_point == 0);
 800a5c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a5ca:	691b      	ldr	r3, [r3, #16]
 800a5cc:	2b00      	cmp	r3, #0
 800a5ce:	d001      	beq.n	800a5d4 <_ZN6tflite29CalculateOpDataFullyConnectedEP13TfLiteContext21TfLiteFusedActivation10TfLiteTypePK12TfLiteTensorS6_S6_PS4_PNS_20OpDataFullyConnectedE+0x76>
 800a5d0:	f000 fd54 	bl	800b07c <abort>
    data->filter_zero_point = filter->params.zero_point;
 800a5d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a5d6:	691a      	ldr	r2, [r3, #16]
 800a5d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a5da:	619a      	str	r2, [r3, #24]
    data->output_zero_point = output->params.zero_point;
 800a5dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5de:	691a      	ldr	r2, [r3, #16]
 800a5e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a5e2:	61da      	str	r2, [r3, #28]

    return CalculateActivationRangeQuantized(context, activation, output,
 800a5e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a5e6:	f103 0208 	add.w	r2, r3, #8
 800a5ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a5ec:	330c      	adds	r3, #12
 800a5ee:	7af9      	ldrb	r1, [r7, #11]
 800a5f0:	9300      	str	r3, [sp, #0]
 800a5f2:	4613      	mov	r3, r2
 800a5f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a5f6:	68f8      	ldr	r0, [r7, #12]
 800a5f8:	f7fa fdac 	bl	8005154 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_>
 800a5fc:	4603      	mov	r3, r0
                                             &data->output_activation_min,
                                             &data->output_activation_max);
 800a5fe:	e000      	b.n	800a602 <_ZN6tflite29CalculateOpDataFullyConnectedEP13TfLiteContext21TfLiteFusedActivation10TfLiteTypePK12TfLiteTensorS6_S6_PS4_PNS_20OpDataFullyConnectedE+0xa4>
  }
  return kTfLiteOk;
 800a600:	2300      	movs	r3, #0
}
 800a602:	4618      	mov	r0, r3
 800a604:	3720      	adds	r7, #32
 800a606:	46bd      	mov	sp, r7
 800a608:	bd80      	pop	{r7, pc}

0800a60a <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>:
  TFLITE_DCHECK(input1 != nullptr);
  TFLITE_DCHECK(input2 != nullptr);
  return TfLiteIntArrayEqual(input1->dims, input2->dims);
}

const RuntimeShape GetTensorShape(const TfLiteEvalTensor* tensor) {
 800a60a:	b580      	push	{r7, lr}
 800a60c:	b086      	sub	sp, #24
 800a60e:	af00      	add	r7, sp, #0
 800a610:	6078      	str	r0, [r7, #4]
 800a612:	6039      	str	r1, [r7, #0]
  if (tensor == nullptr || tensor->dims == nullptr) {
 800a614:	683b      	ldr	r3, [r7, #0]
 800a616:	2b00      	cmp	r3, #0
 800a618:	d003      	beq.n	800a622 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor+0x18>
 800a61a:	683b      	ldr	r3, [r7, #0]
 800a61c:	685b      	ldr	r3, [r3, #4]
 800a61e:	2b00      	cmp	r3, #0
 800a620:	d103      	bne.n	800a62a <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor+0x20>
    return RuntimeShape();
 800a622:	6878      	ldr	r0, [r7, #4]
 800a624:	f7fa ff54 	bl	80054d0 <_ZN6tflite12RuntimeShapeC1Ev>
 800a628:	e00d      	b.n	800a646 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor+0x3c>
  }
  TfLiteIntArray* dims = tensor->dims;
 800a62a:	683b      	ldr	r3, [r7, #0]
 800a62c:	685b      	ldr	r3, [r3, #4]
 800a62e:	617b      	str	r3, [r7, #20]
  const int dims_size = dims->size;
 800a630:	697b      	ldr	r3, [r7, #20]
 800a632:	681b      	ldr	r3, [r3, #0]
 800a634:	613b      	str	r3, [r7, #16]
  const int32_t* dims_data = reinterpret_cast<const int32_t*>(dims->data);
 800a636:	697b      	ldr	r3, [r7, #20]
 800a638:	3304      	adds	r3, #4
 800a63a:	60fb      	str	r3, [r7, #12]
  return RuntimeShape(dims_size, dims_data);
 800a63c:	68fa      	ldr	r2, [r7, #12]
 800a63e:	6939      	ldr	r1, [r7, #16]
 800a640:	6878      	ldr	r0, [r7, #4]
 800a642:	f7fa ff53 	bl	80054ec <_ZN6tflite12RuntimeShapeC1EiPKl>
}
 800a646:	6878      	ldr	r0, [r7, #4]
 800a648:	3718      	adds	r7, #24
 800a64a:	46bd      	mov	sp, r7
 800a64c:	bd80      	pop	{r7, pc}
	...

0800a650 <_ZN6tflite13MemoryPlannerC1Ev>:
// The goal is for applications to be able to experiment with different layout
// strategies without changing their client code, by swapping out classes that
// implement this interface.=
class MemoryPlanner {
 public:
  MemoryPlanner() {}
 800a650:	b480      	push	{r7}
 800a652:	b083      	sub	sp, #12
 800a654:	af00      	add	r7, sp, #0
 800a656:	6078      	str	r0, [r7, #4]
 800a658:	4a04      	ldr	r2, [pc, #16]	; (800a66c <_ZN6tflite13MemoryPlannerC1Ev+0x1c>)
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	601a      	str	r2, [r3, #0]
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	4618      	mov	r0, r3
 800a662:	370c      	adds	r7, #12
 800a664:	46bd      	mov	sp, r7
 800a666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a66a:	4770      	bx	lr
 800a66c:	08021bf0 	.word	0x08021bf0

0800a670 <_ZN6tflite13MemoryPlannerD1Ev>:
  virtual ~MemoryPlanner() {}
 800a670:	b480      	push	{r7}
 800a672:	b083      	sub	sp, #12
 800a674:	af00      	add	r7, sp, #0
 800a676:	6078      	str	r0, [r7, #4]
 800a678:	4a04      	ldr	r2, [pc, #16]	; (800a68c <_ZN6tflite13MemoryPlannerD1Ev+0x1c>)
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	601a      	str	r2, [r3, #0]
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	4618      	mov	r0, r3
 800a682:	370c      	adds	r7, #12
 800a684:	46bd      	mov	sp, r7
 800a686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a68a:	4770      	bx	lr
 800a68c:	08021bf0 	.word	0x08021bf0

0800a690 <_ZN6tflite13MemoryPlannerD0Ev>:
 800a690:	b580      	push	{r7, lr}
 800a692:	b082      	sub	sp, #8
 800a694:	af00      	add	r7, sp, #0
 800a696:	6078      	str	r0, [r7, #4]
 800a698:	6878      	ldr	r0, [r7, #4]
 800a69a:	f7ff ffe9 	bl	800a670 <_ZN6tflite13MemoryPlannerD1Ev>
 800a69e:	2104      	movs	r1, #4
 800a6a0:	6878      	ldr	r0, [r7, #4]
 800a6a2:	f000 fc04 	bl	800aeae <_ZdlPvj>
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	4618      	mov	r0, r3
 800a6aa:	3708      	adds	r7, #8
 800a6ac:	46bd      	mov	sp, r7
 800a6ae:	bd80      	pop	{r7, pc}

0800a6b0 <_ZN6tflite19GreedyMemoryPlanner15per_buffer_sizeEv>:
    int requirements_index;
    int next_entry_index;
  };

  // Number of bytes required in order to plan a buffer.
  static size_t per_buffer_size() {
 800a6b0:	b480      	push	{r7}
 800a6b2:	b083      	sub	sp, #12
 800a6b4:	af00      	add	r7, sp, #0
    const int per_buffer_size =
 800a6b6:	2328      	movs	r3, #40	; 0x28
 800a6b8:	607b      	str	r3, [r7, #4]
        sizeof(BufferRequirements) +  // requirements_
        sizeof(int) +                 // buffer_sizes_sorted_
        sizeof(int) +                 // buffer_ids_sorted_
        sizeof(ListEntry) +           // buffers_sorted_by_offset_
        sizeof(int);                  // buffer_offsets_;
    return per_buffer_size;
 800a6ba:	2328      	movs	r3, #40	; 0x28
  }
 800a6bc:	4618      	mov	r0, r3
 800a6be:	370c      	adds	r7, #12
 800a6c0:	46bd      	mov	sp, r7
 800a6c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6c6:	4770      	bx	lr

0800a6c8 <_ZN6tflite18ReverseSortInPlaceEPiS0_i>:
}  // namespace

// Simple stable in-place sort function. Not time-efficient for large arrays.
// Would normally be in an anonymous namespace to keep it private, but we want
// to be able to test it externally.
void ReverseSortInPlace(int* values, int* ids, int size) {
 800a6c8:	b480      	push	{r7}
 800a6ca:	b089      	sub	sp, #36	; 0x24
 800a6cc:	af00      	add	r7, sp, #0
 800a6ce:	60f8      	str	r0, [r7, #12]
 800a6d0:	60b9      	str	r1, [r7, #8]
 800a6d2:	607a      	str	r2, [r7, #4]
  bool any_swapped;
  do {
    any_swapped = false;
 800a6d4:	2300      	movs	r3, #0
 800a6d6:	77fb      	strb	r3, [r7, #31]
    for (int i = 1; i < size; ++i) {
 800a6d8:	2301      	movs	r3, #1
 800a6da:	61bb      	str	r3, [r7, #24]
 800a6dc:	69ba      	ldr	r2, [r7, #24]
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	429a      	cmp	r2, r3
 800a6e2:	da4c      	bge.n	800a77e <_ZN6tflite18ReverseSortInPlaceEPiS0_i+0xb6>
      if (values[i - 1] < values[i]) {
 800a6e4:	69bb      	ldr	r3, [r7, #24]
 800a6e6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800a6ea:	3b01      	subs	r3, #1
 800a6ec:	009b      	lsls	r3, r3, #2
 800a6ee:	68fa      	ldr	r2, [r7, #12]
 800a6f0:	4413      	add	r3, r2
 800a6f2:	681a      	ldr	r2, [r3, #0]
 800a6f4:	69bb      	ldr	r3, [r7, #24]
 800a6f6:	009b      	lsls	r3, r3, #2
 800a6f8:	68f9      	ldr	r1, [r7, #12]
 800a6fa:	440b      	add	r3, r1
 800a6fc:	681b      	ldr	r3, [r3, #0]
 800a6fe:	429a      	cmp	r2, r3
 800a700:	da39      	bge.n	800a776 <_ZN6tflite18ReverseSortInPlaceEPiS0_i+0xae>
        const int value_temp = values[i - 1];
 800a702:	69bb      	ldr	r3, [r7, #24]
 800a704:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800a708:	3b01      	subs	r3, #1
 800a70a:	009b      	lsls	r3, r3, #2
 800a70c:	68fa      	ldr	r2, [r7, #12]
 800a70e:	4413      	add	r3, r2
 800a710:	681b      	ldr	r3, [r3, #0]
 800a712:	617b      	str	r3, [r7, #20]
        values[i - 1] = values[i];
 800a714:	69bb      	ldr	r3, [r7, #24]
 800a716:	009b      	lsls	r3, r3, #2
 800a718:	68fa      	ldr	r2, [r7, #12]
 800a71a:	441a      	add	r2, r3
 800a71c:	69bb      	ldr	r3, [r7, #24]
 800a71e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800a722:	3b01      	subs	r3, #1
 800a724:	009b      	lsls	r3, r3, #2
 800a726:	68f9      	ldr	r1, [r7, #12]
 800a728:	440b      	add	r3, r1
 800a72a:	6812      	ldr	r2, [r2, #0]
 800a72c:	601a      	str	r2, [r3, #0]
        values[i] = value_temp;
 800a72e:	69bb      	ldr	r3, [r7, #24]
 800a730:	009b      	lsls	r3, r3, #2
 800a732:	68fa      	ldr	r2, [r7, #12]
 800a734:	4413      	add	r3, r2
 800a736:	697a      	ldr	r2, [r7, #20]
 800a738:	601a      	str	r2, [r3, #0]
        const int id_temp = ids[i - 1];
 800a73a:	69bb      	ldr	r3, [r7, #24]
 800a73c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800a740:	3b01      	subs	r3, #1
 800a742:	009b      	lsls	r3, r3, #2
 800a744:	68ba      	ldr	r2, [r7, #8]
 800a746:	4413      	add	r3, r2
 800a748:	681b      	ldr	r3, [r3, #0]
 800a74a:	613b      	str	r3, [r7, #16]
        ids[i - 1] = ids[i];
 800a74c:	69bb      	ldr	r3, [r7, #24]
 800a74e:	009b      	lsls	r3, r3, #2
 800a750:	68ba      	ldr	r2, [r7, #8]
 800a752:	441a      	add	r2, r3
 800a754:	69bb      	ldr	r3, [r7, #24]
 800a756:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800a75a:	3b01      	subs	r3, #1
 800a75c:	009b      	lsls	r3, r3, #2
 800a75e:	68b9      	ldr	r1, [r7, #8]
 800a760:	440b      	add	r3, r1
 800a762:	6812      	ldr	r2, [r2, #0]
 800a764:	601a      	str	r2, [r3, #0]
        ids[i] = id_temp;
 800a766:	69bb      	ldr	r3, [r7, #24]
 800a768:	009b      	lsls	r3, r3, #2
 800a76a:	68ba      	ldr	r2, [r7, #8]
 800a76c:	4413      	add	r3, r2
 800a76e:	693a      	ldr	r2, [r7, #16]
 800a770:	601a      	str	r2, [r3, #0]
        any_swapped = true;
 800a772:	2301      	movs	r3, #1
 800a774:	77fb      	strb	r3, [r7, #31]
    for (int i = 1; i < size; ++i) {
 800a776:	69bb      	ldr	r3, [r7, #24]
 800a778:	3301      	adds	r3, #1
 800a77a:	61bb      	str	r3, [r7, #24]
 800a77c:	e7ae      	b.n	800a6dc <_ZN6tflite18ReverseSortInPlaceEPiS0_i+0x14>
  do {
 800a77e:	7ffb      	ldrb	r3, [r7, #31]
 800a780:	2b00      	cmp	r3, #0
 800a782:	d000      	beq.n	800a786 <_ZN6tflite18ReverseSortInPlaceEPiS0_i+0xbe>
 800a784:	e7a6      	b.n	800a6d4 <_ZN6tflite18ReverseSortInPlaceEPiS0_i+0xc>
      }
    }
  } while (any_swapped);
}
 800a786:	bf00      	nop
 800a788:	3724      	adds	r7, #36	; 0x24
 800a78a:	46bd      	mov	sp, r7
 800a78c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a790:	4770      	bx	lr
	...

0800a794 <_ZN6tflite19GreedyMemoryPlannerC1EPhi>:

GreedyMemoryPlanner::GreedyMemoryPlanner(unsigned char* scratch_buffer,
 800a794:	b590      	push	{r4, r7, lr}
 800a796:	b087      	sub	sp, #28
 800a798:	af00      	add	r7, sp, #0
 800a79a:	60f8      	str	r0, [r7, #12]
 800a79c:	60b9      	str	r1, [r7, #8]
 800a79e:	607a      	str	r2, [r7, #4]
                                         int scratch_buffer_size)
    : buffer_count_(0), need_to_calculate_offsets_(true) {
 800a7a0:	68fb      	ldr	r3, [r7, #12]
 800a7a2:	4618      	mov	r0, r3
 800a7a4:	f7ff ff54 	bl	800a650 <_ZN6tflite13MemoryPlannerC1Ev>
 800a7a8:	4a22      	ldr	r2, [pc, #136]	; (800a834 <_ZN6tflite19GreedyMemoryPlannerC1EPhi+0xa0>)
 800a7aa:	68fb      	ldr	r3, [r7, #12]
 800a7ac:	601a      	str	r2, [r3, #0]
 800a7ae:	68fb      	ldr	r3, [r7, #12]
 800a7b0:	2200      	movs	r2, #0
 800a7b2:	609a      	str	r2, [r3, #8]
 800a7b4:	68fb      	ldr	r3, [r7, #12]
 800a7b6:	2201      	movs	r2, #1
 800a7b8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  // Allocate the arrays we need within the scratch buffer arena.
  max_buffer_count_ = scratch_buffer_size / per_buffer_size();
 800a7bc:	687c      	ldr	r4, [r7, #4]
 800a7be:	f7ff ff77 	bl	800a6b0 <_ZN6tflite19GreedyMemoryPlanner15per_buffer_sizeEv>
 800a7c2:	4603      	mov	r3, r0
 800a7c4:	fbb4 f3f3 	udiv	r3, r4, r3
 800a7c8:	461a      	mov	r2, r3
 800a7ca:	68fb      	ldr	r3, [r7, #12]
 800a7cc:	605a      	str	r2, [r3, #4]

  unsigned char* next_free = scratch_buffer;
 800a7ce:	68bb      	ldr	r3, [r7, #8]
 800a7d0:	617b      	str	r3, [r7, #20]
  requirements_ = reinterpret_cast<BufferRequirements*>(next_free);
 800a7d2:	68fb      	ldr	r3, [r7, #12]
 800a7d4:	697a      	ldr	r2, [r7, #20]
 800a7d6:	60da      	str	r2, [r3, #12]
  next_free += sizeof(BufferRequirements) * max_buffer_count_;
 800a7d8:	68fb      	ldr	r3, [r7, #12]
 800a7da:	685b      	ldr	r3, [r3, #4]
 800a7dc:	011b      	lsls	r3, r3, #4
 800a7de:	697a      	ldr	r2, [r7, #20]
 800a7e0:	4413      	add	r3, r2
 800a7e2:	617b      	str	r3, [r7, #20]

  buffer_sizes_sorted_ = reinterpret_cast<int*>(next_free);
 800a7e4:	68fb      	ldr	r3, [r7, #12]
 800a7e6:	697a      	ldr	r2, [r7, #20]
 800a7e8:	611a      	str	r2, [r3, #16]
  next_free += sizeof(int) * max_buffer_count_;
 800a7ea:	68fb      	ldr	r3, [r7, #12]
 800a7ec:	685b      	ldr	r3, [r3, #4]
 800a7ee:	009b      	lsls	r3, r3, #2
 800a7f0:	697a      	ldr	r2, [r7, #20]
 800a7f2:	4413      	add	r3, r2
 800a7f4:	617b      	str	r3, [r7, #20]

  buffer_ids_sorted_ = reinterpret_cast<int*>(next_free);
 800a7f6:	68fb      	ldr	r3, [r7, #12]
 800a7f8:	697a      	ldr	r2, [r7, #20]
 800a7fa:	615a      	str	r2, [r3, #20]
  next_free += sizeof(int) * max_buffer_count_;
 800a7fc:	68fb      	ldr	r3, [r7, #12]
 800a7fe:	685b      	ldr	r3, [r3, #4]
 800a800:	009b      	lsls	r3, r3, #2
 800a802:	697a      	ldr	r2, [r7, #20]
 800a804:	4413      	add	r3, r2
 800a806:	617b      	str	r3, [r7, #20]

  buffers_sorted_by_offset_ = reinterpret_cast<ListEntry*>(next_free);
 800a808:	68fb      	ldr	r3, [r7, #12]
 800a80a:	697a      	ldr	r2, [r7, #20]
 800a80c:	619a      	str	r2, [r3, #24]
  next_free += sizeof(ListEntry) * max_buffer_count_;
 800a80e:	68fb      	ldr	r3, [r7, #12]
 800a810:	685b      	ldr	r3, [r3, #4]
 800a812:	461a      	mov	r2, r3
 800a814:	4613      	mov	r3, r2
 800a816:	005b      	lsls	r3, r3, #1
 800a818:	4413      	add	r3, r2
 800a81a:	009b      	lsls	r3, r3, #2
 800a81c:	461a      	mov	r2, r3
 800a81e:	697b      	ldr	r3, [r7, #20]
 800a820:	4413      	add	r3, r2
 800a822:	617b      	str	r3, [r7, #20]

  buffer_offsets_ = reinterpret_cast<int*>(next_free);
 800a824:	68fb      	ldr	r3, [r7, #12]
 800a826:	697a      	ldr	r2, [r7, #20]
 800a828:	625a      	str	r2, [r3, #36]	; 0x24
}
 800a82a:	68fb      	ldr	r3, [r7, #12]
 800a82c:	4618      	mov	r0, r3
 800a82e:	371c      	adds	r7, #28
 800a830:	46bd      	mov	sp, r7
 800a832:	bd90      	pop	{r4, r7, pc}
 800a834:	08021bd0 	.word	0x08021bd0

0800a838 <_ZN6tflite19GreedyMemoryPlannerD1Ev>:

GreedyMemoryPlanner::~GreedyMemoryPlanner() {
 800a838:	b580      	push	{r7, lr}
 800a83a:	b082      	sub	sp, #8
 800a83c:	af00      	add	r7, sp, #0
 800a83e:	6078      	str	r0, [r7, #4]
 800a840:	4a05      	ldr	r2, [pc, #20]	; (800a858 <_ZN6tflite19GreedyMemoryPlannerD1Ev+0x20>)
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	601a      	str	r2, [r3, #0]
 800a846:	687b      	ldr	r3, [r7, #4]
 800a848:	4618      	mov	r0, r3
 800a84a:	f7ff ff11 	bl	800a670 <_ZN6tflite13MemoryPlannerD1Ev>
  // We don't own the scratch buffer, so don't deallocate anything.
}
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	4618      	mov	r0, r3
 800a852:	3708      	adds	r7, #8
 800a854:	46bd      	mov	sp, r7
 800a856:	bd80      	pop	{r7, pc}
 800a858:	08021bd0 	.word	0x08021bd0

0800a85c <_ZN6tflite19GreedyMemoryPlannerD0Ev>:
GreedyMemoryPlanner::~GreedyMemoryPlanner() {
 800a85c:	b580      	push	{r7, lr}
 800a85e:	b082      	sub	sp, #8
 800a860:	af00      	add	r7, sp, #0
 800a862:	6078      	str	r0, [r7, #4]
}
 800a864:	6878      	ldr	r0, [r7, #4]
 800a866:	f7ff ffe7 	bl	800a838 <_ZN6tflite19GreedyMemoryPlannerD1Ev>
 800a86a:	212c      	movs	r1, #44	; 0x2c
 800a86c:	6878      	ldr	r0, [r7, #4]
 800a86e:	f000 fb1e 	bl	800aeae <_ZdlPvj>
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	4618      	mov	r0, r3
 800a876:	3708      	adds	r7, #8
 800a878:	46bd      	mov	sp, r7
 800a87a:	bd80      	pop	{r7, pc}

0800a87c <_ZN6tflite19GreedyMemoryPlanner9AddBufferEPNS_13ErrorReporterEiii>:

TfLiteStatus GreedyMemoryPlanner::AddBuffer(
    tflite::ErrorReporter* error_reporter, int size, int first_time_used,
    int last_time_used) {
 800a87c:	b580      	push	{r7, lr}
 800a87e:	b086      	sub	sp, #24
 800a880:	af00      	add	r7, sp, #0
 800a882:	60f8      	str	r0, [r7, #12]
 800a884:	60b9      	str	r1, [r7, #8]
 800a886:	607a      	str	r2, [r7, #4]
 800a888:	603b      	str	r3, [r7, #0]
  if (buffer_count_ >= max_buffer_count_) {
 800a88a:	68fb      	ldr	r3, [r7, #12]
 800a88c:	689a      	ldr	r2, [r3, #8]
 800a88e:	68fb      	ldr	r3, [r7, #12]
 800a890:	685b      	ldr	r3, [r3, #4]
 800a892:	429a      	cmp	r2, r3
 800a894:	db08      	blt.n	800a8a8 <_ZN6tflite19GreedyMemoryPlanner9AddBufferEPNS_13ErrorReporterEiii+0x2c>
    TF_LITE_REPORT_ERROR(error_reporter, "Too many buffers (max is %d)",
 800a896:	68fb      	ldr	r3, [r7, #12]
 800a898:	685b      	ldr	r3, [r3, #4]
 800a89a:	461a      	mov	r2, r3
 800a89c:	4913      	ldr	r1, [pc, #76]	; (800a8ec <_ZN6tflite19GreedyMemoryPlanner9AddBufferEPNS_13ErrorReporterEiii+0x70>)
 800a89e:	68b8      	ldr	r0, [r7, #8]
 800a8a0:	f7f9 f97c 	bl	8003b9c <_ZN6tflite13ErrorReporter6ReportEPKcz>
                         max_buffer_count_);
    return kTfLiteError;
 800a8a4:	2301      	movs	r3, #1
 800a8a6:	e01d      	b.n	800a8e4 <_ZN6tflite19GreedyMemoryPlanner9AddBufferEPNS_13ErrorReporterEiii+0x68>
  }
  BufferRequirements* current = &requirements_[buffer_count_];
 800a8a8:	68fb      	ldr	r3, [r7, #12]
 800a8aa:	68da      	ldr	r2, [r3, #12]
 800a8ac:	68fb      	ldr	r3, [r7, #12]
 800a8ae:	689b      	ldr	r3, [r3, #8]
 800a8b0:	011b      	lsls	r3, r3, #4
 800a8b2:	4413      	add	r3, r2
 800a8b4:	617b      	str	r3, [r7, #20]
  current->size = size;
 800a8b6:	697b      	ldr	r3, [r7, #20]
 800a8b8:	687a      	ldr	r2, [r7, #4]
 800a8ba:	601a      	str	r2, [r3, #0]
  current->first_time_used = first_time_used;
 800a8bc:	697b      	ldr	r3, [r7, #20]
 800a8be:	683a      	ldr	r2, [r7, #0]
 800a8c0:	609a      	str	r2, [r3, #8]
  current->last_time_used = last_time_used;
 800a8c2:	697b      	ldr	r3, [r7, #20]
 800a8c4:	6a3a      	ldr	r2, [r7, #32]
 800a8c6:	60da      	str	r2, [r3, #12]
  current->offline_offset = kOnlinePlannedBuffer;
 800a8c8:	697b      	ldr	r3, [r7, #20]
 800a8ca:	f04f 32ff 	mov.w	r2, #4294967295
 800a8ce:	605a      	str	r2, [r3, #4]
  ++buffer_count_;
 800a8d0:	68fb      	ldr	r3, [r7, #12]
 800a8d2:	689b      	ldr	r3, [r3, #8]
 800a8d4:	1c5a      	adds	r2, r3, #1
 800a8d6:	68fb      	ldr	r3, [r7, #12]
 800a8d8:	609a      	str	r2, [r3, #8]
  need_to_calculate_offsets_ = true;
 800a8da:	68fb      	ldr	r3, [r7, #12]
 800a8dc:	2201      	movs	r2, #1
 800a8de:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  return kTfLiteOk;
 800a8e2:	2300      	movs	r3, #0
}
 800a8e4:	4618      	mov	r0, r3
 800a8e6:	3718      	adds	r7, #24
 800a8e8:	46bd      	mov	sp, r7
 800a8ea:	bd80      	pop	{r7, pc}
 800a8ec:	08011d80 	.word	0x08011d80

0800a8f0 <_ZN6tflite19GreedyMemoryPlanner9AddBufferEPNS_13ErrorReporterEiiii>:

TfLiteStatus GreedyMemoryPlanner::AddBuffer(
    tflite::ErrorReporter* error_reporter, int size, int first_time_used,
    int last_time_used, int offline_offset) {
 800a8f0:	b590      	push	{r4, r7, lr}
 800a8f2:	b089      	sub	sp, #36	; 0x24
 800a8f4:	af02      	add	r7, sp, #8
 800a8f6:	60f8      	str	r0, [r7, #12]
 800a8f8:	60b9      	str	r1, [r7, #8]
 800a8fa:	607a      	str	r2, [r7, #4]
 800a8fc:	603b      	str	r3, [r7, #0]
  BufferRequirements* current = &requirements_[buffer_count_];
 800a8fe:	68fb      	ldr	r3, [r7, #12]
 800a900:	68da      	ldr	r2, [r3, #12]
 800a902:	68fb      	ldr	r3, [r7, #12]
 800a904:	689b      	ldr	r3, [r3, #8]
 800a906:	011b      	lsls	r3, r3, #4
 800a908:	4413      	add	r3, r2
 800a90a:	617b      	str	r3, [r7, #20]
  if (AddBuffer(error_reporter, size, first_time_used, last_time_used) !=
 800a90c:	68fb      	ldr	r3, [r7, #12]
 800a90e:	681b      	ldr	r3, [r3, #0]
 800a910:	3308      	adds	r3, #8
 800a912:	681c      	ldr	r4, [r3, #0]
 800a914:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a916:	9300      	str	r3, [sp, #0]
 800a918:	683b      	ldr	r3, [r7, #0]
 800a91a:	687a      	ldr	r2, [r7, #4]
 800a91c:	68b9      	ldr	r1, [r7, #8]
 800a91e:	68f8      	ldr	r0, [r7, #12]
 800a920:	47a0      	blx	r4
 800a922:	4603      	mov	r3, r0
 800a924:	2b00      	cmp	r3, #0
 800a926:	bf14      	ite	ne
 800a928:	2301      	movne	r3, #1
 800a92a:	2300      	moveq	r3, #0
 800a92c:	b2db      	uxtb	r3, r3
 800a92e:	2b00      	cmp	r3, #0
 800a930:	d001      	beq.n	800a936 <_ZN6tflite19GreedyMemoryPlanner9AddBufferEPNS_13ErrorReporterEiiii+0x46>
      kTfLiteOk) {
    return kTfLiteError;
 800a932:	2301      	movs	r3, #1
 800a934:	e003      	b.n	800a93e <_ZN6tflite19GreedyMemoryPlanner9AddBufferEPNS_13ErrorReporterEiiii+0x4e>
  }
  current->offline_offset = offline_offset;
 800a936:	697b      	ldr	r3, [r7, #20]
 800a938:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a93a:	605a      	str	r2, [r3, #4]
  return kTfLiteOk;
 800a93c:	2300      	movs	r3, #0
}
 800a93e:	4618      	mov	r0, r3
 800a940:	371c      	adds	r7, #28
 800a942:	46bd      	mov	sp, r7
 800a944:	bd90      	pop	{r4, r7, pc}

0800a946 <_ZNK6tflite19GreedyMemoryPlanner22DoesEntryOverlapInTimeEPKNS0_9ListEntryEii>:

bool GreedyMemoryPlanner::DoesEntryOverlapInTime(
    const GreedyMemoryPlanner::ListEntry* entry, const int first_time_used,
    const int last_time_used) const {
 800a946:	b480      	push	{r7}
 800a948:	b087      	sub	sp, #28
 800a94a:	af00      	add	r7, sp, #0
 800a94c:	60f8      	str	r0, [r7, #12]
 800a94e:	60b9      	str	r1, [r7, #8]
 800a950:	607a      	str	r2, [r7, #4]
 800a952:	603b      	str	r3, [r7, #0]
  const BufferRequirements* entry_requirements =
      &requirements_[entry->requirements_index];
 800a954:	68fb      	ldr	r3, [r7, #12]
 800a956:	68da      	ldr	r2, [r3, #12]
 800a958:	68bb      	ldr	r3, [r7, #8]
 800a95a:	685b      	ldr	r3, [r3, #4]
 800a95c:	011b      	lsls	r3, r3, #4
  const BufferRequirements* entry_requirements =
 800a95e:	4413      	add	r3, r2
 800a960:	617b      	str	r3, [r7, #20]
  if (entry_requirements->first_time_used > last_time_used) {
 800a962:	697b      	ldr	r3, [r7, #20]
 800a964:	689b      	ldr	r3, [r3, #8]
 800a966:	683a      	ldr	r2, [r7, #0]
 800a968:	429a      	cmp	r2, r3
 800a96a:	da01      	bge.n	800a970 <_ZNK6tflite19GreedyMemoryPlanner22DoesEntryOverlapInTimeEPKNS0_9ListEntryEii+0x2a>
    return false;
 800a96c:	2300      	movs	r3, #0
 800a96e:	e007      	b.n	800a980 <_ZNK6tflite19GreedyMemoryPlanner22DoesEntryOverlapInTimeEPKNS0_9ListEntryEii+0x3a>
  }
  if (first_time_used > entry_requirements->last_time_used) {
 800a970:	697b      	ldr	r3, [r7, #20]
 800a972:	68db      	ldr	r3, [r3, #12]
 800a974:	687a      	ldr	r2, [r7, #4]
 800a976:	429a      	cmp	r2, r3
 800a978:	dd01      	ble.n	800a97e <_ZNK6tflite19GreedyMemoryPlanner22DoesEntryOverlapInTimeEPKNS0_9ListEntryEii+0x38>
    return false;
 800a97a:	2300      	movs	r3, #0
 800a97c:	e000      	b.n	800a980 <_ZNK6tflite19GreedyMemoryPlanner22DoesEntryOverlapInTimeEPKNS0_9ListEntryEii+0x3a>
  }
  return true;
 800a97e:	2301      	movs	r3, #1
}
 800a980:	4618      	mov	r0, r3
 800a982:	371c      	adds	r7, #28
 800a984:	46bd      	mov	sp, r7
 800a986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a98a:	4770      	bx	lr

0800a98c <_ZN6tflite19GreedyMemoryPlanner30NextSimultaneouslyActiveBufferEPKNS0_9ListEntryEii>:

GreedyMemoryPlanner::ListEntry*
GreedyMemoryPlanner::NextSimultaneouslyActiveBuffer(
    const GreedyMemoryPlanner::ListEntry* start, const int first_time_used,
    const int last_time_used) {
 800a98c:	b580      	push	{r7, lr}
 800a98e:	b086      	sub	sp, #24
 800a990:	af00      	add	r7, sp, #0
 800a992:	60f8      	str	r0, [r7, #12]
 800a994:	60b9      	str	r1, [r7, #8]
 800a996:	607a      	str	r2, [r7, #4]
 800a998:	603b      	str	r3, [r7, #0]
  ListEntry* result = nullptr;
 800a99a:	2300      	movs	r3, #0
 800a99c:	617b      	str	r3, [r7, #20]
  ListEntry* candidate_next_entry;
  if (start == nullptr) {
 800a99e:	68bb      	ldr	r3, [r7, #8]
 800a9a0:	2b00      	cmp	r3, #0
 800a9a2:	d10b      	bne.n	800a9bc <_ZN6tflite19GreedyMemoryPlanner30NextSimultaneouslyActiveBufferEPKNS0_9ListEntryEii+0x30>
    candidate_next_entry = &buffers_sorted_by_offset_[first_entry_index_];
 800a9a4:	68fb      	ldr	r3, [r7, #12]
 800a9a6:	699a      	ldr	r2, [r3, #24]
 800a9a8:	68fb      	ldr	r3, [r7, #12]
 800a9aa:	6a1b      	ldr	r3, [r3, #32]
 800a9ac:	4619      	mov	r1, r3
 800a9ae:	460b      	mov	r3, r1
 800a9b0:	005b      	lsls	r3, r3, #1
 800a9b2:	440b      	add	r3, r1
 800a9b4:	009b      	lsls	r3, r3, #2
 800a9b6:	4413      	add	r3, r2
 800a9b8:	613b      	str	r3, [r7, #16]
 800a9ba:	e011      	b.n	800a9e0 <_ZN6tflite19GreedyMemoryPlanner30NextSimultaneouslyActiveBufferEPKNS0_9ListEntryEii+0x54>
  } else {
    if (start->next_entry_index == -1) {
 800a9bc:	68bb      	ldr	r3, [r7, #8]
 800a9be:	689b      	ldr	r3, [r3, #8]
 800a9c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a9c4:	d101      	bne.n	800a9ca <_ZN6tflite19GreedyMemoryPlanner30NextSimultaneouslyActiveBufferEPKNS0_9ListEntryEii+0x3e>
      return nullptr;
 800a9c6:	2300      	movs	r3, #0
 800a9c8:	e029      	b.n	800aa1e <_ZN6tflite19GreedyMemoryPlanner30NextSimultaneouslyActiveBufferEPKNS0_9ListEntryEii+0x92>
    }
    candidate_next_entry = &buffers_sorted_by_offset_[start->next_entry_index];
 800a9ca:	68fb      	ldr	r3, [r7, #12]
 800a9cc:	699a      	ldr	r2, [r3, #24]
 800a9ce:	68bb      	ldr	r3, [r7, #8]
 800a9d0:	689b      	ldr	r3, [r3, #8]
 800a9d2:	4619      	mov	r1, r3
 800a9d4:	460b      	mov	r3, r1
 800a9d6:	005b      	lsls	r3, r3, #1
 800a9d8:	440b      	add	r3, r1
 800a9da:	009b      	lsls	r3, r3, #2
 800a9dc:	4413      	add	r3, r2
 800a9de:	613b      	str	r3, [r7, #16]
  }
  do {
    if (DoesEntryOverlapInTime(candidate_next_entry, first_time_used,
 800a9e0:	683b      	ldr	r3, [r7, #0]
 800a9e2:	687a      	ldr	r2, [r7, #4]
 800a9e4:	6939      	ldr	r1, [r7, #16]
 800a9e6:	68f8      	ldr	r0, [r7, #12]
 800a9e8:	f7ff ffad 	bl	800a946 <_ZNK6tflite19GreedyMemoryPlanner22DoesEntryOverlapInTimeEPKNS0_9ListEntryEii>
 800a9ec:	4603      	mov	r3, r0
 800a9ee:	2b00      	cmp	r3, #0
 800a9f0:	d002      	beq.n	800a9f8 <_ZN6tflite19GreedyMemoryPlanner30NextSimultaneouslyActiveBufferEPKNS0_9ListEntryEii+0x6c>
                               last_time_used)) {
      result = candidate_next_entry;
 800a9f2:	693b      	ldr	r3, [r7, #16]
 800a9f4:	617b      	str	r3, [r7, #20]
      break;
 800a9f6:	e011      	b.n	800aa1c <_ZN6tflite19GreedyMemoryPlanner30NextSimultaneouslyActiveBufferEPKNS0_9ListEntryEii+0x90>
    }
    if (candidate_next_entry->next_entry_index == -1) {
 800a9f8:	693b      	ldr	r3, [r7, #16]
 800a9fa:	689b      	ldr	r3, [r3, #8]
 800a9fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aa00:	d00b      	beq.n	800aa1a <_ZN6tflite19GreedyMemoryPlanner30NextSimultaneouslyActiveBufferEPKNS0_9ListEntryEii+0x8e>
      break;
    }
    candidate_next_entry =
        &buffers_sorted_by_offset_[candidate_next_entry->next_entry_index];
 800aa02:	68fb      	ldr	r3, [r7, #12]
 800aa04:	699a      	ldr	r2, [r3, #24]
 800aa06:	693b      	ldr	r3, [r7, #16]
 800aa08:	689b      	ldr	r3, [r3, #8]
 800aa0a:	4619      	mov	r1, r3
 800aa0c:	460b      	mov	r3, r1
 800aa0e:	005b      	lsls	r3, r3, #1
 800aa10:	440b      	add	r3, r1
 800aa12:	009b      	lsls	r3, r3, #2
    candidate_next_entry =
 800aa14:	4413      	add	r3, r2
 800aa16:	613b      	str	r3, [r7, #16]
    if (DoesEntryOverlapInTime(candidate_next_entry, first_time_used,
 800aa18:	e7e2      	b.n	800a9e0 <_ZN6tflite19GreedyMemoryPlanner30NextSimultaneouslyActiveBufferEPKNS0_9ListEntryEii+0x54>
      break;
 800aa1a:	bf00      	nop
  } while (true);
  return result;
 800aa1c:	697b      	ldr	r3, [r7, #20]
}
 800aa1e:	4618      	mov	r0, r3
 800aa20:	3718      	adds	r7, #24
 800aa22:	46bd      	mov	sp, r7
 800aa24:	bd80      	pop	{r7, pc}

0800aa26 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv>:

void GreedyMemoryPlanner::CalculateOffsetsIfNeeded() {
 800aa26:	b580      	push	{r7, lr}
 800aa28:	b098      	sub	sp, #96	; 0x60
 800aa2a:	af00      	add	r7, sp, #0
 800aa2c:	6078      	str	r0, [r7, #4]
  if (!need_to_calculate_offsets_ || (buffer_count_ == 0)) {
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800aa34:	f083 0301 	eor.w	r3, r3, #1
 800aa38:	b2db      	uxtb	r3, r3
 800aa3a:	2b00      	cmp	r3, #0
 800aa3c:	f040 815f 	bne.w	800acfe <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x2d8>
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	689b      	ldr	r3, [r3, #8]
 800aa44:	2b00      	cmp	r3, #0
 800aa46:	f000 815a 	beq.w	800acfe <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x2d8>
    return;
  }
  need_to_calculate_offsets_ = false;
 800aa4a:	687b      	ldr	r3, [r7, #4]
 800aa4c:	2200      	movs	r2, #0
 800aa4e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  // This helps find a more compact layout. Intuitively, you can think
  // about putting the large buffers in place first, and then the
  // smaller buffers can fit in the gaps, rather than fragmenting the
  // gaps with small buffers at the beginning. Add offline planned offsets
  // first in the list, since they have a predetermined offset.
  int idx_from_tail = buffer_count_;
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	689b      	ldr	r3, [r3, #8]
 800aa56:	65fb      	str	r3, [r7, #92]	; 0x5c
  int idx_from_head = 0;
 800aa58:	2300      	movs	r3, #0
 800aa5a:	65bb      	str	r3, [r7, #88]	; 0x58
  for (int i = 0; i < buffer_count_; ++i) {
 800aa5c:	2300      	movs	r3, #0
 800aa5e:	657b      	str	r3, [r7, #84]	; 0x54
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	689b      	ldr	r3, [r3, #8]
 800aa64:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800aa66:	429a      	cmp	r2, r3
 800aa68:	da4d      	bge.n	800ab06 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0xe0>
    if (requirements_[i].offline_offset == kOnlinePlannedBuffer) {
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	68da      	ldr	r2, [r3, #12]
 800aa6e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800aa70:	011b      	lsls	r3, r3, #4
 800aa72:	4413      	add	r3, r2
 800aa74:	685b      	ldr	r3, [r3, #4]
 800aa76:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aa7a:	d11e      	bne.n	800aaba <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x94>
      idx_from_tail--;
 800aa7c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800aa7e:	3b01      	subs	r3, #1
 800aa80:	65fb      	str	r3, [r7, #92]	; 0x5c
      buffer_sizes_sorted_[idx_from_tail] = requirements_[i].size;
 800aa82:	687b      	ldr	r3, [r7, #4]
 800aa84:	68da      	ldr	r2, [r3, #12]
 800aa86:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800aa88:	011b      	lsls	r3, r3, #4
 800aa8a:	441a      	add	r2, r3
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	6919      	ldr	r1, [r3, #16]
 800aa90:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800aa92:	009b      	lsls	r3, r3, #2
 800aa94:	440b      	add	r3, r1
 800aa96:	6812      	ldr	r2, [r2, #0]
 800aa98:	601a      	str	r2, [r3, #0]
      buffer_ids_sorted_[idx_from_tail] = i;
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	695a      	ldr	r2, [r3, #20]
 800aa9e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800aaa0:	009b      	lsls	r3, r3, #2
 800aaa2:	4413      	add	r3, r2
 800aaa4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800aaa6:	601a      	str	r2, [r3, #0]
      buffer_offsets_[i] = -1;
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800aaac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800aaae:	009b      	lsls	r3, r3, #2
 800aab0:	4413      	add	r3, r2
 800aab2:	f04f 32ff 	mov.w	r2, #4294967295
 800aab6:	601a      	str	r2, [r3, #0]
 800aab8:	e021      	b.n	800aafe <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0xd8>
    } else {
      buffer_sizes_sorted_[idx_from_head] = requirements_[i].size;
 800aaba:	687b      	ldr	r3, [r7, #4]
 800aabc:	68da      	ldr	r2, [r3, #12]
 800aabe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800aac0:	011b      	lsls	r3, r3, #4
 800aac2:	441a      	add	r2, r3
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	6919      	ldr	r1, [r3, #16]
 800aac8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800aaca:	009b      	lsls	r3, r3, #2
 800aacc:	440b      	add	r3, r1
 800aace:	6812      	ldr	r2, [r2, #0]
 800aad0:	601a      	str	r2, [r3, #0]
      buffer_ids_sorted_[idx_from_head] = i;
 800aad2:	687b      	ldr	r3, [r7, #4]
 800aad4:	695a      	ldr	r2, [r3, #20]
 800aad6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800aad8:	009b      	lsls	r3, r3, #2
 800aada:	4413      	add	r3, r2
 800aadc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800aade:	601a      	str	r2, [r3, #0]
      buffer_offsets_[i] = requirements_[i].offline_offset;
 800aae0:	687b      	ldr	r3, [r7, #4]
 800aae2:	68da      	ldr	r2, [r3, #12]
 800aae4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800aae6:	011b      	lsls	r3, r3, #4
 800aae8:	441a      	add	r2, r3
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800aaee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800aaf0:	009b      	lsls	r3, r3, #2
 800aaf2:	440b      	add	r3, r1
 800aaf4:	6852      	ldr	r2, [r2, #4]
 800aaf6:	601a      	str	r2, [r3, #0]
      idx_from_head++;
 800aaf8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800aafa:	3301      	adds	r3, #1
 800aafc:	65bb      	str	r3, [r7, #88]	; 0x58
  for (int i = 0; i < buffer_count_; ++i) {
 800aafe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ab00:	3301      	adds	r3, #1
 800ab02:	657b      	str	r3, [r7, #84]	; 0x54
 800ab04:	e7ac      	b.n	800aa60 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x3a>
    }
  }

  // This sorting algorithm is naive, and may end up taking a very long time
  // with hundreds of buffers. Do not sort the offline planned offsets.
  ReverseSortInPlace(&buffer_sizes_sorted_[idx_from_head],
 800ab06:	687b      	ldr	r3, [r7, #4]
 800ab08:	691a      	ldr	r2, [r3, #16]
 800ab0a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ab0c:	009b      	lsls	r3, r3, #2
 800ab0e:	18d0      	adds	r0, r2, r3
                     &buffer_ids_sorted_[idx_from_head],
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	695a      	ldr	r2, [r3, #20]
 800ab14:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ab16:	009b      	lsls	r3, r3, #2
  ReverseSortInPlace(&buffer_sizes_sorted_[idx_from_head],
 800ab18:	18d1      	adds	r1, r2, r3
                     buffer_count_ - idx_from_head);
 800ab1a:	687b      	ldr	r3, [r7, #4]
 800ab1c:	689a      	ldr	r2, [r3, #8]
  ReverseSortInPlace(&buffer_sizes_sorted_[idx_from_head],
 800ab1e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ab20:	1ad3      	subs	r3, r2, r3
 800ab22:	461a      	mov	r2, r3
 800ab24:	f7ff fdd0 	bl	800a6c8 <_ZN6tflite18ReverseSortInPlaceEPiS0_i>
  // buffer_ids_sorted_.
  //   - If there are no offline planned offsets, the largest buffer will be
  //     first, and the buffers will be handled in size order.
  //   - If offline offsets are present, these will be handled first in order
  //     for the greedy algorithm to utilized gaps in the offline plan.
  first_entry_index_ = 0;
 800ab28:	687b      	ldr	r3, [r7, #4]
 800ab2a:	2200      	movs	r2, #0
 800ab2c:	621a      	str	r2, [r3, #32]
  next_free_entry_ = 1;
 800ab2e:	687b      	ldr	r3, [r7, #4]
 800ab30:	2201      	movs	r2, #1
 800ab32:	61da      	str	r2, [r3, #28]
  ListEntry* first_entry = &buffers_sorted_by_offset_[first_entry_index_];
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	699a      	ldr	r2, [r3, #24]
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	6a1b      	ldr	r3, [r3, #32]
 800ab3c:	4619      	mov	r1, r3
 800ab3e:	460b      	mov	r3, r1
 800ab40:	005b      	lsls	r3, r3, #1
 800ab42:	440b      	add	r3, r1
 800ab44:	009b      	lsls	r3, r3, #2
 800ab46:	4413      	add	r3, r2
 800ab48:	653b      	str	r3, [r7, #80]	; 0x50
  first_entry->next_entry_index = -1;  // to mark the entry as end of list
 800ab4a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ab4c:	f04f 32ff 	mov.w	r2, #4294967295
 800ab50:	609a      	str	r2, [r3, #8]
  int buffer_id = buffer_ids_sorted_[0];
 800ab52:	687b      	ldr	r3, [r7, #4]
 800ab54:	695b      	ldr	r3, [r3, #20]
 800ab56:	681b      	ldr	r3, [r3, #0]
 800ab58:	63fb      	str	r3, [r7, #60]	; 0x3c
  first_entry->requirements_index = buffer_id;
 800ab5a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ab5c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800ab5e:	605a      	str	r2, [r3, #4]
  if (requirements_[buffer_id].offline_offset == kOnlinePlannedBuffer) {
 800ab60:	687b      	ldr	r3, [r7, #4]
 800ab62:	68da      	ldr	r2, [r3, #12]
 800ab64:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ab66:	011b      	lsls	r3, r3, #4
 800ab68:	4413      	add	r3, r2
 800ab6a:	685b      	ldr	r3, [r3, #4]
 800ab6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ab70:	d106      	bne.n	800ab80 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x15a>
    buffer_offsets_[buffer_id] = 0;
 800ab72:	687b      	ldr	r3, [r7, #4]
 800ab74:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ab76:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ab78:	009b      	lsls	r3, r3, #2
 800ab7a:	4413      	add	r3, r2
 800ab7c:	2200      	movs	r2, #0
 800ab7e:	601a      	str	r2, [r3, #0]
  }
  first_entry->offset = buffer_offsets_[buffer_id];
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ab84:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ab86:	009b      	lsls	r3, r3, #2
 800ab88:	4413      	add	r3, r2
 800ab8a:	681a      	ldr	r2, [r3, #0]
 800ab8c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ab8e:	601a      	str	r2, [r3, #0]

  // Work through the rest of the buffers to find a good gap to place each one.
  for (int i = 1; i < buffer_count_; ++i) {
 800ab90:	2301      	movs	r3, #1
 800ab92:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ab94:	687b      	ldr	r3, [r7, #4]
 800ab96:	689b      	ldr	r3, [r3, #8]
 800ab98:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800ab9a:	429a      	cmp	r2, r3
 800ab9c:	f280 80b0 	bge.w	800ad00 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x2da>
    // The id is the order the buffer was originally added by the client.
    buffer_id = buffer_ids_sorted_[i];
 800aba0:	687b      	ldr	r3, [r7, #4]
 800aba2:	695a      	ldr	r2, [r3, #20]
 800aba4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800aba6:	009b      	lsls	r3, r3, #2
 800aba8:	4413      	add	r3, r2
 800abaa:	681b      	ldr	r3, [r3, #0]
 800abac:	63fb      	str	r3, [r7, #60]	; 0x3c
    // Look at what size and time range the buffer needs to be active.
    BufferRequirements* wanted_requirements = &requirements_[buffer_id];
 800abae:	687b      	ldr	r3, [r7, #4]
 800abb0:	68da      	ldr	r2, [r3, #12]
 800abb2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800abb4:	011b      	lsls	r3, r3, #4
 800abb6:	4413      	add	r3, r2
 800abb8:	63bb      	str	r3, [r7, #56]	; 0x38
    const int wanted_size = wanted_requirements->size;
 800abba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800abbc:	681b      	ldr	r3, [r3, #0]
 800abbe:	637b      	str	r3, [r7, #52]	; 0x34
    const int wanted_first_time_used = wanted_requirements->first_time_used;
 800abc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800abc2:	689b      	ldr	r3, [r3, #8]
 800abc4:	633b      	str	r3, [r7, #48]	; 0x30
    const int wanted_last_time_used = wanted_requirements->last_time_used;
 800abc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800abc8:	68db      	ldr	r3, [r3, #12]
 800abca:	62fb      	str	r3, [r7, #44]	; 0x2c
    // buffers are stored in the order of their starting position in the arena
    // so that it's easy to find the next buffer in memory, and so the gap.
    // The candidate_entry variable holds the buffer that we're considering
    // placing the current buffer after.

    int candidate_offset = 0;
 800abcc:	2300      	movs	r3, #0
 800abce:	64bb      	str	r3, [r7, #72]	; 0x48
    // Loop through the offset-ordered list of buffers, looking for gaps.
    if (wanted_requirements->offline_offset == kOnlinePlannedBuffer) {
 800abd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800abd2:	685b      	ldr	r3, [r3, #4]
 800abd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800abd8:	d12d      	bne.n	800ac36 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x210>
      ListEntry* prior_entry = nullptr;
 800abda:	2300      	movs	r3, #0
 800abdc:	647b      	str	r3, [r7, #68]	; 0x44
      while (true) {
        // Find out what the next active buffer is.
        ListEntry* next_entry = NextSimultaneouslyActiveBuffer(
 800abde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800abe0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800abe2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800abe4:	6878      	ldr	r0, [r7, #4]
 800abe6:	f7ff fed1 	bl	800a98c <_ZN6tflite19GreedyMemoryPlanner30NextSimultaneouslyActiveBufferEPKNS0_9ListEntryEii>
 800abea:	62b8      	str	r0, [r7, #40]	; 0x28
            prior_entry, wanted_first_time_used, wanted_last_time_used);

        if (prior_entry) {
 800abec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800abee:	2b00      	cmp	r3, #0
 800abf0:	d012      	beq.n	800ac18 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x1f2>
          BufferRequirements* candidate_requirements =
              &requirements_[prior_entry->requirements_index];
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	68da      	ldr	r2, [r3, #12]
 800abf6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800abf8:	685b      	ldr	r3, [r3, #4]
 800abfa:	011b      	lsls	r3, r3, #4
          BufferRequirements* candidate_requirements =
 800abfc:	4413      	add	r3, r2
 800abfe:	627b      	str	r3, [r7, #36]	; 0x24
          const int prior_entry_offset =
              prior_entry->offset + candidate_requirements->size;
 800ac00:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ac02:	681a      	ldr	r2, [r3, #0]
 800ac04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac06:	681b      	ldr	r3, [r3, #0]
          const int prior_entry_offset =
 800ac08:	4413      	add	r3, r2
 800ac0a:	623b      	str	r3, [r7, #32]
          if (prior_entry_offset > candidate_offset) {
 800ac0c:	6a3a      	ldr	r2, [r7, #32]
 800ac0e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ac10:	429a      	cmp	r2, r3
 800ac12:	dd01      	ble.n	800ac18 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x1f2>
            candidate_offset = prior_entry_offset;
 800ac14:	6a3b      	ldr	r3, [r7, #32]
 800ac16:	64bb      	str	r3, [r7, #72]	; 0x48
          }
        }
        if (next_entry == nullptr) {
 800ac18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac1a:	2b00      	cmp	r3, #0
 800ac1c:	d00f      	beq.n	800ac3e <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x218>
          // We're at the end of the list, so we can always append the buffer
          // here.
          break;
        }
        // Find out how much space there is between us and the next buffer.
        const int gap = next_entry->offset - candidate_offset;
 800ac1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac20:	681a      	ldr	r2, [r3, #0]
 800ac22:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ac24:	1ad3      	subs	r3, r2, r3
 800ac26:	61fb      	str	r3, [r7, #28]
        if (gap >= wanted_size) {
 800ac28:	69fa      	ldr	r2, [r7, #28]
 800ac2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ac2c:	429a      	cmp	r2, r3
 800ac2e:	da08      	bge.n	800ac42 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x21c>
          // This entry has a big enough gap between it and the next, so
          // use it!
          break;
        }
        // The gap wasn't big enough, so move on to another candidate.
        prior_entry = next_entry;
 800ac30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac32:	647b      	str	r3, [r7, #68]	; 0x44
      }
 800ac34:	e7d3      	b.n	800abde <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x1b8>
    } else {
      // Offline planned offset are to be considered constant
      candidate_offset = wanted_requirements->offline_offset;
 800ac36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac38:	685b      	ldr	r3, [r3, #4]
 800ac3a:	64bb      	str	r3, [r7, #72]	; 0x48
 800ac3c:	e002      	b.n	800ac44 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x21e>
          break;
 800ac3e:	bf00      	nop
 800ac40:	e000      	b.n	800ac44 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x21e>
          break;
 800ac42:	bf00      	nop
    }
    // At this point, we've either found a gap (possibly at the end of the
    // list) and want to place the buffer there, or there are no other active
    // buffers in this time range and so we can put it at offset zero.
    // Record the buffer's offset in our plan.
    buffer_offsets_[buffer_id] = candidate_offset;
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ac48:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ac4a:	009b      	lsls	r3, r3, #2
 800ac4c:	4413      	add	r3, r2
 800ac4e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ac50:	601a      	str	r2, [r3, #0]
    // Add the newly-placed buffer to our offset-ordered list, so that
    // subsequent passes can fit in their buffers around it.
    ListEntry* new_entry = &buffers_sorted_by_offset_[next_free_entry_];
 800ac52:	687b      	ldr	r3, [r7, #4]
 800ac54:	699a      	ldr	r2, [r3, #24]
 800ac56:	687b      	ldr	r3, [r7, #4]
 800ac58:	69db      	ldr	r3, [r3, #28]
 800ac5a:	4619      	mov	r1, r3
 800ac5c:	460b      	mov	r3, r1
 800ac5e:	005b      	lsls	r3, r3, #1
 800ac60:	440b      	add	r3, r1
 800ac62:	009b      	lsls	r3, r3, #2
 800ac64:	4413      	add	r3, r2
 800ac66:	61bb      	str	r3, [r7, #24]
    new_entry->offset = candidate_offset;
 800ac68:	69bb      	ldr	r3, [r7, #24]
 800ac6a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ac6c:	601a      	str	r2, [r3, #0]
    new_entry->requirements_index = buffer_id;
 800ac6e:	69bb      	ldr	r3, [r7, #24]
 800ac70:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800ac72:	605a      	str	r2, [r3, #4]
    const int new_entry_index = next_free_entry_;
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	69db      	ldr	r3, [r3, #28]
 800ac78:	617b      	str	r3, [r7, #20]
    ++next_free_entry_;
 800ac7a:	687b      	ldr	r3, [r7, #4]
 800ac7c:	69db      	ldr	r3, [r3, #28]
 800ac7e:	1c5a      	adds	r2, r3, #1
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	61da      	str	r2, [r3, #28]

    if (first_entry->offset > candidate_offset) {
 800ac84:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ac86:	681b      	ldr	r3, [r3, #0]
 800ac88:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ac8a:	429a      	cmp	r2, r3
 800ac8c:	da09      	bge.n	800aca2 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x27c>
      // The new entry offset is smaller than the first entry offset =>
      // replace the first entry
      first_entry = new_entry;
 800ac8e:	69bb      	ldr	r3, [r7, #24]
 800ac90:	653b      	str	r3, [r7, #80]	; 0x50
      first_entry->next_entry_index = first_entry_index_;
 800ac92:	687b      	ldr	r3, [r7, #4]
 800ac94:	6a1a      	ldr	r2, [r3, #32]
 800ac96:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ac98:	609a      	str	r2, [r3, #8]
      first_entry_index_ = new_entry_index;
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	697a      	ldr	r2, [r7, #20]
 800ac9e:	621a      	str	r2, [r3, #32]
 800aca0:	e029      	b.n	800acf6 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x2d0>
    } else {
      ListEntry* current_entry = first_entry;
 800aca2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800aca4:	643b      	str	r3, [r7, #64]	; 0x40
      // Make sure that we insert the buffer at the correct place in the
      // buffer-offset-ordered list
      while (true) {
        const int next_entry_index = current_entry->next_entry_index;
 800aca6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800aca8:	689b      	ldr	r3, [r3, #8]
 800acaa:	613b      	str	r3, [r7, #16]
        if (next_entry_index == -1) {
 800acac:	693b      	ldr	r3, [r7, #16]
 800acae:	f1b3 3fff 	cmp.w	r3, #4294967295
 800acb2:	d107      	bne.n	800acc4 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x29e>
          // We're at the end of the list, so just add the new entry here.
          current_entry->next_entry_index = new_entry_index;
 800acb4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800acb6:	697a      	ldr	r2, [r7, #20]
 800acb8:	609a      	str	r2, [r3, #8]
          new_entry->next_entry_index = -1;
 800acba:	69bb      	ldr	r3, [r7, #24]
 800acbc:	f04f 32ff 	mov.w	r2, #4294967295
 800acc0:	609a      	str	r2, [r3, #8]
          break;
 800acc2:	e018      	b.n	800acf6 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x2d0>
        }
        // not at the end of the list -> take a look at next entry
        ListEntry* next_entry = &buffers_sorted_by_offset_[next_entry_index];
 800acc4:	687b      	ldr	r3, [r7, #4]
 800acc6:	6999      	ldr	r1, [r3, #24]
 800acc8:	693a      	ldr	r2, [r7, #16]
 800acca:	4613      	mov	r3, r2
 800accc:	005b      	lsls	r3, r3, #1
 800acce:	4413      	add	r3, r2
 800acd0:	009b      	lsls	r3, r3, #2
 800acd2:	440b      	add	r3, r1
 800acd4:	60fb      	str	r3, [r7, #12]
        if (next_entry->offset > candidate_offset) {
 800acd6:	68fb      	ldr	r3, [r7, #12]
 800acd8:	681b      	ldr	r3, [r3, #0]
 800acda:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800acdc:	429a      	cmp	r2, r3
 800acde:	da07      	bge.n	800acf0 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x2ca>
          // We're at the right spot to do an insertion and retain the sorting
          // order, so place the new entry here.
          new_entry->next_entry_index = current_entry->next_entry_index;
 800ace0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ace2:	689a      	ldr	r2, [r3, #8]
 800ace4:	69bb      	ldr	r3, [r7, #24]
 800ace6:	609a      	str	r2, [r3, #8]
          current_entry->next_entry_index = new_entry_index;
 800ace8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800acea:	697a      	ldr	r2, [r7, #20]
 800acec:	609a      	str	r2, [r3, #8]
          break;
 800acee:	e002      	b.n	800acf6 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x2d0>
        }
        current_entry = next_entry;
 800acf0:	68fb      	ldr	r3, [r7, #12]
 800acf2:	643b      	str	r3, [r7, #64]	; 0x40
      }
 800acf4:	e7d7      	b.n	800aca6 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x280>
  for (int i = 1; i < buffer_count_; ++i) {
 800acf6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800acf8:	3301      	adds	r3, #1
 800acfa:	64fb      	str	r3, [r7, #76]	; 0x4c
 800acfc:	e74a      	b.n	800ab94 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x16e>
    return;
 800acfe:	bf00      	nop
    }
  }
}
 800ad00:	3760      	adds	r7, #96	; 0x60
 800ad02:	46bd      	mov	sp, r7
 800ad04:	bd80      	pop	{r7, pc}

0800ad06 <_ZN6tflite19GreedyMemoryPlanner20GetMaximumMemorySizeEv>:

size_t GreedyMemoryPlanner::GetMaximumMemorySize() {
 800ad06:	b580      	push	{r7, lr}
 800ad08:	b086      	sub	sp, #24
 800ad0a:	af00      	add	r7, sp, #0
 800ad0c:	6078      	str	r0, [r7, #4]
  CalculateOffsetsIfNeeded();
 800ad0e:	6878      	ldr	r0, [r7, #4]
 800ad10:	f7ff fe89 	bl	800aa26 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv>
  if (buffer_count_ == 0) {
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	689b      	ldr	r3, [r3, #8]
 800ad18:	2b00      	cmp	r3, #0
 800ad1a:	d101      	bne.n	800ad20 <_ZN6tflite19GreedyMemoryPlanner20GetMaximumMemorySizeEv+0x1a>
    return 0;
 800ad1c:	2300      	movs	r3, #0
 800ad1e:	e035      	b.n	800ad8c <_ZN6tflite19GreedyMemoryPlanner20GetMaximumMemorySizeEv+0x86>
  }
  ListEntry* entry = &buffers_sorted_by_offset_[first_entry_index_];
 800ad20:	687b      	ldr	r3, [r7, #4]
 800ad22:	699a      	ldr	r2, [r3, #24]
 800ad24:	687b      	ldr	r3, [r7, #4]
 800ad26:	6a1b      	ldr	r3, [r3, #32]
 800ad28:	4619      	mov	r1, r3
 800ad2a:	460b      	mov	r3, r1
 800ad2c:	005b      	lsls	r3, r3, #1
 800ad2e:	440b      	add	r3, r1
 800ad30:	009b      	lsls	r3, r3, #2
 800ad32:	4413      	add	r3, r2
 800ad34:	617b      	str	r3, [r7, #20]
  size_t max_size = 0;
 800ad36:	2300      	movs	r3, #0
 800ad38:	613b      	str	r3, [r7, #16]
  while (entry) {
 800ad3a:	697b      	ldr	r3, [r7, #20]
 800ad3c:	2b00      	cmp	r3, #0
 800ad3e:	d024      	beq.n	800ad8a <_ZN6tflite19GreedyMemoryPlanner20GetMaximumMemorySizeEv+0x84>
    BufferRequirements* requirements =
        &requirements_[entry->requirements_index];
 800ad40:	687b      	ldr	r3, [r7, #4]
 800ad42:	68da      	ldr	r2, [r3, #12]
 800ad44:	697b      	ldr	r3, [r7, #20]
 800ad46:	685b      	ldr	r3, [r3, #4]
 800ad48:	011b      	lsls	r3, r3, #4
    BufferRequirements* requirements =
 800ad4a:	4413      	add	r3, r2
 800ad4c:	60fb      	str	r3, [r7, #12]
    const size_t current_size = entry->offset + requirements->size;
 800ad4e:	697b      	ldr	r3, [r7, #20]
 800ad50:	681a      	ldr	r2, [r3, #0]
 800ad52:	68fb      	ldr	r3, [r7, #12]
 800ad54:	681b      	ldr	r3, [r3, #0]
 800ad56:	4413      	add	r3, r2
 800ad58:	60bb      	str	r3, [r7, #8]
    if (current_size > max_size) {
 800ad5a:	68ba      	ldr	r2, [r7, #8]
 800ad5c:	693b      	ldr	r3, [r7, #16]
 800ad5e:	429a      	cmp	r2, r3
 800ad60:	d901      	bls.n	800ad66 <_ZN6tflite19GreedyMemoryPlanner20GetMaximumMemorySizeEv+0x60>
      max_size = current_size;
 800ad62:	68bb      	ldr	r3, [r7, #8]
 800ad64:	613b      	str	r3, [r7, #16]
    }
    if (entry->next_entry_index == -1) {
 800ad66:	697b      	ldr	r3, [r7, #20]
 800ad68:	689b      	ldr	r3, [r3, #8]
 800ad6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ad6e:	d00b      	beq.n	800ad88 <_ZN6tflite19GreedyMemoryPlanner20GetMaximumMemorySizeEv+0x82>
      break;
    }
    entry = &buffers_sorted_by_offset_[entry->next_entry_index];
 800ad70:	687b      	ldr	r3, [r7, #4]
 800ad72:	699a      	ldr	r2, [r3, #24]
 800ad74:	697b      	ldr	r3, [r7, #20]
 800ad76:	689b      	ldr	r3, [r3, #8]
 800ad78:	4619      	mov	r1, r3
 800ad7a:	460b      	mov	r3, r1
 800ad7c:	005b      	lsls	r3, r3, #1
 800ad7e:	440b      	add	r3, r1
 800ad80:	009b      	lsls	r3, r3, #2
 800ad82:	4413      	add	r3, r2
 800ad84:	617b      	str	r3, [r7, #20]
  while (entry) {
 800ad86:	e7d8      	b.n	800ad3a <_ZN6tflite19GreedyMemoryPlanner20GetMaximumMemorySizeEv+0x34>
      break;
 800ad88:	bf00      	nop
  }
  return max_size;
 800ad8a:	693b      	ldr	r3, [r7, #16]
}
 800ad8c:	4618      	mov	r0, r3
 800ad8e:	3718      	adds	r7, #24
 800ad90:	46bd      	mov	sp, r7
 800ad92:	bd80      	pop	{r7, pc}

0800ad94 <_ZN6tflite19GreedyMemoryPlanner14GetBufferCountEv>:
    MicroPrintf("%s%d: %s (%dk)", t < 10 ? " " : "", t, (const char*)line,
                (memory_use + 1023) / 1024);
  }
}

int GreedyMemoryPlanner::GetBufferCount() { return buffer_count_; }
 800ad94:	b480      	push	{r7}
 800ad96:	b083      	sub	sp, #12
 800ad98:	af00      	add	r7, sp, #0
 800ad9a:	6078      	str	r0, [r7, #4]
 800ad9c:	687b      	ldr	r3, [r7, #4]
 800ad9e:	689b      	ldr	r3, [r3, #8]
 800ada0:	4618      	mov	r0, r3
 800ada2:	370c      	adds	r7, #12
 800ada4:	46bd      	mov	sp, r7
 800ada6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adaa:	4770      	bx	lr

0800adac <_ZN6tflite19GreedyMemoryPlanner18GetOffsetForBufferEPNS_13ErrorReporterEiPi>:

TfLiteStatus GreedyMemoryPlanner::GetOffsetForBuffer(
    tflite::ErrorReporter* error_reporter, int buffer_index, int* offset) {
 800adac:	b580      	push	{r7, lr}
 800adae:	b084      	sub	sp, #16
 800adb0:	af00      	add	r7, sp, #0
 800adb2:	60f8      	str	r0, [r7, #12]
 800adb4:	60b9      	str	r1, [r7, #8]
 800adb6:	607a      	str	r2, [r7, #4]
 800adb8:	603b      	str	r3, [r7, #0]
  CalculateOffsetsIfNeeded();
 800adba:	68f8      	ldr	r0, [r7, #12]
 800adbc:	f7ff fe33 	bl	800aa26 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv>
  if ((buffer_index < 0) || (buffer_index >= buffer_count_)) {
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	2b00      	cmp	r3, #0
 800adc4:	db04      	blt.n	800add0 <_ZN6tflite19GreedyMemoryPlanner18GetOffsetForBufferEPNS_13ErrorReporterEiPi+0x24>
 800adc6:	68fb      	ldr	r3, [r7, #12]
 800adc8:	689b      	ldr	r3, [r3, #8]
 800adca:	687a      	ldr	r2, [r7, #4]
 800adcc:	429a      	cmp	r2, r3
 800adce:	db08      	blt.n	800ade2 <_ZN6tflite19GreedyMemoryPlanner18GetOffsetForBufferEPNS_13ErrorReporterEiPi+0x36>
    TF_LITE_REPORT_ERROR(error_reporter,
 800add0:	68fb      	ldr	r3, [r7, #12]
 800add2:	689b      	ldr	r3, [r3, #8]
 800add4:	687a      	ldr	r2, [r7, #4]
 800add6:	4909      	ldr	r1, [pc, #36]	; (800adfc <_ZN6tflite19GreedyMemoryPlanner18GetOffsetForBufferEPNS_13ErrorReporterEiPi+0x50>)
 800add8:	68b8      	ldr	r0, [r7, #8]
 800adda:	f7f8 fedf 	bl	8003b9c <_ZN6tflite13ErrorReporter6ReportEPKcz>
                         "buffer index %d is outside range 0 to %d",
                         buffer_index, buffer_count_);
    return kTfLiteError;
 800adde:	2301      	movs	r3, #1
 800ade0:	e008      	b.n	800adf4 <_ZN6tflite19GreedyMemoryPlanner18GetOffsetForBufferEPNS_13ErrorReporterEiPi+0x48>
  }
  *offset = buffer_offsets_[buffer_index];
 800ade2:	68fb      	ldr	r3, [r7, #12]
 800ade4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ade6:	687b      	ldr	r3, [r7, #4]
 800ade8:	009b      	lsls	r3, r3, #2
 800adea:	4413      	add	r3, r2
 800adec:	681a      	ldr	r2, [r3, #0]
 800adee:	683b      	ldr	r3, [r7, #0]
 800adf0:	601a      	str	r2, [r3, #0]
  return kTfLiteOk;
 800adf2:	2300      	movs	r3, #0
}
 800adf4:	4618      	mov	r0, r3
 800adf6:	3710      	adds	r7, #16
 800adf8:	46bd      	mov	sp, r7
 800adfa:	bd80      	pop	{r7, pc}
 800adfc:	08011df4 	.word	0x08011df4

0800ae00 <_ZNK6tflite12OperatorCode23deprecated_builtin_codeEv>:
  int8_t deprecated_builtin_code() const {
 800ae00:	b580      	push	{r7, lr}
 800ae02:	b082      	sub	sp, #8
 800ae04:	af00      	add	r7, sp, #0
 800ae06:	6078      	str	r0, [r7, #4]
    return GetField<int8_t>(VT_DEPRECATED_BUILTIN_CODE, 0);
 800ae08:	687b      	ldr	r3, [r7, #4]
 800ae0a:	2200      	movs	r2, #0
 800ae0c:	2104      	movs	r1, #4
 800ae0e:	4618      	mov	r0, r3
 800ae10:	f7f9 f9a9 	bl	8004166 <_ZNK11flatbuffers5Table8GetFieldIaEET_tS2_>
 800ae14:	4603      	mov	r3, r0
  }
 800ae16:	4618      	mov	r0, r3
 800ae18:	3708      	adds	r7, #8
 800ae1a:	46bd      	mov	sp, r7
 800ae1c:	bd80      	pop	{r7, pc}

0800ae1e <_ZNK6tflite12OperatorCode12builtin_codeEv>:
  tflite::BuiltinOperator builtin_code() const {
 800ae1e:	b580      	push	{r7, lr}
 800ae20:	b082      	sub	sp, #8
 800ae22:	af00      	add	r7, sp, #0
 800ae24:	6078      	str	r0, [r7, #4]
    return static_cast<tflite::BuiltinOperator>(GetField<int32_t>(VT_BUILTIN_CODE, 0));
 800ae26:	687b      	ldr	r3, [r7, #4]
 800ae28:	2200      	movs	r2, #0
 800ae2a:	210a      	movs	r1, #10
 800ae2c:	4618      	mov	r0, r3
 800ae2e:	f7f9 f96c 	bl	800410a <_ZNK11flatbuffers5Table8GetFieldIlEET_tS2_>
 800ae32:	4603      	mov	r3, r0
 800ae34:	b2db      	uxtb	r3, r3
  }
 800ae36:	4618      	mov	r0, r3
 800ae38:	3708      	adds	r7, #8
 800ae3a:	46bd      	mov	sp, r7
 800ae3c:	bd80      	pop	{r7, pc}

0800ae3e <_ZN6tflite14GetBuiltinCodeEPKNS_12OperatorCodeE>:
// assigned to the `deprecated_builtin_code` field. In such cases, the
// value of the `builtin_code` field should be used for the builtin operator
// code. In the case, the maximum value of the two fields will be the value of
// the `builtin_code` as the right value.

BuiltinOperator GetBuiltinCode(const OperatorCode* op_code) {
 800ae3e:	b580      	push	{r7, lr}
 800ae40:	b084      	sub	sp, #16
 800ae42:	af00      	add	r7, sp, #0
 800ae44:	6078      	str	r0, [r7, #4]
  // Caller should guarantee that the given argument value is not a nullptr.
  TFLITE_DCHECK(op_code != nullptr);
 800ae46:	687b      	ldr	r3, [r7, #4]
 800ae48:	2b00      	cmp	r3, #0
 800ae4a:	d101      	bne.n	800ae50 <_ZN6tflite14GetBuiltinCodeEPKNS_12OperatorCodeE+0x12>
 800ae4c:	f000 f916 	bl	800b07c <abort>

  return std::max(
      op_code->builtin_code(),
 800ae50:	6878      	ldr	r0, [r7, #4]
 800ae52:	f7ff ffe4 	bl	800ae1e <_ZNK6tflite12OperatorCode12builtin_codeEv>
 800ae56:	4603      	mov	r3, r0
 800ae58:	73bb      	strb	r3, [r7, #14]
      static_cast<BuiltinOperator>(op_code->deprecated_builtin_code()));
 800ae5a:	6878      	ldr	r0, [r7, #4]
 800ae5c:	f7ff ffd0 	bl	800ae00 <_ZNK6tflite12OperatorCode23deprecated_builtin_codeEv>
 800ae60:	4603      	mov	r3, r0
 800ae62:	b2db      	uxtb	r3, r3
 800ae64:	73fb      	strb	r3, [r7, #15]
 800ae66:	f107 020f 	add.w	r2, r7, #15
 800ae6a:	f107 030e 	add.w	r3, r7, #14
 800ae6e:	4611      	mov	r1, r2
 800ae70:	4618      	mov	r0, r3
 800ae72:	f000 f806 	bl	800ae82 <_ZSt3maxIN6tflite15BuiltinOperatorEERKT_S4_S4_>
 800ae76:	4603      	mov	r3, r0
 800ae78:	781b      	ldrb	r3, [r3, #0]
}
 800ae7a:	4618      	mov	r0, r3
 800ae7c:	3710      	adds	r7, #16
 800ae7e:	46bd      	mov	sp, r7
 800ae80:	bd80      	pop	{r7, pc}

0800ae82 <_ZSt3maxIN6tflite15BuiltinOperatorEERKT_S4_S4_>:
    max(const _Tp& __a, const _Tp& __b)
 800ae82:	b480      	push	{r7}
 800ae84:	b083      	sub	sp, #12
 800ae86:	af00      	add	r7, sp, #0
 800ae88:	6078      	str	r0, [r7, #4]
 800ae8a:	6039      	str	r1, [r7, #0]
      if (__a < __b)
 800ae8c:	687b      	ldr	r3, [r7, #4]
 800ae8e:	781a      	ldrb	r2, [r3, #0]
 800ae90:	683b      	ldr	r3, [r7, #0]
 800ae92:	781b      	ldrb	r3, [r3, #0]
 800ae94:	429a      	cmp	r2, r3
 800ae96:	d201      	bcs.n	800ae9c <_ZSt3maxIN6tflite15BuiltinOperatorEERKT_S4_S4_+0x1a>
	return __b;
 800ae98:	683b      	ldr	r3, [r7, #0]
 800ae9a:	e000      	b.n	800ae9e <_ZSt3maxIN6tflite15BuiltinOperatorEERKT_S4_S4_+0x1c>
      return __a;
 800ae9c:	687b      	ldr	r3, [r7, #4]
    }
 800ae9e:	4618      	mov	r0, r3
 800aea0:	370c      	adds	r7, #12
 800aea2:	46bd      	mov	sp, r7
 800aea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aea8:	4770      	bx	lr

0800aeaa <_ZdlPv>:
 800aeaa:	f000 bb77 	b.w	800b59c <free>

0800aeae <_ZdlPvj>:
 800aeae:	f7ff bffc 	b.w	800aeaa <_ZdlPv>

0800aeb2 <_ZdaPv>:
 800aeb2:	f7ff bffa 	b.w	800aeaa <_ZdlPv>

0800aeb6 <__cxa_guard_acquire>:
 800aeb6:	6803      	ldr	r3, [r0, #0]
 800aeb8:	07db      	lsls	r3, r3, #31
 800aeba:	d406      	bmi.n	800aeca <__cxa_guard_acquire+0x14>
 800aebc:	7843      	ldrb	r3, [r0, #1]
 800aebe:	b103      	cbz	r3, 800aec2 <__cxa_guard_acquire+0xc>
 800aec0:	deff      	udf	#255	; 0xff
 800aec2:	2301      	movs	r3, #1
 800aec4:	7043      	strb	r3, [r0, #1]
 800aec6:	4618      	mov	r0, r3
 800aec8:	4770      	bx	lr
 800aeca:	2000      	movs	r0, #0
 800aecc:	4770      	bx	lr

0800aece <__cxa_guard_release>:
 800aece:	2301      	movs	r3, #1
 800aed0:	6003      	str	r3, [r0, #0]
 800aed2:	4770      	bx	lr

0800aed4 <_Znwj>:
 800aed4:	2801      	cmp	r0, #1
 800aed6:	bf38      	it	cc
 800aed8:	2001      	movcc	r0, #1
 800aeda:	b510      	push	{r4, lr}
 800aedc:	4604      	mov	r4, r0
 800aede:	4620      	mov	r0, r4
 800aee0:	f000 fb54 	bl	800b58c <malloc>
 800aee4:	b930      	cbnz	r0, 800aef4 <_Znwj+0x20>
 800aee6:	f000 f81d 	bl	800af24 <_ZSt15get_new_handlerv>
 800aeea:	b908      	cbnz	r0, 800aef0 <_Znwj+0x1c>
 800aeec:	f000 f8c6 	bl	800b07c <abort>
 800aef0:	4780      	blx	r0
 800aef2:	e7f4      	b.n	800aede <_Znwj+0xa>
 800aef4:	bd10      	pop	{r4, pc}

0800aef6 <_Znaj>:
 800aef6:	f7ff bfed 	b.w	800aed4 <_Znwj>

0800aefa <__cxa_pure_virtual>:
 800aefa:	b508      	push	{r3, lr}
 800aefc:	f000 f80c 	bl	800af18 <_ZSt9terminatev>

0800af00 <_ZN10__cxxabiv111__terminateEPFvvE>:
 800af00:	b508      	push	{r3, lr}
 800af02:	4780      	blx	r0
 800af04:	f000 f8ba 	bl	800b07c <abort>

0800af08 <_ZSt13get_terminatev>:
 800af08:	4b02      	ldr	r3, [pc, #8]	; (800af14 <_ZSt13get_terminatev+0xc>)
 800af0a:	6818      	ldr	r0, [r3, #0]
 800af0c:	f3bf 8f5b 	dmb	ish
 800af10:	4770      	bx	lr
 800af12:	bf00      	nop
 800af14:	2000003c 	.word	0x2000003c

0800af18 <_ZSt9terminatev>:
 800af18:	b508      	push	{r3, lr}
 800af1a:	f7ff fff5 	bl	800af08 <_ZSt13get_terminatev>
 800af1e:	f7ff ffef 	bl	800af00 <_ZN10__cxxabiv111__terminateEPFvvE>
	...

0800af24 <_ZSt15get_new_handlerv>:
 800af24:	4b02      	ldr	r3, [pc, #8]	; (800af30 <_ZSt15get_new_handlerv+0xc>)
 800af26:	6818      	ldr	r0, [r3, #0]
 800af28:	f3bf 8f5b 	dmb	ish
 800af2c:	4770      	bx	lr
 800af2e:	bf00      	nop
 800af30:	20001f94 	.word	0x20001f94

0800af34 <frexp>:
 800af34:	b570      	push	{r4, r5, r6, lr}
 800af36:	2100      	movs	r1, #0
 800af38:	ec55 4b10 	vmov	r4, r5, d0
 800af3c:	6001      	str	r1, [r0, #0]
 800af3e:	4916      	ldr	r1, [pc, #88]	; (800af98 <frexp+0x64>)
 800af40:	f025 4200 	bic.w	r2, r5, #2147483648	; 0x80000000
 800af44:	428a      	cmp	r2, r1
 800af46:	4606      	mov	r6, r0
 800af48:	462b      	mov	r3, r5
 800af4a:	dc22      	bgt.n	800af92 <frexp+0x5e>
 800af4c:	ee10 1a10 	vmov	r1, s0
 800af50:	4311      	orrs	r1, r2
 800af52:	d01e      	beq.n	800af92 <frexp+0x5e>
 800af54:	4911      	ldr	r1, [pc, #68]	; (800af9c <frexp+0x68>)
 800af56:	4029      	ands	r1, r5
 800af58:	b969      	cbnz	r1, 800af76 <frexp+0x42>
 800af5a:	4b11      	ldr	r3, [pc, #68]	; (800afa0 <frexp+0x6c>)
 800af5c:	2200      	movs	r2, #0
 800af5e:	ee10 0a10 	vmov	r0, s0
 800af62:	4629      	mov	r1, r5
 800af64:	f7f5 fb5a 	bl	800061c <__aeabi_dmul>
 800af68:	460b      	mov	r3, r1
 800af6a:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 800af6e:	f06f 0135 	mvn.w	r1, #53	; 0x35
 800af72:	4604      	mov	r4, r0
 800af74:	6031      	str	r1, [r6, #0]
 800af76:	6831      	ldr	r1, [r6, #0]
 800af78:	1512      	asrs	r2, r2, #20
 800af7a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800af7e:	f2a2 32fe 	subw	r2, r2, #1022	; 0x3fe
 800af82:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800af86:	440a      	add	r2, r1
 800af88:	f043 557f 	orr.w	r5, r3, #1069547520	; 0x3fc00000
 800af8c:	6032      	str	r2, [r6, #0]
 800af8e:	f445 1500 	orr.w	r5, r5, #2097152	; 0x200000
 800af92:	ec45 4b10 	vmov	d0, r4, r5
 800af96:	bd70      	pop	{r4, r5, r6, pc}
 800af98:	7fefffff 	.word	0x7fefffff
 800af9c:	7ff00000 	.word	0x7ff00000
 800afa0:	43500000 	.word	0x43500000

0800afa4 <round>:
 800afa4:	ec51 0b10 	vmov	r0, r1, d0
 800afa8:	b570      	push	{r4, r5, r6, lr}
 800afaa:	f3c1 550a 	ubfx	r5, r1, #20, #11
 800afae:	f2a5 34ff 	subw	r4, r5, #1023	; 0x3ff
 800afb2:	2c13      	cmp	r4, #19
 800afb4:	ee10 2a10 	vmov	r2, s0
 800afb8:	460b      	mov	r3, r1
 800afba:	dc19      	bgt.n	800aff0 <round+0x4c>
 800afbc:	2c00      	cmp	r4, #0
 800afbe:	da09      	bge.n	800afd4 <round+0x30>
 800afc0:	3401      	adds	r4, #1
 800afc2:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 800afc6:	d103      	bne.n	800afd0 <round+0x2c>
 800afc8:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800afcc:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800afd0:	2100      	movs	r1, #0
 800afd2:	e028      	b.n	800b026 <round+0x82>
 800afd4:	4d15      	ldr	r5, [pc, #84]	; (800b02c <round+0x88>)
 800afd6:	4125      	asrs	r5, r4
 800afd8:	ea01 0605 	and.w	r6, r1, r5
 800afdc:	4332      	orrs	r2, r6
 800afde:	d00e      	beq.n	800affe <round+0x5a>
 800afe0:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800afe4:	fa42 f404 	asr.w	r4, r2, r4
 800afe8:	4423      	add	r3, r4
 800afea:	ea23 0305 	bic.w	r3, r3, r5
 800afee:	e7ef      	b.n	800afd0 <round+0x2c>
 800aff0:	2c33      	cmp	r4, #51	; 0x33
 800aff2:	dd07      	ble.n	800b004 <round+0x60>
 800aff4:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 800aff8:	d101      	bne.n	800affe <round+0x5a>
 800affa:	f7f5 f959 	bl	80002b0 <__adddf3>
 800affe:	ec41 0b10 	vmov	d0, r0, r1
 800b002:	bd70      	pop	{r4, r5, r6, pc}
 800b004:	f2a5 4613 	subw	r6, r5, #1043	; 0x413
 800b008:	f04f 35ff 	mov.w	r5, #4294967295
 800b00c:	40f5      	lsrs	r5, r6
 800b00e:	4228      	tst	r0, r5
 800b010:	d0f5      	beq.n	800affe <round+0x5a>
 800b012:	2101      	movs	r1, #1
 800b014:	f1c4 0433 	rsb	r4, r4, #51	; 0x33
 800b018:	fa01 f404 	lsl.w	r4, r1, r4
 800b01c:	1912      	adds	r2, r2, r4
 800b01e:	bf28      	it	cs
 800b020:	185b      	addcs	r3, r3, r1
 800b022:	ea22 0105 	bic.w	r1, r2, r5
 800b026:	4608      	mov	r0, r1
 800b028:	4619      	mov	r1, r3
 800b02a:	e7e8      	b.n	800affe <round+0x5a>
 800b02c:	000fffff 	.word	0x000fffff

0800b030 <roundf>:
 800b030:	ee10 0a10 	vmov	r0, s0
 800b034:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 800b038:	f1a3 027f 	sub.w	r2, r3, #127	; 0x7f
 800b03c:	2a16      	cmp	r2, #22
 800b03e:	dc15      	bgt.n	800b06c <roundf+0x3c>
 800b040:	2a00      	cmp	r2, #0
 800b042:	da08      	bge.n	800b056 <roundf+0x26>
 800b044:	3201      	adds	r2, #1
 800b046:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 800b04a:	d101      	bne.n	800b050 <roundf+0x20>
 800b04c:	f043 537e 	orr.w	r3, r3, #1065353216	; 0x3f800000
 800b050:	ee00 3a10 	vmov	s0, r3
 800b054:	4770      	bx	lr
 800b056:	4908      	ldr	r1, [pc, #32]	; (800b078 <roundf+0x48>)
 800b058:	4111      	asrs	r1, r2
 800b05a:	4208      	tst	r0, r1
 800b05c:	d0fa      	beq.n	800b054 <roundf+0x24>
 800b05e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800b062:	4113      	asrs	r3, r2
 800b064:	4403      	add	r3, r0
 800b066:	ea23 0301 	bic.w	r3, r3, r1
 800b06a:	e7f1      	b.n	800b050 <roundf+0x20>
 800b06c:	2a80      	cmp	r2, #128	; 0x80
 800b06e:	d1f1      	bne.n	800b054 <roundf+0x24>
 800b070:	ee30 0a00 	vadd.f32	s0, s0, s0
 800b074:	4770      	bx	lr
 800b076:	bf00      	nop
 800b078:	007fffff 	.word	0x007fffff

0800b07c <abort>:
 800b07c:	b508      	push	{r3, lr}
 800b07e:	2006      	movs	r0, #6
 800b080:	f001 f960 	bl	800c344 <raise>
 800b084:	2001      	movs	r0, #1
 800b086:	f7f7 f895 	bl	80021b4 <_exit>
	...

0800b08c <__assert_func>:
 800b08c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b08e:	4614      	mov	r4, r2
 800b090:	461a      	mov	r2, r3
 800b092:	4b09      	ldr	r3, [pc, #36]	; (800b0b8 <__assert_func+0x2c>)
 800b094:	681b      	ldr	r3, [r3, #0]
 800b096:	4605      	mov	r5, r0
 800b098:	68d8      	ldr	r0, [r3, #12]
 800b09a:	b14c      	cbz	r4, 800b0b0 <__assert_func+0x24>
 800b09c:	4b07      	ldr	r3, [pc, #28]	; (800b0bc <__assert_func+0x30>)
 800b09e:	9100      	str	r1, [sp, #0]
 800b0a0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b0a4:	4906      	ldr	r1, [pc, #24]	; (800b0c0 <__assert_func+0x34>)
 800b0a6:	462b      	mov	r3, r5
 800b0a8:	f000 f9b2 	bl	800b410 <fiprintf>
 800b0ac:	f7ff ffe6 	bl	800b07c <abort>
 800b0b0:	4b04      	ldr	r3, [pc, #16]	; (800b0c4 <__assert_func+0x38>)
 800b0b2:	461c      	mov	r4, r3
 800b0b4:	e7f3      	b.n	800b09e <__assert_func+0x12>
 800b0b6:	bf00      	nop
 800b0b8:	20000040 	.word	0x20000040
 800b0bc:	08021c08 	.word	0x08021c08
 800b0c0:	08021c15 	.word	0x08021c15
 800b0c4:	08021c43 	.word	0x08021c43

0800b0c8 <atexit>:
 800b0c8:	2300      	movs	r3, #0
 800b0ca:	4601      	mov	r1, r0
 800b0cc:	461a      	mov	r2, r3
 800b0ce:	4618      	mov	r0, r3
 800b0d0:	f001 ba7c 	b.w	800c5cc <__register_exitproc>

0800b0d4 <__errno>:
 800b0d4:	4b01      	ldr	r3, [pc, #4]	; (800b0dc <__errno+0x8>)
 800b0d6:	6818      	ldr	r0, [r3, #0]
 800b0d8:	4770      	bx	lr
 800b0da:	bf00      	nop
 800b0dc:	20000040 	.word	0x20000040

0800b0e0 <__sflush_r>:
 800b0e0:	898a      	ldrh	r2, [r1, #12]
 800b0e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b0e6:	4605      	mov	r5, r0
 800b0e8:	0710      	lsls	r0, r2, #28
 800b0ea:	460c      	mov	r4, r1
 800b0ec:	d458      	bmi.n	800b1a0 <__sflush_r+0xc0>
 800b0ee:	684b      	ldr	r3, [r1, #4]
 800b0f0:	2b00      	cmp	r3, #0
 800b0f2:	dc05      	bgt.n	800b100 <__sflush_r+0x20>
 800b0f4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800b0f6:	2b00      	cmp	r3, #0
 800b0f8:	dc02      	bgt.n	800b100 <__sflush_r+0x20>
 800b0fa:	2000      	movs	r0, #0
 800b0fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b100:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b102:	2e00      	cmp	r6, #0
 800b104:	d0f9      	beq.n	800b0fa <__sflush_r+0x1a>
 800b106:	2300      	movs	r3, #0
 800b108:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b10c:	682f      	ldr	r7, [r5, #0]
 800b10e:	602b      	str	r3, [r5, #0]
 800b110:	d032      	beq.n	800b178 <__sflush_r+0x98>
 800b112:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b114:	89a3      	ldrh	r3, [r4, #12]
 800b116:	075a      	lsls	r2, r3, #29
 800b118:	d505      	bpl.n	800b126 <__sflush_r+0x46>
 800b11a:	6863      	ldr	r3, [r4, #4]
 800b11c:	1ac0      	subs	r0, r0, r3
 800b11e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b120:	b10b      	cbz	r3, 800b126 <__sflush_r+0x46>
 800b122:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b124:	1ac0      	subs	r0, r0, r3
 800b126:	2300      	movs	r3, #0
 800b128:	4602      	mov	r2, r0
 800b12a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b12c:	6a21      	ldr	r1, [r4, #32]
 800b12e:	4628      	mov	r0, r5
 800b130:	47b0      	blx	r6
 800b132:	1c43      	adds	r3, r0, #1
 800b134:	89a3      	ldrh	r3, [r4, #12]
 800b136:	d106      	bne.n	800b146 <__sflush_r+0x66>
 800b138:	6829      	ldr	r1, [r5, #0]
 800b13a:	291d      	cmp	r1, #29
 800b13c:	d82c      	bhi.n	800b198 <__sflush_r+0xb8>
 800b13e:	4a2a      	ldr	r2, [pc, #168]	; (800b1e8 <__sflush_r+0x108>)
 800b140:	40ca      	lsrs	r2, r1
 800b142:	07d6      	lsls	r6, r2, #31
 800b144:	d528      	bpl.n	800b198 <__sflush_r+0xb8>
 800b146:	2200      	movs	r2, #0
 800b148:	6062      	str	r2, [r4, #4]
 800b14a:	04d9      	lsls	r1, r3, #19
 800b14c:	6922      	ldr	r2, [r4, #16]
 800b14e:	6022      	str	r2, [r4, #0]
 800b150:	d504      	bpl.n	800b15c <__sflush_r+0x7c>
 800b152:	1c42      	adds	r2, r0, #1
 800b154:	d101      	bne.n	800b15a <__sflush_r+0x7a>
 800b156:	682b      	ldr	r3, [r5, #0]
 800b158:	b903      	cbnz	r3, 800b15c <__sflush_r+0x7c>
 800b15a:	6560      	str	r0, [r4, #84]	; 0x54
 800b15c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b15e:	602f      	str	r7, [r5, #0]
 800b160:	2900      	cmp	r1, #0
 800b162:	d0ca      	beq.n	800b0fa <__sflush_r+0x1a>
 800b164:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b168:	4299      	cmp	r1, r3
 800b16a:	d002      	beq.n	800b172 <__sflush_r+0x92>
 800b16c:	4628      	mov	r0, r5
 800b16e:	f000 fa43 	bl	800b5f8 <_free_r>
 800b172:	2000      	movs	r0, #0
 800b174:	6360      	str	r0, [r4, #52]	; 0x34
 800b176:	e7c1      	b.n	800b0fc <__sflush_r+0x1c>
 800b178:	6a21      	ldr	r1, [r4, #32]
 800b17a:	2301      	movs	r3, #1
 800b17c:	4628      	mov	r0, r5
 800b17e:	47b0      	blx	r6
 800b180:	1c41      	adds	r1, r0, #1
 800b182:	d1c7      	bne.n	800b114 <__sflush_r+0x34>
 800b184:	682b      	ldr	r3, [r5, #0]
 800b186:	2b00      	cmp	r3, #0
 800b188:	d0c4      	beq.n	800b114 <__sflush_r+0x34>
 800b18a:	2b1d      	cmp	r3, #29
 800b18c:	d001      	beq.n	800b192 <__sflush_r+0xb2>
 800b18e:	2b16      	cmp	r3, #22
 800b190:	d101      	bne.n	800b196 <__sflush_r+0xb6>
 800b192:	602f      	str	r7, [r5, #0]
 800b194:	e7b1      	b.n	800b0fa <__sflush_r+0x1a>
 800b196:	89a3      	ldrh	r3, [r4, #12]
 800b198:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b19c:	81a3      	strh	r3, [r4, #12]
 800b19e:	e7ad      	b.n	800b0fc <__sflush_r+0x1c>
 800b1a0:	690f      	ldr	r7, [r1, #16]
 800b1a2:	2f00      	cmp	r7, #0
 800b1a4:	d0a9      	beq.n	800b0fa <__sflush_r+0x1a>
 800b1a6:	0793      	lsls	r3, r2, #30
 800b1a8:	680e      	ldr	r6, [r1, #0]
 800b1aa:	bf08      	it	eq
 800b1ac:	694b      	ldreq	r3, [r1, #20]
 800b1ae:	600f      	str	r7, [r1, #0]
 800b1b0:	bf18      	it	ne
 800b1b2:	2300      	movne	r3, #0
 800b1b4:	eba6 0807 	sub.w	r8, r6, r7
 800b1b8:	608b      	str	r3, [r1, #8]
 800b1ba:	f1b8 0f00 	cmp.w	r8, #0
 800b1be:	dd9c      	ble.n	800b0fa <__sflush_r+0x1a>
 800b1c0:	6a21      	ldr	r1, [r4, #32]
 800b1c2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800b1c4:	4643      	mov	r3, r8
 800b1c6:	463a      	mov	r2, r7
 800b1c8:	4628      	mov	r0, r5
 800b1ca:	47b0      	blx	r6
 800b1cc:	2800      	cmp	r0, #0
 800b1ce:	dc06      	bgt.n	800b1de <__sflush_r+0xfe>
 800b1d0:	89a3      	ldrh	r3, [r4, #12]
 800b1d2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b1d6:	81a3      	strh	r3, [r4, #12]
 800b1d8:	f04f 30ff 	mov.w	r0, #4294967295
 800b1dc:	e78e      	b.n	800b0fc <__sflush_r+0x1c>
 800b1de:	4407      	add	r7, r0
 800b1e0:	eba8 0800 	sub.w	r8, r8, r0
 800b1e4:	e7e9      	b.n	800b1ba <__sflush_r+0xda>
 800b1e6:	bf00      	nop
 800b1e8:	20400001 	.word	0x20400001

0800b1ec <_fflush_r>:
 800b1ec:	b538      	push	{r3, r4, r5, lr}
 800b1ee:	690b      	ldr	r3, [r1, #16]
 800b1f0:	4605      	mov	r5, r0
 800b1f2:	460c      	mov	r4, r1
 800b1f4:	b913      	cbnz	r3, 800b1fc <_fflush_r+0x10>
 800b1f6:	2500      	movs	r5, #0
 800b1f8:	4628      	mov	r0, r5
 800b1fa:	bd38      	pop	{r3, r4, r5, pc}
 800b1fc:	b118      	cbz	r0, 800b206 <_fflush_r+0x1a>
 800b1fe:	6983      	ldr	r3, [r0, #24]
 800b200:	b90b      	cbnz	r3, 800b206 <_fflush_r+0x1a>
 800b202:	f000 f887 	bl	800b314 <__sinit>
 800b206:	4b14      	ldr	r3, [pc, #80]	; (800b258 <_fflush_r+0x6c>)
 800b208:	429c      	cmp	r4, r3
 800b20a:	d11b      	bne.n	800b244 <_fflush_r+0x58>
 800b20c:	686c      	ldr	r4, [r5, #4]
 800b20e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b212:	2b00      	cmp	r3, #0
 800b214:	d0ef      	beq.n	800b1f6 <_fflush_r+0xa>
 800b216:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b218:	07d0      	lsls	r0, r2, #31
 800b21a:	d404      	bmi.n	800b226 <_fflush_r+0x3a>
 800b21c:	0599      	lsls	r1, r3, #22
 800b21e:	d402      	bmi.n	800b226 <_fflush_r+0x3a>
 800b220:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b222:	f000 f94c 	bl	800b4be <__retarget_lock_acquire_recursive>
 800b226:	4628      	mov	r0, r5
 800b228:	4621      	mov	r1, r4
 800b22a:	f7ff ff59 	bl	800b0e0 <__sflush_r>
 800b22e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b230:	07da      	lsls	r2, r3, #31
 800b232:	4605      	mov	r5, r0
 800b234:	d4e0      	bmi.n	800b1f8 <_fflush_r+0xc>
 800b236:	89a3      	ldrh	r3, [r4, #12]
 800b238:	059b      	lsls	r3, r3, #22
 800b23a:	d4dd      	bmi.n	800b1f8 <_fflush_r+0xc>
 800b23c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b23e:	f000 f940 	bl	800b4c2 <__retarget_lock_release_recursive>
 800b242:	e7d9      	b.n	800b1f8 <_fflush_r+0xc>
 800b244:	4b05      	ldr	r3, [pc, #20]	; (800b25c <_fflush_r+0x70>)
 800b246:	429c      	cmp	r4, r3
 800b248:	d101      	bne.n	800b24e <_fflush_r+0x62>
 800b24a:	68ac      	ldr	r4, [r5, #8]
 800b24c:	e7df      	b.n	800b20e <_fflush_r+0x22>
 800b24e:	4b04      	ldr	r3, [pc, #16]	; (800b260 <_fflush_r+0x74>)
 800b250:	429c      	cmp	r4, r3
 800b252:	bf08      	it	eq
 800b254:	68ec      	ldreq	r4, [r5, #12]
 800b256:	e7da      	b.n	800b20e <_fflush_r+0x22>
 800b258:	08021c64 	.word	0x08021c64
 800b25c:	08021c84 	.word	0x08021c84
 800b260:	08021c44 	.word	0x08021c44

0800b264 <std>:
 800b264:	2300      	movs	r3, #0
 800b266:	b510      	push	{r4, lr}
 800b268:	4604      	mov	r4, r0
 800b26a:	e9c0 3300 	strd	r3, r3, [r0]
 800b26e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b272:	6083      	str	r3, [r0, #8]
 800b274:	8181      	strh	r1, [r0, #12]
 800b276:	6643      	str	r3, [r0, #100]	; 0x64
 800b278:	81c2      	strh	r2, [r0, #14]
 800b27a:	6183      	str	r3, [r0, #24]
 800b27c:	4619      	mov	r1, r3
 800b27e:	2208      	movs	r2, #8
 800b280:	305c      	adds	r0, #92	; 0x5c
 800b282:	f000 f9a1 	bl	800b5c8 <memset>
 800b286:	4b05      	ldr	r3, [pc, #20]	; (800b29c <std+0x38>)
 800b288:	6263      	str	r3, [r4, #36]	; 0x24
 800b28a:	4b05      	ldr	r3, [pc, #20]	; (800b2a0 <std+0x3c>)
 800b28c:	62a3      	str	r3, [r4, #40]	; 0x28
 800b28e:	4b05      	ldr	r3, [pc, #20]	; (800b2a4 <std+0x40>)
 800b290:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b292:	4b05      	ldr	r3, [pc, #20]	; (800b2a8 <std+0x44>)
 800b294:	6224      	str	r4, [r4, #32]
 800b296:	6323      	str	r3, [r4, #48]	; 0x30
 800b298:	bd10      	pop	{r4, pc}
 800b29a:	bf00      	nop
 800b29c:	0800c37d 	.word	0x0800c37d
 800b2a0:	0800c39f 	.word	0x0800c39f
 800b2a4:	0800c3d7 	.word	0x0800c3d7
 800b2a8:	0800c3fb 	.word	0x0800c3fb

0800b2ac <_cleanup_r>:
 800b2ac:	4901      	ldr	r1, [pc, #4]	; (800b2b4 <_cleanup_r+0x8>)
 800b2ae:	f000 b8c1 	b.w	800b434 <_fwalk_reent>
 800b2b2:	bf00      	nop
 800b2b4:	0800b1ed 	.word	0x0800b1ed

0800b2b8 <__sfmoreglue>:
 800b2b8:	b570      	push	{r4, r5, r6, lr}
 800b2ba:	1e4a      	subs	r2, r1, #1
 800b2bc:	2568      	movs	r5, #104	; 0x68
 800b2be:	4355      	muls	r5, r2
 800b2c0:	460e      	mov	r6, r1
 800b2c2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800b2c6:	f000 f9e7 	bl	800b698 <_malloc_r>
 800b2ca:	4604      	mov	r4, r0
 800b2cc:	b140      	cbz	r0, 800b2e0 <__sfmoreglue+0x28>
 800b2ce:	2100      	movs	r1, #0
 800b2d0:	e9c0 1600 	strd	r1, r6, [r0]
 800b2d4:	300c      	adds	r0, #12
 800b2d6:	60a0      	str	r0, [r4, #8]
 800b2d8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800b2dc:	f000 f974 	bl	800b5c8 <memset>
 800b2e0:	4620      	mov	r0, r4
 800b2e2:	bd70      	pop	{r4, r5, r6, pc}

0800b2e4 <__sfp_lock_acquire>:
 800b2e4:	4801      	ldr	r0, [pc, #4]	; (800b2ec <__sfp_lock_acquire+0x8>)
 800b2e6:	f000 b8ea 	b.w	800b4be <__retarget_lock_acquire_recursive>
 800b2ea:	bf00      	nop
 800b2ec:	20002038 	.word	0x20002038

0800b2f0 <__sfp_lock_release>:
 800b2f0:	4801      	ldr	r0, [pc, #4]	; (800b2f8 <__sfp_lock_release+0x8>)
 800b2f2:	f000 b8e6 	b.w	800b4c2 <__retarget_lock_release_recursive>
 800b2f6:	bf00      	nop
 800b2f8:	20002038 	.word	0x20002038

0800b2fc <__sinit_lock_acquire>:
 800b2fc:	4801      	ldr	r0, [pc, #4]	; (800b304 <__sinit_lock_acquire+0x8>)
 800b2fe:	f000 b8de 	b.w	800b4be <__retarget_lock_acquire_recursive>
 800b302:	bf00      	nop
 800b304:	20002037 	.word	0x20002037

0800b308 <__sinit_lock_release>:
 800b308:	4801      	ldr	r0, [pc, #4]	; (800b310 <__sinit_lock_release+0x8>)
 800b30a:	f000 b8da 	b.w	800b4c2 <__retarget_lock_release_recursive>
 800b30e:	bf00      	nop
 800b310:	20002037 	.word	0x20002037

0800b314 <__sinit>:
 800b314:	b510      	push	{r4, lr}
 800b316:	4604      	mov	r4, r0
 800b318:	f7ff fff0 	bl	800b2fc <__sinit_lock_acquire>
 800b31c:	69a3      	ldr	r3, [r4, #24]
 800b31e:	b11b      	cbz	r3, 800b328 <__sinit+0x14>
 800b320:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b324:	f7ff bff0 	b.w	800b308 <__sinit_lock_release>
 800b328:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800b32c:	6523      	str	r3, [r4, #80]	; 0x50
 800b32e:	4b13      	ldr	r3, [pc, #76]	; (800b37c <__sinit+0x68>)
 800b330:	4a13      	ldr	r2, [pc, #76]	; (800b380 <__sinit+0x6c>)
 800b332:	681b      	ldr	r3, [r3, #0]
 800b334:	62a2      	str	r2, [r4, #40]	; 0x28
 800b336:	42a3      	cmp	r3, r4
 800b338:	bf04      	itt	eq
 800b33a:	2301      	moveq	r3, #1
 800b33c:	61a3      	streq	r3, [r4, #24]
 800b33e:	4620      	mov	r0, r4
 800b340:	f000 f820 	bl	800b384 <__sfp>
 800b344:	6060      	str	r0, [r4, #4]
 800b346:	4620      	mov	r0, r4
 800b348:	f000 f81c 	bl	800b384 <__sfp>
 800b34c:	60a0      	str	r0, [r4, #8]
 800b34e:	4620      	mov	r0, r4
 800b350:	f000 f818 	bl	800b384 <__sfp>
 800b354:	2200      	movs	r2, #0
 800b356:	60e0      	str	r0, [r4, #12]
 800b358:	2104      	movs	r1, #4
 800b35a:	6860      	ldr	r0, [r4, #4]
 800b35c:	f7ff ff82 	bl	800b264 <std>
 800b360:	68a0      	ldr	r0, [r4, #8]
 800b362:	2201      	movs	r2, #1
 800b364:	2109      	movs	r1, #9
 800b366:	f7ff ff7d 	bl	800b264 <std>
 800b36a:	68e0      	ldr	r0, [r4, #12]
 800b36c:	2202      	movs	r2, #2
 800b36e:	2112      	movs	r1, #18
 800b370:	f7ff ff78 	bl	800b264 <std>
 800b374:	2301      	movs	r3, #1
 800b376:	61a3      	str	r3, [r4, #24]
 800b378:	e7d2      	b.n	800b320 <__sinit+0xc>
 800b37a:	bf00      	nop
 800b37c:	08021ca4 	.word	0x08021ca4
 800b380:	0800b2ad 	.word	0x0800b2ad

0800b384 <__sfp>:
 800b384:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b386:	4607      	mov	r7, r0
 800b388:	f7ff ffac 	bl	800b2e4 <__sfp_lock_acquire>
 800b38c:	4b1e      	ldr	r3, [pc, #120]	; (800b408 <__sfp+0x84>)
 800b38e:	681e      	ldr	r6, [r3, #0]
 800b390:	69b3      	ldr	r3, [r6, #24]
 800b392:	b913      	cbnz	r3, 800b39a <__sfp+0x16>
 800b394:	4630      	mov	r0, r6
 800b396:	f7ff ffbd 	bl	800b314 <__sinit>
 800b39a:	3648      	adds	r6, #72	; 0x48
 800b39c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800b3a0:	3b01      	subs	r3, #1
 800b3a2:	d503      	bpl.n	800b3ac <__sfp+0x28>
 800b3a4:	6833      	ldr	r3, [r6, #0]
 800b3a6:	b30b      	cbz	r3, 800b3ec <__sfp+0x68>
 800b3a8:	6836      	ldr	r6, [r6, #0]
 800b3aa:	e7f7      	b.n	800b39c <__sfp+0x18>
 800b3ac:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800b3b0:	b9d5      	cbnz	r5, 800b3e8 <__sfp+0x64>
 800b3b2:	4b16      	ldr	r3, [pc, #88]	; (800b40c <__sfp+0x88>)
 800b3b4:	60e3      	str	r3, [r4, #12]
 800b3b6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800b3ba:	6665      	str	r5, [r4, #100]	; 0x64
 800b3bc:	f000 f87e 	bl	800b4bc <__retarget_lock_init_recursive>
 800b3c0:	f7ff ff96 	bl	800b2f0 <__sfp_lock_release>
 800b3c4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800b3c8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800b3cc:	6025      	str	r5, [r4, #0]
 800b3ce:	61a5      	str	r5, [r4, #24]
 800b3d0:	2208      	movs	r2, #8
 800b3d2:	4629      	mov	r1, r5
 800b3d4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800b3d8:	f000 f8f6 	bl	800b5c8 <memset>
 800b3dc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800b3e0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800b3e4:	4620      	mov	r0, r4
 800b3e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b3e8:	3468      	adds	r4, #104	; 0x68
 800b3ea:	e7d9      	b.n	800b3a0 <__sfp+0x1c>
 800b3ec:	2104      	movs	r1, #4
 800b3ee:	4638      	mov	r0, r7
 800b3f0:	f7ff ff62 	bl	800b2b8 <__sfmoreglue>
 800b3f4:	4604      	mov	r4, r0
 800b3f6:	6030      	str	r0, [r6, #0]
 800b3f8:	2800      	cmp	r0, #0
 800b3fa:	d1d5      	bne.n	800b3a8 <__sfp+0x24>
 800b3fc:	f7ff ff78 	bl	800b2f0 <__sfp_lock_release>
 800b400:	230c      	movs	r3, #12
 800b402:	603b      	str	r3, [r7, #0]
 800b404:	e7ee      	b.n	800b3e4 <__sfp+0x60>
 800b406:	bf00      	nop
 800b408:	08021ca4 	.word	0x08021ca4
 800b40c:	ffff0001 	.word	0xffff0001

0800b410 <fiprintf>:
 800b410:	b40e      	push	{r1, r2, r3}
 800b412:	b503      	push	{r0, r1, lr}
 800b414:	4601      	mov	r1, r0
 800b416:	ab03      	add	r3, sp, #12
 800b418:	4805      	ldr	r0, [pc, #20]	; (800b430 <fiprintf+0x20>)
 800b41a:	f853 2b04 	ldr.w	r2, [r3], #4
 800b41e:	6800      	ldr	r0, [r0, #0]
 800b420:	9301      	str	r3, [sp, #4]
 800b422:	f000 f9bd 	bl	800b7a0 <_vfiprintf_r>
 800b426:	b002      	add	sp, #8
 800b428:	f85d eb04 	ldr.w	lr, [sp], #4
 800b42c:	b003      	add	sp, #12
 800b42e:	4770      	bx	lr
 800b430:	20000040 	.word	0x20000040

0800b434 <_fwalk_reent>:
 800b434:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b438:	4606      	mov	r6, r0
 800b43a:	4688      	mov	r8, r1
 800b43c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800b440:	2700      	movs	r7, #0
 800b442:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b446:	f1b9 0901 	subs.w	r9, r9, #1
 800b44a:	d505      	bpl.n	800b458 <_fwalk_reent+0x24>
 800b44c:	6824      	ldr	r4, [r4, #0]
 800b44e:	2c00      	cmp	r4, #0
 800b450:	d1f7      	bne.n	800b442 <_fwalk_reent+0xe>
 800b452:	4638      	mov	r0, r7
 800b454:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b458:	89ab      	ldrh	r3, [r5, #12]
 800b45a:	2b01      	cmp	r3, #1
 800b45c:	d907      	bls.n	800b46e <_fwalk_reent+0x3a>
 800b45e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b462:	3301      	adds	r3, #1
 800b464:	d003      	beq.n	800b46e <_fwalk_reent+0x3a>
 800b466:	4629      	mov	r1, r5
 800b468:	4630      	mov	r0, r6
 800b46a:	47c0      	blx	r8
 800b46c:	4307      	orrs	r7, r0
 800b46e:	3568      	adds	r5, #104	; 0x68
 800b470:	e7e9      	b.n	800b446 <_fwalk_reent+0x12>
	...

0800b474 <__libc_init_array>:
 800b474:	b570      	push	{r4, r5, r6, lr}
 800b476:	4d0d      	ldr	r5, [pc, #52]	; (800b4ac <__libc_init_array+0x38>)
 800b478:	4c0d      	ldr	r4, [pc, #52]	; (800b4b0 <__libc_init_array+0x3c>)
 800b47a:	1b64      	subs	r4, r4, r5
 800b47c:	10a4      	asrs	r4, r4, #2
 800b47e:	2600      	movs	r6, #0
 800b480:	42a6      	cmp	r6, r4
 800b482:	d109      	bne.n	800b498 <__libc_init_array+0x24>
 800b484:	4d0b      	ldr	r5, [pc, #44]	; (800b4b4 <__libc_init_array+0x40>)
 800b486:	4c0c      	ldr	r4, [pc, #48]	; (800b4b8 <__libc_init_array+0x44>)
 800b488:	f002 fb7e 	bl	800db88 <_init>
 800b48c:	1b64      	subs	r4, r4, r5
 800b48e:	10a4      	asrs	r4, r4, #2
 800b490:	2600      	movs	r6, #0
 800b492:	42a6      	cmp	r6, r4
 800b494:	d105      	bne.n	800b4a2 <__libc_init_array+0x2e>
 800b496:	bd70      	pop	{r4, r5, r6, pc}
 800b498:	f855 3b04 	ldr.w	r3, [r5], #4
 800b49c:	4798      	blx	r3
 800b49e:	3601      	adds	r6, #1
 800b4a0:	e7ee      	b.n	800b480 <__libc_init_array+0xc>
 800b4a2:	f855 3b04 	ldr.w	r3, [r5], #4
 800b4a6:	4798      	blx	r3
 800b4a8:	3601      	adds	r6, #1
 800b4aa:	e7f2      	b.n	800b492 <__libc_init_array+0x1e>
 800b4ac:	08021ff8 	.word	0x08021ff8
 800b4b0:	08021ff8 	.word	0x08021ff8
 800b4b4:	08021ff8 	.word	0x08021ff8
 800b4b8:	08021ffc 	.word	0x08021ffc

0800b4bc <__retarget_lock_init_recursive>:
 800b4bc:	4770      	bx	lr

0800b4be <__retarget_lock_acquire_recursive>:
 800b4be:	4770      	bx	lr

0800b4c0 <__retarget_lock_release>:
 800b4c0:	4770      	bx	lr

0800b4c2 <__retarget_lock_release_recursive>:
 800b4c2:	4770      	bx	lr

0800b4c4 <__swhatbuf_r>:
 800b4c4:	b570      	push	{r4, r5, r6, lr}
 800b4c6:	460e      	mov	r6, r1
 800b4c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b4cc:	2900      	cmp	r1, #0
 800b4ce:	b096      	sub	sp, #88	; 0x58
 800b4d0:	4614      	mov	r4, r2
 800b4d2:	461d      	mov	r5, r3
 800b4d4:	da07      	bge.n	800b4e6 <__swhatbuf_r+0x22>
 800b4d6:	2300      	movs	r3, #0
 800b4d8:	602b      	str	r3, [r5, #0]
 800b4da:	89b3      	ldrh	r3, [r6, #12]
 800b4dc:	061a      	lsls	r2, r3, #24
 800b4de:	d410      	bmi.n	800b502 <__swhatbuf_r+0x3e>
 800b4e0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b4e4:	e00e      	b.n	800b504 <__swhatbuf_r+0x40>
 800b4e6:	466a      	mov	r2, sp
 800b4e8:	f001 ff5a 	bl	800d3a0 <_fstat_r>
 800b4ec:	2800      	cmp	r0, #0
 800b4ee:	dbf2      	blt.n	800b4d6 <__swhatbuf_r+0x12>
 800b4f0:	9a01      	ldr	r2, [sp, #4]
 800b4f2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800b4f6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800b4fa:	425a      	negs	r2, r3
 800b4fc:	415a      	adcs	r2, r3
 800b4fe:	602a      	str	r2, [r5, #0]
 800b500:	e7ee      	b.n	800b4e0 <__swhatbuf_r+0x1c>
 800b502:	2340      	movs	r3, #64	; 0x40
 800b504:	2000      	movs	r0, #0
 800b506:	6023      	str	r3, [r4, #0]
 800b508:	b016      	add	sp, #88	; 0x58
 800b50a:	bd70      	pop	{r4, r5, r6, pc}

0800b50c <__smakebuf_r>:
 800b50c:	898b      	ldrh	r3, [r1, #12]
 800b50e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b510:	079d      	lsls	r5, r3, #30
 800b512:	4606      	mov	r6, r0
 800b514:	460c      	mov	r4, r1
 800b516:	d507      	bpl.n	800b528 <__smakebuf_r+0x1c>
 800b518:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b51c:	6023      	str	r3, [r4, #0]
 800b51e:	6123      	str	r3, [r4, #16]
 800b520:	2301      	movs	r3, #1
 800b522:	6163      	str	r3, [r4, #20]
 800b524:	b002      	add	sp, #8
 800b526:	bd70      	pop	{r4, r5, r6, pc}
 800b528:	ab01      	add	r3, sp, #4
 800b52a:	466a      	mov	r2, sp
 800b52c:	f7ff ffca 	bl	800b4c4 <__swhatbuf_r>
 800b530:	9900      	ldr	r1, [sp, #0]
 800b532:	4605      	mov	r5, r0
 800b534:	4630      	mov	r0, r6
 800b536:	f000 f8af 	bl	800b698 <_malloc_r>
 800b53a:	b948      	cbnz	r0, 800b550 <__smakebuf_r+0x44>
 800b53c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b540:	059a      	lsls	r2, r3, #22
 800b542:	d4ef      	bmi.n	800b524 <__smakebuf_r+0x18>
 800b544:	f023 0303 	bic.w	r3, r3, #3
 800b548:	f043 0302 	orr.w	r3, r3, #2
 800b54c:	81a3      	strh	r3, [r4, #12]
 800b54e:	e7e3      	b.n	800b518 <__smakebuf_r+0xc>
 800b550:	4b0d      	ldr	r3, [pc, #52]	; (800b588 <__smakebuf_r+0x7c>)
 800b552:	62b3      	str	r3, [r6, #40]	; 0x28
 800b554:	89a3      	ldrh	r3, [r4, #12]
 800b556:	6020      	str	r0, [r4, #0]
 800b558:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b55c:	81a3      	strh	r3, [r4, #12]
 800b55e:	9b00      	ldr	r3, [sp, #0]
 800b560:	6163      	str	r3, [r4, #20]
 800b562:	9b01      	ldr	r3, [sp, #4]
 800b564:	6120      	str	r0, [r4, #16]
 800b566:	b15b      	cbz	r3, 800b580 <__smakebuf_r+0x74>
 800b568:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b56c:	4630      	mov	r0, r6
 800b56e:	f001 ff29 	bl	800d3c4 <_isatty_r>
 800b572:	b128      	cbz	r0, 800b580 <__smakebuf_r+0x74>
 800b574:	89a3      	ldrh	r3, [r4, #12]
 800b576:	f023 0303 	bic.w	r3, r3, #3
 800b57a:	f043 0301 	orr.w	r3, r3, #1
 800b57e:	81a3      	strh	r3, [r4, #12]
 800b580:	89a0      	ldrh	r0, [r4, #12]
 800b582:	4305      	orrs	r5, r0
 800b584:	81a5      	strh	r5, [r4, #12]
 800b586:	e7cd      	b.n	800b524 <__smakebuf_r+0x18>
 800b588:	0800b2ad 	.word	0x0800b2ad

0800b58c <malloc>:
 800b58c:	4b02      	ldr	r3, [pc, #8]	; (800b598 <malloc+0xc>)
 800b58e:	4601      	mov	r1, r0
 800b590:	6818      	ldr	r0, [r3, #0]
 800b592:	f000 b881 	b.w	800b698 <_malloc_r>
 800b596:	bf00      	nop
 800b598:	20000040 	.word	0x20000040

0800b59c <free>:
 800b59c:	4b02      	ldr	r3, [pc, #8]	; (800b5a8 <free+0xc>)
 800b59e:	4601      	mov	r1, r0
 800b5a0:	6818      	ldr	r0, [r3, #0]
 800b5a2:	f000 b829 	b.w	800b5f8 <_free_r>
 800b5a6:	bf00      	nop
 800b5a8:	20000040 	.word	0x20000040

0800b5ac <memcpy>:
 800b5ac:	440a      	add	r2, r1
 800b5ae:	4291      	cmp	r1, r2
 800b5b0:	f100 33ff 	add.w	r3, r0, #4294967295
 800b5b4:	d100      	bne.n	800b5b8 <memcpy+0xc>
 800b5b6:	4770      	bx	lr
 800b5b8:	b510      	push	{r4, lr}
 800b5ba:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b5be:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b5c2:	4291      	cmp	r1, r2
 800b5c4:	d1f9      	bne.n	800b5ba <memcpy+0xe>
 800b5c6:	bd10      	pop	{r4, pc}

0800b5c8 <memset>:
 800b5c8:	4402      	add	r2, r0
 800b5ca:	4603      	mov	r3, r0
 800b5cc:	4293      	cmp	r3, r2
 800b5ce:	d100      	bne.n	800b5d2 <memset+0xa>
 800b5d0:	4770      	bx	lr
 800b5d2:	f803 1b01 	strb.w	r1, [r3], #1
 800b5d6:	e7f9      	b.n	800b5cc <memset+0x4>

0800b5d8 <_calloc_r>:
 800b5d8:	b513      	push	{r0, r1, r4, lr}
 800b5da:	434a      	muls	r2, r1
 800b5dc:	4611      	mov	r1, r2
 800b5de:	9201      	str	r2, [sp, #4]
 800b5e0:	f000 f85a 	bl	800b698 <_malloc_r>
 800b5e4:	4604      	mov	r4, r0
 800b5e6:	b118      	cbz	r0, 800b5f0 <_calloc_r+0x18>
 800b5e8:	9a01      	ldr	r2, [sp, #4]
 800b5ea:	2100      	movs	r1, #0
 800b5ec:	f7ff ffec 	bl	800b5c8 <memset>
 800b5f0:	4620      	mov	r0, r4
 800b5f2:	b002      	add	sp, #8
 800b5f4:	bd10      	pop	{r4, pc}
	...

0800b5f8 <_free_r>:
 800b5f8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b5fa:	2900      	cmp	r1, #0
 800b5fc:	d048      	beq.n	800b690 <_free_r+0x98>
 800b5fe:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b602:	9001      	str	r0, [sp, #4]
 800b604:	2b00      	cmp	r3, #0
 800b606:	f1a1 0404 	sub.w	r4, r1, #4
 800b60a:	bfb8      	it	lt
 800b60c:	18e4      	addlt	r4, r4, r3
 800b60e:	f001 feff 	bl	800d410 <__malloc_lock>
 800b612:	4a20      	ldr	r2, [pc, #128]	; (800b694 <_free_r+0x9c>)
 800b614:	9801      	ldr	r0, [sp, #4]
 800b616:	6813      	ldr	r3, [r2, #0]
 800b618:	4615      	mov	r5, r2
 800b61a:	b933      	cbnz	r3, 800b62a <_free_r+0x32>
 800b61c:	6063      	str	r3, [r4, #4]
 800b61e:	6014      	str	r4, [r2, #0]
 800b620:	b003      	add	sp, #12
 800b622:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b626:	f001 bef9 	b.w	800d41c <__malloc_unlock>
 800b62a:	42a3      	cmp	r3, r4
 800b62c:	d90b      	bls.n	800b646 <_free_r+0x4e>
 800b62e:	6821      	ldr	r1, [r4, #0]
 800b630:	1862      	adds	r2, r4, r1
 800b632:	4293      	cmp	r3, r2
 800b634:	bf04      	itt	eq
 800b636:	681a      	ldreq	r2, [r3, #0]
 800b638:	685b      	ldreq	r3, [r3, #4]
 800b63a:	6063      	str	r3, [r4, #4]
 800b63c:	bf04      	itt	eq
 800b63e:	1852      	addeq	r2, r2, r1
 800b640:	6022      	streq	r2, [r4, #0]
 800b642:	602c      	str	r4, [r5, #0]
 800b644:	e7ec      	b.n	800b620 <_free_r+0x28>
 800b646:	461a      	mov	r2, r3
 800b648:	685b      	ldr	r3, [r3, #4]
 800b64a:	b10b      	cbz	r3, 800b650 <_free_r+0x58>
 800b64c:	42a3      	cmp	r3, r4
 800b64e:	d9fa      	bls.n	800b646 <_free_r+0x4e>
 800b650:	6811      	ldr	r1, [r2, #0]
 800b652:	1855      	adds	r5, r2, r1
 800b654:	42a5      	cmp	r5, r4
 800b656:	d10b      	bne.n	800b670 <_free_r+0x78>
 800b658:	6824      	ldr	r4, [r4, #0]
 800b65a:	4421      	add	r1, r4
 800b65c:	1854      	adds	r4, r2, r1
 800b65e:	42a3      	cmp	r3, r4
 800b660:	6011      	str	r1, [r2, #0]
 800b662:	d1dd      	bne.n	800b620 <_free_r+0x28>
 800b664:	681c      	ldr	r4, [r3, #0]
 800b666:	685b      	ldr	r3, [r3, #4]
 800b668:	6053      	str	r3, [r2, #4]
 800b66a:	4421      	add	r1, r4
 800b66c:	6011      	str	r1, [r2, #0]
 800b66e:	e7d7      	b.n	800b620 <_free_r+0x28>
 800b670:	d902      	bls.n	800b678 <_free_r+0x80>
 800b672:	230c      	movs	r3, #12
 800b674:	6003      	str	r3, [r0, #0]
 800b676:	e7d3      	b.n	800b620 <_free_r+0x28>
 800b678:	6825      	ldr	r5, [r4, #0]
 800b67a:	1961      	adds	r1, r4, r5
 800b67c:	428b      	cmp	r3, r1
 800b67e:	bf04      	itt	eq
 800b680:	6819      	ldreq	r1, [r3, #0]
 800b682:	685b      	ldreq	r3, [r3, #4]
 800b684:	6063      	str	r3, [r4, #4]
 800b686:	bf04      	itt	eq
 800b688:	1949      	addeq	r1, r1, r5
 800b68a:	6021      	streq	r1, [r4, #0]
 800b68c:	6054      	str	r4, [r2, #4]
 800b68e:	e7c7      	b.n	800b620 <_free_r+0x28>
 800b690:	b003      	add	sp, #12
 800b692:	bd30      	pop	{r4, r5, pc}
 800b694:	20001f98 	.word	0x20001f98

0800b698 <_malloc_r>:
 800b698:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b69a:	1ccd      	adds	r5, r1, #3
 800b69c:	f025 0503 	bic.w	r5, r5, #3
 800b6a0:	3508      	adds	r5, #8
 800b6a2:	2d0c      	cmp	r5, #12
 800b6a4:	bf38      	it	cc
 800b6a6:	250c      	movcc	r5, #12
 800b6a8:	2d00      	cmp	r5, #0
 800b6aa:	4606      	mov	r6, r0
 800b6ac:	db01      	blt.n	800b6b2 <_malloc_r+0x1a>
 800b6ae:	42a9      	cmp	r1, r5
 800b6b0:	d903      	bls.n	800b6ba <_malloc_r+0x22>
 800b6b2:	230c      	movs	r3, #12
 800b6b4:	6033      	str	r3, [r6, #0]
 800b6b6:	2000      	movs	r0, #0
 800b6b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b6ba:	f001 fea9 	bl	800d410 <__malloc_lock>
 800b6be:	4921      	ldr	r1, [pc, #132]	; (800b744 <_malloc_r+0xac>)
 800b6c0:	680a      	ldr	r2, [r1, #0]
 800b6c2:	4614      	mov	r4, r2
 800b6c4:	b99c      	cbnz	r4, 800b6ee <_malloc_r+0x56>
 800b6c6:	4f20      	ldr	r7, [pc, #128]	; (800b748 <_malloc_r+0xb0>)
 800b6c8:	683b      	ldr	r3, [r7, #0]
 800b6ca:	b923      	cbnz	r3, 800b6d6 <_malloc_r+0x3e>
 800b6cc:	4621      	mov	r1, r4
 800b6ce:	4630      	mov	r0, r6
 800b6d0:	f000 fe00 	bl	800c2d4 <_sbrk_r>
 800b6d4:	6038      	str	r0, [r7, #0]
 800b6d6:	4629      	mov	r1, r5
 800b6d8:	4630      	mov	r0, r6
 800b6da:	f000 fdfb 	bl	800c2d4 <_sbrk_r>
 800b6de:	1c43      	adds	r3, r0, #1
 800b6e0:	d123      	bne.n	800b72a <_malloc_r+0x92>
 800b6e2:	230c      	movs	r3, #12
 800b6e4:	6033      	str	r3, [r6, #0]
 800b6e6:	4630      	mov	r0, r6
 800b6e8:	f001 fe98 	bl	800d41c <__malloc_unlock>
 800b6ec:	e7e3      	b.n	800b6b6 <_malloc_r+0x1e>
 800b6ee:	6823      	ldr	r3, [r4, #0]
 800b6f0:	1b5b      	subs	r3, r3, r5
 800b6f2:	d417      	bmi.n	800b724 <_malloc_r+0x8c>
 800b6f4:	2b0b      	cmp	r3, #11
 800b6f6:	d903      	bls.n	800b700 <_malloc_r+0x68>
 800b6f8:	6023      	str	r3, [r4, #0]
 800b6fa:	441c      	add	r4, r3
 800b6fc:	6025      	str	r5, [r4, #0]
 800b6fe:	e004      	b.n	800b70a <_malloc_r+0x72>
 800b700:	6863      	ldr	r3, [r4, #4]
 800b702:	42a2      	cmp	r2, r4
 800b704:	bf0c      	ite	eq
 800b706:	600b      	streq	r3, [r1, #0]
 800b708:	6053      	strne	r3, [r2, #4]
 800b70a:	4630      	mov	r0, r6
 800b70c:	f001 fe86 	bl	800d41c <__malloc_unlock>
 800b710:	f104 000b 	add.w	r0, r4, #11
 800b714:	1d23      	adds	r3, r4, #4
 800b716:	f020 0007 	bic.w	r0, r0, #7
 800b71a:	1ac2      	subs	r2, r0, r3
 800b71c:	d0cc      	beq.n	800b6b8 <_malloc_r+0x20>
 800b71e:	1a1b      	subs	r3, r3, r0
 800b720:	50a3      	str	r3, [r4, r2]
 800b722:	e7c9      	b.n	800b6b8 <_malloc_r+0x20>
 800b724:	4622      	mov	r2, r4
 800b726:	6864      	ldr	r4, [r4, #4]
 800b728:	e7cc      	b.n	800b6c4 <_malloc_r+0x2c>
 800b72a:	1cc4      	adds	r4, r0, #3
 800b72c:	f024 0403 	bic.w	r4, r4, #3
 800b730:	42a0      	cmp	r0, r4
 800b732:	d0e3      	beq.n	800b6fc <_malloc_r+0x64>
 800b734:	1a21      	subs	r1, r4, r0
 800b736:	4630      	mov	r0, r6
 800b738:	f000 fdcc 	bl	800c2d4 <_sbrk_r>
 800b73c:	3001      	adds	r0, #1
 800b73e:	d1dd      	bne.n	800b6fc <_malloc_r+0x64>
 800b740:	e7cf      	b.n	800b6e2 <_malloc_r+0x4a>
 800b742:	bf00      	nop
 800b744:	20001f98 	.word	0x20001f98
 800b748:	20001f9c 	.word	0x20001f9c

0800b74c <__sfputc_r>:
 800b74c:	6893      	ldr	r3, [r2, #8]
 800b74e:	3b01      	subs	r3, #1
 800b750:	2b00      	cmp	r3, #0
 800b752:	b410      	push	{r4}
 800b754:	6093      	str	r3, [r2, #8]
 800b756:	da08      	bge.n	800b76a <__sfputc_r+0x1e>
 800b758:	6994      	ldr	r4, [r2, #24]
 800b75a:	42a3      	cmp	r3, r4
 800b75c:	db01      	blt.n	800b762 <__sfputc_r+0x16>
 800b75e:	290a      	cmp	r1, #10
 800b760:	d103      	bne.n	800b76a <__sfputc_r+0x1e>
 800b762:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b766:	f000 be5f 	b.w	800c428 <__swbuf_r>
 800b76a:	6813      	ldr	r3, [r2, #0]
 800b76c:	1c58      	adds	r0, r3, #1
 800b76e:	6010      	str	r0, [r2, #0]
 800b770:	7019      	strb	r1, [r3, #0]
 800b772:	4608      	mov	r0, r1
 800b774:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b778:	4770      	bx	lr

0800b77a <__sfputs_r>:
 800b77a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b77c:	4606      	mov	r6, r0
 800b77e:	460f      	mov	r7, r1
 800b780:	4614      	mov	r4, r2
 800b782:	18d5      	adds	r5, r2, r3
 800b784:	42ac      	cmp	r4, r5
 800b786:	d101      	bne.n	800b78c <__sfputs_r+0x12>
 800b788:	2000      	movs	r0, #0
 800b78a:	e007      	b.n	800b79c <__sfputs_r+0x22>
 800b78c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b790:	463a      	mov	r2, r7
 800b792:	4630      	mov	r0, r6
 800b794:	f7ff ffda 	bl	800b74c <__sfputc_r>
 800b798:	1c43      	adds	r3, r0, #1
 800b79a:	d1f3      	bne.n	800b784 <__sfputs_r+0xa>
 800b79c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b7a0 <_vfiprintf_r>:
 800b7a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b7a4:	460d      	mov	r5, r1
 800b7a6:	b09d      	sub	sp, #116	; 0x74
 800b7a8:	4614      	mov	r4, r2
 800b7aa:	4698      	mov	r8, r3
 800b7ac:	4606      	mov	r6, r0
 800b7ae:	b118      	cbz	r0, 800b7b8 <_vfiprintf_r+0x18>
 800b7b0:	6983      	ldr	r3, [r0, #24]
 800b7b2:	b90b      	cbnz	r3, 800b7b8 <_vfiprintf_r+0x18>
 800b7b4:	f7ff fdae 	bl	800b314 <__sinit>
 800b7b8:	4b89      	ldr	r3, [pc, #548]	; (800b9e0 <_vfiprintf_r+0x240>)
 800b7ba:	429d      	cmp	r5, r3
 800b7bc:	d11b      	bne.n	800b7f6 <_vfiprintf_r+0x56>
 800b7be:	6875      	ldr	r5, [r6, #4]
 800b7c0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b7c2:	07d9      	lsls	r1, r3, #31
 800b7c4:	d405      	bmi.n	800b7d2 <_vfiprintf_r+0x32>
 800b7c6:	89ab      	ldrh	r3, [r5, #12]
 800b7c8:	059a      	lsls	r2, r3, #22
 800b7ca:	d402      	bmi.n	800b7d2 <_vfiprintf_r+0x32>
 800b7cc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b7ce:	f7ff fe76 	bl	800b4be <__retarget_lock_acquire_recursive>
 800b7d2:	89ab      	ldrh	r3, [r5, #12]
 800b7d4:	071b      	lsls	r3, r3, #28
 800b7d6:	d501      	bpl.n	800b7dc <_vfiprintf_r+0x3c>
 800b7d8:	692b      	ldr	r3, [r5, #16]
 800b7da:	b9eb      	cbnz	r3, 800b818 <_vfiprintf_r+0x78>
 800b7dc:	4629      	mov	r1, r5
 800b7de:	4630      	mov	r0, r6
 800b7e0:	f000 fe86 	bl	800c4f0 <__swsetup_r>
 800b7e4:	b1c0      	cbz	r0, 800b818 <_vfiprintf_r+0x78>
 800b7e6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b7e8:	07dc      	lsls	r4, r3, #31
 800b7ea:	d50e      	bpl.n	800b80a <_vfiprintf_r+0x6a>
 800b7ec:	f04f 30ff 	mov.w	r0, #4294967295
 800b7f0:	b01d      	add	sp, #116	; 0x74
 800b7f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b7f6:	4b7b      	ldr	r3, [pc, #492]	; (800b9e4 <_vfiprintf_r+0x244>)
 800b7f8:	429d      	cmp	r5, r3
 800b7fa:	d101      	bne.n	800b800 <_vfiprintf_r+0x60>
 800b7fc:	68b5      	ldr	r5, [r6, #8]
 800b7fe:	e7df      	b.n	800b7c0 <_vfiprintf_r+0x20>
 800b800:	4b79      	ldr	r3, [pc, #484]	; (800b9e8 <_vfiprintf_r+0x248>)
 800b802:	429d      	cmp	r5, r3
 800b804:	bf08      	it	eq
 800b806:	68f5      	ldreq	r5, [r6, #12]
 800b808:	e7da      	b.n	800b7c0 <_vfiprintf_r+0x20>
 800b80a:	89ab      	ldrh	r3, [r5, #12]
 800b80c:	0598      	lsls	r0, r3, #22
 800b80e:	d4ed      	bmi.n	800b7ec <_vfiprintf_r+0x4c>
 800b810:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b812:	f7ff fe56 	bl	800b4c2 <__retarget_lock_release_recursive>
 800b816:	e7e9      	b.n	800b7ec <_vfiprintf_r+0x4c>
 800b818:	2300      	movs	r3, #0
 800b81a:	9309      	str	r3, [sp, #36]	; 0x24
 800b81c:	2320      	movs	r3, #32
 800b81e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b822:	f8cd 800c 	str.w	r8, [sp, #12]
 800b826:	2330      	movs	r3, #48	; 0x30
 800b828:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800b9ec <_vfiprintf_r+0x24c>
 800b82c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b830:	f04f 0901 	mov.w	r9, #1
 800b834:	4623      	mov	r3, r4
 800b836:	469a      	mov	sl, r3
 800b838:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b83c:	b10a      	cbz	r2, 800b842 <_vfiprintf_r+0xa2>
 800b83e:	2a25      	cmp	r2, #37	; 0x25
 800b840:	d1f9      	bne.n	800b836 <_vfiprintf_r+0x96>
 800b842:	ebba 0b04 	subs.w	fp, sl, r4
 800b846:	d00b      	beq.n	800b860 <_vfiprintf_r+0xc0>
 800b848:	465b      	mov	r3, fp
 800b84a:	4622      	mov	r2, r4
 800b84c:	4629      	mov	r1, r5
 800b84e:	4630      	mov	r0, r6
 800b850:	f7ff ff93 	bl	800b77a <__sfputs_r>
 800b854:	3001      	adds	r0, #1
 800b856:	f000 80aa 	beq.w	800b9ae <_vfiprintf_r+0x20e>
 800b85a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b85c:	445a      	add	r2, fp
 800b85e:	9209      	str	r2, [sp, #36]	; 0x24
 800b860:	f89a 3000 	ldrb.w	r3, [sl]
 800b864:	2b00      	cmp	r3, #0
 800b866:	f000 80a2 	beq.w	800b9ae <_vfiprintf_r+0x20e>
 800b86a:	2300      	movs	r3, #0
 800b86c:	f04f 32ff 	mov.w	r2, #4294967295
 800b870:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b874:	f10a 0a01 	add.w	sl, sl, #1
 800b878:	9304      	str	r3, [sp, #16]
 800b87a:	9307      	str	r3, [sp, #28]
 800b87c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b880:	931a      	str	r3, [sp, #104]	; 0x68
 800b882:	4654      	mov	r4, sl
 800b884:	2205      	movs	r2, #5
 800b886:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b88a:	4858      	ldr	r0, [pc, #352]	; (800b9ec <_vfiprintf_r+0x24c>)
 800b88c:	f7f4 fca8 	bl	80001e0 <memchr>
 800b890:	9a04      	ldr	r2, [sp, #16]
 800b892:	b9d8      	cbnz	r0, 800b8cc <_vfiprintf_r+0x12c>
 800b894:	06d1      	lsls	r1, r2, #27
 800b896:	bf44      	itt	mi
 800b898:	2320      	movmi	r3, #32
 800b89a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b89e:	0713      	lsls	r3, r2, #28
 800b8a0:	bf44      	itt	mi
 800b8a2:	232b      	movmi	r3, #43	; 0x2b
 800b8a4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b8a8:	f89a 3000 	ldrb.w	r3, [sl]
 800b8ac:	2b2a      	cmp	r3, #42	; 0x2a
 800b8ae:	d015      	beq.n	800b8dc <_vfiprintf_r+0x13c>
 800b8b0:	9a07      	ldr	r2, [sp, #28]
 800b8b2:	4654      	mov	r4, sl
 800b8b4:	2000      	movs	r0, #0
 800b8b6:	f04f 0c0a 	mov.w	ip, #10
 800b8ba:	4621      	mov	r1, r4
 800b8bc:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b8c0:	3b30      	subs	r3, #48	; 0x30
 800b8c2:	2b09      	cmp	r3, #9
 800b8c4:	d94e      	bls.n	800b964 <_vfiprintf_r+0x1c4>
 800b8c6:	b1b0      	cbz	r0, 800b8f6 <_vfiprintf_r+0x156>
 800b8c8:	9207      	str	r2, [sp, #28]
 800b8ca:	e014      	b.n	800b8f6 <_vfiprintf_r+0x156>
 800b8cc:	eba0 0308 	sub.w	r3, r0, r8
 800b8d0:	fa09 f303 	lsl.w	r3, r9, r3
 800b8d4:	4313      	orrs	r3, r2
 800b8d6:	9304      	str	r3, [sp, #16]
 800b8d8:	46a2      	mov	sl, r4
 800b8da:	e7d2      	b.n	800b882 <_vfiprintf_r+0xe2>
 800b8dc:	9b03      	ldr	r3, [sp, #12]
 800b8de:	1d19      	adds	r1, r3, #4
 800b8e0:	681b      	ldr	r3, [r3, #0]
 800b8e2:	9103      	str	r1, [sp, #12]
 800b8e4:	2b00      	cmp	r3, #0
 800b8e6:	bfbb      	ittet	lt
 800b8e8:	425b      	neglt	r3, r3
 800b8ea:	f042 0202 	orrlt.w	r2, r2, #2
 800b8ee:	9307      	strge	r3, [sp, #28]
 800b8f0:	9307      	strlt	r3, [sp, #28]
 800b8f2:	bfb8      	it	lt
 800b8f4:	9204      	strlt	r2, [sp, #16]
 800b8f6:	7823      	ldrb	r3, [r4, #0]
 800b8f8:	2b2e      	cmp	r3, #46	; 0x2e
 800b8fa:	d10c      	bne.n	800b916 <_vfiprintf_r+0x176>
 800b8fc:	7863      	ldrb	r3, [r4, #1]
 800b8fe:	2b2a      	cmp	r3, #42	; 0x2a
 800b900:	d135      	bne.n	800b96e <_vfiprintf_r+0x1ce>
 800b902:	9b03      	ldr	r3, [sp, #12]
 800b904:	1d1a      	adds	r2, r3, #4
 800b906:	681b      	ldr	r3, [r3, #0]
 800b908:	9203      	str	r2, [sp, #12]
 800b90a:	2b00      	cmp	r3, #0
 800b90c:	bfb8      	it	lt
 800b90e:	f04f 33ff 	movlt.w	r3, #4294967295
 800b912:	3402      	adds	r4, #2
 800b914:	9305      	str	r3, [sp, #20]
 800b916:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800b9fc <_vfiprintf_r+0x25c>
 800b91a:	7821      	ldrb	r1, [r4, #0]
 800b91c:	2203      	movs	r2, #3
 800b91e:	4650      	mov	r0, sl
 800b920:	f7f4 fc5e 	bl	80001e0 <memchr>
 800b924:	b140      	cbz	r0, 800b938 <_vfiprintf_r+0x198>
 800b926:	2340      	movs	r3, #64	; 0x40
 800b928:	eba0 000a 	sub.w	r0, r0, sl
 800b92c:	fa03 f000 	lsl.w	r0, r3, r0
 800b930:	9b04      	ldr	r3, [sp, #16]
 800b932:	4303      	orrs	r3, r0
 800b934:	3401      	adds	r4, #1
 800b936:	9304      	str	r3, [sp, #16]
 800b938:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b93c:	482c      	ldr	r0, [pc, #176]	; (800b9f0 <_vfiprintf_r+0x250>)
 800b93e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b942:	2206      	movs	r2, #6
 800b944:	f7f4 fc4c 	bl	80001e0 <memchr>
 800b948:	2800      	cmp	r0, #0
 800b94a:	d03f      	beq.n	800b9cc <_vfiprintf_r+0x22c>
 800b94c:	4b29      	ldr	r3, [pc, #164]	; (800b9f4 <_vfiprintf_r+0x254>)
 800b94e:	bb1b      	cbnz	r3, 800b998 <_vfiprintf_r+0x1f8>
 800b950:	9b03      	ldr	r3, [sp, #12]
 800b952:	3307      	adds	r3, #7
 800b954:	f023 0307 	bic.w	r3, r3, #7
 800b958:	3308      	adds	r3, #8
 800b95a:	9303      	str	r3, [sp, #12]
 800b95c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b95e:	443b      	add	r3, r7
 800b960:	9309      	str	r3, [sp, #36]	; 0x24
 800b962:	e767      	b.n	800b834 <_vfiprintf_r+0x94>
 800b964:	fb0c 3202 	mla	r2, ip, r2, r3
 800b968:	460c      	mov	r4, r1
 800b96a:	2001      	movs	r0, #1
 800b96c:	e7a5      	b.n	800b8ba <_vfiprintf_r+0x11a>
 800b96e:	2300      	movs	r3, #0
 800b970:	3401      	adds	r4, #1
 800b972:	9305      	str	r3, [sp, #20]
 800b974:	4619      	mov	r1, r3
 800b976:	f04f 0c0a 	mov.w	ip, #10
 800b97a:	4620      	mov	r0, r4
 800b97c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b980:	3a30      	subs	r2, #48	; 0x30
 800b982:	2a09      	cmp	r2, #9
 800b984:	d903      	bls.n	800b98e <_vfiprintf_r+0x1ee>
 800b986:	2b00      	cmp	r3, #0
 800b988:	d0c5      	beq.n	800b916 <_vfiprintf_r+0x176>
 800b98a:	9105      	str	r1, [sp, #20]
 800b98c:	e7c3      	b.n	800b916 <_vfiprintf_r+0x176>
 800b98e:	fb0c 2101 	mla	r1, ip, r1, r2
 800b992:	4604      	mov	r4, r0
 800b994:	2301      	movs	r3, #1
 800b996:	e7f0      	b.n	800b97a <_vfiprintf_r+0x1da>
 800b998:	ab03      	add	r3, sp, #12
 800b99a:	9300      	str	r3, [sp, #0]
 800b99c:	462a      	mov	r2, r5
 800b99e:	4b16      	ldr	r3, [pc, #88]	; (800b9f8 <_vfiprintf_r+0x258>)
 800b9a0:	a904      	add	r1, sp, #16
 800b9a2:	4630      	mov	r0, r6
 800b9a4:	f000 f8cc 	bl	800bb40 <_printf_float>
 800b9a8:	4607      	mov	r7, r0
 800b9aa:	1c78      	adds	r0, r7, #1
 800b9ac:	d1d6      	bne.n	800b95c <_vfiprintf_r+0x1bc>
 800b9ae:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b9b0:	07d9      	lsls	r1, r3, #31
 800b9b2:	d405      	bmi.n	800b9c0 <_vfiprintf_r+0x220>
 800b9b4:	89ab      	ldrh	r3, [r5, #12]
 800b9b6:	059a      	lsls	r2, r3, #22
 800b9b8:	d402      	bmi.n	800b9c0 <_vfiprintf_r+0x220>
 800b9ba:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b9bc:	f7ff fd81 	bl	800b4c2 <__retarget_lock_release_recursive>
 800b9c0:	89ab      	ldrh	r3, [r5, #12]
 800b9c2:	065b      	lsls	r3, r3, #25
 800b9c4:	f53f af12 	bmi.w	800b7ec <_vfiprintf_r+0x4c>
 800b9c8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b9ca:	e711      	b.n	800b7f0 <_vfiprintf_r+0x50>
 800b9cc:	ab03      	add	r3, sp, #12
 800b9ce:	9300      	str	r3, [sp, #0]
 800b9d0:	462a      	mov	r2, r5
 800b9d2:	4b09      	ldr	r3, [pc, #36]	; (800b9f8 <_vfiprintf_r+0x258>)
 800b9d4:	a904      	add	r1, sp, #16
 800b9d6:	4630      	mov	r0, r6
 800b9d8:	f000 fb56 	bl	800c088 <_printf_i>
 800b9dc:	e7e4      	b.n	800b9a8 <_vfiprintf_r+0x208>
 800b9de:	bf00      	nop
 800b9e0:	08021c64 	.word	0x08021c64
 800b9e4:	08021c84 	.word	0x08021c84
 800b9e8:	08021c44 	.word	0x08021c44
 800b9ec:	08021ca8 	.word	0x08021ca8
 800b9f0:	08021cb2 	.word	0x08021cb2
 800b9f4:	0800bb41 	.word	0x0800bb41
 800b9f8:	0800b77b 	.word	0x0800b77b
 800b9fc:	08021cae 	.word	0x08021cae

0800ba00 <__cvt>:
 800ba00:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ba04:	ec55 4b10 	vmov	r4, r5, d0
 800ba08:	2d00      	cmp	r5, #0
 800ba0a:	460e      	mov	r6, r1
 800ba0c:	4619      	mov	r1, r3
 800ba0e:	462b      	mov	r3, r5
 800ba10:	bfbb      	ittet	lt
 800ba12:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800ba16:	461d      	movlt	r5, r3
 800ba18:	2300      	movge	r3, #0
 800ba1a:	232d      	movlt	r3, #45	; 0x2d
 800ba1c:	700b      	strb	r3, [r1, #0]
 800ba1e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ba20:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800ba24:	4691      	mov	r9, r2
 800ba26:	f023 0820 	bic.w	r8, r3, #32
 800ba2a:	bfbc      	itt	lt
 800ba2c:	4622      	movlt	r2, r4
 800ba2e:	4614      	movlt	r4, r2
 800ba30:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800ba34:	d005      	beq.n	800ba42 <__cvt+0x42>
 800ba36:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800ba3a:	d100      	bne.n	800ba3e <__cvt+0x3e>
 800ba3c:	3601      	adds	r6, #1
 800ba3e:	2102      	movs	r1, #2
 800ba40:	e000      	b.n	800ba44 <__cvt+0x44>
 800ba42:	2103      	movs	r1, #3
 800ba44:	ab03      	add	r3, sp, #12
 800ba46:	9301      	str	r3, [sp, #4]
 800ba48:	ab02      	add	r3, sp, #8
 800ba4a:	9300      	str	r3, [sp, #0]
 800ba4c:	ec45 4b10 	vmov	d0, r4, r5
 800ba50:	4653      	mov	r3, sl
 800ba52:	4632      	mov	r2, r6
 800ba54:	f000 feb8 	bl	800c7c8 <_dtoa_r>
 800ba58:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800ba5c:	4607      	mov	r7, r0
 800ba5e:	d102      	bne.n	800ba66 <__cvt+0x66>
 800ba60:	f019 0f01 	tst.w	r9, #1
 800ba64:	d022      	beq.n	800baac <__cvt+0xac>
 800ba66:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800ba6a:	eb07 0906 	add.w	r9, r7, r6
 800ba6e:	d110      	bne.n	800ba92 <__cvt+0x92>
 800ba70:	783b      	ldrb	r3, [r7, #0]
 800ba72:	2b30      	cmp	r3, #48	; 0x30
 800ba74:	d10a      	bne.n	800ba8c <__cvt+0x8c>
 800ba76:	2200      	movs	r2, #0
 800ba78:	2300      	movs	r3, #0
 800ba7a:	4620      	mov	r0, r4
 800ba7c:	4629      	mov	r1, r5
 800ba7e:	f7f5 f835 	bl	8000aec <__aeabi_dcmpeq>
 800ba82:	b918      	cbnz	r0, 800ba8c <__cvt+0x8c>
 800ba84:	f1c6 0601 	rsb	r6, r6, #1
 800ba88:	f8ca 6000 	str.w	r6, [sl]
 800ba8c:	f8da 3000 	ldr.w	r3, [sl]
 800ba90:	4499      	add	r9, r3
 800ba92:	2200      	movs	r2, #0
 800ba94:	2300      	movs	r3, #0
 800ba96:	4620      	mov	r0, r4
 800ba98:	4629      	mov	r1, r5
 800ba9a:	f7f5 f827 	bl	8000aec <__aeabi_dcmpeq>
 800ba9e:	b108      	cbz	r0, 800baa4 <__cvt+0xa4>
 800baa0:	f8cd 900c 	str.w	r9, [sp, #12]
 800baa4:	2230      	movs	r2, #48	; 0x30
 800baa6:	9b03      	ldr	r3, [sp, #12]
 800baa8:	454b      	cmp	r3, r9
 800baaa:	d307      	bcc.n	800babc <__cvt+0xbc>
 800baac:	9b03      	ldr	r3, [sp, #12]
 800baae:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800bab0:	1bdb      	subs	r3, r3, r7
 800bab2:	4638      	mov	r0, r7
 800bab4:	6013      	str	r3, [r2, #0]
 800bab6:	b004      	add	sp, #16
 800bab8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800babc:	1c59      	adds	r1, r3, #1
 800babe:	9103      	str	r1, [sp, #12]
 800bac0:	701a      	strb	r2, [r3, #0]
 800bac2:	e7f0      	b.n	800baa6 <__cvt+0xa6>

0800bac4 <__exponent>:
 800bac4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800bac6:	4603      	mov	r3, r0
 800bac8:	2900      	cmp	r1, #0
 800baca:	bfb8      	it	lt
 800bacc:	4249      	neglt	r1, r1
 800bace:	f803 2b02 	strb.w	r2, [r3], #2
 800bad2:	bfb4      	ite	lt
 800bad4:	222d      	movlt	r2, #45	; 0x2d
 800bad6:	222b      	movge	r2, #43	; 0x2b
 800bad8:	2909      	cmp	r1, #9
 800bada:	7042      	strb	r2, [r0, #1]
 800badc:	dd2a      	ble.n	800bb34 <__exponent+0x70>
 800bade:	f10d 0407 	add.w	r4, sp, #7
 800bae2:	46a4      	mov	ip, r4
 800bae4:	270a      	movs	r7, #10
 800bae6:	46a6      	mov	lr, r4
 800bae8:	460a      	mov	r2, r1
 800baea:	fb91 f6f7 	sdiv	r6, r1, r7
 800baee:	fb07 1516 	mls	r5, r7, r6, r1
 800baf2:	3530      	adds	r5, #48	; 0x30
 800baf4:	2a63      	cmp	r2, #99	; 0x63
 800baf6:	f104 34ff 	add.w	r4, r4, #4294967295
 800bafa:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800bafe:	4631      	mov	r1, r6
 800bb00:	dcf1      	bgt.n	800bae6 <__exponent+0x22>
 800bb02:	3130      	adds	r1, #48	; 0x30
 800bb04:	f1ae 0502 	sub.w	r5, lr, #2
 800bb08:	f804 1c01 	strb.w	r1, [r4, #-1]
 800bb0c:	1c44      	adds	r4, r0, #1
 800bb0e:	4629      	mov	r1, r5
 800bb10:	4561      	cmp	r1, ip
 800bb12:	d30a      	bcc.n	800bb2a <__exponent+0x66>
 800bb14:	f10d 0209 	add.w	r2, sp, #9
 800bb18:	eba2 020e 	sub.w	r2, r2, lr
 800bb1c:	4565      	cmp	r5, ip
 800bb1e:	bf88      	it	hi
 800bb20:	2200      	movhi	r2, #0
 800bb22:	4413      	add	r3, r2
 800bb24:	1a18      	subs	r0, r3, r0
 800bb26:	b003      	add	sp, #12
 800bb28:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bb2a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800bb2e:	f804 2f01 	strb.w	r2, [r4, #1]!
 800bb32:	e7ed      	b.n	800bb10 <__exponent+0x4c>
 800bb34:	2330      	movs	r3, #48	; 0x30
 800bb36:	3130      	adds	r1, #48	; 0x30
 800bb38:	7083      	strb	r3, [r0, #2]
 800bb3a:	70c1      	strb	r1, [r0, #3]
 800bb3c:	1d03      	adds	r3, r0, #4
 800bb3e:	e7f1      	b.n	800bb24 <__exponent+0x60>

0800bb40 <_printf_float>:
 800bb40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bb44:	ed2d 8b02 	vpush	{d8}
 800bb48:	b08d      	sub	sp, #52	; 0x34
 800bb4a:	460c      	mov	r4, r1
 800bb4c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800bb50:	4616      	mov	r6, r2
 800bb52:	461f      	mov	r7, r3
 800bb54:	4605      	mov	r5, r0
 800bb56:	f001 fc45 	bl	800d3e4 <_localeconv_r>
 800bb5a:	f8d0 a000 	ldr.w	sl, [r0]
 800bb5e:	4650      	mov	r0, sl
 800bb60:	f7f4 fb98 	bl	8000294 <strlen>
 800bb64:	2300      	movs	r3, #0
 800bb66:	930a      	str	r3, [sp, #40]	; 0x28
 800bb68:	6823      	ldr	r3, [r4, #0]
 800bb6a:	9305      	str	r3, [sp, #20]
 800bb6c:	f8d8 3000 	ldr.w	r3, [r8]
 800bb70:	f894 b018 	ldrb.w	fp, [r4, #24]
 800bb74:	3307      	adds	r3, #7
 800bb76:	f023 0307 	bic.w	r3, r3, #7
 800bb7a:	f103 0208 	add.w	r2, r3, #8
 800bb7e:	f8c8 2000 	str.w	r2, [r8]
 800bb82:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb86:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800bb8a:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800bb8e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800bb92:	9307      	str	r3, [sp, #28]
 800bb94:	f8cd 8018 	str.w	r8, [sp, #24]
 800bb98:	ee08 0a10 	vmov	s16, r0
 800bb9c:	4b9f      	ldr	r3, [pc, #636]	; (800be1c <_printf_float+0x2dc>)
 800bb9e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800bba2:	f04f 32ff 	mov.w	r2, #4294967295
 800bba6:	f7f4 ffd3 	bl	8000b50 <__aeabi_dcmpun>
 800bbaa:	bb88      	cbnz	r0, 800bc10 <_printf_float+0xd0>
 800bbac:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800bbb0:	4b9a      	ldr	r3, [pc, #616]	; (800be1c <_printf_float+0x2dc>)
 800bbb2:	f04f 32ff 	mov.w	r2, #4294967295
 800bbb6:	f7f4 ffad 	bl	8000b14 <__aeabi_dcmple>
 800bbba:	bb48      	cbnz	r0, 800bc10 <_printf_float+0xd0>
 800bbbc:	2200      	movs	r2, #0
 800bbbe:	2300      	movs	r3, #0
 800bbc0:	4640      	mov	r0, r8
 800bbc2:	4649      	mov	r1, r9
 800bbc4:	f7f4 ff9c 	bl	8000b00 <__aeabi_dcmplt>
 800bbc8:	b110      	cbz	r0, 800bbd0 <_printf_float+0x90>
 800bbca:	232d      	movs	r3, #45	; 0x2d
 800bbcc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bbd0:	4b93      	ldr	r3, [pc, #588]	; (800be20 <_printf_float+0x2e0>)
 800bbd2:	4894      	ldr	r0, [pc, #592]	; (800be24 <_printf_float+0x2e4>)
 800bbd4:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800bbd8:	bf94      	ite	ls
 800bbda:	4698      	movls	r8, r3
 800bbdc:	4680      	movhi	r8, r0
 800bbde:	2303      	movs	r3, #3
 800bbe0:	6123      	str	r3, [r4, #16]
 800bbe2:	9b05      	ldr	r3, [sp, #20]
 800bbe4:	f023 0204 	bic.w	r2, r3, #4
 800bbe8:	6022      	str	r2, [r4, #0]
 800bbea:	f04f 0900 	mov.w	r9, #0
 800bbee:	9700      	str	r7, [sp, #0]
 800bbf0:	4633      	mov	r3, r6
 800bbf2:	aa0b      	add	r2, sp, #44	; 0x2c
 800bbf4:	4621      	mov	r1, r4
 800bbf6:	4628      	mov	r0, r5
 800bbf8:	f000 f9d8 	bl	800bfac <_printf_common>
 800bbfc:	3001      	adds	r0, #1
 800bbfe:	f040 8090 	bne.w	800bd22 <_printf_float+0x1e2>
 800bc02:	f04f 30ff 	mov.w	r0, #4294967295
 800bc06:	b00d      	add	sp, #52	; 0x34
 800bc08:	ecbd 8b02 	vpop	{d8}
 800bc0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bc10:	4642      	mov	r2, r8
 800bc12:	464b      	mov	r3, r9
 800bc14:	4640      	mov	r0, r8
 800bc16:	4649      	mov	r1, r9
 800bc18:	f7f4 ff9a 	bl	8000b50 <__aeabi_dcmpun>
 800bc1c:	b140      	cbz	r0, 800bc30 <_printf_float+0xf0>
 800bc1e:	464b      	mov	r3, r9
 800bc20:	2b00      	cmp	r3, #0
 800bc22:	bfbc      	itt	lt
 800bc24:	232d      	movlt	r3, #45	; 0x2d
 800bc26:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800bc2a:	487f      	ldr	r0, [pc, #508]	; (800be28 <_printf_float+0x2e8>)
 800bc2c:	4b7f      	ldr	r3, [pc, #508]	; (800be2c <_printf_float+0x2ec>)
 800bc2e:	e7d1      	b.n	800bbd4 <_printf_float+0x94>
 800bc30:	6863      	ldr	r3, [r4, #4]
 800bc32:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800bc36:	9206      	str	r2, [sp, #24]
 800bc38:	1c5a      	adds	r2, r3, #1
 800bc3a:	d13f      	bne.n	800bcbc <_printf_float+0x17c>
 800bc3c:	2306      	movs	r3, #6
 800bc3e:	6063      	str	r3, [r4, #4]
 800bc40:	9b05      	ldr	r3, [sp, #20]
 800bc42:	6861      	ldr	r1, [r4, #4]
 800bc44:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800bc48:	2300      	movs	r3, #0
 800bc4a:	9303      	str	r3, [sp, #12]
 800bc4c:	ab0a      	add	r3, sp, #40	; 0x28
 800bc4e:	e9cd b301 	strd	fp, r3, [sp, #4]
 800bc52:	ab09      	add	r3, sp, #36	; 0x24
 800bc54:	ec49 8b10 	vmov	d0, r8, r9
 800bc58:	9300      	str	r3, [sp, #0]
 800bc5a:	6022      	str	r2, [r4, #0]
 800bc5c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800bc60:	4628      	mov	r0, r5
 800bc62:	f7ff fecd 	bl	800ba00 <__cvt>
 800bc66:	9b06      	ldr	r3, [sp, #24]
 800bc68:	9909      	ldr	r1, [sp, #36]	; 0x24
 800bc6a:	2b47      	cmp	r3, #71	; 0x47
 800bc6c:	4680      	mov	r8, r0
 800bc6e:	d108      	bne.n	800bc82 <_printf_float+0x142>
 800bc70:	1cc8      	adds	r0, r1, #3
 800bc72:	db02      	blt.n	800bc7a <_printf_float+0x13a>
 800bc74:	6863      	ldr	r3, [r4, #4]
 800bc76:	4299      	cmp	r1, r3
 800bc78:	dd41      	ble.n	800bcfe <_printf_float+0x1be>
 800bc7a:	f1ab 0b02 	sub.w	fp, fp, #2
 800bc7e:	fa5f fb8b 	uxtb.w	fp, fp
 800bc82:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800bc86:	d820      	bhi.n	800bcca <_printf_float+0x18a>
 800bc88:	3901      	subs	r1, #1
 800bc8a:	465a      	mov	r2, fp
 800bc8c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800bc90:	9109      	str	r1, [sp, #36]	; 0x24
 800bc92:	f7ff ff17 	bl	800bac4 <__exponent>
 800bc96:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800bc98:	1813      	adds	r3, r2, r0
 800bc9a:	2a01      	cmp	r2, #1
 800bc9c:	4681      	mov	r9, r0
 800bc9e:	6123      	str	r3, [r4, #16]
 800bca0:	dc02      	bgt.n	800bca8 <_printf_float+0x168>
 800bca2:	6822      	ldr	r2, [r4, #0]
 800bca4:	07d2      	lsls	r2, r2, #31
 800bca6:	d501      	bpl.n	800bcac <_printf_float+0x16c>
 800bca8:	3301      	adds	r3, #1
 800bcaa:	6123      	str	r3, [r4, #16]
 800bcac:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800bcb0:	2b00      	cmp	r3, #0
 800bcb2:	d09c      	beq.n	800bbee <_printf_float+0xae>
 800bcb4:	232d      	movs	r3, #45	; 0x2d
 800bcb6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bcba:	e798      	b.n	800bbee <_printf_float+0xae>
 800bcbc:	9a06      	ldr	r2, [sp, #24]
 800bcbe:	2a47      	cmp	r2, #71	; 0x47
 800bcc0:	d1be      	bne.n	800bc40 <_printf_float+0x100>
 800bcc2:	2b00      	cmp	r3, #0
 800bcc4:	d1bc      	bne.n	800bc40 <_printf_float+0x100>
 800bcc6:	2301      	movs	r3, #1
 800bcc8:	e7b9      	b.n	800bc3e <_printf_float+0xfe>
 800bcca:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800bcce:	d118      	bne.n	800bd02 <_printf_float+0x1c2>
 800bcd0:	2900      	cmp	r1, #0
 800bcd2:	6863      	ldr	r3, [r4, #4]
 800bcd4:	dd0b      	ble.n	800bcee <_printf_float+0x1ae>
 800bcd6:	6121      	str	r1, [r4, #16]
 800bcd8:	b913      	cbnz	r3, 800bce0 <_printf_float+0x1a0>
 800bcda:	6822      	ldr	r2, [r4, #0]
 800bcdc:	07d0      	lsls	r0, r2, #31
 800bcde:	d502      	bpl.n	800bce6 <_printf_float+0x1a6>
 800bce0:	3301      	adds	r3, #1
 800bce2:	440b      	add	r3, r1
 800bce4:	6123      	str	r3, [r4, #16]
 800bce6:	65a1      	str	r1, [r4, #88]	; 0x58
 800bce8:	f04f 0900 	mov.w	r9, #0
 800bcec:	e7de      	b.n	800bcac <_printf_float+0x16c>
 800bcee:	b913      	cbnz	r3, 800bcf6 <_printf_float+0x1b6>
 800bcf0:	6822      	ldr	r2, [r4, #0]
 800bcf2:	07d2      	lsls	r2, r2, #31
 800bcf4:	d501      	bpl.n	800bcfa <_printf_float+0x1ba>
 800bcf6:	3302      	adds	r3, #2
 800bcf8:	e7f4      	b.n	800bce4 <_printf_float+0x1a4>
 800bcfa:	2301      	movs	r3, #1
 800bcfc:	e7f2      	b.n	800bce4 <_printf_float+0x1a4>
 800bcfe:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800bd02:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bd04:	4299      	cmp	r1, r3
 800bd06:	db05      	blt.n	800bd14 <_printf_float+0x1d4>
 800bd08:	6823      	ldr	r3, [r4, #0]
 800bd0a:	6121      	str	r1, [r4, #16]
 800bd0c:	07d8      	lsls	r0, r3, #31
 800bd0e:	d5ea      	bpl.n	800bce6 <_printf_float+0x1a6>
 800bd10:	1c4b      	adds	r3, r1, #1
 800bd12:	e7e7      	b.n	800bce4 <_printf_float+0x1a4>
 800bd14:	2900      	cmp	r1, #0
 800bd16:	bfd4      	ite	le
 800bd18:	f1c1 0202 	rsble	r2, r1, #2
 800bd1c:	2201      	movgt	r2, #1
 800bd1e:	4413      	add	r3, r2
 800bd20:	e7e0      	b.n	800bce4 <_printf_float+0x1a4>
 800bd22:	6823      	ldr	r3, [r4, #0]
 800bd24:	055a      	lsls	r2, r3, #21
 800bd26:	d407      	bmi.n	800bd38 <_printf_float+0x1f8>
 800bd28:	6923      	ldr	r3, [r4, #16]
 800bd2a:	4642      	mov	r2, r8
 800bd2c:	4631      	mov	r1, r6
 800bd2e:	4628      	mov	r0, r5
 800bd30:	47b8      	blx	r7
 800bd32:	3001      	adds	r0, #1
 800bd34:	d12c      	bne.n	800bd90 <_printf_float+0x250>
 800bd36:	e764      	b.n	800bc02 <_printf_float+0xc2>
 800bd38:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800bd3c:	f240 80e0 	bls.w	800bf00 <_printf_float+0x3c0>
 800bd40:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800bd44:	2200      	movs	r2, #0
 800bd46:	2300      	movs	r3, #0
 800bd48:	f7f4 fed0 	bl	8000aec <__aeabi_dcmpeq>
 800bd4c:	2800      	cmp	r0, #0
 800bd4e:	d034      	beq.n	800bdba <_printf_float+0x27a>
 800bd50:	4a37      	ldr	r2, [pc, #220]	; (800be30 <_printf_float+0x2f0>)
 800bd52:	2301      	movs	r3, #1
 800bd54:	4631      	mov	r1, r6
 800bd56:	4628      	mov	r0, r5
 800bd58:	47b8      	blx	r7
 800bd5a:	3001      	adds	r0, #1
 800bd5c:	f43f af51 	beq.w	800bc02 <_printf_float+0xc2>
 800bd60:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800bd64:	429a      	cmp	r2, r3
 800bd66:	db02      	blt.n	800bd6e <_printf_float+0x22e>
 800bd68:	6823      	ldr	r3, [r4, #0]
 800bd6a:	07d8      	lsls	r0, r3, #31
 800bd6c:	d510      	bpl.n	800bd90 <_printf_float+0x250>
 800bd6e:	ee18 3a10 	vmov	r3, s16
 800bd72:	4652      	mov	r2, sl
 800bd74:	4631      	mov	r1, r6
 800bd76:	4628      	mov	r0, r5
 800bd78:	47b8      	blx	r7
 800bd7a:	3001      	adds	r0, #1
 800bd7c:	f43f af41 	beq.w	800bc02 <_printf_float+0xc2>
 800bd80:	f04f 0800 	mov.w	r8, #0
 800bd84:	f104 091a 	add.w	r9, r4, #26
 800bd88:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bd8a:	3b01      	subs	r3, #1
 800bd8c:	4543      	cmp	r3, r8
 800bd8e:	dc09      	bgt.n	800bda4 <_printf_float+0x264>
 800bd90:	6823      	ldr	r3, [r4, #0]
 800bd92:	079b      	lsls	r3, r3, #30
 800bd94:	f100 8105 	bmi.w	800bfa2 <_printf_float+0x462>
 800bd98:	68e0      	ldr	r0, [r4, #12]
 800bd9a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bd9c:	4298      	cmp	r0, r3
 800bd9e:	bfb8      	it	lt
 800bda0:	4618      	movlt	r0, r3
 800bda2:	e730      	b.n	800bc06 <_printf_float+0xc6>
 800bda4:	2301      	movs	r3, #1
 800bda6:	464a      	mov	r2, r9
 800bda8:	4631      	mov	r1, r6
 800bdaa:	4628      	mov	r0, r5
 800bdac:	47b8      	blx	r7
 800bdae:	3001      	adds	r0, #1
 800bdb0:	f43f af27 	beq.w	800bc02 <_printf_float+0xc2>
 800bdb4:	f108 0801 	add.w	r8, r8, #1
 800bdb8:	e7e6      	b.n	800bd88 <_printf_float+0x248>
 800bdba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bdbc:	2b00      	cmp	r3, #0
 800bdbe:	dc39      	bgt.n	800be34 <_printf_float+0x2f4>
 800bdc0:	4a1b      	ldr	r2, [pc, #108]	; (800be30 <_printf_float+0x2f0>)
 800bdc2:	2301      	movs	r3, #1
 800bdc4:	4631      	mov	r1, r6
 800bdc6:	4628      	mov	r0, r5
 800bdc8:	47b8      	blx	r7
 800bdca:	3001      	adds	r0, #1
 800bdcc:	f43f af19 	beq.w	800bc02 <_printf_float+0xc2>
 800bdd0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800bdd4:	4313      	orrs	r3, r2
 800bdd6:	d102      	bne.n	800bdde <_printf_float+0x29e>
 800bdd8:	6823      	ldr	r3, [r4, #0]
 800bdda:	07d9      	lsls	r1, r3, #31
 800bddc:	d5d8      	bpl.n	800bd90 <_printf_float+0x250>
 800bdde:	ee18 3a10 	vmov	r3, s16
 800bde2:	4652      	mov	r2, sl
 800bde4:	4631      	mov	r1, r6
 800bde6:	4628      	mov	r0, r5
 800bde8:	47b8      	blx	r7
 800bdea:	3001      	adds	r0, #1
 800bdec:	f43f af09 	beq.w	800bc02 <_printf_float+0xc2>
 800bdf0:	f04f 0900 	mov.w	r9, #0
 800bdf4:	f104 0a1a 	add.w	sl, r4, #26
 800bdf8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bdfa:	425b      	negs	r3, r3
 800bdfc:	454b      	cmp	r3, r9
 800bdfe:	dc01      	bgt.n	800be04 <_printf_float+0x2c4>
 800be00:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800be02:	e792      	b.n	800bd2a <_printf_float+0x1ea>
 800be04:	2301      	movs	r3, #1
 800be06:	4652      	mov	r2, sl
 800be08:	4631      	mov	r1, r6
 800be0a:	4628      	mov	r0, r5
 800be0c:	47b8      	blx	r7
 800be0e:	3001      	adds	r0, #1
 800be10:	f43f aef7 	beq.w	800bc02 <_printf_float+0xc2>
 800be14:	f109 0901 	add.w	r9, r9, #1
 800be18:	e7ee      	b.n	800bdf8 <_printf_float+0x2b8>
 800be1a:	bf00      	nop
 800be1c:	7fefffff 	.word	0x7fefffff
 800be20:	08021cb9 	.word	0x08021cb9
 800be24:	08021cbd 	.word	0x08021cbd
 800be28:	08021cc5 	.word	0x08021cc5
 800be2c:	08021cc1 	.word	0x08021cc1
 800be30:	08021cc9 	.word	0x08021cc9
 800be34:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800be36:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800be38:	429a      	cmp	r2, r3
 800be3a:	bfa8      	it	ge
 800be3c:	461a      	movge	r2, r3
 800be3e:	2a00      	cmp	r2, #0
 800be40:	4691      	mov	r9, r2
 800be42:	dc37      	bgt.n	800beb4 <_printf_float+0x374>
 800be44:	f04f 0b00 	mov.w	fp, #0
 800be48:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800be4c:	f104 021a 	add.w	r2, r4, #26
 800be50:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800be52:	9305      	str	r3, [sp, #20]
 800be54:	eba3 0309 	sub.w	r3, r3, r9
 800be58:	455b      	cmp	r3, fp
 800be5a:	dc33      	bgt.n	800bec4 <_printf_float+0x384>
 800be5c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800be60:	429a      	cmp	r2, r3
 800be62:	db3b      	blt.n	800bedc <_printf_float+0x39c>
 800be64:	6823      	ldr	r3, [r4, #0]
 800be66:	07da      	lsls	r2, r3, #31
 800be68:	d438      	bmi.n	800bedc <_printf_float+0x39c>
 800be6a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800be6c:	9b05      	ldr	r3, [sp, #20]
 800be6e:	9909      	ldr	r1, [sp, #36]	; 0x24
 800be70:	1ad3      	subs	r3, r2, r3
 800be72:	eba2 0901 	sub.w	r9, r2, r1
 800be76:	4599      	cmp	r9, r3
 800be78:	bfa8      	it	ge
 800be7a:	4699      	movge	r9, r3
 800be7c:	f1b9 0f00 	cmp.w	r9, #0
 800be80:	dc35      	bgt.n	800beee <_printf_float+0x3ae>
 800be82:	f04f 0800 	mov.w	r8, #0
 800be86:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800be8a:	f104 0a1a 	add.w	sl, r4, #26
 800be8e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800be92:	1a9b      	subs	r3, r3, r2
 800be94:	eba3 0309 	sub.w	r3, r3, r9
 800be98:	4543      	cmp	r3, r8
 800be9a:	f77f af79 	ble.w	800bd90 <_printf_float+0x250>
 800be9e:	2301      	movs	r3, #1
 800bea0:	4652      	mov	r2, sl
 800bea2:	4631      	mov	r1, r6
 800bea4:	4628      	mov	r0, r5
 800bea6:	47b8      	blx	r7
 800bea8:	3001      	adds	r0, #1
 800beaa:	f43f aeaa 	beq.w	800bc02 <_printf_float+0xc2>
 800beae:	f108 0801 	add.w	r8, r8, #1
 800beb2:	e7ec      	b.n	800be8e <_printf_float+0x34e>
 800beb4:	4613      	mov	r3, r2
 800beb6:	4631      	mov	r1, r6
 800beb8:	4642      	mov	r2, r8
 800beba:	4628      	mov	r0, r5
 800bebc:	47b8      	blx	r7
 800bebe:	3001      	adds	r0, #1
 800bec0:	d1c0      	bne.n	800be44 <_printf_float+0x304>
 800bec2:	e69e      	b.n	800bc02 <_printf_float+0xc2>
 800bec4:	2301      	movs	r3, #1
 800bec6:	4631      	mov	r1, r6
 800bec8:	4628      	mov	r0, r5
 800beca:	9205      	str	r2, [sp, #20]
 800becc:	47b8      	blx	r7
 800bece:	3001      	adds	r0, #1
 800bed0:	f43f ae97 	beq.w	800bc02 <_printf_float+0xc2>
 800bed4:	9a05      	ldr	r2, [sp, #20]
 800bed6:	f10b 0b01 	add.w	fp, fp, #1
 800beda:	e7b9      	b.n	800be50 <_printf_float+0x310>
 800bedc:	ee18 3a10 	vmov	r3, s16
 800bee0:	4652      	mov	r2, sl
 800bee2:	4631      	mov	r1, r6
 800bee4:	4628      	mov	r0, r5
 800bee6:	47b8      	blx	r7
 800bee8:	3001      	adds	r0, #1
 800beea:	d1be      	bne.n	800be6a <_printf_float+0x32a>
 800beec:	e689      	b.n	800bc02 <_printf_float+0xc2>
 800beee:	9a05      	ldr	r2, [sp, #20]
 800bef0:	464b      	mov	r3, r9
 800bef2:	4442      	add	r2, r8
 800bef4:	4631      	mov	r1, r6
 800bef6:	4628      	mov	r0, r5
 800bef8:	47b8      	blx	r7
 800befa:	3001      	adds	r0, #1
 800befc:	d1c1      	bne.n	800be82 <_printf_float+0x342>
 800befe:	e680      	b.n	800bc02 <_printf_float+0xc2>
 800bf00:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800bf02:	2a01      	cmp	r2, #1
 800bf04:	dc01      	bgt.n	800bf0a <_printf_float+0x3ca>
 800bf06:	07db      	lsls	r3, r3, #31
 800bf08:	d538      	bpl.n	800bf7c <_printf_float+0x43c>
 800bf0a:	2301      	movs	r3, #1
 800bf0c:	4642      	mov	r2, r8
 800bf0e:	4631      	mov	r1, r6
 800bf10:	4628      	mov	r0, r5
 800bf12:	47b8      	blx	r7
 800bf14:	3001      	adds	r0, #1
 800bf16:	f43f ae74 	beq.w	800bc02 <_printf_float+0xc2>
 800bf1a:	ee18 3a10 	vmov	r3, s16
 800bf1e:	4652      	mov	r2, sl
 800bf20:	4631      	mov	r1, r6
 800bf22:	4628      	mov	r0, r5
 800bf24:	47b8      	blx	r7
 800bf26:	3001      	adds	r0, #1
 800bf28:	f43f ae6b 	beq.w	800bc02 <_printf_float+0xc2>
 800bf2c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800bf30:	2200      	movs	r2, #0
 800bf32:	2300      	movs	r3, #0
 800bf34:	f7f4 fdda 	bl	8000aec <__aeabi_dcmpeq>
 800bf38:	b9d8      	cbnz	r0, 800bf72 <_printf_float+0x432>
 800bf3a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bf3c:	f108 0201 	add.w	r2, r8, #1
 800bf40:	3b01      	subs	r3, #1
 800bf42:	4631      	mov	r1, r6
 800bf44:	4628      	mov	r0, r5
 800bf46:	47b8      	blx	r7
 800bf48:	3001      	adds	r0, #1
 800bf4a:	d10e      	bne.n	800bf6a <_printf_float+0x42a>
 800bf4c:	e659      	b.n	800bc02 <_printf_float+0xc2>
 800bf4e:	2301      	movs	r3, #1
 800bf50:	4652      	mov	r2, sl
 800bf52:	4631      	mov	r1, r6
 800bf54:	4628      	mov	r0, r5
 800bf56:	47b8      	blx	r7
 800bf58:	3001      	adds	r0, #1
 800bf5a:	f43f ae52 	beq.w	800bc02 <_printf_float+0xc2>
 800bf5e:	f108 0801 	add.w	r8, r8, #1
 800bf62:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bf64:	3b01      	subs	r3, #1
 800bf66:	4543      	cmp	r3, r8
 800bf68:	dcf1      	bgt.n	800bf4e <_printf_float+0x40e>
 800bf6a:	464b      	mov	r3, r9
 800bf6c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800bf70:	e6dc      	b.n	800bd2c <_printf_float+0x1ec>
 800bf72:	f04f 0800 	mov.w	r8, #0
 800bf76:	f104 0a1a 	add.w	sl, r4, #26
 800bf7a:	e7f2      	b.n	800bf62 <_printf_float+0x422>
 800bf7c:	2301      	movs	r3, #1
 800bf7e:	4642      	mov	r2, r8
 800bf80:	e7df      	b.n	800bf42 <_printf_float+0x402>
 800bf82:	2301      	movs	r3, #1
 800bf84:	464a      	mov	r2, r9
 800bf86:	4631      	mov	r1, r6
 800bf88:	4628      	mov	r0, r5
 800bf8a:	47b8      	blx	r7
 800bf8c:	3001      	adds	r0, #1
 800bf8e:	f43f ae38 	beq.w	800bc02 <_printf_float+0xc2>
 800bf92:	f108 0801 	add.w	r8, r8, #1
 800bf96:	68e3      	ldr	r3, [r4, #12]
 800bf98:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800bf9a:	1a5b      	subs	r3, r3, r1
 800bf9c:	4543      	cmp	r3, r8
 800bf9e:	dcf0      	bgt.n	800bf82 <_printf_float+0x442>
 800bfa0:	e6fa      	b.n	800bd98 <_printf_float+0x258>
 800bfa2:	f04f 0800 	mov.w	r8, #0
 800bfa6:	f104 0919 	add.w	r9, r4, #25
 800bfaa:	e7f4      	b.n	800bf96 <_printf_float+0x456>

0800bfac <_printf_common>:
 800bfac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bfb0:	4616      	mov	r6, r2
 800bfb2:	4699      	mov	r9, r3
 800bfb4:	688a      	ldr	r2, [r1, #8]
 800bfb6:	690b      	ldr	r3, [r1, #16]
 800bfb8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800bfbc:	4293      	cmp	r3, r2
 800bfbe:	bfb8      	it	lt
 800bfc0:	4613      	movlt	r3, r2
 800bfc2:	6033      	str	r3, [r6, #0]
 800bfc4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800bfc8:	4607      	mov	r7, r0
 800bfca:	460c      	mov	r4, r1
 800bfcc:	b10a      	cbz	r2, 800bfd2 <_printf_common+0x26>
 800bfce:	3301      	adds	r3, #1
 800bfd0:	6033      	str	r3, [r6, #0]
 800bfd2:	6823      	ldr	r3, [r4, #0]
 800bfd4:	0699      	lsls	r1, r3, #26
 800bfd6:	bf42      	ittt	mi
 800bfd8:	6833      	ldrmi	r3, [r6, #0]
 800bfda:	3302      	addmi	r3, #2
 800bfdc:	6033      	strmi	r3, [r6, #0]
 800bfde:	6825      	ldr	r5, [r4, #0]
 800bfe0:	f015 0506 	ands.w	r5, r5, #6
 800bfe4:	d106      	bne.n	800bff4 <_printf_common+0x48>
 800bfe6:	f104 0a19 	add.w	sl, r4, #25
 800bfea:	68e3      	ldr	r3, [r4, #12]
 800bfec:	6832      	ldr	r2, [r6, #0]
 800bfee:	1a9b      	subs	r3, r3, r2
 800bff0:	42ab      	cmp	r3, r5
 800bff2:	dc26      	bgt.n	800c042 <_printf_common+0x96>
 800bff4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800bff8:	1e13      	subs	r3, r2, #0
 800bffa:	6822      	ldr	r2, [r4, #0]
 800bffc:	bf18      	it	ne
 800bffe:	2301      	movne	r3, #1
 800c000:	0692      	lsls	r2, r2, #26
 800c002:	d42b      	bmi.n	800c05c <_printf_common+0xb0>
 800c004:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c008:	4649      	mov	r1, r9
 800c00a:	4638      	mov	r0, r7
 800c00c:	47c0      	blx	r8
 800c00e:	3001      	adds	r0, #1
 800c010:	d01e      	beq.n	800c050 <_printf_common+0xa4>
 800c012:	6823      	ldr	r3, [r4, #0]
 800c014:	68e5      	ldr	r5, [r4, #12]
 800c016:	6832      	ldr	r2, [r6, #0]
 800c018:	f003 0306 	and.w	r3, r3, #6
 800c01c:	2b04      	cmp	r3, #4
 800c01e:	bf08      	it	eq
 800c020:	1aad      	subeq	r5, r5, r2
 800c022:	68a3      	ldr	r3, [r4, #8]
 800c024:	6922      	ldr	r2, [r4, #16]
 800c026:	bf0c      	ite	eq
 800c028:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c02c:	2500      	movne	r5, #0
 800c02e:	4293      	cmp	r3, r2
 800c030:	bfc4      	itt	gt
 800c032:	1a9b      	subgt	r3, r3, r2
 800c034:	18ed      	addgt	r5, r5, r3
 800c036:	2600      	movs	r6, #0
 800c038:	341a      	adds	r4, #26
 800c03a:	42b5      	cmp	r5, r6
 800c03c:	d11a      	bne.n	800c074 <_printf_common+0xc8>
 800c03e:	2000      	movs	r0, #0
 800c040:	e008      	b.n	800c054 <_printf_common+0xa8>
 800c042:	2301      	movs	r3, #1
 800c044:	4652      	mov	r2, sl
 800c046:	4649      	mov	r1, r9
 800c048:	4638      	mov	r0, r7
 800c04a:	47c0      	blx	r8
 800c04c:	3001      	adds	r0, #1
 800c04e:	d103      	bne.n	800c058 <_printf_common+0xac>
 800c050:	f04f 30ff 	mov.w	r0, #4294967295
 800c054:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c058:	3501      	adds	r5, #1
 800c05a:	e7c6      	b.n	800bfea <_printf_common+0x3e>
 800c05c:	18e1      	adds	r1, r4, r3
 800c05e:	1c5a      	adds	r2, r3, #1
 800c060:	2030      	movs	r0, #48	; 0x30
 800c062:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800c066:	4422      	add	r2, r4
 800c068:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800c06c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800c070:	3302      	adds	r3, #2
 800c072:	e7c7      	b.n	800c004 <_printf_common+0x58>
 800c074:	2301      	movs	r3, #1
 800c076:	4622      	mov	r2, r4
 800c078:	4649      	mov	r1, r9
 800c07a:	4638      	mov	r0, r7
 800c07c:	47c0      	blx	r8
 800c07e:	3001      	adds	r0, #1
 800c080:	d0e6      	beq.n	800c050 <_printf_common+0xa4>
 800c082:	3601      	adds	r6, #1
 800c084:	e7d9      	b.n	800c03a <_printf_common+0x8e>
	...

0800c088 <_printf_i>:
 800c088:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c08c:	460c      	mov	r4, r1
 800c08e:	4691      	mov	r9, r2
 800c090:	7e27      	ldrb	r7, [r4, #24]
 800c092:	990c      	ldr	r1, [sp, #48]	; 0x30
 800c094:	2f78      	cmp	r7, #120	; 0x78
 800c096:	4680      	mov	r8, r0
 800c098:	469a      	mov	sl, r3
 800c09a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c09e:	d807      	bhi.n	800c0b0 <_printf_i+0x28>
 800c0a0:	2f62      	cmp	r7, #98	; 0x62
 800c0a2:	d80a      	bhi.n	800c0ba <_printf_i+0x32>
 800c0a4:	2f00      	cmp	r7, #0
 800c0a6:	f000 80d8 	beq.w	800c25a <_printf_i+0x1d2>
 800c0aa:	2f58      	cmp	r7, #88	; 0x58
 800c0ac:	f000 80a3 	beq.w	800c1f6 <_printf_i+0x16e>
 800c0b0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800c0b4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800c0b8:	e03a      	b.n	800c130 <_printf_i+0xa8>
 800c0ba:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800c0be:	2b15      	cmp	r3, #21
 800c0c0:	d8f6      	bhi.n	800c0b0 <_printf_i+0x28>
 800c0c2:	a001      	add	r0, pc, #4	; (adr r0, 800c0c8 <_printf_i+0x40>)
 800c0c4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800c0c8:	0800c121 	.word	0x0800c121
 800c0cc:	0800c135 	.word	0x0800c135
 800c0d0:	0800c0b1 	.word	0x0800c0b1
 800c0d4:	0800c0b1 	.word	0x0800c0b1
 800c0d8:	0800c0b1 	.word	0x0800c0b1
 800c0dc:	0800c0b1 	.word	0x0800c0b1
 800c0e0:	0800c135 	.word	0x0800c135
 800c0e4:	0800c0b1 	.word	0x0800c0b1
 800c0e8:	0800c0b1 	.word	0x0800c0b1
 800c0ec:	0800c0b1 	.word	0x0800c0b1
 800c0f0:	0800c0b1 	.word	0x0800c0b1
 800c0f4:	0800c241 	.word	0x0800c241
 800c0f8:	0800c165 	.word	0x0800c165
 800c0fc:	0800c223 	.word	0x0800c223
 800c100:	0800c0b1 	.word	0x0800c0b1
 800c104:	0800c0b1 	.word	0x0800c0b1
 800c108:	0800c263 	.word	0x0800c263
 800c10c:	0800c0b1 	.word	0x0800c0b1
 800c110:	0800c165 	.word	0x0800c165
 800c114:	0800c0b1 	.word	0x0800c0b1
 800c118:	0800c0b1 	.word	0x0800c0b1
 800c11c:	0800c22b 	.word	0x0800c22b
 800c120:	680b      	ldr	r3, [r1, #0]
 800c122:	1d1a      	adds	r2, r3, #4
 800c124:	681b      	ldr	r3, [r3, #0]
 800c126:	600a      	str	r2, [r1, #0]
 800c128:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800c12c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c130:	2301      	movs	r3, #1
 800c132:	e0a3      	b.n	800c27c <_printf_i+0x1f4>
 800c134:	6825      	ldr	r5, [r4, #0]
 800c136:	6808      	ldr	r0, [r1, #0]
 800c138:	062e      	lsls	r6, r5, #24
 800c13a:	f100 0304 	add.w	r3, r0, #4
 800c13e:	d50a      	bpl.n	800c156 <_printf_i+0xce>
 800c140:	6805      	ldr	r5, [r0, #0]
 800c142:	600b      	str	r3, [r1, #0]
 800c144:	2d00      	cmp	r5, #0
 800c146:	da03      	bge.n	800c150 <_printf_i+0xc8>
 800c148:	232d      	movs	r3, #45	; 0x2d
 800c14a:	426d      	negs	r5, r5
 800c14c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c150:	485e      	ldr	r0, [pc, #376]	; (800c2cc <_printf_i+0x244>)
 800c152:	230a      	movs	r3, #10
 800c154:	e019      	b.n	800c18a <_printf_i+0x102>
 800c156:	f015 0f40 	tst.w	r5, #64	; 0x40
 800c15a:	6805      	ldr	r5, [r0, #0]
 800c15c:	600b      	str	r3, [r1, #0]
 800c15e:	bf18      	it	ne
 800c160:	b22d      	sxthne	r5, r5
 800c162:	e7ef      	b.n	800c144 <_printf_i+0xbc>
 800c164:	680b      	ldr	r3, [r1, #0]
 800c166:	6825      	ldr	r5, [r4, #0]
 800c168:	1d18      	adds	r0, r3, #4
 800c16a:	6008      	str	r0, [r1, #0]
 800c16c:	0628      	lsls	r0, r5, #24
 800c16e:	d501      	bpl.n	800c174 <_printf_i+0xec>
 800c170:	681d      	ldr	r5, [r3, #0]
 800c172:	e002      	b.n	800c17a <_printf_i+0xf2>
 800c174:	0669      	lsls	r1, r5, #25
 800c176:	d5fb      	bpl.n	800c170 <_printf_i+0xe8>
 800c178:	881d      	ldrh	r5, [r3, #0]
 800c17a:	4854      	ldr	r0, [pc, #336]	; (800c2cc <_printf_i+0x244>)
 800c17c:	2f6f      	cmp	r7, #111	; 0x6f
 800c17e:	bf0c      	ite	eq
 800c180:	2308      	moveq	r3, #8
 800c182:	230a      	movne	r3, #10
 800c184:	2100      	movs	r1, #0
 800c186:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800c18a:	6866      	ldr	r6, [r4, #4]
 800c18c:	60a6      	str	r6, [r4, #8]
 800c18e:	2e00      	cmp	r6, #0
 800c190:	bfa2      	ittt	ge
 800c192:	6821      	ldrge	r1, [r4, #0]
 800c194:	f021 0104 	bicge.w	r1, r1, #4
 800c198:	6021      	strge	r1, [r4, #0]
 800c19a:	b90d      	cbnz	r5, 800c1a0 <_printf_i+0x118>
 800c19c:	2e00      	cmp	r6, #0
 800c19e:	d04d      	beq.n	800c23c <_printf_i+0x1b4>
 800c1a0:	4616      	mov	r6, r2
 800c1a2:	fbb5 f1f3 	udiv	r1, r5, r3
 800c1a6:	fb03 5711 	mls	r7, r3, r1, r5
 800c1aa:	5dc7      	ldrb	r7, [r0, r7]
 800c1ac:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800c1b0:	462f      	mov	r7, r5
 800c1b2:	42bb      	cmp	r3, r7
 800c1b4:	460d      	mov	r5, r1
 800c1b6:	d9f4      	bls.n	800c1a2 <_printf_i+0x11a>
 800c1b8:	2b08      	cmp	r3, #8
 800c1ba:	d10b      	bne.n	800c1d4 <_printf_i+0x14c>
 800c1bc:	6823      	ldr	r3, [r4, #0]
 800c1be:	07df      	lsls	r7, r3, #31
 800c1c0:	d508      	bpl.n	800c1d4 <_printf_i+0x14c>
 800c1c2:	6923      	ldr	r3, [r4, #16]
 800c1c4:	6861      	ldr	r1, [r4, #4]
 800c1c6:	4299      	cmp	r1, r3
 800c1c8:	bfde      	ittt	le
 800c1ca:	2330      	movle	r3, #48	; 0x30
 800c1cc:	f806 3c01 	strble.w	r3, [r6, #-1]
 800c1d0:	f106 36ff 	addle.w	r6, r6, #4294967295
 800c1d4:	1b92      	subs	r2, r2, r6
 800c1d6:	6122      	str	r2, [r4, #16]
 800c1d8:	f8cd a000 	str.w	sl, [sp]
 800c1dc:	464b      	mov	r3, r9
 800c1de:	aa03      	add	r2, sp, #12
 800c1e0:	4621      	mov	r1, r4
 800c1e2:	4640      	mov	r0, r8
 800c1e4:	f7ff fee2 	bl	800bfac <_printf_common>
 800c1e8:	3001      	adds	r0, #1
 800c1ea:	d14c      	bne.n	800c286 <_printf_i+0x1fe>
 800c1ec:	f04f 30ff 	mov.w	r0, #4294967295
 800c1f0:	b004      	add	sp, #16
 800c1f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c1f6:	4835      	ldr	r0, [pc, #212]	; (800c2cc <_printf_i+0x244>)
 800c1f8:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800c1fc:	6823      	ldr	r3, [r4, #0]
 800c1fe:	680e      	ldr	r6, [r1, #0]
 800c200:	061f      	lsls	r7, r3, #24
 800c202:	f856 5b04 	ldr.w	r5, [r6], #4
 800c206:	600e      	str	r6, [r1, #0]
 800c208:	d514      	bpl.n	800c234 <_printf_i+0x1ac>
 800c20a:	07d9      	lsls	r1, r3, #31
 800c20c:	bf44      	itt	mi
 800c20e:	f043 0320 	orrmi.w	r3, r3, #32
 800c212:	6023      	strmi	r3, [r4, #0]
 800c214:	b91d      	cbnz	r5, 800c21e <_printf_i+0x196>
 800c216:	6823      	ldr	r3, [r4, #0]
 800c218:	f023 0320 	bic.w	r3, r3, #32
 800c21c:	6023      	str	r3, [r4, #0]
 800c21e:	2310      	movs	r3, #16
 800c220:	e7b0      	b.n	800c184 <_printf_i+0xfc>
 800c222:	6823      	ldr	r3, [r4, #0]
 800c224:	f043 0320 	orr.w	r3, r3, #32
 800c228:	6023      	str	r3, [r4, #0]
 800c22a:	2378      	movs	r3, #120	; 0x78
 800c22c:	4828      	ldr	r0, [pc, #160]	; (800c2d0 <_printf_i+0x248>)
 800c22e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800c232:	e7e3      	b.n	800c1fc <_printf_i+0x174>
 800c234:	065e      	lsls	r6, r3, #25
 800c236:	bf48      	it	mi
 800c238:	b2ad      	uxthmi	r5, r5
 800c23a:	e7e6      	b.n	800c20a <_printf_i+0x182>
 800c23c:	4616      	mov	r6, r2
 800c23e:	e7bb      	b.n	800c1b8 <_printf_i+0x130>
 800c240:	680b      	ldr	r3, [r1, #0]
 800c242:	6826      	ldr	r6, [r4, #0]
 800c244:	6960      	ldr	r0, [r4, #20]
 800c246:	1d1d      	adds	r5, r3, #4
 800c248:	600d      	str	r5, [r1, #0]
 800c24a:	0635      	lsls	r5, r6, #24
 800c24c:	681b      	ldr	r3, [r3, #0]
 800c24e:	d501      	bpl.n	800c254 <_printf_i+0x1cc>
 800c250:	6018      	str	r0, [r3, #0]
 800c252:	e002      	b.n	800c25a <_printf_i+0x1d2>
 800c254:	0671      	lsls	r1, r6, #25
 800c256:	d5fb      	bpl.n	800c250 <_printf_i+0x1c8>
 800c258:	8018      	strh	r0, [r3, #0]
 800c25a:	2300      	movs	r3, #0
 800c25c:	6123      	str	r3, [r4, #16]
 800c25e:	4616      	mov	r6, r2
 800c260:	e7ba      	b.n	800c1d8 <_printf_i+0x150>
 800c262:	680b      	ldr	r3, [r1, #0]
 800c264:	1d1a      	adds	r2, r3, #4
 800c266:	600a      	str	r2, [r1, #0]
 800c268:	681e      	ldr	r6, [r3, #0]
 800c26a:	6862      	ldr	r2, [r4, #4]
 800c26c:	2100      	movs	r1, #0
 800c26e:	4630      	mov	r0, r6
 800c270:	f7f3 ffb6 	bl	80001e0 <memchr>
 800c274:	b108      	cbz	r0, 800c27a <_printf_i+0x1f2>
 800c276:	1b80      	subs	r0, r0, r6
 800c278:	6060      	str	r0, [r4, #4]
 800c27a:	6863      	ldr	r3, [r4, #4]
 800c27c:	6123      	str	r3, [r4, #16]
 800c27e:	2300      	movs	r3, #0
 800c280:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c284:	e7a8      	b.n	800c1d8 <_printf_i+0x150>
 800c286:	6923      	ldr	r3, [r4, #16]
 800c288:	4632      	mov	r2, r6
 800c28a:	4649      	mov	r1, r9
 800c28c:	4640      	mov	r0, r8
 800c28e:	47d0      	blx	sl
 800c290:	3001      	adds	r0, #1
 800c292:	d0ab      	beq.n	800c1ec <_printf_i+0x164>
 800c294:	6823      	ldr	r3, [r4, #0]
 800c296:	079b      	lsls	r3, r3, #30
 800c298:	d413      	bmi.n	800c2c2 <_printf_i+0x23a>
 800c29a:	68e0      	ldr	r0, [r4, #12]
 800c29c:	9b03      	ldr	r3, [sp, #12]
 800c29e:	4298      	cmp	r0, r3
 800c2a0:	bfb8      	it	lt
 800c2a2:	4618      	movlt	r0, r3
 800c2a4:	e7a4      	b.n	800c1f0 <_printf_i+0x168>
 800c2a6:	2301      	movs	r3, #1
 800c2a8:	4632      	mov	r2, r6
 800c2aa:	4649      	mov	r1, r9
 800c2ac:	4640      	mov	r0, r8
 800c2ae:	47d0      	blx	sl
 800c2b0:	3001      	adds	r0, #1
 800c2b2:	d09b      	beq.n	800c1ec <_printf_i+0x164>
 800c2b4:	3501      	adds	r5, #1
 800c2b6:	68e3      	ldr	r3, [r4, #12]
 800c2b8:	9903      	ldr	r1, [sp, #12]
 800c2ba:	1a5b      	subs	r3, r3, r1
 800c2bc:	42ab      	cmp	r3, r5
 800c2be:	dcf2      	bgt.n	800c2a6 <_printf_i+0x21e>
 800c2c0:	e7eb      	b.n	800c29a <_printf_i+0x212>
 800c2c2:	2500      	movs	r5, #0
 800c2c4:	f104 0619 	add.w	r6, r4, #25
 800c2c8:	e7f5      	b.n	800c2b6 <_printf_i+0x22e>
 800c2ca:	bf00      	nop
 800c2cc:	08021ccb 	.word	0x08021ccb
 800c2d0:	08021cdc 	.word	0x08021cdc

0800c2d4 <_sbrk_r>:
 800c2d4:	b538      	push	{r3, r4, r5, lr}
 800c2d6:	4d06      	ldr	r5, [pc, #24]	; (800c2f0 <_sbrk_r+0x1c>)
 800c2d8:	2300      	movs	r3, #0
 800c2da:	4604      	mov	r4, r0
 800c2dc:	4608      	mov	r0, r1
 800c2de:	602b      	str	r3, [r5, #0]
 800c2e0:	f7f5 ffe0 	bl	80022a4 <_sbrk>
 800c2e4:	1c43      	adds	r3, r0, #1
 800c2e6:	d102      	bne.n	800c2ee <_sbrk_r+0x1a>
 800c2e8:	682b      	ldr	r3, [r5, #0]
 800c2ea:	b103      	cbz	r3, 800c2ee <_sbrk_r+0x1a>
 800c2ec:	6023      	str	r3, [r4, #0]
 800c2ee:	bd38      	pop	{r3, r4, r5, pc}
 800c2f0:	20002040 	.word	0x20002040

0800c2f4 <_raise_r>:
 800c2f4:	291f      	cmp	r1, #31
 800c2f6:	b538      	push	{r3, r4, r5, lr}
 800c2f8:	4604      	mov	r4, r0
 800c2fa:	460d      	mov	r5, r1
 800c2fc:	d904      	bls.n	800c308 <_raise_r+0x14>
 800c2fe:	2316      	movs	r3, #22
 800c300:	6003      	str	r3, [r0, #0]
 800c302:	f04f 30ff 	mov.w	r0, #4294967295
 800c306:	bd38      	pop	{r3, r4, r5, pc}
 800c308:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800c30a:	b112      	cbz	r2, 800c312 <_raise_r+0x1e>
 800c30c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c310:	b94b      	cbnz	r3, 800c326 <_raise_r+0x32>
 800c312:	4620      	mov	r0, r4
 800c314:	f000 f830 	bl	800c378 <_getpid_r>
 800c318:	462a      	mov	r2, r5
 800c31a:	4601      	mov	r1, r0
 800c31c:	4620      	mov	r0, r4
 800c31e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c322:	f000 b817 	b.w	800c354 <_kill_r>
 800c326:	2b01      	cmp	r3, #1
 800c328:	d00a      	beq.n	800c340 <_raise_r+0x4c>
 800c32a:	1c59      	adds	r1, r3, #1
 800c32c:	d103      	bne.n	800c336 <_raise_r+0x42>
 800c32e:	2316      	movs	r3, #22
 800c330:	6003      	str	r3, [r0, #0]
 800c332:	2001      	movs	r0, #1
 800c334:	e7e7      	b.n	800c306 <_raise_r+0x12>
 800c336:	2400      	movs	r4, #0
 800c338:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800c33c:	4628      	mov	r0, r5
 800c33e:	4798      	blx	r3
 800c340:	2000      	movs	r0, #0
 800c342:	e7e0      	b.n	800c306 <_raise_r+0x12>

0800c344 <raise>:
 800c344:	4b02      	ldr	r3, [pc, #8]	; (800c350 <raise+0xc>)
 800c346:	4601      	mov	r1, r0
 800c348:	6818      	ldr	r0, [r3, #0]
 800c34a:	f7ff bfd3 	b.w	800c2f4 <_raise_r>
 800c34e:	bf00      	nop
 800c350:	20000040 	.word	0x20000040

0800c354 <_kill_r>:
 800c354:	b538      	push	{r3, r4, r5, lr}
 800c356:	4d07      	ldr	r5, [pc, #28]	; (800c374 <_kill_r+0x20>)
 800c358:	2300      	movs	r3, #0
 800c35a:	4604      	mov	r4, r0
 800c35c:	4608      	mov	r0, r1
 800c35e:	4611      	mov	r1, r2
 800c360:	602b      	str	r3, [r5, #0]
 800c362:	f7f5 ff17 	bl	8002194 <_kill>
 800c366:	1c43      	adds	r3, r0, #1
 800c368:	d102      	bne.n	800c370 <_kill_r+0x1c>
 800c36a:	682b      	ldr	r3, [r5, #0]
 800c36c:	b103      	cbz	r3, 800c370 <_kill_r+0x1c>
 800c36e:	6023      	str	r3, [r4, #0]
 800c370:	bd38      	pop	{r3, r4, r5, pc}
 800c372:	bf00      	nop
 800c374:	20002040 	.word	0x20002040

0800c378 <_getpid_r>:
 800c378:	f7f5 bf04 	b.w	8002184 <_getpid>

0800c37c <__sread>:
 800c37c:	b510      	push	{r4, lr}
 800c37e:	460c      	mov	r4, r1
 800c380:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c384:	f001 fbce 	bl	800db24 <_read_r>
 800c388:	2800      	cmp	r0, #0
 800c38a:	bfab      	itete	ge
 800c38c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800c38e:	89a3      	ldrhlt	r3, [r4, #12]
 800c390:	181b      	addge	r3, r3, r0
 800c392:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800c396:	bfac      	ite	ge
 800c398:	6563      	strge	r3, [r4, #84]	; 0x54
 800c39a:	81a3      	strhlt	r3, [r4, #12]
 800c39c:	bd10      	pop	{r4, pc}

0800c39e <__swrite>:
 800c39e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c3a2:	461f      	mov	r7, r3
 800c3a4:	898b      	ldrh	r3, [r1, #12]
 800c3a6:	05db      	lsls	r3, r3, #23
 800c3a8:	4605      	mov	r5, r0
 800c3aa:	460c      	mov	r4, r1
 800c3ac:	4616      	mov	r6, r2
 800c3ae:	d505      	bpl.n	800c3bc <__swrite+0x1e>
 800c3b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c3b4:	2302      	movs	r3, #2
 800c3b6:	2200      	movs	r2, #0
 800c3b8:	f001 f818 	bl	800d3ec <_lseek_r>
 800c3bc:	89a3      	ldrh	r3, [r4, #12]
 800c3be:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c3c2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c3c6:	81a3      	strh	r3, [r4, #12]
 800c3c8:	4632      	mov	r2, r6
 800c3ca:	463b      	mov	r3, r7
 800c3cc:	4628      	mov	r0, r5
 800c3ce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c3d2:	f000 b87b 	b.w	800c4cc <_write_r>

0800c3d6 <__sseek>:
 800c3d6:	b510      	push	{r4, lr}
 800c3d8:	460c      	mov	r4, r1
 800c3da:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c3de:	f001 f805 	bl	800d3ec <_lseek_r>
 800c3e2:	1c43      	adds	r3, r0, #1
 800c3e4:	89a3      	ldrh	r3, [r4, #12]
 800c3e6:	bf15      	itete	ne
 800c3e8:	6560      	strne	r0, [r4, #84]	; 0x54
 800c3ea:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800c3ee:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800c3f2:	81a3      	strheq	r3, [r4, #12]
 800c3f4:	bf18      	it	ne
 800c3f6:	81a3      	strhne	r3, [r4, #12]
 800c3f8:	bd10      	pop	{r4, pc}

0800c3fa <__sclose>:
 800c3fa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c3fe:	f000 b947 	b.w	800c690 <_close_r>

0800c402 <strncmp>:
 800c402:	b510      	push	{r4, lr}
 800c404:	b16a      	cbz	r2, 800c422 <strncmp+0x20>
 800c406:	3901      	subs	r1, #1
 800c408:	1884      	adds	r4, r0, r2
 800c40a:	f810 3b01 	ldrb.w	r3, [r0], #1
 800c40e:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800c412:	4293      	cmp	r3, r2
 800c414:	d103      	bne.n	800c41e <strncmp+0x1c>
 800c416:	42a0      	cmp	r0, r4
 800c418:	d001      	beq.n	800c41e <strncmp+0x1c>
 800c41a:	2b00      	cmp	r3, #0
 800c41c:	d1f5      	bne.n	800c40a <strncmp+0x8>
 800c41e:	1a98      	subs	r0, r3, r2
 800c420:	bd10      	pop	{r4, pc}
 800c422:	4610      	mov	r0, r2
 800c424:	e7fc      	b.n	800c420 <strncmp+0x1e>
	...

0800c428 <__swbuf_r>:
 800c428:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c42a:	460e      	mov	r6, r1
 800c42c:	4614      	mov	r4, r2
 800c42e:	4605      	mov	r5, r0
 800c430:	b118      	cbz	r0, 800c43a <__swbuf_r+0x12>
 800c432:	6983      	ldr	r3, [r0, #24]
 800c434:	b90b      	cbnz	r3, 800c43a <__swbuf_r+0x12>
 800c436:	f7fe ff6d 	bl	800b314 <__sinit>
 800c43a:	4b21      	ldr	r3, [pc, #132]	; (800c4c0 <__swbuf_r+0x98>)
 800c43c:	429c      	cmp	r4, r3
 800c43e:	d12b      	bne.n	800c498 <__swbuf_r+0x70>
 800c440:	686c      	ldr	r4, [r5, #4]
 800c442:	69a3      	ldr	r3, [r4, #24]
 800c444:	60a3      	str	r3, [r4, #8]
 800c446:	89a3      	ldrh	r3, [r4, #12]
 800c448:	071a      	lsls	r2, r3, #28
 800c44a:	d52f      	bpl.n	800c4ac <__swbuf_r+0x84>
 800c44c:	6923      	ldr	r3, [r4, #16]
 800c44e:	b36b      	cbz	r3, 800c4ac <__swbuf_r+0x84>
 800c450:	6923      	ldr	r3, [r4, #16]
 800c452:	6820      	ldr	r0, [r4, #0]
 800c454:	1ac0      	subs	r0, r0, r3
 800c456:	6963      	ldr	r3, [r4, #20]
 800c458:	b2f6      	uxtb	r6, r6
 800c45a:	4283      	cmp	r3, r0
 800c45c:	4637      	mov	r7, r6
 800c45e:	dc04      	bgt.n	800c46a <__swbuf_r+0x42>
 800c460:	4621      	mov	r1, r4
 800c462:	4628      	mov	r0, r5
 800c464:	f7fe fec2 	bl	800b1ec <_fflush_r>
 800c468:	bb30      	cbnz	r0, 800c4b8 <__swbuf_r+0x90>
 800c46a:	68a3      	ldr	r3, [r4, #8]
 800c46c:	3b01      	subs	r3, #1
 800c46e:	60a3      	str	r3, [r4, #8]
 800c470:	6823      	ldr	r3, [r4, #0]
 800c472:	1c5a      	adds	r2, r3, #1
 800c474:	6022      	str	r2, [r4, #0]
 800c476:	701e      	strb	r6, [r3, #0]
 800c478:	6963      	ldr	r3, [r4, #20]
 800c47a:	3001      	adds	r0, #1
 800c47c:	4283      	cmp	r3, r0
 800c47e:	d004      	beq.n	800c48a <__swbuf_r+0x62>
 800c480:	89a3      	ldrh	r3, [r4, #12]
 800c482:	07db      	lsls	r3, r3, #31
 800c484:	d506      	bpl.n	800c494 <__swbuf_r+0x6c>
 800c486:	2e0a      	cmp	r6, #10
 800c488:	d104      	bne.n	800c494 <__swbuf_r+0x6c>
 800c48a:	4621      	mov	r1, r4
 800c48c:	4628      	mov	r0, r5
 800c48e:	f7fe fead 	bl	800b1ec <_fflush_r>
 800c492:	b988      	cbnz	r0, 800c4b8 <__swbuf_r+0x90>
 800c494:	4638      	mov	r0, r7
 800c496:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c498:	4b0a      	ldr	r3, [pc, #40]	; (800c4c4 <__swbuf_r+0x9c>)
 800c49a:	429c      	cmp	r4, r3
 800c49c:	d101      	bne.n	800c4a2 <__swbuf_r+0x7a>
 800c49e:	68ac      	ldr	r4, [r5, #8]
 800c4a0:	e7cf      	b.n	800c442 <__swbuf_r+0x1a>
 800c4a2:	4b09      	ldr	r3, [pc, #36]	; (800c4c8 <__swbuf_r+0xa0>)
 800c4a4:	429c      	cmp	r4, r3
 800c4a6:	bf08      	it	eq
 800c4a8:	68ec      	ldreq	r4, [r5, #12]
 800c4aa:	e7ca      	b.n	800c442 <__swbuf_r+0x1a>
 800c4ac:	4621      	mov	r1, r4
 800c4ae:	4628      	mov	r0, r5
 800c4b0:	f000 f81e 	bl	800c4f0 <__swsetup_r>
 800c4b4:	2800      	cmp	r0, #0
 800c4b6:	d0cb      	beq.n	800c450 <__swbuf_r+0x28>
 800c4b8:	f04f 37ff 	mov.w	r7, #4294967295
 800c4bc:	e7ea      	b.n	800c494 <__swbuf_r+0x6c>
 800c4be:	bf00      	nop
 800c4c0:	08021c64 	.word	0x08021c64
 800c4c4:	08021c84 	.word	0x08021c84
 800c4c8:	08021c44 	.word	0x08021c44

0800c4cc <_write_r>:
 800c4cc:	b538      	push	{r3, r4, r5, lr}
 800c4ce:	4d07      	ldr	r5, [pc, #28]	; (800c4ec <_write_r+0x20>)
 800c4d0:	4604      	mov	r4, r0
 800c4d2:	4608      	mov	r0, r1
 800c4d4:	4611      	mov	r1, r2
 800c4d6:	2200      	movs	r2, #0
 800c4d8:	602a      	str	r2, [r5, #0]
 800c4da:	461a      	mov	r2, r3
 800c4dc:	f7f5 fe91 	bl	8002202 <_write>
 800c4e0:	1c43      	adds	r3, r0, #1
 800c4e2:	d102      	bne.n	800c4ea <_write_r+0x1e>
 800c4e4:	682b      	ldr	r3, [r5, #0]
 800c4e6:	b103      	cbz	r3, 800c4ea <_write_r+0x1e>
 800c4e8:	6023      	str	r3, [r4, #0]
 800c4ea:	bd38      	pop	{r3, r4, r5, pc}
 800c4ec:	20002040 	.word	0x20002040

0800c4f0 <__swsetup_r>:
 800c4f0:	4b32      	ldr	r3, [pc, #200]	; (800c5bc <__swsetup_r+0xcc>)
 800c4f2:	b570      	push	{r4, r5, r6, lr}
 800c4f4:	681d      	ldr	r5, [r3, #0]
 800c4f6:	4606      	mov	r6, r0
 800c4f8:	460c      	mov	r4, r1
 800c4fa:	b125      	cbz	r5, 800c506 <__swsetup_r+0x16>
 800c4fc:	69ab      	ldr	r3, [r5, #24]
 800c4fe:	b913      	cbnz	r3, 800c506 <__swsetup_r+0x16>
 800c500:	4628      	mov	r0, r5
 800c502:	f7fe ff07 	bl	800b314 <__sinit>
 800c506:	4b2e      	ldr	r3, [pc, #184]	; (800c5c0 <__swsetup_r+0xd0>)
 800c508:	429c      	cmp	r4, r3
 800c50a:	d10f      	bne.n	800c52c <__swsetup_r+0x3c>
 800c50c:	686c      	ldr	r4, [r5, #4]
 800c50e:	89a3      	ldrh	r3, [r4, #12]
 800c510:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c514:	0719      	lsls	r1, r3, #28
 800c516:	d42c      	bmi.n	800c572 <__swsetup_r+0x82>
 800c518:	06dd      	lsls	r5, r3, #27
 800c51a:	d411      	bmi.n	800c540 <__swsetup_r+0x50>
 800c51c:	2309      	movs	r3, #9
 800c51e:	6033      	str	r3, [r6, #0]
 800c520:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800c524:	81a3      	strh	r3, [r4, #12]
 800c526:	f04f 30ff 	mov.w	r0, #4294967295
 800c52a:	e03e      	b.n	800c5aa <__swsetup_r+0xba>
 800c52c:	4b25      	ldr	r3, [pc, #148]	; (800c5c4 <__swsetup_r+0xd4>)
 800c52e:	429c      	cmp	r4, r3
 800c530:	d101      	bne.n	800c536 <__swsetup_r+0x46>
 800c532:	68ac      	ldr	r4, [r5, #8]
 800c534:	e7eb      	b.n	800c50e <__swsetup_r+0x1e>
 800c536:	4b24      	ldr	r3, [pc, #144]	; (800c5c8 <__swsetup_r+0xd8>)
 800c538:	429c      	cmp	r4, r3
 800c53a:	bf08      	it	eq
 800c53c:	68ec      	ldreq	r4, [r5, #12]
 800c53e:	e7e6      	b.n	800c50e <__swsetup_r+0x1e>
 800c540:	0758      	lsls	r0, r3, #29
 800c542:	d512      	bpl.n	800c56a <__swsetup_r+0x7a>
 800c544:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c546:	b141      	cbz	r1, 800c55a <__swsetup_r+0x6a>
 800c548:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c54c:	4299      	cmp	r1, r3
 800c54e:	d002      	beq.n	800c556 <__swsetup_r+0x66>
 800c550:	4630      	mov	r0, r6
 800c552:	f7ff f851 	bl	800b5f8 <_free_r>
 800c556:	2300      	movs	r3, #0
 800c558:	6363      	str	r3, [r4, #52]	; 0x34
 800c55a:	89a3      	ldrh	r3, [r4, #12]
 800c55c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800c560:	81a3      	strh	r3, [r4, #12]
 800c562:	2300      	movs	r3, #0
 800c564:	6063      	str	r3, [r4, #4]
 800c566:	6923      	ldr	r3, [r4, #16]
 800c568:	6023      	str	r3, [r4, #0]
 800c56a:	89a3      	ldrh	r3, [r4, #12]
 800c56c:	f043 0308 	orr.w	r3, r3, #8
 800c570:	81a3      	strh	r3, [r4, #12]
 800c572:	6923      	ldr	r3, [r4, #16]
 800c574:	b94b      	cbnz	r3, 800c58a <__swsetup_r+0x9a>
 800c576:	89a3      	ldrh	r3, [r4, #12]
 800c578:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800c57c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c580:	d003      	beq.n	800c58a <__swsetup_r+0x9a>
 800c582:	4621      	mov	r1, r4
 800c584:	4630      	mov	r0, r6
 800c586:	f7fe ffc1 	bl	800b50c <__smakebuf_r>
 800c58a:	89a0      	ldrh	r0, [r4, #12]
 800c58c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c590:	f010 0301 	ands.w	r3, r0, #1
 800c594:	d00a      	beq.n	800c5ac <__swsetup_r+0xbc>
 800c596:	2300      	movs	r3, #0
 800c598:	60a3      	str	r3, [r4, #8]
 800c59a:	6963      	ldr	r3, [r4, #20]
 800c59c:	425b      	negs	r3, r3
 800c59e:	61a3      	str	r3, [r4, #24]
 800c5a0:	6923      	ldr	r3, [r4, #16]
 800c5a2:	b943      	cbnz	r3, 800c5b6 <__swsetup_r+0xc6>
 800c5a4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800c5a8:	d1ba      	bne.n	800c520 <__swsetup_r+0x30>
 800c5aa:	bd70      	pop	{r4, r5, r6, pc}
 800c5ac:	0781      	lsls	r1, r0, #30
 800c5ae:	bf58      	it	pl
 800c5b0:	6963      	ldrpl	r3, [r4, #20]
 800c5b2:	60a3      	str	r3, [r4, #8]
 800c5b4:	e7f4      	b.n	800c5a0 <__swsetup_r+0xb0>
 800c5b6:	2000      	movs	r0, #0
 800c5b8:	e7f7      	b.n	800c5aa <__swsetup_r+0xba>
 800c5ba:	bf00      	nop
 800c5bc:	20000040 	.word	0x20000040
 800c5c0:	08021c64 	.word	0x08021c64
 800c5c4:	08021c84 	.word	0x08021c84
 800c5c8:	08021c44 	.word	0x08021c44

0800c5cc <__register_exitproc>:
 800c5cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c5d0:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 800c68c <__register_exitproc+0xc0>
 800c5d4:	4606      	mov	r6, r0
 800c5d6:	f8d8 0000 	ldr.w	r0, [r8]
 800c5da:	461f      	mov	r7, r3
 800c5dc:	460d      	mov	r5, r1
 800c5de:	4691      	mov	r9, r2
 800c5e0:	f7fe ff6d 	bl	800b4be <__retarget_lock_acquire_recursive>
 800c5e4:	4b25      	ldr	r3, [pc, #148]	; (800c67c <__register_exitproc+0xb0>)
 800c5e6:	681c      	ldr	r4, [r3, #0]
 800c5e8:	b934      	cbnz	r4, 800c5f8 <__register_exitproc+0x2c>
 800c5ea:	4c25      	ldr	r4, [pc, #148]	; (800c680 <__register_exitproc+0xb4>)
 800c5ec:	601c      	str	r4, [r3, #0]
 800c5ee:	4b25      	ldr	r3, [pc, #148]	; (800c684 <__register_exitproc+0xb8>)
 800c5f0:	b113      	cbz	r3, 800c5f8 <__register_exitproc+0x2c>
 800c5f2:	681b      	ldr	r3, [r3, #0]
 800c5f4:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 800c5f8:	6863      	ldr	r3, [r4, #4]
 800c5fa:	2b1f      	cmp	r3, #31
 800c5fc:	dd07      	ble.n	800c60e <__register_exitproc+0x42>
 800c5fe:	f8d8 0000 	ldr.w	r0, [r8]
 800c602:	f7fe ff5e 	bl	800b4c2 <__retarget_lock_release_recursive>
 800c606:	f04f 30ff 	mov.w	r0, #4294967295
 800c60a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c60e:	b34e      	cbz	r6, 800c664 <__register_exitproc+0x98>
 800c610:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 800c614:	b988      	cbnz	r0, 800c63a <__register_exitproc+0x6e>
 800c616:	4b1c      	ldr	r3, [pc, #112]	; (800c688 <__register_exitproc+0xbc>)
 800c618:	b923      	cbnz	r3, 800c624 <__register_exitproc+0x58>
 800c61a:	f8d8 0000 	ldr.w	r0, [r8]
 800c61e:	f7fe ff4f 	bl	800b4c0 <__retarget_lock_release>
 800c622:	e7f0      	b.n	800c606 <__register_exitproc+0x3a>
 800c624:	f44f 7084 	mov.w	r0, #264	; 0x108
 800c628:	f7fe ffb0 	bl	800b58c <malloc>
 800c62c:	2800      	cmp	r0, #0
 800c62e:	d0f4      	beq.n	800c61a <__register_exitproc+0x4e>
 800c630:	2300      	movs	r3, #0
 800c632:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
 800c636:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 800c63a:	6863      	ldr	r3, [r4, #4]
 800c63c:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
 800c640:	2201      	movs	r2, #1
 800c642:	409a      	lsls	r2, r3
 800c644:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 800c648:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 800c64c:	4313      	orrs	r3, r2
 800c64e:	2e02      	cmp	r6, #2
 800c650:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 800c654:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
 800c658:	bf02      	ittt	eq
 800c65a:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
 800c65e:	431a      	orreq	r2, r3
 800c660:	f8c0 2104 	streq.w	r2, [r0, #260]	; 0x104
 800c664:	6863      	ldr	r3, [r4, #4]
 800c666:	f8d8 0000 	ldr.w	r0, [r8]
 800c66a:	1c5a      	adds	r2, r3, #1
 800c66c:	3302      	adds	r3, #2
 800c66e:	6062      	str	r2, [r4, #4]
 800c670:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
 800c674:	f7fe ff25 	bl	800b4c2 <__retarget_lock_release_recursive>
 800c678:	2000      	movs	r0, #0
 800c67a:	e7c6      	b.n	800c60a <__register_exitproc+0x3e>
 800c67c:	2000202c 	.word	0x2000202c
 800c680:	20001fa0 	.word	0x20001fa0
 800c684:	00000000 	.word	0x00000000
 800c688:	0800b58d 	.word	0x0800b58d
 800c68c:	200000a4 	.word	0x200000a4

0800c690 <_close_r>:
 800c690:	b538      	push	{r3, r4, r5, lr}
 800c692:	4d06      	ldr	r5, [pc, #24]	; (800c6ac <_close_r+0x1c>)
 800c694:	2300      	movs	r3, #0
 800c696:	4604      	mov	r4, r0
 800c698:	4608      	mov	r0, r1
 800c69a:	602b      	str	r3, [r5, #0]
 800c69c:	f7f5 fdcd 	bl	800223a <_close>
 800c6a0:	1c43      	adds	r3, r0, #1
 800c6a2:	d102      	bne.n	800c6aa <_close_r+0x1a>
 800c6a4:	682b      	ldr	r3, [r5, #0]
 800c6a6:	b103      	cbz	r3, 800c6aa <_close_r+0x1a>
 800c6a8:	6023      	str	r3, [r4, #0]
 800c6aa:	bd38      	pop	{r3, r4, r5, pc}
 800c6ac:	20002040 	.word	0x20002040

0800c6b0 <quorem>:
 800c6b0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c6b4:	6903      	ldr	r3, [r0, #16]
 800c6b6:	690c      	ldr	r4, [r1, #16]
 800c6b8:	42a3      	cmp	r3, r4
 800c6ba:	4607      	mov	r7, r0
 800c6bc:	f2c0 8081 	blt.w	800c7c2 <quorem+0x112>
 800c6c0:	3c01      	subs	r4, #1
 800c6c2:	f101 0814 	add.w	r8, r1, #20
 800c6c6:	f100 0514 	add.w	r5, r0, #20
 800c6ca:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c6ce:	9301      	str	r3, [sp, #4]
 800c6d0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800c6d4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c6d8:	3301      	adds	r3, #1
 800c6da:	429a      	cmp	r2, r3
 800c6dc:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800c6e0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800c6e4:	fbb2 f6f3 	udiv	r6, r2, r3
 800c6e8:	d331      	bcc.n	800c74e <quorem+0x9e>
 800c6ea:	f04f 0e00 	mov.w	lr, #0
 800c6ee:	4640      	mov	r0, r8
 800c6f0:	46ac      	mov	ip, r5
 800c6f2:	46f2      	mov	sl, lr
 800c6f4:	f850 2b04 	ldr.w	r2, [r0], #4
 800c6f8:	b293      	uxth	r3, r2
 800c6fa:	fb06 e303 	mla	r3, r6, r3, lr
 800c6fe:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800c702:	b29b      	uxth	r3, r3
 800c704:	ebaa 0303 	sub.w	r3, sl, r3
 800c708:	0c12      	lsrs	r2, r2, #16
 800c70a:	f8dc a000 	ldr.w	sl, [ip]
 800c70e:	fb06 e202 	mla	r2, r6, r2, lr
 800c712:	fa13 f38a 	uxtah	r3, r3, sl
 800c716:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800c71a:	fa1f fa82 	uxth.w	sl, r2
 800c71e:	f8dc 2000 	ldr.w	r2, [ip]
 800c722:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800c726:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800c72a:	b29b      	uxth	r3, r3
 800c72c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c730:	4581      	cmp	r9, r0
 800c732:	f84c 3b04 	str.w	r3, [ip], #4
 800c736:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800c73a:	d2db      	bcs.n	800c6f4 <quorem+0x44>
 800c73c:	f855 300b 	ldr.w	r3, [r5, fp]
 800c740:	b92b      	cbnz	r3, 800c74e <quorem+0x9e>
 800c742:	9b01      	ldr	r3, [sp, #4]
 800c744:	3b04      	subs	r3, #4
 800c746:	429d      	cmp	r5, r3
 800c748:	461a      	mov	r2, r3
 800c74a:	d32e      	bcc.n	800c7aa <quorem+0xfa>
 800c74c:	613c      	str	r4, [r7, #16]
 800c74e:	4638      	mov	r0, r7
 800c750:	f001 f8e8 	bl	800d924 <__mcmp>
 800c754:	2800      	cmp	r0, #0
 800c756:	db24      	blt.n	800c7a2 <quorem+0xf2>
 800c758:	3601      	adds	r6, #1
 800c75a:	4628      	mov	r0, r5
 800c75c:	f04f 0c00 	mov.w	ip, #0
 800c760:	f858 2b04 	ldr.w	r2, [r8], #4
 800c764:	f8d0 e000 	ldr.w	lr, [r0]
 800c768:	b293      	uxth	r3, r2
 800c76a:	ebac 0303 	sub.w	r3, ip, r3
 800c76e:	0c12      	lsrs	r2, r2, #16
 800c770:	fa13 f38e 	uxtah	r3, r3, lr
 800c774:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800c778:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800c77c:	b29b      	uxth	r3, r3
 800c77e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c782:	45c1      	cmp	r9, r8
 800c784:	f840 3b04 	str.w	r3, [r0], #4
 800c788:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800c78c:	d2e8      	bcs.n	800c760 <quorem+0xb0>
 800c78e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c792:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c796:	b922      	cbnz	r2, 800c7a2 <quorem+0xf2>
 800c798:	3b04      	subs	r3, #4
 800c79a:	429d      	cmp	r5, r3
 800c79c:	461a      	mov	r2, r3
 800c79e:	d30a      	bcc.n	800c7b6 <quorem+0x106>
 800c7a0:	613c      	str	r4, [r7, #16]
 800c7a2:	4630      	mov	r0, r6
 800c7a4:	b003      	add	sp, #12
 800c7a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c7aa:	6812      	ldr	r2, [r2, #0]
 800c7ac:	3b04      	subs	r3, #4
 800c7ae:	2a00      	cmp	r2, #0
 800c7b0:	d1cc      	bne.n	800c74c <quorem+0x9c>
 800c7b2:	3c01      	subs	r4, #1
 800c7b4:	e7c7      	b.n	800c746 <quorem+0x96>
 800c7b6:	6812      	ldr	r2, [r2, #0]
 800c7b8:	3b04      	subs	r3, #4
 800c7ba:	2a00      	cmp	r2, #0
 800c7bc:	d1f0      	bne.n	800c7a0 <quorem+0xf0>
 800c7be:	3c01      	subs	r4, #1
 800c7c0:	e7eb      	b.n	800c79a <quorem+0xea>
 800c7c2:	2000      	movs	r0, #0
 800c7c4:	e7ee      	b.n	800c7a4 <quorem+0xf4>
	...

0800c7c8 <_dtoa_r>:
 800c7c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c7cc:	ed2d 8b02 	vpush	{d8}
 800c7d0:	ec57 6b10 	vmov	r6, r7, d0
 800c7d4:	b095      	sub	sp, #84	; 0x54
 800c7d6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800c7d8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800c7dc:	9105      	str	r1, [sp, #20]
 800c7de:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800c7e2:	4604      	mov	r4, r0
 800c7e4:	9209      	str	r2, [sp, #36]	; 0x24
 800c7e6:	930f      	str	r3, [sp, #60]	; 0x3c
 800c7e8:	b975      	cbnz	r5, 800c808 <_dtoa_r+0x40>
 800c7ea:	2010      	movs	r0, #16
 800c7ec:	f7fe fece 	bl	800b58c <malloc>
 800c7f0:	4602      	mov	r2, r0
 800c7f2:	6260      	str	r0, [r4, #36]	; 0x24
 800c7f4:	b920      	cbnz	r0, 800c800 <_dtoa_r+0x38>
 800c7f6:	4bb2      	ldr	r3, [pc, #712]	; (800cac0 <_dtoa_r+0x2f8>)
 800c7f8:	21ea      	movs	r1, #234	; 0xea
 800c7fa:	48b2      	ldr	r0, [pc, #712]	; (800cac4 <_dtoa_r+0x2fc>)
 800c7fc:	f7fe fc46 	bl	800b08c <__assert_func>
 800c800:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800c804:	6005      	str	r5, [r0, #0]
 800c806:	60c5      	str	r5, [r0, #12]
 800c808:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c80a:	6819      	ldr	r1, [r3, #0]
 800c80c:	b151      	cbz	r1, 800c824 <_dtoa_r+0x5c>
 800c80e:	685a      	ldr	r2, [r3, #4]
 800c810:	604a      	str	r2, [r1, #4]
 800c812:	2301      	movs	r3, #1
 800c814:	4093      	lsls	r3, r2
 800c816:	608b      	str	r3, [r1, #8]
 800c818:	4620      	mov	r0, r4
 800c81a:	f000 fe45 	bl	800d4a8 <_Bfree>
 800c81e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c820:	2200      	movs	r2, #0
 800c822:	601a      	str	r2, [r3, #0]
 800c824:	1e3b      	subs	r3, r7, #0
 800c826:	bfb9      	ittee	lt
 800c828:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800c82c:	9303      	strlt	r3, [sp, #12]
 800c82e:	2300      	movge	r3, #0
 800c830:	f8c8 3000 	strge.w	r3, [r8]
 800c834:	f8dd 900c 	ldr.w	r9, [sp, #12]
 800c838:	4ba3      	ldr	r3, [pc, #652]	; (800cac8 <_dtoa_r+0x300>)
 800c83a:	bfbc      	itt	lt
 800c83c:	2201      	movlt	r2, #1
 800c83e:	f8c8 2000 	strlt.w	r2, [r8]
 800c842:	ea33 0309 	bics.w	r3, r3, r9
 800c846:	d11b      	bne.n	800c880 <_dtoa_r+0xb8>
 800c848:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800c84a:	f242 730f 	movw	r3, #9999	; 0x270f
 800c84e:	6013      	str	r3, [r2, #0]
 800c850:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800c854:	4333      	orrs	r3, r6
 800c856:	f000 857a 	beq.w	800d34e <_dtoa_r+0xb86>
 800c85a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c85c:	b963      	cbnz	r3, 800c878 <_dtoa_r+0xb0>
 800c85e:	4b9b      	ldr	r3, [pc, #620]	; (800cacc <_dtoa_r+0x304>)
 800c860:	e024      	b.n	800c8ac <_dtoa_r+0xe4>
 800c862:	4b9b      	ldr	r3, [pc, #620]	; (800cad0 <_dtoa_r+0x308>)
 800c864:	9300      	str	r3, [sp, #0]
 800c866:	3308      	adds	r3, #8
 800c868:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800c86a:	6013      	str	r3, [r2, #0]
 800c86c:	9800      	ldr	r0, [sp, #0]
 800c86e:	b015      	add	sp, #84	; 0x54
 800c870:	ecbd 8b02 	vpop	{d8}
 800c874:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c878:	4b94      	ldr	r3, [pc, #592]	; (800cacc <_dtoa_r+0x304>)
 800c87a:	9300      	str	r3, [sp, #0]
 800c87c:	3303      	adds	r3, #3
 800c87e:	e7f3      	b.n	800c868 <_dtoa_r+0xa0>
 800c880:	ed9d 7b02 	vldr	d7, [sp, #8]
 800c884:	2200      	movs	r2, #0
 800c886:	ec51 0b17 	vmov	r0, r1, d7
 800c88a:	2300      	movs	r3, #0
 800c88c:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 800c890:	f7f4 f92c 	bl	8000aec <__aeabi_dcmpeq>
 800c894:	4680      	mov	r8, r0
 800c896:	b158      	cbz	r0, 800c8b0 <_dtoa_r+0xe8>
 800c898:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800c89a:	2301      	movs	r3, #1
 800c89c:	6013      	str	r3, [r2, #0]
 800c89e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c8a0:	2b00      	cmp	r3, #0
 800c8a2:	f000 8551 	beq.w	800d348 <_dtoa_r+0xb80>
 800c8a6:	488b      	ldr	r0, [pc, #556]	; (800cad4 <_dtoa_r+0x30c>)
 800c8a8:	6018      	str	r0, [r3, #0]
 800c8aa:	1e43      	subs	r3, r0, #1
 800c8ac:	9300      	str	r3, [sp, #0]
 800c8ae:	e7dd      	b.n	800c86c <_dtoa_r+0xa4>
 800c8b0:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800c8b4:	aa12      	add	r2, sp, #72	; 0x48
 800c8b6:	a913      	add	r1, sp, #76	; 0x4c
 800c8b8:	4620      	mov	r0, r4
 800c8ba:	f001 f8d7 	bl	800da6c <__d2b>
 800c8be:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800c8c2:	4683      	mov	fp, r0
 800c8c4:	2d00      	cmp	r5, #0
 800c8c6:	d07c      	beq.n	800c9c2 <_dtoa_r+0x1fa>
 800c8c8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c8ca:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 800c8ce:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c8d2:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 800c8d6:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800c8da:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800c8de:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800c8e2:	4b7d      	ldr	r3, [pc, #500]	; (800cad8 <_dtoa_r+0x310>)
 800c8e4:	2200      	movs	r2, #0
 800c8e6:	4630      	mov	r0, r6
 800c8e8:	4639      	mov	r1, r7
 800c8ea:	f7f3 fcdf 	bl	80002ac <__aeabi_dsub>
 800c8ee:	a36e      	add	r3, pc, #440	; (adr r3, 800caa8 <_dtoa_r+0x2e0>)
 800c8f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c8f4:	f7f3 fe92 	bl	800061c <__aeabi_dmul>
 800c8f8:	a36d      	add	r3, pc, #436	; (adr r3, 800cab0 <_dtoa_r+0x2e8>)
 800c8fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c8fe:	f7f3 fcd7 	bl	80002b0 <__adddf3>
 800c902:	4606      	mov	r6, r0
 800c904:	4628      	mov	r0, r5
 800c906:	460f      	mov	r7, r1
 800c908:	f7f3 fe1e 	bl	8000548 <__aeabi_i2d>
 800c90c:	a36a      	add	r3, pc, #424	; (adr r3, 800cab8 <_dtoa_r+0x2f0>)
 800c90e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c912:	f7f3 fe83 	bl	800061c <__aeabi_dmul>
 800c916:	4602      	mov	r2, r0
 800c918:	460b      	mov	r3, r1
 800c91a:	4630      	mov	r0, r6
 800c91c:	4639      	mov	r1, r7
 800c91e:	f7f3 fcc7 	bl	80002b0 <__adddf3>
 800c922:	4606      	mov	r6, r0
 800c924:	460f      	mov	r7, r1
 800c926:	f7f4 f929 	bl	8000b7c <__aeabi_d2iz>
 800c92a:	2200      	movs	r2, #0
 800c92c:	4682      	mov	sl, r0
 800c92e:	2300      	movs	r3, #0
 800c930:	4630      	mov	r0, r6
 800c932:	4639      	mov	r1, r7
 800c934:	f7f4 f8e4 	bl	8000b00 <__aeabi_dcmplt>
 800c938:	b148      	cbz	r0, 800c94e <_dtoa_r+0x186>
 800c93a:	4650      	mov	r0, sl
 800c93c:	f7f3 fe04 	bl	8000548 <__aeabi_i2d>
 800c940:	4632      	mov	r2, r6
 800c942:	463b      	mov	r3, r7
 800c944:	f7f4 f8d2 	bl	8000aec <__aeabi_dcmpeq>
 800c948:	b908      	cbnz	r0, 800c94e <_dtoa_r+0x186>
 800c94a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800c94e:	f1ba 0f16 	cmp.w	sl, #22
 800c952:	d854      	bhi.n	800c9fe <_dtoa_r+0x236>
 800c954:	4b61      	ldr	r3, [pc, #388]	; (800cadc <_dtoa_r+0x314>)
 800c956:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800c95a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c95e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800c962:	f7f4 f8cd 	bl	8000b00 <__aeabi_dcmplt>
 800c966:	2800      	cmp	r0, #0
 800c968:	d04b      	beq.n	800ca02 <_dtoa_r+0x23a>
 800c96a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800c96e:	2300      	movs	r3, #0
 800c970:	930e      	str	r3, [sp, #56]	; 0x38
 800c972:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800c974:	1b5d      	subs	r5, r3, r5
 800c976:	1e6b      	subs	r3, r5, #1
 800c978:	9304      	str	r3, [sp, #16]
 800c97a:	bf43      	ittte	mi
 800c97c:	2300      	movmi	r3, #0
 800c97e:	f1c5 0801 	rsbmi	r8, r5, #1
 800c982:	9304      	strmi	r3, [sp, #16]
 800c984:	f04f 0800 	movpl.w	r8, #0
 800c988:	f1ba 0f00 	cmp.w	sl, #0
 800c98c:	db3b      	blt.n	800ca06 <_dtoa_r+0x23e>
 800c98e:	9b04      	ldr	r3, [sp, #16]
 800c990:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 800c994:	4453      	add	r3, sl
 800c996:	9304      	str	r3, [sp, #16]
 800c998:	2300      	movs	r3, #0
 800c99a:	9306      	str	r3, [sp, #24]
 800c99c:	9b05      	ldr	r3, [sp, #20]
 800c99e:	2b09      	cmp	r3, #9
 800c9a0:	d869      	bhi.n	800ca76 <_dtoa_r+0x2ae>
 800c9a2:	2b05      	cmp	r3, #5
 800c9a4:	bfc4      	itt	gt
 800c9a6:	3b04      	subgt	r3, #4
 800c9a8:	9305      	strgt	r3, [sp, #20]
 800c9aa:	9b05      	ldr	r3, [sp, #20]
 800c9ac:	f1a3 0302 	sub.w	r3, r3, #2
 800c9b0:	bfcc      	ite	gt
 800c9b2:	2500      	movgt	r5, #0
 800c9b4:	2501      	movle	r5, #1
 800c9b6:	2b03      	cmp	r3, #3
 800c9b8:	d869      	bhi.n	800ca8e <_dtoa_r+0x2c6>
 800c9ba:	e8df f003 	tbb	[pc, r3]
 800c9be:	4e2c      	.short	0x4e2c
 800c9c0:	5a4c      	.short	0x5a4c
 800c9c2:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 800c9c6:	441d      	add	r5, r3
 800c9c8:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800c9cc:	2b20      	cmp	r3, #32
 800c9ce:	bfc1      	itttt	gt
 800c9d0:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800c9d4:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800c9d8:	fa09 f303 	lslgt.w	r3, r9, r3
 800c9dc:	fa26 f000 	lsrgt.w	r0, r6, r0
 800c9e0:	bfda      	itte	le
 800c9e2:	f1c3 0320 	rsble	r3, r3, #32
 800c9e6:	fa06 f003 	lslle.w	r0, r6, r3
 800c9ea:	4318      	orrgt	r0, r3
 800c9ec:	f7f3 fd9c 	bl	8000528 <__aeabi_ui2d>
 800c9f0:	2301      	movs	r3, #1
 800c9f2:	4606      	mov	r6, r0
 800c9f4:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800c9f8:	3d01      	subs	r5, #1
 800c9fa:	9310      	str	r3, [sp, #64]	; 0x40
 800c9fc:	e771      	b.n	800c8e2 <_dtoa_r+0x11a>
 800c9fe:	2301      	movs	r3, #1
 800ca00:	e7b6      	b.n	800c970 <_dtoa_r+0x1a8>
 800ca02:	900e      	str	r0, [sp, #56]	; 0x38
 800ca04:	e7b5      	b.n	800c972 <_dtoa_r+0x1aa>
 800ca06:	f1ca 0300 	rsb	r3, sl, #0
 800ca0a:	9306      	str	r3, [sp, #24]
 800ca0c:	2300      	movs	r3, #0
 800ca0e:	eba8 080a 	sub.w	r8, r8, sl
 800ca12:	930d      	str	r3, [sp, #52]	; 0x34
 800ca14:	e7c2      	b.n	800c99c <_dtoa_r+0x1d4>
 800ca16:	2300      	movs	r3, #0
 800ca18:	9308      	str	r3, [sp, #32]
 800ca1a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ca1c:	2b00      	cmp	r3, #0
 800ca1e:	dc39      	bgt.n	800ca94 <_dtoa_r+0x2cc>
 800ca20:	f04f 0901 	mov.w	r9, #1
 800ca24:	f8cd 9004 	str.w	r9, [sp, #4]
 800ca28:	464b      	mov	r3, r9
 800ca2a:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800ca2e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800ca30:	2200      	movs	r2, #0
 800ca32:	6042      	str	r2, [r0, #4]
 800ca34:	2204      	movs	r2, #4
 800ca36:	f102 0614 	add.w	r6, r2, #20
 800ca3a:	429e      	cmp	r6, r3
 800ca3c:	6841      	ldr	r1, [r0, #4]
 800ca3e:	d92f      	bls.n	800caa0 <_dtoa_r+0x2d8>
 800ca40:	4620      	mov	r0, r4
 800ca42:	f000 fcf1 	bl	800d428 <_Balloc>
 800ca46:	9000      	str	r0, [sp, #0]
 800ca48:	2800      	cmp	r0, #0
 800ca4a:	d14b      	bne.n	800cae4 <_dtoa_r+0x31c>
 800ca4c:	4b24      	ldr	r3, [pc, #144]	; (800cae0 <_dtoa_r+0x318>)
 800ca4e:	4602      	mov	r2, r0
 800ca50:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800ca54:	e6d1      	b.n	800c7fa <_dtoa_r+0x32>
 800ca56:	2301      	movs	r3, #1
 800ca58:	e7de      	b.n	800ca18 <_dtoa_r+0x250>
 800ca5a:	2300      	movs	r3, #0
 800ca5c:	9308      	str	r3, [sp, #32]
 800ca5e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ca60:	eb0a 0903 	add.w	r9, sl, r3
 800ca64:	f109 0301 	add.w	r3, r9, #1
 800ca68:	2b01      	cmp	r3, #1
 800ca6a:	9301      	str	r3, [sp, #4]
 800ca6c:	bfb8      	it	lt
 800ca6e:	2301      	movlt	r3, #1
 800ca70:	e7dd      	b.n	800ca2e <_dtoa_r+0x266>
 800ca72:	2301      	movs	r3, #1
 800ca74:	e7f2      	b.n	800ca5c <_dtoa_r+0x294>
 800ca76:	2501      	movs	r5, #1
 800ca78:	2300      	movs	r3, #0
 800ca7a:	9305      	str	r3, [sp, #20]
 800ca7c:	9508      	str	r5, [sp, #32]
 800ca7e:	f04f 39ff 	mov.w	r9, #4294967295
 800ca82:	2200      	movs	r2, #0
 800ca84:	f8cd 9004 	str.w	r9, [sp, #4]
 800ca88:	2312      	movs	r3, #18
 800ca8a:	9209      	str	r2, [sp, #36]	; 0x24
 800ca8c:	e7cf      	b.n	800ca2e <_dtoa_r+0x266>
 800ca8e:	2301      	movs	r3, #1
 800ca90:	9308      	str	r3, [sp, #32]
 800ca92:	e7f4      	b.n	800ca7e <_dtoa_r+0x2b6>
 800ca94:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800ca98:	f8cd 9004 	str.w	r9, [sp, #4]
 800ca9c:	464b      	mov	r3, r9
 800ca9e:	e7c6      	b.n	800ca2e <_dtoa_r+0x266>
 800caa0:	3101      	adds	r1, #1
 800caa2:	6041      	str	r1, [r0, #4]
 800caa4:	0052      	lsls	r2, r2, #1
 800caa6:	e7c6      	b.n	800ca36 <_dtoa_r+0x26e>
 800caa8:	636f4361 	.word	0x636f4361
 800caac:	3fd287a7 	.word	0x3fd287a7
 800cab0:	8b60c8b3 	.word	0x8b60c8b3
 800cab4:	3fc68a28 	.word	0x3fc68a28
 800cab8:	509f79fb 	.word	0x509f79fb
 800cabc:	3fd34413 	.word	0x3fd34413
 800cac0:	08021dfb 	.word	0x08021dfb
 800cac4:	08021e12 	.word	0x08021e12
 800cac8:	7ff00000 	.word	0x7ff00000
 800cacc:	08021df7 	.word	0x08021df7
 800cad0:	08021dee 	.word	0x08021dee
 800cad4:	08021cca 	.word	0x08021cca
 800cad8:	3ff80000 	.word	0x3ff80000
 800cadc:	08021f10 	.word	0x08021f10
 800cae0:	08021e71 	.word	0x08021e71
 800cae4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800cae6:	9a00      	ldr	r2, [sp, #0]
 800cae8:	601a      	str	r2, [r3, #0]
 800caea:	9b01      	ldr	r3, [sp, #4]
 800caec:	2b0e      	cmp	r3, #14
 800caee:	f200 80ad 	bhi.w	800cc4c <_dtoa_r+0x484>
 800caf2:	2d00      	cmp	r5, #0
 800caf4:	f000 80aa 	beq.w	800cc4c <_dtoa_r+0x484>
 800caf8:	f1ba 0f00 	cmp.w	sl, #0
 800cafc:	dd36      	ble.n	800cb6c <_dtoa_r+0x3a4>
 800cafe:	4ac3      	ldr	r2, [pc, #780]	; (800ce0c <_dtoa_r+0x644>)
 800cb00:	f00a 030f 	and.w	r3, sl, #15
 800cb04:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800cb08:	ed93 7b00 	vldr	d7, [r3]
 800cb0c:	f41a 7f80 	tst.w	sl, #256	; 0x100
 800cb10:	ea4f 172a 	mov.w	r7, sl, asr #4
 800cb14:	eeb0 8a47 	vmov.f32	s16, s14
 800cb18:	eef0 8a67 	vmov.f32	s17, s15
 800cb1c:	d016      	beq.n	800cb4c <_dtoa_r+0x384>
 800cb1e:	4bbc      	ldr	r3, [pc, #752]	; (800ce10 <_dtoa_r+0x648>)
 800cb20:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800cb24:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800cb28:	f7f3 fea2 	bl	8000870 <__aeabi_ddiv>
 800cb2c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800cb30:	f007 070f 	and.w	r7, r7, #15
 800cb34:	2503      	movs	r5, #3
 800cb36:	4eb6      	ldr	r6, [pc, #728]	; (800ce10 <_dtoa_r+0x648>)
 800cb38:	b957      	cbnz	r7, 800cb50 <_dtoa_r+0x388>
 800cb3a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cb3e:	ec53 2b18 	vmov	r2, r3, d8
 800cb42:	f7f3 fe95 	bl	8000870 <__aeabi_ddiv>
 800cb46:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800cb4a:	e029      	b.n	800cba0 <_dtoa_r+0x3d8>
 800cb4c:	2502      	movs	r5, #2
 800cb4e:	e7f2      	b.n	800cb36 <_dtoa_r+0x36e>
 800cb50:	07f9      	lsls	r1, r7, #31
 800cb52:	d508      	bpl.n	800cb66 <_dtoa_r+0x39e>
 800cb54:	ec51 0b18 	vmov	r0, r1, d8
 800cb58:	e9d6 2300 	ldrd	r2, r3, [r6]
 800cb5c:	f7f3 fd5e 	bl	800061c <__aeabi_dmul>
 800cb60:	ec41 0b18 	vmov	d8, r0, r1
 800cb64:	3501      	adds	r5, #1
 800cb66:	107f      	asrs	r7, r7, #1
 800cb68:	3608      	adds	r6, #8
 800cb6a:	e7e5      	b.n	800cb38 <_dtoa_r+0x370>
 800cb6c:	f000 80a6 	beq.w	800ccbc <_dtoa_r+0x4f4>
 800cb70:	f1ca 0600 	rsb	r6, sl, #0
 800cb74:	4ba5      	ldr	r3, [pc, #660]	; (800ce0c <_dtoa_r+0x644>)
 800cb76:	4fa6      	ldr	r7, [pc, #664]	; (800ce10 <_dtoa_r+0x648>)
 800cb78:	f006 020f 	and.w	r2, r6, #15
 800cb7c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800cb80:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb84:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800cb88:	f7f3 fd48 	bl	800061c <__aeabi_dmul>
 800cb8c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800cb90:	1136      	asrs	r6, r6, #4
 800cb92:	2300      	movs	r3, #0
 800cb94:	2502      	movs	r5, #2
 800cb96:	2e00      	cmp	r6, #0
 800cb98:	f040 8085 	bne.w	800cca6 <_dtoa_r+0x4de>
 800cb9c:	2b00      	cmp	r3, #0
 800cb9e:	d1d2      	bne.n	800cb46 <_dtoa_r+0x37e>
 800cba0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800cba2:	2b00      	cmp	r3, #0
 800cba4:	f000 808c 	beq.w	800ccc0 <_dtoa_r+0x4f8>
 800cba8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800cbac:	4b99      	ldr	r3, [pc, #612]	; (800ce14 <_dtoa_r+0x64c>)
 800cbae:	2200      	movs	r2, #0
 800cbb0:	4630      	mov	r0, r6
 800cbb2:	4639      	mov	r1, r7
 800cbb4:	f7f3 ffa4 	bl	8000b00 <__aeabi_dcmplt>
 800cbb8:	2800      	cmp	r0, #0
 800cbba:	f000 8081 	beq.w	800ccc0 <_dtoa_r+0x4f8>
 800cbbe:	9b01      	ldr	r3, [sp, #4]
 800cbc0:	2b00      	cmp	r3, #0
 800cbc2:	d07d      	beq.n	800ccc0 <_dtoa_r+0x4f8>
 800cbc4:	f1b9 0f00 	cmp.w	r9, #0
 800cbc8:	dd3c      	ble.n	800cc44 <_dtoa_r+0x47c>
 800cbca:	f10a 33ff 	add.w	r3, sl, #4294967295
 800cbce:	9307      	str	r3, [sp, #28]
 800cbd0:	2200      	movs	r2, #0
 800cbd2:	4b91      	ldr	r3, [pc, #580]	; (800ce18 <_dtoa_r+0x650>)
 800cbd4:	4630      	mov	r0, r6
 800cbd6:	4639      	mov	r1, r7
 800cbd8:	f7f3 fd20 	bl	800061c <__aeabi_dmul>
 800cbdc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800cbe0:	3501      	adds	r5, #1
 800cbe2:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 800cbe6:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800cbea:	4628      	mov	r0, r5
 800cbec:	f7f3 fcac 	bl	8000548 <__aeabi_i2d>
 800cbf0:	4632      	mov	r2, r6
 800cbf2:	463b      	mov	r3, r7
 800cbf4:	f7f3 fd12 	bl	800061c <__aeabi_dmul>
 800cbf8:	4b88      	ldr	r3, [pc, #544]	; (800ce1c <_dtoa_r+0x654>)
 800cbfa:	2200      	movs	r2, #0
 800cbfc:	f7f3 fb58 	bl	80002b0 <__adddf3>
 800cc00:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800cc04:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800cc08:	9303      	str	r3, [sp, #12]
 800cc0a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800cc0c:	2b00      	cmp	r3, #0
 800cc0e:	d15c      	bne.n	800ccca <_dtoa_r+0x502>
 800cc10:	4b83      	ldr	r3, [pc, #524]	; (800ce20 <_dtoa_r+0x658>)
 800cc12:	2200      	movs	r2, #0
 800cc14:	4630      	mov	r0, r6
 800cc16:	4639      	mov	r1, r7
 800cc18:	f7f3 fb48 	bl	80002ac <__aeabi_dsub>
 800cc1c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800cc20:	4606      	mov	r6, r0
 800cc22:	460f      	mov	r7, r1
 800cc24:	f7f3 ff8a 	bl	8000b3c <__aeabi_dcmpgt>
 800cc28:	2800      	cmp	r0, #0
 800cc2a:	f040 8296 	bne.w	800d15a <_dtoa_r+0x992>
 800cc2e:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800cc32:	4630      	mov	r0, r6
 800cc34:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800cc38:	4639      	mov	r1, r7
 800cc3a:	f7f3 ff61 	bl	8000b00 <__aeabi_dcmplt>
 800cc3e:	2800      	cmp	r0, #0
 800cc40:	f040 8288 	bne.w	800d154 <_dtoa_r+0x98c>
 800cc44:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800cc48:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800cc4c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800cc4e:	2b00      	cmp	r3, #0
 800cc50:	f2c0 8158 	blt.w	800cf04 <_dtoa_r+0x73c>
 800cc54:	f1ba 0f0e 	cmp.w	sl, #14
 800cc58:	f300 8154 	bgt.w	800cf04 <_dtoa_r+0x73c>
 800cc5c:	4b6b      	ldr	r3, [pc, #428]	; (800ce0c <_dtoa_r+0x644>)
 800cc5e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800cc62:	e9d3 8900 	ldrd	r8, r9, [r3]
 800cc66:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cc68:	2b00      	cmp	r3, #0
 800cc6a:	f280 80e3 	bge.w	800ce34 <_dtoa_r+0x66c>
 800cc6e:	9b01      	ldr	r3, [sp, #4]
 800cc70:	2b00      	cmp	r3, #0
 800cc72:	f300 80df 	bgt.w	800ce34 <_dtoa_r+0x66c>
 800cc76:	f040 826d 	bne.w	800d154 <_dtoa_r+0x98c>
 800cc7a:	4b69      	ldr	r3, [pc, #420]	; (800ce20 <_dtoa_r+0x658>)
 800cc7c:	2200      	movs	r2, #0
 800cc7e:	4640      	mov	r0, r8
 800cc80:	4649      	mov	r1, r9
 800cc82:	f7f3 fccb 	bl	800061c <__aeabi_dmul>
 800cc86:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800cc8a:	f7f3 ff4d 	bl	8000b28 <__aeabi_dcmpge>
 800cc8e:	9e01      	ldr	r6, [sp, #4]
 800cc90:	4637      	mov	r7, r6
 800cc92:	2800      	cmp	r0, #0
 800cc94:	f040 8243 	bne.w	800d11e <_dtoa_r+0x956>
 800cc98:	9d00      	ldr	r5, [sp, #0]
 800cc9a:	2331      	movs	r3, #49	; 0x31
 800cc9c:	f805 3b01 	strb.w	r3, [r5], #1
 800cca0:	f10a 0a01 	add.w	sl, sl, #1
 800cca4:	e23f      	b.n	800d126 <_dtoa_r+0x95e>
 800cca6:	07f2      	lsls	r2, r6, #31
 800cca8:	d505      	bpl.n	800ccb6 <_dtoa_r+0x4ee>
 800ccaa:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ccae:	f7f3 fcb5 	bl	800061c <__aeabi_dmul>
 800ccb2:	3501      	adds	r5, #1
 800ccb4:	2301      	movs	r3, #1
 800ccb6:	1076      	asrs	r6, r6, #1
 800ccb8:	3708      	adds	r7, #8
 800ccba:	e76c      	b.n	800cb96 <_dtoa_r+0x3ce>
 800ccbc:	2502      	movs	r5, #2
 800ccbe:	e76f      	b.n	800cba0 <_dtoa_r+0x3d8>
 800ccc0:	9b01      	ldr	r3, [sp, #4]
 800ccc2:	f8cd a01c 	str.w	sl, [sp, #28]
 800ccc6:	930c      	str	r3, [sp, #48]	; 0x30
 800ccc8:	e78d      	b.n	800cbe6 <_dtoa_r+0x41e>
 800ccca:	9900      	ldr	r1, [sp, #0]
 800cccc:	980c      	ldr	r0, [sp, #48]	; 0x30
 800ccce:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800ccd0:	4b4e      	ldr	r3, [pc, #312]	; (800ce0c <_dtoa_r+0x644>)
 800ccd2:	ed9d 7b02 	vldr	d7, [sp, #8]
 800ccd6:	4401      	add	r1, r0
 800ccd8:	9102      	str	r1, [sp, #8]
 800ccda:	9908      	ldr	r1, [sp, #32]
 800ccdc:	eeb0 8a47 	vmov.f32	s16, s14
 800cce0:	eef0 8a67 	vmov.f32	s17, s15
 800cce4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800cce8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800ccec:	2900      	cmp	r1, #0
 800ccee:	d045      	beq.n	800cd7c <_dtoa_r+0x5b4>
 800ccf0:	494c      	ldr	r1, [pc, #304]	; (800ce24 <_dtoa_r+0x65c>)
 800ccf2:	2000      	movs	r0, #0
 800ccf4:	f7f3 fdbc 	bl	8000870 <__aeabi_ddiv>
 800ccf8:	ec53 2b18 	vmov	r2, r3, d8
 800ccfc:	f7f3 fad6 	bl	80002ac <__aeabi_dsub>
 800cd00:	9d00      	ldr	r5, [sp, #0]
 800cd02:	ec41 0b18 	vmov	d8, r0, r1
 800cd06:	4639      	mov	r1, r7
 800cd08:	4630      	mov	r0, r6
 800cd0a:	f7f3 ff37 	bl	8000b7c <__aeabi_d2iz>
 800cd0e:	900c      	str	r0, [sp, #48]	; 0x30
 800cd10:	f7f3 fc1a 	bl	8000548 <__aeabi_i2d>
 800cd14:	4602      	mov	r2, r0
 800cd16:	460b      	mov	r3, r1
 800cd18:	4630      	mov	r0, r6
 800cd1a:	4639      	mov	r1, r7
 800cd1c:	f7f3 fac6 	bl	80002ac <__aeabi_dsub>
 800cd20:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800cd22:	3330      	adds	r3, #48	; 0x30
 800cd24:	f805 3b01 	strb.w	r3, [r5], #1
 800cd28:	ec53 2b18 	vmov	r2, r3, d8
 800cd2c:	4606      	mov	r6, r0
 800cd2e:	460f      	mov	r7, r1
 800cd30:	f7f3 fee6 	bl	8000b00 <__aeabi_dcmplt>
 800cd34:	2800      	cmp	r0, #0
 800cd36:	d165      	bne.n	800ce04 <_dtoa_r+0x63c>
 800cd38:	4632      	mov	r2, r6
 800cd3a:	463b      	mov	r3, r7
 800cd3c:	4935      	ldr	r1, [pc, #212]	; (800ce14 <_dtoa_r+0x64c>)
 800cd3e:	2000      	movs	r0, #0
 800cd40:	f7f3 fab4 	bl	80002ac <__aeabi_dsub>
 800cd44:	ec53 2b18 	vmov	r2, r3, d8
 800cd48:	f7f3 feda 	bl	8000b00 <__aeabi_dcmplt>
 800cd4c:	2800      	cmp	r0, #0
 800cd4e:	f040 80b9 	bne.w	800cec4 <_dtoa_r+0x6fc>
 800cd52:	9b02      	ldr	r3, [sp, #8]
 800cd54:	429d      	cmp	r5, r3
 800cd56:	f43f af75 	beq.w	800cc44 <_dtoa_r+0x47c>
 800cd5a:	4b2f      	ldr	r3, [pc, #188]	; (800ce18 <_dtoa_r+0x650>)
 800cd5c:	ec51 0b18 	vmov	r0, r1, d8
 800cd60:	2200      	movs	r2, #0
 800cd62:	f7f3 fc5b 	bl	800061c <__aeabi_dmul>
 800cd66:	4b2c      	ldr	r3, [pc, #176]	; (800ce18 <_dtoa_r+0x650>)
 800cd68:	ec41 0b18 	vmov	d8, r0, r1
 800cd6c:	2200      	movs	r2, #0
 800cd6e:	4630      	mov	r0, r6
 800cd70:	4639      	mov	r1, r7
 800cd72:	f7f3 fc53 	bl	800061c <__aeabi_dmul>
 800cd76:	4606      	mov	r6, r0
 800cd78:	460f      	mov	r7, r1
 800cd7a:	e7c4      	b.n	800cd06 <_dtoa_r+0x53e>
 800cd7c:	ec51 0b17 	vmov	r0, r1, d7
 800cd80:	f7f3 fc4c 	bl	800061c <__aeabi_dmul>
 800cd84:	9b02      	ldr	r3, [sp, #8]
 800cd86:	9d00      	ldr	r5, [sp, #0]
 800cd88:	930c      	str	r3, [sp, #48]	; 0x30
 800cd8a:	ec41 0b18 	vmov	d8, r0, r1
 800cd8e:	4639      	mov	r1, r7
 800cd90:	4630      	mov	r0, r6
 800cd92:	f7f3 fef3 	bl	8000b7c <__aeabi_d2iz>
 800cd96:	9011      	str	r0, [sp, #68]	; 0x44
 800cd98:	f7f3 fbd6 	bl	8000548 <__aeabi_i2d>
 800cd9c:	4602      	mov	r2, r0
 800cd9e:	460b      	mov	r3, r1
 800cda0:	4630      	mov	r0, r6
 800cda2:	4639      	mov	r1, r7
 800cda4:	f7f3 fa82 	bl	80002ac <__aeabi_dsub>
 800cda8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800cdaa:	3330      	adds	r3, #48	; 0x30
 800cdac:	f805 3b01 	strb.w	r3, [r5], #1
 800cdb0:	9b02      	ldr	r3, [sp, #8]
 800cdb2:	429d      	cmp	r5, r3
 800cdb4:	4606      	mov	r6, r0
 800cdb6:	460f      	mov	r7, r1
 800cdb8:	f04f 0200 	mov.w	r2, #0
 800cdbc:	d134      	bne.n	800ce28 <_dtoa_r+0x660>
 800cdbe:	4b19      	ldr	r3, [pc, #100]	; (800ce24 <_dtoa_r+0x65c>)
 800cdc0:	ec51 0b18 	vmov	r0, r1, d8
 800cdc4:	f7f3 fa74 	bl	80002b0 <__adddf3>
 800cdc8:	4602      	mov	r2, r0
 800cdca:	460b      	mov	r3, r1
 800cdcc:	4630      	mov	r0, r6
 800cdce:	4639      	mov	r1, r7
 800cdd0:	f7f3 feb4 	bl	8000b3c <__aeabi_dcmpgt>
 800cdd4:	2800      	cmp	r0, #0
 800cdd6:	d175      	bne.n	800cec4 <_dtoa_r+0x6fc>
 800cdd8:	ec53 2b18 	vmov	r2, r3, d8
 800cddc:	4911      	ldr	r1, [pc, #68]	; (800ce24 <_dtoa_r+0x65c>)
 800cdde:	2000      	movs	r0, #0
 800cde0:	f7f3 fa64 	bl	80002ac <__aeabi_dsub>
 800cde4:	4602      	mov	r2, r0
 800cde6:	460b      	mov	r3, r1
 800cde8:	4630      	mov	r0, r6
 800cdea:	4639      	mov	r1, r7
 800cdec:	f7f3 fe88 	bl	8000b00 <__aeabi_dcmplt>
 800cdf0:	2800      	cmp	r0, #0
 800cdf2:	f43f af27 	beq.w	800cc44 <_dtoa_r+0x47c>
 800cdf6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800cdf8:	1e6b      	subs	r3, r5, #1
 800cdfa:	930c      	str	r3, [sp, #48]	; 0x30
 800cdfc:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800ce00:	2b30      	cmp	r3, #48	; 0x30
 800ce02:	d0f8      	beq.n	800cdf6 <_dtoa_r+0x62e>
 800ce04:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800ce08:	e04a      	b.n	800cea0 <_dtoa_r+0x6d8>
 800ce0a:	bf00      	nop
 800ce0c:	08021f10 	.word	0x08021f10
 800ce10:	08021ee8 	.word	0x08021ee8
 800ce14:	3ff00000 	.word	0x3ff00000
 800ce18:	40240000 	.word	0x40240000
 800ce1c:	401c0000 	.word	0x401c0000
 800ce20:	40140000 	.word	0x40140000
 800ce24:	3fe00000 	.word	0x3fe00000
 800ce28:	4baf      	ldr	r3, [pc, #700]	; (800d0e8 <_dtoa_r+0x920>)
 800ce2a:	f7f3 fbf7 	bl	800061c <__aeabi_dmul>
 800ce2e:	4606      	mov	r6, r0
 800ce30:	460f      	mov	r7, r1
 800ce32:	e7ac      	b.n	800cd8e <_dtoa_r+0x5c6>
 800ce34:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800ce38:	9d00      	ldr	r5, [sp, #0]
 800ce3a:	4642      	mov	r2, r8
 800ce3c:	464b      	mov	r3, r9
 800ce3e:	4630      	mov	r0, r6
 800ce40:	4639      	mov	r1, r7
 800ce42:	f7f3 fd15 	bl	8000870 <__aeabi_ddiv>
 800ce46:	f7f3 fe99 	bl	8000b7c <__aeabi_d2iz>
 800ce4a:	9002      	str	r0, [sp, #8]
 800ce4c:	f7f3 fb7c 	bl	8000548 <__aeabi_i2d>
 800ce50:	4642      	mov	r2, r8
 800ce52:	464b      	mov	r3, r9
 800ce54:	f7f3 fbe2 	bl	800061c <__aeabi_dmul>
 800ce58:	4602      	mov	r2, r0
 800ce5a:	460b      	mov	r3, r1
 800ce5c:	4630      	mov	r0, r6
 800ce5e:	4639      	mov	r1, r7
 800ce60:	f7f3 fa24 	bl	80002ac <__aeabi_dsub>
 800ce64:	9e02      	ldr	r6, [sp, #8]
 800ce66:	9f01      	ldr	r7, [sp, #4]
 800ce68:	3630      	adds	r6, #48	; 0x30
 800ce6a:	f805 6b01 	strb.w	r6, [r5], #1
 800ce6e:	9e00      	ldr	r6, [sp, #0]
 800ce70:	1bae      	subs	r6, r5, r6
 800ce72:	42b7      	cmp	r7, r6
 800ce74:	4602      	mov	r2, r0
 800ce76:	460b      	mov	r3, r1
 800ce78:	d137      	bne.n	800ceea <_dtoa_r+0x722>
 800ce7a:	f7f3 fa19 	bl	80002b0 <__adddf3>
 800ce7e:	4642      	mov	r2, r8
 800ce80:	464b      	mov	r3, r9
 800ce82:	4606      	mov	r6, r0
 800ce84:	460f      	mov	r7, r1
 800ce86:	f7f3 fe59 	bl	8000b3c <__aeabi_dcmpgt>
 800ce8a:	b9c8      	cbnz	r0, 800cec0 <_dtoa_r+0x6f8>
 800ce8c:	4642      	mov	r2, r8
 800ce8e:	464b      	mov	r3, r9
 800ce90:	4630      	mov	r0, r6
 800ce92:	4639      	mov	r1, r7
 800ce94:	f7f3 fe2a 	bl	8000aec <__aeabi_dcmpeq>
 800ce98:	b110      	cbz	r0, 800cea0 <_dtoa_r+0x6d8>
 800ce9a:	9b02      	ldr	r3, [sp, #8]
 800ce9c:	07d9      	lsls	r1, r3, #31
 800ce9e:	d40f      	bmi.n	800cec0 <_dtoa_r+0x6f8>
 800cea0:	4620      	mov	r0, r4
 800cea2:	4659      	mov	r1, fp
 800cea4:	f000 fb00 	bl	800d4a8 <_Bfree>
 800cea8:	2300      	movs	r3, #0
 800ceaa:	702b      	strb	r3, [r5, #0]
 800ceac:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ceae:	f10a 0001 	add.w	r0, sl, #1
 800ceb2:	6018      	str	r0, [r3, #0]
 800ceb4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ceb6:	2b00      	cmp	r3, #0
 800ceb8:	f43f acd8 	beq.w	800c86c <_dtoa_r+0xa4>
 800cebc:	601d      	str	r5, [r3, #0]
 800cebe:	e4d5      	b.n	800c86c <_dtoa_r+0xa4>
 800cec0:	f8cd a01c 	str.w	sl, [sp, #28]
 800cec4:	462b      	mov	r3, r5
 800cec6:	461d      	mov	r5, r3
 800cec8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800cecc:	2a39      	cmp	r2, #57	; 0x39
 800cece:	d108      	bne.n	800cee2 <_dtoa_r+0x71a>
 800ced0:	9a00      	ldr	r2, [sp, #0]
 800ced2:	429a      	cmp	r2, r3
 800ced4:	d1f7      	bne.n	800cec6 <_dtoa_r+0x6fe>
 800ced6:	9a07      	ldr	r2, [sp, #28]
 800ced8:	9900      	ldr	r1, [sp, #0]
 800ceda:	3201      	adds	r2, #1
 800cedc:	9207      	str	r2, [sp, #28]
 800cede:	2230      	movs	r2, #48	; 0x30
 800cee0:	700a      	strb	r2, [r1, #0]
 800cee2:	781a      	ldrb	r2, [r3, #0]
 800cee4:	3201      	adds	r2, #1
 800cee6:	701a      	strb	r2, [r3, #0]
 800cee8:	e78c      	b.n	800ce04 <_dtoa_r+0x63c>
 800ceea:	4b7f      	ldr	r3, [pc, #508]	; (800d0e8 <_dtoa_r+0x920>)
 800ceec:	2200      	movs	r2, #0
 800ceee:	f7f3 fb95 	bl	800061c <__aeabi_dmul>
 800cef2:	2200      	movs	r2, #0
 800cef4:	2300      	movs	r3, #0
 800cef6:	4606      	mov	r6, r0
 800cef8:	460f      	mov	r7, r1
 800cefa:	f7f3 fdf7 	bl	8000aec <__aeabi_dcmpeq>
 800cefe:	2800      	cmp	r0, #0
 800cf00:	d09b      	beq.n	800ce3a <_dtoa_r+0x672>
 800cf02:	e7cd      	b.n	800cea0 <_dtoa_r+0x6d8>
 800cf04:	9a08      	ldr	r2, [sp, #32]
 800cf06:	2a00      	cmp	r2, #0
 800cf08:	f000 80c4 	beq.w	800d094 <_dtoa_r+0x8cc>
 800cf0c:	9a05      	ldr	r2, [sp, #20]
 800cf0e:	2a01      	cmp	r2, #1
 800cf10:	f300 80a8 	bgt.w	800d064 <_dtoa_r+0x89c>
 800cf14:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800cf16:	2a00      	cmp	r2, #0
 800cf18:	f000 80a0 	beq.w	800d05c <_dtoa_r+0x894>
 800cf1c:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800cf20:	9e06      	ldr	r6, [sp, #24]
 800cf22:	4645      	mov	r5, r8
 800cf24:	9a04      	ldr	r2, [sp, #16]
 800cf26:	2101      	movs	r1, #1
 800cf28:	441a      	add	r2, r3
 800cf2a:	4620      	mov	r0, r4
 800cf2c:	4498      	add	r8, r3
 800cf2e:	9204      	str	r2, [sp, #16]
 800cf30:	f000 fb76 	bl	800d620 <__i2b>
 800cf34:	4607      	mov	r7, r0
 800cf36:	2d00      	cmp	r5, #0
 800cf38:	dd0b      	ble.n	800cf52 <_dtoa_r+0x78a>
 800cf3a:	9b04      	ldr	r3, [sp, #16]
 800cf3c:	2b00      	cmp	r3, #0
 800cf3e:	dd08      	ble.n	800cf52 <_dtoa_r+0x78a>
 800cf40:	42ab      	cmp	r3, r5
 800cf42:	9a04      	ldr	r2, [sp, #16]
 800cf44:	bfa8      	it	ge
 800cf46:	462b      	movge	r3, r5
 800cf48:	eba8 0803 	sub.w	r8, r8, r3
 800cf4c:	1aed      	subs	r5, r5, r3
 800cf4e:	1ad3      	subs	r3, r2, r3
 800cf50:	9304      	str	r3, [sp, #16]
 800cf52:	9b06      	ldr	r3, [sp, #24]
 800cf54:	b1fb      	cbz	r3, 800cf96 <_dtoa_r+0x7ce>
 800cf56:	9b08      	ldr	r3, [sp, #32]
 800cf58:	2b00      	cmp	r3, #0
 800cf5a:	f000 809f 	beq.w	800d09c <_dtoa_r+0x8d4>
 800cf5e:	2e00      	cmp	r6, #0
 800cf60:	dd11      	ble.n	800cf86 <_dtoa_r+0x7be>
 800cf62:	4639      	mov	r1, r7
 800cf64:	4632      	mov	r2, r6
 800cf66:	4620      	mov	r0, r4
 800cf68:	f000 fc16 	bl	800d798 <__pow5mult>
 800cf6c:	465a      	mov	r2, fp
 800cf6e:	4601      	mov	r1, r0
 800cf70:	4607      	mov	r7, r0
 800cf72:	4620      	mov	r0, r4
 800cf74:	f000 fb6a 	bl	800d64c <__multiply>
 800cf78:	4659      	mov	r1, fp
 800cf7a:	9007      	str	r0, [sp, #28]
 800cf7c:	4620      	mov	r0, r4
 800cf7e:	f000 fa93 	bl	800d4a8 <_Bfree>
 800cf82:	9b07      	ldr	r3, [sp, #28]
 800cf84:	469b      	mov	fp, r3
 800cf86:	9b06      	ldr	r3, [sp, #24]
 800cf88:	1b9a      	subs	r2, r3, r6
 800cf8a:	d004      	beq.n	800cf96 <_dtoa_r+0x7ce>
 800cf8c:	4659      	mov	r1, fp
 800cf8e:	4620      	mov	r0, r4
 800cf90:	f000 fc02 	bl	800d798 <__pow5mult>
 800cf94:	4683      	mov	fp, r0
 800cf96:	2101      	movs	r1, #1
 800cf98:	4620      	mov	r0, r4
 800cf9a:	f000 fb41 	bl	800d620 <__i2b>
 800cf9e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800cfa0:	2b00      	cmp	r3, #0
 800cfa2:	4606      	mov	r6, r0
 800cfa4:	dd7c      	ble.n	800d0a0 <_dtoa_r+0x8d8>
 800cfa6:	461a      	mov	r2, r3
 800cfa8:	4601      	mov	r1, r0
 800cfaa:	4620      	mov	r0, r4
 800cfac:	f000 fbf4 	bl	800d798 <__pow5mult>
 800cfb0:	9b05      	ldr	r3, [sp, #20]
 800cfb2:	2b01      	cmp	r3, #1
 800cfb4:	4606      	mov	r6, r0
 800cfb6:	dd76      	ble.n	800d0a6 <_dtoa_r+0x8de>
 800cfb8:	2300      	movs	r3, #0
 800cfba:	9306      	str	r3, [sp, #24]
 800cfbc:	6933      	ldr	r3, [r6, #16]
 800cfbe:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800cfc2:	6918      	ldr	r0, [r3, #16]
 800cfc4:	f000 fadc 	bl	800d580 <__hi0bits>
 800cfc8:	f1c0 0020 	rsb	r0, r0, #32
 800cfcc:	9b04      	ldr	r3, [sp, #16]
 800cfce:	4418      	add	r0, r3
 800cfd0:	f010 001f 	ands.w	r0, r0, #31
 800cfd4:	f000 8086 	beq.w	800d0e4 <_dtoa_r+0x91c>
 800cfd8:	f1c0 0320 	rsb	r3, r0, #32
 800cfdc:	2b04      	cmp	r3, #4
 800cfde:	dd7f      	ble.n	800d0e0 <_dtoa_r+0x918>
 800cfe0:	f1c0 001c 	rsb	r0, r0, #28
 800cfe4:	9b04      	ldr	r3, [sp, #16]
 800cfe6:	4403      	add	r3, r0
 800cfe8:	4480      	add	r8, r0
 800cfea:	4405      	add	r5, r0
 800cfec:	9304      	str	r3, [sp, #16]
 800cfee:	f1b8 0f00 	cmp.w	r8, #0
 800cff2:	dd05      	ble.n	800d000 <_dtoa_r+0x838>
 800cff4:	4659      	mov	r1, fp
 800cff6:	4642      	mov	r2, r8
 800cff8:	4620      	mov	r0, r4
 800cffa:	f000 fc27 	bl	800d84c <__lshift>
 800cffe:	4683      	mov	fp, r0
 800d000:	9b04      	ldr	r3, [sp, #16]
 800d002:	2b00      	cmp	r3, #0
 800d004:	dd05      	ble.n	800d012 <_dtoa_r+0x84a>
 800d006:	4631      	mov	r1, r6
 800d008:	461a      	mov	r2, r3
 800d00a:	4620      	mov	r0, r4
 800d00c:	f000 fc1e 	bl	800d84c <__lshift>
 800d010:	4606      	mov	r6, r0
 800d012:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d014:	2b00      	cmp	r3, #0
 800d016:	d069      	beq.n	800d0ec <_dtoa_r+0x924>
 800d018:	4631      	mov	r1, r6
 800d01a:	4658      	mov	r0, fp
 800d01c:	f000 fc82 	bl	800d924 <__mcmp>
 800d020:	2800      	cmp	r0, #0
 800d022:	da63      	bge.n	800d0ec <_dtoa_r+0x924>
 800d024:	2300      	movs	r3, #0
 800d026:	4659      	mov	r1, fp
 800d028:	220a      	movs	r2, #10
 800d02a:	4620      	mov	r0, r4
 800d02c:	f000 fa5e 	bl	800d4ec <__multadd>
 800d030:	9b08      	ldr	r3, [sp, #32]
 800d032:	f10a 3aff 	add.w	sl, sl, #4294967295
 800d036:	4683      	mov	fp, r0
 800d038:	2b00      	cmp	r3, #0
 800d03a:	f000 818f 	beq.w	800d35c <_dtoa_r+0xb94>
 800d03e:	4639      	mov	r1, r7
 800d040:	2300      	movs	r3, #0
 800d042:	220a      	movs	r2, #10
 800d044:	4620      	mov	r0, r4
 800d046:	f000 fa51 	bl	800d4ec <__multadd>
 800d04a:	f1b9 0f00 	cmp.w	r9, #0
 800d04e:	4607      	mov	r7, r0
 800d050:	f300 808e 	bgt.w	800d170 <_dtoa_r+0x9a8>
 800d054:	9b05      	ldr	r3, [sp, #20]
 800d056:	2b02      	cmp	r3, #2
 800d058:	dc50      	bgt.n	800d0fc <_dtoa_r+0x934>
 800d05a:	e089      	b.n	800d170 <_dtoa_r+0x9a8>
 800d05c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800d05e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800d062:	e75d      	b.n	800cf20 <_dtoa_r+0x758>
 800d064:	9b01      	ldr	r3, [sp, #4]
 800d066:	1e5e      	subs	r6, r3, #1
 800d068:	9b06      	ldr	r3, [sp, #24]
 800d06a:	42b3      	cmp	r3, r6
 800d06c:	bfbf      	itttt	lt
 800d06e:	9b06      	ldrlt	r3, [sp, #24]
 800d070:	9606      	strlt	r6, [sp, #24]
 800d072:	1af2      	sublt	r2, r6, r3
 800d074:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 800d076:	bfb6      	itet	lt
 800d078:	189b      	addlt	r3, r3, r2
 800d07a:	1b9e      	subge	r6, r3, r6
 800d07c:	930d      	strlt	r3, [sp, #52]	; 0x34
 800d07e:	9b01      	ldr	r3, [sp, #4]
 800d080:	bfb8      	it	lt
 800d082:	2600      	movlt	r6, #0
 800d084:	2b00      	cmp	r3, #0
 800d086:	bfb5      	itete	lt
 800d088:	eba8 0503 	sublt.w	r5, r8, r3
 800d08c:	9b01      	ldrge	r3, [sp, #4]
 800d08e:	2300      	movlt	r3, #0
 800d090:	4645      	movge	r5, r8
 800d092:	e747      	b.n	800cf24 <_dtoa_r+0x75c>
 800d094:	9e06      	ldr	r6, [sp, #24]
 800d096:	9f08      	ldr	r7, [sp, #32]
 800d098:	4645      	mov	r5, r8
 800d09a:	e74c      	b.n	800cf36 <_dtoa_r+0x76e>
 800d09c:	9a06      	ldr	r2, [sp, #24]
 800d09e:	e775      	b.n	800cf8c <_dtoa_r+0x7c4>
 800d0a0:	9b05      	ldr	r3, [sp, #20]
 800d0a2:	2b01      	cmp	r3, #1
 800d0a4:	dc18      	bgt.n	800d0d8 <_dtoa_r+0x910>
 800d0a6:	9b02      	ldr	r3, [sp, #8]
 800d0a8:	b9b3      	cbnz	r3, 800d0d8 <_dtoa_r+0x910>
 800d0aa:	9b03      	ldr	r3, [sp, #12]
 800d0ac:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d0b0:	b9a3      	cbnz	r3, 800d0dc <_dtoa_r+0x914>
 800d0b2:	9b03      	ldr	r3, [sp, #12]
 800d0b4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800d0b8:	0d1b      	lsrs	r3, r3, #20
 800d0ba:	051b      	lsls	r3, r3, #20
 800d0bc:	b12b      	cbz	r3, 800d0ca <_dtoa_r+0x902>
 800d0be:	9b04      	ldr	r3, [sp, #16]
 800d0c0:	3301      	adds	r3, #1
 800d0c2:	9304      	str	r3, [sp, #16]
 800d0c4:	f108 0801 	add.w	r8, r8, #1
 800d0c8:	2301      	movs	r3, #1
 800d0ca:	9306      	str	r3, [sp, #24]
 800d0cc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d0ce:	2b00      	cmp	r3, #0
 800d0d0:	f47f af74 	bne.w	800cfbc <_dtoa_r+0x7f4>
 800d0d4:	2001      	movs	r0, #1
 800d0d6:	e779      	b.n	800cfcc <_dtoa_r+0x804>
 800d0d8:	2300      	movs	r3, #0
 800d0da:	e7f6      	b.n	800d0ca <_dtoa_r+0x902>
 800d0dc:	9b02      	ldr	r3, [sp, #8]
 800d0de:	e7f4      	b.n	800d0ca <_dtoa_r+0x902>
 800d0e0:	d085      	beq.n	800cfee <_dtoa_r+0x826>
 800d0e2:	4618      	mov	r0, r3
 800d0e4:	301c      	adds	r0, #28
 800d0e6:	e77d      	b.n	800cfe4 <_dtoa_r+0x81c>
 800d0e8:	40240000 	.word	0x40240000
 800d0ec:	9b01      	ldr	r3, [sp, #4]
 800d0ee:	2b00      	cmp	r3, #0
 800d0f0:	dc38      	bgt.n	800d164 <_dtoa_r+0x99c>
 800d0f2:	9b05      	ldr	r3, [sp, #20]
 800d0f4:	2b02      	cmp	r3, #2
 800d0f6:	dd35      	ble.n	800d164 <_dtoa_r+0x99c>
 800d0f8:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800d0fc:	f1b9 0f00 	cmp.w	r9, #0
 800d100:	d10d      	bne.n	800d11e <_dtoa_r+0x956>
 800d102:	4631      	mov	r1, r6
 800d104:	464b      	mov	r3, r9
 800d106:	2205      	movs	r2, #5
 800d108:	4620      	mov	r0, r4
 800d10a:	f000 f9ef 	bl	800d4ec <__multadd>
 800d10e:	4601      	mov	r1, r0
 800d110:	4606      	mov	r6, r0
 800d112:	4658      	mov	r0, fp
 800d114:	f000 fc06 	bl	800d924 <__mcmp>
 800d118:	2800      	cmp	r0, #0
 800d11a:	f73f adbd 	bgt.w	800cc98 <_dtoa_r+0x4d0>
 800d11e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d120:	9d00      	ldr	r5, [sp, #0]
 800d122:	ea6f 0a03 	mvn.w	sl, r3
 800d126:	f04f 0800 	mov.w	r8, #0
 800d12a:	4631      	mov	r1, r6
 800d12c:	4620      	mov	r0, r4
 800d12e:	f000 f9bb 	bl	800d4a8 <_Bfree>
 800d132:	2f00      	cmp	r7, #0
 800d134:	f43f aeb4 	beq.w	800cea0 <_dtoa_r+0x6d8>
 800d138:	f1b8 0f00 	cmp.w	r8, #0
 800d13c:	d005      	beq.n	800d14a <_dtoa_r+0x982>
 800d13e:	45b8      	cmp	r8, r7
 800d140:	d003      	beq.n	800d14a <_dtoa_r+0x982>
 800d142:	4641      	mov	r1, r8
 800d144:	4620      	mov	r0, r4
 800d146:	f000 f9af 	bl	800d4a8 <_Bfree>
 800d14a:	4639      	mov	r1, r7
 800d14c:	4620      	mov	r0, r4
 800d14e:	f000 f9ab 	bl	800d4a8 <_Bfree>
 800d152:	e6a5      	b.n	800cea0 <_dtoa_r+0x6d8>
 800d154:	2600      	movs	r6, #0
 800d156:	4637      	mov	r7, r6
 800d158:	e7e1      	b.n	800d11e <_dtoa_r+0x956>
 800d15a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800d15c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800d160:	4637      	mov	r7, r6
 800d162:	e599      	b.n	800cc98 <_dtoa_r+0x4d0>
 800d164:	9b08      	ldr	r3, [sp, #32]
 800d166:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800d16a:	2b00      	cmp	r3, #0
 800d16c:	f000 80fd 	beq.w	800d36a <_dtoa_r+0xba2>
 800d170:	2d00      	cmp	r5, #0
 800d172:	dd05      	ble.n	800d180 <_dtoa_r+0x9b8>
 800d174:	4639      	mov	r1, r7
 800d176:	462a      	mov	r2, r5
 800d178:	4620      	mov	r0, r4
 800d17a:	f000 fb67 	bl	800d84c <__lshift>
 800d17e:	4607      	mov	r7, r0
 800d180:	9b06      	ldr	r3, [sp, #24]
 800d182:	2b00      	cmp	r3, #0
 800d184:	d05c      	beq.n	800d240 <_dtoa_r+0xa78>
 800d186:	6879      	ldr	r1, [r7, #4]
 800d188:	4620      	mov	r0, r4
 800d18a:	f000 f94d 	bl	800d428 <_Balloc>
 800d18e:	4605      	mov	r5, r0
 800d190:	b928      	cbnz	r0, 800d19e <_dtoa_r+0x9d6>
 800d192:	4b80      	ldr	r3, [pc, #512]	; (800d394 <_dtoa_r+0xbcc>)
 800d194:	4602      	mov	r2, r0
 800d196:	f240 21ea 	movw	r1, #746	; 0x2ea
 800d19a:	f7ff bb2e 	b.w	800c7fa <_dtoa_r+0x32>
 800d19e:	693a      	ldr	r2, [r7, #16]
 800d1a0:	3202      	adds	r2, #2
 800d1a2:	0092      	lsls	r2, r2, #2
 800d1a4:	f107 010c 	add.w	r1, r7, #12
 800d1a8:	300c      	adds	r0, #12
 800d1aa:	f7fe f9ff 	bl	800b5ac <memcpy>
 800d1ae:	2201      	movs	r2, #1
 800d1b0:	4629      	mov	r1, r5
 800d1b2:	4620      	mov	r0, r4
 800d1b4:	f000 fb4a 	bl	800d84c <__lshift>
 800d1b8:	9b00      	ldr	r3, [sp, #0]
 800d1ba:	3301      	adds	r3, #1
 800d1bc:	9301      	str	r3, [sp, #4]
 800d1be:	9b00      	ldr	r3, [sp, #0]
 800d1c0:	444b      	add	r3, r9
 800d1c2:	9307      	str	r3, [sp, #28]
 800d1c4:	9b02      	ldr	r3, [sp, #8]
 800d1c6:	f003 0301 	and.w	r3, r3, #1
 800d1ca:	46b8      	mov	r8, r7
 800d1cc:	9306      	str	r3, [sp, #24]
 800d1ce:	4607      	mov	r7, r0
 800d1d0:	9b01      	ldr	r3, [sp, #4]
 800d1d2:	4631      	mov	r1, r6
 800d1d4:	3b01      	subs	r3, #1
 800d1d6:	4658      	mov	r0, fp
 800d1d8:	9302      	str	r3, [sp, #8]
 800d1da:	f7ff fa69 	bl	800c6b0 <quorem>
 800d1de:	4603      	mov	r3, r0
 800d1e0:	3330      	adds	r3, #48	; 0x30
 800d1e2:	9004      	str	r0, [sp, #16]
 800d1e4:	4641      	mov	r1, r8
 800d1e6:	4658      	mov	r0, fp
 800d1e8:	9308      	str	r3, [sp, #32]
 800d1ea:	f000 fb9b 	bl	800d924 <__mcmp>
 800d1ee:	463a      	mov	r2, r7
 800d1f0:	4681      	mov	r9, r0
 800d1f2:	4631      	mov	r1, r6
 800d1f4:	4620      	mov	r0, r4
 800d1f6:	f000 fbb1 	bl	800d95c <__mdiff>
 800d1fa:	68c2      	ldr	r2, [r0, #12]
 800d1fc:	9b08      	ldr	r3, [sp, #32]
 800d1fe:	4605      	mov	r5, r0
 800d200:	bb02      	cbnz	r2, 800d244 <_dtoa_r+0xa7c>
 800d202:	4601      	mov	r1, r0
 800d204:	4658      	mov	r0, fp
 800d206:	f000 fb8d 	bl	800d924 <__mcmp>
 800d20a:	9b08      	ldr	r3, [sp, #32]
 800d20c:	4602      	mov	r2, r0
 800d20e:	4629      	mov	r1, r5
 800d210:	4620      	mov	r0, r4
 800d212:	e9cd 3208 	strd	r3, r2, [sp, #32]
 800d216:	f000 f947 	bl	800d4a8 <_Bfree>
 800d21a:	9b05      	ldr	r3, [sp, #20]
 800d21c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d21e:	9d01      	ldr	r5, [sp, #4]
 800d220:	ea43 0102 	orr.w	r1, r3, r2
 800d224:	9b06      	ldr	r3, [sp, #24]
 800d226:	430b      	orrs	r3, r1
 800d228:	9b08      	ldr	r3, [sp, #32]
 800d22a:	d10d      	bne.n	800d248 <_dtoa_r+0xa80>
 800d22c:	2b39      	cmp	r3, #57	; 0x39
 800d22e:	d029      	beq.n	800d284 <_dtoa_r+0xabc>
 800d230:	f1b9 0f00 	cmp.w	r9, #0
 800d234:	dd01      	ble.n	800d23a <_dtoa_r+0xa72>
 800d236:	9b04      	ldr	r3, [sp, #16]
 800d238:	3331      	adds	r3, #49	; 0x31
 800d23a:	9a02      	ldr	r2, [sp, #8]
 800d23c:	7013      	strb	r3, [r2, #0]
 800d23e:	e774      	b.n	800d12a <_dtoa_r+0x962>
 800d240:	4638      	mov	r0, r7
 800d242:	e7b9      	b.n	800d1b8 <_dtoa_r+0x9f0>
 800d244:	2201      	movs	r2, #1
 800d246:	e7e2      	b.n	800d20e <_dtoa_r+0xa46>
 800d248:	f1b9 0f00 	cmp.w	r9, #0
 800d24c:	db06      	blt.n	800d25c <_dtoa_r+0xa94>
 800d24e:	9905      	ldr	r1, [sp, #20]
 800d250:	ea41 0909 	orr.w	r9, r1, r9
 800d254:	9906      	ldr	r1, [sp, #24]
 800d256:	ea59 0101 	orrs.w	r1, r9, r1
 800d25a:	d120      	bne.n	800d29e <_dtoa_r+0xad6>
 800d25c:	2a00      	cmp	r2, #0
 800d25e:	ddec      	ble.n	800d23a <_dtoa_r+0xa72>
 800d260:	4659      	mov	r1, fp
 800d262:	2201      	movs	r2, #1
 800d264:	4620      	mov	r0, r4
 800d266:	9301      	str	r3, [sp, #4]
 800d268:	f000 faf0 	bl	800d84c <__lshift>
 800d26c:	4631      	mov	r1, r6
 800d26e:	4683      	mov	fp, r0
 800d270:	f000 fb58 	bl	800d924 <__mcmp>
 800d274:	2800      	cmp	r0, #0
 800d276:	9b01      	ldr	r3, [sp, #4]
 800d278:	dc02      	bgt.n	800d280 <_dtoa_r+0xab8>
 800d27a:	d1de      	bne.n	800d23a <_dtoa_r+0xa72>
 800d27c:	07da      	lsls	r2, r3, #31
 800d27e:	d5dc      	bpl.n	800d23a <_dtoa_r+0xa72>
 800d280:	2b39      	cmp	r3, #57	; 0x39
 800d282:	d1d8      	bne.n	800d236 <_dtoa_r+0xa6e>
 800d284:	9a02      	ldr	r2, [sp, #8]
 800d286:	2339      	movs	r3, #57	; 0x39
 800d288:	7013      	strb	r3, [r2, #0]
 800d28a:	462b      	mov	r3, r5
 800d28c:	461d      	mov	r5, r3
 800d28e:	3b01      	subs	r3, #1
 800d290:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800d294:	2a39      	cmp	r2, #57	; 0x39
 800d296:	d050      	beq.n	800d33a <_dtoa_r+0xb72>
 800d298:	3201      	adds	r2, #1
 800d29a:	701a      	strb	r2, [r3, #0]
 800d29c:	e745      	b.n	800d12a <_dtoa_r+0x962>
 800d29e:	2a00      	cmp	r2, #0
 800d2a0:	dd03      	ble.n	800d2aa <_dtoa_r+0xae2>
 800d2a2:	2b39      	cmp	r3, #57	; 0x39
 800d2a4:	d0ee      	beq.n	800d284 <_dtoa_r+0xabc>
 800d2a6:	3301      	adds	r3, #1
 800d2a8:	e7c7      	b.n	800d23a <_dtoa_r+0xa72>
 800d2aa:	9a01      	ldr	r2, [sp, #4]
 800d2ac:	9907      	ldr	r1, [sp, #28]
 800d2ae:	f802 3c01 	strb.w	r3, [r2, #-1]
 800d2b2:	428a      	cmp	r2, r1
 800d2b4:	d02a      	beq.n	800d30c <_dtoa_r+0xb44>
 800d2b6:	4659      	mov	r1, fp
 800d2b8:	2300      	movs	r3, #0
 800d2ba:	220a      	movs	r2, #10
 800d2bc:	4620      	mov	r0, r4
 800d2be:	f000 f915 	bl	800d4ec <__multadd>
 800d2c2:	45b8      	cmp	r8, r7
 800d2c4:	4683      	mov	fp, r0
 800d2c6:	f04f 0300 	mov.w	r3, #0
 800d2ca:	f04f 020a 	mov.w	r2, #10
 800d2ce:	4641      	mov	r1, r8
 800d2d0:	4620      	mov	r0, r4
 800d2d2:	d107      	bne.n	800d2e4 <_dtoa_r+0xb1c>
 800d2d4:	f000 f90a 	bl	800d4ec <__multadd>
 800d2d8:	4680      	mov	r8, r0
 800d2da:	4607      	mov	r7, r0
 800d2dc:	9b01      	ldr	r3, [sp, #4]
 800d2de:	3301      	adds	r3, #1
 800d2e0:	9301      	str	r3, [sp, #4]
 800d2e2:	e775      	b.n	800d1d0 <_dtoa_r+0xa08>
 800d2e4:	f000 f902 	bl	800d4ec <__multadd>
 800d2e8:	4639      	mov	r1, r7
 800d2ea:	4680      	mov	r8, r0
 800d2ec:	2300      	movs	r3, #0
 800d2ee:	220a      	movs	r2, #10
 800d2f0:	4620      	mov	r0, r4
 800d2f2:	f000 f8fb 	bl	800d4ec <__multadd>
 800d2f6:	4607      	mov	r7, r0
 800d2f8:	e7f0      	b.n	800d2dc <_dtoa_r+0xb14>
 800d2fa:	f1b9 0f00 	cmp.w	r9, #0
 800d2fe:	9a00      	ldr	r2, [sp, #0]
 800d300:	bfcc      	ite	gt
 800d302:	464d      	movgt	r5, r9
 800d304:	2501      	movle	r5, #1
 800d306:	4415      	add	r5, r2
 800d308:	f04f 0800 	mov.w	r8, #0
 800d30c:	4659      	mov	r1, fp
 800d30e:	2201      	movs	r2, #1
 800d310:	4620      	mov	r0, r4
 800d312:	9301      	str	r3, [sp, #4]
 800d314:	f000 fa9a 	bl	800d84c <__lshift>
 800d318:	4631      	mov	r1, r6
 800d31a:	4683      	mov	fp, r0
 800d31c:	f000 fb02 	bl	800d924 <__mcmp>
 800d320:	2800      	cmp	r0, #0
 800d322:	dcb2      	bgt.n	800d28a <_dtoa_r+0xac2>
 800d324:	d102      	bne.n	800d32c <_dtoa_r+0xb64>
 800d326:	9b01      	ldr	r3, [sp, #4]
 800d328:	07db      	lsls	r3, r3, #31
 800d32a:	d4ae      	bmi.n	800d28a <_dtoa_r+0xac2>
 800d32c:	462b      	mov	r3, r5
 800d32e:	461d      	mov	r5, r3
 800d330:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800d334:	2a30      	cmp	r2, #48	; 0x30
 800d336:	d0fa      	beq.n	800d32e <_dtoa_r+0xb66>
 800d338:	e6f7      	b.n	800d12a <_dtoa_r+0x962>
 800d33a:	9a00      	ldr	r2, [sp, #0]
 800d33c:	429a      	cmp	r2, r3
 800d33e:	d1a5      	bne.n	800d28c <_dtoa_r+0xac4>
 800d340:	f10a 0a01 	add.w	sl, sl, #1
 800d344:	2331      	movs	r3, #49	; 0x31
 800d346:	e779      	b.n	800d23c <_dtoa_r+0xa74>
 800d348:	4b13      	ldr	r3, [pc, #76]	; (800d398 <_dtoa_r+0xbd0>)
 800d34a:	f7ff baaf 	b.w	800c8ac <_dtoa_r+0xe4>
 800d34e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d350:	2b00      	cmp	r3, #0
 800d352:	f47f aa86 	bne.w	800c862 <_dtoa_r+0x9a>
 800d356:	4b11      	ldr	r3, [pc, #68]	; (800d39c <_dtoa_r+0xbd4>)
 800d358:	f7ff baa8 	b.w	800c8ac <_dtoa_r+0xe4>
 800d35c:	f1b9 0f00 	cmp.w	r9, #0
 800d360:	dc03      	bgt.n	800d36a <_dtoa_r+0xba2>
 800d362:	9b05      	ldr	r3, [sp, #20]
 800d364:	2b02      	cmp	r3, #2
 800d366:	f73f aec9 	bgt.w	800d0fc <_dtoa_r+0x934>
 800d36a:	9d00      	ldr	r5, [sp, #0]
 800d36c:	4631      	mov	r1, r6
 800d36e:	4658      	mov	r0, fp
 800d370:	f7ff f99e 	bl	800c6b0 <quorem>
 800d374:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800d378:	f805 3b01 	strb.w	r3, [r5], #1
 800d37c:	9a00      	ldr	r2, [sp, #0]
 800d37e:	1aaa      	subs	r2, r5, r2
 800d380:	4591      	cmp	r9, r2
 800d382:	ddba      	ble.n	800d2fa <_dtoa_r+0xb32>
 800d384:	4659      	mov	r1, fp
 800d386:	2300      	movs	r3, #0
 800d388:	220a      	movs	r2, #10
 800d38a:	4620      	mov	r0, r4
 800d38c:	f000 f8ae 	bl	800d4ec <__multadd>
 800d390:	4683      	mov	fp, r0
 800d392:	e7eb      	b.n	800d36c <_dtoa_r+0xba4>
 800d394:	08021e71 	.word	0x08021e71
 800d398:	08021cc9 	.word	0x08021cc9
 800d39c:	08021dee 	.word	0x08021dee

0800d3a0 <_fstat_r>:
 800d3a0:	b538      	push	{r3, r4, r5, lr}
 800d3a2:	4d07      	ldr	r5, [pc, #28]	; (800d3c0 <_fstat_r+0x20>)
 800d3a4:	2300      	movs	r3, #0
 800d3a6:	4604      	mov	r4, r0
 800d3a8:	4608      	mov	r0, r1
 800d3aa:	4611      	mov	r1, r2
 800d3ac:	602b      	str	r3, [r5, #0]
 800d3ae:	f7f4 ff50 	bl	8002252 <_fstat>
 800d3b2:	1c43      	adds	r3, r0, #1
 800d3b4:	d102      	bne.n	800d3bc <_fstat_r+0x1c>
 800d3b6:	682b      	ldr	r3, [r5, #0]
 800d3b8:	b103      	cbz	r3, 800d3bc <_fstat_r+0x1c>
 800d3ba:	6023      	str	r3, [r4, #0]
 800d3bc:	bd38      	pop	{r3, r4, r5, pc}
 800d3be:	bf00      	nop
 800d3c0:	20002040 	.word	0x20002040

0800d3c4 <_isatty_r>:
 800d3c4:	b538      	push	{r3, r4, r5, lr}
 800d3c6:	4d06      	ldr	r5, [pc, #24]	; (800d3e0 <_isatty_r+0x1c>)
 800d3c8:	2300      	movs	r3, #0
 800d3ca:	4604      	mov	r4, r0
 800d3cc:	4608      	mov	r0, r1
 800d3ce:	602b      	str	r3, [r5, #0]
 800d3d0:	f7f4 ff4f 	bl	8002272 <_isatty>
 800d3d4:	1c43      	adds	r3, r0, #1
 800d3d6:	d102      	bne.n	800d3de <_isatty_r+0x1a>
 800d3d8:	682b      	ldr	r3, [r5, #0]
 800d3da:	b103      	cbz	r3, 800d3de <_isatty_r+0x1a>
 800d3dc:	6023      	str	r3, [r4, #0]
 800d3de:	bd38      	pop	{r3, r4, r5, pc}
 800d3e0:	20002040 	.word	0x20002040

0800d3e4 <_localeconv_r>:
 800d3e4:	4800      	ldr	r0, [pc, #0]	; (800d3e8 <_localeconv_r+0x4>)
 800d3e6:	4770      	bx	lr
 800d3e8:	20000198 	.word	0x20000198

0800d3ec <_lseek_r>:
 800d3ec:	b538      	push	{r3, r4, r5, lr}
 800d3ee:	4d07      	ldr	r5, [pc, #28]	; (800d40c <_lseek_r+0x20>)
 800d3f0:	4604      	mov	r4, r0
 800d3f2:	4608      	mov	r0, r1
 800d3f4:	4611      	mov	r1, r2
 800d3f6:	2200      	movs	r2, #0
 800d3f8:	602a      	str	r2, [r5, #0]
 800d3fa:	461a      	mov	r2, r3
 800d3fc:	f7f4 ff44 	bl	8002288 <_lseek>
 800d400:	1c43      	adds	r3, r0, #1
 800d402:	d102      	bne.n	800d40a <_lseek_r+0x1e>
 800d404:	682b      	ldr	r3, [r5, #0]
 800d406:	b103      	cbz	r3, 800d40a <_lseek_r+0x1e>
 800d408:	6023      	str	r3, [r4, #0]
 800d40a:	bd38      	pop	{r3, r4, r5, pc}
 800d40c:	20002040 	.word	0x20002040

0800d410 <__malloc_lock>:
 800d410:	4801      	ldr	r0, [pc, #4]	; (800d418 <__malloc_lock+0x8>)
 800d412:	f7fe b854 	b.w	800b4be <__retarget_lock_acquire_recursive>
 800d416:	bf00      	nop
 800d418:	20002034 	.word	0x20002034

0800d41c <__malloc_unlock>:
 800d41c:	4801      	ldr	r0, [pc, #4]	; (800d424 <__malloc_unlock+0x8>)
 800d41e:	f7fe b850 	b.w	800b4c2 <__retarget_lock_release_recursive>
 800d422:	bf00      	nop
 800d424:	20002034 	.word	0x20002034

0800d428 <_Balloc>:
 800d428:	b570      	push	{r4, r5, r6, lr}
 800d42a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800d42c:	4604      	mov	r4, r0
 800d42e:	460d      	mov	r5, r1
 800d430:	b976      	cbnz	r6, 800d450 <_Balloc+0x28>
 800d432:	2010      	movs	r0, #16
 800d434:	f7fe f8aa 	bl	800b58c <malloc>
 800d438:	4602      	mov	r2, r0
 800d43a:	6260      	str	r0, [r4, #36]	; 0x24
 800d43c:	b920      	cbnz	r0, 800d448 <_Balloc+0x20>
 800d43e:	4b18      	ldr	r3, [pc, #96]	; (800d4a0 <_Balloc+0x78>)
 800d440:	4818      	ldr	r0, [pc, #96]	; (800d4a4 <_Balloc+0x7c>)
 800d442:	2166      	movs	r1, #102	; 0x66
 800d444:	f7fd fe22 	bl	800b08c <__assert_func>
 800d448:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d44c:	6006      	str	r6, [r0, #0]
 800d44e:	60c6      	str	r6, [r0, #12]
 800d450:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800d452:	68f3      	ldr	r3, [r6, #12]
 800d454:	b183      	cbz	r3, 800d478 <_Balloc+0x50>
 800d456:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d458:	68db      	ldr	r3, [r3, #12]
 800d45a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800d45e:	b9b8      	cbnz	r0, 800d490 <_Balloc+0x68>
 800d460:	2101      	movs	r1, #1
 800d462:	fa01 f605 	lsl.w	r6, r1, r5
 800d466:	1d72      	adds	r2, r6, #5
 800d468:	0092      	lsls	r2, r2, #2
 800d46a:	4620      	mov	r0, r4
 800d46c:	f7fe f8b4 	bl	800b5d8 <_calloc_r>
 800d470:	b160      	cbz	r0, 800d48c <_Balloc+0x64>
 800d472:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800d476:	e00e      	b.n	800d496 <_Balloc+0x6e>
 800d478:	2221      	movs	r2, #33	; 0x21
 800d47a:	2104      	movs	r1, #4
 800d47c:	4620      	mov	r0, r4
 800d47e:	f7fe f8ab 	bl	800b5d8 <_calloc_r>
 800d482:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d484:	60f0      	str	r0, [r6, #12]
 800d486:	68db      	ldr	r3, [r3, #12]
 800d488:	2b00      	cmp	r3, #0
 800d48a:	d1e4      	bne.n	800d456 <_Balloc+0x2e>
 800d48c:	2000      	movs	r0, #0
 800d48e:	bd70      	pop	{r4, r5, r6, pc}
 800d490:	6802      	ldr	r2, [r0, #0]
 800d492:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800d496:	2300      	movs	r3, #0
 800d498:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800d49c:	e7f7      	b.n	800d48e <_Balloc+0x66>
 800d49e:	bf00      	nop
 800d4a0:	08021dfb 	.word	0x08021dfb
 800d4a4:	08021e82 	.word	0x08021e82

0800d4a8 <_Bfree>:
 800d4a8:	b570      	push	{r4, r5, r6, lr}
 800d4aa:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800d4ac:	4605      	mov	r5, r0
 800d4ae:	460c      	mov	r4, r1
 800d4b0:	b976      	cbnz	r6, 800d4d0 <_Bfree+0x28>
 800d4b2:	2010      	movs	r0, #16
 800d4b4:	f7fe f86a 	bl	800b58c <malloc>
 800d4b8:	4602      	mov	r2, r0
 800d4ba:	6268      	str	r0, [r5, #36]	; 0x24
 800d4bc:	b920      	cbnz	r0, 800d4c8 <_Bfree+0x20>
 800d4be:	4b09      	ldr	r3, [pc, #36]	; (800d4e4 <_Bfree+0x3c>)
 800d4c0:	4809      	ldr	r0, [pc, #36]	; (800d4e8 <_Bfree+0x40>)
 800d4c2:	218a      	movs	r1, #138	; 0x8a
 800d4c4:	f7fd fde2 	bl	800b08c <__assert_func>
 800d4c8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d4cc:	6006      	str	r6, [r0, #0]
 800d4ce:	60c6      	str	r6, [r0, #12]
 800d4d0:	b13c      	cbz	r4, 800d4e2 <_Bfree+0x3a>
 800d4d2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800d4d4:	6862      	ldr	r2, [r4, #4]
 800d4d6:	68db      	ldr	r3, [r3, #12]
 800d4d8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800d4dc:	6021      	str	r1, [r4, #0]
 800d4de:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800d4e2:	bd70      	pop	{r4, r5, r6, pc}
 800d4e4:	08021dfb 	.word	0x08021dfb
 800d4e8:	08021e82 	.word	0x08021e82

0800d4ec <__multadd>:
 800d4ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d4f0:	690e      	ldr	r6, [r1, #16]
 800d4f2:	4607      	mov	r7, r0
 800d4f4:	4698      	mov	r8, r3
 800d4f6:	460c      	mov	r4, r1
 800d4f8:	f101 0014 	add.w	r0, r1, #20
 800d4fc:	2300      	movs	r3, #0
 800d4fe:	6805      	ldr	r5, [r0, #0]
 800d500:	b2a9      	uxth	r1, r5
 800d502:	fb02 8101 	mla	r1, r2, r1, r8
 800d506:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800d50a:	0c2d      	lsrs	r5, r5, #16
 800d50c:	fb02 c505 	mla	r5, r2, r5, ip
 800d510:	b289      	uxth	r1, r1
 800d512:	3301      	adds	r3, #1
 800d514:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800d518:	429e      	cmp	r6, r3
 800d51a:	f840 1b04 	str.w	r1, [r0], #4
 800d51e:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800d522:	dcec      	bgt.n	800d4fe <__multadd+0x12>
 800d524:	f1b8 0f00 	cmp.w	r8, #0
 800d528:	d022      	beq.n	800d570 <__multadd+0x84>
 800d52a:	68a3      	ldr	r3, [r4, #8]
 800d52c:	42b3      	cmp	r3, r6
 800d52e:	dc19      	bgt.n	800d564 <__multadd+0x78>
 800d530:	6861      	ldr	r1, [r4, #4]
 800d532:	4638      	mov	r0, r7
 800d534:	3101      	adds	r1, #1
 800d536:	f7ff ff77 	bl	800d428 <_Balloc>
 800d53a:	4605      	mov	r5, r0
 800d53c:	b928      	cbnz	r0, 800d54a <__multadd+0x5e>
 800d53e:	4602      	mov	r2, r0
 800d540:	4b0d      	ldr	r3, [pc, #52]	; (800d578 <__multadd+0x8c>)
 800d542:	480e      	ldr	r0, [pc, #56]	; (800d57c <__multadd+0x90>)
 800d544:	21b5      	movs	r1, #181	; 0xb5
 800d546:	f7fd fda1 	bl	800b08c <__assert_func>
 800d54a:	6922      	ldr	r2, [r4, #16]
 800d54c:	3202      	adds	r2, #2
 800d54e:	f104 010c 	add.w	r1, r4, #12
 800d552:	0092      	lsls	r2, r2, #2
 800d554:	300c      	adds	r0, #12
 800d556:	f7fe f829 	bl	800b5ac <memcpy>
 800d55a:	4621      	mov	r1, r4
 800d55c:	4638      	mov	r0, r7
 800d55e:	f7ff ffa3 	bl	800d4a8 <_Bfree>
 800d562:	462c      	mov	r4, r5
 800d564:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800d568:	3601      	adds	r6, #1
 800d56a:	f8c3 8014 	str.w	r8, [r3, #20]
 800d56e:	6126      	str	r6, [r4, #16]
 800d570:	4620      	mov	r0, r4
 800d572:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d576:	bf00      	nop
 800d578:	08021e71 	.word	0x08021e71
 800d57c:	08021e82 	.word	0x08021e82

0800d580 <__hi0bits>:
 800d580:	0c03      	lsrs	r3, r0, #16
 800d582:	041b      	lsls	r3, r3, #16
 800d584:	b9d3      	cbnz	r3, 800d5bc <__hi0bits+0x3c>
 800d586:	0400      	lsls	r0, r0, #16
 800d588:	2310      	movs	r3, #16
 800d58a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800d58e:	bf04      	itt	eq
 800d590:	0200      	lsleq	r0, r0, #8
 800d592:	3308      	addeq	r3, #8
 800d594:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800d598:	bf04      	itt	eq
 800d59a:	0100      	lsleq	r0, r0, #4
 800d59c:	3304      	addeq	r3, #4
 800d59e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800d5a2:	bf04      	itt	eq
 800d5a4:	0080      	lsleq	r0, r0, #2
 800d5a6:	3302      	addeq	r3, #2
 800d5a8:	2800      	cmp	r0, #0
 800d5aa:	db05      	blt.n	800d5b8 <__hi0bits+0x38>
 800d5ac:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800d5b0:	f103 0301 	add.w	r3, r3, #1
 800d5b4:	bf08      	it	eq
 800d5b6:	2320      	moveq	r3, #32
 800d5b8:	4618      	mov	r0, r3
 800d5ba:	4770      	bx	lr
 800d5bc:	2300      	movs	r3, #0
 800d5be:	e7e4      	b.n	800d58a <__hi0bits+0xa>

0800d5c0 <__lo0bits>:
 800d5c0:	6803      	ldr	r3, [r0, #0]
 800d5c2:	f013 0207 	ands.w	r2, r3, #7
 800d5c6:	4601      	mov	r1, r0
 800d5c8:	d00b      	beq.n	800d5e2 <__lo0bits+0x22>
 800d5ca:	07da      	lsls	r2, r3, #31
 800d5cc:	d424      	bmi.n	800d618 <__lo0bits+0x58>
 800d5ce:	0798      	lsls	r0, r3, #30
 800d5d0:	bf49      	itett	mi
 800d5d2:	085b      	lsrmi	r3, r3, #1
 800d5d4:	089b      	lsrpl	r3, r3, #2
 800d5d6:	2001      	movmi	r0, #1
 800d5d8:	600b      	strmi	r3, [r1, #0]
 800d5da:	bf5c      	itt	pl
 800d5dc:	600b      	strpl	r3, [r1, #0]
 800d5de:	2002      	movpl	r0, #2
 800d5e0:	4770      	bx	lr
 800d5e2:	b298      	uxth	r0, r3
 800d5e4:	b9b0      	cbnz	r0, 800d614 <__lo0bits+0x54>
 800d5e6:	0c1b      	lsrs	r3, r3, #16
 800d5e8:	2010      	movs	r0, #16
 800d5ea:	f013 0fff 	tst.w	r3, #255	; 0xff
 800d5ee:	bf04      	itt	eq
 800d5f0:	0a1b      	lsreq	r3, r3, #8
 800d5f2:	3008      	addeq	r0, #8
 800d5f4:	071a      	lsls	r2, r3, #28
 800d5f6:	bf04      	itt	eq
 800d5f8:	091b      	lsreq	r3, r3, #4
 800d5fa:	3004      	addeq	r0, #4
 800d5fc:	079a      	lsls	r2, r3, #30
 800d5fe:	bf04      	itt	eq
 800d600:	089b      	lsreq	r3, r3, #2
 800d602:	3002      	addeq	r0, #2
 800d604:	07da      	lsls	r2, r3, #31
 800d606:	d403      	bmi.n	800d610 <__lo0bits+0x50>
 800d608:	085b      	lsrs	r3, r3, #1
 800d60a:	f100 0001 	add.w	r0, r0, #1
 800d60e:	d005      	beq.n	800d61c <__lo0bits+0x5c>
 800d610:	600b      	str	r3, [r1, #0]
 800d612:	4770      	bx	lr
 800d614:	4610      	mov	r0, r2
 800d616:	e7e8      	b.n	800d5ea <__lo0bits+0x2a>
 800d618:	2000      	movs	r0, #0
 800d61a:	4770      	bx	lr
 800d61c:	2020      	movs	r0, #32
 800d61e:	4770      	bx	lr

0800d620 <__i2b>:
 800d620:	b510      	push	{r4, lr}
 800d622:	460c      	mov	r4, r1
 800d624:	2101      	movs	r1, #1
 800d626:	f7ff feff 	bl	800d428 <_Balloc>
 800d62a:	4602      	mov	r2, r0
 800d62c:	b928      	cbnz	r0, 800d63a <__i2b+0x1a>
 800d62e:	4b05      	ldr	r3, [pc, #20]	; (800d644 <__i2b+0x24>)
 800d630:	4805      	ldr	r0, [pc, #20]	; (800d648 <__i2b+0x28>)
 800d632:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800d636:	f7fd fd29 	bl	800b08c <__assert_func>
 800d63a:	2301      	movs	r3, #1
 800d63c:	6144      	str	r4, [r0, #20]
 800d63e:	6103      	str	r3, [r0, #16]
 800d640:	bd10      	pop	{r4, pc}
 800d642:	bf00      	nop
 800d644:	08021e71 	.word	0x08021e71
 800d648:	08021e82 	.word	0x08021e82

0800d64c <__multiply>:
 800d64c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d650:	4614      	mov	r4, r2
 800d652:	690a      	ldr	r2, [r1, #16]
 800d654:	6923      	ldr	r3, [r4, #16]
 800d656:	429a      	cmp	r2, r3
 800d658:	bfb8      	it	lt
 800d65a:	460b      	movlt	r3, r1
 800d65c:	460d      	mov	r5, r1
 800d65e:	bfbc      	itt	lt
 800d660:	4625      	movlt	r5, r4
 800d662:	461c      	movlt	r4, r3
 800d664:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800d668:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800d66c:	68ab      	ldr	r3, [r5, #8]
 800d66e:	6869      	ldr	r1, [r5, #4]
 800d670:	eb0a 0709 	add.w	r7, sl, r9
 800d674:	42bb      	cmp	r3, r7
 800d676:	b085      	sub	sp, #20
 800d678:	bfb8      	it	lt
 800d67a:	3101      	addlt	r1, #1
 800d67c:	f7ff fed4 	bl	800d428 <_Balloc>
 800d680:	b930      	cbnz	r0, 800d690 <__multiply+0x44>
 800d682:	4602      	mov	r2, r0
 800d684:	4b42      	ldr	r3, [pc, #264]	; (800d790 <__multiply+0x144>)
 800d686:	4843      	ldr	r0, [pc, #268]	; (800d794 <__multiply+0x148>)
 800d688:	f240 115d 	movw	r1, #349	; 0x15d
 800d68c:	f7fd fcfe 	bl	800b08c <__assert_func>
 800d690:	f100 0614 	add.w	r6, r0, #20
 800d694:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800d698:	4633      	mov	r3, r6
 800d69a:	2200      	movs	r2, #0
 800d69c:	4543      	cmp	r3, r8
 800d69e:	d31e      	bcc.n	800d6de <__multiply+0x92>
 800d6a0:	f105 0c14 	add.w	ip, r5, #20
 800d6a4:	f104 0314 	add.w	r3, r4, #20
 800d6a8:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800d6ac:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800d6b0:	9202      	str	r2, [sp, #8]
 800d6b2:	ebac 0205 	sub.w	r2, ip, r5
 800d6b6:	3a15      	subs	r2, #21
 800d6b8:	f022 0203 	bic.w	r2, r2, #3
 800d6bc:	3204      	adds	r2, #4
 800d6be:	f105 0115 	add.w	r1, r5, #21
 800d6c2:	458c      	cmp	ip, r1
 800d6c4:	bf38      	it	cc
 800d6c6:	2204      	movcc	r2, #4
 800d6c8:	9201      	str	r2, [sp, #4]
 800d6ca:	9a02      	ldr	r2, [sp, #8]
 800d6cc:	9303      	str	r3, [sp, #12]
 800d6ce:	429a      	cmp	r2, r3
 800d6d0:	d808      	bhi.n	800d6e4 <__multiply+0x98>
 800d6d2:	2f00      	cmp	r7, #0
 800d6d4:	dc55      	bgt.n	800d782 <__multiply+0x136>
 800d6d6:	6107      	str	r7, [r0, #16]
 800d6d8:	b005      	add	sp, #20
 800d6da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d6de:	f843 2b04 	str.w	r2, [r3], #4
 800d6e2:	e7db      	b.n	800d69c <__multiply+0x50>
 800d6e4:	f8b3 a000 	ldrh.w	sl, [r3]
 800d6e8:	f1ba 0f00 	cmp.w	sl, #0
 800d6ec:	d020      	beq.n	800d730 <__multiply+0xe4>
 800d6ee:	f105 0e14 	add.w	lr, r5, #20
 800d6f2:	46b1      	mov	r9, r6
 800d6f4:	2200      	movs	r2, #0
 800d6f6:	f85e 4b04 	ldr.w	r4, [lr], #4
 800d6fa:	f8d9 b000 	ldr.w	fp, [r9]
 800d6fe:	b2a1      	uxth	r1, r4
 800d700:	fa1f fb8b 	uxth.w	fp, fp
 800d704:	fb0a b101 	mla	r1, sl, r1, fp
 800d708:	4411      	add	r1, r2
 800d70a:	f8d9 2000 	ldr.w	r2, [r9]
 800d70e:	0c24      	lsrs	r4, r4, #16
 800d710:	0c12      	lsrs	r2, r2, #16
 800d712:	fb0a 2404 	mla	r4, sl, r4, r2
 800d716:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800d71a:	b289      	uxth	r1, r1
 800d71c:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800d720:	45f4      	cmp	ip, lr
 800d722:	f849 1b04 	str.w	r1, [r9], #4
 800d726:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800d72a:	d8e4      	bhi.n	800d6f6 <__multiply+0xaa>
 800d72c:	9901      	ldr	r1, [sp, #4]
 800d72e:	5072      	str	r2, [r6, r1]
 800d730:	9a03      	ldr	r2, [sp, #12]
 800d732:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800d736:	3304      	adds	r3, #4
 800d738:	f1b9 0f00 	cmp.w	r9, #0
 800d73c:	d01f      	beq.n	800d77e <__multiply+0x132>
 800d73e:	6834      	ldr	r4, [r6, #0]
 800d740:	f105 0114 	add.w	r1, r5, #20
 800d744:	46b6      	mov	lr, r6
 800d746:	f04f 0a00 	mov.w	sl, #0
 800d74a:	880a      	ldrh	r2, [r1, #0]
 800d74c:	f8be b002 	ldrh.w	fp, [lr, #2]
 800d750:	fb09 b202 	mla	r2, r9, r2, fp
 800d754:	4492      	add	sl, r2
 800d756:	b2a4      	uxth	r4, r4
 800d758:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800d75c:	f84e 4b04 	str.w	r4, [lr], #4
 800d760:	f851 4b04 	ldr.w	r4, [r1], #4
 800d764:	f8be 2000 	ldrh.w	r2, [lr]
 800d768:	0c24      	lsrs	r4, r4, #16
 800d76a:	fb09 2404 	mla	r4, r9, r4, r2
 800d76e:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800d772:	458c      	cmp	ip, r1
 800d774:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800d778:	d8e7      	bhi.n	800d74a <__multiply+0xfe>
 800d77a:	9a01      	ldr	r2, [sp, #4]
 800d77c:	50b4      	str	r4, [r6, r2]
 800d77e:	3604      	adds	r6, #4
 800d780:	e7a3      	b.n	800d6ca <__multiply+0x7e>
 800d782:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800d786:	2b00      	cmp	r3, #0
 800d788:	d1a5      	bne.n	800d6d6 <__multiply+0x8a>
 800d78a:	3f01      	subs	r7, #1
 800d78c:	e7a1      	b.n	800d6d2 <__multiply+0x86>
 800d78e:	bf00      	nop
 800d790:	08021e71 	.word	0x08021e71
 800d794:	08021e82 	.word	0x08021e82

0800d798 <__pow5mult>:
 800d798:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d79c:	4615      	mov	r5, r2
 800d79e:	f012 0203 	ands.w	r2, r2, #3
 800d7a2:	4606      	mov	r6, r0
 800d7a4:	460f      	mov	r7, r1
 800d7a6:	d007      	beq.n	800d7b8 <__pow5mult+0x20>
 800d7a8:	4c25      	ldr	r4, [pc, #148]	; (800d840 <__pow5mult+0xa8>)
 800d7aa:	3a01      	subs	r2, #1
 800d7ac:	2300      	movs	r3, #0
 800d7ae:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800d7b2:	f7ff fe9b 	bl	800d4ec <__multadd>
 800d7b6:	4607      	mov	r7, r0
 800d7b8:	10ad      	asrs	r5, r5, #2
 800d7ba:	d03d      	beq.n	800d838 <__pow5mult+0xa0>
 800d7bc:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800d7be:	b97c      	cbnz	r4, 800d7e0 <__pow5mult+0x48>
 800d7c0:	2010      	movs	r0, #16
 800d7c2:	f7fd fee3 	bl	800b58c <malloc>
 800d7c6:	4602      	mov	r2, r0
 800d7c8:	6270      	str	r0, [r6, #36]	; 0x24
 800d7ca:	b928      	cbnz	r0, 800d7d8 <__pow5mult+0x40>
 800d7cc:	4b1d      	ldr	r3, [pc, #116]	; (800d844 <__pow5mult+0xac>)
 800d7ce:	481e      	ldr	r0, [pc, #120]	; (800d848 <__pow5mult+0xb0>)
 800d7d0:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800d7d4:	f7fd fc5a 	bl	800b08c <__assert_func>
 800d7d8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800d7dc:	6004      	str	r4, [r0, #0]
 800d7de:	60c4      	str	r4, [r0, #12]
 800d7e0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800d7e4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800d7e8:	b94c      	cbnz	r4, 800d7fe <__pow5mult+0x66>
 800d7ea:	f240 2171 	movw	r1, #625	; 0x271
 800d7ee:	4630      	mov	r0, r6
 800d7f0:	f7ff ff16 	bl	800d620 <__i2b>
 800d7f4:	2300      	movs	r3, #0
 800d7f6:	f8c8 0008 	str.w	r0, [r8, #8]
 800d7fa:	4604      	mov	r4, r0
 800d7fc:	6003      	str	r3, [r0, #0]
 800d7fe:	f04f 0900 	mov.w	r9, #0
 800d802:	07eb      	lsls	r3, r5, #31
 800d804:	d50a      	bpl.n	800d81c <__pow5mult+0x84>
 800d806:	4639      	mov	r1, r7
 800d808:	4622      	mov	r2, r4
 800d80a:	4630      	mov	r0, r6
 800d80c:	f7ff ff1e 	bl	800d64c <__multiply>
 800d810:	4639      	mov	r1, r7
 800d812:	4680      	mov	r8, r0
 800d814:	4630      	mov	r0, r6
 800d816:	f7ff fe47 	bl	800d4a8 <_Bfree>
 800d81a:	4647      	mov	r7, r8
 800d81c:	106d      	asrs	r5, r5, #1
 800d81e:	d00b      	beq.n	800d838 <__pow5mult+0xa0>
 800d820:	6820      	ldr	r0, [r4, #0]
 800d822:	b938      	cbnz	r0, 800d834 <__pow5mult+0x9c>
 800d824:	4622      	mov	r2, r4
 800d826:	4621      	mov	r1, r4
 800d828:	4630      	mov	r0, r6
 800d82a:	f7ff ff0f 	bl	800d64c <__multiply>
 800d82e:	6020      	str	r0, [r4, #0]
 800d830:	f8c0 9000 	str.w	r9, [r0]
 800d834:	4604      	mov	r4, r0
 800d836:	e7e4      	b.n	800d802 <__pow5mult+0x6a>
 800d838:	4638      	mov	r0, r7
 800d83a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d83e:	bf00      	nop
 800d840:	08021fd8 	.word	0x08021fd8
 800d844:	08021dfb 	.word	0x08021dfb
 800d848:	08021e82 	.word	0x08021e82

0800d84c <__lshift>:
 800d84c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d850:	460c      	mov	r4, r1
 800d852:	6849      	ldr	r1, [r1, #4]
 800d854:	6923      	ldr	r3, [r4, #16]
 800d856:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800d85a:	68a3      	ldr	r3, [r4, #8]
 800d85c:	4607      	mov	r7, r0
 800d85e:	4691      	mov	r9, r2
 800d860:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800d864:	f108 0601 	add.w	r6, r8, #1
 800d868:	42b3      	cmp	r3, r6
 800d86a:	db0b      	blt.n	800d884 <__lshift+0x38>
 800d86c:	4638      	mov	r0, r7
 800d86e:	f7ff fddb 	bl	800d428 <_Balloc>
 800d872:	4605      	mov	r5, r0
 800d874:	b948      	cbnz	r0, 800d88a <__lshift+0x3e>
 800d876:	4602      	mov	r2, r0
 800d878:	4b28      	ldr	r3, [pc, #160]	; (800d91c <__lshift+0xd0>)
 800d87a:	4829      	ldr	r0, [pc, #164]	; (800d920 <__lshift+0xd4>)
 800d87c:	f240 11d9 	movw	r1, #473	; 0x1d9
 800d880:	f7fd fc04 	bl	800b08c <__assert_func>
 800d884:	3101      	adds	r1, #1
 800d886:	005b      	lsls	r3, r3, #1
 800d888:	e7ee      	b.n	800d868 <__lshift+0x1c>
 800d88a:	2300      	movs	r3, #0
 800d88c:	f100 0114 	add.w	r1, r0, #20
 800d890:	f100 0210 	add.w	r2, r0, #16
 800d894:	4618      	mov	r0, r3
 800d896:	4553      	cmp	r3, sl
 800d898:	db33      	blt.n	800d902 <__lshift+0xb6>
 800d89a:	6920      	ldr	r0, [r4, #16]
 800d89c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800d8a0:	f104 0314 	add.w	r3, r4, #20
 800d8a4:	f019 091f 	ands.w	r9, r9, #31
 800d8a8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800d8ac:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800d8b0:	d02b      	beq.n	800d90a <__lshift+0xbe>
 800d8b2:	f1c9 0e20 	rsb	lr, r9, #32
 800d8b6:	468a      	mov	sl, r1
 800d8b8:	2200      	movs	r2, #0
 800d8ba:	6818      	ldr	r0, [r3, #0]
 800d8bc:	fa00 f009 	lsl.w	r0, r0, r9
 800d8c0:	4302      	orrs	r2, r0
 800d8c2:	f84a 2b04 	str.w	r2, [sl], #4
 800d8c6:	f853 2b04 	ldr.w	r2, [r3], #4
 800d8ca:	459c      	cmp	ip, r3
 800d8cc:	fa22 f20e 	lsr.w	r2, r2, lr
 800d8d0:	d8f3      	bhi.n	800d8ba <__lshift+0x6e>
 800d8d2:	ebac 0304 	sub.w	r3, ip, r4
 800d8d6:	3b15      	subs	r3, #21
 800d8d8:	f023 0303 	bic.w	r3, r3, #3
 800d8dc:	3304      	adds	r3, #4
 800d8de:	f104 0015 	add.w	r0, r4, #21
 800d8e2:	4584      	cmp	ip, r0
 800d8e4:	bf38      	it	cc
 800d8e6:	2304      	movcc	r3, #4
 800d8e8:	50ca      	str	r2, [r1, r3]
 800d8ea:	b10a      	cbz	r2, 800d8f0 <__lshift+0xa4>
 800d8ec:	f108 0602 	add.w	r6, r8, #2
 800d8f0:	3e01      	subs	r6, #1
 800d8f2:	4638      	mov	r0, r7
 800d8f4:	612e      	str	r6, [r5, #16]
 800d8f6:	4621      	mov	r1, r4
 800d8f8:	f7ff fdd6 	bl	800d4a8 <_Bfree>
 800d8fc:	4628      	mov	r0, r5
 800d8fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d902:	f842 0f04 	str.w	r0, [r2, #4]!
 800d906:	3301      	adds	r3, #1
 800d908:	e7c5      	b.n	800d896 <__lshift+0x4a>
 800d90a:	3904      	subs	r1, #4
 800d90c:	f853 2b04 	ldr.w	r2, [r3], #4
 800d910:	f841 2f04 	str.w	r2, [r1, #4]!
 800d914:	459c      	cmp	ip, r3
 800d916:	d8f9      	bhi.n	800d90c <__lshift+0xc0>
 800d918:	e7ea      	b.n	800d8f0 <__lshift+0xa4>
 800d91a:	bf00      	nop
 800d91c:	08021e71 	.word	0x08021e71
 800d920:	08021e82 	.word	0x08021e82

0800d924 <__mcmp>:
 800d924:	b530      	push	{r4, r5, lr}
 800d926:	6902      	ldr	r2, [r0, #16]
 800d928:	690c      	ldr	r4, [r1, #16]
 800d92a:	1b12      	subs	r2, r2, r4
 800d92c:	d10e      	bne.n	800d94c <__mcmp+0x28>
 800d92e:	f100 0314 	add.w	r3, r0, #20
 800d932:	3114      	adds	r1, #20
 800d934:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800d938:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800d93c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800d940:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800d944:	42a5      	cmp	r5, r4
 800d946:	d003      	beq.n	800d950 <__mcmp+0x2c>
 800d948:	d305      	bcc.n	800d956 <__mcmp+0x32>
 800d94a:	2201      	movs	r2, #1
 800d94c:	4610      	mov	r0, r2
 800d94e:	bd30      	pop	{r4, r5, pc}
 800d950:	4283      	cmp	r3, r0
 800d952:	d3f3      	bcc.n	800d93c <__mcmp+0x18>
 800d954:	e7fa      	b.n	800d94c <__mcmp+0x28>
 800d956:	f04f 32ff 	mov.w	r2, #4294967295
 800d95a:	e7f7      	b.n	800d94c <__mcmp+0x28>

0800d95c <__mdiff>:
 800d95c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d960:	460c      	mov	r4, r1
 800d962:	4606      	mov	r6, r0
 800d964:	4611      	mov	r1, r2
 800d966:	4620      	mov	r0, r4
 800d968:	4617      	mov	r7, r2
 800d96a:	f7ff ffdb 	bl	800d924 <__mcmp>
 800d96e:	1e05      	subs	r5, r0, #0
 800d970:	d110      	bne.n	800d994 <__mdiff+0x38>
 800d972:	4629      	mov	r1, r5
 800d974:	4630      	mov	r0, r6
 800d976:	f7ff fd57 	bl	800d428 <_Balloc>
 800d97a:	b930      	cbnz	r0, 800d98a <__mdiff+0x2e>
 800d97c:	4b39      	ldr	r3, [pc, #228]	; (800da64 <__mdiff+0x108>)
 800d97e:	4602      	mov	r2, r0
 800d980:	f240 2132 	movw	r1, #562	; 0x232
 800d984:	4838      	ldr	r0, [pc, #224]	; (800da68 <__mdiff+0x10c>)
 800d986:	f7fd fb81 	bl	800b08c <__assert_func>
 800d98a:	2301      	movs	r3, #1
 800d98c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800d990:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d994:	bfa4      	itt	ge
 800d996:	463b      	movge	r3, r7
 800d998:	4627      	movge	r7, r4
 800d99a:	4630      	mov	r0, r6
 800d99c:	6879      	ldr	r1, [r7, #4]
 800d99e:	bfa6      	itte	ge
 800d9a0:	461c      	movge	r4, r3
 800d9a2:	2500      	movge	r5, #0
 800d9a4:	2501      	movlt	r5, #1
 800d9a6:	f7ff fd3f 	bl	800d428 <_Balloc>
 800d9aa:	b920      	cbnz	r0, 800d9b6 <__mdiff+0x5a>
 800d9ac:	4b2d      	ldr	r3, [pc, #180]	; (800da64 <__mdiff+0x108>)
 800d9ae:	4602      	mov	r2, r0
 800d9b0:	f44f 7110 	mov.w	r1, #576	; 0x240
 800d9b4:	e7e6      	b.n	800d984 <__mdiff+0x28>
 800d9b6:	693e      	ldr	r6, [r7, #16]
 800d9b8:	60c5      	str	r5, [r0, #12]
 800d9ba:	6925      	ldr	r5, [r4, #16]
 800d9bc:	f107 0114 	add.w	r1, r7, #20
 800d9c0:	f104 0914 	add.w	r9, r4, #20
 800d9c4:	f100 0e14 	add.w	lr, r0, #20
 800d9c8:	f107 0210 	add.w	r2, r7, #16
 800d9cc:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800d9d0:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 800d9d4:	46f2      	mov	sl, lr
 800d9d6:	2700      	movs	r7, #0
 800d9d8:	f859 3b04 	ldr.w	r3, [r9], #4
 800d9dc:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800d9e0:	fa1f f883 	uxth.w	r8, r3
 800d9e4:	fa17 f78b 	uxtah	r7, r7, fp
 800d9e8:	0c1b      	lsrs	r3, r3, #16
 800d9ea:	eba7 0808 	sub.w	r8, r7, r8
 800d9ee:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800d9f2:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800d9f6:	fa1f f888 	uxth.w	r8, r8
 800d9fa:	141f      	asrs	r7, r3, #16
 800d9fc:	454d      	cmp	r5, r9
 800d9fe:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800da02:	f84a 3b04 	str.w	r3, [sl], #4
 800da06:	d8e7      	bhi.n	800d9d8 <__mdiff+0x7c>
 800da08:	1b2b      	subs	r3, r5, r4
 800da0a:	3b15      	subs	r3, #21
 800da0c:	f023 0303 	bic.w	r3, r3, #3
 800da10:	3304      	adds	r3, #4
 800da12:	3415      	adds	r4, #21
 800da14:	42a5      	cmp	r5, r4
 800da16:	bf38      	it	cc
 800da18:	2304      	movcc	r3, #4
 800da1a:	4419      	add	r1, r3
 800da1c:	4473      	add	r3, lr
 800da1e:	469e      	mov	lr, r3
 800da20:	460d      	mov	r5, r1
 800da22:	4565      	cmp	r5, ip
 800da24:	d30e      	bcc.n	800da44 <__mdiff+0xe8>
 800da26:	f10c 0203 	add.w	r2, ip, #3
 800da2a:	1a52      	subs	r2, r2, r1
 800da2c:	f022 0203 	bic.w	r2, r2, #3
 800da30:	3903      	subs	r1, #3
 800da32:	458c      	cmp	ip, r1
 800da34:	bf38      	it	cc
 800da36:	2200      	movcc	r2, #0
 800da38:	441a      	add	r2, r3
 800da3a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800da3e:	b17b      	cbz	r3, 800da60 <__mdiff+0x104>
 800da40:	6106      	str	r6, [r0, #16]
 800da42:	e7a5      	b.n	800d990 <__mdiff+0x34>
 800da44:	f855 8b04 	ldr.w	r8, [r5], #4
 800da48:	fa17 f488 	uxtah	r4, r7, r8
 800da4c:	1422      	asrs	r2, r4, #16
 800da4e:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800da52:	b2a4      	uxth	r4, r4
 800da54:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800da58:	f84e 4b04 	str.w	r4, [lr], #4
 800da5c:	1417      	asrs	r7, r2, #16
 800da5e:	e7e0      	b.n	800da22 <__mdiff+0xc6>
 800da60:	3e01      	subs	r6, #1
 800da62:	e7ea      	b.n	800da3a <__mdiff+0xde>
 800da64:	08021e71 	.word	0x08021e71
 800da68:	08021e82 	.word	0x08021e82

0800da6c <__d2b>:
 800da6c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800da70:	4689      	mov	r9, r1
 800da72:	2101      	movs	r1, #1
 800da74:	ec57 6b10 	vmov	r6, r7, d0
 800da78:	4690      	mov	r8, r2
 800da7a:	f7ff fcd5 	bl	800d428 <_Balloc>
 800da7e:	4604      	mov	r4, r0
 800da80:	b930      	cbnz	r0, 800da90 <__d2b+0x24>
 800da82:	4602      	mov	r2, r0
 800da84:	4b25      	ldr	r3, [pc, #148]	; (800db1c <__d2b+0xb0>)
 800da86:	4826      	ldr	r0, [pc, #152]	; (800db20 <__d2b+0xb4>)
 800da88:	f240 310a 	movw	r1, #778	; 0x30a
 800da8c:	f7fd fafe 	bl	800b08c <__assert_func>
 800da90:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800da94:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800da98:	bb35      	cbnz	r5, 800dae8 <__d2b+0x7c>
 800da9a:	2e00      	cmp	r6, #0
 800da9c:	9301      	str	r3, [sp, #4]
 800da9e:	d028      	beq.n	800daf2 <__d2b+0x86>
 800daa0:	4668      	mov	r0, sp
 800daa2:	9600      	str	r6, [sp, #0]
 800daa4:	f7ff fd8c 	bl	800d5c0 <__lo0bits>
 800daa8:	9900      	ldr	r1, [sp, #0]
 800daaa:	b300      	cbz	r0, 800daee <__d2b+0x82>
 800daac:	9a01      	ldr	r2, [sp, #4]
 800daae:	f1c0 0320 	rsb	r3, r0, #32
 800dab2:	fa02 f303 	lsl.w	r3, r2, r3
 800dab6:	430b      	orrs	r3, r1
 800dab8:	40c2      	lsrs	r2, r0
 800daba:	6163      	str	r3, [r4, #20]
 800dabc:	9201      	str	r2, [sp, #4]
 800dabe:	9b01      	ldr	r3, [sp, #4]
 800dac0:	61a3      	str	r3, [r4, #24]
 800dac2:	2b00      	cmp	r3, #0
 800dac4:	bf14      	ite	ne
 800dac6:	2202      	movne	r2, #2
 800dac8:	2201      	moveq	r2, #1
 800daca:	6122      	str	r2, [r4, #16]
 800dacc:	b1d5      	cbz	r5, 800db04 <__d2b+0x98>
 800dace:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800dad2:	4405      	add	r5, r0
 800dad4:	f8c9 5000 	str.w	r5, [r9]
 800dad8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800dadc:	f8c8 0000 	str.w	r0, [r8]
 800dae0:	4620      	mov	r0, r4
 800dae2:	b003      	add	sp, #12
 800dae4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800dae8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800daec:	e7d5      	b.n	800da9a <__d2b+0x2e>
 800daee:	6161      	str	r1, [r4, #20]
 800daf0:	e7e5      	b.n	800dabe <__d2b+0x52>
 800daf2:	a801      	add	r0, sp, #4
 800daf4:	f7ff fd64 	bl	800d5c0 <__lo0bits>
 800daf8:	9b01      	ldr	r3, [sp, #4]
 800dafa:	6163      	str	r3, [r4, #20]
 800dafc:	2201      	movs	r2, #1
 800dafe:	6122      	str	r2, [r4, #16]
 800db00:	3020      	adds	r0, #32
 800db02:	e7e3      	b.n	800dacc <__d2b+0x60>
 800db04:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800db08:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800db0c:	f8c9 0000 	str.w	r0, [r9]
 800db10:	6918      	ldr	r0, [r3, #16]
 800db12:	f7ff fd35 	bl	800d580 <__hi0bits>
 800db16:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800db1a:	e7df      	b.n	800dadc <__d2b+0x70>
 800db1c:	08021e71 	.word	0x08021e71
 800db20:	08021e82 	.word	0x08021e82

0800db24 <_read_r>:
 800db24:	b538      	push	{r3, r4, r5, lr}
 800db26:	4d07      	ldr	r5, [pc, #28]	; (800db44 <_read_r+0x20>)
 800db28:	4604      	mov	r4, r0
 800db2a:	4608      	mov	r0, r1
 800db2c:	4611      	mov	r1, r2
 800db2e:	2200      	movs	r2, #0
 800db30:	602a      	str	r2, [r5, #0]
 800db32:	461a      	mov	r2, r3
 800db34:	f7f4 fb48 	bl	80021c8 <_read>
 800db38:	1c43      	adds	r3, r0, #1
 800db3a:	d102      	bne.n	800db42 <_read_r+0x1e>
 800db3c:	682b      	ldr	r3, [r5, #0]
 800db3e:	b103      	cbz	r3, 800db42 <_read_r+0x1e>
 800db40:	6023      	str	r3, [r4, #0]
 800db42:	bd38      	pop	{r3, r4, r5, pc}
 800db44:	20002040 	.word	0x20002040

0800db48 <__ascii_mbtowc>:
 800db48:	b082      	sub	sp, #8
 800db4a:	b901      	cbnz	r1, 800db4e <__ascii_mbtowc+0x6>
 800db4c:	a901      	add	r1, sp, #4
 800db4e:	b142      	cbz	r2, 800db62 <__ascii_mbtowc+0x1a>
 800db50:	b14b      	cbz	r3, 800db66 <__ascii_mbtowc+0x1e>
 800db52:	7813      	ldrb	r3, [r2, #0]
 800db54:	600b      	str	r3, [r1, #0]
 800db56:	7812      	ldrb	r2, [r2, #0]
 800db58:	1e10      	subs	r0, r2, #0
 800db5a:	bf18      	it	ne
 800db5c:	2001      	movne	r0, #1
 800db5e:	b002      	add	sp, #8
 800db60:	4770      	bx	lr
 800db62:	4610      	mov	r0, r2
 800db64:	e7fb      	b.n	800db5e <__ascii_mbtowc+0x16>
 800db66:	f06f 0001 	mvn.w	r0, #1
 800db6a:	e7f8      	b.n	800db5e <__ascii_mbtowc+0x16>

0800db6c <__ascii_wctomb>:
 800db6c:	b149      	cbz	r1, 800db82 <__ascii_wctomb+0x16>
 800db6e:	2aff      	cmp	r2, #255	; 0xff
 800db70:	bf85      	ittet	hi
 800db72:	238a      	movhi	r3, #138	; 0x8a
 800db74:	6003      	strhi	r3, [r0, #0]
 800db76:	700a      	strbls	r2, [r1, #0]
 800db78:	f04f 30ff 	movhi.w	r0, #4294967295
 800db7c:	bf98      	it	ls
 800db7e:	2001      	movls	r0, #1
 800db80:	4770      	bx	lr
 800db82:	4608      	mov	r0, r1
 800db84:	4770      	bx	lr
	...

0800db88 <_init>:
 800db88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800db8a:	bf00      	nop
 800db8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800db8e:	bc08      	pop	{r3}
 800db90:	469e      	mov	lr, r3
 800db92:	4770      	bx	lr

0800db94 <_fini>:
 800db94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800db96:	bf00      	nop
 800db98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800db9a:	bc08      	pop	{r3}
 800db9c:	469e      	mov	lr, r3
 800db9e:	4770      	bx	lr
