
Thesis-Nucleo-411.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00013584  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00009cf8  08013728  08013728  00023728  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801d420  0801d420  000301ec  2**0
                  CONTENTS
  4 .ARM          00000008  0801d420  0801d420  0002d420  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801d428  0801d428  000301ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801d428  0801d428  0002d428  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801d42c  0801d42c  0002d42c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001ec  20000000  0801d430  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000052a0  200001ec  0801d61c  000301ec  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000548c  0801d61c  0003548c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000301ec  2**0
                  CONTENTS, READONLY
 12 .debug_info   0030d47f  00000000  00000000  0003021c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0001a770  00000000  00000000  0033d69b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00008770  00000000  00000000  00357e10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000084d0  00000000  00000000  00360580  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002a10a  00000000  00000000  00368a50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00064b58  00000000  00000000  00392b5a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001753d8  00000000  00000000  003f76b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0056ca8a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00027f44  00000000  00000000  0056cae0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001ec 	.word	0x200001ec
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0801370c 	.word	0x0801370c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001f0 	.word	0x200001f0
 80001dc:	0801370c 	.word	0x0801370c

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strcmp>:
 8000280:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000284:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000288:	2a01      	cmp	r2, #1
 800028a:	bf28      	it	cs
 800028c:	429a      	cmpcs	r2, r3
 800028e:	d0f7      	beq.n	8000280 <strcmp>
 8000290:	1ad0      	subs	r0, r2, r3
 8000292:	4770      	bx	lr

08000294 <strlen>:
 8000294:	4603      	mov	r3, r0
 8000296:	f813 2b01 	ldrb.w	r2, [r3], #1
 800029a:	2a00      	cmp	r2, #0
 800029c:	d1fb      	bne.n	8000296 <strlen+0x2>
 800029e:	1a18      	subs	r0, r3, r0
 80002a0:	3801      	subs	r0, #1
 80002a2:	4770      	bx	lr

080002a4 <__aeabi_drsub>:
 80002a4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a8:	e002      	b.n	80002b0 <__adddf3>
 80002aa:	bf00      	nop

080002ac <__aeabi_dsub>:
 80002ac:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002b0 <__adddf3>:
 80002b0:	b530      	push	{r4, r5, lr}
 80002b2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002ba:	ea94 0f05 	teq	r4, r5
 80002be:	bf08      	it	eq
 80002c0:	ea90 0f02 	teqeq	r0, r2
 80002c4:	bf1f      	itttt	ne
 80002c6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002ca:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ce:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002d2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d6:	f000 80e2 	beq.w	800049e <__adddf3+0x1ee>
 80002da:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002de:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002e2:	bfb8      	it	lt
 80002e4:	426d      	neglt	r5, r5
 80002e6:	dd0c      	ble.n	8000302 <__adddf3+0x52>
 80002e8:	442c      	add	r4, r5
 80002ea:	ea80 0202 	eor.w	r2, r0, r2
 80002ee:	ea81 0303 	eor.w	r3, r1, r3
 80002f2:	ea82 0000 	eor.w	r0, r2, r0
 80002f6:	ea83 0101 	eor.w	r1, r3, r1
 80002fa:	ea80 0202 	eor.w	r2, r0, r2
 80002fe:	ea81 0303 	eor.w	r3, r1, r3
 8000302:	2d36      	cmp	r5, #54	; 0x36
 8000304:	bf88      	it	hi
 8000306:	bd30      	pophi	{r4, r5, pc}
 8000308:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800030c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000310:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000314:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x70>
 800031a:	4240      	negs	r0, r0
 800031c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000320:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000324:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000328:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800032c:	d002      	beq.n	8000334 <__adddf3+0x84>
 800032e:	4252      	negs	r2, r2
 8000330:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000334:	ea94 0f05 	teq	r4, r5
 8000338:	f000 80a7 	beq.w	800048a <__adddf3+0x1da>
 800033c:	f1a4 0401 	sub.w	r4, r4, #1
 8000340:	f1d5 0e20 	rsbs	lr, r5, #32
 8000344:	db0d      	blt.n	8000362 <__adddf3+0xb2>
 8000346:	fa02 fc0e 	lsl.w	ip, r2, lr
 800034a:	fa22 f205 	lsr.w	r2, r2, r5
 800034e:	1880      	adds	r0, r0, r2
 8000350:	f141 0100 	adc.w	r1, r1, #0
 8000354:	fa03 f20e 	lsl.w	r2, r3, lr
 8000358:	1880      	adds	r0, r0, r2
 800035a:	fa43 f305 	asr.w	r3, r3, r5
 800035e:	4159      	adcs	r1, r3
 8000360:	e00e      	b.n	8000380 <__adddf3+0xd0>
 8000362:	f1a5 0520 	sub.w	r5, r5, #32
 8000366:	f10e 0e20 	add.w	lr, lr, #32
 800036a:	2a01      	cmp	r2, #1
 800036c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000370:	bf28      	it	cs
 8000372:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	18c0      	adds	r0, r0, r3
 800037c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000380:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000384:	d507      	bpl.n	8000396 <__adddf3+0xe6>
 8000386:	f04f 0e00 	mov.w	lr, #0
 800038a:	f1dc 0c00 	rsbs	ip, ip, #0
 800038e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000392:	eb6e 0101 	sbc.w	r1, lr, r1
 8000396:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800039a:	d31b      	bcc.n	80003d4 <__adddf3+0x124>
 800039c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003a0:	d30c      	bcc.n	80003bc <__adddf3+0x10c>
 80003a2:	0849      	lsrs	r1, r1, #1
 80003a4:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003ac:	f104 0401 	add.w	r4, r4, #1
 80003b0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b8:	f080 809a 	bcs.w	80004f0 <__adddf3+0x240>
 80003bc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003c0:	bf08      	it	eq
 80003c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c6:	f150 0000 	adcs.w	r0, r0, #0
 80003ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ce:	ea41 0105 	orr.w	r1, r1, r5
 80003d2:	bd30      	pop	{r4, r5, pc}
 80003d4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d8:	4140      	adcs	r0, r0
 80003da:	eb41 0101 	adc.w	r1, r1, r1
 80003de:	3c01      	subs	r4, #1
 80003e0:	bf28      	it	cs
 80003e2:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e6:	d2e9      	bcs.n	80003bc <__adddf3+0x10c>
 80003e8:	f091 0f00 	teq	r1, #0
 80003ec:	bf04      	itt	eq
 80003ee:	4601      	moveq	r1, r0
 80003f0:	2000      	moveq	r0, #0
 80003f2:	fab1 f381 	clz	r3, r1
 80003f6:	bf08      	it	eq
 80003f8:	3320      	addeq	r3, #32
 80003fa:	f1a3 030b 	sub.w	r3, r3, #11
 80003fe:	f1b3 0220 	subs.w	r2, r3, #32
 8000402:	da0c      	bge.n	800041e <__adddf3+0x16e>
 8000404:	320c      	adds	r2, #12
 8000406:	dd08      	ble.n	800041a <__adddf3+0x16a>
 8000408:	f102 0c14 	add.w	ip, r2, #20
 800040c:	f1c2 020c 	rsb	r2, r2, #12
 8000410:	fa01 f00c 	lsl.w	r0, r1, ip
 8000414:	fa21 f102 	lsr.w	r1, r1, r2
 8000418:	e00c      	b.n	8000434 <__adddf3+0x184>
 800041a:	f102 0214 	add.w	r2, r2, #20
 800041e:	bfd8      	it	le
 8000420:	f1c2 0c20 	rsble	ip, r2, #32
 8000424:	fa01 f102 	lsl.w	r1, r1, r2
 8000428:	fa20 fc0c 	lsr.w	ip, r0, ip
 800042c:	bfdc      	itt	le
 800042e:	ea41 010c 	orrle.w	r1, r1, ip
 8000432:	4090      	lslle	r0, r2
 8000434:	1ae4      	subs	r4, r4, r3
 8000436:	bfa2      	ittt	ge
 8000438:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800043c:	4329      	orrge	r1, r5
 800043e:	bd30      	popge	{r4, r5, pc}
 8000440:	ea6f 0404 	mvn.w	r4, r4
 8000444:	3c1f      	subs	r4, #31
 8000446:	da1c      	bge.n	8000482 <__adddf3+0x1d2>
 8000448:	340c      	adds	r4, #12
 800044a:	dc0e      	bgt.n	800046a <__adddf3+0x1ba>
 800044c:	f104 0414 	add.w	r4, r4, #20
 8000450:	f1c4 0220 	rsb	r2, r4, #32
 8000454:	fa20 f004 	lsr.w	r0, r0, r4
 8000458:	fa01 f302 	lsl.w	r3, r1, r2
 800045c:	ea40 0003 	orr.w	r0, r0, r3
 8000460:	fa21 f304 	lsr.w	r3, r1, r4
 8000464:	ea45 0103 	orr.w	r1, r5, r3
 8000468:	bd30      	pop	{r4, r5, pc}
 800046a:	f1c4 040c 	rsb	r4, r4, #12
 800046e:	f1c4 0220 	rsb	r2, r4, #32
 8000472:	fa20 f002 	lsr.w	r0, r0, r2
 8000476:	fa01 f304 	lsl.w	r3, r1, r4
 800047a:	ea40 0003 	orr.w	r0, r0, r3
 800047e:	4629      	mov	r1, r5
 8000480:	bd30      	pop	{r4, r5, pc}
 8000482:	fa21 f004 	lsr.w	r0, r1, r4
 8000486:	4629      	mov	r1, r5
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	f094 0f00 	teq	r4, #0
 800048e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000492:	bf06      	itte	eq
 8000494:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000498:	3401      	addeq	r4, #1
 800049a:	3d01      	subne	r5, #1
 800049c:	e74e      	b.n	800033c <__adddf3+0x8c>
 800049e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004a2:	bf18      	it	ne
 80004a4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a8:	d029      	beq.n	80004fe <__adddf3+0x24e>
 80004aa:	ea94 0f05 	teq	r4, r5
 80004ae:	bf08      	it	eq
 80004b0:	ea90 0f02 	teqeq	r0, r2
 80004b4:	d005      	beq.n	80004c2 <__adddf3+0x212>
 80004b6:	ea54 0c00 	orrs.w	ip, r4, r0
 80004ba:	bf04      	itt	eq
 80004bc:	4619      	moveq	r1, r3
 80004be:	4610      	moveq	r0, r2
 80004c0:	bd30      	pop	{r4, r5, pc}
 80004c2:	ea91 0f03 	teq	r1, r3
 80004c6:	bf1e      	ittt	ne
 80004c8:	2100      	movne	r1, #0
 80004ca:	2000      	movne	r0, #0
 80004cc:	bd30      	popne	{r4, r5, pc}
 80004ce:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004d2:	d105      	bne.n	80004e0 <__adddf3+0x230>
 80004d4:	0040      	lsls	r0, r0, #1
 80004d6:	4149      	adcs	r1, r1
 80004d8:	bf28      	it	cs
 80004da:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004de:	bd30      	pop	{r4, r5, pc}
 80004e0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e4:	bf3c      	itt	cc
 80004e6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004ea:	bd30      	popcc	{r4, r5, pc}
 80004ec:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004f0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f8:	f04f 0000 	mov.w	r0, #0
 80004fc:	bd30      	pop	{r4, r5, pc}
 80004fe:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000502:	bf1a      	itte	ne
 8000504:	4619      	movne	r1, r3
 8000506:	4610      	movne	r0, r2
 8000508:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800050c:	bf1c      	itt	ne
 800050e:	460b      	movne	r3, r1
 8000510:	4602      	movne	r2, r0
 8000512:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000516:	bf06      	itte	eq
 8000518:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800051c:	ea91 0f03 	teqeq	r1, r3
 8000520:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000524:	bd30      	pop	{r4, r5, pc}
 8000526:	bf00      	nop

08000528 <__aeabi_ui2d>:
 8000528:	f090 0f00 	teq	r0, #0
 800052c:	bf04      	itt	eq
 800052e:	2100      	moveq	r1, #0
 8000530:	4770      	bxeq	lr
 8000532:	b530      	push	{r4, r5, lr}
 8000534:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000538:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800053c:	f04f 0500 	mov.w	r5, #0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e750      	b.n	80003e8 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_i2d>:
 8000548:	f090 0f00 	teq	r0, #0
 800054c:	bf04      	itt	eq
 800054e:	2100      	moveq	r1, #0
 8000550:	4770      	bxeq	lr
 8000552:	b530      	push	{r4, r5, lr}
 8000554:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000558:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800055c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000560:	bf48      	it	mi
 8000562:	4240      	negmi	r0, r0
 8000564:	f04f 0100 	mov.w	r1, #0
 8000568:	e73e      	b.n	80003e8 <__adddf3+0x138>
 800056a:	bf00      	nop

0800056c <__aeabi_f2d>:
 800056c:	0042      	lsls	r2, r0, #1
 800056e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000572:	ea4f 0131 	mov.w	r1, r1, rrx
 8000576:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800057a:	bf1f      	itttt	ne
 800057c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000580:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000584:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000588:	4770      	bxne	lr
 800058a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058e:	bf08      	it	eq
 8000590:	4770      	bxeq	lr
 8000592:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000596:	bf04      	itt	eq
 8000598:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800059c:	4770      	bxeq	lr
 800059e:	b530      	push	{r4, r5, lr}
 80005a0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005ac:	e71c      	b.n	80003e8 <__adddf3+0x138>
 80005ae:	bf00      	nop

080005b0 <__aeabi_ul2d>:
 80005b0:	ea50 0201 	orrs.w	r2, r0, r1
 80005b4:	bf08      	it	eq
 80005b6:	4770      	bxeq	lr
 80005b8:	b530      	push	{r4, r5, lr}
 80005ba:	f04f 0500 	mov.w	r5, #0
 80005be:	e00a      	b.n	80005d6 <__aeabi_l2d+0x16>

080005c0 <__aeabi_l2d>:
 80005c0:	ea50 0201 	orrs.w	r2, r0, r1
 80005c4:	bf08      	it	eq
 80005c6:	4770      	bxeq	lr
 80005c8:	b530      	push	{r4, r5, lr}
 80005ca:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ce:	d502      	bpl.n	80005d6 <__aeabi_l2d+0x16>
 80005d0:	4240      	negs	r0, r0
 80005d2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005da:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005de:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005e2:	f43f aed8 	beq.w	8000396 <__adddf3+0xe6>
 80005e6:	f04f 0203 	mov.w	r2, #3
 80005ea:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ee:	bf18      	it	ne
 80005f0:	3203      	addne	r2, #3
 80005f2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f6:	bf18      	it	ne
 80005f8:	3203      	addne	r2, #3
 80005fa:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fe:	f1c2 0320 	rsb	r3, r2, #32
 8000602:	fa00 fc03 	lsl.w	ip, r0, r3
 8000606:	fa20 f002 	lsr.w	r0, r0, r2
 800060a:	fa01 fe03 	lsl.w	lr, r1, r3
 800060e:	ea40 000e 	orr.w	r0, r0, lr
 8000612:	fa21 f102 	lsr.w	r1, r1, r2
 8000616:	4414      	add	r4, r2
 8000618:	e6bd      	b.n	8000396 <__adddf3+0xe6>
 800061a:	bf00      	nop

0800061c <__aeabi_dmul>:
 800061c:	b570      	push	{r4, r5, r6, lr}
 800061e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000622:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000626:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800062a:	bf1d      	ittte	ne
 800062c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000630:	ea94 0f0c 	teqne	r4, ip
 8000634:	ea95 0f0c 	teqne	r5, ip
 8000638:	f000 f8de 	bleq	80007f8 <__aeabi_dmul+0x1dc>
 800063c:	442c      	add	r4, r5
 800063e:	ea81 0603 	eor.w	r6, r1, r3
 8000642:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000646:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800064a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064e:	bf18      	it	ne
 8000650:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000654:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000658:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800065c:	d038      	beq.n	80006d0 <__aeabi_dmul+0xb4>
 800065e:	fba0 ce02 	umull	ip, lr, r0, r2
 8000662:	f04f 0500 	mov.w	r5, #0
 8000666:	fbe1 e502 	umlal	lr, r5, r1, r2
 800066a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000672:	f04f 0600 	mov.w	r6, #0
 8000676:	fbe1 5603 	umlal	r5, r6, r1, r3
 800067a:	f09c 0f00 	teq	ip, #0
 800067e:	bf18      	it	ne
 8000680:	f04e 0e01 	orrne.w	lr, lr, #1
 8000684:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000688:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 800068c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000690:	d204      	bcs.n	800069c <__aeabi_dmul+0x80>
 8000692:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000696:	416d      	adcs	r5, r5
 8000698:	eb46 0606 	adc.w	r6, r6, r6
 800069c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006a0:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a4:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a8:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006ac:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006b0:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b4:	bf88      	it	hi
 80006b6:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006ba:	d81e      	bhi.n	80006fa <__aeabi_dmul+0xde>
 80006bc:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006c0:	bf08      	it	eq
 80006c2:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c6:	f150 0000 	adcs.w	r0, r0, #0
 80006ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ce:	bd70      	pop	{r4, r5, r6, pc}
 80006d0:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d4:	ea46 0101 	orr.w	r1, r6, r1
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	ea81 0103 	eor.w	r1, r1, r3
 80006e0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e4:	bfc2      	ittt	gt
 80006e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ee:	bd70      	popgt	{r4, r5, r6, pc}
 80006f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f4:	f04f 0e00 	mov.w	lr, #0
 80006f8:	3c01      	subs	r4, #1
 80006fa:	f300 80ab 	bgt.w	8000854 <__aeabi_dmul+0x238>
 80006fe:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000702:	bfde      	ittt	le
 8000704:	2000      	movle	r0, #0
 8000706:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800070a:	bd70      	pople	{r4, r5, r6, pc}
 800070c:	f1c4 0400 	rsb	r4, r4, #0
 8000710:	3c20      	subs	r4, #32
 8000712:	da35      	bge.n	8000780 <__aeabi_dmul+0x164>
 8000714:	340c      	adds	r4, #12
 8000716:	dc1b      	bgt.n	8000750 <__aeabi_dmul+0x134>
 8000718:	f104 0414 	add.w	r4, r4, #20
 800071c:	f1c4 0520 	rsb	r5, r4, #32
 8000720:	fa00 f305 	lsl.w	r3, r0, r5
 8000724:	fa20 f004 	lsr.w	r0, r0, r4
 8000728:	fa01 f205 	lsl.w	r2, r1, r5
 800072c:	ea40 0002 	orr.w	r0, r0, r2
 8000730:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000734:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000738:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800073c:	fa21 f604 	lsr.w	r6, r1, r4
 8000740:	eb42 0106 	adc.w	r1, r2, r6
 8000744:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000748:	bf08      	it	eq
 800074a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074e:	bd70      	pop	{r4, r5, r6, pc}
 8000750:	f1c4 040c 	rsb	r4, r4, #12
 8000754:	f1c4 0520 	rsb	r5, r4, #32
 8000758:	fa00 f304 	lsl.w	r3, r0, r4
 800075c:	fa20 f005 	lsr.w	r0, r0, r5
 8000760:	fa01 f204 	lsl.w	r2, r1, r4
 8000764:	ea40 0002 	orr.w	r0, r0, r2
 8000768:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800076c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000770:	f141 0100 	adc.w	r1, r1, #0
 8000774:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000778:	bf08      	it	eq
 800077a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077e:	bd70      	pop	{r4, r5, r6, pc}
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f205 	lsl.w	r2, r0, r5
 8000788:	ea4e 0e02 	orr.w	lr, lr, r2
 800078c:	fa20 f304 	lsr.w	r3, r0, r4
 8000790:	fa01 f205 	lsl.w	r2, r1, r5
 8000794:	ea43 0302 	orr.w	r3, r3, r2
 8000798:	fa21 f004 	lsr.w	r0, r1, r4
 800079c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a0:	fa21 f204 	lsr.w	r2, r1, r4
 80007a4:	ea20 0002 	bic.w	r0, r0, r2
 80007a8:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007ac:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007b0:	bf08      	it	eq
 80007b2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b6:	bd70      	pop	{r4, r5, r6, pc}
 80007b8:	f094 0f00 	teq	r4, #0
 80007bc:	d10f      	bne.n	80007de <__aeabi_dmul+0x1c2>
 80007be:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007c2:	0040      	lsls	r0, r0, #1
 80007c4:	eb41 0101 	adc.w	r1, r1, r1
 80007c8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007cc:	bf08      	it	eq
 80007ce:	3c01      	subeq	r4, #1
 80007d0:	d0f7      	beq.n	80007c2 <__aeabi_dmul+0x1a6>
 80007d2:	ea41 0106 	orr.w	r1, r1, r6
 80007d6:	f095 0f00 	teq	r5, #0
 80007da:	bf18      	it	ne
 80007dc:	4770      	bxne	lr
 80007de:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007e2:	0052      	lsls	r2, r2, #1
 80007e4:	eb43 0303 	adc.w	r3, r3, r3
 80007e8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007ec:	bf08      	it	eq
 80007ee:	3d01      	subeq	r5, #1
 80007f0:	d0f7      	beq.n	80007e2 <__aeabi_dmul+0x1c6>
 80007f2:	ea43 0306 	orr.w	r3, r3, r6
 80007f6:	4770      	bx	lr
 80007f8:	ea94 0f0c 	teq	r4, ip
 80007fc:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000800:	bf18      	it	ne
 8000802:	ea95 0f0c 	teqne	r5, ip
 8000806:	d00c      	beq.n	8000822 <__aeabi_dmul+0x206>
 8000808:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800080c:	bf18      	it	ne
 800080e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000812:	d1d1      	bne.n	80007b8 <__aeabi_dmul+0x19c>
 8000814:	ea81 0103 	eor.w	r1, r1, r3
 8000818:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800081c:	f04f 0000 	mov.w	r0, #0
 8000820:	bd70      	pop	{r4, r5, r6, pc}
 8000822:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000826:	bf06      	itte	eq
 8000828:	4610      	moveq	r0, r2
 800082a:	4619      	moveq	r1, r3
 800082c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000830:	d019      	beq.n	8000866 <__aeabi_dmul+0x24a>
 8000832:	ea94 0f0c 	teq	r4, ip
 8000836:	d102      	bne.n	800083e <__aeabi_dmul+0x222>
 8000838:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800083c:	d113      	bne.n	8000866 <__aeabi_dmul+0x24a>
 800083e:	ea95 0f0c 	teq	r5, ip
 8000842:	d105      	bne.n	8000850 <__aeabi_dmul+0x234>
 8000844:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000848:	bf1c      	itt	ne
 800084a:	4610      	movne	r0, r2
 800084c:	4619      	movne	r1, r3
 800084e:	d10a      	bne.n	8000866 <__aeabi_dmul+0x24a>
 8000850:	ea81 0103 	eor.w	r1, r1, r3
 8000854:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000858:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800085c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000860:	f04f 0000 	mov.w	r0, #0
 8000864:	bd70      	pop	{r4, r5, r6, pc}
 8000866:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800086a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086e:	bd70      	pop	{r4, r5, r6, pc}

08000870 <__aeabi_ddiv>:
 8000870:	b570      	push	{r4, r5, r6, lr}
 8000872:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000876:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800087a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087e:	bf1d      	ittte	ne
 8000880:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000884:	ea94 0f0c 	teqne	r4, ip
 8000888:	ea95 0f0c 	teqne	r5, ip
 800088c:	f000 f8a7 	bleq	80009de <__aeabi_ddiv+0x16e>
 8000890:	eba4 0405 	sub.w	r4, r4, r5
 8000894:	ea81 0e03 	eor.w	lr, r1, r3
 8000898:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800089c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008a0:	f000 8088 	beq.w	80009b4 <__aeabi_ddiv+0x144>
 80008a4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a8:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008ac:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008b0:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b4:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b8:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008bc:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008c0:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c4:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c8:	429d      	cmp	r5, r3
 80008ca:	bf08      	it	eq
 80008cc:	4296      	cmpeq	r6, r2
 80008ce:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008d2:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d6:	d202      	bcs.n	80008de <__aeabi_ddiv+0x6e>
 80008d8:	085b      	lsrs	r3, r3, #1
 80008da:	ea4f 0232 	mov.w	r2, r2, rrx
 80008de:	1ab6      	subs	r6, r6, r2
 80008e0:	eb65 0503 	sbc.w	r5, r5, r3
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ee:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008f2:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fa:	bf22      	ittt	cs
 80008fc:	1ab6      	subcs	r6, r6, r2
 80008fe:	4675      	movcs	r5, lr
 8000900:	ea40 000c 	orrcs.w	r0, r0, ip
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	ebb6 0e02 	subs.w	lr, r6, r2
 800090e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000912:	bf22      	ittt	cs
 8000914:	1ab6      	subcs	r6, r6, r2
 8000916:	4675      	movcs	r5, lr
 8000918:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800091c:	085b      	lsrs	r3, r3, #1
 800091e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000922:	ebb6 0e02 	subs.w	lr, r6, r2
 8000926:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092a:	bf22      	ittt	cs
 800092c:	1ab6      	subcs	r6, r6, r2
 800092e:	4675      	movcs	r5, lr
 8000930:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000934:	085b      	lsrs	r3, r3, #1
 8000936:	ea4f 0232 	mov.w	r2, r2, rrx
 800093a:	ebb6 0e02 	subs.w	lr, r6, r2
 800093e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000942:	bf22      	ittt	cs
 8000944:	1ab6      	subcs	r6, r6, r2
 8000946:	4675      	movcs	r5, lr
 8000948:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800094c:	ea55 0e06 	orrs.w	lr, r5, r6
 8000950:	d018      	beq.n	8000984 <__aeabi_ddiv+0x114>
 8000952:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000956:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800095a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000962:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000966:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800096a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096e:	d1c0      	bne.n	80008f2 <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	d10b      	bne.n	800098e <__aeabi_ddiv+0x11e>
 8000976:	ea41 0100 	orr.w	r1, r1, r0
 800097a:	f04f 0000 	mov.w	r0, #0
 800097e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000982:	e7b6      	b.n	80008f2 <__aeabi_ddiv+0x82>
 8000984:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000988:	bf04      	itt	eq
 800098a:	4301      	orreq	r1, r0
 800098c:	2000      	moveq	r0, #0
 800098e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000992:	bf88      	it	hi
 8000994:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000998:	f63f aeaf 	bhi.w	80006fa <__aeabi_dmul+0xde>
 800099c:	ebb5 0c03 	subs.w	ip, r5, r3
 80009a0:	bf04      	itt	eq
 80009a2:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009aa:	f150 0000 	adcs.w	r0, r0, #0
 80009ae:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009b2:	bd70      	pop	{r4, r5, r6, pc}
 80009b4:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b8:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009bc:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009c0:	bfc2      	ittt	gt
 80009c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009ca:	bd70      	popgt	{r4, r5, r6, pc}
 80009cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009d0:	f04f 0e00 	mov.w	lr, #0
 80009d4:	3c01      	subs	r4, #1
 80009d6:	e690      	b.n	80006fa <__aeabi_dmul+0xde>
 80009d8:	ea45 0e06 	orr.w	lr, r5, r6
 80009dc:	e68d      	b.n	80006fa <__aeabi_dmul+0xde>
 80009de:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009e2:	ea94 0f0c 	teq	r4, ip
 80009e6:	bf08      	it	eq
 80009e8:	ea95 0f0c 	teqeq	r5, ip
 80009ec:	f43f af3b 	beq.w	8000866 <__aeabi_dmul+0x24a>
 80009f0:	ea94 0f0c 	teq	r4, ip
 80009f4:	d10a      	bne.n	8000a0c <__aeabi_ddiv+0x19c>
 80009f6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009fa:	f47f af34 	bne.w	8000866 <__aeabi_dmul+0x24a>
 80009fe:	ea95 0f0c 	teq	r5, ip
 8000a02:	f47f af25 	bne.w	8000850 <__aeabi_dmul+0x234>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e72c      	b.n	8000866 <__aeabi_dmul+0x24a>
 8000a0c:	ea95 0f0c 	teq	r5, ip
 8000a10:	d106      	bne.n	8000a20 <__aeabi_ddiv+0x1b0>
 8000a12:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a16:	f43f aefd 	beq.w	8000814 <__aeabi_dmul+0x1f8>
 8000a1a:	4610      	mov	r0, r2
 8000a1c:	4619      	mov	r1, r3
 8000a1e:	e722      	b.n	8000866 <__aeabi_dmul+0x24a>
 8000a20:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a24:	bf18      	it	ne
 8000a26:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a2a:	f47f aec5 	bne.w	80007b8 <__aeabi_dmul+0x19c>
 8000a2e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a32:	f47f af0d 	bne.w	8000850 <__aeabi_dmul+0x234>
 8000a36:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a3a:	f47f aeeb 	bne.w	8000814 <__aeabi_dmul+0x1f8>
 8000a3e:	e712      	b.n	8000866 <__aeabi_dmul+0x24a>

08000a40 <__gedf2>:
 8000a40:	f04f 3cff 	mov.w	ip, #4294967295
 8000a44:	e006      	b.n	8000a54 <__cmpdf2+0x4>
 8000a46:	bf00      	nop

08000a48 <__ledf2>:
 8000a48:	f04f 0c01 	mov.w	ip, #1
 8000a4c:	e002      	b.n	8000a54 <__cmpdf2+0x4>
 8000a4e:	bf00      	nop

08000a50 <__cmpdf2>:
 8000a50:	f04f 0c01 	mov.w	ip, #1
 8000a54:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a58:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a5c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a60:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a64:	bf18      	it	ne
 8000a66:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a6a:	d01b      	beq.n	8000aa4 <__cmpdf2+0x54>
 8000a6c:	b001      	add	sp, #4
 8000a6e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a72:	bf0c      	ite	eq
 8000a74:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a78:	ea91 0f03 	teqne	r1, r3
 8000a7c:	bf02      	ittt	eq
 8000a7e:	ea90 0f02 	teqeq	r0, r2
 8000a82:	2000      	moveq	r0, #0
 8000a84:	4770      	bxeq	lr
 8000a86:	f110 0f00 	cmn.w	r0, #0
 8000a8a:	ea91 0f03 	teq	r1, r3
 8000a8e:	bf58      	it	pl
 8000a90:	4299      	cmppl	r1, r3
 8000a92:	bf08      	it	eq
 8000a94:	4290      	cmpeq	r0, r2
 8000a96:	bf2c      	ite	cs
 8000a98:	17d8      	asrcs	r0, r3, #31
 8000a9a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9e:	f040 0001 	orr.w	r0, r0, #1
 8000aa2:	4770      	bx	lr
 8000aa4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aac:	d102      	bne.n	8000ab4 <__cmpdf2+0x64>
 8000aae:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ab2:	d107      	bne.n	8000ac4 <__cmpdf2+0x74>
 8000ab4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000abc:	d1d6      	bne.n	8000a6c <__cmpdf2+0x1c>
 8000abe:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ac2:	d0d3      	beq.n	8000a6c <__cmpdf2+0x1c>
 8000ac4:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac8:	4770      	bx	lr
 8000aca:	bf00      	nop

08000acc <__aeabi_cdrcmple>:
 8000acc:	4684      	mov	ip, r0
 8000ace:	4610      	mov	r0, r2
 8000ad0:	4662      	mov	r2, ip
 8000ad2:	468c      	mov	ip, r1
 8000ad4:	4619      	mov	r1, r3
 8000ad6:	4663      	mov	r3, ip
 8000ad8:	e000      	b.n	8000adc <__aeabi_cdcmpeq>
 8000ada:	bf00      	nop

08000adc <__aeabi_cdcmpeq>:
 8000adc:	b501      	push	{r0, lr}
 8000ade:	f7ff ffb7 	bl	8000a50 <__cmpdf2>
 8000ae2:	2800      	cmp	r0, #0
 8000ae4:	bf48      	it	mi
 8000ae6:	f110 0f00 	cmnmi.w	r0, #0
 8000aea:	bd01      	pop	{r0, pc}

08000aec <__aeabi_dcmpeq>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff fff4 	bl	8000adc <__aeabi_cdcmpeq>
 8000af4:	bf0c      	ite	eq
 8000af6:	2001      	moveq	r0, #1
 8000af8:	2000      	movne	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmplt>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffea 	bl	8000adc <__aeabi_cdcmpeq>
 8000b08:	bf34      	ite	cc
 8000b0a:	2001      	movcc	r0, #1
 8000b0c:	2000      	movcs	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmple>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffe0 	bl	8000adc <__aeabi_cdcmpeq>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpge>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffce 	bl	8000acc <__aeabi_cdrcmple>
 8000b30:	bf94      	ite	ls
 8000b32:	2001      	movls	r0, #1
 8000b34:	2000      	movhi	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpgt>:
 8000b3c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b40:	f7ff ffc4 	bl	8000acc <__aeabi_cdrcmple>
 8000b44:	bf34      	ite	cc
 8000b46:	2001      	movcc	r0, #1
 8000b48:	2000      	movcs	r0, #0
 8000b4a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4e:	bf00      	nop

08000b50 <__aeabi_dcmpun>:
 8000b50:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b54:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b58:	d102      	bne.n	8000b60 <__aeabi_dcmpun+0x10>
 8000b5a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5e:	d10a      	bne.n	8000b76 <__aeabi_dcmpun+0x26>
 8000b60:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b64:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b68:	d102      	bne.n	8000b70 <__aeabi_dcmpun+0x20>
 8000b6a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6e:	d102      	bne.n	8000b76 <__aeabi_dcmpun+0x26>
 8000b70:	f04f 0000 	mov.w	r0, #0
 8000b74:	4770      	bx	lr
 8000b76:	f04f 0001 	mov.w	r0, #1
 8000b7a:	4770      	bx	lr

08000b7c <__aeabi_d2iz>:
 8000b7c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b80:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b84:	d215      	bcs.n	8000bb2 <__aeabi_d2iz+0x36>
 8000b86:	d511      	bpl.n	8000bac <__aeabi_d2iz+0x30>
 8000b88:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b8c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b90:	d912      	bls.n	8000bb8 <__aeabi_d2iz+0x3c>
 8000b92:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b96:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b9a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ba2:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba6:	bf18      	it	ne
 8000ba8:	4240      	negne	r0, r0
 8000baa:	4770      	bx	lr
 8000bac:	f04f 0000 	mov.w	r0, #0
 8000bb0:	4770      	bx	lr
 8000bb2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb6:	d105      	bne.n	8000bc4 <__aeabi_d2iz+0x48>
 8000bb8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bbc:	bf08      	it	eq
 8000bbe:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bc2:	4770      	bx	lr
 8000bc4:	f04f 0000 	mov.w	r0, #0
 8000bc8:	4770      	bx	lr
 8000bca:	bf00      	nop

08000bcc <__aeabi_d2f>:
 8000bcc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bd0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bd4:	bf24      	itt	cs
 8000bd6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bda:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bde:	d90d      	bls.n	8000bfc <__aeabi_d2f+0x30>
 8000be0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000be4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000be8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bec:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bf0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bf4:	bf08      	it	eq
 8000bf6:	f020 0001 	biceq.w	r0, r0, #1
 8000bfa:	4770      	bx	lr
 8000bfc:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c00:	d121      	bne.n	8000c46 <__aeabi_d2f+0x7a>
 8000c02:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c06:	bfbc      	itt	lt
 8000c08:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c0c:	4770      	bxlt	lr
 8000c0e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c12:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c16:	f1c2 0218 	rsb	r2, r2, #24
 8000c1a:	f1c2 0c20 	rsb	ip, r2, #32
 8000c1e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c22:	fa20 f002 	lsr.w	r0, r0, r2
 8000c26:	bf18      	it	ne
 8000c28:	f040 0001 	orrne.w	r0, r0, #1
 8000c2c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c30:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c34:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c38:	ea40 000c 	orr.w	r0, r0, ip
 8000c3c:	fa23 f302 	lsr.w	r3, r3, r2
 8000c40:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c44:	e7cc      	b.n	8000be0 <__aeabi_d2f+0x14>
 8000c46:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c4a:	d107      	bne.n	8000c5c <__aeabi_d2f+0x90>
 8000c4c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c50:	bf1e      	ittt	ne
 8000c52:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c56:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c5a:	4770      	bxne	lr
 8000c5c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c60:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c64:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c68:	4770      	bx	lr
 8000c6a:	bf00      	nop

08000c6c <__aeabi_uldivmod>:
 8000c6c:	b953      	cbnz	r3, 8000c84 <__aeabi_uldivmod+0x18>
 8000c6e:	b94a      	cbnz	r2, 8000c84 <__aeabi_uldivmod+0x18>
 8000c70:	2900      	cmp	r1, #0
 8000c72:	bf08      	it	eq
 8000c74:	2800      	cmpeq	r0, #0
 8000c76:	bf1c      	itt	ne
 8000c78:	f04f 31ff 	movne.w	r1, #4294967295
 8000c7c:	f04f 30ff 	movne.w	r0, #4294967295
 8000c80:	f000 b9a4 	b.w	8000fcc <__aeabi_idiv0>
 8000c84:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c88:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c8c:	f000 f83c 	bl	8000d08 <__udivmoddi4>
 8000c90:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c94:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c98:	b004      	add	sp, #16
 8000c9a:	4770      	bx	lr

08000c9c <__aeabi_d2lz>:
 8000c9c:	b538      	push	{r3, r4, r5, lr}
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	4604      	mov	r4, r0
 8000ca4:	460d      	mov	r5, r1
 8000ca6:	f7ff ff2b 	bl	8000b00 <__aeabi_dcmplt>
 8000caa:	b928      	cbnz	r0, 8000cb8 <__aeabi_d2lz+0x1c>
 8000cac:	4620      	mov	r0, r4
 8000cae:	4629      	mov	r1, r5
 8000cb0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cb4:	f000 b80a 	b.w	8000ccc <__aeabi_d2ulz>
 8000cb8:	4620      	mov	r0, r4
 8000cba:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cbe:	f000 f805 	bl	8000ccc <__aeabi_d2ulz>
 8000cc2:	4240      	negs	r0, r0
 8000cc4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cc8:	bd38      	pop	{r3, r4, r5, pc}
 8000cca:	bf00      	nop

08000ccc <__aeabi_d2ulz>:
 8000ccc:	b5d0      	push	{r4, r6, r7, lr}
 8000cce:	4b0c      	ldr	r3, [pc, #48]	; (8000d00 <__aeabi_d2ulz+0x34>)
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	4606      	mov	r6, r0
 8000cd4:	460f      	mov	r7, r1
 8000cd6:	f7ff fca1 	bl	800061c <__aeabi_dmul>
 8000cda:	f000 f979 	bl	8000fd0 <__aeabi_d2uiz>
 8000cde:	4604      	mov	r4, r0
 8000ce0:	f7ff fc22 	bl	8000528 <__aeabi_ui2d>
 8000ce4:	4b07      	ldr	r3, [pc, #28]	; (8000d04 <__aeabi_d2ulz+0x38>)
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	f7ff fc98 	bl	800061c <__aeabi_dmul>
 8000cec:	4602      	mov	r2, r0
 8000cee:	460b      	mov	r3, r1
 8000cf0:	4630      	mov	r0, r6
 8000cf2:	4639      	mov	r1, r7
 8000cf4:	f7ff fada 	bl	80002ac <__aeabi_dsub>
 8000cf8:	f000 f96a 	bl	8000fd0 <__aeabi_d2uiz>
 8000cfc:	4621      	mov	r1, r4
 8000cfe:	bdd0      	pop	{r4, r6, r7, pc}
 8000d00:	3df00000 	.word	0x3df00000
 8000d04:	41f00000 	.word	0x41f00000

08000d08 <__udivmoddi4>:
 8000d08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d0c:	9d08      	ldr	r5, [sp, #32]
 8000d0e:	4604      	mov	r4, r0
 8000d10:	468c      	mov	ip, r1
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	f040 8083 	bne.w	8000e1e <__udivmoddi4+0x116>
 8000d18:	428a      	cmp	r2, r1
 8000d1a:	4617      	mov	r7, r2
 8000d1c:	d947      	bls.n	8000dae <__udivmoddi4+0xa6>
 8000d1e:	fab2 f282 	clz	r2, r2
 8000d22:	b142      	cbz	r2, 8000d36 <__udivmoddi4+0x2e>
 8000d24:	f1c2 0020 	rsb	r0, r2, #32
 8000d28:	fa24 f000 	lsr.w	r0, r4, r0
 8000d2c:	4091      	lsls	r1, r2
 8000d2e:	4097      	lsls	r7, r2
 8000d30:	ea40 0c01 	orr.w	ip, r0, r1
 8000d34:	4094      	lsls	r4, r2
 8000d36:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000d3a:	0c23      	lsrs	r3, r4, #16
 8000d3c:	fbbc f6f8 	udiv	r6, ip, r8
 8000d40:	fa1f fe87 	uxth.w	lr, r7
 8000d44:	fb08 c116 	mls	r1, r8, r6, ip
 8000d48:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d4c:	fb06 f10e 	mul.w	r1, r6, lr
 8000d50:	4299      	cmp	r1, r3
 8000d52:	d909      	bls.n	8000d68 <__udivmoddi4+0x60>
 8000d54:	18fb      	adds	r3, r7, r3
 8000d56:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d5a:	f080 8119 	bcs.w	8000f90 <__udivmoddi4+0x288>
 8000d5e:	4299      	cmp	r1, r3
 8000d60:	f240 8116 	bls.w	8000f90 <__udivmoddi4+0x288>
 8000d64:	3e02      	subs	r6, #2
 8000d66:	443b      	add	r3, r7
 8000d68:	1a5b      	subs	r3, r3, r1
 8000d6a:	b2a4      	uxth	r4, r4
 8000d6c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d70:	fb08 3310 	mls	r3, r8, r0, r3
 8000d74:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d78:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d7c:	45a6      	cmp	lr, r4
 8000d7e:	d909      	bls.n	8000d94 <__udivmoddi4+0x8c>
 8000d80:	193c      	adds	r4, r7, r4
 8000d82:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d86:	f080 8105 	bcs.w	8000f94 <__udivmoddi4+0x28c>
 8000d8a:	45a6      	cmp	lr, r4
 8000d8c:	f240 8102 	bls.w	8000f94 <__udivmoddi4+0x28c>
 8000d90:	3802      	subs	r0, #2
 8000d92:	443c      	add	r4, r7
 8000d94:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d98:	eba4 040e 	sub.w	r4, r4, lr
 8000d9c:	2600      	movs	r6, #0
 8000d9e:	b11d      	cbz	r5, 8000da8 <__udivmoddi4+0xa0>
 8000da0:	40d4      	lsrs	r4, r2
 8000da2:	2300      	movs	r3, #0
 8000da4:	e9c5 4300 	strd	r4, r3, [r5]
 8000da8:	4631      	mov	r1, r6
 8000daa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dae:	b902      	cbnz	r2, 8000db2 <__udivmoddi4+0xaa>
 8000db0:	deff      	udf	#255	; 0xff
 8000db2:	fab2 f282 	clz	r2, r2
 8000db6:	2a00      	cmp	r2, #0
 8000db8:	d150      	bne.n	8000e5c <__udivmoddi4+0x154>
 8000dba:	1bcb      	subs	r3, r1, r7
 8000dbc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000dc0:	fa1f f887 	uxth.w	r8, r7
 8000dc4:	2601      	movs	r6, #1
 8000dc6:	fbb3 fcfe 	udiv	ip, r3, lr
 8000dca:	0c21      	lsrs	r1, r4, #16
 8000dcc:	fb0e 331c 	mls	r3, lr, ip, r3
 8000dd0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000dd4:	fb08 f30c 	mul.w	r3, r8, ip
 8000dd8:	428b      	cmp	r3, r1
 8000dda:	d907      	bls.n	8000dec <__udivmoddi4+0xe4>
 8000ddc:	1879      	adds	r1, r7, r1
 8000dde:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000de2:	d202      	bcs.n	8000dea <__udivmoddi4+0xe2>
 8000de4:	428b      	cmp	r3, r1
 8000de6:	f200 80e9 	bhi.w	8000fbc <__udivmoddi4+0x2b4>
 8000dea:	4684      	mov	ip, r0
 8000dec:	1ac9      	subs	r1, r1, r3
 8000dee:	b2a3      	uxth	r3, r4
 8000df0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000df4:	fb0e 1110 	mls	r1, lr, r0, r1
 8000df8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000dfc:	fb08 f800 	mul.w	r8, r8, r0
 8000e00:	45a0      	cmp	r8, r4
 8000e02:	d907      	bls.n	8000e14 <__udivmoddi4+0x10c>
 8000e04:	193c      	adds	r4, r7, r4
 8000e06:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e0a:	d202      	bcs.n	8000e12 <__udivmoddi4+0x10a>
 8000e0c:	45a0      	cmp	r8, r4
 8000e0e:	f200 80d9 	bhi.w	8000fc4 <__udivmoddi4+0x2bc>
 8000e12:	4618      	mov	r0, r3
 8000e14:	eba4 0408 	sub.w	r4, r4, r8
 8000e18:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e1c:	e7bf      	b.n	8000d9e <__udivmoddi4+0x96>
 8000e1e:	428b      	cmp	r3, r1
 8000e20:	d909      	bls.n	8000e36 <__udivmoddi4+0x12e>
 8000e22:	2d00      	cmp	r5, #0
 8000e24:	f000 80b1 	beq.w	8000f8a <__udivmoddi4+0x282>
 8000e28:	2600      	movs	r6, #0
 8000e2a:	e9c5 0100 	strd	r0, r1, [r5]
 8000e2e:	4630      	mov	r0, r6
 8000e30:	4631      	mov	r1, r6
 8000e32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e36:	fab3 f683 	clz	r6, r3
 8000e3a:	2e00      	cmp	r6, #0
 8000e3c:	d14a      	bne.n	8000ed4 <__udivmoddi4+0x1cc>
 8000e3e:	428b      	cmp	r3, r1
 8000e40:	d302      	bcc.n	8000e48 <__udivmoddi4+0x140>
 8000e42:	4282      	cmp	r2, r0
 8000e44:	f200 80b8 	bhi.w	8000fb8 <__udivmoddi4+0x2b0>
 8000e48:	1a84      	subs	r4, r0, r2
 8000e4a:	eb61 0103 	sbc.w	r1, r1, r3
 8000e4e:	2001      	movs	r0, #1
 8000e50:	468c      	mov	ip, r1
 8000e52:	2d00      	cmp	r5, #0
 8000e54:	d0a8      	beq.n	8000da8 <__udivmoddi4+0xa0>
 8000e56:	e9c5 4c00 	strd	r4, ip, [r5]
 8000e5a:	e7a5      	b.n	8000da8 <__udivmoddi4+0xa0>
 8000e5c:	f1c2 0320 	rsb	r3, r2, #32
 8000e60:	fa20 f603 	lsr.w	r6, r0, r3
 8000e64:	4097      	lsls	r7, r2
 8000e66:	fa01 f002 	lsl.w	r0, r1, r2
 8000e6a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e6e:	40d9      	lsrs	r1, r3
 8000e70:	4330      	orrs	r0, r6
 8000e72:	0c03      	lsrs	r3, r0, #16
 8000e74:	fbb1 f6fe 	udiv	r6, r1, lr
 8000e78:	fa1f f887 	uxth.w	r8, r7
 8000e7c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000e80:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e84:	fb06 f108 	mul.w	r1, r6, r8
 8000e88:	4299      	cmp	r1, r3
 8000e8a:	fa04 f402 	lsl.w	r4, r4, r2
 8000e8e:	d909      	bls.n	8000ea4 <__udivmoddi4+0x19c>
 8000e90:	18fb      	adds	r3, r7, r3
 8000e92:	f106 3cff 	add.w	ip, r6, #4294967295
 8000e96:	f080 808d 	bcs.w	8000fb4 <__udivmoddi4+0x2ac>
 8000e9a:	4299      	cmp	r1, r3
 8000e9c:	f240 808a 	bls.w	8000fb4 <__udivmoddi4+0x2ac>
 8000ea0:	3e02      	subs	r6, #2
 8000ea2:	443b      	add	r3, r7
 8000ea4:	1a5b      	subs	r3, r3, r1
 8000ea6:	b281      	uxth	r1, r0
 8000ea8:	fbb3 f0fe 	udiv	r0, r3, lr
 8000eac:	fb0e 3310 	mls	r3, lr, r0, r3
 8000eb0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000eb4:	fb00 f308 	mul.w	r3, r0, r8
 8000eb8:	428b      	cmp	r3, r1
 8000eba:	d907      	bls.n	8000ecc <__udivmoddi4+0x1c4>
 8000ebc:	1879      	adds	r1, r7, r1
 8000ebe:	f100 3cff 	add.w	ip, r0, #4294967295
 8000ec2:	d273      	bcs.n	8000fac <__udivmoddi4+0x2a4>
 8000ec4:	428b      	cmp	r3, r1
 8000ec6:	d971      	bls.n	8000fac <__udivmoddi4+0x2a4>
 8000ec8:	3802      	subs	r0, #2
 8000eca:	4439      	add	r1, r7
 8000ecc:	1acb      	subs	r3, r1, r3
 8000ece:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000ed2:	e778      	b.n	8000dc6 <__udivmoddi4+0xbe>
 8000ed4:	f1c6 0c20 	rsb	ip, r6, #32
 8000ed8:	fa03 f406 	lsl.w	r4, r3, r6
 8000edc:	fa22 f30c 	lsr.w	r3, r2, ip
 8000ee0:	431c      	orrs	r4, r3
 8000ee2:	fa20 f70c 	lsr.w	r7, r0, ip
 8000ee6:	fa01 f306 	lsl.w	r3, r1, r6
 8000eea:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000eee:	fa21 f10c 	lsr.w	r1, r1, ip
 8000ef2:	431f      	orrs	r7, r3
 8000ef4:	0c3b      	lsrs	r3, r7, #16
 8000ef6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000efa:	fa1f f884 	uxth.w	r8, r4
 8000efe:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f02:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000f06:	fb09 fa08 	mul.w	sl, r9, r8
 8000f0a:	458a      	cmp	sl, r1
 8000f0c:	fa02 f206 	lsl.w	r2, r2, r6
 8000f10:	fa00 f306 	lsl.w	r3, r0, r6
 8000f14:	d908      	bls.n	8000f28 <__udivmoddi4+0x220>
 8000f16:	1861      	adds	r1, r4, r1
 8000f18:	f109 30ff 	add.w	r0, r9, #4294967295
 8000f1c:	d248      	bcs.n	8000fb0 <__udivmoddi4+0x2a8>
 8000f1e:	458a      	cmp	sl, r1
 8000f20:	d946      	bls.n	8000fb0 <__udivmoddi4+0x2a8>
 8000f22:	f1a9 0902 	sub.w	r9, r9, #2
 8000f26:	4421      	add	r1, r4
 8000f28:	eba1 010a 	sub.w	r1, r1, sl
 8000f2c:	b2bf      	uxth	r7, r7
 8000f2e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000f32:	fb0e 1110 	mls	r1, lr, r0, r1
 8000f36:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000f3a:	fb00 f808 	mul.w	r8, r0, r8
 8000f3e:	45b8      	cmp	r8, r7
 8000f40:	d907      	bls.n	8000f52 <__udivmoddi4+0x24a>
 8000f42:	19e7      	adds	r7, r4, r7
 8000f44:	f100 31ff 	add.w	r1, r0, #4294967295
 8000f48:	d22e      	bcs.n	8000fa8 <__udivmoddi4+0x2a0>
 8000f4a:	45b8      	cmp	r8, r7
 8000f4c:	d92c      	bls.n	8000fa8 <__udivmoddi4+0x2a0>
 8000f4e:	3802      	subs	r0, #2
 8000f50:	4427      	add	r7, r4
 8000f52:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000f56:	eba7 0708 	sub.w	r7, r7, r8
 8000f5a:	fba0 8902 	umull	r8, r9, r0, r2
 8000f5e:	454f      	cmp	r7, r9
 8000f60:	46c6      	mov	lr, r8
 8000f62:	4649      	mov	r1, r9
 8000f64:	d31a      	bcc.n	8000f9c <__udivmoddi4+0x294>
 8000f66:	d017      	beq.n	8000f98 <__udivmoddi4+0x290>
 8000f68:	b15d      	cbz	r5, 8000f82 <__udivmoddi4+0x27a>
 8000f6a:	ebb3 020e 	subs.w	r2, r3, lr
 8000f6e:	eb67 0701 	sbc.w	r7, r7, r1
 8000f72:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000f76:	40f2      	lsrs	r2, r6
 8000f78:	ea4c 0202 	orr.w	r2, ip, r2
 8000f7c:	40f7      	lsrs	r7, r6
 8000f7e:	e9c5 2700 	strd	r2, r7, [r5]
 8000f82:	2600      	movs	r6, #0
 8000f84:	4631      	mov	r1, r6
 8000f86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f8a:	462e      	mov	r6, r5
 8000f8c:	4628      	mov	r0, r5
 8000f8e:	e70b      	b.n	8000da8 <__udivmoddi4+0xa0>
 8000f90:	4606      	mov	r6, r0
 8000f92:	e6e9      	b.n	8000d68 <__udivmoddi4+0x60>
 8000f94:	4618      	mov	r0, r3
 8000f96:	e6fd      	b.n	8000d94 <__udivmoddi4+0x8c>
 8000f98:	4543      	cmp	r3, r8
 8000f9a:	d2e5      	bcs.n	8000f68 <__udivmoddi4+0x260>
 8000f9c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000fa0:	eb69 0104 	sbc.w	r1, r9, r4
 8000fa4:	3801      	subs	r0, #1
 8000fa6:	e7df      	b.n	8000f68 <__udivmoddi4+0x260>
 8000fa8:	4608      	mov	r0, r1
 8000faa:	e7d2      	b.n	8000f52 <__udivmoddi4+0x24a>
 8000fac:	4660      	mov	r0, ip
 8000fae:	e78d      	b.n	8000ecc <__udivmoddi4+0x1c4>
 8000fb0:	4681      	mov	r9, r0
 8000fb2:	e7b9      	b.n	8000f28 <__udivmoddi4+0x220>
 8000fb4:	4666      	mov	r6, ip
 8000fb6:	e775      	b.n	8000ea4 <__udivmoddi4+0x19c>
 8000fb8:	4630      	mov	r0, r6
 8000fba:	e74a      	b.n	8000e52 <__udivmoddi4+0x14a>
 8000fbc:	f1ac 0c02 	sub.w	ip, ip, #2
 8000fc0:	4439      	add	r1, r7
 8000fc2:	e713      	b.n	8000dec <__udivmoddi4+0xe4>
 8000fc4:	3802      	subs	r0, #2
 8000fc6:	443c      	add	r4, r7
 8000fc8:	e724      	b.n	8000e14 <__udivmoddi4+0x10c>
 8000fca:	bf00      	nop

08000fcc <__aeabi_idiv0>:
 8000fcc:	4770      	bx	lr
 8000fce:	bf00      	nop

08000fd0 <__aeabi_d2uiz>:
 8000fd0:	004a      	lsls	r2, r1, #1
 8000fd2:	d211      	bcs.n	8000ff8 <__aeabi_d2uiz+0x28>
 8000fd4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000fd8:	d211      	bcs.n	8000ffe <__aeabi_d2uiz+0x2e>
 8000fda:	d50d      	bpl.n	8000ff8 <__aeabi_d2uiz+0x28>
 8000fdc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000fe0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000fe4:	d40e      	bmi.n	8001004 <__aeabi_d2uiz+0x34>
 8000fe6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000fea:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000fee:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ff2:	fa23 f002 	lsr.w	r0, r3, r2
 8000ff6:	4770      	bx	lr
 8000ff8:	f04f 0000 	mov.w	r0, #0
 8000ffc:	4770      	bx	lr
 8000ffe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8001002:	d102      	bne.n	800100a <__aeabi_d2uiz+0x3a>
 8001004:	f04f 30ff 	mov.w	r0, #4294967295
 8001008:	4770      	bx	lr
 800100a:	f04f 0000 	mov.w	r0, #0
 800100e:	4770      	bx	lr

08001010 <_ZN6tflite13ErrorReporterD1Ev>:
/// Subclass ErrorReporter to provide another reporting destination.
/// For example, if you have a GUI program, you might redirect to a buffer
/// that drives a GUI error log box.
class ErrorReporter {
 public:
  virtual ~ErrorReporter() {}
 8001010:	b480      	push	{r7}
 8001012:	b083      	sub	sp, #12
 8001014:	af00      	add	r7, sp, #0
 8001016:	6078      	str	r0, [r7, #4]
 8001018:	4a04      	ldr	r2, [pc, #16]	; (800102c <_ZN6tflite13ErrorReporterD1Ev+0x1c>)
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	601a      	str	r2, [r3, #0]
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	4618      	mov	r0, r3
 8001022:	370c      	adds	r7, #12
 8001024:	46bd      	mov	sp, r7
 8001026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102a:	4770      	bx	lr
 800102c:	08018334 	.word	0x08018334

08001030 <_ZN6tflite13ErrorReporterD0Ev>:
 8001030:	b580      	push	{r7, lr}
 8001032:	b082      	sub	sp, #8
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]
 8001038:	6878      	ldr	r0, [r7, #4]
 800103a:	f7ff ffe9 	bl	8001010 <_ZN6tflite13ErrorReporterD1Ev>
 800103e:	2104      	movs	r1, #4
 8001040:	6878      	ldr	r0, [r7, #4]
 8001042:	f00f f926 	bl	8010292 <_ZdlPvj>
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	4618      	mov	r0, r3
 800104a:	3708      	adds	r7, #8
 800104c:	46bd      	mov	sp, r7
 800104e:	bd80      	pop	{r7, pc}

08001050 <_ZN6tflite18MicroErrorReporterD1Ev>:
// Get a pointer to a singleton global error reporter.
ErrorReporter* GetMicroErrorReporter();

class MicroErrorReporter : public ErrorReporter {
 public:
  ~MicroErrorReporter() override {}
 8001050:	b580      	push	{r7, lr}
 8001052:	b082      	sub	sp, #8
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
 8001058:	4a05      	ldr	r2, [pc, #20]	; (8001070 <_ZN6tflite18MicroErrorReporterD1Ev+0x20>)
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	601a      	str	r2, [r3, #0]
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	4618      	mov	r0, r3
 8001062:	f7ff ffd5 	bl	8001010 <_ZN6tflite13ErrorReporterD1Ev>
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	4618      	mov	r0, r3
 800106a:	3708      	adds	r7, #8
 800106c:	46bd      	mov	sp, r7
 800106e:	bd80      	pop	{r7, pc}
 8001070:	0801cf4c 	.word	0x0801cf4c

08001074 <_ZN6tflite18MicroErrorReporterD0Ev>:
 8001074:	b580      	push	{r7, lr}
 8001076:	b082      	sub	sp, #8
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]
 800107c:	6878      	ldr	r0, [r7, #4]
 800107e:	f7ff ffe7 	bl	8001050 <_ZN6tflite18MicroErrorReporterD1Ev>
 8001082:	2104      	movs	r1, #4
 8001084:	6878      	ldr	r0, [r7, #4]
 8001086:	f00f f904 	bl	8010292 <_ZdlPvj>
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	4618      	mov	r0, r3
 800108e:	3708      	adds	r7, #8
 8001090:	46bd      	mov	sp, r7
 8001092:	bd80      	pop	{r7, pc}

08001094 <_ZN11flatbuffers11EndianCheckEv>:
  Offset(uoffset_t _o) : o(_o) {}
  Offset<void> Union() const { return Offset<void>(o); }
  bool IsNull() const { return !o; }
};

inline void EndianCheck() {
 8001094:	b580      	push	{r7, lr}
 8001096:	b082      	sub	sp, #8
 8001098:	af00      	add	r7, sp, #0
  int endiantest = 1;
 800109a:	2301      	movs	r3, #1
 800109c:	607b      	str	r3, [r7, #4]
  // If this fails, see FLATBUFFERS_LITTLEENDIAN above.
  FLATBUFFERS_ASSERT(*reinterpret_cast<char *>(&endiantest) ==
 800109e:	1d3b      	adds	r3, r7, #4
 80010a0:	781b      	ldrb	r3, [r3, #0]
 80010a2:	2b01      	cmp	r3, #1
 80010a4:	d005      	beq.n	80010b2 <_ZN11flatbuffers11EndianCheckEv+0x1e>
 80010a6:	4b05      	ldr	r3, [pc, #20]	; (80010bc <_ZN11flatbuffers11EndianCheckEv+0x28>)
 80010a8:	4a05      	ldr	r2, [pc, #20]	; (80010c0 <_ZN11flatbuffers11EndianCheckEv+0x2c>)
 80010aa:	214e      	movs	r1, #78	; 0x4e
 80010ac:	4805      	ldr	r0, [pc, #20]	; (80010c4 <_ZN11flatbuffers11EndianCheckEv+0x30>)
 80010ae:	f00f fb7d 	bl	80107ac <__assert_func>
                     FLATBUFFERS_LITTLEENDIAN);
  (void)endiantest;
}
 80010b2:	bf00      	nop
 80010b4:	3708      	adds	r7, #8
 80010b6:	46bd      	mov	sp, r7
 80010b8:	bd80      	pop	{r7, pc}
 80010ba:	bf00      	nop
 80010bc:	08013728 	.word	0x08013728
 80010c0:	0801376c 	.word	0x0801376c
 80010c4:	0801378c 	.word	0x0801378c

080010c8 <_ZNK11flatbuffers5Table9GetVTableEv>:

// "tables" use an offset table (possibly shared) that allows fields to be
// omitted and added at will, but uses an extra indirection to read.
class Table {
 public:
  const uint8_t *GetVTable() const {
 80010c8:	b590      	push	{r4, r7, lr}
 80010ca:	b083      	sub	sp, #12
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	6078      	str	r0, [r7, #4]
    return data_ - ReadScalar<soffset_t>(data_);
 80010d0:	687c      	ldr	r4, [r7, #4]
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	4618      	mov	r0, r3
 80010d6:	f000 fcd1 	bl	8001a7c <_ZN11flatbuffers10ReadScalarIlEET_PKv>
 80010da:	4603      	mov	r3, r0
 80010dc:	425b      	negs	r3, r3
 80010de:	4423      	add	r3, r4
  }
 80010e0:	4618      	mov	r0, r3
 80010e2:	370c      	adds	r7, #12
 80010e4:	46bd      	mov	sp, r7
 80010e6:	bd90      	pop	{r4, r7, pc}

080010e8 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>:

  // This gets the field offset for any of the functions below it, or 0
  // if the field was not present.
  voffset_t GetOptionalFieldOffset(voffset_t field) const {
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b084      	sub	sp, #16
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
 80010f0:	460b      	mov	r3, r1
 80010f2:	807b      	strh	r3, [r7, #2]
    // The vtable offset is always at the start.
    auto vtable = GetVTable();
 80010f4:	6878      	ldr	r0, [r7, #4]
 80010f6:	f7ff ffe7 	bl	80010c8 <_ZNK11flatbuffers5Table9GetVTableEv>
 80010fa:	60f8      	str	r0, [r7, #12]
    // The first element is the size of the vtable (fields + type id + itself).
    auto vtsize = ReadScalar<voffset_t>(vtable);
 80010fc:	68f8      	ldr	r0, [r7, #12]
 80010fe:	f000 fca1 	bl	8001a44 <_ZN11flatbuffers10ReadScalarItEET_PKv>
 8001102:	4603      	mov	r3, r0
 8001104:	817b      	strh	r3, [r7, #10]
    // If the field we're accessing is outside the vtable, we're reading older
    // data, so it's the same as if the offset was 0 (not present).
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
 8001106:	887a      	ldrh	r2, [r7, #2]
 8001108:	897b      	ldrh	r3, [r7, #10]
 800110a:	429a      	cmp	r2, r3
 800110c:	d207      	bcs.n	800111e <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt+0x36>
 800110e:	887b      	ldrh	r3, [r7, #2]
 8001110:	68fa      	ldr	r2, [r7, #12]
 8001112:	4413      	add	r3, r2
 8001114:	4618      	mov	r0, r3
 8001116:	f000 fc95 	bl	8001a44 <_ZN11flatbuffers10ReadScalarItEET_PKv>
 800111a:	4603      	mov	r3, r0
 800111c:	e000      	b.n	8001120 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt+0x38>
 800111e:	2300      	movs	r3, #0
  }
 8001120:	4618      	mov	r0, r3
 8001122:	3710      	adds	r7, #16
 8001124:	46bd      	mov	sp, r7
 8001126:	bd80      	pop	{r7, pc}

08001128 <_ZNK6tflite5Model7versionEv>:
    VT_BUFFERS = 12,
    VT_METADATA_BUFFER = 14,
    VT_METADATA = 16,
    VT_SIGNATURE_DEFS = 18
  };
  uint32_t version() const {
 8001128:	b580      	push	{r7, lr}
 800112a:	b082      	sub	sp, #8
 800112c:	af00      	add	r7, sp, #0
 800112e:	6078      	str	r0, [r7, #4]
    return GetField<uint32_t>(VT_VERSION, 0);
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	2200      	movs	r2, #0
 8001134:	2104      	movs	r1, #4
 8001136:	4618      	mov	r0, r3
 8001138:	f000 fcae 	bl	8001a98 <_ZNK11flatbuffers5Table8GetFieldImEET_tS2_>
 800113c:	4603      	mov	r3, r0
  }
 800113e:	4618      	mov	r0, r3
 8001140:	3708      	adds	r7, #8
 8001142:	46bd      	mov	sp, r7
 8001144:	bd80      	pop	{r7, pc}

08001146 <_ZN6tflite8GetModelEPKv>:
  }
  value = nullptr;
  type = BuiltinOptions_NONE;
}

inline const tflite::Model *GetModel(const void *buf) {
 8001146:	b580      	push	{r7, lr}
 8001148:	b082      	sub	sp, #8
 800114a:	af00      	add	r7, sp, #0
 800114c:	6078      	str	r0, [r7, #4]
  return flatbuffers::GetRoot<tflite::Model>(buf);
 800114e:	6878      	ldr	r0, [r7, #4]
 8001150:	f000 fcc0 	bl	8001ad4 <_ZN11flatbuffers7GetRootIN6tflite5ModelEEEPKT_PKv>
 8001154:	4603      	mov	r3, r0
}
 8001156:	4618      	mov	r0, r3
 8001158:	3708      	adds	r7, #8
 800115a:	46bd      	mov	sp, r7
 800115c:	bd80      	pop	{r7, pc}

0800115e <_ZNSt12_Vector_baseISt10unique_ptrI14TfLiteDelegatePFvPS1_EESaIS5_EEC1Ev>:
      allocator_type
      get_allocator() const _GLIBCXX_NOEXCEPT
      { return allocator_type(_M_get_Tp_allocator()); }

#if __cplusplus >= 201103L
      _Vector_base() = default;
 800115e:	b580      	push	{r7, lr}
 8001160:	b082      	sub	sp, #8
 8001162:	af00      	add	r7, sp, #0
 8001164:	6078      	str	r0, [r7, #4]
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	4618      	mov	r0, r3
 800116a:	f000 fcbf 	bl	8001aec <_ZNSt12_Vector_baseISt10unique_ptrI14TfLiteDelegatePFvPS1_EESaIS5_EE12_Vector_implC1Ev>
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	4618      	mov	r0, r3
 8001172:	3708      	adds	r7, #8
 8001174:	46bd      	mov	sp, r7
 8001176:	bd80      	pop	{r7, pc}

08001178 <_ZNSt6vectorISt10unique_ptrI14TfLiteDelegatePFvPS1_EESaIS5_EEC1Ev>:

      /**
       *  @brief  Creates a %vector with no elements.
       */
#if __cplusplus >= 201103L
      vector() = default;
 8001178:	b580      	push	{r7, lr}
 800117a:	b082      	sub	sp, #8
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	4618      	mov	r0, r3
 8001184:	f7ff ffeb 	bl	800115e <_ZNSt12_Vector_baseISt10unique_ptrI14TfLiteDelegatePFvPS1_EESaIS5_EEC1Ev>
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	4618      	mov	r0, r3
 800118c:	3708      	adds	r7, #8
 800118e:	46bd      	mov	sp, r7
 8001190:	bd80      	pop	{r7, pc}

08001192 <_ZNK6tflite10OpResolver12GetDelegatesEi>:
  // Returns optional delegates for resolving and handling ops in the flatbuffer
  // model. This may be used in addition to the standard TfLiteRegistration
  // lookup for graph resolution.
  using TfLiteDelegatePtrVector =
      std::vector<std::unique_ptr<TfLiteDelegate, void (*)(TfLiteDelegate*)>>;
  virtual TfLiteDelegatePtrVector GetDelegates(int num_threads) const {
 8001192:	b580      	push	{r7, lr}
 8001194:	b084      	sub	sp, #16
 8001196:	af00      	add	r7, sp, #0
 8001198:	60f8      	str	r0, [r7, #12]
 800119a:	60b9      	str	r1, [r7, #8]
 800119c:	607a      	str	r2, [r7, #4]
    return TfLiteDelegatePtrVector();
 800119e:	68fb      	ldr	r3, [r7, #12]
 80011a0:	2200      	movs	r2, #0
 80011a2:	601a      	str	r2, [r3, #0]
 80011a4:	68fb      	ldr	r3, [r7, #12]
 80011a6:	2200      	movs	r2, #0
 80011a8:	605a      	str	r2, [r3, #4]
 80011aa:	68fb      	ldr	r3, [r7, #12]
 80011ac:	2200      	movs	r2, #0
 80011ae:	609a      	str	r2, [r3, #8]
 80011b0:	68f8      	ldr	r0, [r7, #12]
 80011b2:	f7ff ffe1 	bl	8001178 <_ZNSt6vectorISt10unique_ptrI14TfLiteDelegatePFvPS1_EESaIS5_EEC1Ev>
  }
 80011b6:	68f8      	ldr	r0, [r7, #12]
 80011b8:	3710      	adds	r7, #16
 80011ba:	46bd      	mov	sp, r7
 80011bc:	bd80      	pop	{r7, pc}
	...

080011c0 <_ZN6tflite10OpResolverD1Ev>:

  virtual ~OpResolver() {}
 80011c0:	b480      	push	{r7}
 80011c2:	b083      	sub	sp, #12
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]
 80011c8:	4a04      	ldr	r2, [pc, #16]	; (80011dc <_ZN6tflite10OpResolverD1Ev+0x1c>)
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	601a      	str	r2, [r3, #0]
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	4618      	mov	r0, r3
 80011d2:	370c      	adds	r7, #12
 80011d4:	46bd      	mov	sp, r7
 80011d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011da:	4770      	bx	lr
 80011dc:	08018314 	.word	0x08018314

080011e0 <_ZN6tflite10OpResolverD0Ev>:
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b082      	sub	sp, #8
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]
 80011e8:	6878      	ldr	r0, [r7, #4]
 80011ea:	f7ff ffe9 	bl	80011c0 <_ZN6tflite10OpResolverD1Ev>
 80011ee:	2104      	movs	r1, #4
 80011f0:	6878      	ldr	r0, [r7, #4]
 80011f2:	f00f f84e 	bl	8010292 <_ZdlPvj>
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	4618      	mov	r0, r3
 80011fa:	3708      	adds	r7, #8
 80011fc:	46bd      	mov	sp, r7
 80011fe:	bd80      	pop	{r7, pc}

08001200 <_ZNK6tflite10OpResolver24MayContainUserDefinedOpsEv>:
  /// user-defined ops can't be guaranteed.
  ///
  /// Note that "user-defined" ops are not the same as "custom" ops;
  /// BuiltinOpResolver may support certain "custom" ops, in addition to
  /// "builtin" ops, and may not support all of the "builtin" op enum values.
  virtual bool MayContainUserDefinedOps() const { return true; }
 8001200:	b480      	push	{r7}
 8001202:	b083      	sub	sp, #12
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
 8001208:	2301      	movs	r3, #1
 800120a:	4618      	mov	r0, r3
 800120c:	370c      	adds	r7, #12
 800120e:	46bd      	mov	sp, r7
 8001210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001214:	4770      	bx	lr

08001216 <_ZNK6tflite15MicroOpResolver6FindOpENS_15BuiltinOperatorEi>:
  // name.
  virtual const TfLiteRegistration* FindOp(const char* op) const = 0;

  // This implementation exists for compatibility with the OpResolver base class
  // and disregards the version parameter.
  const TfLiteRegistration* FindOp(BuiltinOperator op,
 8001216:	b580      	push	{r7, lr}
 8001218:	b084      	sub	sp, #16
 800121a:	af00      	add	r7, sp, #0
 800121c:	60f8      	str	r0, [r7, #12]
 800121e:	460b      	mov	r3, r1
 8001220:	607a      	str	r2, [r7, #4]
 8001222:	72fb      	strb	r3, [r7, #11]
                                   int version) const final {
    return FindOp(op);
 8001224:	68fb      	ldr	r3, [r7, #12]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	3318      	adds	r3, #24
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	7afa      	ldrb	r2, [r7, #11]
 800122e:	4611      	mov	r1, r2
 8001230:	68f8      	ldr	r0, [r7, #12]
 8001232:	4798      	blx	r3
 8001234:	4603      	mov	r3, r0
  }
 8001236:	4618      	mov	r0, r3
 8001238:	3710      	adds	r7, #16
 800123a:	46bd      	mov	sp, r7
 800123c:	bd80      	pop	{r7, pc}

0800123e <_ZNK6tflite15MicroOpResolver6FindOpEPKci>:

  // This implementation exists for compatibility with the OpResolver base class
  // and disregards the version parameter.
  const TfLiteRegistration* FindOp(const char* op, int version) const final {
 800123e:	b580      	push	{r7, lr}
 8001240:	b084      	sub	sp, #16
 8001242:	af00      	add	r7, sp, #0
 8001244:	60f8      	str	r0, [r7, #12]
 8001246:	60b9      	str	r1, [r7, #8]
 8001248:	607a      	str	r2, [r7, #4]
    return FindOp(op);
 800124a:	68fb      	ldr	r3, [r7, #12]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	331c      	adds	r3, #28
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	68b9      	ldr	r1, [r7, #8]
 8001254:	68f8      	ldr	r0, [r7, #12]
 8001256:	4798      	blx	r3
 8001258:	4603      	mov	r3, r0
  }
 800125a:	4618      	mov	r0, r3
 800125c:	3710      	adds	r7, #16
 800125e:	46bd      	mov	sp, r7
 8001260:	bd80      	pop	{r7, pc}
	...

08001264 <_ZN6tflite15MicroOpResolverD1Ev>:

  // Returns the operator specific parsing function for the OpData for a
  // BuiltinOperator (if registered), else nullptr.
  virtual BuiltinParseFunction GetOpDataParser(BuiltinOperator op) const = 0;

  ~MicroOpResolver() override {}
 8001264:	b580      	push	{r7, lr}
 8001266:	b082      	sub	sp, #8
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]
 800126c:	4a05      	ldr	r2, [pc, #20]	; (8001284 <_ZN6tflite15MicroOpResolverD1Ev+0x20>)
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	601a      	str	r2, [r3, #0]
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	4618      	mov	r0, r3
 8001276:	f7ff ffa3 	bl	80011c0 <_ZN6tflite10OpResolverD1Ev>
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	4618      	mov	r0, r3
 800127e:	3708      	adds	r7, #8
 8001280:	46bd      	mov	sp, r7
 8001282:	bd80      	pop	{r7, pc}
 8001284:	080182e8 	.word	0x080182e8

08001288 <_ZN6tflite15MicroOpResolverD0Ev>:
 8001288:	b580      	push	{r7, lr}
 800128a:	b082      	sub	sp, #8
 800128c:	af00      	add	r7, sp, #0
 800128e:	6078      	str	r0, [r7, #4]
 8001290:	6878      	ldr	r0, [r7, #4]
 8001292:	f7ff ffe7 	bl	8001264 <_ZN6tflite15MicroOpResolverD1Ev>
 8001296:	2104      	movs	r1, #4
 8001298:	6878      	ldr	r0, [r7, #4]
 800129a:	f00e fffa 	bl	8010292 <_ZdlPvj>
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	4618      	mov	r0, r3
 80012a2:	3708      	adds	r7, #8
 80012a4:	46bd      	mov	sp, r7
 80012a6:	bd80      	pop	{r7, pc}

080012a8 <__tcf_0>:
  /* USER CODE BEGIN 2 */

	// Set up logging. Google style is to avoid globals or statics because of
	  // lifetime uncertainty, but since this has a trivial destructor it's okay.
	  // NOLINTNEXTLINE(runtime-global-variables)
	  static tflite::MicroErrorReporter micro_error_reporter;
 80012a8:	b580      	push	{r7, lr}
 80012aa:	af00      	add	r7, sp, #0
 80012ac:	4801      	ldr	r0, [pc, #4]	; (80012b4 <__tcf_0+0xc>)
 80012ae:	f7ff fecf 	bl	8001050 <_ZN6tflite18MicroErrorReporterD1Ev>
 80012b2:	bd80      	pop	{r7, pc}
 80012b4:	20000000 	.word	0x20000000

080012b8 <__tcf_1>:
	   // An easier approach is to just use the AllOpsResolver, but this will
	   // incur some penalty in code space for op implementations that are not
	   // needed by this graph.


	   static tflite::MicroMutableOpResolver<4> micro_op_resolver;
 80012b8:	b580      	push	{r7, lr}
 80012ba:	af00      	add	r7, sp, #0
 80012bc:	4801      	ldr	r0, [pc, #4]	; (80012c4 <__tcf_1+0xc>)
 80012be:	f000 fdc9 	bl	8001e54 <_ZN6tflite22MicroMutableOpResolverILj4EED1Ev>
 80012c2:	bd80      	pop	{r7, pc}
 80012c4:	20005330 	.word	0x20005330

080012c8 <main>:
{
 80012c8:	b590      	push	{r4, r7, lr}
 80012ca:	b0d1      	sub	sp, #324	; 0x144
 80012cc:	af04      	add	r7, sp, #16
	int buf_len = 0;
 80012ce:	2300      	movs	r3, #0
 80012d0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    int test = 2;
 80012d4:	2302      	movs	r3, #2
 80012d6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  HAL_Init();
 80012da:	f001 f86f 	bl	80023bc <HAL_Init>
  SystemClock_Config();
 80012de:	f000 fa0b 	bl	80016f8 <_Z18SystemClock_Configv>
  MX_GPIO_Init();
 80012e2:	f000 fb2f 	bl	8001944 <_ZL12MX_GPIO_Initv>
  MX_TIM10_Init();
 80012e6:	f000 fa7b 	bl	80017e0 <_ZL13MX_TIM10_Initv>
  MX_USART1_UART_Init();
 80012ea:	f000 faa1 	bl	8001830 <_ZL19MX_USART1_UART_Initv>
  MX_USART2_UART_Init();
 80012ee:	f000 facd 	bl	800188c <_ZL19MX_USART2_UART_Initv>
  MX_USART6_UART_Init();
 80012f2:	f000 faf9 	bl	80018e8 <_ZL19MX_USART6_UART_Initv>
	  static tflite::MicroErrorReporter micro_error_reporter;
 80012f6:	4bad      	ldr	r3, [pc, #692]	; (80015ac <main+0x2e4>)
 80012f8:	781b      	ldrb	r3, [r3, #0]
 80012fa:	f3bf 8f5b 	dmb	ish
 80012fe:	b2db      	uxtb	r3, r3
 8001300:	f003 0301 	and.w	r3, r3, #1
 8001304:	2b00      	cmp	r3, #0
 8001306:	bf0c      	ite	eq
 8001308:	2301      	moveq	r3, #1
 800130a:	2300      	movne	r3, #0
 800130c:	b2db      	uxtb	r3, r3
 800130e:	2b00      	cmp	r3, #0
 8001310:	d010      	beq.n	8001334 <main+0x6c>
 8001312:	48a6      	ldr	r0, [pc, #664]	; (80015ac <main+0x2e4>)
 8001314:	f00e ffc1 	bl	801029a <__cxa_guard_acquire>
 8001318:	4603      	mov	r3, r0
 800131a:	2b00      	cmp	r3, #0
 800131c:	bf14      	ite	ne
 800131e:	2301      	movne	r3, #1
 8001320:	2300      	moveq	r3, #0
 8001322:	b2db      	uxtb	r3, r3
 8001324:	2b00      	cmp	r3, #0
 8001326:	d005      	beq.n	8001334 <main+0x6c>
 8001328:	48a0      	ldr	r0, [pc, #640]	; (80015ac <main+0x2e4>)
 800132a:	f00e ffc2 	bl	80102b2 <__cxa_guard_release>
 800132e:	48a0      	ldr	r0, [pc, #640]	; (80015b0 <main+0x2e8>)
 8001330:	f00f fa5a 	bl	80107e8 <atexit>
	  error_reporter = &micro_error_reporter;
 8001334:	4b9f      	ldr	r3, [pc, #636]	; (80015b4 <main+0x2ec>)
 8001336:	4aa0      	ldr	r2, [pc, #640]	; (80015b8 <main+0x2f0>)
 8001338:	601a      	str	r2, [r3, #0]
	  LogMCU("\n*****Starting Sound Recognition Program for STM32 411RE*****\r\n");
 800133a:	48a0      	ldr	r0, [pc, #640]	; (80015bc <main+0x2f4>)
 800133c:	f000 f9c0 	bl	80016c0 <_Z6LogMCUPKc>
	  model = tflite::GetModel(g_tiny_conv_micro_features_model_data);
 8001340:	489f      	ldr	r0, [pc, #636]	; (80015c0 <main+0x2f8>)
 8001342:	f7ff ff00 	bl	8001146 <_ZN6tflite8GetModelEPKv>
 8001346:	4603      	mov	r3, r0
 8001348:	4a9e      	ldr	r2, [pc, #632]	; (80015c4 <main+0x2fc>)
 800134a:	6013      	str	r3, [r2, #0]
	  if (model->version() != TFLITE_SCHEMA_VERSION) {
 800134c:	4b9d      	ldr	r3, [pc, #628]	; (80015c4 <main+0x2fc>)
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	4618      	mov	r0, r3
 8001352:	f7ff fee9 	bl	8001128 <_ZNK6tflite5Model7versionEv>
 8001356:	4603      	mov	r3, r0
 8001358:	2b03      	cmp	r3, #3
 800135a:	bf14      	ite	ne
 800135c:	2301      	movne	r3, #1
 800135e:	2300      	moveq	r3, #0
 8001360:	b2db      	uxtb	r3, r3
 8001362:	2b00      	cmp	r3, #0
 8001364:	d00c      	beq.n	8001380 <main+0xb8>
	    TF_LITE_REPORT_ERROR(error_reporter,
 8001366:	4b93      	ldr	r3, [pc, #588]	; (80015b4 <main+0x2ec>)
 8001368:	681c      	ldr	r4, [r3, #0]
 800136a:	4b96      	ldr	r3, [pc, #600]	; (80015c4 <main+0x2fc>)
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	4618      	mov	r0, r3
 8001370:	f7ff feda 	bl	8001128 <_ZNK6tflite5Model7versionEv>
 8001374:	4602      	mov	r2, r0
 8001376:	2303      	movs	r3, #3
 8001378:	4993      	ldr	r1, [pc, #588]	; (80015c8 <main+0x300>)
 800137a:	4620      	mov	r0, r4
 800137c:	f002 fc4c 	bl	8003c18 <_ZN6tflite13ErrorReporter6ReportEPKcz>
	   static tflite::MicroMutableOpResolver<4> micro_op_resolver;
 8001380:	4b92      	ldr	r3, [pc, #584]	; (80015cc <main+0x304>)
 8001382:	781b      	ldrb	r3, [r3, #0]
 8001384:	f3bf 8f5b 	dmb	ish
 8001388:	b2db      	uxtb	r3, r3
 800138a:	f003 0301 	and.w	r3, r3, #1
 800138e:	2b00      	cmp	r3, #0
 8001390:	bf0c      	ite	eq
 8001392:	2301      	moveq	r3, #1
 8001394:	2300      	movne	r3, #0
 8001396:	b2db      	uxtb	r3, r3
 8001398:	2b00      	cmp	r3, #0
 800139a:	d014      	beq.n	80013c6 <main+0xfe>
 800139c:	488b      	ldr	r0, [pc, #556]	; (80015cc <main+0x304>)
 800139e:	f00e ff7c 	bl	801029a <__cxa_guard_acquire>
 80013a2:	4603      	mov	r3, r0
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	bf14      	ite	ne
 80013a8:	2301      	movne	r3, #1
 80013aa:	2300      	moveq	r3, #0
 80013ac:	b2db      	uxtb	r3, r3
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d009      	beq.n	80013c6 <main+0xfe>
 80013b2:	2100      	movs	r1, #0
 80013b4:	4886      	ldr	r0, [pc, #536]	; (80015d0 <main+0x308>)
 80013b6:	f000 fbcb 	bl	8001b50 <_ZN6tflite22MicroMutableOpResolverILj4EEC1EPNS_13ErrorReporterE>
 80013ba:	4884      	ldr	r0, [pc, #528]	; (80015cc <main+0x304>)
 80013bc:	f00e ff79 	bl	80102b2 <__cxa_guard_release>
 80013c0:	4884      	ldr	r0, [pc, #528]	; (80015d4 <main+0x30c>)
 80013c2:	f00f fa11 	bl	80107e8 <atexit>

	   if (micro_op_resolver.AddDepthwiseConv2D() != kTfLiteOk) {
 80013c6:	4882      	ldr	r0, [pc, #520]	; (80015d0 <main+0x308>)
 80013c8:	f000 fbe2 	bl	8001b90 <_ZN6tflite22MicroMutableOpResolverILj4EE18AddDepthwiseConv2DEv>
 80013cc:	4603      	mov	r3, r0
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	bf14      	ite	ne
 80013d2:	2301      	movne	r3, #1
 80013d4:	2300      	moveq	r3, #0
 80013d6:	b2db      	uxtb	r3, r3
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d002      	beq.n	80013e2 <main+0x11a>
		   LogMCU(" ADD AddDepthwiseConv2D failed\r\n");
 80013dc:	487e      	ldr	r0, [pc, #504]	; (80015d8 <main+0x310>)
 80013de:	f000 f96f 	bl	80016c0 <_Z6LogMCUPKc>
	   //  return;
	   }
	   if (micro_op_resolver.AddFullyConnected() != kTfLiteOk) {
 80013e2:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80013e6:	4618      	mov	r0, r3
 80013e8:	f00b fd3a 	bl	800ce60 <_ZN6tflite24Register_FULLY_CONNECTEDEv>
 80013ec:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80013f0:	4619      	mov	r1, r3
 80013f2:	4877      	ldr	r0, [pc, #476]	; (80015d0 <main+0x308>)
 80013f4:	f000 fbe4 	bl	8001bc0 <_ZN6tflite22MicroMutableOpResolverILj4EE17AddFullyConnectedERK18TfLiteRegistration>
 80013f8:	4603      	mov	r3, r0
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	bf14      	ite	ne
 80013fe:	2301      	movne	r3, #1
 8001400:	2300      	moveq	r3, #0
 8001402:	b2db      	uxtb	r3, r3
 8001404:	2b00      	cmp	r3, #0
 8001406:	d002      	beq.n	800140e <main+0x146>
		   LogMCU("AddFullyConnected failed\r\n");
 8001408:	4874      	ldr	r0, [pc, #464]	; (80015dc <main+0x314>)
 800140a:	f000 f959 	bl	80016c0 <_Z6LogMCUPKc>
	   //  return;
	   }
	   if (micro_op_resolver.AddSoftmax() != kTfLiteOk) {
 800140e:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001412:	4618      	mov	r0, r3
 8001414:	f00d fb6a 	bl	800eaec <_ZN6tflite16Register_SOFTMAXEv>
 8001418:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 800141c:	4619      	mov	r1, r3
 800141e:	486c      	ldr	r0, [pc, #432]	; (80015d0 <main+0x308>)
 8001420:	f000 fbe0 	bl	8001be4 <_ZN6tflite22MicroMutableOpResolverILj4EE10AddSoftmaxERK18TfLiteRegistration>
 8001424:	4603      	mov	r3, r0
 8001426:	2b00      	cmp	r3, #0
 8001428:	bf14      	ite	ne
 800142a:	2301      	movne	r3, #1
 800142c:	2300      	moveq	r3, #0
 800142e:	b2db      	uxtb	r3, r3
 8001430:	2b00      	cmp	r3, #0
 8001432:	d002      	beq.n	800143a <main+0x172>
		   LogMCU("AddSoftmax failed\r\n");
 8001434:	486a      	ldr	r0, [pc, #424]	; (80015e0 <main+0x318>)
 8001436:	f000 f943 	bl	80016c0 <_Z6LogMCUPKc>
	  //   return;
	   }
	   if (micro_op_resolver.AddReshape() != kTfLiteOk) {
 800143a:	4865      	ldr	r0, [pc, #404]	; (80015d0 <main+0x308>)
 800143c:	f000 fbe4 	bl	8001c08 <_ZN6tflite22MicroMutableOpResolverILj4EE10AddReshapeEv>
 8001440:	4603      	mov	r3, r0
 8001442:	2b00      	cmp	r3, #0
 8001444:	bf14      	ite	ne
 8001446:	2301      	movne	r3, #1
 8001448:	2300      	moveq	r3, #0
 800144a:	b2db      	uxtb	r3, r3
 800144c:	2b00      	cmp	r3, #0
 800144e:	d002      	beq.n	8001456 <main+0x18e>
		   LogMCU("AddReshape failed\r\n");
 8001450:	4864      	ldr	r0, [pc, #400]	; (80015e4 <main+0x31c>)
 8001452:	f000 f935 	bl	80016c0 <_Z6LogMCUPKc>
	   }



	   // Build an interpreter to run the model with.
	   tflite::MicroInterpreter interpreter(model, micro_op_resolver, tensor_arena, kTensorArenaSize, error_reporter);
 8001456:	4b5b      	ldr	r3, [pc, #364]	; (80015c4 <main+0x2fc>)
 8001458:	6819      	ldr	r1, [r3, #0]
 800145a:	4b56      	ldr	r3, [pc, #344]	; (80015b4 <main+0x2ec>)
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	4638      	mov	r0, r7
 8001460:	2200      	movs	r2, #0
 8001462:	9202      	str	r2, [sp, #8]
 8001464:	9301      	str	r3, [sp, #4]
 8001466:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
 800146a:	9300      	str	r3, [sp, #0]
 800146c:	4b5e      	ldr	r3, [pc, #376]	; (80015e8 <main+0x320>)
 800146e:	4a58      	ldr	r2, [pc, #352]	; (80015d0 <main+0x308>)
 8001470:	f008 fa76 	bl	8009960 <_ZN6tflite16MicroInterpreterC1EPKNS_5ModelERKNS_15MicroOpResolverEPhjPNS_13ErrorReporterEPNS_13MicroProfilerE>


	   TfLiteStatus allocate_status = interpreter.AllocateTensors();
 8001474:	463b      	mov	r3, r7
 8001476:	4618      	mov	r0, r3
 8001478:	f008 fc5e 	bl	8009d38 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv>
 800147c:	4603      	mov	r3, r0
 800147e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

	   if (allocate_status != kTfLiteOk) {
 8001482:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8001486:	2b00      	cmp	r3, #0
 8001488:	d002      	beq.n	8001490 <main+0x1c8>
	     LogMCU("AllocateTensors() failed\r\n");
 800148a:	4858      	ldr	r0, [pc, #352]	; (80015ec <main+0x324>)
 800148c:	f000 f918 	bl	80016c0 <_Z6LogMCUPKc>
	   }


	   // Get information about the memory area to use for the model's input.
	   //  model_input = interpreter->input(0);
	     model_input = interpreter.input(0);
 8001490:	463b      	mov	r3, r7
 8001492:	2100      	movs	r1, #0
 8001494:	4618      	mov	r0, r3
 8001496:	f008 fdef 	bl	800a078 <_ZN6tflite16MicroInterpreter5inputEj>
 800149a:	4603      	mov	r3, r0
 800149c:	4a54      	ldr	r2, [pc, #336]	; (80015f0 <main+0x328>)
 800149e:	6013      	str	r3, [r2, #0]
//	     	                      y_val,
//	     	                      htim16.Instance->CNT - timestamp);
//	     	    HAL_UART_Transmit(&huart2, (uint8_t *)buf, buf_len, 100);
//

	    buf_len = sprintf(buf, "model dim size=%d \r\n", model_input->dims->size);
 80014a0:	4b53      	ldr	r3, [pc, #332]	; (80015f0 <main+0x328>)
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	689b      	ldr	r3, [r3, #8]
 80014a6:	681a      	ldr	r2, [r3, #0]
 80014a8:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80014ac:	4951      	ldr	r1, [pc, #324]	; (80015f4 <main+0x32c>)
 80014ae:	4618      	mov	r0, r3
 80014b0:	f010 fb7c 	bl	8011bac <siprintf>
 80014b4:	f8c7 012c 	str.w	r0, [r7, #300]	; 0x12c
	    HAL_UART_Transmit(&huart2, (uint8_t *)buf, buf_len, 100);
 80014b8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80014bc:	b29a      	uxth	r2, r3
 80014be:	f107 0198 	add.w	r1, r7, #152	; 0x98
 80014c2:	2364      	movs	r3, #100	; 0x64
 80014c4:	484c      	ldr	r0, [pc, #304]	; (80015f8 <main+0x330>)
 80014c6:	f002 f879 	bl	80035bc <HAL_UART_Transmit>

	    buf_len = sprintf(buf, "model dim data0=%d \r\n", model_input->dims->data[0]);
 80014ca:	4b49      	ldr	r3, [pc, #292]	; (80015f0 <main+0x328>)
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	689b      	ldr	r3, [r3, #8]
 80014d0:	685a      	ldr	r2, [r3, #4]
 80014d2:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80014d6:	4949      	ldr	r1, [pc, #292]	; (80015fc <main+0x334>)
 80014d8:	4618      	mov	r0, r3
 80014da:	f010 fb67 	bl	8011bac <siprintf>
 80014de:	f8c7 012c 	str.w	r0, [r7, #300]	; 0x12c
	    HAL_UART_Transmit(&huart2, (uint8_t *)buf, buf_len, 100);
 80014e2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80014e6:	b29a      	uxth	r2, r3
 80014e8:	f107 0198 	add.w	r1, r7, #152	; 0x98
 80014ec:	2364      	movs	r3, #100	; 0x64
 80014ee:	4842      	ldr	r0, [pc, #264]	; (80015f8 <main+0x330>)
 80014f0:	f002 f864 	bl	80035bc <HAL_UART_Transmit>

	    buf_len = sprintf(buf, "model dim data1=%d \r\n",model_input->dims->data[1]);
 80014f4:	4b3e      	ldr	r3, [pc, #248]	; (80015f0 <main+0x328>)
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	689b      	ldr	r3, [r3, #8]
 80014fa:	689a      	ldr	r2, [r3, #8]
 80014fc:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001500:	493f      	ldr	r1, [pc, #252]	; (8001600 <main+0x338>)
 8001502:	4618      	mov	r0, r3
 8001504:	f010 fb52 	bl	8011bac <siprintf>
 8001508:	f8c7 012c 	str.w	r0, [r7, #300]	; 0x12c
	    HAL_UART_Transmit(&huart2, (uint8_t *)buf, buf_len, 100);
 800150c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001510:	b29a      	uxth	r2, r3
 8001512:	f107 0198 	add.w	r1, r7, #152	; 0x98
 8001516:	2364      	movs	r3, #100	; 0x64
 8001518:	4837      	ldr	r0, [pc, #220]	; (80015f8 <main+0x330>)
 800151a:	f002 f84f 	bl	80035bc <HAL_UART_Transmit>

	    buf_len = sprintf(buf, "model type=%d \r\n", model_input->type);
 800151e:	4b34      	ldr	r3, [pc, #208]	; (80015f0 <main+0x328>)
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	781b      	ldrb	r3, [r3, #0]
 8001524:	461a      	mov	r2, r3
 8001526:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800152a:	4936      	ldr	r1, [pc, #216]	; (8001604 <main+0x33c>)
 800152c:	4618      	mov	r0, r3
 800152e:	f010 fb3d 	bl	8011bac <siprintf>
 8001532:	f8c7 012c 	str.w	r0, [r7, #300]	; 0x12c
	    HAL_UART_Transmit(&huart2, (uint8_t *)buf, buf_len, 100);
 8001536:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800153a:	b29a      	uxth	r2, r3
 800153c:	f107 0198 	add.w	r1, r7, #152	; 0x98
 8001540:	2364      	movs	r3, #100	; 0x64
 8001542:	482d      	ldr	r0, [pc, #180]	; (80015f8 <main+0x330>)
 8001544:	f002 f83a 	bl	80035bc <HAL_UART_Transmit>
//			 error_reporter->Report("model dim data0=%d", model_input->dims->data[0]);
//			 error_reporter->Report("model dim data1=%d", model_input->dims->data[1]);
//			 error_reporter->Report("model dim data2=%d", model_input->dims->data[2]);
//			 error_reporter->Report("model type=%d", model_input->type);

	     if ((model_input->dims->size != 2) || (model_input->dims->data[0] != 1) ||
 8001548:	4b29      	ldr	r3, [pc, #164]	; (80015f0 <main+0x328>)
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	689b      	ldr	r3, [r3, #8]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	2b02      	cmp	r3, #2
 8001552:	d111      	bne.n	8001578 <main+0x2b0>
 8001554:	4b26      	ldr	r3, [pc, #152]	; (80015f0 <main+0x328>)
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	689b      	ldr	r3, [r3, #8]
 800155a:	685b      	ldr	r3, [r3, #4]
 800155c:	2b01      	cmp	r3, #1
 800155e:	d10b      	bne.n	8001578 <main+0x2b0>
	         (model_input->dims->data[1] !=
 8001560:	4b23      	ldr	r3, [pc, #140]	; (80015f0 <main+0x328>)
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	689b      	ldr	r3, [r3, #8]
 8001566:	689b      	ldr	r3, [r3, #8]
	     if ((model_input->dims->size != 2) || (model_input->dims->data[0] != 1) ||
 8001568:	f5b3 6ff5 	cmp.w	r3, #1960	; 0x7a8
 800156c:	d104      	bne.n	8001578 <main+0x2b0>
	          (kFeatureSliceCount * kFeatureSliceSize)) ||
	         (model_input->type != kTfLiteInt8)) {
 800156e:	4b20      	ldr	r3, [pc, #128]	; (80015f0 <main+0x328>)
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	781b      	ldrb	r3, [r3, #0]
	          (kFeatureSliceCount * kFeatureSliceSize)) ||
 8001574:	2b09      	cmp	r3, #9
 8001576:	d005      	beq.n	8001584 <main+0x2bc>
	       TF_LITE_REPORT_ERROR(error_reporter,
 8001578:	4b0e      	ldr	r3, [pc, #56]	; (80015b4 <main+0x2ec>)
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	4922      	ldr	r1, [pc, #136]	; (8001608 <main+0x340>)
 800157e:	4618      	mov	r0, r3
 8001580:	f002 fb4a 	bl	8003c18 <_ZN6tflite13ErrorReporter6ReportEPKcz>
	                            "Bad input tensor parameters in model");
	      // return;
	     }

	     model_input_buffer = model_input->data.int8;
 8001584:	4b1a      	ldr	r3, [pc, #104]	; (80015f0 <main+0x328>)
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	685b      	ldr	r3, [r3, #4]
 800158a:	4a20      	ldr	r2, [pc, #128]	; (800160c <main+0x344>)
 800158c:	6013      	str	r3, [r2, #0]
//
//	         }


	       // Run the model on the spectrogram input and make sure it succeeds.
	       TfLiteStatus invoke_status = interpreter.Invoke();
 800158e:	463b      	mov	r3, r7
 8001590:	4618      	mov	r0, r3
 8001592:	f008 fd3f 	bl	800a014 <_ZN6tflite16MicroInterpreter6InvokeEv>
 8001596:	4603      	mov	r3, r0
 8001598:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
	       if (invoke_status != kTfLiteOk) {
 800159c:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d037      	beq.n	8001614 <main+0x34c>
	         LogMCU("Invoke failed");
 80015a4:	481a      	ldr	r0, [pc, #104]	; (8001610 <main+0x348>)
 80015a6:	f000 f88b 	bl	80016c0 <_Z6LogMCUPKc>
 80015aa:	e033      	b.n	8001614 <main+0x34c>
 80015ac:	2000532c 	.word	0x2000532c
 80015b0:	080012a9 	.word	0x080012a9
 80015b4:	2000031c 	.word	0x2000031c
 80015b8:	20000000 	.word	0x20000000
 80015bc:	0801383c 	.word	0x0801383c
 80015c0:	08018358 	.word	0x08018358
 80015c4:	20000320 	.word	0x20000320
 80015c8:	0801387c 	.word	0x0801387c
 80015cc:	200053d4 	.word	0x200053d4
 80015d0:	20005330 	.word	0x20005330
 80015d4:	080012b9 	.word	0x080012b9
 80015d8:	080138c4 	.word	0x080138c4
 80015dc:	080138e8 	.word	0x080138e8
 80015e0:	08013904 	.word	0x08013904
 80015e4:	08013918 	.word	0x08013918
 80015e8:	2000032c 	.word	0x2000032c
 80015ec:	0801392c 	.word	0x0801392c
 80015f0:	20000324 	.word	0x20000324
 80015f4:	08013948 	.word	0x08013948
 80015f8:	20000294 	.word	0x20000294
 80015fc:	08013960 	.word	0x08013960
 8001600:	08013978 	.word	0x08013978
 8001604:	08013990 	.word	0x08013990
 8001608:	080139a4 	.word	0x080139a4
 800160c:	20000328 	.word	0x20000328
 8001610:	080139cc 	.word	0x080139cc
//	       //  return;
	       }

	       // Obtain a pointer to the output tensor
	     //  TfLiteTensor* output = interpreter->output(0);
	       TfLiteTensor* output = interpreter.output(0);
 8001614:	463b      	mov	r3, r7
 8001616:	2100      	movs	r1, #0
 8001618:	4618      	mov	r0, r3
 800161a:	f008 fd51 	bl	800a0c0 <_ZN6tflite16MicroInterpreter6outputEj>
 800161e:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120
	   //    error_reporter->Report("output: %d", output->data.uint8[0]);

		   const int kSilenceIndex = 0;
 8001622:	2300      	movs	r3, #0
 8001624:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
		   const int kUnknownIndex = 1;
 8001628:	2301      	movs	r3, #1
 800162a:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
		   const int kyesIndex = 2;
 800162e:	2302      	movs	r3, #2
 8001630:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
		   const int knoIndex = 3;
 8001634:	2303      	movs	r3, #3
 8001636:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
//	       const int kSheilaIndex = 8;
//	       const int kDogBarkIndex = 9;
//
//
//	       // Make sure that the expected "Yes" score is higher than the other classes.
	       uint8_t silence_score = output->data.uint8[kSilenceIndex];
 800163a:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800163e:	685b      	ldr	r3, [r3, #4]
 8001640:	781b      	ldrb	r3, [r3, #0]
 8001642:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
	       uint8_t unknown_score = output->data.uint8[kUnknownIndex];
 8001646:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800164a:	685b      	ldr	r3, [r3, #4]
 800164c:	785b      	ldrb	r3, [r3, #1]
 800164e:	f887 310e 	strb.w	r3, [r7, #270]	; 0x10e
	       uint8_t yes_score = output->data.uint8[kyesIndex];
 8001652:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001656:	685b      	ldr	r3, [r3, #4]
 8001658:	789b      	ldrb	r3, [r3, #2]
 800165a:	f887 310d 	strb.w	r3, [r7, #269]	; 0x10d
	       uint8_t no_score = output->data.uint8[knoIndex];
 800165e:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001662:	685b      	ldr	r3, [r3, #4]
 8001664:	78db      	ldrb	r3, [r3, #3]
 8001666:	f887 310c 	strb.w	r3, [r7, #268]	; 0x10c
//	       uint8_t door_knock_score = output->data.uint8[kDoorKnockIndex];
//	       uint8_t sheila_score = output->data.uint8[kSheilaIndex];
//	       uint8_t dog_bark_score = output->data.uint8[kDogBarkIndex];
//

		    buf_len = sprintf(buf, "Softmax: silence=%d, unknown=%d, yes=%d, no=%d \r\n", silence_score, unknown_score, yes_score, no_score);
 800166a:	f897 110f 	ldrb.w	r1, [r7, #271]	; 0x10f
 800166e:	f897 410e 	ldrb.w	r4, [r7, #270]	; 0x10e
 8001672:	f897 310d 	ldrb.w	r3, [r7, #269]	; 0x10d
 8001676:	f897 210c 	ldrb.w	r2, [r7, #268]	; 0x10c
 800167a:	f107 0098 	add.w	r0, r7, #152	; 0x98
 800167e:	9201      	str	r2, [sp, #4]
 8001680:	9300      	str	r3, [sp, #0]
 8001682:	4623      	mov	r3, r4
 8001684:	460a      	mov	r2, r1
 8001686:	490b      	ldr	r1, [pc, #44]	; (80016b4 <main+0x3ec>)
 8001688:	f010 fa90 	bl	8011bac <siprintf>
 800168c:	f8c7 012c 	str.w	r0, [r7, #300]	; 0x12c
		    HAL_UART_Transmit(&huart2, (uint8_t *)buf, buf_len, 100);
 8001690:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001694:	b29a      	uxth	r2, r3
 8001696:	f107 0198 	add.w	r1, r7, #152	; 0x98
 800169a:	2364      	movs	r3, #100	; 0x64
 800169c:	4806      	ldr	r0, [pc, #24]	; (80016b8 <main+0x3f0>)
 800169e:	f001 ff8d 	bl	80035bc <HAL_UART_Transmit>


//	    buf_len = sprintf(buf,"Test 411RE\r\n");
//	    HAL_UART_Transmit(&huart2, (uint8_t *)buf, buf_len, 100);

	    LogMCU(" testing Martin\r\n");
 80016a2:	4806      	ldr	r0, [pc, #24]	; (80016bc <main+0x3f4>)
 80016a4:	f000 f80c 	bl	80016c0 <_Z6LogMCUPKc>


	    // Wait before doing it again
	    HAL_Delay(1000);
 80016a8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80016ac:	f000 fef8 	bl	80024a0 <HAL_Delay>
	    LogMCU(" testing Martin\r\n");
 80016b0:	e7f7      	b.n	80016a2 <main+0x3da>
 80016b2:	bf00      	nop
 80016b4:	080139dc 	.word	0x080139dc
 80016b8:	20000294 	.word	0x20000294
 80016bc:	08013a10 	.word	0x08013a10

080016c0 <_Z6LogMCUPKc>:
  }
  /* USER CODE END 3 */
}

void LogMCU(const char * message )
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b09c      	sub	sp, #112	; 0x70
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]
	char buf[100];
	int buf_len = 0;
 80016c8:	2300      	movs	r3, #0
 80016ca:	66fb      	str	r3, [r7, #108]	; 0x6c

	buf_len = sprintf(buf, message);
 80016cc:	f107 0308 	add.w	r3, r7, #8
 80016d0:	6879      	ldr	r1, [r7, #4]
 80016d2:	4618      	mov	r0, r3
 80016d4:	f010 fa6a 	bl	8011bac <siprintf>
 80016d8:	66f8      	str	r0, [r7, #108]	; 0x6c
    HAL_UART_Transmit(&huart2, (uint8_t *)buf, buf_len, 100);
 80016da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80016dc:	b29a      	uxth	r2, r3
 80016de:	f107 0108 	add.w	r1, r7, #8
 80016e2:	2364      	movs	r3, #100	; 0x64
 80016e4:	4803      	ldr	r0, [pc, #12]	; (80016f4 <_Z6LogMCUPKc+0x34>)
 80016e6:	f001 ff69 	bl	80035bc <HAL_UART_Transmit>
}
 80016ea:	bf00      	nop
 80016ec:	3770      	adds	r7, #112	; 0x70
 80016ee:	46bd      	mov	sp, r7
 80016f0:	bd80      	pop	{r7, pc}
 80016f2:	bf00      	nop
 80016f4:	20000294 	.word	0x20000294

080016f8 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	b094      	sub	sp, #80	; 0x50
 80016fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80016fe:	f107 0320 	add.w	r3, r7, #32
 8001702:	2230      	movs	r2, #48	; 0x30
 8001704:	2100      	movs	r1, #0
 8001706:	4618      	mov	r0, r3
 8001708:	f00f fb76 	bl	8010df8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800170c:	f107 030c 	add.w	r3, r7, #12
 8001710:	2200      	movs	r2, #0
 8001712:	601a      	str	r2, [r3, #0]
 8001714:	605a      	str	r2, [r3, #4]
 8001716:	609a      	str	r2, [r3, #8]
 8001718:	60da      	str	r2, [r3, #12]
 800171a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800171c:	2300      	movs	r3, #0
 800171e:	60bb      	str	r3, [r7, #8]
 8001720:	4b2d      	ldr	r3, [pc, #180]	; (80017d8 <_Z18SystemClock_Configv+0xe0>)
 8001722:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001724:	4a2c      	ldr	r2, [pc, #176]	; (80017d8 <_Z18SystemClock_Configv+0xe0>)
 8001726:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800172a:	6413      	str	r3, [r2, #64]	; 0x40
 800172c:	4b2a      	ldr	r3, [pc, #168]	; (80017d8 <_Z18SystemClock_Configv+0xe0>)
 800172e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001730:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001734:	60bb      	str	r3, [r7, #8]
 8001736:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001738:	2300      	movs	r3, #0
 800173a:	607b      	str	r3, [r7, #4]
 800173c:	4b27      	ldr	r3, [pc, #156]	; (80017dc <_Z18SystemClock_Configv+0xe4>)
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	4a26      	ldr	r2, [pc, #152]	; (80017dc <_Z18SystemClock_Configv+0xe4>)
 8001742:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001746:	6013      	str	r3, [r2, #0]
 8001748:	4b24      	ldr	r3, [pc, #144]	; (80017dc <_Z18SystemClock_Configv+0xe4>)
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001750:	607b      	str	r3, [r7, #4]
 8001752:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001754:	2302      	movs	r3, #2
 8001756:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001758:	2301      	movs	r3, #1
 800175a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800175c:	2310      	movs	r3, #16
 800175e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001760:	2302      	movs	r3, #2
 8001762:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001764:	2300      	movs	r3, #0
 8001766:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8001768:	2310      	movs	r3, #16
 800176a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 800176c:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001770:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001772:	2304      	movs	r3, #4
 8001774:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001776:	2304      	movs	r3, #4
 8001778:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800177a:	f107 0320 	add.w	r3, r7, #32
 800177e:	4618      	mov	r0, r3
 8001780:	f001 f936 	bl	80029f0 <HAL_RCC_OscConfig>
 8001784:	4603      	mov	r3, r0
 8001786:	2b00      	cmp	r3, #0
 8001788:	bf14      	ite	ne
 800178a:	2301      	movne	r3, #1
 800178c:	2300      	moveq	r3, #0
 800178e:	b2db      	uxtb	r3, r3
 8001790:	2b00      	cmp	r3, #0
 8001792:	d001      	beq.n	8001798 <_Z18SystemClock_Configv+0xa0>
  {
    Error_Handler();
 8001794:	f000 f946 	bl	8001a24 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001798:	230f      	movs	r3, #15
 800179a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800179c:	2302      	movs	r3, #2
 800179e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80017a0:	2300      	movs	r3, #0
 80017a2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80017a4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80017a8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80017aa:	2300      	movs	r3, #0
 80017ac:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80017ae:	f107 030c 	add.w	r3, r7, #12
 80017b2:	2102      	movs	r1, #2
 80017b4:	4618      	mov	r0, r3
 80017b6:	f001 fb93 	bl	8002ee0 <HAL_RCC_ClockConfig>
 80017ba:	4603      	mov	r3, r0
 80017bc:	2b00      	cmp	r3, #0
 80017be:	bf14      	ite	ne
 80017c0:	2301      	movne	r3, #1
 80017c2:	2300      	moveq	r3, #0
 80017c4:	b2db      	uxtb	r3, r3
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d001      	beq.n	80017ce <_Z18SystemClock_Configv+0xd6>
  {
    Error_Handler();
 80017ca:	f000 f92b 	bl	8001a24 <Error_Handler>
  }
}
 80017ce:	bf00      	nop
 80017d0:	3750      	adds	r7, #80	; 0x50
 80017d2:	46bd      	mov	sp, r7
 80017d4:	bd80      	pop	{r7, pc}
 80017d6:	bf00      	nop
 80017d8:	40023800 	.word	0x40023800
 80017dc:	40007000 	.word	0x40007000

080017e0 <_ZL13MX_TIM10_Initv>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 80017e4:	4b10      	ldr	r3, [pc, #64]	; (8001828 <_ZL13MX_TIM10_Initv+0x48>)
 80017e6:	4a11      	ldr	r2, [pc, #68]	; (800182c <_ZL13MX_TIM10_Initv+0x4c>)
 80017e8:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 80-1;
 80017ea:	4b0f      	ldr	r3, [pc, #60]	; (8001828 <_ZL13MX_TIM10_Initv+0x48>)
 80017ec:	224f      	movs	r2, #79	; 0x4f
 80017ee:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017f0:	4b0d      	ldr	r3, [pc, #52]	; (8001828 <_ZL13MX_TIM10_Initv+0x48>)
 80017f2:	2200      	movs	r2, #0
 80017f4:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 65535-1;
 80017f6:	4b0c      	ldr	r3, [pc, #48]	; (8001828 <_ZL13MX_TIM10_Initv+0x48>)
 80017f8:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80017fc:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017fe:	4b0a      	ldr	r3, [pc, #40]	; (8001828 <_ZL13MX_TIM10_Initv+0x48>)
 8001800:	2200      	movs	r2, #0
 8001802:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001804:	4b08      	ldr	r3, [pc, #32]	; (8001828 <_ZL13MX_TIM10_Initv+0x48>)
 8001806:	2200      	movs	r2, #0
 8001808:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 800180a:	4807      	ldr	r0, [pc, #28]	; (8001828 <_ZL13MX_TIM10_Initv+0x48>)
 800180c:	f001 fd64 	bl	80032d8 <HAL_TIM_Base_Init>
 8001810:	4603      	mov	r3, r0
 8001812:	2b00      	cmp	r3, #0
 8001814:	bf14      	ite	ne
 8001816:	2301      	movne	r3, #1
 8001818:	2300      	moveq	r3, #0
 800181a:	b2db      	uxtb	r3, r3
 800181c:	2b00      	cmp	r3, #0
 800181e:	d001      	beq.n	8001824 <_ZL13MX_TIM10_Initv+0x44>
  {
    Error_Handler();
 8001820:	f000 f900 	bl	8001a24 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 8001824:	bf00      	nop
 8001826:	bd80      	pop	{r7, pc}
 8001828:	20000208 	.word	0x20000208
 800182c:	40014400 	.word	0x40014400

08001830 <_ZL19MX_USART1_UART_Initv>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001834:	4b13      	ldr	r3, [pc, #76]	; (8001884 <_ZL19MX_USART1_UART_Initv+0x54>)
 8001836:	4a14      	ldr	r2, [pc, #80]	; (8001888 <_ZL19MX_USART1_UART_Initv+0x58>)
 8001838:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800183a:	4b12      	ldr	r3, [pc, #72]	; (8001884 <_ZL19MX_USART1_UART_Initv+0x54>)
 800183c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001840:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001842:	4b10      	ldr	r3, [pc, #64]	; (8001884 <_ZL19MX_USART1_UART_Initv+0x54>)
 8001844:	2200      	movs	r2, #0
 8001846:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001848:	4b0e      	ldr	r3, [pc, #56]	; (8001884 <_ZL19MX_USART1_UART_Initv+0x54>)
 800184a:	2200      	movs	r2, #0
 800184c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800184e:	4b0d      	ldr	r3, [pc, #52]	; (8001884 <_ZL19MX_USART1_UART_Initv+0x54>)
 8001850:	2200      	movs	r2, #0
 8001852:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001854:	4b0b      	ldr	r3, [pc, #44]	; (8001884 <_ZL19MX_USART1_UART_Initv+0x54>)
 8001856:	220c      	movs	r2, #12
 8001858:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800185a:	4b0a      	ldr	r3, [pc, #40]	; (8001884 <_ZL19MX_USART1_UART_Initv+0x54>)
 800185c:	2200      	movs	r2, #0
 800185e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001860:	4b08      	ldr	r3, [pc, #32]	; (8001884 <_ZL19MX_USART1_UART_Initv+0x54>)
 8001862:	2200      	movs	r2, #0
 8001864:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001866:	4807      	ldr	r0, [pc, #28]	; (8001884 <_ZL19MX_USART1_UART_Initv+0x54>)
 8001868:	f001 fe06 	bl	8003478 <HAL_UART_Init>
 800186c:	4603      	mov	r3, r0
 800186e:	2b00      	cmp	r3, #0
 8001870:	bf14      	ite	ne
 8001872:	2301      	movne	r3, #1
 8001874:	2300      	moveq	r3, #0
 8001876:	b2db      	uxtb	r3, r3
 8001878:	2b00      	cmp	r3, #0
 800187a:	d001      	beq.n	8001880 <_ZL19MX_USART1_UART_Initv+0x50>
  {
    Error_Handler();
 800187c:	f000 f8d2 	bl	8001a24 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001880:	bf00      	nop
 8001882:	bd80      	pop	{r7, pc}
 8001884:	20000250 	.word	0x20000250
 8001888:	40011000 	.word	0x40011000

0800188c <_ZL19MX_USART2_UART_Initv>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001890:	4b13      	ldr	r3, [pc, #76]	; (80018e0 <_ZL19MX_USART2_UART_Initv+0x54>)
 8001892:	4a14      	ldr	r2, [pc, #80]	; (80018e4 <_ZL19MX_USART2_UART_Initv+0x58>)
 8001894:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001896:	4b12      	ldr	r3, [pc, #72]	; (80018e0 <_ZL19MX_USART2_UART_Initv+0x54>)
 8001898:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800189c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800189e:	4b10      	ldr	r3, [pc, #64]	; (80018e0 <_ZL19MX_USART2_UART_Initv+0x54>)
 80018a0:	2200      	movs	r2, #0
 80018a2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80018a4:	4b0e      	ldr	r3, [pc, #56]	; (80018e0 <_ZL19MX_USART2_UART_Initv+0x54>)
 80018a6:	2200      	movs	r2, #0
 80018a8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80018aa:	4b0d      	ldr	r3, [pc, #52]	; (80018e0 <_ZL19MX_USART2_UART_Initv+0x54>)
 80018ac:	2200      	movs	r2, #0
 80018ae:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80018b0:	4b0b      	ldr	r3, [pc, #44]	; (80018e0 <_ZL19MX_USART2_UART_Initv+0x54>)
 80018b2:	220c      	movs	r2, #12
 80018b4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80018b6:	4b0a      	ldr	r3, [pc, #40]	; (80018e0 <_ZL19MX_USART2_UART_Initv+0x54>)
 80018b8:	2200      	movs	r2, #0
 80018ba:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80018bc:	4b08      	ldr	r3, [pc, #32]	; (80018e0 <_ZL19MX_USART2_UART_Initv+0x54>)
 80018be:	2200      	movs	r2, #0
 80018c0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80018c2:	4807      	ldr	r0, [pc, #28]	; (80018e0 <_ZL19MX_USART2_UART_Initv+0x54>)
 80018c4:	f001 fdd8 	bl	8003478 <HAL_UART_Init>
 80018c8:	4603      	mov	r3, r0
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	bf14      	ite	ne
 80018ce:	2301      	movne	r3, #1
 80018d0:	2300      	moveq	r3, #0
 80018d2:	b2db      	uxtb	r3, r3
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d001      	beq.n	80018dc <_ZL19MX_USART2_UART_Initv+0x50>
  {
    Error_Handler();
 80018d8:	f000 f8a4 	bl	8001a24 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80018dc:	bf00      	nop
 80018de:	bd80      	pop	{r7, pc}
 80018e0:	20000294 	.word	0x20000294
 80018e4:	40004400 	.word	0x40004400

080018e8 <_ZL19MX_USART6_UART_Initv>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 80018ec:	4b13      	ldr	r3, [pc, #76]	; (800193c <_ZL19MX_USART6_UART_Initv+0x54>)
 80018ee:	4a14      	ldr	r2, [pc, #80]	; (8001940 <_ZL19MX_USART6_UART_Initv+0x58>)
 80018f0:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 80018f2:	4b12      	ldr	r3, [pc, #72]	; (800193c <_ZL19MX_USART6_UART_Initv+0x54>)
 80018f4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80018f8:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80018fa:	4b10      	ldr	r3, [pc, #64]	; (800193c <_ZL19MX_USART6_UART_Initv+0x54>)
 80018fc:	2200      	movs	r2, #0
 80018fe:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8001900:	4b0e      	ldr	r3, [pc, #56]	; (800193c <_ZL19MX_USART6_UART_Initv+0x54>)
 8001902:	2200      	movs	r2, #0
 8001904:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8001906:	4b0d      	ldr	r3, [pc, #52]	; (800193c <_ZL19MX_USART6_UART_Initv+0x54>)
 8001908:	2200      	movs	r2, #0
 800190a:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 800190c:	4b0b      	ldr	r3, [pc, #44]	; (800193c <_ZL19MX_USART6_UART_Initv+0x54>)
 800190e:	220c      	movs	r2, #12
 8001910:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001912:	4b0a      	ldr	r3, [pc, #40]	; (800193c <_ZL19MX_USART6_UART_Initv+0x54>)
 8001914:	2200      	movs	r2, #0
 8001916:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8001918:	4b08      	ldr	r3, [pc, #32]	; (800193c <_ZL19MX_USART6_UART_Initv+0x54>)
 800191a:	2200      	movs	r2, #0
 800191c:	61da      	str	r2, [r3, #28]
  if (HAL_HalfDuplex_Init(&huart6) != HAL_OK)
 800191e:	4807      	ldr	r0, [pc, #28]	; (800193c <_ZL19MX_USART6_UART_Initv+0x54>)
 8001920:	f001 fdf7 	bl	8003512 <HAL_HalfDuplex_Init>
 8001924:	4603      	mov	r3, r0
 8001926:	2b00      	cmp	r3, #0
 8001928:	bf14      	ite	ne
 800192a:	2301      	movne	r3, #1
 800192c:	2300      	moveq	r3, #0
 800192e:	b2db      	uxtb	r3, r3
 8001930:	2b00      	cmp	r3, #0
 8001932:	d001      	beq.n	8001938 <_ZL19MX_USART6_UART_Initv+0x50>
  {
    Error_Handler();
 8001934:	f000 f876 	bl	8001a24 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8001938:	bf00      	nop
 800193a:	bd80      	pop	{r7, pc}
 800193c:	200002d8 	.word	0x200002d8
 8001940:	40011400 	.word	0x40011400

08001944 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	b08a      	sub	sp, #40	; 0x28
 8001948:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800194a:	f107 0314 	add.w	r3, r7, #20
 800194e:	2200      	movs	r2, #0
 8001950:	601a      	str	r2, [r3, #0]
 8001952:	605a      	str	r2, [r3, #4]
 8001954:	609a      	str	r2, [r3, #8]
 8001956:	60da      	str	r2, [r3, #12]
 8001958:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800195a:	2300      	movs	r3, #0
 800195c:	613b      	str	r3, [r7, #16]
 800195e:	4b2d      	ldr	r3, [pc, #180]	; (8001a14 <_ZL12MX_GPIO_Initv+0xd0>)
 8001960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001962:	4a2c      	ldr	r2, [pc, #176]	; (8001a14 <_ZL12MX_GPIO_Initv+0xd0>)
 8001964:	f043 0304 	orr.w	r3, r3, #4
 8001968:	6313      	str	r3, [r2, #48]	; 0x30
 800196a:	4b2a      	ldr	r3, [pc, #168]	; (8001a14 <_ZL12MX_GPIO_Initv+0xd0>)
 800196c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800196e:	f003 0304 	and.w	r3, r3, #4
 8001972:	613b      	str	r3, [r7, #16]
 8001974:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001976:	2300      	movs	r3, #0
 8001978:	60fb      	str	r3, [r7, #12]
 800197a:	4b26      	ldr	r3, [pc, #152]	; (8001a14 <_ZL12MX_GPIO_Initv+0xd0>)
 800197c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800197e:	4a25      	ldr	r2, [pc, #148]	; (8001a14 <_ZL12MX_GPIO_Initv+0xd0>)
 8001980:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001984:	6313      	str	r3, [r2, #48]	; 0x30
 8001986:	4b23      	ldr	r3, [pc, #140]	; (8001a14 <_ZL12MX_GPIO_Initv+0xd0>)
 8001988:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800198a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800198e:	60fb      	str	r3, [r7, #12]
 8001990:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001992:	2300      	movs	r3, #0
 8001994:	60bb      	str	r3, [r7, #8]
 8001996:	4b1f      	ldr	r3, [pc, #124]	; (8001a14 <_ZL12MX_GPIO_Initv+0xd0>)
 8001998:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800199a:	4a1e      	ldr	r2, [pc, #120]	; (8001a14 <_ZL12MX_GPIO_Initv+0xd0>)
 800199c:	f043 0301 	orr.w	r3, r3, #1
 80019a0:	6313      	str	r3, [r2, #48]	; 0x30
 80019a2:	4b1c      	ldr	r3, [pc, #112]	; (8001a14 <_ZL12MX_GPIO_Initv+0xd0>)
 80019a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019a6:	f003 0301 	and.w	r3, r3, #1
 80019aa:	60bb      	str	r3, [r7, #8]
 80019ac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80019ae:	2300      	movs	r3, #0
 80019b0:	607b      	str	r3, [r7, #4]
 80019b2:	4b18      	ldr	r3, [pc, #96]	; (8001a14 <_ZL12MX_GPIO_Initv+0xd0>)
 80019b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019b6:	4a17      	ldr	r2, [pc, #92]	; (8001a14 <_ZL12MX_GPIO_Initv+0xd0>)
 80019b8:	f043 0302 	orr.w	r3, r3, #2
 80019bc:	6313      	str	r3, [r2, #48]	; 0x30
 80019be:	4b15      	ldr	r3, [pc, #84]	; (8001a14 <_ZL12MX_GPIO_Initv+0xd0>)
 80019c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019c2:	f003 0302 	and.w	r3, r3, #2
 80019c6:	607b      	str	r3, [r7, #4]
 80019c8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80019ca:	2200      	movs	r2, #0
 80019cc:	2120      	movs	r1, #32
 80019ce:	4812      	ldr	r0, [pc, #72]	; (8001a18 <_ZL12MX_GPIO_Initv+0xd4>)
 80019d0:	f000 fff4 	bl	80029bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80019d4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80019d8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80019da:	4b10      	ldr	r3, [pc, #64]	; (8001a1c <_ZL12MX_GPIO_Initv+0xd8>)
 80019dc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019de:	2300      	movs	r3, #0
 80019e0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80019e2:	f107 0314 	add.w	r3, r7, #20
 80019e6:	4619      	mov	r1, r3
 80019e8:	480d      	ldr	r0, [pc, #52]	; (8001a20 <_ZL12MX_GPIO_Initv+0xdc>)
 80019ea:	f000 fe63 	bl	80026b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80019ee:	2320      	movs	r3, #32
 80019f0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019f2:	2301      	movs	r3, #1
 80019f4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019f6:	2300      	movs	r3, #0
 80019f8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019fa:	2300      	movs	r3, #0
 80019fc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80019fe:	f107 0314 	add.w	r3, r7, #20
 8001a02:	4619      	mov	r1, r3
 8001a04:	4804      	ldr	r0, [pc, #16]	; (8001a18 <_ZL12MX_GPIO_Initv+0xd4>)
 8001a06:	f000 fe55 	bl	80026b4 <HAL_GPIO_Init>

}
 8001a0a:	bf00      	nop
 8001a0c:	3728      	adds	r7, #40	; 0x28
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	bd80      	pop	{r7, pc}
 8001a12:	bf00      	nop
 8001a14:	40023800 	.word	0x40023800
 8001a18:	40020000 	.word	0x40020000
 8001a1c:	10210000 	.word	0x10210000
 8001a20:	40020800 	.word	0x40020800

08001a24 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a24:	b480      	push	{r7}
 8001a26:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a28:	b672      	cpsid	i
}
 8001a2a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001a2c:	e7fe      	b.n	8001a2c <Error_Handler+0x8>

08001a2e <_ZN11flatbuffers12EndianScalarImEET_S1_>:
#if defined(_MSC_VER)
  #pragma warning(pop)
#endif


template<typename T> T EndianScalar(T t) {
 8001a2e:	b480      	push	{r7}
 8001a30:	b083      	sub	sp, #12
 8001a32:	af00      	add	r7, sp, #0
 8001a34:	6078      	str	r0, [r7, #4]
  #if FLATBUFFERS_LITTLEENDIAN
    return t;
 8001a36:	687b      	ldr	r3, [r7, #4]
  #else
    return EndianSwap(t);
  #endif
}
 8001a38:	4618      	mov	r0, r3
 8001a3a:	370c      	adds	r7, #12
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a42:	4770      	bx	lr

08001a44 <_ZN11flatbuffers10ReadScalarItEET_PKv>:

template<typename T>
// UBSAN: C++ aliasing type rules, see std::bit_cast<> for details.
__supress_ubsan__("alignment")
T ReadScalar(const void *p) {
 8001a44:	b580      	push	{r7, lr}
 8001a46:	b082      	sub	sp, #8
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]
  return EndianScalar(*reinterpret_cast<const T *>(p));
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	881b      	ldrh	r3, [r3, #0]
 8001a50:	4618      	mov	r0, r3
 8001a52:	f000 f8fc 	bl	8001c4e <_ZN11flatbuffers12EndianScalarItEET_S1_>
 8001a56:	4603      	mov	r3, r0
}
 8001a58:	4618      	mov	r0, r3
 8001a5a:	3708      	adds	r7, #8
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	bd80      	pop	{r7, pc}

08001a60 <_ZN11flatbuffers10ReadScalarImEET_PKv>:
T ReadScalar(const void *p) {
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b082      	sub	sp, #8
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]
  return EndianScalar(*reinterpret_cast<const T *>(p));
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	4618      	mov	r0, r3
 8001a6e:	f7ff ffde 	bl	8001a2e <_ZN11flatbuffers12EndianScalarImEET_S1_>
 8001a72:	4603      	mov	r3, r0
}
 8001a74:	4618      	mov	r0, r3
 8001a76:	3708      	adds	r7, #8
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	bd80      	pop	{r7, pc}

08001a7c <_ZN11flatbuffers10ReadScalarIlEET_PKv>:
T ReadScalar(const void *p) {
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	b082      	sub	sp, #8
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	6078      	str	r0, [r7, #4]
  return EndianScalar(*reinterpret_cast<const T *>(p));
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	4618      	mov	r0, r3
 8001a8a:	f000 f8d5 	bl	8001c38 <_ZN11flatbuffers12EndianScalarIlEET_S1_>
 8001a8e:	4603      	mov	r3, r0
}
 8001a90:	4618      	mov	r0, r3
 8001a92:	3708      	adds	r7, #8
 8001a94:	46bd      	mov	sp, r7
 8001a96:	bd80      	pop	{r7, pc}

08001a98 <_ZNK11flatbuffers5Table8GetFieldImEET_tS2_>:

  template<typename T> T GetField(voffset_t field, T defaultval) const {
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b086      	sub	sp, #24
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	60f8      	str	r0, [r7, #12]
 8001aa0:	460b      	mov	r3, r1
 8001aa2:	607a      	str	r2, [r7, #4]
 8001aa4:	817b      	strh	r3, [r7, #10]
    auto field_offset = GetOptionalFieldOffset(field);
 8001aa6:	897b      	ldrh	r3, [r7, #10]
 8001aa8:	4619      	mov	r1, r3
 8001aaa:	68f8      	ldr	r0, [r7, #12]
 8001aac:	f7ff fb1c 	bl	80010e8 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
 8001ab0:	4603      	mov	r3, r0
 8001ab2:	82fb      	strh	r3, [r7, #22]
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
 8001ab4:	8afb      	ldrh	r3, [r7, #22]
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d007      	beq.n	8001aca <_ZNK11flatbuffers5Table8GetFieldImEET_tS2_+0x32>
 8001aba:	68fa      	ldr	r2, [r7, #12]
 8001abc:	8afb      	ldrh	r3, [r7, #22]
 8001abe:	4413      	add	r3, r2
 8001ac0:	4618      	mov	r0, r3
 8001ac2:	f7ff ffcd 	bl	8001a60 <_ZN11flatbuffers10ReadScalarImEET_PKv>
 8001ac6:	4603      	mov	r3, r0
 8001ac8:	e000      	b.n	8001acc <_ZNK11flatbuffers5Table8GetFieldImEET_tS2_+0x34>
 8001aca:	687b      	ldr	r3, [r7, #4]
  }
 8001acc:	4618      	mov	r0, r3
 8001ace:	3718      	adds	r7, #24
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	bd80      	pop	{r7, pc}

08001ad4 <_ZN11flatbuffers7GetRootIN6tflite5ModelEEEPKT_PKv>:
template<typename T> const T *GetRoot(const void *buf) {
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	b082      	sub	sp, #8
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	6078      	str	r0, [r7, #4]
  return GetMutableRoot<T>(const_cast<void *>(buf));
 8001adc:	6878      	ldr	r0, [r7, #4]
 8001ade:	f000 f8c2 	bl	8001c66 <_ZN11flatbuffers14GetMutableRootIN6tflite5ModelEEEPT_Pv>
 8001ae2:	4603      	mov	r3, r0
}
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	3708      	adds	r7, #8
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	bd80      	pop	{r7, pc}

08001aec <_ZNSt12_Vector_baseISt10unique_ptrI14TfLiteDelegatePFvPS1_EESaIS5_EE12_Vector_implC1Ev>:
	_Vector_impl() _GLIBCXX_NOEXCEPT_IF(
 8001aec:	b580      	push	{r7, lr}
 8001aee:	b082      	sub	sp, #8
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 8001af4:	6878      	ldr	r0, [r7, #4]
 8001af6:	f000 f8c8 	bl	8001c8a <_ZNSaISt10unique_ptrI14TfLiteDelegatePFvPS0_EEEC1Ev>
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	4618      	mov	r0, r3
 8001afe:	f000 f8d0 	bl	8001ca2 <_ZNSt12_Vector_baseISt10unique_ptrI14TfLiteDelegatePFvPS1_EESaIS5_EE17_Vector_impl_dataC1Ev>
	{ }
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	4618      	mov	r0, r3
 8001b06:	3708      	adds	r7, #8
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	bd80      	pop	{r7, pc}

08001b0c <_ZN6tflite10OpResolverC1Ev>:
class OpResolver {
 8001b0c:	b480      	push	{r7}
 8001b0e:	b083      	sub	sp, #12
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	6078      	str	r0, [r7, #4]
 8001b14:	4a04      	ldr	r2, [pc, #16]	; (8001b28 <_ZN6tflite10OpResolverC1Ev+0x1c>)
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	601a      	str	r2, [r3, #0]
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	4618      	mov	r0, r3
 8001b1e:	370c      	adds	r7, #12
 8001b20:	46bd      	mov	sp, r7
 8001b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b26:	4770      	bx	lr
 8001b28:	08018314 	.word	0x08018314

08001b2c <_ZN6tflite15MicroOpResolverC1Ev>:
class MicroOpResolver : public OpResolver {
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	b082      	sub	sp, #8
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	6078      	str	r0, [r7, #4]
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	4618      	mov	r0, r3
 8001b38:	f7ff ffe8 	bl	8001b0c <_ZN6tflite10OpResolverC1Ev>
 8001b3c:	4a03      	ldr	r2, [pc, #12]	; (8001b4c <_ZN6tflite15MicroOpResolverC1Ev+0x20>)
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	601a      	str	r2, [r3, #0]
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	4618      	mov	r0, r3
 8001b46:	3708      	adds	r7, #8
 8001b48:	46bd      	mov	sp, r7
 8001b4a:	bd80      	pop	{r7, pc}
 8001b4c:	080182e8 	.word	0x080182e8

08001b50 <_ZN6tflite22MicroMutableOpResolverILj4EEC1EPNS_13ErrorReporterE>:
template <unsigned int tOpCount>
class MicroMutableOpResolver : public MicroOpResolver {
 public:
  TF_LITE_REMOVE_VIRTUAL_DELETE

  explicit MicroMutableOpResolver(ErrorReporter* error_reporter = nullptr)
 8001b50:	b580      	push	{r7, lr}
 8001b52:	b082      	sub	sp, #8
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	6078      	str	r0, [r7, #4]
 8001b58:	6039      	str	r1, [r7, #0]
      : error_reporter_(error_reporter) {}
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	f7ff ffe5 	bl	8001b2c <_ZN6tflite15MicroOpResolverC1Ev>
 8001b62:	4a0a      	ldr	r2, [pc, #40]	; (8001b8c <_ZN6tflite22MicroMutableOpResolverILj4EEC1EPNS_13ErrorReporterE+0x3c>)
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	601a      	str	r2, [r3, #0]
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	2200      	movs	r2, #0
 8001b74:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	683a      	ldr	r2, [r7, #0]
 8001b7c:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	4618      	mov	r0, r3
 8001b84:	3708      	adds	r7, #8
 8001b86:	46bd      	mov	sp, r7
 8001b88:	bd80      	pop	{r7, pc}
 8001b8a:	bf00      	nop
 8001b8c:	080182bc 	.word	0x080182bc

08001b90 <_ZN6tflite22MicroMutableOpResolverILj4EE18AddDepthwiseConv2DEv>:
  TfLiteStatus AddDepthToSpace() {
    return AddBuiltin(BuiltinOperator_DEPTH_TO_SPACE,
                      tflite::Register_DEPTH_TO_SPACE(), ParseDepthToSpace);
  }

  TfLiteStatus AddDepthwiseConv2D() {
 8001b90:	b580      	push	{r7, lr}
 8001b92:	b08a      	sub	sp, #40	; 0x28
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	6078      	str	r0, [r7, #4]
    return AddBuiltin(BuiltinOperator_DEPTHWISE_CONV_2D,
                      Register_DEPTHWISE_CONV_2D(), ParseDepthwiseConv2D);
 8001b98:	f107 0308 	add.w	r3, r7, #8
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	f00a fac7 	bl	800c130 <_ZN6tflite26Register_DEPTHWISE_CONV_2DEv>
 8001ba2:	f107 0208 	add.w	r2, r7, #8
 8001ba6:	4b05      	ldr	r3, [pc, #20]	; (8001bbc <_ZN6tflite22MicroMutableOpResolverILj4EE18AddDepthwiseConv2DEv+0x2c>)
 8001ba8:	2104      	movs	r1, #4
 8001baa:	6878      	ldr	r0, [r7, #4]
 8001bac:	f000 f88e 	bl	8001ccc <_ZN6tflite22MicroMutableOpResolverILj4EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE>
 8001bb0:	4603      	mov	r3, r0
  }
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	3728      	adds	r7, #40	; 0x28
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	bd80      	pop	{r7, pc}
 8001bba:	bf00      	nop
 8001bbc:	080041f5 	.word	0x080041f5

08001bc0 <_ZN6tflite22MicroMutableOpResolverILj4EE17AddFullyConnectedERK18TfLiteRegistration>:
  TfLiteStatus AddFloorMod() {
    return AddBuiltin(BuiltinOperator_FLOOR_MOD, tflite::Register_FLOOR_MOD(),
                      ParseFloorMod);
  }

  TfLiteStatus AddFullyConnected(
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	b082      	sub	sp, #8
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]
 8001bc8:	6039      	str	r1, [r7, #0]
      const TfLiteRegistration& registration = Register_FULLY_CONNECTED()) {
    return AddBuiltin(BuiltinOperator_FULLY_CONNECTED, registration,
                      ParseFullyConnected);
 8001bca:	4b05      	ldr	r3, [pc, #20]	; (8001be0 <_ZN6tflite22MicroMutableOpResolverILj4EE17AddFullyConnectedERK18TfLiteRegistration+0x20>)
 8001bcc:	683a      	ldr	r2, [r7, #0]
 8001bce:	2109      	movs	r1, #9
 8001bd0:	6878      	ldr	r0, [r7, #4]
 8001bd2:	f000 f87b 	bl	8001ccc <_ZN6tflite22MicroMutableOpResolverILj4EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE>
 8001bd6:	4603      	mov	r3, r0
  }
 8001bd8:	4618      	mov	r0, r3
 8001bda:	3708      	adds	r7, #8
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	bd80      	pop	{r7, pc}
 8001be0:	0800434d 	.word	0x0800434d

08001be4 <_ZN6tflite22MicroMutableOpResolverILj4EE10AddSoftmaxERK18TfLiteRegistration>:
  TfLiteStatus AddSin() {
    return AddBuiltin(BuiltinOperator_SIN, tflite::ops::micro::Register_SIN(),
                      ParseSin);
  }

  TfLiteStatus AddSoftmax(
 8001be4:	b580      	push	{r7, lr}
 8001be6:	b082      	sub	sp, #8
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	6078      	str	r0, [r7, #4]
 8001bec:	6039      	str	r1, [r7, #0]
      const TfLiteRegistration& registration = Register_SOFTMAX()) {
    return AddBuiltin(BuiltinOperator_SOFTMAX, registration, ParseSoftmax);
 8001bee:	4b05      	ldr	r3, [pc, #20]	; (8001c04 <_ZN6tflite22MicroMutableOpResolverILj4EE10AddSoftmaxERK18TfLiteRegistration+0x20>)
 8001bf0:	683a      	ldr	r2, [r7, #0]
 8001bf2:	2119      	movs	r1, #25
 8001bf4:	6878      	ldr	r0, [r7, #4]
 8001bf6:	f000 f869 	bl	8001ccc <_ZN6tflite22MicroMutableOpResolverILj4EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE>
 8001bfa:	4603      	mov	r3, r0
  }
 8001bfc:	4618      	mov	r0, r3
 8001bfe:	3708      	adds	r7, #8
 8001c00:	46bd      	mov	sp, r7
 8001c02:	bd80      	pop	{r7, pc}
 8001c04:	08004585 	.word	0x08004585

08001c08 <_ZN6tflite22MicroMutableOpResolverILj4EE10AddReshapeEv>:
  TfLiteStatus AddReshape() {
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	b08a      	sub	sp, #40	; 0x28
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	6078      	str	r0, [r7, #4]
                      tflite::ops::micro::Register_RESHAPE(), ParseReshape);
 8001c10:	f107 0308 	add.w	r3, r7, #8
 8001c14:	4618      	mov	r0, r3
 8001c16:	f00c fb85 	bl	800e324 <_ZN6tflite3ops5micro16Register_RESHAPEEv>
 8001c1a:	f107 0208 	add.w	r2, r7, #8
 8001c1e:	4b05      	ldr	r3, [pc, #20]	; (8001c34 <_ZN6tflite22MicroMutableOpResolverILj4EE10AddReshapeEv+0x2c>)
 8001c20:	2116      	movs	r1, #22
 8001c22:	6878      	ldr	r0, [r7, #4]
 8001c24:	f000 f852 	bl	8001ccc <_ZN6tflite22MicroMutableOpResolverILj4EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE>
 8001c28:	4603      	mov	r3, r0
  }
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	3728      	adds	r7, #40	; 0x28
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	bd80      	pop	{r7, pc}
 8001c32:	bf00      	nop
 8001c34:	08004489 	.word	0x08004489

08001c38 <_ZN11flatbuffers12EndianScalarIlEET_S1_>:
template<typename T> T EndianScalar(T t) {
 8001c38:	b480      	push	{r7}
 8001c3a:	b083      	sub	sp, #12
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6078      	str	r0, [r7, #4]
    return t;
 8001c40:	687b      	ldr	r3, [r7, #4]
}
 8001c42:	4618      	mov	r0, r3
 8001c44:	370c      	adds	r7, #12
 8001c46:	46bd      	mov	sp, r7
 8001c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4c:	4770      	bx	lr

08001c4e <_ZN11flatbuffers12EndianScalarItEET_S1_>:
template<typename T> T EndianScalar(T t) {
 8001c4e:	b480      	push	{r7}
 8001c50:	b083      	sub	sp, #12
 8001c52:	af00      	add	r7, sp, #0
 8001c54:	4603      	mov	r3, r0
 8001c56:	80fb      	strh	r3, [r7, #6]
    return t;
 8001c58:	88fb      	ldrh	r3, [r7, #6]
}
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	370c      	adds	r7, #12
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c64:	4770      	bx	lr

08001c66 <_ZN11flatbuffers14GetMutableRootIN6tflite5ModelEEEPT_Pv>:
template<typename T> T *GetMutableRoot(void *buf) {
 8001c66:	b580      	push	{r7, lr}
 8001c68:	b082      	sub	sp, #8
 8001c6a:	af00      	add	r7, sp, #0
 8001c6c:	6078      	str	r0, [r7, #4]
  EndianCheck();
 8001c6e:	f7ff fa11 	bl	8001094 <_ZN11flatbuffers11EndianCheckEv>
      EndianScalar(*reinterpret_cast<uoffset_t *>(buf)));
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	4618      	mov	r0, r3
 8001c78:	f7ff fed9 	bl	8001a2e <_ZN11flatbuffers12EndianScalarImEET_S1_>
 8001c7c:	4602      	mov	r2, r0
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	4413      	add	r3, r2
}
 8001c82:	4618      	mov	r0, r3
 8001c84:	3708      	adds	r7, #8
 8001c86:	46bd      	mov	sp, r7
 8001c88:	bd80      	pop	{r7, pc}

08001c8a <_ZNSaISt10unique_ptrI14TfLiteDelegatePFvPS0_EEEC1Ev>:
#endif

      // _GLIBCXX_RESOLVE_LIB_DEFECTS
      // 3035. std::allocator's constructors should be constexpr
      _GLIBCXX20_CONSTEXPR
      allocator() _GLIBCXX_NOTHROW { }
 8001c8a:	b580      	push	{r7, lr}
 8001c8c:	b082      	sub	sp, #8
 8001c8e:	af00      	add	r7, sp, #0
 8001c90:	6078      	str	r0, [r7, #4]
 8001c92:	6878      	ldr	r0, [r7, #4]
 8001c94:	f000 f8a8 	bl	8001de8 <_ZN9__gnu_cxx13new_allocatorISt10unique_ptrI14TfLiteDelegatePFvPS2_EEEC1Ev>
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	3708      	adds	r7, #8
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	bd80      	pop	{r7, pc}

08001ca2 <_ZNSt12_Vector_baseISt10unique_ptrI14TfLiteDelegatePFvPS1_EESaIS5_EE17_Vector_impl_dataC1Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
 8001ca2:	b480      	push	{r7}
 8001ca4:	b083      	sub	sp, #12
 8001ca6:	af00      	add	r7, sp, #0
 8001ca8:	6078      	str	r0, [r7, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	2200      	movs	r2, #0
 8001cae:	601a      	str	r2, [r3, #0]
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	605a      	str	r2, [r3, #4]
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	2200      	movs	r2, #0
 8001cba:	609a      	str	r2, [r3, #8]
	{ }
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	370c      	adds	r7, #12
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc8:	4770      	bx	lr
	...

08001ccc <_ZN6tflite22MicroMutableOpResolverILj4EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE>:
  }

  unsigned int GetRegistrationLength() { return registrations_len_; }

 private:
  TfLiteStatus AddBuiltin(tflite::BuiltinOperator op,
 8001ccc:	b5b0      	push	{r4, r5, r7, lr}
 8001cce:	b084      	sub	sp, #16
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	60f8      	str	r0, [r7, #12]
 8001cd4:	607a      	str	r2, [r7, #4]
 8001cd6:	603b      	str	r3, [r7, #0]
 8001cd8:	460b      	mov	r3, r1
 8001cda:	72fb      	strb	r3, [r7, #11]
                          const TfLiteRegistration& registration,
                          MicroOpResolver::BuiltinParseFunction parser) {
    if (op == BuiltinOperator_CUSTOM) {
 8001cdc:	7afb      	ldrb	r3, [r7, #11]
 8001cde:	2b20      	cmp	r3, #32
 8001ce0:	d10d      	bne.n	8001cfe <_ZN6tflite22MicroMutableOpResolverILj4EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE+0x32>
      if (error_reporter_ != nullptr) {
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d006      	beq.n	8001cfa <_ZN6tflite22MicroMutableOpResolverILj4EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE+0x2e>
        TF_LITE_REPORT_ERROR(error_reporter_,
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8001cf2:	493a      	ldr	r1, [pc, #232]	; (8001ddc <_ZN6tflite22MicroMutableOpResolverILj4EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE+0x110>)
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	f001 ff8f 	bl	8003c18 <_ZN6tflite13ErrorReporter6ReportEPKcz>
                             "Invalid parameter BuiltinOperator_CUSTOM to the "
                             "AddBuiltin function.");
      }
      return kTfLiteError;
 8001cfa:	2301      	movs	r3, #1
 8001cfc:	e06a      	b.n	8001dd4 <_ZN6tflite22MicroMutableOpResolverILj4EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE+0x108>
    }

    if (FindOp(op) != nullptr) {
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	3318      	adds	r3, #24
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	7afa      	ldrb	r2, [r7, #11]
 8001d08:	4611      	mov	r1, r2
 8001d0a:	68f8      	ldr	r0, [r7, #12]
 8001d0c:	4798      	blx	r3
 8001d0e:	4603      	mov	r3, r0
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	bf14      	ite	ne
 8001d14:	2301      	movne	r3, #1
 8001d16:	2300      	moveq	r3, #0
 8001d18:	b2db      	uxtb	r3, r3
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d00e      	beq.n	8001d3c <_ZN6tflite22MicroMutableOpResolverILj4EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE+0x70>
      if (error_reporter_ != nullptr) {
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d007      	beq.n	8001d38 <_ZN6tflite22MicroMutableOpResolverILj4EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE+0x6c>
        TF_LITE_REPORT_ERROR(error_reporter_,
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8001d2e:	7afa      	ldrb	r2, [r7, #11]
 8001d30:	492b      	ldr	r1, [pc, #172]	; (8001de0 <_ZN6tflite22MicroMutableOpResolverILj4EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE+0x114>)
 8001d32:	4618      	mov	r0, r3
 8001d34:	f001 ff70 	bl	8003c18 <_ZN6tflite13ErrorReporter6ReportEPKcz>
                             "Calling AddBuiltin with the same op more than "
                             "once is not supported (Op: #%d).",
                             op);
      }
      return kTfLiteError;
 8001d38:	2301      	movs	r3, #1
 8001d3a:	e04b      	b.n	8001dd4 <_ZN6tflite22MicroMutableOpResolverILj4EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE+0x108>
    }

    if (registrations_len_ >= tOpCount) {
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001d42:	2b03      	cmp	r3, #3
 8001d44:	d90e      	bls.n	8001d64 <_ZN6tflite22MicroMutableOpResolverILj4EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE+0x98>
      if (error_reporter_) {
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d007      	beq.n	8001d60 <_ZN6tflite22MicroMutableOpResolverILj4EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE+0x94>
        TF_LITE_REPORT_ERROR(error_reporter_,
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	f8d3 00a0 	ldr.w	r0, [r3, #160]	; 0xa0
 8001d56:	7afa      	ldrb	r2, [r7, #11]
 8001d58:	2304      	movs	r3, #4
 8001d5a:	4922      	ldr	r1, [pc, #136]	; (8001de4 <_ZN6tflite22MicroMutableOpResolverILj4EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE+0x118>)
 8001d5c:	f001 ff5c 	bl	8003c18 <_ZN6tflite13ErrorReporter6ReportEPKcz>
                             "Couldn't register builtin op #%d, resolver size "
                             "is too small (%d).",
                             op, tOpCount);
      }
      return kTfLiteError;
 8001d60:	2301      	movs	r3, #1
 8001d62:	e037      	b.n	8001dd4 <_ZN6tflite22MicroMutableOpResolverILj4EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE+0x108>
    }

    registrations_[registrations_len_] = registration;
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001d6a:	68fa      	ldr	r2, [r7, #12]
 8001d6c:	015b      	lsls	r3, r3, #5
 8001d6e:	4413      	add	r3, r2
 8001d70:	687a      	ldr	r2, [r7, #4]
 8001d72:	1d1c      	adds	r4, r3, #4
 8001d74:	4615      	mov	r5, r2
 8001d76:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001d78:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001d7a:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001d7e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    // Strictly speaking, the builtin_code is not necessary for TFLM but filling
    // it in regardless.
    registrations_[registrations_len_].builtin_code = op;
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001d88:	7afa      	ldrb	r2, [r7, #11]
 8001d8a:	68f9      	ldr	r1, [r7, #12]
 8001d8c:	015b      	lsls	r3, r3, #5
 8001d8e:	440b      	add	r3, r1
 8001d90:	3318      	adds	r3, #24
 8001d92:	601a      	str	r2, [r3, #0]
    registrations_len_++;
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001d9a:	1c5a      	adds	r2, r3, #1
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    builtin_codes_[num_buitin_ops_] = op;
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001da8:	68fa      	ldr	r2, [r7, #12]
 8001daa:	4413      	add	r3, r2
 8001dac:	7afa      	ldrb	r2, [r7, #11]
 8001dae:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
    builtin_parsers_[num_buitin_ops_] = parser;
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001db8:	68fa      	ldr	r2, [r7, #12]
 8001dba:	3322      	adds	r3, #34	; 0x22
 8001dbc:	009b      	lsls	r3, r3, #2
 8001dbe:	4413      	add	r3, r2
 8001dc0:	683a      	ldr	r2, [r7, #0]
 8001dc2:	605a      	str	r2, [r3, #4]
    num_buitin_ops_++;
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001dca:	1c5a      	adds	r2, r3, #1
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return kTfLiteOk;
 8001dd2:	2300      	movs	r3, #0
  }
 8001dd4:	4618      	mov	r0, r3
 8001dd6:	3710      	adds	r7, #16
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	bdb0      	pop	{r4, r5, r7, pc}
 8001ddc:	08013a24 	.word	0x08013a24
 8001de0:	08013a6c 	.word	0x08013a6c
 8001de4:	08013abc 	.word	0x08013abc

08001de8 <_ZN9__gnu_cxx13new_allocatorISt10unique_ptrI14TfLiteDelegatePFvPS2_EEEC1Ev>:
      // 2103. propagate_on_container_move_assignment
      typedef std::true_type propagate_on_container_move_assignment;
#endif

      _GLIBCXX20_CONSTEXPR
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8001de8:	b480      	push	{r7}
 8001dea:	b083      	sub	sp, #12
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	6078      	str	r0, [r7, #4]
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	4618      	mov	r0, r3
 8001df4:	370c      	adds	r7, #12
 8001df6:	46bd      	mov	sp, r7
 8001df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfc:	4770      	bx	lr

08001dfe <_ZNK6tflite22MicroMutableOpResolverILj4EE6FindOpENS_15BuiltinOperatorE>:
  const TfLiteRegistration* FindOp(tflite::BuiltinOperator op) const override {
 8001dfe:	b480      	push	{r7}
 8001e00:	b085      	sub	sp, #20
 8001e02:	af00      	add	r7, sp, #0
 8001e04:	6078      	str	r0, [r7, #4]
 8001e06:	460b      	mov	r3, r1
 8001e08:	70fb      	strb	r3, [r7, #3]
    if (op == BuiltinOperator_CUSTOM) return nullptr;
 8001e0a:	78fb      	ldrb	r3, [r7, #3]
 8001e0c:	2b20      	cmp	r3, #32
 8001e0e:	d101      	bne.n	8001e14 <_ZNK6tflite22MicroMutableOpResolverILj4EE6FindOpENS_15BuiltinOperatorE+0x16>
 8001e10:	2300      	movs	r3, #0
 8001e12:	e019      	b.n	8001e48 <_ZNK6tflite22MicroMutableOpResolverILj4EE6FindOpENS_15BuiltinOperatorE+0x4a>
    for (unsigned int i = 0; i < registrations_len_; ++i) {
 8001e14:	2300      	movs	r3, #0
 8001e16:	60fb      	str	r3, [r7, #12]
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001e1e:	68fa      	ldr	r2, [r7, #12]
 8001e20:	429a      	cmp	r2, r3
 8001e22:	d210      	bcs.n	8001e46 <_ZNK6tflite22MicroMutableOpResolverILj4EE6FindOpENS_15BuiltinOperatorE+0x48>
      const TfLiteRegistration& registration = registrations_[i];
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	015b      	lsls	r3, r3, #5
 8001e28:	687a      	ldr	r2, [r7, #4]
 8001e2a:	4413      	add	r3, r2
 8001e2c:	3304      	adds	r3, #4
 8001e2e:	60bb      	str	r3, [r7, #8]
      if (registration.builtin_code == op) {
 8001e30:	68bb      	ldr	r3, [r7, #8]
 8001e32:	695a      	ldr	r2, [r3, #20]
 8001e34:	78fb      	ldrb	r3, [r7, #3]
 8001e36:	429a      	cmp	r2, r3
 8001e38:	d101      	bne.n	8001e3e <_ZNK6tflite22MicroMutableOpResolverILj4EE6FindOpENS_15BuiltinOperatorE+0x40>
        return &registration;
 8001e3a:	68bb      	ldr	r3, [r7, #8]
 8001e3c:	e004      	b.n	8001e48 <_ZNK6tflite22MicroMutableOpResolverILj4EE6FindOpENS_15BuiltinOperatorE+0x4a>
    for (unsigned int i = 0; i < registrations_len_; ++i) {
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	3301      	adds	r3, #1
 8001e42:	60fb      	str	r3, [r7, #12]
 8001e44:	e7e8      	b.n	8001e18 <_ZNK6tflite22MicroMutableOpResolverILj4EE6FindOpENS_15BuiltinOperatorE+0x1a>
    return nullptr;
 8001e46:	2300      	movs	r3, #0
  }
 8001e48:	4618      	mov	r0, r3
 8001e4a:	3714      	adds	r7, #20
 8001e4c:	46bd      	mov	sp, r7
 8001e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e52:	4770      	bx	lr

08001e54 <_ZN6tflite22MicroMutableOpResolverILj4EED1Ev>:
class MicroMutableOpResolver : public MicroOpResolver {
 8001e54:	b580      	push	{r7, lr}
 8001e56:	b082      	sub	sp, #8
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	6078      	str	r0, [r7, #4]
 8001e5c:	4a05      	ldr	r2, [pc, #20]	; (8001e74 <_ZN6tflite22MicroMutableOpResolverILj4EED1Ev+0x20>)
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	601a      	str	r2, [r3, #0]
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	4618      	mov	r0, r3
 8001e66:	f7ff f9fd 	bl	8001264 <_ZN6tflite15MicroOpResolverD1Ev>
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	4618      	mov	r0, r3
 8001e6e:	3708      	adds	r7, #8
 8001e70:	46bd      	mov	sp, r7
 8001e72:	bd80      	pop	{r7, pc}
 8001e74:	080182bc 	.word	0x080182bc

08001e78 <_ZN6tflite22MicroMutableOpResolverILj4EED0Ev>:
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	b082      	sub	sp, #8
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	6078      	str	r0, [r7, #4]
 8001e80:	6878      	ldr	r0, [r7, #4]
 8001e82:	f7ff ffe7 	bl	8001e54 <_ZN6tflite22MicroMutableOpResolverILj4EED1Ev>
 8001e86:	21a4      	movs	r1, #164	; 0xa4
 8001e88:	6878      	ldr	r0, [r7, #4]
 8001e8a:	f00e fa02 	bl	8010292 <_ZdlPvj>
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	4618      	mov	r0, r3
 8001e92:	3708      	adds	r7, #8
 8001e94:	46bd      	mov	sp, r7
 8001e96:	bd80      	pop	{r7, pc}

08001e98 <_ZNK6tflite22MicroMutableOpResolverILj4EE6FindOpEPKc>:
  const TfLiteRegistration* FindOp(const char* op) const override {
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	b084      	sub	sp, #16
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	6078      	str	r0, [r7, #4]
 8001ea0:	6039      	str	r1, [r7, #0]
    for (unsigned int i = 0; i < registrations_len_; ++i) {
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	60fb      	str	r3, [r7, #12]
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001eac:	68fa      	ldr	r2, [r7, #12]
 8001eae:	429a      	cmp	r2, r3
 8001eb0:	d218      	bcs.n	8001ee4 <_ZNK6tflite22MicroMutableOpResolverILj4EE6FindOpEPKc+0x4c>
      const TfLiteRegistration& registration = registrations_[i];
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	015b      	lsls	r3, r3, #5
 8001eb6:	687a      	ldr	r2, [r7, #4]
 8001eb8:	4413      	add	r3, r2
 8001eba:	3304      	adds	r3, #4
 8001ebc:	60bb      	str	r3, [r7, #8]
      if ((registration.builtin_code == BuiltinOperator_CUSTOM) &&
 8001ebe:	68bb      	ldr	r3, [r7, #8]
 8001ec0:	695b      	ldr	r3, [r3, #20]
 8001ec2:	2b20      	cmp	r3, #32
 8001ec4:	d10a      	bne.n	8001edc <_ZNK6tflite22MicroMutableOpResolverILj4EE6FindOpEPKc+0x44>
          (strcmp(registration.custom_name, op) == 0)) {
 8001ec6:	68bb      	ldr	r3, [r7, #8]
 8001ec8:	699b      	ldr	r3, [r3, #24]
 8001eca:	6839      	ldr	r1, [r7, #0]
 8001ecc:	4618      	mov	r0, r3
 8001ece:	f7fe f9d7 	bl	8000280 <strcmp>
 8001ed2:	4603      	mov	r3, r0
      if ((registration.builtin_code == BuiltinOperator_CUSTOM) &&
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d101      	bne.n	8001edc <_ZNK6tflite22MicroMutableOpResolverILj4EE6FindOpEPKc+0x44>
        return &registration;
 8001ed8:	68bb      	ldr	r3, [r7, #8]
 8001eda:	e004      	b.n	8001ee6 <_ZNK6tflite22MicroMutableOpResolverILj4EE6FindOpEPKc+0x4e>
    for (unsigned int i = 0; i < registrations_len_; ++i) {
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	3301      	adds	r3, #1
 8001ee0:	60fb      	str	r3, [r7, #12]
 8001ee2:	e7e0      	b.n	8001ea6 <_ZNK6tflite22MicroMutableOpResolverILj4EE6FindOpEPKc+0xe>
    return nullptr;
 8001ee4:	2300      	movs	r3, #0
  }
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	3710      	adds	r7, #16
 8001eea:	46bd      	mov	sp, r7
 8001eec:	bd80      	pop	{r7, pc}

08001eee <_ZNK6tflite22MicroMutableOpResolverILj4EE15GetOpDataParserENS_15BuiltinOperatorE>:
  MicroOpResolver::BuiltinParseFunction GetOpDataParser(
 8001eee:	b580      	push	{r7, lr}
 8001ef0:	b084      	sub	sp, #16
 8001ef2:	af00      	add	r7, sp, #0
 8001ef4:	6078      	str	r0, [r7, #4]
 8001ef6:	460b      	mov	r3, r1
 8001ef8:	70fb      	strb	r3, [r7, #3]
    TFLITE_DCHECK(num_buitin_ops_ <= tOpCount);
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001f00:	2b04      	cmp	r3, #4
 8001f02:	d901      	bls.n	8001f08 <_ZNK6tflite22MicroMutableOpResolverILj4EE15GetOpDataParserENS_15BuiltinOperatorE+0x1a>
 8001f04:	f00e fc4b 	bl	801079e <abort>
    for (unsigned int i = 0; i < num_buitin_ops_; ++i) {
 8001f08:	2300      	movs	r3, #0
 8001f0a:	60fb      	str	r3, [r7, #12]
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001f12:	68fa      	ldr	r2, [r7, #12]
 8001f14:	429a      	cmp	r2, r3
 8001f16:	d212      	bcs.n	8001f3e <_ZNK6tflite22MicroMutableOpResolverILj4EE15GetOpDataParserENS_15BuiltinOperatorE+0x50>
      if (builtin_codes_[i] == op) return builtin_parsers_[i];
 8001f18:	687a      	ldr	r2, [r7, #4]
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	4413      	add	r3, r2
 8001f1e:	3388      	adds	r3, #136	; 0x88
 8001f20:	781b      	ldrb	r3, [r3, #0]
 8001f22:	78fa      	ldrb	r2, [r7, #3]
 8001f24:	429a      	cmp	r2, r3
 8001f26:	d106      	bne.n	8001f36 <_ZNK6tflite22MicroMutableOpResolverILj4EE15GetOpDataParserENS_15BuiltinOperatorE+0x48>
 8001f28:	687a      	ldr	r2, [r7, #4]
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	3322      	adds	r3, #34	; 0x22
 8001f2e:	009b      	lsls	r3, r3, #2
 8001f30:	4413      	add	r3, r2
 8001f32:	685b      	ldr	r3, [r3, #4]
 8001f34:	e004      	b.n	8001f40 <_ZNK6tflite22MicroMutableOpResolverILj4EE15GetOpDataParserENS_15BuiltinOperatorE+0x52>
    for (unsigned int i = 0; i < num_buitin_ops_; ++i) {
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	3301      	adds	r3, #1
 8001f3a:	60fb      	str	r3, [r7, #12]
 8001f3c:	e7e6      	b.n	8001f0c <_ZNK6tflite22MicroMutableOpResolverILj4EE15GetOpDataParserENS_15BuiltinOperatorE+0x1e>
    return nullptr;
 8001f3e:	2300      	movs	r3, #0
  }
 8001f40:	4618      	mov	r0, r3
 8001f42:	3710      	adds	r7, #16
 8001f44:	46bd      	mov	sp, r7
 8001f46:	bd80      	pop	{r7, pc}

08001f48 <_ZNSt14numeric_limitsIlE3minEv>:
    struct numeric_limits<long>
    {
      static _GLIBCXX_USE_CONSTEXPR bool is_specialized = true;

      static _GLIBCXX_CONSTEXPR long
      min() _GLIBCXX_USE_NOEXCEPT { return -__LONG_MAX__ - 1; }
 8001f48:	b480      	push	{r7}
 8001f4a:	af00      	add	r7, sp, #0
 8001f4c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8001f50:	4618      	mov	r0, r3
 8001f52:	46bd      	mov	sp, r7
 8001f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f58:	4770      	bx	lr

08001f5a <_ZNSt14numeric_limitsIlE3maxEv>:

      static _GLIBCXX_CONSTEXPR long
      max() _GLIBCXX_USE_NOEXCEPT { return __LONG_MAX__; }
 8001f5a:	b480      	push	{r7}
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8001f62:	4618      	mov	r0, r3
 8001f64:	46bd      	mov	sp, r7
 8001f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6a:	4770      	bx	lr

08001f6c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	b082      	sub	sp, #8
 8001f70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f72:	2300      	movs	r3, #0
 8001f74:	607b      	str	r3, [r7, #4]
 8001f76:	4b10      	ldr	r3, [pc, #64]	; (8001fb8 <HAL_MspInit+0x4c>)
 8001f78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f7a:	4a0f      	ldr	r2, [pc, #60]	; (8001fb8 <HAL_MspInit+0x4c>)
 8001f7c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f80:	6453      	str	r3, [r2, #68]	; 0x44
 8001f82:	4b0d      	ldr	r3, [pc, #52]	; (8001fb8 <HAL_MspInit+0x4c>)
 8001f84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f86:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f8a:	607b      	str	r3, [r7, #4]
 8001f8c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f8e:	2300      	movs	r3, #0
 8001f90:	603b      	str	r3, [r7, #0]
 8001f92:	4b09      	ldr	r3, [pc, #36]	; (8001fb8 <HAL_MspInit+0x4c>)
 8001f94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f96:	4a08      	ldr	r2, [pc, #32]	; (8001fb8 <HAL_MspInit+0x4c>)
 8001f98:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f9c:	6413      	str	r3, [r2, #64]	; 0x40
 8001f9e:	4b06      	ldr	r3, [pc, #24]	; (8001fb8 <HAL_MspInit+0x4c>)
 8001fa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fa2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fa6:	603b      	str	r3, [r7, #0]
 8001fa8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001faa:	2007      	movs	r0, #7
 8001fac:	f000 fb4e 	bl	800264c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001fb0:	bf00      	nop
 8001fb2:	3708      	adds	r7, #8
 8001fb4:	46bd      	mov	sp, r7
 8001fb6:	bd80      	pop	{r7, pc}
 8001fb8:	40023800 	.word	0x40023800

08001fbc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001fbc:	b480      	push	{r7}
 8001fbe:	b085      	sub	sp, #20
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM10)
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	4a0b      	ldr	r2, [pc, #44]	; (8001ff8 <HAL_TIM_Base_MspInit+0x3c>)
 8001fca:	4293      	cmp	r3, r2
 8001fcc:	d10d      	bne.n	8001fea <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM10_MspInit 0 */

  /* USER CODE END TIM10_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM10_CLK_ENABLE();
 8001fce:	2300      	movs	r3, #0
 8001fd0:	60fb      	str	r3, [r7, #12]
 8001fd2:	4b0a      	ldr	r3, [pc, #40]	; (8001ffc <HAL_TIM_Base_MspInit+0x40>)
 8001fd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fd6:	4a09      	ldr	r2, [pc, #36]	; (8001ffc <HAL_TIM_Base_MspInit+0x40>)
 8001fd8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001fdc:	6453      	str	r3, [r2, #68]	; 0x44
 8001fde:	4b07      	ldr	r3, [pc, #28]	; (8001ffc <HAL_TIM_Base_MspInit+0x40>)
 8001fe0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fe2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fe6:	60fb      	str	r3, [r7, #12]
 8001fe8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }

}
 8001fea:	bf00      	nop
 8001fec:	3714      	adds	r7, #20
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff4:	4770      	bx	lr
 8001ff6:	bf00      	nop
 8001ff8:	40014400 	.word	0x40014400
 8001ffc:	40023800 	.word	0x40023800

08002000 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002000:	b580      	push	{r7, lr}
 8002002:	b08e      	sub	sp, #56	; 0x38
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002008:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800200c:	2200      	movs	r2, #0
 800200e:	601a      	str	r2, [r3, #0]
 8002010:	605a      	str	r2, [r3, #4]
 8002012:	609a      	str	r2, [r3, #8]
 8002014:	60da      	str	r2, [r3, #12]
 8002016:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	4a4b      	ldr	r2, [pc, #300]	; (800214c <HAL_UART_MspInit+0x14c>)
 800201e:	4293      	cmp	r3, r2
 8002020:	d12d      	bne.n	800207e <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002022:	2300      	movs	r3, #0
 8002024:	623b      	str	r3, [r7, #32]
 8002026:	4b4a      	ldr	r3, [pc, #296]	; (8002150 <HAL_UART_MspInit+0x150>)
 8002028:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800202a:	4a49      	ldr	r2, [pc, #292]	; (8002150 <HAL_UART_MspInit+0x150>)
 800202c:	f043 0310 	orr.w	r3, r3, #16
 8002030:	6453      	str	r3, [r2, #68]	; 0x44
 8002032:	4b47      	ldr	r3, [pc, #284]	; (8002150 <HAL_UART_MspInit+0x150>)
 8002034:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002036:	f003 0310 	and.w	r3, r3, #16
 800203a:	623b      	str	r3, [r7, #32]
 800203c:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800203e:	2300      	movs	r3, #0
 8002040:	61fb      	str	r3, [r7, #28]
 8002042:	4b43      	ldr	r3, [pc, #268]	; (8002150 <HAL_UART_MspInit+0x150>)
 8002044:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002046:	4a42      	ldr	r2, [pc, #264]	; (8002150 <HAL_UART_MspInit+0x150>)
 8002048:	f043 0301 	orr.w	r3, r3, #1
 800204c:	6313      	str	r3, [r2, #48]	; 0x30
 800204e:	4b40      	ldr	r3, [pc, #256]	; (8002150 <HAL_UART_MspInit+0x150>)
 8002050:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002052:	f003 0301 	and.w	r3, r3, #1
 8002056:	61fb      	str	r3, [r7, #28]
 8002058:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800205a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800205e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002060:	2302      	movs	r3, #2
 8002062:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002064:	2300      	movs	r3, #0
 8002066:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002068:	2303      	movs	r3, #3
 800206a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800206c:	2307      	movs	r3, #7
 800206e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002070:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002074:	4619      	mov	r1, r3
 8002076:	4837      	ldr	r0, [pc, #220]	; (8002154 <HAL_UART_MspInit+0x154>)
 8002078:	f000 fb1c 	bl	80026b4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 800207c:	e062      	b.n	8002144 <HAL_UART_MspInit+0x144>
  else if(huart->Instance==USART2)
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	4a35      	ldr	r2, [pc, #212]	; (8002158 <HAL_UART_MspInit+0x158>)
 8002084:	4293      	cmp	r3, r2
 8002086:	d12c      	bne.n	80020e2 <HAL_UART_MspInit+0xe2>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002088:	2300      	movs	r3, #0
 800208a:	61bb      	str	r3, [r7, #24]
 800208c:	4b30      	ldr	r3, [pc, #192]	; (8002150 <HAL_UART_MspInit+0x150>)
 800208e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002090:	4a2f      	ldr	r2, [pc, #188]	; (8002150 <HAL_UART_MspInit+0x150>)
 8002092:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002096:	6413      	str	r3, [r2, #64]	; 0x40
 8002098:	4b2d      	ldr	r3, [pc, #180]	; (8002150 <HAL_UART_MspInit+0x150>)
 800209a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800209c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020a0:	61bb      	str	r3, [r7, #24]
 80020a2:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020a4:	2300      	movs	r3, #0
 80020a6:	617b      	str	r3, [r7, #20]
 80020a8:	4b29      	ldr	r3, [pc, #164]	; (8002150 <HAL_UART_MspInit+0x150>)
 80020aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020ac:	4a28      	ldr	r2, [pc, #160]	; (8002150 <HAL_UART_MspInit+0x150>)
 80020ae:	f043 0301 	orr.w	r3, r3, #1
 80020b2:	6313      	str	r3, [r2, #48]	; 0x30
 80020b4:	4b26      	ldr	r3, [pc, #152]	; (8002150 <HAL_UART_MspInit+0x150>)
 80020b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020b8:	f003 0301 	and.w	r3, r3, #1
 80020bc:	617b      	str	r3, [r7, #20]
 80020be:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80020c0:	230c      	movs	r3, #12
 80020c2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020c4:	2302      	movs	r3, #2
 80020c6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020c8:	2300      	movs	r3, #0
 80020ca:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020cc:	2303      	movs	r3, #3
 80020ce:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80020d0:	2307      	movs	r3, #7
 80020d2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020d4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80020d8:	4619      	mov	r1, r3
 80020da:	481e      	ldr	r0, [pc, #120]	; (8002154 <HAL_UART_MspInit+0x154>)
 80020dc:	f000 faea 	bl	80026b4 <HAL_GPIO_Init>
}
 80020e0:	e030      	b.n	8002144 <HAL_UART_MspInit+0x144>
  else if(huart->Instance==USART6)
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	4a1d      	ldr	r2, [pc, #116]	; (800215c <HAL_UART_MspInit+0x15c>)
 80020e8:	4293      	cmp	r3, r2
 80020ea:	d12b      	bne.n	8002144 <HAL_UART_MspInit+0x144>
    __HAL_RCC_USART6_CLK_ENABLE();
 80020ec:	2300      	movs	r3, #0
 80020ee:	613b      	str	r3, [r7, #16]
 80020f0:	4b17      	ldr	r3, [pc, #92]	; (8002150 <HAL_UART_MspInit+0x150>)
 80020f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020f4:	4a16      	ldr	r2, [pc, #88]	; (8002150 <HAL_UART_MspInit+0x150>)
 80020f6:	f043 0320 	orr.w	r3, r3, #32
 80020fa:	6453      	str	r3, [r2, #68]	; 0x44
 80020fc:	4b14      	ldr	r3, [pc, #80]	; (8002150 <HAL_UART_MspInit+0x150>)
 80020fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002100:	f003 0320 	and.w	r3, r3, #32
 8002104:	613b      	str	r3, [r7, #16]
 8002106:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002108:	2300      	movs	r3, #0
 800210a:	60fb      	str	r3, [r7, #12]
 800210c:	4b10      	ldr	r3, [pc, #64]	; (8002150 <HAL_UART_MspInit+0x150>)
 800210e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002110:	4a0f      	ldr	r2, [pc, #60]	; (8002150 <HAL_UART_MspInit+0x150>)
 8002112:	f043 0304 	orr.w	r3, r3, #4
 8002116:	6313      	str	r3, [r2, #48]	; 0x30
 8002118:	4b0d      	ldr	r3, [pc, #52]	; (8002150 <HAL_UART_MspInit+0x150>)
 800211a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800211c:	f003 0304 	and.w	r3, r3, #4
 8002120:	60fb      	str	r3, [r7, #12]
 8002122:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002124:	2340      	movs	r3, #64	; 0x40
 8002126:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002128:	2312      	movs	r3, #18
 800212a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800212c:	2300      	movs	r3, #0
 800212e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002130:	2303      	movs	r3, #3
 8002132:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8002134:	2308      	movs	r3, #8
 8002136:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002138:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800213c:	4619      	mov	r1, r3
 800213e:	4808      	ldr	r0, [pc, #32]	; (8002160 <HAL_UART_MspInit+0x160>)
 8002140:	f000 fab8 	bl	80026b4 <HAL_GPIO_Init>
}
 8002144:	bf00      	nop
 8002146:	3738      	adds	r7, #56	; 0x38
 8002148:	46bd      	mov	sp, r7
 800214a:	bd80      	pop	{r7, pc}
 800214c:	40011000 	.word	0x40011000
 8002150:	40023800 	.word	0x40023800
 8002154:	40020000 	.word	0x40020000
 8002158:	40004400 	.word	0x40004400
 800215c:	40011400 	.word	0x40011400
 8002160:	40020800 	.word	0x40020800

08002164 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002164:	b480      	push	{r7}
 8002166:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002168:	e7fe      	b.n	8002168 <NMI_Handler+0x4>

0800216a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800216a:	b480      	push	{r7}
 800216c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800216e:	e7fe      	b.n	800216e <HardFault_Handler+0x4>

08002170 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002170:	b480      	push	{r7}
 8002172:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002174:	e7fe      	b.n	8002174 <MemManage_Handler+0x4>

08002176 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002176:	b480      	push	{r7}
 8002178:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800217a:	e7fe      	b.n	800217a <BusFault_Handler+0x4>

0800217c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800217c:	b480      	push	{r7}
 800217e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002180:	e7fe      	b.n	8002180 <UsageFault_Handler+0x4>

08002182 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002182:	b480      	push	{r7}
 8002184:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002186:	bf00      	nop
 8002188:	46bd      	mov	sp, r7
 800218a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218e:	4770      	bx	lr

08002190 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002190:	b480      	push	{r7}
 8002192:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002194:	bf00      	nop
 8002196:	46bd      	mov	sp, r7
 8002198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219c:	4770      	bx	lr

0800219e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800219e:	b480      	push	{r7}
 80021a0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80021a2:	bf00      	nop
 80021a4:	46bd      	mov	sp, r7
 80021a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021aa:	4770      	bx	lr

080021ac <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80021ac:	b580      	push	{r7, lr}
 80021ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80021b0:	f000 f956 	bl	8002460 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80021b4:	bf00      	nop
 80021b6:	bd80      	pop	{r7, pc}

080021b8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80021b8:	b480      	push	{r7}
 80021ba:	af00      	add	r7, sp, #0
	return 1;
 80021bc:	2301      	movs	r3, #1
}
 80021be:	4618      	mov	r0, r3
 80021c0:	46bd      	mov	sp, r7
 80021c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c6:	4770      	bx	lr

080021c8 <_kill>:

int _kill(int pid, int sig)
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	b082      	sub	sp, #8
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	6078      	str	r0, [r7, #4]
 80021d0:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80021d2:	f00e fb0f 	bl	80107f4 <__errno>
 80021d6:	4603      	mov	r3, r0
 80021d8:	2216      	movs	r2, #22
 80021da:	601a      	str	r2, [r3, #0]
	return -1;
 80021dc:	f04f 33ff 	mov.w	r3, #4294967295
}
 80021e0:	4618      	mov	r0, r3
 80021e2:	3708      	adds	r7, #8
 80021e4:	46bd      	mov	sp, r7
 80021e6:	bd80      	pop	{r7, pc}

080021e8 <_exit>:

void _exit (int status)
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	b082      	sub	sp, #8
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80021f0:	f04f 31ff 	mov.w	r1, #4294967295
 80021f4:	6878      	ldr	r0, [r7, #4]
 80021f6:	f7ff ffe7 	bl	80021c8 <_kill>
	while (1) {}		/* Make sure we hang here */
 80021fa:	e7fe      	b.n	80021fa <_exit+0x12>

080021fc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80021fc:	b580      	push	{r7, lr}
 80021fe:	b086      	sub	sp, #24
 8002200:	af00      	add	r7, sp, #0
 8002202:	60f8      	str	r0, [r7, #12]
 8002204:	60b9      	str	r1, [r7, #8]
 8002206:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002208:	2300      	movs	r3, #0
 800220a:	617b      	str	r3, [r7, #20]
 800220c:	e00a      	b.n	8002224 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800220e:	f3af 8000 	nop.w
 8002212:	4601      	mov	r1, r0
 8002214:	68bb      	ldr	r3, [r7, #8]
 8002216:	1c5a      	adds	r2, r3, #1
 8002218:	60ba      	str	r2, [r7, #8]
 800221a:	b2ca      	uxtb	r2, r1
 800221c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800221e:	697b      	ldr	r3, [r7, #20]
 8002220:	3301      	adds	r3, #1
 8002222:	617b      	str	r3, [r7, #20]
 8002224:	697a      	ldr	r2, [r7, #20]
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	429a      	cmp	r2, r3
 800222a:	dbf0      	blt.n	800220e <_read+0x12>
	}

return len;
 800222c:	687b      	ldr	r3, [r7, #4]
}
 800222e:	4618      	mov	r0, r3
 8002230:	3718      	adds	r7, #24
 8002232:	46bd      	mov	sp, r7
 8002234:	bd80      	pop	{r7, pc}

08002236 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002236:	b580      	push	{r7, lr}
 8002238:	b086      	sub	sp, #24
 800223a:	af00      	add	r7, sp, #0
 800223c:	60f8      	str	r0, [r7, #12]
 800223e:	60b9      	str	r1, [r7, #8]
 8002240:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002242:	2300      	movs	r3, #0
 8002244:	617b      	str	r3, [r7, #20]
 8002246:	e009      	b.n	800225c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002248:	68bb      	ldr	r3, [r7, #8]
 800224a:	1c5a      	adds	r2, r3, #1
 800224c:	60ba      	str	r2, [r7, #8]
 800224e:	781b      	ldrb	r3, [r3, #0]
 8002250:	4618      	mov	r0, r3
 8002252:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002256:	697b      	ldr	r3, [r7, #20]
 8002258:	3301      	adds	r3, #1
 800225a:	617b      	str	r3, [r7, #20]
 800225c:	697a      	ldr	r2, [r7, #20]
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	429a      	cmp	r2, r3
 8002262:	dbf1      	blt.n	8002248 <_write+0x12>
	}
	return len;
 8002264:	687b      	ldr	r3, [r7, #4]
}
 8002266:	4618      	mov	r0, r3
 8002268:	3718      	adds	r7, #24
 800226a:	46bd      	mov	sp, r7
 800226c:	bd80      	pop	{r7, pc}

0800226e <_close>:

int _close(int file)
{
 800226e:	b480      	push	{r7}
 8002270:	b083      	sub	sp, #12
 8002272:	af00      	add	r7, sp, #0
 8002274:	6078      	str	r0, [r7, #4]
	return -1;
 8002276:	f04f 33ff 	mov.w	r3, #4294967295
}
 800227a:	4618      	mov	r0, r3
 800227c:	370c      	adds	r7, #12
 800227e:	46bd      	mov	sp, r7
 8002280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002284:	4770      	bx	lr

08002286 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002286:	b480      	push	{r7}
 8002288:	b083      	sub	sp, #12
 800228a:	af00      	add	r7, sp, #0
 800228c:	6078      	str	r0, [r7, #4]
 800228e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002290:	683b      	ldr	r3, [r7, #0]
 8002292:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002296:	605a      	str	r2, [r3, #4]
	return 0;
 8002298:	2300      	movs	r3, #0
}
 800229a:	4618      	mov	r0, r3
 800229c:	370c      	adds	r7, #12
 800229e:	46bd      	mov	sp, r7
 80022a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a4:	4770      	bx	lr

080022a6 <_isatty>:

int _isatty(int file)
{
 80022a6:	b480      	push	{r7}
 80022a8:	b083      	sub	sp, #12
 80022aa:	af00      	add	r7, sp, #0
 80022ac:	6078      	str	r0, [r7, #4]
	return 1;
 80022ae:	2301      	movs	r3, #1
}
 80022b0:	4618      	mov	r0, r3
 80022b2:	370c      	adds	r7, #12
 80022b4:	46bd      	mov	sp, r7
 80022b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ba:	4770      	bx	lr

080022bc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80022bc:	b480      	push	{r7}
 80022be:	b085      	sub	sp, #20
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	60f8      	str	r0, [r7, #12]
 80022c4:	60b9      	str	r1, [r7, #8]
 80022c6:	607a      	str	r2, [r7, #4]
	return 0;
 80022c8:	2300      	movs	r3, #0
}
 80022ca:	4618      	mov	r0, r3
 80022cc:	3714      	adds	r7, #20
 80022ce:	46bd      	mov	sp, r7
 80022d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d4:	4770      	bx	lr
	...

080022d8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80022d8:	b580      	push	{r7, lr}
 80022da:	b086      	sub	sp, #24
 80022dc:	af00      	add	r7, sp, #0
 80022de:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80022e0:	4a14      	ldr	r2, [pc, #80]	; (8002334 <_sbrk+0x5c>)
 80022e2:	4b15      	ldr	r3, [pc, #84]	; (8002338 <_sbrk+0x60>)
 80022e4:	1ad3      	subs	r3, r2, r3
 80022e6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80022e8:	697b      	ldr	r3, [r7, #20]
 80022ea:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80022ec:	4b13      	ldr	r3, [pc, #76]	; (800233c <_sbrk+0x64>)
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d102      	bne.n	80022fa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80022f4:	4b11      	ldr	r3, [pc, #68]	; (800233c <_sbrk+0x64>)
 80022f6:	4a12      	ldr	r2, [pc, #72]	; (8002340 <_sbrk+0x68>)
 80022f8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80022fa:	4b10      	ldr	r3, [pc, #64]	; (800233c <_sbrk+0x64>)
 80022fc:	681a      	ldr	r2, [r3, #0]
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	4413      	add	r3, r2
 8002302:	693a      	ldr	r2, [r7, #16]
 8002304:	429a      	cmp	r2, r3
 8002306:	d207      	bcs.n	8002318 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002308:	f00e fa74 	bl	80107f4 <__errno>
 800230c:	4603      	mov	r3, r0
 800230e:	220c      	movs	r2, #12
 8002310:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002312:	f04f 33ff 	mov.w	r3, #4294967295
 8002316:	e009      	b.n	800232c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002318:	4b08      	ldr	r3, [pc, #32]	; (800233c <_sbrk+0x64>)
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800231e:	4b07      	ldr	r3, [pc, #28]	; (800233c <_sbrk+0x64>)
 8002320:	681a      	ldr	r2, [r3, #0]
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	4413      	add	r3, r2
 8002326:	4a05      	ldr	r2, [pc, #20]	; (800233c <_sbrk+0x64>)
 8002328:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800232a:	68fb      	ldr	r3, [r7, #12]
}
 800232c:	4618      	mov	r0, r3
 800232e:	3718      	adds	r7, #24
 8002330:	46bd      	mov	sp, r7
 8002332:	bd80      	pop	{r7, pc}
 8002334:	20020000 	.word	0x20020000
 8002338:	00000400 	.word	0x00000400
 800233c:	200053d8 	.word	0x200053d8
 8002340:	20005490 	.word	0x20005490

08002344 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002344:	b480      	push	{r7}
 8002346:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002348:	4b06      	ldr	r3, [pc, #24]	; (8002364 <SystemInit+0x20>)
 800234a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800234e:	4a05      	ldr	r2, [pc, #20]	; (8002364 <SystemInit+0x20>)
 8002350:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002354:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002358:	bf00      	nop
 800235a:	46bd      	mov	sp, r7
 800235c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002360:	4770      	bx	lr
 8002362:	bf00      	nop
 8002364:	e000ed00 	.word	0xe000ed00

08002368 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002368:	f8df d034 	ldr.w	sp, [pc, #52]	; 80023a0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800236c:	480d      	ldr	r0, [pc, #52]	; (80023a4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800236e:	490e      	ldr	r1, [pc, #56]	; (80023a8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002370:	4a0e      	ldr	r2, [pc, #56]	; (80023ac <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002372:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002374:	e002      	b.n	800237c <LoopCopyDataInit>

08002376 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002376:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002378:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800237a:	3304      	adds	r3, #4

0800237c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800237c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800237e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002380:	d3f9      	bcc.n	8002376 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002382:	4a0b      	ldr	r2, [pc, #44]	; (80023b0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002384:	4c0b      	ldr	r4, [pc, #44]	; (80023b4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002386:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002388:	e001      	b.n	800238e <LoopFillZerobss>

0800238a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800238a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800238c:	3204      	adds	r2, #4

0800238e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800238e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002390:	d3fb      	bcc.n	800238a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002392:	f7ff ffd7 	bl	8002344 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002396:	f00e fc6b 	bl	8010c70 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800239a:	f7fe ff95 	bl	80012c8 <main>
  bx  lr    
 800239e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80023a0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80023a4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80023a8:	200001ec 	.word	0x200001ec
  ldr r2, =_sidata
 80023ac:	0801d430 	.word	0x0801d430
  ldr r2, =_sbss
 80023b0:	200001ec 	.word	0x200001ec
  ldr r4, =_ebss
 80023b4:	2000548c 	.word	0x2000548c

080023b8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80023b8:	e7fe      	b.n	80023b8 <ADC_IRQHandler>
	...

080023bc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80023bc:	b580      	push	{r7, lr}
 80023be:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80023c0:	4b0e      	ldr	r3, [pc, #56]	; (80023fc <HAL_Init+0x40>)
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	4a0d      	ldr	r2, [pc, #52]	; (80023fc <HAL_Init+0x40>)
 80023c6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80023ca:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80023cc:	4b0b      	ldr	r3, [pc, #44]	; (80023fc <HAL_Init+0x40>)
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	4a0a      	ldr	r2, [pc, #40]	; (80023fc <HAL_Init+0x40>)
 80023d2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80023d6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80023d8:	4b08      	ldr	r3, [pc, #32]	; (80023fc <HAL_Init+0x40>)
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	4a07      	ldr	r2, [pc, #28]	; (80023fc <HAL_Init+0x40>)
 80023de:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023e2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80023e4:	2003      	movs	r0, #3
 80023e6:	f000 f931 	bl	800264c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80023ea:	2000      	movs	r0, #0
 80023ec:	f000 f808 	bl	8002400 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80023f0:	f7ff fdbc 	bl	8001f6c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80023f4:	2300      	movs	r3, #0
}
 80023f6:	4618      	mov	r0, r3
 80023f8:	bd80      	pop	{r7, pc}
 80023fa:	bf00      	nop
 80023fc:	40023c00 	.word	0x40023c00

08002400 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002400:	b580      	push	{r7, lr}
 8002402:	b082      	sub	sp, #8
 8002404:	af00      	add	r7, sp, #0
 8002406:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002408:	4b12      	ldr	r3, [pc, #72]	; (8002454 <HAL_InitTick+0x54>)
 800240a:	681a      	ldr	r2, [r3, #0]
 800240c:	4b12      	ldr	r3, [pc, #72]	; (8002458 <HAL_InitTick+0x58>)
 800240e:	781b      	ldrb	r3, [r3, #0]
 8002410:	4619      	mov	r1, r3
 8002412:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002416:	fbb3 f3f1 	udiv	r3, r3, r1
 800241a:	fbb2 f3f3 	udiv	r3, r2, r3
 800241e:	4618      	mov	r0, r3
 8002420:	f000 f93b 	bl	800269a <HAL_SYSTICK_Config>
 8002424:	4603      	mov	r3, r0
 8002426:	2b00      	cmp	r3, #0
 8002428:	d001      	beq.n	800242e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800242a:	2301      	movs	r3, #1
 800242c:	e00e      	b.n	800244c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	2b0f      	cmp	r3, #15
 8002432:	d80a      	bhi.n	800244a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002434:	2200      	movs	r2, #0
 8002436:	6879      	ldr	r1, [r7, #4]
 8002438:	f04f 30ff 	mov.w	r0, #4294967295
 800243c:	f000 f911 	bl	8002662 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002440:	4a06      	ldr	r2, [pc, #24]	; (800245c <HAL_InitTick+0x5c>)
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002446:	2300      	movs	r3, #0
 8002448:	e000      	b.n	800244c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800244a:	2301      	movs	r3, #1
}
 800244c:	4618      	mov	r0, r3
 800244e:	3708      	adds	r7, #8
 8002450:	46bd      	mov	sp, r7
 8002452:	bd80      	pop	{r7, pc}
 8002454:	20000004 	.word	0x20000004
 8002458:	2000000c 	.word	0x2000000c
 800245c:	20000008 	.word	0x20000008

08002460 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002460:	b480      	push	{r7}
 8002462:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002464:	4b06      	ldr	r3, [pc, #24]	; (8002480 <HAL_IncTick+0x20>)
 8002466:	781b      	ldrb	r3, [r3, #0]
 8002468:	461a      	mov	r2, r3
 800246a:	4b06      	ldr	r3, [pc, #24]	; (8002484 <HAL_IncTick+0x24>)
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	4413      	add	r3, r2
 8002470:	4a04      	ldr	r2, [pc, #16]	; (8002484 <HAL_IncTick+0x24>)
 8002472:	6013      	str	r3, [r2, #0]
}
 8002474:	bf00      	nop
 8002476:	46bd      	mov	sp, r7
 8002478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800247c:	4770      	bx	lr
 800247e:	bf00      	nop
 8002480:	2000000c 	.word	0x2000000c
 8002484:	20005478 	.word	0x20005478

08002488 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002488:	b480      	push	{r7}
 800248a:	af00      	add	r7, sp, #0
  return uwTick;
 800248c:	4b03      	ldr	r3, [pc, #12]	; (800249c <HAL_GetTick+0x14>)
 800248e:	681b      	ldr	r3, [r3, #0]
}
 8002490:	4618      	mov	r0, r3
 8002492:	46bd      	mov	sp, r7
 8002494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002498:	4770      	bx	lr
 800249a:	bf00      	nop
 800249c:	20005478 	.word	0x20005478

080024a0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80024a0:	b580      	push	{r7, lr}
 80024a2:	b084      	sub	sp, #16
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80024a8:	f7ff ffee 	bl	8002488 <HAL_GetTick>
 80024ac:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024b8:	d005      	beq.n	80024c6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80024ba:	4b0a      	ldr	r3, [pc, #40]	; (80024e4 <HAL_Delay+0x44>)
 80024bc:	781b      	ldrb	r3, [r3, #0]
 80024be:	461a      	mov	r2, r3
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	4413      	add	r3, r2
 80024c4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80024c6:	bf00      	nop
 80024c8:	f7ff ffde 	bl	8002488 <HAL_GetTick>
 80024cc:	4602      	mov	r2, r0
 80024ce:	68bb      	ldr	r3, [r7, #8]
 80024d0:	1ad3      	subs	r3, r2, r3
 80024d2:	68fa      	ldr	r2, [r7, #12]
 80024d4:	429a      	cmp	r2, r3
 80024d6:	d8f7      	bhi.n	80024c8 <HAL_Delay+0x28>
  {
  }
}
 80024d8:	bf00      	nop
 80024da:	bf00      	nop
 80024dc:	3710      	adds	r7, #16
 80024de:	46bd      	mov	sp, r7
 80024e0:	bd80      	pop	{r7, pc}
 80024e2:	bf00      	nop
 80024e4:	2000000c 	.word	0x2000000c

080024e8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80024e8:	b480      	push	{r7}
 80024ea:	b085      	sub	sp, #20
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	f003 0307 	and.w	r3, r3, #7
 80024f6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80024f8:	4b0c      	ldr	r3, [pc, #48]	; (800252c <__NVIC_SetPriorityGrouping+0x44>)
 80024fa:	68db      	ldr	r3, [r3, #12]
 80024fc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80024fe:	68ba      	ldr	r2, [r7, #8]
 8002500:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002504:	4013      	ands	r3, r2
 8002506:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800250c:	68bb      	ldr	r3, [r7, #8]
 800250e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002510:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002514:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002518:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800251a:	4a04      	ldr	r2, [pc, #16]	; (800252c <__NVIC_SetPriorityGrouping+0x44>)
 800251c:	68bb      	ldr	r3, [r7, #8]
 800251e:	60d3      	str	r3, [r2, #12]
}
 8002520:	bf00      	nop
 8002522:	3714      	adds	r7, #20
 8002524:	46bd      	mov	sp, r7
 8002526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800252a:	4770      	bx	lr
 800252c:	e000ed00 	.word	0xe000ed00

08002530 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002530:	b480      	push	{r7}
 8002532:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002534:	4b04      	ldr	r3, [pc, #16]	; (8002548 <__NVIC_GetPriorityGrouping+0x18>)
 8002536:	68db      	ldr	r3, [r3, #12]
 8002538:	0a1b      	lsrs	r3, r3, #8
 800253a:	f003 0307 	and.w	r3, r3, #7
}
 800253e:	4618      	mov	r0, r3
 8002540:	46bd      	mov	sp, r7
 8002542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002546:	4770      	bx	lr
 8002548:	e000ed00 	.word	0xe000ed00

0800254c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800254c:	b480      	push	{r7}
 800254e:	b083      	sub	sp, #12
 8002550:	af00      	add	r7, sp, #0
 8002552:	4603      	mov	r3, r0
 8002554:	6039      	str	r1, [r7, #0]
 8002556:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002558:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800255c:	2b00      	cmp	r3, #0
 800255e:	db0a      	blt.n	8002576 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002560:	683b      	ldr	r3, [r7, #0]
 8002562:	b2da      	uxtb	r2, r3
 8002564:	490c      	ldr	r1, [pc, #48]	; (8002598 <__NVIC_SetPriority+0x4c>)
 8002566:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800256a:	0112      	lsls	r2, r2, #4
 800256c:	b2d2      	uxtb	r2, r2
 800256e:	440b      	add	r3, r1
 8002570:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002574:	e00a      	b.n	800258c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002576:	683b      	ldr	r3, [r7, #0]
 8002578:	b2da      	uxtb	r2, r3
 800257a:	4908      	ldr	r1, [pc, #32]	; (800259c <__NVIC_SetPriority+0x50>)
 800257c:	79fb      	ldrb	r3, [r7, #7]
 800257e:	f003 030f 	and.w	r3, r3, #15
 8002582:	3b04      	subs	r3, #4
 8002584:	0112      	lsls	r2, r2, #4
 8002586:	b2d2      	uxtb	r2, r2
 8002588:	440b      	add	r3, r1
 800258a:	761a      	strb	r2, [r3, #24]
}
 800258c:	bf00      	nop
 800258e:	370c      	adds	r7, #12
 8002590:	46bd      	mov	sp, r7
 8002592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002596:	4770      	bx	lr
 8002598:	e000e100 	.word	0xe000e100
 800259c:	e000ed00 	.word	0xe000ed00

080025a0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80025a0:	b480      	push	{r7}
 80025a2:	b089      	sub	sp, #36	; 0x24
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	60f8      	str	r0, [r7, #12]
 80025a8:	60b9      	str	r1, [r7, #8]
 80025aa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	f003 0307 	and.w	r3, r3, #7
 80025b2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80025b4:	69fb      	ldr	r3, [r7, #28]
 80025b6:	f1c3 0307 	rsb	r3, r3, #7
 80025ba:	2b04      	cmp	r3, #4
 80025bc:	bf28      	it	cs
 80025be:	2304      	movcs	r3, #4
 80025c0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80025c2:	69fb      	ldr	r3, [r7, #28]
 80025c4:	3304      	adds	r3, #4
 80025c6:	2b06      	cmp	r3, #6
 80025c8:	d902      	bls.n	80025d0 <NVIC_EncodePriority+0x30>
 80025ca:	69fb      	ldr	r3, [r7, #28]
 80025cc:	3b03      	subs	r3, #3
 80025ce:	e000      	b.n	80025d2 <NVIC_EncodePriority+0x32>
 80025d0:	2300      	movs	r3, #0
 80025d2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80025d4:	f04f 32ff 	mov.w	r2, #4294967295
 80025d8:	69bb      	ldr	r3, [r7, #24]
 80025da:	fa02 f303 	lsl.w	r3, r2, r3
 80025de:	43da      	mvns	r2, r3
 80025e0:	68bb      	ldr	r3, [r7, #8]
 80025e2:	401a      	ands	r2, r3
 80025e4:	697b      	ldr	r3, [r7, #20]
 80025e6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80025e8:	f04f 31ff 	mov.w	r1, #4294967295
 80025ec:	697b      	ldr	r3, [r7, #20]
 80025ee:	fa01 f303 	lsl.w	r3, r1, r3
 80025f2:	43d9      	mvns	r1, r3
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80025f8:	4313      	orrs	r3, r2
         );
}
 80025fa:	4618      	mov	r0, r3
 80025fc:	3724      	adds	r7, #36	; 0x24
 80025fe:	46bd      	mov	sp, r7
 8002600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002604:	4770      	bx	lr
	...

08002608 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002608:	b580      	push	{r7, lr}
 800260a:	b082      	sub	sp, #8
 800260c:	af00      	add	r7, sp, #0
 800260e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	3b01      	subs	r3, #1
 8002614:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002618:	d301      	bcc.n	800261e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800261a:	2301      	movs	r3, #1
 800261c:	e00f      	b.n	800263e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800261e:	4a0a      	ldr	r2, [pc, #40]	; (8002648 <SysTick_Config+0x40>)
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	3b01      	subs	r3, #1
 8002624:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002626:	210f      	movs	r1, #15
 8002628:	f04f 30ff 	mov.w	r0, #4294967295
 800262c:	f7ff ff8e 	bl	800254c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002630:	4b05      	ldr	r3, [pc, #20]	; (8002648 <SysTick_Config+0x40>)
 8002632:	2200      	movs	r2, #0
 8002634:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002636:	4b04      	ldr	r3, [pc, #16]	; (8002648 <SysTick_Config+0x40>)
 8002638:	2207      	movs	r2, #7
 800263a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800263c:	2300      	movs	r3, #0
}
 800263e:	4618      	mov	r0, r3
 8002640:	3708      	adds	r7, #8
 8002642:	46bd      	mov	sp, r7
 8002644:	bd80      	pop	{r7, pc}
 8002646:	bf00      	nop
 8002648:	e000e010 	.word	0xe000e010

0800264c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800264c:	b580      	push	{r7, lr}
 800264e:	b082      	sub	sp, #8
 8002650:	af00      	add	r7, sp, #0
 8002652:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002654:	6878      	ldr	r0, [r7, #4]
 8002656:	f7ff ff47 	bl	80024e8 <__NVIC_SetPriorityGrouping>
}
 800265a:	bf00      	nop
 800265c:	3708      	adds	r7, #8
 800265e:	46bd      	mov	sp, r7
 8002660:	bd80      	pop	{r7, pc}

08002662 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002662:	b580      	push	{r7, lr}
 8002664:	b086      	sub	sp, #24
 8002666:	af00      	add	r7, sp, #0
 8002668:	4603      	mov	r3, r0
 800266a:	60b9      	str	r1, [r7, #8]
 800266c:	607a      	str	r2, [r7, #4]
 800266e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002670:	2300      	movs	r3, #0
 8002672:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002674:	f7ff ff5c 	bl	8002530 <__NVIC_GetPriorityGrouping>
 8002678:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800267a:	687a      	ldr	r2, [r7, #4]
 800267c:	68b9      	ldr	r1, [r7, #8]
 800267e:	6978      	ldr	r0, [r7, #20]
 8002680:	f7ff ff8e 	bl	80025a0 <NVIC_EncodePriority>
 8002684:	4602      	mov	r2, r0
 8002686:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800268a:	4611      	mov	r1, r2
 800268c:	4618      	mov	r0, r3
 800268e:	f7ff ff5d 	bl	800254c <__NVIC_SetPriority>
}
 8002692:	bf00      	nop
 8002694:	3718      	adds	r7, #24
 8002696:	46bd      	mov	sp, r7
 8002698:	bd80      	pop	{r7, pc}

0800269a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800269a:	b580      	push	{r7, lr}
 800269c:	b082      	sub	sp, #8
 800269e:	af00      	add	r7, sp, #0
 80026a0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80026a2:	6878      	ldr	r0, [r7, #4]
 80026a4:	f7ff ffb0 	bl	8002608 <SysTick_Config>
 80026a8:	4603      	mov	r3, r0
}
 80026aa:	4618      	mov	r0, r3
 80026ac:	3708      	adds	r7, #8
 80026ae:	46bd      	mov	sp, r7
 80026b0:	bd80      	pop	{r7, pc}
	...

080026b4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80026b4:	b480      	push	{r7}
 80026b6:	b089      	sub	sp, #36	; 0x24
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	6078      	str	r0, [r7, #4]
 80026bc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80026be:	2300      	movs	r3, #0
 80026c0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80026c2:	2300      	movs	r3, #0
 80026c4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80026c6:	2300      	movs	r3, #0
 80026c8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80026ca:	2300      	movs	r3, #0
 80026cc:	61fb      	str	r3, [r7, #28]
 80026ce:	e159      	b.n	8002984 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80026d0:	2201      	movs	r2, #1
 80026d2:	69fb      	ldr	r3, [r7, #28]
 80026d4:	fa02 f303 	lsl.w	r3, r2, r3
 80026d8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80026da:	683b      	ldr	r3, [r7, #0]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	697a      	ldr	r2, [r7, #20]
 80026e0:	4013      	ands	r3, r2
 80026e2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80026e4:	693a      	ldr	r2, [r7, #16]
 80026e6:	697b      	ldr	r3, [r7, #20]
 80026e8:	429a      	cmp	r2, r3
 80026ea:	f040 8148 	bne.w	800297e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80026ee:	683b      	ldr	r3, [r7, #0]
 80026f0:	685b      	ldr	r3, [r3, #4]
 80026f2:	f003 0303 	and.w	r3, r3, #3
 80026f6:	2b01      	cmp	r3, #1
 80026f8:	d005      	beq.n	8002706 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80026fa:	683b      	ldr	r3, [r7, #0]
 80026fc:	685b      	ldr	r3, [r3, #4]
 80026fe:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002702:	2b02      	cmp	r3, #2
 8002704:	d130      	bne.n	8002768 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	689b      	ldr	r3, [r3, #8]
 800270a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800270c:	69fb      	ldr	r3, [r7, #28]
 800270e:	005b      	lsls	r3, r3, #1
 8002710:	2203      	movs	r2, #3
 8002712:	fa02 f303 	lsl.w	r3, r2, r3
 8002716:	43db      	mvns	r3, r3
 8002718:	69ba      	ldr	r2, [r7, #24]
 800271a:	4013      	ands	r3, r2
 800271c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800271e:	683b      	ldr	r3, [r7, #0]
 8002720:	68da      	ldr	r2, [r3, #12]
 8002722:	69fb      	ldr	r3, [r7, #28]
 8002724:	005b      	lsls	r3, r3, #1
 8002726:	fa02 f303 	lsl.w	r3, r2, r3
 800272a:	69ba      	ldr	r2, [r7, #24]
 800272c:	4313      	orrs	r3, r2
 800272e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	69ba      	ldr	r2, [r7, #24]
 8002734:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	685b      	ldr	r3, [r3, #4]
 800273a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800273c:	2201      	movs	r2, #1
 800273e:	69fb      	ldr	r3, [r7, #28]
 8002740:	fa02 f303 	lsl.w	r3, r2, r3
 8002744:	43db      	mvns	r3, r3
 8002746:	69ba      	ldr	r2, [r7, #24]
 8002748:	4013      	ands	r3, r2
 800274a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800274c:	683b      	ldr	r3, [r7, #0]
 800274e:	685b      	ldr	r3, [r3, #4]
 8002750:	091b      	lsrs	r3, r3, #4
 8002752:	f003 0201 	and.w	r2, r3, #1
 8002756:	69fb      	ldr	r3, [r7, #28]
 8002758:	fa02 f303 	lsl.w	r3, r2, r3
 800275c:	69ba      	ldr	r2, [r7, #24]
 800275e:	4313      	orrs	r3, r2
 8002760:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	69ba      	ldr	r2, [r7, #24]
 8002766:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002768:	683b      	ldr	r3, [r7, #0]
 800276a:	685b      	ldr	r3, [r3, #4]
 800276c:	f003 0303 	and.w	r3, r3, #3
 8002770:	2b03      	cmp	r3, #3
 8002772:	d017      	beq.n	80027a4 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	68db      	ldr	r3, [r3, #12]
 8002778:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800277a:	69fb      	ldr	r3, [r7, #28]
 800277c:	005b      	lsls	r3, r3, #1
 800277e:	2203      	movs	r2, #3
 8002780:	fa02 f303 	lsl.w	r3, r2, r3
 8002784:	43db      	mvns	r3, r3
 8002786:	69ba      	ldr	r2, [r7, #24]
 8002788:	4013      	ands	r3, r2
 800278a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800278c:	683b      	ldr	r3, [r7, #0]
 800278e:	689a      	ldr	r2, [r3, #8]
 8002790:	69fb      	ldr	r3, [r7, #28]
 8002792:	005b      	lsls	r3, r3, #1
 8002794:	fa02 f303 	lsl.w	r3, r2, r3
 8002798:	69ba      	ldr	r2, [r7, #24]
 800279a:	4313      	orrs	r3, r2
 800279c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	69ba      	ldr	r2, [r7, #24]
 80027a2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80027a4:	683b      	ldr	r3, [r7, #0]
 80027a6:	685b      	ldr	r3, [r3, #4]
 80027a8:	f003 0303 	and.w	r3, r3, #3
 80027ac:	2b02      	cmp	r3, #2
 80027ae:	d123      	bne.n	80027f8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80027b0:	69fb      	ldr	r3, [r7, #28]
 80027b2:	08da      	lsrs	r2, r3, #3
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	3208      	adds	r2, #8
 80027b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80027bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80027be:	69fb      	ldr	r3, [r7, #28]
 80027c0:	f003 0307 	and.w	r3, r3, #7
 80027c4:	009b      	lsls	r3, r3, #2
 80027c6:	220f      	movs	r2, #15
 80027c8:	fa02 f303 	lsl.w	r3, r2, r3
 80027cc:	43db      	mvns	r3, r3
 80027ce:	69ba      	ldr	r2, [r7, #24]
 80027d0:	4013      	ands	r3, r2
 80027d2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80027d4:	683b      	ldr	r3, [r7, #0]
 80027d6:	691a      	ldr	r2, [r3, #16]
 80027d8:	69fb      	ldr	r3, [r7, #28]
 80027da:	f003 0307 	and.w	r3, r3, #7
 80027de:	009b      	lsls	r3, r3, #2
 80027e0:	fa02 f303 	lsl.w	r3, r2, r3
 80027e4:	69ba      	ldr	r2, [r7, #24]
 80027e6:	4313      	orrs	r3, r2
 80027e8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80027ea:	69fb      	ldr	r3, [r7, #28]
 80027ec:	08da      	lsrs	r2, r3, #3
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	3208      	adds	r2, #8
 80027f2:	69b9      	ldr	r1, [r7, #24]
 80027f4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80027fe:	69fb      	ldr	r3, [r7, #28]
 8002800:	005b      	lsls	r3, r3, #1
 8002802:	2203      	movs	r2, #3
 8002804:	fa02 f303 	lsl.w	r3, r2, r3
 8002808:	43db      	mvns	r3, r3
 800280a:	69ba      	ldr	r2, [r7, #24]
 800280c:	4013      	ands	r3, r2
 800280e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002810:	683b      	ldr	r3, [r7, #0]
 8002812:	685b      	ldr	r3, [r3, #4]
 8002814:	f003 0203 	and.w	r2, r3, #3
 8002818:	69fb      	ldr	r3, [r7, #28]
 800281a:	005b      	lsls	r3, r3, #1
 800281c:	fa02 f303 	lsl.w	r3, r2, r3
 8002820:	69ba      	ldr	r2, [r7, #24]
 8002822:	4313      	orrs	r3, r2
 8002824:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	69ba      	ldr	r2, [r7, #24]
 800282a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800282c:	683b      	ldr	r3, [r7, #0]
 800282e:	685b      	ldr	r3, [r3, #4]
 8002830:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002834:	2b00      	cmp	r3, #0
 8002836:	f000 80a2 	beq.w	800297e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800283a:	2300      	movs	r3, #0
 800283c:	60fb      	str	r3, [r7, #12]
 800283e:	4b57      	ldr	r3, [pc, #348]	; (800299c <HAL_GPIO_Init+0x2e8>)
 8002840:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002842:	4a56      	ldr	r2, [pc, #344]	; (800299c <HAL_GPIO_Init+0x2e8>)
 8002844:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002848:	6453      	str	r3, [r2, #68]	; 0x44
 800284a:	4b54      	ldr	r3, [pc, #336]	; (800299c <HAL_GPIO_Init+0x2e8>)
 800284c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800284e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002852:	60fb      	str	r3, [r7, #12]
 8002854:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002856:	4a52      	ldr	r2, [pc, #328]	; (80029a0 <HAL_GPIO_Init+0x2ec>)
 8002858:	69fb      	ldr	r3, [r7, #28]
 800285a:	089b      	lsrs	r3, r3, #2
 800285c:	3302      	adds	r3, #2
 800285e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002862:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002864:	69fb      	ldr	r3, [r7, #28]
 8002866:	f003 0303 	and.w	r3, r3, #3
 800286a:	009b      	lsls	r3, r3, #2
 800286c:	220f      	movs	r2, #15
 800286e:	fa02 f303 	lsl.w	r3, r2, r3
 8002872:	43db      	mvns	r3, r3
 8002874:	69ba      	ldr	r2, [r7, #24]
 8002876:	4013      	ands	r3, r2
 8002878:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	4a49      	ldr	r2, [pc, #292]	; (80029a4 <HAL_GPIO_Init+0x2f0>)
 800287e:	4293      	cmp	r3, r2
 8002880:	d019      	beq.n	80028b6 <HAL_GPIO_Init+0x202>
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	4a48      	ldr	r2, [pc, #288]	; (80029a8 <HAL_GPIO_Init+0x2f4>)
 8002886:	4293      	cmp	r3, r2
 8002888:	d013      	beq.n	80028b2 <HAL_GPIO_Init+0x1fe>
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	4a47      	ldr	r2, [pc, #284]	; (80029ac <HAL_GPIO_Init+0x2f8>)
 800288e:	4293      	cmp	r3, r2
 8002890:	d00d      	beq.n	80028ae <HAL_GPIO_Init+0x1fa>
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	4a46      	ldr	r2, [pc, #280]	; (80029b0 <HAL_GPIO_Init+0x2fc>)
 8002896:	4293      	cmp	r3, r2
 8002898:	d007      	beq.n	80028aa <HAL_GPIO_Init+0x1f6>
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	4a45      	ldr	r2, [pc, #276]	; (80029b4 <HAL_GPIO_Init+0x300>)
 800289e:	4293      	cmp	r3, r2
 80028a0:	d101      	bne.n	80028a6 <HAL_GPIO_Init+0x1f2>
 80028a2:	2304      	movs	r3, #4
 80028a4:	e008      	b.n	80028b8 <HAL_GPIO_Init+0x204>
 80028a6:	2307      	movs	r3, #7
 80028a8:	e006      	b.n	80028b8 <HAL_GPIO_Init+0x204>
 80028aa:	2303      	movs	r3, #3
 80028ac:	e004      	b.n	80028b8 <HAL_GPIO_Init+0x204>
 80028ae:	2302      	movs	r3, #2
 80028b0:	e002      	b.n	80028b8 <HAL_GPIO_Init+0x204>
 80028b2:	2301      	movs	r3, #1
 80028b4:	e000      	b.n	80028b8 <HAL_GPIO_Init+0x204>
 80028b6:	2300      	movs	r3, #0
 80028b8:	69fa      	ldr	r2, [r7, #28]
 80028ba:	f002 0203 	and.w	r2, r2, #3
 80028be:	0092      	lsls	r2, r2, #2
 80028c0:	4093      	lsls	r3, r2
 80028c2:	69ba      	ldr	r2, [r7, #24]
 80028c4:	4313      	orrs	r3, r2
 80028c6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80028c8:	4935      	ldr	r1, [pc, #212]	; (80029a0 <HAL_GPIO_Init+0x2ec>)
 80028ca:	69fb      	ldr	r3, [r7, #28]
 80028cc:	089b      	lsrs	r3, r3, #2
 80028ce:	3302      	adds	r3, #2
 80028d0:	69ba      	ldr	r2, [r7, #24]
 80028d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80028d6:	4b38      	ldr	r3, [pc, #224]	; (80029b8 <HAL_GPIO_Init+0x304>)
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80028dc:	693b      	ldr	r3, [r7, #16]
 80028de:	43db      	mvns	r3, r3
 80028e0:	69ba      	ldr	r2, [r7, #24]
 80028e2:	4013      	ands	r3, r2
 80028e4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80028e6:	683b      	ldr	r3, [r7, #0]
 80028e8:	685b      	ldr	r3, [r3, #4]
 80028ea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d003      	beq.n	80028fa <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80028f2:	69ba      	ldr	r2, [r7, #24]
 80028f4:	693b      	ldr	r3, [r7, #16]
 80028f6:	4313      	orrs	r3, r2
 80028f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80028fa:	4a2f      	ldr	r2, [pc, #188]	; (80029b8 <HAL_GPIO_Init+0x304>)
 80028fc:	69bb      	ldr	r3, [r7, #24]
 80028fe:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002900:	4b2d      	ldr	r3, [pc, #180]	; (80029b8 <HAL_GPIO_Init+0x304>)
 8002902:	685b      	ldr	r3, [r3, #4]
 8002904:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002906:	693b      	ldr	r3, [r7, #16]
 8002908:	43db      	mvns	r3, r3
 800290a:	69ba      	ldr	r2, [r7, #24]
 800290c:	4013      	ands	r3, r2
 800290e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002910:	683b      	ldr	r3, [r7, #0]
 8002912:	685b      	ldr	r3, [r3, #4]
 8002914:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002918:	2b00      	cmp	r3, #0
 800291a:	d003      	beq.n	8002924 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800291c:	69ba      	ldr	r2, [r7, #24]
 800291e:	693b      	ldr	r3, [r7, #16]
 8002920:	4313      	orrs	r3, r2
 8002922:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002924:	4a24      	ldr	r2, [pc, #144]	; (80029b8 <HAL_GPIO_Init+0x304>)
 8002926:	69bb      	ldr	r3, [r7, #24]
 8002928:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800292a:	4b23      	ldr	r3, [pc, #140]	; (80029b8 <HAL_GPIO_Init+0x304>)
 800292c:	689b      	ldr	r3, [r3, #8]
 800292e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002930:	693b      	ldr	r3, [r7, #16]
 8002932:	43db      	mvns	r3, r3
 8002934:	69ba      	ldr	r2, [r7, #24]
 8002936:	4013      	ands	r3, r2
 8002938:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800293a:	683b      	ldr	r3, [r7, #0]
 800293c:	685b      	ldr	r3, [r3, #4]
 800293e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002942:	2b00      	cmp	r3, #0
 8002944:	d003      	beq.n	800294e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002946:	69ba      	ldr	r2, [r7, #24]
 8002948:	693b      	ldr	r3, [r7, #16]
 800294a:	4313      	orrs	r3, r2
 800294c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800294e:	4a1a      	ldr	r2, [pc, #104]	; (80029b8 <HAL_GPIO_Init+0x304>)
 8002950:	69bb      	ldr	r3, [r7, #24]
 8002952:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002954:	4b18      	ldr	r3, [pc, #96]	; (80029b8 <HAL_GPIO_Init+0x304>)
 8002956:	68db      	ldr	r3, [r3, #12]
 8002958:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800295a:	693b      	ldr	r3, [r7, #16]
 800295c:	43db      	mvns	r3, r3
 800295e:	69ba      	ldr	r2, [r7, #24]
 8002960:	4013      	ands	r3, r2
 8002962:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002964:	683b      	ldr	r3, [r7, #0]
 8002966:	685b      	ldr	r3, [r3, #4]
 8002968:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800296c:	2b00      	cmp	r3, #0
 800296e:	d003      	beq.n	8002978 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002970:	69ba      	ldr	r2, [r7, #24]
 8002972:	693b      	ldr	r3, [r7, #16]
 8002974:	4313      	orrs	r3, r2
 8002976:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002978:	4a0f      	ldr	r2, [pc, #60]	; (80029b8 <HAL_GPIO_Init+0x304>)
 800297a:	69bb      	ldr	r3, [r7, #24]
 800297c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800297e:	69fb      	ldr	r3, [r7, #28]
 8002980:	3301      	adds	r3, #1
 8002982:	61fb      	str	r3, [r7, #28]
 8002984:	69fb      	ldr	r3, [r7, #28]
 8002986:	2b0f      	cmp	r3, #15
 8002988:	f67f aea2 	bls.w	80026d0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800298c:	bf00      	nop
 800298e:	bf00      	nop
 8002990:	3724      	adds	r7, #36	; 0x24
 8002992:	46bd      	mov	sp, r7
 8002994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002998:	4770      	bx	lr
 800299a:	bf00      	nop
 800299c:	40023800 	.word	0x40023800
 80029a0:	40013800 	.word	0x40013800
 80029a4:	40020000 	.word	0x40020000
 80029a8:	40020400 	.word	0x40020400
 80029ac:	40020800 	.word	0x40020800
 80029b0:	40020c00 	.word	0x40020c00
 80029b4:	40021000 	.word	0x40021000
 80029b8:	40013c00 	.word	0x40013c00

080029bc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80029bc:	b480      	push	{r7}
 80029be:	b083      	sub	sp, #12
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	6078      	str	r0, [r7, #4]
 80029c4:	460b      	mov	r3, r1
 80029c6:	807b      	strh	r3, [r7, #2]
 80029c8:	4613      	mov	r3, r2
 80029ca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80029cc:	787b      	ldrb	r3, [r7, #1]
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d003      	beq.n	80029da <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80029d2:	887a      	ldrh	r2, [r7, #2]
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80029d8:	e003      	b.n	80029e2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80029da:	887b      	ldrh	r3, [r7, #2]
 80029dc:	041a      	lsls	r2, r3, #16
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	619a      	str	r2, [r3, #24]
}
 80029e2:	bf00      	nop
 80029e4:	370c      	adds	r7, #12
 80029e6:	46bd      	mov	sp, r7
 80029e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ec:	4770      	bx	lr
	...

080029f0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80029f0:	b580      	push	{r7, lr}
 80029f2:	b086      	sub	sp, #24
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d101      	bne.n	8002a02 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80029fe:	2301      	movs	r3, #1
 8002a00:	e264      	b.n	8002ecc <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f003 0301 	and.w	r3, r3, #1
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d075      	beq.n	8002afa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002a0e:	4ba3      	ldr	r3, [pc, #652]	; (8002c9c <HAL_RCC_OscConfig+0x2ac>)
 8002a10:	689b      	ldr	r3, [r3, #8]
 8002a12:	f003 030c 	and.w	r3, r3, #12
 8002a16:	2b04      	cmp	r3, #4
 8002a18:	d00c      	beq.n	8002a34 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002a1a:	4ba0      	ldr	r3, [pc, #640]	; (8002c9c <HAL_RCC_OscConfig+0x2ac>)
 8002a1c:	689b      	ldr	r3, [r3, #8]
 8002a1e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002a22:	2b08      	cmp	r3, #8
 8002a24:	d112      	bne.n	8002a4c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002a26:	4b9d      	ldr	r3, [pc, #628]	; (8002c9c <HAL_RCC_OscConfig+0x2ac>)
 8002a28:	685b      	ldr	r3, [r3, #4]
 8002a2a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a2e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002a32:	d10b      	bne.n	8002a4c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a34:	4b99      	ldr	r3, [pc, #612]	; (8002c9c <HAL_RCC_OscConfig+0x2ac>)
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d05b      	beq.n	8002af8 <HAL_RCC_OscConfig+0x108>
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	685b      	ldr	r3, [r3, #4]
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d157      	bne.n	8002af8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002a48:	2301      	movs	r3, #1
 8002a4a:	e23f      	b.n	8002ecc <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	685b      	ldr	r3, [r3, #4]
 8002a50:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a54:	d106      	bne.n	8002a64 <HAL_RCC_OscConfig+0x74>
 8002a56:	4b91      	ldr	r3, [pc, #580]	; (8002c9c <HAL_RCC_OscConfig+0x2ac>)
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	4a90      	ldr	r2, [pc, #576]	; (8002c9c <HAL_RCC_OscConfig+0x2ac>)
 8002a5c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a60:	6013      	str	r3, [r2, #0]
 8002a62:	e01d      	b.n	8002aa0 <HAL_RCC_OscConfig+0xb0>
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	685b      	ldr	r3, [r3, #4]
 8002a68:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002a6c:	d10c      	bne.n	8002a88 <HAL_RCC_OscConfig+0x98>
 8002a6e:	4b8b      	ldr	r3, [pc, #556]	; (8002c9c <HAL_RCC_OscConfig+0x2ac>)
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	4a8a      	ldr	r2, [pc, #552]	; (8002c9c <HAL_RCC_OscConfig+0x2ac>)
 8002a74:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002a78:	6013      	str	r3, [r2, #0]
 8002a7a:	4b88      	ldr	r3, [pc, #544]	; (8002c9c <HAL_RCC_OscConfig+0x2ac>)
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	4a87      	ldr	r2, [pc, #540]	; (8002c9c <HAL_RCC_OscConfig+0x2ac>)
 8002a80:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a84:	6013      	str	r3, [r2, #0]
 8002a86:	e00b      	b.n	8002aa0 <HAL_RCC_OscConfig+0xb0>
 8002a88:	4b84      	ldr	r3, [pc, #528]	; (8002c9c <HAL_RCC_OscConfig+0x2ac>)
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	4a83      	ldr	r2, [pc, #524]	; (8002c9c <HAL_RCC_OscConfig+0x2ac>)
 8002a8e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a92:	6013      	str	r3, [r2, #0]
 8002a94:	4b81      	ldr	r3, [pc, #516]	; (8002c9c <HAL_RCC_OscConfig+0x2ac>)
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	4a80      	ldr	r2, [pc, #512]	; (8002c9c <HAL_RCC_OscConfig+0x2ac>)
 8002a9a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002a9e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	685b      	ldr	r3, [r3, #4]
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d013      	beq.n	8002ad0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002aa8:	f7ff fcee 	bl	8002488 <HAL_GetTick>
 8002aac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002aae:	e008      	b.n	8002ac2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002ab0:	f7ff fcea 	bl	8002488 <HAL_GetTick>
 8002ab4:	4602      	mov	r2, r0
 8002ab6:	693b      	ldr	r3, [r7, #16]
 8002ab8:	1ad3      	subs	r3, r2, r3
 8002aba:	2b64      	cmp	r3, #100	; 0x64
 8002abc:	d901      	bls.n	8002ac2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002abe:	2303      	movs	r3, #3
 8002ac0:	e204      	b.n	8002ecc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ac2:	4b76      	ldr	r3, [pc, #472]	; (8002c9c <HAL_RCC_OscConfig+0x2ac>)
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d0f0      	beq.n	8002ab0 <HAL_RCC_OscConfig+0xc0>
 8002ace:	e014      	b.n	8002afa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ad0:	f7ff fcda 	bl	8002488 <HAL_GetTick>
 8002ad4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ad6:	e008      	b.n	8002aea <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002ad8:	f7ff fcd6 	bl	8002488 <HAL_GetTick>
 8002adc:	4602      	mov	r2, r0
 8002ade:	693b      	ldr	r3, [r7, #16]
 8002ae0:	1ad3      	subs	r3, r2, r3
 8002ae2:	2b64      	cmp	r3, #100	; 0x64
 8002ae4:	d901      	bls.n	8002aea <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002ae6:	2303      	movs	r3, #3
 8002ae8:	e1f0      	b.n	8002ecc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002aea:	4b6c      	ldr	r3, [pc, #432]	; (8002c9c <HAL_RCC_OscConfig+0x2ac>)
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d1f0      	bne.n	8002ad8 <HAL_RCC_OscConfig+0xe8>
 8002af6:	e000      	b.n	8002afa <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002af8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f003 0302 	and.w	r3, r3, #2
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d063      	beq.n	8002bce <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002b06:	4b65      	ldr	r3, [pc, #404]	; (8002c9c <HAL_RCC_OscConfig+0x2ac>)
 8002b08:	689b      	ldr	r3, [r3, #8]
 8002b0a:	f003 030c 	and.w	r3, r3, #12
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d00b      	beq.n	8002b2a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002b12:	4b62      	ldr	r3, [pc, #392]	; (8002c9c <HAL_RCC_OscConfig+0x2ac>)
 8002b14:	689b      	ldr	r3, [r3, #8]
 8002b16:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002b1a:	2b08      	cmp	r3, #8
 8002b1c:	d11c      	bne.n	8002b58 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002b1e:	4b5f      	ldr	r3, [pc, #380]	; (8002c9c <HAL_RCC_OscConfig+0x2ac>)
 8002b20:	685b      	ldr	r3, [r3, #4]
 8002b22:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d116      	bne.n	8002b58 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b2a:	4b5c      	ldr	r3, [pc, #368]	; (8002c9c <HAL_RCC_OscConfig+0x2ac>)
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f003 0302 	and.w	r3, r3, #2
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d005      	beq.n	8002b42 <HAL_RCC_OscConfig+0x152>
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	68db      	ldr	r3, [r3, #12]
 8002b3a:	2b01      	cmp	r3, #1
 8002b3c:	d001      	beq.n	8002b42 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002b3e:	2301      	movs	r3, #1
 8002b40:	e1c4      	b.n	8002ecc <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b42:	4b56      	ldr	r3, [pc, #344]	; (8002c9c <HAL_RCC_OscConfig+0x2ac>)
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	691b      	ldr	r3, [r3, #16]
 8002b4e:	00db      	lsls	r3, r3, #3
 8002b50:	4952      	ldr	r1, [pc, #328]	; (8002c9c <HAL_RCC_OscConfig+0x2ac>)
 8002b52:	4313      	orrs	r3, r2
 8002b54:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b56:	e03a      	b.n	8002bce <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	68db      	ldr	r3, [r3, #12]
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d020      	beq.n	8002ba2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002b60:	4b4f      	ldr	r3, [pc, #316]	; (8002ca0 <HAL_RCC_OscConfig+0x2b0>)
 8002b62:	2201      	movs	r2, #1
 8002b64:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b66:	f7ff fc8f 	bl	8002488 <HAL_GetTick>
 8002b6a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b6c:	e008      	b.n	8002b80 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002b6e:	f7ff fc8b 	bl	8002488 <HAL_GetTick>
 8002b72:	4602      	mov	r2, r0
 8002b74:	693b      	ldr	r3, [r7, #16]
 8002b76:	1ad3      	subs	r3, r2, r3
 8002b78:	2b02      	cmp	r3, #2
 8002b7a:	d901      	bls.n	8002b80 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002b7c:	2303      	movs	r3, #3
 8002b7e:	e1a5      	b.n	8002ecc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b80:	4b46      	ldr	r3, [pc, #280]	; (8002c9c <HAL_RCC_OscConfig+0x2ac>)
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	f003 0302 	and.w	r3, r3, #2
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d0f0      	beq.n	8002b6e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b8c:	4b43      	ldr	r3, [pc, #268]	; (8002c9c <HAL_RCC_OscConfig+0x2ac>)
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	691b      	ldr	r3, [r3, #16]
 8002b98:	00db      	lsls	r3, r3, #3
 8002b9a:	4940      	ldr	r1, [pc, #256]	; (8002c9c <HAL_RCC_OscConfig+0x2ac>)
 8002b9c:	4313      	orrs	r3, r2
 8002b9e:	600b      	str	r3, [r1, #0]
 8002ba0:	e015      	b.n	8002bce <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002ba2:	4b3f      	ldr	r3, [pc, #252]	; (8002ca0 <HAL_RCC_OscConfig+0x2b0>)
 8002ba4:	2200      	movs	r2, #0
 8002ba6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ba8:	f7ff fc6e 	bl	8002488 <HAL_GetTick>
 8002bac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002bae:	e008      	b.n	8002bc2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002bb0:	f7ff fc6a 	bl	8002488 <HAL_GetTick>
 8002bb4:	4602      	mov	r2, r0
 8002bb6:	693b      	ldr	r3, [r7, #16]
 8002bb8:	1ad3      	subs	r3, r2, r3
 8002bba:	2b02      	cmp	r3, #2
 8002bbc:	d901      	bls.n	8002bc2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002bbe:	2303      	movs	r3, #3
 8002bc0:	e184      	b.n	8002ecc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002bc2:	4b36      	ldr	r3, [pc, #216]	; (8002c9c <HAL_RCC_OscConfig+0x2ac>)
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f003 0302 	and.w	r3, r3, #2
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d1f0      	bne.n	8002bb0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f003 0308 	and.w	r3, r3, #8
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d030      	beq.n	8002c3c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	695b      	ldr	r3, [r3, #20]
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d016      	beq.n	8002c10 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002be2:	4b30      	ldr	r3, [pc, #192]	; (8002ca4 <HAL_RCC_OscConfig+0x2b4>)
 8002be4:	2201      	movs	r2, #1
 8002be6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002be8:	f7ff fc4e 	bl	8002488 <HAL_GetTick>
 8002bec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002bee:	e008      	b.n	8002c02 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002bf0:	f7ff fc4a 	bl	8002488 <HAL_GetTick>
 8002bf4:	4602      	mov	r2, r0
 8002bf6:	693b      	ldr	r3, [r7, #16]
 8002bf8:	1ad3      	subs	r3, r2, r3
 8002bfa:	2b02      	cmp	r3, #2
 8002bfc:	d901      	bls.n	8002c02 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002bfe:	2303      	movs	r3, #3
 8002c00:	e164      	b.n	8002ecc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c02:	4b26      	ldr	r3, [pc, #152]	; (8002c9c <HAL_RCC_OscConfig+0x2ac>)
 8002c04:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c06:	f003 0302 	and.w	r3, r3, #2
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d0f0      	beq.n	8002bf0 <HAL_RCC_OscConfig+0x200>
 8002c0e:	e015      	b.n	8002c3c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002c10:	4b24      	ldr	r3, [pc, #144]	; (8002ca4 <HAL_RCC_OscConfig+0x2b4>)
 8002c12:	2200      	movs	r2, #0
 8002c14:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c16:	f7ff fc37 	bl	8002488 <HAL_GetTick>
 8002c1a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c1c:	e008      	b.n	8002c30 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002c1e:	f7ff fc33 	bl	8002488 <HAL_GetTick>
 8002c22:	4602      	mov	r2, r0
 8002c24:	693b      	ldr	r3, [r7, #16]
 8002c26:	1ad3      	subs	r3, r2, r3
 8002c28:	2b02      	cmp	r3, #2
 8002c2a:	d901      	bls.n	8002c30 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002c2c:	2303      	movs	r3, #3
 8002c2e:	e14d      	b.n	8002ecc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c30:	4b1a      	ldr	r3, [pc, #104]	; (8002c9c <HAL_RCC_OscConfig+0x2ac>)
 8002c32:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c34:	f003 0302 	and.w	r3, r3, #2
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d1f0      	bne.n	8002c1e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f003 0304 	and.w	r3, r3, #4
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	f000 80a0 	beq.w	8002d8a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002c4a:	2300      	movs	r3, #0
 8002c4c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002c4e:	4b13      	ldr	r3, [pc, #76]	; (8002c9c <HAL_RCC_OscConfig+0x2ac>)
 8002c50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d10f      	bne.n	8002c7a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c5a:	2300      	movs	r3, #0
 8002c5c:	60bb      	str	r3, [r7, #8]
 8002c5e:	4b0f      	ldr	r3, [pc, #60]	; (8002c9c <HAL_RCC_OscConfig+0x2ac>)
 8002c60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c62:	4a0e      	ldr	r2, [pc, #56]	; (8002c9c <HAL_RCC_OscConfig+0x2ac>)
 8002c64:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c68:	6413      	str	r3, [r2, #64]	; 0x40
 8002c6a:	4b0c      	ldr	r3, [pc, #48]	; (8002c9c <HAL_RCC_OscConfig+0x2ac>)
 8002c6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c72:	60bb      	str	r3, [r7, #8]
 8002c74:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002c76:	2301      	movs	r3, #1
 8002c78:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c7a:	4b0b      	ldr	r3, [pc, #44]	; (8002ca8 <HAL_RCC_OscConfig+0x2b8>)
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d121      	bne.n	8002cca <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002c86:	4b08      	ldr	r3, [pc, #32]	; (8002ca8 <HAL_RCC_OscConfig+0x2b8>)
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	4a07      	ldr	r2, [pc, #28]	; (8002ca8 <HAL_RCC_OscConfig+0x2b8>)
 8002c8c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c90:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002c92:	f7ff fbf9 	bl	8002488 <HAL_GetTick>
 8002c96:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c98:	e011      	b.n	8002cbe <HAL_RCC_OscConfig+0x2ce>
 8002c9a:	bf00      	nop
 8002c9c:	40023800 	.word	0x40023800
 8002ca0:	42470000 	.word	0x42470000
 8002ca4:	42470e80 	.word	0x42470e80
 8002ca8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002cac:	f7ff fbec 	bl	8002488 <HAL_GetTick>
 8002cb0:	4602      	mov	r2, r0
 8002cb2:	693b      	ldr	r3, [r7, #16]
 8002cb4:	1ad3      	subs	r3, r2, r3
 8002cb6:	2b02      	cmp	r3, #2
 8002cb8:	d901      	bls.n	8002cbe <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002cba:	2303      	movs	r3, #3
 8002cbc:	e106      	b.n	8002ecc <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002cbe:	4b85      	ldr	r3, [pc, #532]	; (8002ed4 <HAL_RCC_OscConfig+0x4e4>)
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d0f0      	beq.n	8002cac <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	689b      	ldr	r3, [r3, #8]
 8002cce:	2b01      	cmp	r3, #1
 8002cd0:	d106      	bne.n	8002ce0 <HAL_RCC_OscConfig+0x2f0>
 8002cd2:	4b81      	ldr	r3, [pc, #516]	; (8002ed8 <HAL_RCC_OscConfig+0x4e8>)
 8002cd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cd6:	4a80      	ldr	r2, [pc, #512]	; (8002ed8 <HAL_RCC_OscConfig+0x4e8>)
 8002cd8:	f043 0301 	orr.w	r3, r3, #1
 8002cdc:	6713      	str	r3, [r2, #112]	; 0x70
 8002cde:	e01c      	b.n	8002d1a <HAL_RCC_OscConfig+0x32a>
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	689b      	ldr	r3, [r3, #8]
 8002ce4:	2b05      	cmp	r3, #5
 8002ce6:	d10c      	bne.n	8002d02 <HAL_RCC_OscConfig+0x312>
 8002ce8:	4b7b      	ldr	r3, [pc, #492]	; (8002ed8 <HAL_RCC_OscConfig+0x4e8>)
 8002cea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cec:	4a7a      	ldr	r2, [pc, #488]	; (8002ed8 <HAL_RCC_OscConfig+0x4e8>)
 8002cee:	f043 0304 	orr.w	r3, r3, #4
 8002cf2:	6713      	str	r3, [r2, #112]	; 0x70
 8002cf4:	4b78      	ldr	r3, [pc, #480]	; (8002ed8 <HAL_RCC_OscConfig+0x4e8>)
 8002cf6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cf8:	4a77      	ldr	r2, [pc, #476]	; (8002ed8 <HAL_RCC_OscConfig+0x4e8>)
 8002cfa:	f043 0301 	orr.w	r3, r3, #1
 8002cfe:	6713      	str	r3, [r2, #112]	; 0x70
 8002d00:	e00b      	b.n	8002d1a <HAL_RCC_OscConfig+0x32a>
 8002d02:	4b75      	ldr	r3, [pc, #468]	; (8002ed8 <HAL_RCC_OscConfig+0x4e8>)
 8002d04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d06:	4a74      	ldr	r2, [pc, #464]	; (8002ed8 <HAL_RCC_OscConfig+0x4e8>)
 8002d08:	f023 0301 	bic.w	r3, r3, #1
 8002d0c:	6713      	str	r3, [r2, #112]	; 0x70
 8002d0e:	4b72      	ldr	r3, [pc, #456]	; (8002ed8 <HAL_RCC_OscConfig+0x4e8>)
 8002d10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d12:	4a71      	ldr	r2, [pc, #452]	; (8002ed8 <HAL_RCC_OscConfig+0x4e8>)
 8002d14:	f023 0304 	bic.w	r3, r3, #4
 8002d18:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	689b      	ldr	r3, [r3, #8]
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d015      	beq.n	8002d4e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d22:	f7ff fbb1 	bl	8002488 <HAL_GetTick>
 8002d26:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d28:	e00a      	b.n	8002d40 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002d2a:	f7ff fbad 	bl	8002488 <HAL_GetTick>
 8002d2e:	4602      	mov	r2, r0
 8002d30:	693b      	ldr	r3, [r7, #16]
 8002d32:	1ad3      	subs	r3, r2, r3
 8002d34:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d38:	4293      	cmp	r3, r2
 8002d3a:	d901      	bls.n	8002d40 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002d3c:	2303      	movs	r3, #3
 8002d3e:	e0c5      	b.n	8002ecc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d40:	4b65      	ldr	r3, [pc, #404]	; (8002ed8 <HAL_RCC_OscConfig+0x4e8>)
 8002d42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d44:	f003 0302 	and.w	r3, r3, #2
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d0ee      	beq.n	8002d2a <HAL_RCC_OscConfig+0x33a>
 8002d4c:	e014      	b.n	8002d78 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d4e:	f7ff fb9b 	bl	8002488 <HAL_GetTick>
 8002d52:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d54:	e00a      	b.n	8002d6c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002d56:	f7ff fb97 	bl	8002488 <HAL_GetTick>
 8002d5a:	4602      	mov	r2, r0
 8002d5c:	693b      	ldr	r3, [r7, #16]
 8002d5e:	1ad3      	subs	r3, r2, r3
 8002d60:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d64:	4293      	cmp	r3, r2
 8002d66:	d901      	bls.n	8002d6c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002d68:	2303      	movs	r3, #3
 8002d6a:	e0af      	b.n	8002ecc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d6c:	4b5a      	ldr	r3, [pc, #360]	; (8002ed8 <HAL_RCC_OscConfig+0x4e8>)
 8002d6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d70:	f003 0302 	and.w	r3, r3, #2
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d1ee      	bne.n	8002d56 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002d78:	7dfb      	ldrb	r3, [r7, #23]
 8002d7a:	2b01      	cmp	r3, #1
 8002d7c:	d105      	bne.n	8002d8a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d7e:	4b56      	ldr	r3, [pc, #344]	; (8002ed8 <HAL_RCC_OscConfig+0x4e8>)
 8002d80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d82:	4a55      	ldr	r2, [pc, #340]	; (8002ed8 <HAL_RCC_OscConfig+0x4e8>)
 8002d84:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002d88:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	699b      	ldr	r3, [r3, #24]
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	f000 809b 	beq.w	8002eca <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002d94:	4b50      	ldr	r3, [pc, #320]	; (8002ed8 <HAL_RCC_OscConfig+0x4e8>)
 8002d96:	689b      	ldr	r3, [r3, #8]
 8002d98:	f003 030c 	and.w	r3, r3, #12
 8002d9c:	2b08      	cmp	r3, #8
 8002d9e:	d05c      	beq.n	8002e5a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	699b      	ldr	r3, [r3, #24]
 8002da4:	2b02      	cmp	r3, #2
 8002da6:	d141      	bne.n	8002e2c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002da8:	4b4c      	ldr	r3, [pc, #304]	; (8002edc <HAL_RCC_OscConfig+0x4ec>)
 8002daa:	2200      	movs	r2, #0
 8002dac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dae:	f7ff fb6b 	bl	8002488 <HAL_GetTick>
 8002db2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002db4:	e008      	b.n	8002dc8 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002db6:	f7ff fb67 	bl	8002488 <HAL_GetTick>
 8002dba:	4602      	mov	r2, r0
 8002dbc:	693b      	ldr	r3, [r7, #16]
 8002dbe:	1ad3      	subs	r3, r2, r3
 8002dc0:	2b02      	cmp	r3, #2
 8002dc2:	d901      	bls.n	8002dc8 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002dc4:	2303      	movs	r3, #3
 8002dc6:	e081      	b.n	8002ecc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002dc8:	4b43      	ldr	r3, [pc, #268]	; (8002ed8 <HAL_RCC_OscConfig+0x4e8>)
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d1f0      	bne.n	8002db6 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	69da      	ldr	r2, [r3, #28]
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	6a1b      	ldr	r3, [r3, #32]
 8002ddc:	431a      	orrs	r2, r3
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002de2:	019b      	lsls	r3, r3, #6
 8002de4:	431a      	orrs	r2, r3
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dea:	085b      	lsrs	r3, r3, #1
 8002dec:	3b01      	subs	r3, #1
 8002dee:	041b      	lsls	r3, r3, #16
 8002df0:	431a      	orrs	r2, r3
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002df6:	061b      	lsls	r3, r3, #24
 8002df8:	4937      	ldr	r1, [pc, #220]	; (8002ed8 <HAL_RCC_OscConfig+0x4e8>)
 8002dfa:	4313      	orrs	r3, r2
 8002dfc:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002dfe:	4b37      	ldr	r3, [pc, #220]	; (8002edc <HAL_RCC_OscConfig+0x4ec>)
 8002e00:	2201      	movs	r2, #1
 8002e02:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e04:	f7ff fb40 	bl	8002488 <HAL_GetTick>
 8002e08:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e0a:	e008      	b.n	8002e1e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e0c:	f7ff fb3c 	bl	8002488 <HAL_GetTick>
 8002e10:	4602      	mov	r2, r0
 8002e12:	693b      	ldr	r3, [r7, #16]
 8002e14:	1ad3      	subs	r3, r2, r3
 8002e16:	2b02      	cmp	r3, #2
 8002e18:	d901      	bls.n	8002e1e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8002e1a:	2303      	movs	r3, #3
 8002e1c:	e056      	b.n	8002ecc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e1e:	4b2e      	ldr	r3, [pc, #184]	; (8002ed8 <HAL_RCC_OscConfig+0x4e8>)
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d0f0      	beq.n	8002e0c <HAL_RCC_OscConfig+0x41c>
 8002e2a:	e04e      	b.n	8002eca <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e2c:	4b2b      	ldr	r3, [pc, #172]	; (8002edc <HAL_RCC_OscConfig+0x4ec>)
 8002e2e:	2200      	movs	r2, #0
 8002e30:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e32:	f7ff fb29 	bl	8002488 <HAL_GetTick>
 8002e36:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e38:	e008      	b.n	8002e4c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e3a:	f7ff fb25 	bl	8002488 <HAL_GetTick>
 8002e3e:	4602      	mov	r2, r0
 8002e40:	693b      	ldr	r3, [r7, #16]
 8002e42:	1ad3      	subs	r3, r2, r3
 8002e44:	2b02      	cmp	r3, #2
 8002e46:	d901      	bls.n	8002e4c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002e48:	2303      	movs	r3, #3
 8002e4a:	e03f      	b.n	8002ecc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e4c:	4b22      	ldr	r3, [pc, #136]	; (8002ed8 <HAL_RCC_OscConfig+0x4e8>)
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d1f0      	bne.n	8002e3a <HAL_RCC_OscConfig+0x44a>
 8002e58:	e037      	b.n	8002eca <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	699b      	ldr	r3, [r3, #24]
 8002e5e:	2b01      	cmp	r3, #1
 8002e60:	d101      	bne.n	8002e66 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8002e62:	2301      	movs	r3, #1
 8002e64:	e032      	b.n	8002ecc <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002e66:	4b1c      	ldr	r3, [pc, #112]	; (8002ed8 <HAL_RCC_OscConfig+0x4e8>)
 8002e68:	685b      	ldr	r3, [r3, #4]
 8002e6a:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	699b      	ldr	r3, [r3, #24]
 8002e70:	2b01      	cmp	r3, #1
 8002e72:	d028      	beq.n	8002ec6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002e7e:	429a      	cmp	r2, r3
 8002e80:	d121      	bne.n	8002ec6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e8c:	429a      	cmp	r2, r3
 8002e8e:	d11a      	bne.n	8002ec6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002e90:	68fa      	ldr	r2, [r7, #12]
 8002e92:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002e96:	4013      	ands	r3, r2
 8002e98:	687a      	ldr	r2, [r7, #4]
 8002e9a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002e9c:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002e9e:	4293      	cmp	r3, r2
 8002ea0:	d111      	bne.n	8002ec6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002eac:	085b      	lsrs	r3, r3, #1
 8002eae:	3b01      	subs	r3, #1
 8002eb0:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002eb2:	429a      	cmp	r2, r3
 8002eb4:	d107      	bne.n	8002ec6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ec0:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002ec2:	429a      	cmp	r2, r3
 8002ec4:	d001      	beq.n	8002eca <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8002ec6:	2301      	movs	r3, #1
 8002ec8:	e000      	b.n	8002ecc <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8002eca:	2300      	movs	r3, #0
}
 8002ecc:	4618      	mov	r0, r3
 8002ece:	3718      	adds	r7, #24
 8002ed0:	46bd      	mov	sp, r7
 8002ed2:	bd80      	pop	{r7, pc}
 8002ed4:	40007000 	.word	0x40007000
 8002ed8:	40023800 	.word	0x40023800
 8002edc:	42470060 	.word	0x42470060

08002ee0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002ee0:	b580      	push	{r7, lr}
 8002ee2:	b084      	sub	sp, #16
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	6078      	str	r0, [r7, #4]
 8002ee8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d101      	bne.n	8002ef4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002ef0:	2301      	movs	r3, #1
 8002ef2:	e0cc      	b.n	800308e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002ef4:	4b68      	ldr	r3, [pc, #416]	; (8003098 <HAL_RCC_ClockConfig+0x1b8>)
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f003 0307 	and.w	r3, r3, #7
 8002efc:	683a      	ldr	r2, [r7, #0]
 8002efe:	429a      	cmp	r2, r3
 8002f00:	d90c      	bls.n	8002f1c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f02:	4b65      	ldr	r3, [pc, #404]	; (8003098 <HAL_RCC_ClockConfig+0x1b8>)
 8002f04:	683a      	ldr	r2, [r7, #0]
 8002f06:	b2d2      	uxtb	r2, r2
 8002f08:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f0a:	4b63      	ldr	r3, [pc, #396]	; (8003098 <HAL_RCC_ClockConfig+0x1b8>)
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f003 0307 	and.w	r3, r3, #7
 8002f12:	683a      	ldr	r2, [r7, #0]
 8002f14:	429a      	cmp	r2, r3
 8002f16:	d001      	beq.n	8002f1c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002f18:	2301      	movs	r3, #1
 8002f1a:	e0b8      	b.n	800308e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	f003 0302 	and.w	r3, r3, #2
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d020      	beq.n	8002f6a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f003 0304 	and.w	r3, r3, #4
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d005      	beq.n	8002f40 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002f34:	4b59      	ldr	r3, [pc, #356]	; (800309c <HAL_RCC_ClockConfig+0x1bc>)
 8002f36:	689b      	ldr	r3, [r3, #8]
 8002f38:	4a58      	ldr	r2, [pc, #352]	; (800309c <HAL_RCC_ClockConfig+0x1bc>)
 8002f3a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002f3e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f003 0308 	and.w	r3, r3, #8
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d005      	beq.n	8002f58 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002f4c:	4b53      	ldr	r3, [pc, #332]	; (800309c <HAL_RCC_ClockConfig+0x1bc>)
 8002f4e:	689b      	ldr	r3, [r3, #8]
 8002f50:	4a52      	ldr	r2, [pc, #328]	; (800309c <HAL_RCC_ClockConfig+0x1bc>)
 8002f52:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002f56:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f58:	4b50      	ldr	r3, [pc, #320]	; (800309c <HAL_RCC_ClockConfig+0x1bc>)
 8002f5a:	689b      	ldr	r3, [r3, #8]
 8002f5c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	689b      	ldr	r3, [r3, #8]
 8002f64:	494d      	ldr	r1, [pc, #308]	; (800309c <HAL_RCC_ClockConfig+0x1bc>)
 8002f66:	4313      	orrs	r3, r2
 8002f68:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f003 0301 	and.w	r3, r3, #1
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d044      	beq.n	8003000 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	685b      	ldr	r3, [r3, #4]
 8002f7a:	2b01      	cmp	r3, #1
 8002f7c:	d107      	bne.n	8002f8e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f7e:	4b47      	ldr	r3, [pc, #284]	; (800309c <HAL_RCC_ClockConfig+0x1bc>)
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d119      	bne.n	8002fbe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f8a:	2301      	movs	r3, #1
 8002f8c:	e07f      	b.n	800308e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	685b      	ldr	r3, [r3, #4]
 8002f92:	2b02      	cmp	r3, #2
 8002f94:	d003      	beq.n	8002f9e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002f9a:	2b03      	cmp	r3, #3
 8002f9c:	d107      	bne.n	8002fae <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f9e:	4b3f      	ldr	r3, [pc, #252]	; (800309c <HAL_RCC_ClockConfig+0x1bc>)
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d109      	bne.n	8002fbe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002faa:	2301      	movs	r3, #1
 8002fac:	e06f      	b.n	800308e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002fae:	4b3b      	ldr	r3, [pc, #236]	; (800309c <HAL_RCC_ClockConfig+0x1bc>)
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	f003 0302 	and.w	r3, r3, #2
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d101      	bne.n	8002fbe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002fba:	2301      	movs	r3, #1
 8002fbc:	e067      	b.n	800308e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002fbe:	4b37      	ldr	r3, [pc, #220]	; (800309c <HAL_RCC_ClockConfig+0x1bc>)
 8002fc0:	689b      	ldr	r3, [r3, #8]
 8002fc2:	f023 0203 	bic.w	r2, r3, #3
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	685b      	ldr	r3, [r3, #4]
 8002fca:	4934      	ldr	r1, [pc, #208]	; (800309c <HAL_RCC_ClockConfig+0x1bc>)
 8002fcc:	4313      	orrs	r3, r2
 8002fce:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002fd0:	f7ff fa5a 	bl	8002488 <HAL_GetTick>
 8002fd4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002fd6:	e00a      	b.n	8002fee <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002fd8:	f7ff fa56 	bl	8002488 <HAL_GetTick>
 8002fdc:	4602      	mov	r2, r0
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	1ad3      	subs	r3, r2, r3
 8002fe2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fe6:	4293      	cmp	r3, r2
 8002fe8:	d901      	bls.n	8002fee <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002fea:	2303      	movs	r3, #3
 8002fec:	e04f      	b.n	800308e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002fee:	4b2b      	ldr	r3, [pc, #172]	; (800309c <HAL_RCC_ClockConfig+0x1bc>)
 8002ff0:	689b      	ldr	r3, [r3, #8]
 8002ff2:	f003 020c 	and.w	r2, r3, #12
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	685b      	ldr	r3, [r3, #4]
 8002ffa:	009b      	lsls	r3, r3, #2
 8002ffc:	429a      	cmp	r2, r3
 8002ffe:	d1eb      	bne.n	8002fd8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003000:	4b25      	ldr	r3, [pc, #148]	; (8003098 <HAL_RCC_ClockConfig+0x1b8>)
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	f003 0307 	and.w	r3, r3, #7
 8003008:	683a      	ldr	r2, [r7, #0]
 800300a:	429a      	cmp	r2, r3
 800300c:	d20c      	bcs.n	8003028 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800300e:	4b22      	ldr	r3, [pc, #136]	; (8003098 <HAL_RCC_ClockConfig+0x1b8>)
 8003010:	683a      	ldr	r2, [r7, #0]
 8003012:	b2d2      	uxtb	r2, r2
 8003014:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003016:	4b20      	ldr	r3, [pc, #128]	; (8003098 <HAL_RCC_ClockConfig+0x1b8>)
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	f003 0307 	and.w	r3, r3, #7
 800301e:	683a      	ldr	r2, [r7, #0]
 8003020:	429a      	cmp	r2, r3
 8003022:	d001      	beq.n	8003028 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003024:	2301      	movs	r3, #1
 8003026:	e032      	b.n	800308e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f003 0304 	and.w	r3, r3, #4
 8003030:	2b00      	cmp	r3, #0
 8003032:	d008      	beq.n	8003046 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003034:	4b19      	ldr	r3, [pc, #100]	; (800309c <HAL_RCC_ClockConfig+0x1bc>)
 8003036:	689b      	ldr	r3, [r3, #8]
 8003038:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	68db      	ldr	r3, [r3, #12]
 8003040:	4916      	ldr	r1, [pc, #88]	; (800309c <HAL_RCC_ClockConfig+0x1bc>)
 8003042:	4313      	orrs	r3, r2
 8003044:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f003 0308 	and.w	r3, r3, #8
 800304e:	2b00      	cmp	r3, #0
 8003050:	d009      	beq.n	8003066 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003052:	4b12      	ldr	r3, [pc, #72]	; (800309c <HAL_RCC_ClockConfig+0x1bc>)
 8003054:	689b      	ldr	r3, [r3, #8]
 8003056:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	691b      	ldr	r3, [r3, #16]
 800305e:	00db      	lsls	r3, r3, #3
 8003060:	490e      	ldr	r1, [pc, #56]	; (800309c <HAL_RCC_ClockConfig+0x1bc>)
 8003062:	4313      	orrs	r3, r2
 8003064:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003066:	f000 f821 	bl	80030ac <HAL_RCC_GetSysClockFreq>
 800306a:	4602      	mov	r2, r0
 800306c:	4b0b      	ldr	r3, [pc, #44]	; (800309c <HAL_RCC_ClockConfig+0x1bc>)
 800306e:	689b      	ldr	r3, [r3, #8]
 8003070:	091b      	lsrs	r3, r3, #4
 8003072:	f003 030f 	and.w	r3, r3, #15
 8003076:	490a      	ldr	r1, [pc, #40]	; (80030a0 <HAL_RCC_ClockConfig+0x1c0>)
 8003078:	5ccb      	ldrb	r3, [r1, r3]
 800307a:	fa22 f303 	lsr.w	r3, r2, r3
 800307e:	4a09      	ldr	r2, [pc, #36]	; (80030a4 <HAL_RCC_ClockConfig+0x1c4>)
 8003080:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003082:	4b09      	ldr	r3, [pc, #36]	; (80030a8 <HAL_RCC_ClockConfig+0x1c8>)
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	4618      	mov	r0, r3
 8003088:	f7ff f9ba 	bl	8002400 <HAL_InitTick>

  return HAL_OK;
 800308c:	2300      	movs	r3, #0
}
 800308e:	4618      	mov	r0, r3
 8003090:	3710      	adds	r7, #16
 8003092:	46bd      	mov	sp, r7
 8003094:	bd80      	pop	{r7, pc}
 8003096:	bf00      	nop
 8003098:	40023c00 	.word	0x40023c00
 800309c:	40023800 	.word	0x40023800
 80030a0:	08018340 	.word	0x08018340
 80030a4:	20000004 	.word	0x20000004
 80030a8:	20000008 	.word	0x20000008

080030ac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80030ac:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80030b0:	b084      	sub	sp, #16
 80030b2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80030b4:	2300      	movs	r3, #0
 80030b6:	607b      	str	r3, [r7, #4]
 80030b8:	2300      	movs	r3, #0
 80030ba:	60fb      	str	r3, [r7, #12]
 80030bc:	2300      	movs	r3, #0
 80030be:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80030c0:	2300      	movs	r3, #0
 80030c2:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80030c4:	4b67      	ldr	r3, [pc, #412]	; (8003264 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80030c6:	689b      	ldr	r3, [r3, #8]
 80030c8:	f003 030c 	and.w	r3, r3, #12
 80030cc:	2b08      	cmp	r3, #8
 80030ce:	d00d      	beq.n	80030ec <HAL_RCC_GetSysClockFreq+0x40>
 80030d0:	2b08      	cmp	r3, #8
 80030d2:	f200 80bd 	bhi.w	8003250 <HAL_RCC_GetSysClockFreq+0x1a4>
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d002      	beq.n	80030e0 <HAL_RCC_GetSysClockFreq+0x34>
 80030da:	2b04      	cmp	r3, #4
 80030dc:	d003      	beq.n	80030e6 <HAL_RCC_GetSysClockFreq+0x3a>
 80030de:	e0b7      	b.n	8003250 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80030e0:	4b61      	ldr	r3, [pc, #388]	; (8003268 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80030e2:	60bb      	str	r3, [r7, #8]
       break;
 80030e4:	e0b7      	b.n	8003256 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80030e6:	4b61      	ldr	r3, [pc, #388]	; (800326c <HAL_RCC_GetSysClockFreq+0x1c0>)
 80030e8:	60bb      	str	r3, [r7, #8]
      break;
 80030ea:	e0b4      	b.n	8003256 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80030ec:	4b5d      	ldr	r3, [pc, #372]	; (8003264 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80030ee:	685b      	ldr	r3, [r3, #4]
 80030f0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80030f4:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80030f6:	4b5b      	ldr	r3, [pc, #364]	; (8003264 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80030f8:	685b      	ldr	r3, [r3, #4]
 80030fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d04d      	beq.n	800319e <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003102:	4b58      	ldr	r3, [pc, #352]	; (8003264 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003104:	685b      	ldr	r3, [r3, #4]
 8003106:	099b      	lsrs	r3, r3, #6
 8003108:	461a      	mov	r2, r3
 800310a:	f04f 0300 	mov.w	r3, #0
 800310e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003112:	f04f 0100 	mov.w	r1, #0
 8003116:	ea02 0800 	and.w	r8, r2, r0
 800311a:	ea03 0901 	and.w	r9, r3, r1
 800311e:	4640      	mov	r0, r8
 8003120:	4649      	mov	r1, r9
 8003122:	f04f 0200 	mov.w	r2, #0
 8003126:	f04f 0300 	mov.w	r3, #0
 800312a:	014b      	lsls	r3, r1, #5
 800312c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003130:	0142      	lsls	r2, r0, #5
 8003132:	4610      	mov	r0, r2
 8003134:	4619      	mov	r1, r3
 8003136:	ebb0 0008 	subs.w	r0, r0, r8
 800313a:	eb61 0109 	sbc.w	r1, r1, r9
 800313e:	f04f 0200 	mov.w	r2, #0
 8003142:	f04f 0300 	mov.w	r3, #0
 8003146:	018b      	lsls	r3, r1, #6
 8003148:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800314c:	0182      	lsls	r2, r0, #6
 800314e:	1a12      	subs	r2, r2, r0
 8003150:	eb63 0301 	sbc.w	r3, r3, r1
 8003154:	f04f 0000 	mov.w	r0, #0
 8003158:	f04f 0100 	mov.w	r1, #0
 800315c:	00d9      	lsls	r1, r3, #3
 800315e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003162:	00d0      	lsls	r0, r2, #3
 8003164:	4602      	mov	r2, r0
 8003166:	460b      	mov	r3, r1
 8003168:	eb12 0208 	adds.w	r2, r2, r8
 800316c:	eb43 0309 	adc.w	r3, r3, r9
 8003170:	f04f 0000 	mov.w	r0, #0
 8003174:	f04f 0100 	mov.w	r1, #0
 8003178:	0259      	lsls	r1, r3, #9
 800317a:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800317e:	0250      	lsls	r0, r2, #9
 8003180:	4602      	mov	r2, r0
 8003182:	460b      	mov	r3, r1
 8003184:	4610      	mov	r0, r2
 8003186:	4619      	mov	r1, r3
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	461a      	mov	r2, r3
 800318c:	f04f 0300 	mov.w	r3, #0
 8003190:	f7fd fd6c 	bl	8000c6c <__aeabi_uldivmod>
 8003194:	4602      	mov	r2, r0
 8003196:	460b      	mov	r3, r1
 8003198:	4613      	mov	r3, r2
 800319a:	60fb      	str	r3, [r7, #12]
 800319c:	e04a      	b.n	8003234 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800319e:	4b31      	ldr	r3, [pc, #196]	; (8003264 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80031a0:	685b      	ldr	r3, [r3, #4]
 80031a2:	099b      	lsrs	r3, r3, #6
 80031a4:	461a      	mov	r2, r3
 80031a6:	f04f 0300 	mov.w	r3, #0
 80031aa:	f240 10ff 	movw	r0, #511	; 0x1ff
 80031ae:	f04f 0100 	mov.w	r1, #0
 80031b2:	ea02 0400 	and.w	r4, r2, r0
 80031b6:	ea03 0501 	and.w	r5, r3, r1
 80031ba:	4620      	mov	r0, r4
 80031bc:	4629      	mov	r1, r5
 80031be:	f04f 0200 	mov.w	r2, #0
 80031c2:	f04f 0300 	mov.w	r3, #0
 80031c6:	014b      	lsls	r3, r1, #5
 80031c8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80031cc:	0142      	lsls	r2, r0, #5
 80031ce:	4610      	mov	r0, r2
 80031d0:	4619      	mov	r1, r3
 80031d2:	1b00      	subs	r0, r0, r4
 80031d4:	eb61 0105 	sbc.w	r1, r1, r5
 80031d8:	f04f 0200 	mov.w	r2, #0
 80031dc:	f04f 0300 	mov.w	r3, #0
 80031e0:	018b      	lsls	r3, r1, #6
 80031e2:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80031e6:	0182      	lsls	r2, r0, #6
 80031e8:	1a12      	subs	r2, r2, r0
 80031ea:	eb63 0301 	sbc.w	r3, r3, r1
 80031ee:	f04f 0000 	mov.w	r0, #0
 80031f2:	f04f 0100 	mov.w	r1, #0
 80031f6:	00d9      	lsls	r1, r3, #3
 80031f8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80031fc:	00d0      	lsls	r0, r2, #3
 80031fe:	4602      	mov	r2, r0
 8003200:	460b      	mov	r3, r1
 8003202:	1912      	adds	r2, r2, r4
 8003204:	eb45 0303 	adc.w	r3, r5, r3
 8003208:	f04f 0000 	mov.w	r0, #0
 800320c:	f04f 0100 	mov.w	r1, #0
 8003210:	0299      	lsls	r1, r3, #10
 8003212:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8003216:	0290      	lsls	r0, r2, #10
 8003218:	4602      	mov	r2, r0
 800321a:	460b      	mov	r3, r1
 800321c:	4610      	mov	r0, r2
 800321e:	4619      	mov	r1, r3
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	461a      	mov	r2, r3
 8003224:	f04f 0300 	mov.w	r3, #0
 8003228:	f7fd fd20 	bl	8000c6c <__aeabi_uldivmod>
 800322c:	4602      	mov	r2, r0
 800322e:	460b      	mov	r3, r1
 8003230:	4613      	mov	r3, r2
 8003232:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003234:	4b0b      	ldr	r3, [pc, #44]	; (8003264 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003236:	685b      	ldr	r3, [r3, #4]
 8003238:	0c1b      	lsrs	r3, r3, #16
 800323a:	f003 0303 	and.w	r3, r3, #3
 800323e:	3301      	adds	r3, #1
 8003240:	005b      	lsls	r3, r3, #1
 8003242:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003244:	68fa      	ldr	r2, [r7, #12]
 8003246:	683b      	ldr	r3, [r7, #0]
 8003248:	fbb2 f3f3 	udiv	r3, r2, r3
 800324c:	60bb      	str	r3, [r7, #8]
      break;
 800324e:	e002      	b.n	8003256 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003250:	4b05      	ldr	r3, [pc, #20]	; (8003268 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8003252:	60bb      	str	r3, [r7, #8]
      break;
 8003254:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003256:	68bb      	ldr	r3, [r7, #8]
}
 8003258:	4618      	mov	r0, r3
 800325a:	3710      	adds	r7, #16
 800325c:	46bd      	mov	sp, r7
 800325e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003262:	bf00      	nop
 8003264:	40023800 	.word	0x40023800
 8003268:	00f42400 	.word	0x00f42400
 800326c:	007a1200 	.word	0x007a1200

08003270 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003270:	b480      	push	{r7}
 8003272:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003274:	4b03      	ldr	r3, [pc, #12]	; (8003284 <HAL_RCC_GetHCLKFreq+0x14>)
 8003276:	681b      	ldr	r3, [r3, #0]
}
 8003278:	4618      	mov	r0, r3
 800327a:	46bd      	mov	sp, r7
 800327c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003280:	4770      	bx	lr
 8003282:	bf00      	nop
 8003284:	20000004 	.word	0x20000004

08003288 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003288:	b580      	push	{r7, lr}
 800328a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800328c:	f7ff fff0 	bl	8003270 <HAL_RCC_GetHCLKFreq>
 8003290:	4602      	mov	r2, r0
 8003292:	4b05      	ldr	r3, [pc, #20]	; (80032a8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003294:	689b      	ldr	r3, [r3, #8]
 8003296:	0a9b      	lsrs	r3, r3, #10
 8003298:	f003 0307 	and.w	r3, r3, #7
 800329c:	4903      	ldr	r1, [pc, #12]	; (80032ac <HAL_RCC_GetPCLK1Freq+0x24>)
 800329e:	5ccb      	ldrb	r3, [r1, r3]
 80032a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80032a4:	4618      	mov	r0, r3
 80032a6:	bd80      	pop	{r7, pc}
 80032a8:	40023800 	.word	0x40023800
 80032ac:	08018350 	.word	0x08018350

080032b0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80032b0:	b580      	push	{r7, lr}
 80032b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80032b4:	f7ff ffdc 	bl	8003270 <HAL_RCC_GetHCLKFreq>
 80032b8:	4602      	mov	r2, r0
 80032ba:	4b05      	ldr	r3, [pc, #20]	; (80032d0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80032bc:	689b      	ldr	r3, [r3, #8]
 80032be:	0b5b      	lsrs	r3, r3, #13
 80032c0:	f003 0307 	and.w	r3, r3, #7
 80032c4:	4903      	ldr	r1, [pc, #12]	; (80032d4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80032c6:	5ccb      	ldrb	r3, [r1, r3]
 80032c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80032cc:	4618      	mov	r0, r3
 80032ce:	bd80      	pop	{r7, pc}
 80032d0:	40023800 	.word	0x40023800
 80032d4:	08018350 	.word	0x08018350

080032d8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80032d8:	b580      	push	{r7, lr}
 80032da:	b082      	sub	sp, #8
 80032dc:	af00      	add	r7, sp, #0
 80032de:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d101      	bne.n	80032ea <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80032e6:	2301      	movs	r3, #1
 80032e8:	e041      	b.n	800336e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80032f0:	b2db      	uxtb	r3, r3
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d106      	bne.n	8003304 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	2200      	movs	r2, #0
 80032fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80032fe:	6878      	ldr	r0, [r7, #4]
 8003300:	f7fe fe5c 	bl	8001fbc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	2202      	movs	r2, #2
 8003308:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681a      	ldr	r2, [r3, #0]
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	3304      	adds	r3, #4
 8003314:	4619      	mov	r1, r3
 8003316:	4610      	mov	r0, r2
 8003318:	f000 f82e 	bl	8003378 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	2201      	movs	r2, #1
 8003320:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	2201      	movs	r2, #1
 8003328:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	2201      	movs	r2, #1
 8003330:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	2201      	movs	r2, #1
 8003338:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	2201      	movs	r2, #1
 8003340:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	2201      	movs	r2, #1
 8003348:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	2201      	movs	r2, #1
 8003350:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	2201      	movs	r2, #1
 8003358:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	2201      	movs	r2, #1
 8003360:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	2201      	movs	r2, #1
 8003368:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800336c:	2300      	movs	r3, #0
}
 800336e:	4618      	mov	r0, r3
 8003370:	3708      	adds	r7, #8
 8003372:	46bd      	mov	sp, r7
 8003374:	bd80      	pop	{r7, pc}
	...

08003378 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003378:	b480      	push	{r7}
 800337a:	b085      	sub	sp, #20
 800337c:	af00      	add	r7, sp, #0
 800337e:	6078      	str	r0, [r7, #4]
 8003380:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	4a34      	ldr	r2, [pc, #208]	; (800345c <TIM_Base_SetConfig+0xe4>)
 800338c:	4293      	cmp	r3, r2
 800338e:	d00f      	beq.n	80033b0 <TIM_Base_SetConfig+0x38>
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003396:	d00b      	beq.n	80033b0 <TIM_Base_SetConfig+0x38>
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	4a31      	ldr	r2, [pc, #196]	; (8003460 <TIM_Base_SetConfig+0xe8>)
 800339c:	4293      	cmp	r3, r2
 800339e:	d007      	beq.n	80033b0 <TIM_Base_SetConfig+0x38>
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	4a30      	ldr	r2, [pc, #192]	; (8003464 <TIM_Base_SetConfig+0xec>)
 80033a4:	4293      	cmp	r3, r2
 80033a6:	d003      	beq.n	80033b0 <TIM_Base_SetConfig+0x38>
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	4a2f      	ldr	r2, [pc, #188]	; (8003468 <TIM_Base_SetConfig+0xf0>)
 80033ac:	4293      	cmp	r3, r2
 80033ae:	d108      	bne.n	80033c2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80033b6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80033b8:	683b      	ldr	r3, [r7, #0]
 80033ba:	685b      	ldr	r3, [r3, #4]
 80033bc:	68fa      	ldr	r2, [r7, #12]
 80033be:	4313      	orrs	r3, r2
 80033c0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	4a25      	ldr	r2, [pc, #148]	; (800345c <TIM_Base_SetConfig+0xe4>)
 80033c6:	4293      	cmp	r3, r2
 80033c8:	d01b      	beq.n	8003402 <TIM_Base_SetConfig+0x8a>
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80033d0:	d017      	beq.n	8003402 <TIM_Base_SetConfig+0x8a>
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	4a22      	ldr	r2, [pc, #136]	; (8003460 <TIM_Base_SetConfig+0xe8>)
 80033d6:	4293      	cmp	r3, r2
 80033d8:	d013      	beq.n	8003402 <TIM_Base_SetConfig+0x8a>
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	4a21      	ldr	r2, [pc, #132]	; (8003464 <TIM_Base_SetConfig+0xec>)
 80033de:	4293      	cmp	r3, r2
 80033e0:	d00f      	beq.n	8003402 <TIM_Base_SetConfig+0x8a>
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	4a20      	ldr	r2, [pc, #128]	; (8003468 <TIM_Base_SetConfig+0xf0>)
 80033e6:	4293      	cmp	r3, r2
 80033e8:	d00b      	beq.n	8003402 <TIM_Base_SetConfig+0x8a>
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	4a1f      	ldr	r2, [pc, #124]	; (800346c <TIM_Base_SetConfig+0xf4>)
 80033ee:	4293      	cmp	r3, r2
 80033f0:	d007      	beq.n	8003402 <TIM_Base_SetConfig+0x8a>
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	4a1e      	ldr	r2, [pc, #120]	; (8003470 <TIM_Base_SetConfig+0xf8>)
 80033f6:	4293      	cmp	r3, r2
 80033f8:	d003      	beq.n	8003402 <TIM_Base_SetConfig+0x8a>
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	4a1d      	ldr	r2, [pc, #116]	; (8003474 <TIM_Base_SetConfig+0xfc>)
 80033fe:	4293      	cmp	r3, r2
 8003400:	d108      	bne.n	8003414 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003408:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800340a:	683b      	ldr	r3, [r7, #0]
 800340c:	68db      	ldr	r3, [r3, #12]
 800340e:	68fa      	ldr	r2, [r7, #12]
 8003410:	4313      	orrs	r3, r2
 8003412:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800341a:	683b      	ldr	r3, [r7, #0]
 800341c:	695b      	ldr	r3, [r3, #20]
 800341e:	4313      	orrs	r3, r2
 8003420:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	68fa      	ldr	r2, [r7, #12]
 8003426:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003428:	683b      	ldr	r3, [r7, #0]
 800342a:	689a      	ldr	r2, [r3, #8]
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003430:	683b      	ldr	r3, [r7, #0]
 8003432:	681a      	ldr	r2, [r3, #0]
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	4a08      	ldr	r2, [pc, #32]	; (800345c <TIM_Base_SetConfig+0xe4>)
 800343c:	4293      	cmp	r3, r2
 800343e:	d103      	bne.n	8003448 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003440:	683b      	ldr	r3, [r7, #0]
 8003442:	691a      	ldr	r2, [r3, #16]
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	2201      	movs	r2, #1
 800344c:	615a      	str	r2, [r3, #20]
}
 800344e:	bf00      	nop
 8003450:	3714      	adds	r7, #20
 8003452:	46bd      	mov	sp, r7
 8003454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003458:	4770      	bx	lr
 800345a:	bf00      	nop
 800345c:	40010000 	.word	0x40010000
 8003460:	40000400 	.word	0x40000400
 8003464:	40000800 	.word	0x40000800
 8003468:	40000c00 	.word	0x40000c00
 800346c:	40014000 	.word	0x40014000
 8003470:	40014400 	.word	0x40014400
 8003474:	40014800 	.word	0x40014800

08003478 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003478:	b580      	push	{r7, lr}
 800347a:	b082      	sub	sp, #8
 800347c:	af00      	add	r7, sp, #0
 800347e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	2b00      	cmp	r3, #0
 8003484:	d101      	bne.n	800348a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003486:	2301      	movs	r3, #1
 8003488:	e03f      	b.n	800350a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003490:	b2db      	uxtb	r3, r3
 8003492:	2b00      	cmp	r3, #0
 8003494:	d106      	bne.n	80034a4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	2200      	movs	r2, #0
 800349a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800349e:	6878      	ldr	r0, [r7, #4]
 80034a0:	f7fe fdae 	bl	8002000 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	2224      	movs	r2, #36	; 0x24
 80034a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	68da      	ldr	r2, [r3, #12]
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80034ba:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80034bc:	6878      	ldr	r0, [r7, #4]
 80034be:	f000 f959 	bl	8003774 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	691a      	ldr	r2, [r3, #16]
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80034d0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	695a      	ldr	r2, [r3, #20]
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80034e0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	68da      	ldr	r2, [r3, #12]
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80034f0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	2200      	movs	r2, #0
 80034f6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	2220      	movs	r2, #32
 80034fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	2220      	movs	r2, #32
 8003504:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003508:	2300      	movs	r3, #0
}
 800350a:	4618      	mov	r0, r3
 800350c:	3708      	adds	r7, #8
 800350e:	46bd      	mov	sp, r7
 8003510:	bd80      	pop	{r7, pc}

08003512 <HAL_HalfDuplex_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
{
 8003512:	b580      	push	{r7, lr}
 8003514:	b082      	sub	sp, #8
 8003516:	af00      	add	r7, sp, #0
 8003518:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	2b00      	cmp	r3, #0
 800351e:	d101      	bne.n	8003524 <HAL_HalfDuplex_Init+0x12>
  {
    return HAL_ERROR;
 8003520:	2301      	movs	r3, #1
 8003522:	e047      	b.n	80035b4 <HAL_HalfDuplex_Init+0xa2>
  /* Check the parameters */
  assert_param(IS_UART_HALFDUPLEX_INSTANCE(huart->Instance));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800352a:	b2db      	uxtb	r3, r3
 800352c:	2b00      	cmp	r3, #0
 800352e:	d106      	bne.n	800353e <HAL_HalfDuplex_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	2200      	movs	r2, #0
 8003534:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003538:	6878      	ldr	r0, [r7, #4]
 800353a:	f7fe fd61 	bl	8002000 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	2224      	movs	r2, #36	; 0x24
 8003542:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	68da      	ldr	r2, [r3, #12]
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003554:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003556:	6878      	ldr	r0, [r7, #4]
 8003558:	f000 f90c 	bl	8003774 <UART_SetConfig>

  /* In half-duplex mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	691a      	ldr	r2, [r3, #16]
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800356a:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	695a      	ldr	r2, [r3, #20]
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	f022 0222 	bic.w	r2, r2, #34	; 0x22
 800357a:	615a      	str	r2, [r3, #20]

  /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	695a      	ldr	r2, [r3, #20]
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	f042 0208 	orr.w	r2, r2, #8
 800358a:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	68da      	ldr	r2, [r3, #12]
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800359a:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state*/
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	2200      	movs	r2, #0
 80035a0:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	2220      	movs	r2, #32
 80035a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	2220      	movs	r2, #32
 80035ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80035b2:	2300      	movs	r3, #0
}
 80035b4:	4618      	mov	r0, r3
 80035b6:	3708      	adds	r7, #8
 80035b8:	46bd      	mov	sp, r7
 80035ba:	bd80      	pop	{r7, pc}

080035bc <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80035bc:	b580      	push	{r7, lr}
 80035be:	b08a      	sub	sp, #40	; 0x28
 80035c0:	af02      	add	r7, sp, #8
 80035c2:	60f8      	str	r0, [r7, #12]
 80035c4:	60b9      	str	r1, [r7, #8]
 80035c6:	603b      	str	r3, [r7, #0]
 80035c8:	4613      	mov	r3, r2
 80035ca:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80035cc:	2300      	movs	r3, #0
 80035ce:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80035d6:	b2db      	uxtb	r3, r3
 80035d8:	2b20      	cmp	r3, #32
 80035da:	d17c      	bne.n	80036d6 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80035dc:	68bb      	ldr	r3, [r7, #8]
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d002      	beq.n	80035e8 <HAL_UART_Transmit+0x2c>
 80035e2:	88fb      	ldrh	r3, [r7, #6]
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d101      	bne.n	80035ec <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80035e8:	2301      	movs	r3, #1
 80035ea:	e075      	b.n	80036d8 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80035f2:	2b01      	cmp	r3, #1
 80035f4:	d101      	bne.n	80035fa <HAL_UART_Transmit+0x3e>
 80035f6:	2302      	movs	r3, #2
 80035f8:	e06e      	b.n	80036d8 <HAL_UART_Transmit+0x11c>
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	2201      	movs	r2, #1
 80035fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	2200      	movs	r2, #0
 8003606:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	2221      	movs	r2, #33	; 0x21
 800360c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003610:	f7fe ff3a 	bl	8002488 <HAL_GetTick>
 8003614:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	88fa      	ldrh	r2, [r7, #6]
 800361a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	88fa      	ldrh	r2, [r7, #6]
 8003620:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	689b      	ldr	r3, [r3, #8]
 8003626:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800362a:	d108      	bne.n	800363e <HAL_UART_Transmit+0x82>
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	691b      	ldr	r3, [r3, #16]
 8003630:	2b00      	cmp	r3, #0
 8003632:	d104      	bne.n	800363e <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003634:	2300      	movs	r3, #0
 8003636:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003638:	68bb      	ldr	r3, [r7, #8]
 800363a:	61bb      	str	r3, [r7, #24]
 800363c:	e003      	b.n	8003646 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800363e:	68bb      	ldr	r3, [r7, #8]
 8003640:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003642:	2300      	movs	r3, #0
 8003644:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	2200      	movs	r2, #0
 800364a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800364e:	e02a      	b.n	80036a6 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003650:	683b      	ldr	r3, [r7, #0]
 8003652:	9300      	str	r3, [sp, #0]
 8003654:	697b      	ldr	r3, [r7, #20]
 8003656:	2200      	movs	r2, #0
 8003658:	2180      	movs	r1, #128	; 0x80
 800365a:	68f8      	ldr	r0, [r7, #12]
 800365c:	f000 f840 	bl	80036e0 <UART_WaitOnFlagUntilTimeout>
 8003660:	4603      	mov	r3, r0
 8003662:	2b00      	cmp	r3, #0
 8003664:	d001      	beq.n	800366a <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003666:	2303      	movs	r3, #3
 8003668:	e036      	b.n	80036d8 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800366a:	69fb      	ldr	r3, [r7, #28]
 800366c:	2b00      	cmp	r3, #0
 800366e:	d10b      	bne.n	8003688 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003670:	69bb      	ldr	r3, [r7, #24]
 8003672:	881b      	ldrh	r3, [r3, #0]
 8003674:	461a      	mov	r2, r3
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800367e:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003680:	69bb      	ldr	r3, [r7, #24]
 8003682:	3302      	adds	r3, #2
 8003684:	61bb      	str	r3, [r7, #24]
 8003686:	e007      	b.n	8003698 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003688:	69fb      	ldr	r3, [r7, #28]
 800368a:	781a      	ldrb	r2, [r3, #0]
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003692:	69fb      	ldr	r3, [r7, #28]
 8003694:	3301      	adds	r3, #1
 8003696:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800369c:	b29b      	uxth	r3, r3
 800369e:	3b01      	subs	r3, #1
 80036a0:	b29a      	uxth	r2, r3
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80036aa:	b29b      	uxth	r3, r3
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d1cf      	bne.n	8003650 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80036b0:	683b      	ldr	r3, [r7, #0]
 80036b2:	9300      	str	r3, [sp, #0]
 80036b4:	697b      	ldr	r3, [r7, #20]
 80036b6:	2200      	movs	r2, #0
 80036b8:	2140      	movs	r1, #64	; 0x40
 80036ba:	68f8      	ldr	r0, [r7, #12]
 80036bc:	f000 f810 	bl	80036e0 <UART_WaitOnFlagUntilTimeout>
 80036c0:	4603      	mov	r3, r0
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d001      	beq.n	80036ca <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80036c6:	2303      	movs	r3, #3
 80036c8:	e006      	b.n	80036d8 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	2220      	movs	r2, #32
 80036ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80036d2:	2300      	movs	r3, #0
 80036d4:	e000      	b.n	80036d8 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80036d6:	2302      	movs	r3, #2
  }
}
 80036d8:	4618      	mov	r0, r3
 80036da:	3720      	adds	r7, #32
 80036dc:	46bd      	mov	sp, r7
 80036de:	bd80      	pop	{r7, pc}

080036e0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80036e0:	b580      	push	{r7, lr}
 80036e2:	b084      	sub	sp, #16
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	60f8      	str	r0, [r7, #12]
 80036e8:	60b9      	str	r1, [r7, #8]
 80036ea:	603b      	str	r3, [r7, #0]
 80036ec:	4613      	mov	r3, r2
 80036ee:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80036f0:	e02c      	b.n	800374c <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80036f2:	69bb      	ldr	r3, [r7, #24]
 80036f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036f8:	d028      	beq.n	800374c <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80036fa:	69bb      	ldr	r3, [r7, #24]
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d007      	beq.n	8003710 <UART_WaitOnFlagUntilTimeout+0x30>
 8003700:	f7fe fec2 	bl	8002488 <HAL_GetTick>
 8003704:	4602      	mov	r2, r0
 8003706:	683b      	ldr	r3, [r7, #0]
 8003708:	1ad3      	subs	r3, r2, r3
 800370a:	69ba      	ldr	r2, [r7, #24]
 800370c:	429a      	cmp	r2, r3
 800370e:	d21d      	bcs.n	800374c <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	68da      	ldr	r2, [r3, #12]
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800371e:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	695a      	ldr	r2, [r3, #20]
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f022 0201 	bic.w	r2, r2, #1
 800372e:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	2220      	movs	r2, #32
 8003734:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	2220      	movs	r2, #32
 800373c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	2200      	movs	r2, #0
 8003744:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003748:	2303      	movs	r3, #3
 800374a:	e00f      	b.n	800376c <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	681a      	ldr	r2, [r3, #0]
 8003752:	68bb      	ldr	r3, [r7, #8]
 8003754:	4013      	ands	r3, r2
 8003756:	68ba      	ldr	r2, [r7, #8]
 8003758:	429a      	cmp	r2, r3
 800375a:	bf0c      	ite	eq
 800375c:	2301      	moveq	r3, #1
 800375e:	2300      	movne	r3, #0
 8003760:	b2db      	uxtb	r3, r3
 8003762:	461a      	mov	r2, r3
 8003764:	79fb      	ldrb	r3, [r7, #7]
 8003766:	429a      	cmp	r2, r3
 8003768:	d0c3      	beq.n	80036f2 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800376a:	2300      	movs	r3, #0
}
 800376c:	4618      	mov	r0, r3
 800376e:	3710      	adds	r7, #16
 8003770:	46bd      	mov	sp, r7
 8003772:	bd80      	pop	{r7, pc}

08003774 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003774:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003778:	b09f      	sub	sp, #124	; 0x7c
 800377a:	af00      	add	r7, sp, #0
 800377c:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800377e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	691b      	ldr	r3, [r3, #16]
 8003784:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003788:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800378a:	68d9      	ldr	r1, [r3, #12]
 800378c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800378e:	681a      	ldr	r2, [r3, #0]
 8003790:	ea40 0301 	orr.w	r3, r0, r1
 8003794:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003796:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003798:	689a      	ldr	r2, [r3, #8]
 800379a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800379c:	691b      	ldr	r3, [r3, #16]
 800379e:	431a      	orrs	r2, r3
 80037a0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80037a2:	695b      	ldr	r3, [r3, #20]
 80037a4:	431a      	orrs	r2, r3
 80037a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80037a8:	69db      	ldr	r3, [r3, #28]
 80037aa:	4313      	orrs	r3, r2
 80037ac:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 80037ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	68db      	ldr	r3, [r3, #12]
 80037b4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80037b8:	f021 010c 	bic.w	r1, r1, #12
 80037bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80037be:	681a      	ldr	r2, [r3, #0]
 80037c0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80037c2:	430b      	orrs	r3, r1
 80037c4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80037c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	695b      	ldr	r3, [r3, #20]
 80037cc:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80037d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80037d2:	6999      	ldr	r1, [r3, #24]
 80037d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80037d6:	681a      	ldr	r2, [r3, #0]
 80037d8:	ea40 0301 	orr.w	r3, r0, r1
 80037dc:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80037de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80037e0:	681a      	ldr	r2, [r3, #0]
 80037e2:	4bc5      	ldr	r3, [pc, #788]	; (8003af8 <UART_SetConfig+0x384>)
 80037e4:	429a      	cmp	r2, r3
 80037e6:	d004      	beq.n	80037f2 <UART_SetConfig+0x7e>
 80037e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80037ea:	681a      	ldr	r2, [r3, #0]
 80037ec:	4bc3      	ldr	r3, [pc, #780]	; (8003afc <UART_SetConfig+0x388>)
 80037ee:	429a      	cmp	r2, r3
 80037f0:	d103      	bne.n	80037fa <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80037f2:	f7ff fd5d 	bl	80032b0 <HAL_RCC_GetPCLK2Freq>
 80037f6:	6778      	str	r0, [r7, #116]	; 0x74
 80037f8:	e002      	b.n	8003800 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80037fa:	f7ff fd45 	bl	8003288 <HAL_RCC_GetPCLK1Freq>
 80037fe:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003800:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003802:	69db      	ldr	r3, [r3, #28]
 8003804:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003808:	f040 80b6 	bne.w	8003978 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800380c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800380e:	461c      	mov	r4, r3
 8003810:	f04f 0500 	mov.w	r5, #0
 8003814:	4622      	mov	r2, r4
 8003816:	462b      	mov	r3, r5
 8003818:	1891      	adds	r1, r2, r2
 800381a:	6439      	str	r1, [r7, #64]	; 0x40
 800381c:	415b      	adcs	r3, r3
 800381e:	647b      	str	r3, [r7, #68]	; 0x44
 8003820:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003824:	1912      	adds	r2, r2, r4
 8003826:	eb45 0303 	adc.w	r3, r5, r3
 800382a:	f04f 0000 	mov.w	r0, #0
 800382e:	f04f 0100 	mov.w	r1, #0
 8003832:	00d9      	lsls	r1, r3, #3
 8003834:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003838:	00d0      	lsls	r0, r2, #3
 800383a:	4602      	mov	r2, r0
 800383c:	460b      	mov	r3, r1
 800383e:	1911      	adds	r1, r2, r4
 8003840:	6639      	str	r1, [r7, #96]	; 0x60
 8003842:	416b      	adcs	r3, r5
 8003844:	667b      	str	r3, [r7, #100]	; 0x64
 8003846:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003848:	685b      	ldr	r3, [r3, #4]
 800384a:	461a      	mov	r2, r3
 800384c:	f04f 0300 	mov.w	r3, #0
 8003850:	1891      	adds	r1, r2, r2
 8003852:	63b9      	str	r1, [r7, #56]	; 0x38
 8003854:	415b      	adcs	r3, r3
 8003856:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003858:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800385c:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8003860:	f7fd fa04 	bl	8000c6c <__aeabi_uldivmod>
 8003864:	4602      	mov	r2, r0
 8003866:	460b      	mov	r3, r1
 8003868:	4ba5      	ldr	r3, [pc, #660]	; (8003b00 <UART_SetConfig+0x38c>)
 800386a:	fba3 2302 	umull	r2, r3, r3, r2
 800386e:	095b      	lsrs	r3, r3, #5
 8003870:	011e      	lsls	r6, r3, #4
 8003872:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003874:	461c      	mov	r4, r3
 8003876:	f04f 0500 	mov.w	r5, #0
 800387a:	4622      	mov	r2, r4
 800387c:	462b      	mov	r3, r5
 800387e:	1891      	adds	r1, r2, r2
 8003880:	6339      	str	r1, [r7, #48]	; 0x30
 8003882:	415b      	adcs	r3, r3
 8003884:	637b      	str	r3, [r7, #52]	; 0x34
 8003886:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800388a:	1912      	adds	r2, r2, r4
 800388c:	eb45 0303 	adc.w	r3, r5, r3
 8003890:	f04f 0000 	mov.w	r0, #0
 8003894:	f04f 0100 	mov.w	r1, #0
 8003898:	00d9      	lsls	r1, r3, #3
 800389a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800389e:	00d0      	lsls	r0, r2, #3
 80038a0:	4602      	mov	r2, r0
 80038a2:	460b      	mov	r3, r1
 80038a4:	1911      	adds	r1, r2, r4
 80038a6:	65b9      	str	r1, [r7, #88]	; 0x58
 80038a8:	416b      	adcs	r3, r5
 80038aa:	65fb      	str	r3, [r7, #92]	; 0x5c
 80038ac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80038ae:	685b      	ldr	r3, [r3, #4]
 80038b0:	461a      	mov	r2, r3
 80038b2:	f04f 0300 	mov.w	r3, #0
 80038b6:	1891      	adds	r1, r2, r2
 80038b8:	62b9      	str	r1, [r7, #40]	; 0x28
 80038ba:	415b      	adcs	r3, r3
 80038bc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80038be:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80038c2:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80038c6:	f7fd f9d1 	bl	8000c6c <__aeabi_uldivmod>
 80038ca:	4602      	mov	r2, r0
 80038cc:	460b      	mov	r3, r1
 80038ce:	4b8c      	ldr	r3, [pc, #560]	; (8003b00 <UART_SetConfig+0x38c>)
 80038d0:	fba3 1302 	umull	r1, r3, r3, r2
 80038d4:	095b      	lsrs	r3, r3, #5
 80038d6:	2164      	movs	r1, #100	; 0x64
 80038d8:	fb01 f303 	mul.w	r3, r1, r3
 80038dc:	1ad3      	subs	r3, r2, r3
 80038de:	00db      	lsls	r3, r3, #3
 80038e0:	3332      	adds	r3, #50	; 0x32
 80038e2:	4a87      	ldr	r2, [pc, #540]	; (8003b00 <UART_SetConfig+0x38c>)
 80038e4:	fba2 2303 	umull	r2, r3, r2, r3
 80038e8:	095b      	lsrs	r3, r3, #5
 80038ea:	005b      	lsls	r3, r3, #1
 80038ec:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80038f0:	441e      	add	r6, r3
 80038f2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80038f4:	4618      	mov	r0, r3
 80038f6:	f04f 0100 	mov.w	r1, #0
 80038fa:	4602      	mov	r2, r0
 80038fc:	460b      	mov	r3, r1
 80038fe:	1894      	adds	r4, r2, r2
 8003900:	623c      	str	r4, [r7, #32]
 8003902:	415b      	adcs	r3, r3
 8003904:	627b      	str	r3, [r7, #36]	; 0x24
 8003906:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800390a:	1812      	adds	r2, r2, r0
 800390c:	eb41 0303 	adc.w	r3, r1, r3
 8003910:	f04f 0400 	mov.w	r4, #0
 8003914:	f04f 0500 	mov.w	r5, #0
 8003918:	00dd      	lsls	r5, r3, #3
 800391a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800391e:	00d4      	lsls	r4, r2, #3
 8003920:	4622      	mov	r2, r4
 8003922:	462b      	mov	r3, r5
 8003924:	1814      	adds	r4, r2, r0
 8003926:	653c      	str	r4, [r7, #80]	; 0x50
 8003928:	414b      	adcs	r3, r1
 800392a:	657b      	str	r3, [r7, #84]	; 0x54
 800392c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800392e:	685b      	ldr	r3, [r3, #4]
 8003930:	461a      	mov	r2, r3
 8003932:	f04f 0300 	mov.w	r3, #0
 8003936:	1891      	adds	r1, r2, r2
 8003938:	61b9      	str	r1, [r7, #24]
 800393a:	415b      	adcs	r3, r3
 800393c:	61fb      	str	r3, [r7, #28]
 800393e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003942:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8003946:	f7fd f991 	bl	8000c6c <__aeabi_uldivmod>
 800394a:	4602      	mov	r2, r0
 800394c:	460b      	mov	r3, r1
 800394e:	4b6c      	ldr	r3, [pc, #432]	; (8003b00 <UART_SetConfig+0x38c>)
 8003950:	fba3 1302 	umull	r1, r3, r3, r2
 8003954:	095b      	lsrs	r3, r3, #5
 8003956:	2164      	movs	r1, #100	; 0x64
 8003958:	fb01 f303 	mul.w	r3, r1, r3
 800395c:	1ad3      	subs	r3, r2, r3
 800395e:	00db      	lsls	r3, r3, #3
 8003960:	3332      	adds	r3, #50	; 0x32
 8003962:	4a67      	ldr	r2, [pc, #412]	; (8003b00 <UART_SetConfig+0x38c>)
 8003964:	fba2 2303 	umull	r2, r3, r2, r3
 8003968:	095b      	lsrs	r3, r3, #5
 800396a:	f003 0207 	and.w	r2, r3, #7
 800396e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	4432      	add	r2, r6
 8003974:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003976:	e0b9      	b.n	8003aec <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003978:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800397a:	461c      	mov	r4, r3
 800397c:	f04f 0500 	mov.w	r5, #0
 8003980:	4622      	mov	r2, r4
 8003982:	462b      	mov	r3, r5
 8003984:	1891      	adds	r1, r2, r2
 8003986:	6139      	str	r1, [r7, #16]
 8003988:	415b      	adcs	r3, r3
 800398a:	617b      	str	r3, [r7, #20]
 800398c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003990:	1912      	adds	r2, r2, r4
 8003992:	eb45 0303 	adc.w	r3, r5, r3
 8003996:	f04f 0000 	mov.w	r0, #0
 800399a:	f04f 0100 	mov.w	r1, #0
 800399e:	00d9      	lsls	r1, r3, #3
 80039a0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80039a4:	00d0      	lsls	r0, r2, #3
 80039a6:	4602      	mov	r2, r0
 80039a8:	460b      	mov	r3, r1
 80039aa:	eb12 0804 	adds.w	r8, r2, r4
 80039ae:	eb43 0905 	adc.w	r9, r3, r5
 80039b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80039b4:	685b      	ldr	r3, [r3, #4]
 80039b6:	4618      	mov	r0, r3
 80039b8:	f04f 0100 	mov.w	r1, #0
 80039bc:	f04f 0200 	mov.w	r2, #0
 80039c0:	f04f 0300 	mov.w	r3, #0
 80039c4:	008b      	lsls	r3, r1, #2
 80039c6:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80039ca:	0082      	lsls	r2, r0, #2
 80039cc:	4640      	mov	r0, r8
 80039ce:	4649      	mov	r1, r9
 80039d0:	f7fd f94c 	bl	8000c6c <__aeabi_uldivmod>
 80039d4:	4602      	mov	r2, r0
 80039d6:	460b      	mov	r3, r1
 80039d8:	4b49      	ldr	r3, [pc, #292]	; (8003b00 <UART_SetConfig+0x38c>)
 80039da:	fba3 2302 	umull	r2, r3, r3, r2
 80039de:	095b      	lsrs	r3, r3, #5
 80039e0:	011e      	lsls	r6, r3, #4
 80039e2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80039e4:	4618      	mov	r0, r3
 80039e6:	f04f 0100 	mov.w	r1, #0
 80039ea:	4602      	mov	r2, r0
 80039ec:	460b      	mov	r3, r1
 80039ee:	1894      	adds	r4, r2, r2
 80039f0:	60bc      	str	r4, [r7, #8]
 80039f2:	415b      	adcs	r3, r3
 80039f4:	60fb      	str	r3, [r7, #12]
 80039f6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80039fa:	1812      	adds	r2, r2, r0
 80039fc:	eb41 0303 	adc.w	r3, r1, r3
 8003a00:	f04f 0400 	mov.w	r4, #0
 8003a04:	f04f 0500 	mov.w	r5, #0
 8003a08:	00dd      	lsls	r5, r3, #3
 8003a0a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003a0e:	00d4      	lsls	r4, r2, #3
 8003a10:	4622      	mov	r2, r4
 8003a12:	462b      	mov	r3, r5
 8003a14:	1814      	adds	r4, r2, r0
 8003a16:	64bc      	str	r4, [r7, #72]	; 0x48
 8003a18:	414b      	adcs	r3, r1
 8003a1a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003a1c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a1e:	685b      	ldr	r3, [r3, #4]
 8003a20:	4618      	mov	r0, r3
 8003a22:	f04f 0100 	mov.w	r1, #0
 8003a26:	f04f 0200 	mov.w	r2, #0
 8003a2a:	f04f 0300 	mov.w	r3, #0
 8003a2e:	008b      	lsls	r3, r1, #2
 8003a30:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003a34:	0082      	lsls	r2, r0, #2
 8003a36:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8003a3a:	f7fd f917 	bl	8000c6c <__aeabi_uldivmod>
 8003a3e:	4602      	mov	r2, r0
 8003a40:	460b      	mov	r3, r1
 8003a42:	4b2f      	ldr	r3, [pc, #188]	; (8003b00 <UART_SetConfig+0x38c>)
 8003a44:	fba3 1302 	umull	r1, r3, r3, r2
 8003a48:	095b      	lsrs	r3, r3, #5
 8003a4a:	2164      	movs	r1, #100	; 0x64
 8003a4c:	fb01 f303 	mul.w	r3, r1, r3
 8003a50:	1ad3      	subs	r3, r2, r3
 8003a52:	011b      	lsls	r3, r3, #4
 8003a54:	3332      	adds	r3, #50	; 0x32
 8003a56:	4a2a      	ldr	r2, [pc, #168]	; (8003b00 <UART_SetConfig+0x38c>)
 8003a58:	fba2 2303 	umull	r2, r3, r2, r3
 8003a5c:	095b      	lsrs	r3, r3, #5
 8003a5e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003a62:	441e      	add	r6, r3
 8003a64:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003a66:	4618      	mov	r0, r3
 8003a68:	f04f 0100 	mov.w	r1, #0
 8003a6c:	4602      	mov	r2, r0
 8003a6e:	460b      	mov	r3, r1
 8003a70:	1894      	adds	r4, r2, r2
 8003a72:	603c      	str	r4, [r7, #0]
 8003a74:	415b      	adcs	r3, r3
 8003a76:	607b      	str	r3, [r7, #4]
 8003a78:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003a7c:	1812      	adds	r2, r2, r0
 8003a7e:	eb41 0303 	adc.w	r3, r1, r3
 8003a82:	f04f 0400 	mov.w	r4, #0
 8003a86:	f04f 0500 	mov.w	r5, #0
 8003a8a:	00dd      	lsls	r5, r3, #3
 8003a8c:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003a90:	00d4      	lsls	r4, r2, #3
 8003a92:	4622      	mov	r2, r4
 8003a94:	462b      	mov	r3, r5
 8003a96:	eb12 0a00 	adds.w	sl, r2, r0
 8003a9a:	eb43 0b01 	adc.w	fp, r3, r1
 8003a9e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003aa0:	685b      	ldr	r3, [r3, #4]
 8003aa2:	4618      	mov	r0, r3
 8003aa4:	f04f 0100 	mov.w	r1, #0
 8003aa8:	f04f 0200 	mov.w	r2, #0
 8003aac:	f04f 0300 	mov.w	r3, #0
 8003ab0:	008b      	lsls	r3, r1, #2
 8003ab2:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003ab6:	0082      	lsls	r2, r0, #2
 8003ab8:	4650      	mov	r0, sl
 8003aba:	4659      	mov	r1, fp
 8003abc:	f7fd f8d6 	bl	8000c6c <__aeabi_uldivmod>
 8003ac0:	4602      	mov	r2, r0
 8003ac2:	460b      	mov	r3, r1
 8003ac4:	4b0e      	ldr	r3, [pc, #56]	; (8003b00 <UART_SetConfig+0x38c>)
 8003ac6:	fba3 1302 	umull	r1, r3, r3, r2
 8003aca:	095b      	lsrs	r3, r3, #5
 8003acc:	2164      	movs	r1, #100	; 0x64
 8003ace:	fb01 f303 	mul.w	r3, r1, r3
 8003ad2:	1ad3      	subs	r3, r2, r3
 8003ad4:	011b      	lsls	r3, r3, #4
 8003ad6:	3332      	adds	r3, #50	; 0x32
 8003ad8:	4a09      	ldr	r2, [pc, #36]	; (8003b00 <UART_SetConfig+0x38c>)
 8003ada:	fba2 2303 	umull	r2, r3, r2, r3
 8003ade:	095b      	lsrs	r3, r3, #5
 8003ae0:	f003 020f 	and.w	r2, r3, #15
 8003ae4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	4432      	add	r2, r6
 8003aea:	609a      	str	r2, [r3, #8]
}
 8003aec:	bf00      	nop
 8003aee:	377c      	adds	r7, #124	; 0x7c
 8003af0:	46bd      	mov	sp, r7
 8003af2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003af6:	bf00      	nop
 8003af8:	40011000 	.word	0x40011000
 8003afc:	40011400 	.word	0x40011400
 8003b00:	51eb851f 	.word	0x51eb851f

08003b04 <TfLiteIntArrayGetSizeInBytes>:
#ifndef TF_LITE_STATIC_MEMORY
#include <stdlib.h>
#include <string.h>
#endif  // TF_LITE_STATIC_MEMORY

int TfLiteIntArrayGetSizeInBytes(int size) {
 8003b04:	b480      	push	{r7}
 8003b06:	b083      	sub	sp, #12
 8003b08:	af00      	add	r7, sp, #0
 8003b0a:	6078      	str	r0, [r7, #4]
  static TfLiteIntArray dummy;
  return sizeof(dummy) + sizeof(dummy.data[0]) * size;
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	3301      	adds	r3, #1
 8003b10:	009b      	lsls	r3, r3, #2
}
 8003b12:	4618      	mov	r0, r3
 8003b14:	370c      	adds	r7, #12
 8003b16:	46bd      	mov	sp, r7
 8003b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b1c:	4770      	bx	lr
	...

08003b20 <TfLiteTypeGetName>:
  }
  tensor->bytes = num_bytes;
}
#endif  // TF_LITE_STATIC_MEMORY

const char* TfLiteTypeGetName(TfLiteType type) {
 8003b20:	b480      	push	{r7}
 8003b22:	b083      	sub	sp, #12
 8003b24:	af00      	add	r7, sp, #0
 8003b26:	4603      	mov	r3, r0
 8003b28:	71fb      	strb	r3, [r7, #7]
  switch (type) {
 8003b2a:	79fb      	ldrb	r3, [r7, #7]
 8003b2c:	2b10      	cmp	r3, #16
 8003b2e:	d847      	bhi.n	8003bc0 <TfLiteTypeGetName+0xa0>
 8003b30:	a201      	add	r2, pc, #4	; (adr r2, 8003b38 <TfLiteTypeGetName+0x18>)
 8003b32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b36:	bf00      	nop
 8003b38:	08003b7d 	.word	0x08003b7d
 8003b3c:	08003b81 	.word	0x08003b81
 8003b40:	08003b89 	.word	0x08003b89
 8003b44:	08003b91 	.word	0x08003b91
 8003b48:	08003b99 	.word	0x08003b99
 8003b4c:	08003bad 	.word	0x08003bad
 8003b50:	08003ba1 	.word	0x08003ba1
 8003b54:	08003b85 	.word	0x08003b85
 8003b58:	08003ba5 	.word	0x08003ba5
 8003b5c:	08003b95 	.word	0x08003b95
 8003b60:	08003bb1 	.word	0x08003bb1
 8003b64:	08003bb5 	.word	0x08003bb5
 8003b68:	08003ba9 	.word	0x08003ba9
 8003b6c:	08003b9d 	.word	0x08003b9d
 8003b70:	08003bb9 	.word	0x08003bb9
 8003b74:	08003bbd 	.word	0x08003bbd
 8003b78:	08003b8d 	.word	0x08003b8d
    case kTfLiteNoType:
      return "NOTYPE";
 8003b7c:	4b14      	ldr	r3, [pc, #80]	; (8003bd0 <TfLiteTypeGetName+0xb0>)
 8003b7e:	e020      	b.n	8003bc2 <TfLiteTypeGetName+0xa2>
    case kTfLiteFloat32:
      return "FLOAT32";
 8003b80:	4b14      	ldr	r3, [pc, #80]	; (8003bd4 <TfLiteTypeGetName+0xb4>)
 8003b82:	e01e      	b.n	8003bc2 <TfLiteTypeGetName+0xa2>
    case kTfLiteInt16:
      return "INT16";
 8003b84:	4b14      	ldr	r3, [pc, #80]	; (8003bd8 <TfLiteTypeGetName+0xb8>)
 8003b86:	e01c      	b.n	8003bc2 <TfLiteTypeGetName+0xa2>
    case kTfLiteInt32:
      return "INT32";
 8003b88:	4b14      	ldr	r3, [pc, #80]	; (8003bdc <TfLiteTypeGetName+0xbc>)
 8003b8a:	e01a      	b.n	8003bc2 <TfLiteTypeGetName+0xa2>
    case kTfLiteUInt32:
      return "UINT32";
 8003b8c:	4b14      	ldr	r3, [pc, #80]	; (8003be0 <TfLiteTypeGetName+0xc0>)
 8003b8e:	e018      	b.n	8003bc2 <TfLiteTypeGetName+0xa2>
    case kTfLiteUInt8:
      return "UINT8";
 8003b90:	4b14      	ldr	r3, [pc, #80]	; (8003be4 <TfLiteTypeGetName+0xc4>)
 8003b92:	e016      	b.n	8003bc2 <TfLiteTypeGetName+0xa2>
    case kTfLiteInt8:
      return "INT8";
 8003b94:	4b14      	ldr	r3, [pc, #80]	; (8003be8 <TfLiteTypeGetName+0xc8>)
 8003b96:	e014      	b.n	8003bc2 <TfLiteTypeGetName+0xa2>
    case kTfLiteInt64:
      return "INT64";
 8003b98:	4b14      	ldr	r3, [pc, #80]	; (8003bec <TfLiteTypeGetName+0xcc>)
 8003b9a:	e012      	b.n	8003bc2 <TfLiteTypeGetName+0xa2>
    case kTfLiteUInt64:
      return "UINT64";
 8003b9c:	4b14      	ldr	r3, [pc, #80]	; (8003bf0 <TfLiteTypeGetName+0xd0>)
 8003b9e:	e010      	b.n	8003bc2 <TfLiteTypeGetName+0xa2>
    case kTfLiteBool:
      return "BOOL";
 8003ba0:	4b14      	ldr	r3, [pc, #80]	; (8003bf4 <TfLiteTypeGetName+0xd4>)
 8003ba2:	e00e      	b.n	8003bc2 <TfLiteTypeGetName+0xa2>
    case kTfLiteComplex64:
      return "COMPLEX64";
 8003ba4:	4b14      	ldr	r3, [pc, #80]	; (8003bf8 <TfLiteTypeGetName+0xd8>)
 8003ba6:	e00c      	b.n	8003bc2 <TfLiteTypeGetName+0xa2>
    case kTfLiteComplex128:
      return "COMPLEX128";
 8003ba8:	4b14      	ldr	r3, [pc, #80]	; (8003bfc <TfLiteTypeGetName+0xdc>)
 8003baa:	e00a      	b.n	8003bc2 <TfLiteTypeGetName+0xa2>
    case kTfLiteString:
      return "STRING";
 8003bac:	4b14      	ldr	r3, [pc, #80]	; (8003c00 <TfLiteTypeGetName+0xe0>)
 8003bae:	e008      	b.n	8003bc2 <TfLiteTypeGetName+0xa2>
    case kTfLiteFloat16:
      return "FLOAT16";
 8003bb0:	4b14      	ldr	r3, [pc, #80]	; (8003c04 <TfLiteTypeGetName+0xe4>)
 8003bb2:	e006      	b.n	8003bc2 <TfLiteTypeGetName+0xa2>
    case kTfLiteFloat64:
      return "FLOAT64";
 8003bb4:	4b14      	ldr	r3, [pc, #80]	; (8003c08 <TfLiteTypeGetName+0xe8>)
 8003bb6:	e004      	b.n	8003bc2 <TfLiteTypeGetName+0xa2>
    case kTfLiteResource:
      return "RESOURCE";
 8003bb8:	4b14      	ldr	r3, [pc, #80]	; (8003c0c <TfLiteTypeGetName+0xec>)
 8003bba:	e002      	b.n	8003bc2 <TfLiteTypeGetName+0xa2>
    case kTfLiteVariant:
      return "VARIANT";
 8003bbc:	4b14      	ldr	r3, [pc, #80]	; (8003c10 <TfLiteTypeGetName+0xf0>)
 8003bbe:	e000      	b.n	8003bc2 <TfLiteTypeGetName+0xa2>
  }
  return "Unknown type";
 8003bc0:	4b14      	ldr	r3, [pc, #80]	; (8003c14 <TfLiteTypeGetName+0xf4>)
}
 8003bc2:	4618      	mov	r0, r3
 8003bc4:	370c      	adds	r7, #12
 8003bc6:	46bd      	mov	sp, r7
 8003bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bcc:	4770      	bx	lr
 8003bce:	bf00      	nop
 8003bd0:	08013b00 	.word	0x08013b00
 8003bd4:	08013b08 	.word	0x08013b08
 8003bd8:	08013b10 	.word	0x08013b10
 8003bdc:	08013b18 	.word	0x08013b18
 8003be0:	08013b20 	.word	0x08013b20
 8003be4:	08013b28 	.word	0x08013b28
 8003be8:	08013b30 	.word	0x08013b30
 8003bec:	08013b38 	.word	0x08013b38
 8003bf0:	08013b40 	.word	0x08013b40
 8003bf4:	08013b48 	.word	0x08013b48
 8003bf8:	08013b50 	.word	0x08013b50
 8003bfc:	08013b5c 	.word	0x08013b5c
 8003c00:	08013b68 	.word	0x08013b68
 8003c04:	08013b70 	.word	0x08013b70
 8003c08:	08013b78 	.word	0x08013b78
 8003c0c:	08013b80 	.word	0x08013b80
 8003c10:	08013b8c 	.word	0x08013b8c
 8003c14:	08013b94 	.word	0x08013b94

08003c18 <_ZN6tflite13ErrorReporter6ReportEPKcz>:
#include "tensorflow/lite/core/api/error_reporter.h"
#include <cstdarg>

namespace tflite {

int ErrorReporter::Report(const char* format, ...) {
 8003c18:	b40e      	push	{r1, r2, r3}
 8003c1a:	b580      	push	{r7, lr}
 8003c1c:	b085      	sub	sp, #20
 8003c1e:	af00      	add	r7, sp, #0
 8003c20:	6078      	str	r0, [r7, #4]
  va_list args;
  va_start(args, format);
 8003c22:	f107 0320 	add.w	r3, r7, #32
 8003c26:	60bb      	str	r3, [r7, #8]
  int code = Report(format, args);
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	3308      	adds	r3, #8
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	68ba      	ldr	r2, [r7, #8]
 8003c32:	69f9      	ldr	r1, [r7, #28]
 8003c34:	6878      	ldr	r0, [r7, #4]
 8003c36:	4798      	blx	r3
 8003c38:	60f8      	str	r0, [r7, #12]
  va_end(args);
  return code;
 8003c3a:	68fb      	ldr	r3, [r7, #12]
}
 8003c3c:	4618      	mov	r0, r3
 8003c3e:	3714      	adds	r7, #20
 8003c40:	46bd      	mov	sp, r7
 8003c42:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003c46:	b003      	add	sp, #12
 8003c48:	4770      	bx	lr

08003c4a <_ZN6tflite13ErrorReporter11ReportErrorEPvPKcz>:

// TODO(aselle): Make the name of ReportError on context the same, so
// we can use the ensure functions w/o a context and w/ a reporter.
int ErrorReporter::ReportError(void*, const char* format, ...) {
 8003c4a:	b40c      	push	{r2, r3}
 8003c4c:	b580      	push	{r7, lr}
 8003c4e:	b084      	sub	sp, #16
 8003c50:	af00      	add	r7, sp, #0
 8003c52:	6078      	str	r0, [r7, #4]
 8003c54:	6039      	str	r1, [r7, #0]
  va_list args;
  va_start(args, format);
 8003c56:	f107 031c 	add.w	r3, r7, #28
 8003c5a:	60bb      	str	r3, [r7, #8]
  int code = Report(format, args);
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	3308      	adds	r3, #8
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	68ba      	ldr	r2, [r7, #8]
 8003c66:	69b9      	ldr	r1, [r7, #24]
 8003c68:	6878      	ldr	r0, [r7, #4]
 8003c6a:	4798      	blx	r3
 8003c6c:	60f8      	str	r0, [r7, #12]
  va_end(args);
  return code;
 8003c6e:	68fb      	ldr	r3, [r7, #12]
}
 8003c70:	4618      	mov	r0, r3
 8003c72:	3710      	adds	r7, #16
 8003c74:	46bd      	mov	sp, r7
 8003c76:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003c7a:	b002      	add	sp, #8
 8003c7c:	4770      	bx	lr

08003c7e <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
_GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 8003c7e:	b480      	push	{r7}
 8003c80:	b083      	sub	sp, #12
 8003c82:	af00      	add	r7, sp, #0
 8003c84:	6078      	str	r0, [r7, #4]
 8003c86:	6039      	str	r1, [r7, #0]
 8003c88:	683b      	ldr	r3, [r7, #0]
 8003c8a:	4618      	mov	r0, r3
 8003c8c:	370c      	adds	r7, #12
 8003c8e:	46bd      	mov	sp, r7
 8003c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c94:	4770      	bx	lr

08003c96 <_ZNK11flatbuffers6String5c_strEv>:
  const char *c_str() const { return reinterpret_cast<const char *>(Data()); }
 8003c96:	b580      	push	{r7, lr}
 8003c98:	b082      	sub	sp, #8
 8003c9a:	af00      	add	r7, sp, #0
 8003c9c:	6078      	str	r0, [r7, #4]
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	4618      	mov	r0, r3
 8003ca2:	f000 fcd1 	bl	8004648 <_ZNK11flatbuffers6VectorIcE4DataEv>
 8003ca6:	4603      	mov	r3, r0
 8003ca8:	4618      	mov	r0, r3
 8003caa:	3708      	adds	r7, #8
 8003cac:	46bd      	mov	sp, r7
 8003cae:	bd80      	pop	{r7, pc}

08003cb0 <_ZNK6tflite22DepthwiseConv2DOptions7paddingEv>:
  tflite::Padding padding() const {
 8003cb0:	b580      	push	{r7, lr}
 8003cb2:	b082      	sub	sp, #8
 8003cb4:	af00      	add	r7, sp, #0
 8003cb6:	6078      	str	r0, [r7, #4]
    return static_cast<tflite::Padding>(GetField<int8_t>(VT_PADDING, 0));
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	2200      	movs	r2, #0
 8003cbc:	2104      	movs	r1, #4
 8003cbe:	4618      	mov	r0, r3
 8003cc0:	f000 fd39 	bl	8004736 <_ZNK11flatbuffers5Table8GetFieldIaEET_tS2_>
 8003cc4:	4603      	mov	r3, r0
 8003cc6:	b2db      	uxtb	r3, r3
  }
 8003cc8:	4618      	mov	r0, r3
 8003cca:	3708      	adds	r7, #8
 8003ccc:	46bd      	mov	sp, r7
 8003cce:	bd80      	pop	{r7, pc}

08003cd0 <_ZNK6tflite22DepthwiseConv2DOptions8stride_wEv>:
  int32_t stride_w() const {
 8003cd0:	b580      	push	{r7, lr}
 8003cd2:	b082      	sub	sp, #8
 8003cd4:	af00      	add	r7, sp, #0
 8003cd6:	6078      	str	r0, [r7, #4]
    return GetField<int32_t>(VT_STRIDE_W, 0);
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	2200      	movs	r2, #0
 8003cdc:	2106      	movs	r1, #6
 8003cde:	4618      	mov	r0, r3
 8003ce0:	f000 fcfb 	bl	80046da <_ZNK11flatbuffers5Table8GetFieldIlEET_tS2_>
 8003ce4:	4603      	mov	r3, r0
  }
 8003ce6:	4618      	mov	r0, r3
 8003ce8:	3708      	adds	r7, #8
 8003cea:	46bd      	mov	sp, r7
 8003cec:	bd80      	pop	{r7, pc}

08003cee <_ZNK6tflite22DepthwiseConv2DOptions8stride_hEv>:
  int32_t stride_h() const {
 8003cee:	b580      	push	{r7, lr}
 8003cf0:	b082      	sub	sp, #8
 8003cf2:	af00      	add	r7, sp, #0
 8003cf4:	6078      	str	r0, [r7, #4]
    return GetField<int32_t>(VT_STRIDE_H, 0);
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	2200      	movs	r2, #0
 8003cfa:	2108      	movs	r1, #8
 8003cfc:	4618      	mov	r0, r3
 8003cfe:	f000 fcec 	bl	80046da <_ZNK11flatbuffers5Table8GetFieldIlEET_tS2_>
 8003d02:	4603      	mov	r3, r0
  }
 8003d04:	4618      	mov	r0, r3
 8003d06:	3708      	adds	r7, #8
 8003d08:	46bd      	mov	sp, r7
 8003d0a:	bd80      	pop	{r7, pc}

08003d0c <_ZNK6tflite22DepthwiseConv2DOptions16depth_multiplierEv>:
  int32_t depth_multiplier() const {
 8003d0c:	b580      	push	{r7, lr}
 8003d0e:	b082      	sub	sp, #8
 8003d10:	af00      	add	r7, sp, #0
 8003d12:	6078      	str	r0, [r7, #4]
    return GetField<int32_t>(VT_DEPTH_MULTIPLIER, 0);
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	2200      	movs	r2, #0
 8003d18:	210a      	movs	r1, #10
 8003d1a:	4618      	mov	r0, r3
 8003d1c:	f000 fcdd 	bl	80046da <_ZNK11flatbuffers5Table8GetFieldIlEET_tS2_>
 8003d20:	4603      	mov	r3, r0
  }
 8003d22:	4618      	mov	r0, r3
 8003d24:	3708      	adds	r7, #8
 8003d26:	46bd      	mov	sp, r7
 8003d28:	bd80      	pop	{r7, pc}

08003d2a <_ZNK6tflite22DepthwiseConv2DOptions25fused_activation_functionEv>:
  tflite::ActivationFunctionType fused_activation_function() const {
 8003d2a:	b580      	push	{r7, lr}
 8003d2c:	b082      	sub	sp, #8
 8003d2e:	af00      	add	r7, sp, #0
 8003d30:	6078      	str	r0, [r7, #4]
    return static_cast<tflite::ActivationFunctionType>(GetField<int8_t>(VT_FUSED_ACTIVATION_FUNCTION, 0));
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	2200      	movs	r2, #0
 8003d36:	210c      	movs	r1, #12
 8003d38:	4618      	mov	r0, r3
 8003d3a:	f000 fcfc 	bl	8004736 <_ZNK11flatbuffers5Table8GetFieldIaEET_tS2_>
 8003d3e:	4603      	mov	r3, r0
 8003d40:	b2db      	uxtb	r3, r3
  }
 8003d42:	4618      	mov	r0, r3
 8003d44:	3708      	adds	r7, #8
 8003d46:	46bd      	mov	sp, r7
 8003d48:	bd80      	pop	{r7, pc}

08003d4a <_ZNK6tflite22DepthwiseConv2DOptions17dilation_w_factorEv>:
  int32_t dilation_w_factor() const {
 8003d4a:	b580      	push	{r7, lr}
 8003d4c:	b082      	sub	sp, #8
 8003d4e:	af00      	add	r7, sp, #0
 8003d50:	6078      	str	r0, [r7, #4]
    return GetField<int32_t>(VT_DILATION_W_FACTOR, 1);
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	2201      	movs	r2, #1
 8003d56:	210e      	movs	r1, #14
 8003d58:	4618      	mov	r0, r3
 8003d5a:	f000 fcbe 	bl	80046da <_ZNK11flatbuffers5Table8GetFieldIlEET_tS2_>
 8003d5e:	4603      	mov	r3, r0
  }
 8003d60:	4618      	mov	r0, r3
 8003d62:	3708      	adds	r7, #8
 8003d64:	46bd      	mov	sp, r7
 8003d66:	bd80      	pop	{r7, pc}

08003d68 <_ZNK6tflite22DepthwiseConv2DOptions17dilation_h_factorEv>:
  int32_t dilation_h_factor() const {
 8003d68:	b580      	push	{r7, lr}
 8003d6a:	b082      	sub	sp, #8
 8003d6c:	af00      	add	r7, sp, #0
 8003d6e:	6078      	str	r0, [r7, #4]
    return GetField<int32_t>(VT_DILATION_H_FACTOR, 1);
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	2201      	movs	r2, #1
 8003d74:	2110      	movs	r1, #16
 8003d76:	4618      	mov	r0, r3
 8003d78:	f000 fcaf 	bl	80046da <_ZNK11flatbuffers5Table8GetFieldIlEET_tS2_>
 8003d7c:	4603      	mov	r3, r0
  }
 8003d7e:	4618      	mov	r0, r3
 8003d80:	3708      	adds	r7, #8
 8003d82:	46bd      	mov	sp, r7
 8003d84:	bd80      	pop	{r7, pc}

08003d86 <_ZNK6tflite21FullyConnectedOptions25fused_activation_functionEv>:
  tflite::ActivationFunctionType fused_activation_function() const {
 8003d86:	b580      	push	{r7, lr}
 8003d88:	b082      	sub	sp, #8
 8003d8a:	af00      	add	r7, sp, #0
 8003d8c:	6078      	str	r0, [r7, #4]
    return static_cast<tflite::ActivationFunctionType>(GetField<int8_t>(VT_FUSED_ACTIVATION_FUNCTION, 0));
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	2200      	movs	r2, #0
 8003d92:	2104      	movs	r1, #4
 8003d94:	4618      	mov	r0, r3
 8003d96:	f000 fcce 	bl	8004736 <_ZNK11flatbuffers5Table8GetFieldIaEET_tS2_>
 8003d9a:	4603      	mov	r3, r0
 8003d9c:	b2db      	uxtb	r3, r3
  }
 8003d9e:	4618      	mov	r0, r3
 8003da0:	3708      	adds	r7, #8
 8003da2:	46bd      	mov	sp, r7
 8003da4:	bd80      	pop	{r7, pc}

08003da6 <_ZNK6tflite21FullyConnectedOptions14weights_formatEv>:
  tflite::FullyConnectedOptionsWeightsFormat weights_format() const {
 8003da6:	b580      	push	{r7, lr}
 8003da8:	b082      	sub	sp, #8
 8003daa:	af00      	add	r7, sp, #0
 8003dac:	6078      	str	r0, [r7, #4]
    return static_cast<tflite::FullyConnectedOptionsWeightsFormat>(GetField<int8_t>(VT_WEIGHTS_FORMAT, 0));
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	2200      	movs	r2, #0
 8003db2:	2106      	movs	r1, #6
 8003db4:	4618      	mov	r0, r3
 8003db6:	f000 fcbe 	bl	8004736 <_ZNK11flatbuffers5Table8GetFieldIaEET_tS2_>
 8003dba:	4603      	mov	r3, r0
 8003dbc:	b2db      	uxtb	r3, r3
  }
 8003dbe:	4618      	mov	r0, r3
 8003dc0:	3708      	adds	r7, #8
 8003dc2:	46bd      	mov	sp, r7
 8003dc4:	bd80      	pop	{r7, pc}

08003dc6 <_ZNK6tflite21FullyConnectedOptions13keep_num_dimsEv>:
  bool keep_num_dims() const {
 8003dc6:	b580      	push	{r7, lr}
 8003dc8:	b082      	sub	sp, #8
 8003dca:	af00      	add	r7, sp, #0
 8003dcc:	6078      	str	r0, [r7, #4]
    return GetField<uint8_t>(VT_KEEP_NUM_DIMS, 0) != 0;
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	2200      	movs	r2, #0
 8003dd2:	2108      	movs	r1, #8
 8003dd4:	4618      	mov	r0, r3
 8003dd6:	f000 fc51 	bl	800467c <_ZNK11flatbuffers5Table8GetFieldIhEET_tS2_>
 8003dda:	4603      	mov	r3, r0
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	bf14      	ite	ne
 8003de0:	2301      	movne	r3, #1
 8003de2:	2300      	moveq	r3, #0
 8003de4:	b2db      	uxtb	r3, r3
  }
 8003de6:	4618      	mov	r0, r3
 8003de8:	3708      	adds	r7, #8
 8003dea:	46bd      	mov	sp, r7
 8003dec:	bd80      	pop	{r7, pc}

08003dee <_ZNK6tflite21FullyConnectedOptions26asymmetric_quantize_inputsEv>:
  bool asymmetric_quantize_inputs() const {
 8003dee:	b580      	push	{r7, lr}
 8003df0:	b082      	sub	sp, #8
 8003df2:	af00      	add	r7, sp, #0
 8003df4:	6078      	str	r0, [r7, #4]
    return GetField<uint8_t>(VT_ASYMMETRIC_QUANTIZE_INPUTS, 0) != 0;
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	2200      	movs	r2, #0
 8003dfa:	210a      	movs	r1, #10
 8003dfc:	4618      	mov	r0, r3
 8003dfe:	f000 fc3d 	bl	800467c <_ZNK11flatbuffers5Table8GetFieldIhEET_tS2_>
 8003e02:	4603      	mov	r3, r0
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	bf14      	ite	ne
 8003e08:	2301      	movne	r3, #1
 8003e0a:	2300      	moveq	r3, #0
 8003e0c:	b2db      	uxtb	r3, r3
  }
 8003e0e:	4618      	mov	r0, r3
 8003e10:	3708      	adds	r7, #8
 8003e12:	46bd      	mov	sp, r7
 8003e14:	bd80      	pop	{r7, pc}
	...

08003e18 <_ZNK6tflite14SoftmaxOptions4betaEv>:
  float beta() const {
 8003e18:	b580      	push	{r7, lr}
 8003e1a:	b082      	sub	sp, #8
 8003e1c:	af00      	add	r7, sp, #0
 8003e1e:	6078      	str	r0, [r7, #4]
    return GetField<float>(VT_BETA, 0.0f);
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	ed9f 0a06 	vldr	s0, [pc, #24]	; 8003e3c <_ZNK6tflite14SoftmaxOptions4betaEv+0x24>
 8003e26:	2104      	movs	r1, #4
 8003e28:	4618      	mov	r0, r3
 8003e2a:	f000 fcb4 	bl	8004796 <_ZNK11flatbuffers5Table8GetFieldIfEET_tS2_>
 8003e2e:	eef0 7a40 	vmov.f32	s15, s0
  }
 8003e32:	eeb0 0a67 	vmov.f32	s0, s15
 8003e36:	3708      	adds	r7, #8
 8003e38:	46bd      	mov	sp, r7
 8003e3a:	bd80      	pop	{r7, pc}
 8003e3c:	00000000 	.word	0x00000000

08003e40 <_ZNK6tflite14ReshapeOptions9new_shapeEv>:
  const flatbuffers::Vector<int32_t> *new_shape() const {
 8003e40:	b580      	push	{r7, lr}
 8003e42:	b082      	sub	sp, #8
 8003e44:	af00      	add	r7, sp, #0
 8003e46:	6078      	str	r0, [r7, #4]
    return GetPointer<const flatbuffers::Vector<int32_t> *>(VT_NEW_SHAPE);
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	2104      	movs	r1, #4
 8003e4c:	4618      	mov	r0, r3
 8003e4e:	f000 fc62 	bl	8004716 <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorIlEEEET_t>
 8003e52:	4603      	mov	r3, r0
  }
 8003e54:	4618      	mov	r0, r3
 8003e56:	3708      	adds	r7, #8
 8003e58:	46bd      	mov	sp, r7
 8003e5a:	bd80      	pop	{r7, pc}

08003e5c <_ZNK6tflite8Operator20builtin_options_typeEv>:
  tflite::BuiltinOptions builtin_options_type() const {
 8003e5c:	b580      	push	{r7, lr}
 8003e5e:	b082      	sub	sp, #8
 8003e60:	af00      	add	r7, sp, #0
 8003e62:	6078      	str	r0, [r7, #4]
    return static_cast<tflite::BuiltinOptions>(GetField<uint8_t>(VT_BUILTIN_OPTIONS_TYPE, 0));
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	2200      	movs	r2, #0
 8003e68:	210a      	movs	r1, #10
 8003e6a:	4618      	mov	r0, r3
 8003e6c:	f000 fc06 	bl	800467c <_ZNK11flatbuffers5Table8GetFieldIhEET_tS2_>
 8003e70:	4603      	mov	r3, r0
  }
 8003e72:	4618      	mov	r0, r3
 8003e74:	3708      	adds	r7, #8
 8003e76:	46bd      	mov	sp, r7
 8003e78:	bd80      	pop	{r7, pc}

08003e7a <_ZNK6tflite8Operator15builtin_optionsEv>:
  const void *builtin_options() const {
 8003e7a:	b580      	push	{r7, lr}
 8003e7c:	b082      	sub	sp, #8
 8003e7e:	af00      	add	r7, sp, #0
 8003e80:	6078      	str	r0, [r7, #4]
    return GetPointer<const void *>(VT_BUILTIN_OPTIONS);
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	210c      	movs	r1, #12
 8003e86:	4618      	mov	r0, r3
 8003e88:	f000 fc17 	bl	80046ba <_ZNK11flatbuffers5Table10GetPointerIPKvEET_t>
 8003e8c:	4603      	mov	r3, r0
  }
 8003e8e:	4618      	mov	r0, r3
 8003e90:	3708      	adds	r7, #8
 8003e92:	46bd      	mov	sp, r7
 8003e94:	bd80      	pop	{r7, pc}

08003e96 <_ZNK6tflite8Operator41builtin_options_as_DepthwiseConv2DOptionsEv>:
  const tflite::DepthwiseConv2DOptions *builtin_options_as_DepthwiseConv2DOptions() const {
 8003e96:	b580      	push	{r7, lr}
 8003e98:	b082      	sub	sp, #8
 8003e9a:	af00      	add	r7, sp, #0
 8003e9c:	6078      	str	r0, [r7, #4]
    return builtin_options_type() == tflite::BuiltinOptions_DepthwiseConv2DOptions ? static_cast<const tflite::DepthwiseConv2DOptions *>(builtin_options()) : nullptr;
 8003e9e:	6878      	ldr	r0, [r7, #4]
 8003ea0:	f7ff ffdc 	bl	8003e5c <_ZNK6tflite8Operator20builtin_options_typeEv>
 8003ea4:	4603      	mov	r3, r0
 8003ea6:	2b02      	cmp	r3, #2
 8003ea8:	d104      	bne.n	8003eb4 <_ZNK6tflite8Operator41builtin_options_as_DepthwiseConv2DOptionsEv+0x1e>
 8003eaa:	6878      	ldr	r0, [r7, #4]
 8003eac:	f7ff ffe5 	bl	8003e7a <_ZNK6tflite8Operator15builtin_optionsEv>
 8003eb0:	4603      	mov	r3, r0
 8003eb2:	e000      	b.n	8003eb6 <_ZNK6tflite8Operator41builtin_options_as_DepthwiseConv2DOptionsEv+0x20>
 8003eb4:	2300      	movs	r3, #0
  }
 8003eb6:	4618      	mov	r0, r3
 8003eb8:	3708      	adds	r7, #8
 8003eba:	46bd      	mov	sp, r7
 8003ebc:	bd80      	pop	{r7, pc}

08003ebe <_ZNK6tflite8Operator40builtin_options_as_FullyConnectedOptionsEv>:
  const tflite::FullyConnectedOptions *builtin_options_as_FullyConnectedOptions() const {
 8003ebe:	b580      	push	{r7, lr}
 8003ec0:	b082      	sub	sp, #8
 8003ec2:	af00      	add	r7, sp, #0
 8003ec4:	6078      	str	r0, [r7, #4]
    return builtin_options_type() == tflite::BuiltinOptions_FullyConnectedOptions ? static_cast<const tflite::FullyConnectedOptions *>(builtin_options()) : nullptr;
 8003ec6:	6878      	ldr	r0, [r7, #4]
 8003ec8:	f7ff ffc8 	bl	8003e5c <_ZNK6tflite8Operator20builtin_options_typeEv>
 8003ecc:	4603      	mov	r3, r0
 8003ece:	2b08      	cmp	r3, #8
 8003ed0:	d104      	bne.n	8003edc <_ZNK6tflite8Operator40builtin_options_as_FullyConnectedOptionsEv+0x1e>
 8003ed2:	6878      	ldr	r0, [r7, #4]
 8003ed4:	f7ff ffd1 	bl	8003e7a <_ZNK6tflite8Operator15builtin_optionsEv>
 8003ed8:	4603      	mov	r3, r0
 8003eda:	e000      	b.n	8003ede <_ZNK6tflite8Operator40builtin_options_as_FullyConnectedOptionsEv+0x20>
 8003edc:	2300      	movs	r3, #0
  }
 8003ede:	4618      	mov	r0, r3
 8003ee0:	3708      	adds	r7, #8
 8003ee2:	46bd      	mov	sp, r7
 8003ee4:	bd80      	pop	{r7, pc}

08003ee6 <_ZNK6tflite8Operator33builtin_options_as_SoftmaxOptionsEv>:
  const tflite::SoftmaxOptions *builtin_options_as_SoftmaxOptions() const {
 8003ee6:	b580      	push	{r7, lr}
 8003ee8:	b082      	sub	sp, #8
 8003eea:	af00      	add	r7, sp, #0
 8003eec:	6078      	str	r0, [r7, #4]
    return builtin_options_type() == tflite::BuiltinOptions_SoftmaxOptions ? static_cast<const tflite::SoftmaxOptions *>(builtin_options()) : nullptr;
 8003eee:	6878      	ldr	r0, [r7, #4]
 8003ef0:	f7ff ffb4 	bl	8003e5c <_ZNK6tflite8Operator20builtin_options_typeEv>
 8003ef4:	4603      	mov	r3, r0
 8003ef6:	2b09      	cmp	r3, #9
 8003ef8:	d104      	bne.n	8003f04 <_ZNK6tflite8Operator33builtin_options_as_SoftmaxOptionsEv+0x1e>
 8003efa:	6878      	ldr	r0, [r7, #4]
 8003efc:	f7ff ffbd 	bl	8003e7a <_ZNK6tflite8Operator15builtin_optionsEv>
 8003f00:	4603      	mov	r3, r0
 8003f02:	e000      	b.n	8003f06 <_ZNK6tflite8Operator33builtin_options_as_SoftmaxOptionsEv+0x20>
 8003f04:	2300      	movs	r3, #0
  }
 8003f06:	4618      	mov	r0, r3
 8003f08:	3708      	adds	r7, #8
 8003f0a:	46bd      	mov	sp, r7
 8003f0c:	bd80      	pop	{r7, pc}

08003f0e <_ZNK6tflite8Operator33builtin_options_as_ReshapeOptionsEv>:
  const tflite::ReshapeOptions *builtin_options_as_ReshapeOptions() const {
 8003f0e:	b580      	push	{r7, lr}
 8003f10:	b082      	sub	sp, #8
 8003f12:	af00      	add	r7, sp, #0
 8003f14:	6078      	str	r0, [r7, #4]
    return builtin_options_type() == tflite::BuiltinOptions_ReshapeOptions ? static_cast<const tflite::ReshapeOptions *>(builtin_options()) : nullptr;
 8003f16:	6878      	ldr	r0, [r7, #4]
 8003f18:	f7ff ffa0 	bl	8003e5c <_ZNK6tflite8Operator20builtin_options_typeEv>
 8003f1c:	4603      	mov	r3, r0
 8003f1e:	2b11      	cmp	r3, #17
 8003f20:	d104      	bne.n	8003f2c <_ZNK6tflite8Operator33builtin_options_as_ReshapeOptionsEv+0x1e>
 8003f22:	6878      	ldr	r0, [r7, #4]
 8003f24:	f7ff ffa9 	bl	8003e7a <_ZNK6tflite8Operator15builtin_optionsEv>
 8003f28:	4603      	mov	r3, r0
 8003f2a:	e000      	b.n	8003f2e <_ZNK6tflite8Operator33builtin_options_as_ReshapeOptionsEv+0x20>
 8003f2c:	2300      	movs	r3, #0
  }
 8003f2e:	4618      	mov	r0, r3
 8003f30:	3708      	adds	r7, #8
 8003f32:	46bd      	mov	sp, r7
 8003f34:	bd80      	pop	{r7, pc}

08003f36 <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterC1EPNS_20BuiltinDataAllocatorE>:
// parsed op data (e.g., when model parameters are invalid).
class SafeBuiltinDataAllocator {
 public:
  class BuiltinDataDeleter {
   public:
    explicit BuiltinDataDeleter(BuiltinDataAllocator* allocator)
 8003f36:	b480      	push	{r7}
 8003f38:	b083      	sub	sp, #12
 8003f3a:	af00      	add	r7, sp, #0
 8003f3c:	6078      	str	r0, [r7, #4]
 8003f3e:	6039      	str	r1, [r7, #0]
        : allocator_(allocator) {}
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	683a      	ldr	r2, [r7, #0]
 8003f44:	601a      	str	r2, [r3, #0]
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	4618      	mov	r0, r3
 8003f4a:	370c      	adds	r7, #12
 8003f4c:	46bd      	mov	sp, r7
 8003f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f52:	4770      	bx	lr

08003f54 <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterclEPv>:

    void operator()(void* data) { allocator_->Deallocate(data); }
 8003f54:	b580      	push	{r7, lr}
 8003f56:	b082      	sub	sp, #8
 8003f58:	af00      	add	r7, sp, #0
 8003f5a:	6078      	str	r0, [r7, #4]
 8003f5c:	6039      	str	r1, [r7, #0]
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681a      	ldr	r2, [r3, #0]
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	3304      	adds	r3, #4
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	6839      	ldr	r1, [r7, #0]
 8003f6e:	4610      	mov	r0, r2
 8003f70:	4798      	blx	r3
 8003f72:	bf00      	nop
 8003f74:	3708      	adds	r7, #8
 8003f76:	46bd      	mov	sp, r7
 8003f78:	bd80      	pop	{r7, pc}

08003f7a <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocatorC1EPNS_20BuiltinDataAllocatorE>:
  };

  template <typename T>
  using BuiltinDataPtr = std::unique_ptr<T, BuiltinDataDeleter>;

  explicit SafeBuiltinDataAllocator(BuiltinDataAllocator* allocator)
 8003f7a:	b480      	push	{r7}
 8003f7c:	b083      	sub	sp, #12
 8003f7e:	af00      	add	r7, sp, #0
 8003f80:	6078      	str	r0, [r7, #4]
 8003f82:	6039      	str	r1, [r7, #0]
      : allocator_(allocator) {}
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	683a      	ldr	r2, [r7, #0]
 8003f88:	601a      	str	r2, [r3, #0]
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	4618      	mov	r0, r3
 8003f8e:	370c      	adds	r7, #12
 8003f90:	46bd      	mov	sp, r7
 8003f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f96:	4770      	bx	lr

08003f98 <_ZN6tflite12_GLOBAL__N_123CheckParsePointerParamsEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>:

// All the Parse functions take some pointers as params and this function has
// the common DCHECKs to catch if any of those are nullptr.
void CheckParsePointerParams(const Operator* op, ErrorReporter* error_reporter,
                             BuiltinDataAllocator* allocator,
                             void** builtin_data) {
 8003f98:	b580      	push	{r7, lr}
 8003f9a:	b084      	sub	sp, #16
 8003f9c:	af00      	add	r7, sp, #0
 8003f9e:	60f8      	str	r0, [r7, #12]
 8003fa0:	60b9      	str	r1, [r7, #8]
 8003fa2:	607a      	str	r2, [r7, #4]
 8003fa4:	603b      	str	r3, [r7, #0]
  TFLITE_DCHECK(op != nullptr);
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d101      	bne.n	8003fb0 <_ZN6tflite12_GLOBAL__N_123CheckParsePointerParamsEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x18>
 8003fac:	f00c fbf7 	bl	801079e <abort>
  TFLITE_DCHECK(error_reporter != nullptr);
 8003fb0:	68bb      	ldr	r3, [r7, #8]
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d101      	bne.n	8003fba <_ZN6tflite12_GLOBAL__N_123CheckParsePointerParamsEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x22>
 8003fb6:	f00c fbf2 	bl	801079e <abort>
  TFLITE_DCHECK(allocator != nullptr);
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d101      	bne.n	8003fc4 <_ZN6tflite12_GLOBAL__N_123CheckParsePointerParamsEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x2c>
 8003fc0:	f00c fbed 	bl	801079e <abort>
  TFLITE_DCHECK(builtin_data != nullptr);
 8003fc4:	683b      	ldr	r3, [r7, #0]
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d101      	bne.n	8003fce <_ZN6tflite12_GLOBAL__N_123CheckParsePointerParamsEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x36>
 8003fca:	f00c fbe8 	bl	801079e <abort>
}
 8003fce:	bf00      	nop
 8003fd0:	3710      	adds	r7, #16
 8003fd2:	46bd      	mov	sp, r7
 8003fd4:	bd80      	pop	{r7, pc}
	...

08003fd8 <_ZN6tflite12_GLOBAL__N_126FlatBufferIntVectorToArrayEiPKN11flatbuffers6VectorIlEEPiPNS_13ErrorReporterEPKc>:
// Copies the contents from the flatbuffer int vector `flatbuffer` into the
// int array `buffer`. `flat_vector` and `buffer` represent the same
// configuration operation for a given operation.
TfLiteStatus FlatBufferIntVectorToArray(
    int max_size_of_buffer, const flatbuffers::Vector<int32_t>* flat_vector,
    int* buffer, ErrorReporter* error_reporter, const char* op_name) {
 8003fd8:	b590      	push	{r4, r7, lr}
 8003fda:	b087      	sub	sp, #28
 8003fdc:	af00      	add	r7, sp, #0
 8003fde:	60f8      	str	r0, [r7, #12]
 8003fe0:	60b9      	str	r1, [r7, #8]
 8003fe2:	607a      	str	r2, [r7, #4]
 8003fe4:	603b      	str	r3, [r7, #0]
  if (!flat_vector) {
 8003fe6:	68bb      	ldr	r3, [r7, #8]
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d106      	bne.n	8003ffa <_ZN6tflite12_GLOBAL__N_126FlatBufferIntVectorToArrayEiPKN11flatbuffers6VectorIlEEPiPNS_13ErrorReporterEPKc+0x22>
    TF_LITE_REPORT_ERROR(error_reporter,
 8003fec:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003fee:	4917      	ldr	r1, [pc, #92]	; (800404c <_ZN6tflite12_GLOBAL__N_126FlatBufferIntVectorToArrayEiPKN11flatbuffers6VectorIlEEPiPNS_13ErrorReporterEPKc+0x74>)
 8003ff0:	6838      	ldr	r0, [r7, #0]
 8003ff2:	f7ff fe11 	bl	8003c18 <_ZN6tflite13ErrorReporter6ReportEPKcz>
                         "Input array not provided for operation '%s'.\n",
                         op_name);
    return kTfLiteError;
 8003ff6:	2301      	movs	r3, #1
 8003ff8:	e024      	b.n	8004044 <_ZN6tflite12_GLOBAL__N_126FlatBufferIntVectorToArrayEiPKN11flatbuffers6VectorIlEEPiPNS_13ErrorReporterEPKc+0x6c>
  } else {
    size_t num_dimensions = flat_vector->size();
 8003ffa:	68b8      	ldr	r0, [r7, #8]
 8003ffc:	f000 fbed 	bl	80047da <_ZNK11flatbuffers6VectorIlE4sizeEv>
 8004000:	6138      	str	r0, [r7, #16]
    if (num_dimensions > max_size_of_buffer / sizeof(int)) {
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	089b      	lsrs	r3, r3, #2
 8004006:	693a      	ldr	r2, [r7, #16]
 8004008:	429a      	cmp	r2, r3
 800400a:	d906      	bls.n	800401a <_ZN6tflite12_GLOBAL__N_126FlatBufferIntVectorToArrayEiPKN11flatbuffers6VectorIlEEPiPNS_13ErrorReporterEPKc+0x42>
      TF_LITE_REPORT_ERROR(
 800400c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800400e:	4910      	ldr	r1, [pc, #64]	; (8004050 <_ZN6tflite12_GLOBAL__N_126FlatBufferIntVectorToArrayEiPKN11flatbuffers6VectorIlEEPiPNS_13ErrorReporterEPKc+0x78>)
 8004010:	6838      	ldr	r0, [r7, #0]
 8004012:	f7ff fe01 	bl	8003c18 <_ZN6tflite13ErrorReporter6ReportEPKcz>
          error_reporter,
          "Found too many dimensions in the input array of operation '%s'.\n",
          op_name);
      return kTfLiteError;
 8004016:	2301      	movs	r3, #1
 8004018:	e014      	b.n	8004044 <_ZN6tflite12_GLOBAL__N_126FlatBufferIntVectorToArrayEiPKN11flatbuffers6VectorIlEEPiPNS_13ErrorReporterEPKc+0x6c>
    } else {
      for (size_t i = 0; i < num_dimensions; ++i) {
 800401a:	2300      	movs	r3, #0
 800401c:	617b      	str	r3, [r7, #20]
 800401e:	697a      	ldr	r2, [r7, #20]
 8004020:	693b      	ldr	r3, [r7, #16]
 8004022:	429a      	cmp	r2, r3
 8004024:	d20d      	bcs.n	8004042 <_ZN6tflite12_GLOBAL__N_126FlatBufferIntVectorToArrayEiPKN11flatbuffers6VectorIlEEPiPNS_13ErrorReporterEPKc+0x6a>
        buffer[i] = flat_vector->Get(i);
 8004026:	697b      	ldr	r3, [r7, #20]
 8004028:	009b      	lsls	r3, r3, #2
 800402a:	687a      	ldr	r2, [r7, #4]
 800402c:	18d4      	adds	r4, r2, r3
 800402e:	6979      	ldr	r1, [r7, #20]
 8004030:	68b8      	ldr	r0, [r7, #8]
 8004032:	f000 fbe1 	bl	80047f8 <_ZNK11flatbuffers6VectorIlE3GetEm>
 8004036:	4603      	mov	r3, r0
 8004038:	6023      	str	r3, [r4, #0]
      for (size_t i = 0; i < num_dimensions; ++i) {
 800403a:	697b      	ldr	r3, [r7, #20]
 800403c:	3301      	adds	r3, #1
 800403e:	617b      	str	r3, [r7, #20]
 8004040:	e7ed      	b.n	800401e <_ZN6tflite12_GLOBAL__N_126FlatBufferIntVectorToArrayEiPKN11flatbuffers6VectorIlEEPiPNS_13ErrorReporterEPKc+0x46>
      }
    }
  }
  return kTfLiteOk;
 8004042:	2300      	movs	r3, #0
}
 8004044:	4618      	mov	r0, r3
 8004046:	371c      	adds	r7, #28
 8004048:	46bd      	mov	sp, r7
 800404a:	bd90      	pop	{r4, r7, pc}
 800404c:	08013bb8 	.word	0x08013bb8
 8004050:	08013be8 	.word	0x08013be8

08004054 <_ZN6tflite12_GLOBAL__N_117ConvertActivationENS_22ActivationFunctionTypeE>:

// Converts the flatbuffer activation to what is used at runtime.
TfLiteFusedActivation ConvertActivation(ActivationFunctionType activation) {
 8004054:	b480      	push	{r7}
 8004056:	b083      	sub	sp, #12
 8004058:	af00      	add	r7, sp, #0
 800405a:	4603      	mov	r3, r0
 800405c:	71fb      	strb	r3, [r7, #7]
  switch (activation) {
 800405e:	79fb      	ldrb	r3, [r7, #7]
 8004060:	2b05      	cmp	r3, #5
 8004062:	d81b      	bhi.n	800409c <_ZN6tflite12_GLOBAL__N_117ConvertActivationENS_22ActivationFunctionTypeE+0x48>
 8004064:	a201      	add	r2, pc, #4	; (adr r2, 800406c <_ZN6tflite12_GLOBAL__N_117ConvertActivationENS_22ActivationFunctionTypeE+0x18>)
 8004066:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800406a:	bf00      	nop
 800406c:	08004085 	.word	0x08004085
 8004070:	08004089 	.word	0x08004089
 8004074:	0800408d 	.word	0x0800408d
 8004078:	08004091 	.word	0x08004091
 800407c:	08004095 	.word	0x08004095
 8004080:	08004099 	.word	0x08004099
    case ActivationFunctionType_NONE:
      return kTfLiteActNone;
 8004084:	2300      	movs	r3, #0
 8004086:	e00a      	b.n	800409e <_ZN6tflite12_GLOBAL__N_117ConvertActivationENS_22ActivationFunctionTypeE+0x4a>
    case ActivationFunctionType_RELU:
      return kTfLiteActRelu;
 8004088:	2301      	movs	r3, #1
 800408a:	e008      	b.n	800409e <_ZN6tflite12_GLOBAL__N_117ConvertActivationENS_22ActivationFunctionTypeE+0x4a>
    case ActivationFunctionType_RELU_N1_TO_1:
      return kTfLiteActReluN1To1;
 800408c:	2302      	movs	r3, #2
 800408e:	e006      	b.n	800409e <_ZN6tflite12_GLOBAL__N_117ConvertActivationENS_22ActivationFunctionTypeE+0x4a>
    case ActivationFunctionType_RELU6:
      return kTfLiteActRelu6;
 8004090:	2303      	movs	r3, #3
 8004092:	e004      	b.n	800409e <_ZN6tflite12_GLOBAL__N_117ConvertActivationENS_22ActivationFunctionTypeE+0x4a>
    case ActivationFunctionType_TANH:
      return kTfLiteActTanh;
 8004094:	2304      	movs	r3, #4
 8004096:	e002      	b.n	800409e <_ZN6tflite12_GLOBAL__N_117ConvertActivationENS_22ActivationFunctionTypeE+0x4a>
    case ActivationFunctionType_SIGN_BIT:
      return kTfLiteActSignBit;
 8004098:	2305      	movs	r3, #5
 800409a:	e000      	b.n	800409e <_ZN6tflite12_GLOBAL__N_117ConvertActivationENS_22ActivationFunctionTypeE+0x4a>
  }
  return kTfLiteActNone;
 800409c:	2300      	movs	r3, #0
}
 800409e:	4618      	mov	r0, r3
 80040a0:	370c      	adds	r7, #12
 80040a2:	46bd      	mov	sp, r7
 80040a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a8:	4770      	bx	lr
 80040aa:	bf00      	nop

080040ac <_ZN6tflite12_GLOBAL__N_114ConvertPaddingENS_7PaddingE>:

// Converts the flatbuffer padding enum to what is used at runtime.
TfLitePadding ConvertPadding(Padding padding) {
 80040ac:	b480      	push	{r7}
 80040ae:	b083      	sub	sp, #12
 80040b0:	af00      	add	r7, sp, #0
 80040b2:	4603      	mov	r3, r0
 80040b4:	71fb      	strb	r3, [r7, #7]
  switch (padding) {
 80040b6:	79fb      	ldrb	r3, [r7, #7]
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d002      	beq.n	80040c2 <_ZN6tflite12_GLOBAL__N_114ConvertPaddingENS_7PaddingE+0x16>
 80040bc:	2b01      	cmp	r3, #1
 80040be:	d002      	beq.n	80040c6 <_ZN6tflite12_GLOBAL__N_114ConvertPaddingENS_7PaddingE+0x1a>
 80040c0:	e003      	b.n	80040ca <_ZN6tflite12_GLOBAL__N_114ConvertPaddingENS_7PaddingE+0x1e>
    case Padding_SAME:
      return kTfLitePaddingSame;
 80040c2:	2301      	movs	r3, #1
 80040c4:	e002      	b.n	80040cc <_ZN6tflite12_GLOBAL__N_114ConvertPaddingENS_7PaddingE+0x20>
    case Padding_VALID:
      return kTfLitePaddingValid;
 80040c6:	2302      	movs	r3, #2
 80040c8:	e000      	b.n	80040cc <_ZN6tflite12_GLOBAL__N_114ConvertPaddingENS_7PaddingE+0x20>
  }
  return kTfLitePaddingUnknown;
 80040ca:	2300      	movs	r3, #0
}
 80040cc:	4618      	mov	r0, r3
 80040ce:	370c      	adds	r7, #12
 80040d0:	46bd      	mov	sp, r7
 80040d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d6:	4770      	bx	lr

080040d8 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE>:
}  // NOLINT[readability/fn_size]
#endif  // !defined(TF_LITE_STATIC_MEMORY)
}  // namespace

TfLiteStatus ConvertTensorType(TensorType tensor_type, TfLiteType* type,
                               ErrorReporter* error_reporter) {
 80040d8:	b580      	push	{r7, lr}
 80040da:	b084      	sub	sp, #16
 80040dc:	af00      	add	r7, sp, #0
 80040de:	4603      	mov	r3, r0
 80040e0:	60b9      	str	r1, [r7, #8]
 80040e2:	607a      	str	r2, [r7, #4]
 80040e4:	73fb      	strb	r3, [r7, #15]
  switch (tensor_type) {
 80040e6:	7bfb      	ldrb	r3, [r7, #15]
 80040e8:	2b0f      	cmp	r3, #15
 80040ea:	d873      	bhi.n	80041d4 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0xfc>
 80040ec:	a201      	add	r2, pc, #4	; (adr r2, 80040f4 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x1c>)
 80040ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040f2:	bf00      	nop
 80040f4:	0800413f 	.word	0x0800413f
 80040f8:	08004135 	.word	0x08004135
 80040fc:	0800415d 	.word	0x0800415d
 8004100:	08004171 	.word	0x08004171
 8004104:	08004185 	.word	0x08004185
 8004108:	08004199 	.word	0x08004199
 800410c:	080041a3 	.word	0x080041a3
 8004110:	08004153 	.word	0x08004153
 8004114:	080041ad 	.word	0x080041ad
 8004118:	0800417b 	.word	0x0800417b
 800411c:	08004149 	.word	0x08004149
 8004120:	080041b7 	.word	0x080041b7
 8004124:	0800418f 	.word	0x0800418f
 8004128:	080041c1 	.word	0x080041c1
 800412c:	080041cb 	.word	0x080041cb
 8004130:	08004167 	.word	0x08004167
    case TensorType_FLOAT16:
      *type = kTfLiteFloat16;
 8004134:	68bb      	ldr	r3, [r7, #8]
 8004136:	220a      	movs	r2, #10
 8004138:	701a      	strb	r2, [r3, #0]
      return kTfLiteOk;
 800413a:	2300      	movs	r3, #0
 800413c:	e054      	b.n	80041e8 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x110>
    case TensorType_FLOAT32:
      *type = kTfLiteFloat32;
 800413e:	68bb      	ldr	r3, [r7, #8]
 8004140:	2201      	movs	r2, #1
 8004142:	701a      	strb	r2, [r3, #0]
      return kTfLiteOk;
 8004144:	2300      	movs	r3, #0
 8004146:	e04f      	b.n	80041e8 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x110>
    case TensorType_FLOAT64:
      *type = kTfLiteFloat64;
 8004148:	68bb      	ldr	r3, [r7, #8]
 800414a:	220b      	movs	r2, #11
 800414c:	701a      	strb	r2, [r3, #0]
      return kTfLiteOk;
 800414e:	2300      	movs	r3, #0
 8004150:	e04a      	b.n	80041e8 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x110>
    case TensorType_INT16:
      *type = kTfLiteInt16;
 8004152:	68bb      	ldr	r3, [r7, #8]
 8004154:	2207      	movs	r2, #7
 8004156:	701a      	strb	r2, [r3, #0]
      return kTfLiteOk;
 8004158:	2300      	movs	r3, #0
 800415a:	e045      	b.n	80041e8 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x110>
    case TensorType_INT32:
      *type = kTfLiteInt32;
 800415c:	68bb      	ldr	r3, [r7, #8]
 800415e:	2202      	movs	r2, #2
 8004160:	701a      	strb	r2, [r3, #0]
      return kTfLiteOk;
 8004162:	2300      	movs	r3, #0
 8004164:	e040      	b.n	80041e8 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x110>
    case TensorType_UINT32:
      *type = kTfLiteUInt32;
 8004166:	68bb      	ldr	r3, [r7, #8]
 8004168:	2210      	movs	r2, #16
 800416a:	701a      	strb	r2, [r3, #0]
      return kTfLiteOk;
 800416c:	2300      	movs	r3, #0
 800416e:	e03b      	b.n	80041e8 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x110>
    case TensorType_UINT8:
      *type = kTfLiteUInt8;
 8004170:	68bb      	ldr	r3, [r7, #8]
 8004172:	2203      	movs	r2, #3
 8004174:	701a      	strb	r2, [r3, #0]
      return kTfLiteOk;
 8004176:	2300      	movs	r3, #0
 8004178:	e036      	b.n	80041e8 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x110>
    case TensorType_INT8:
      *type = kTfLiteInt8;
 800417a:	68bb      	ldr	r3, [r7, #8]
 800417c:	2209      	movs	r2, #9
 800417e:	701a      	strb	r2, [r3, #0]
      return kTfLiteOk;
 8004180:	2300      	movs	r3, #0
 8004182:	e031      	b.n	80041e8 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x110>
    case TensorType_INT64:
      *type = kTfLiteInt64;
 8004184:	68bb      	ldr	r3, [r7, #8]
 8004186:	2204      	movs	r2, #4
 8004188:	701a      	strb	r2, [r3, #0]
      return kTfLiteOk;
 800418a:	2300      	movs	r3, #0
 800418c:	e02c      	b.n	80041e8 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x110>
    case TensorType_UINT64:
      *type = kTfLiteUInt64;
 800418e:	68bb      	ldr	r3, [r7, #8]
 8004190:	220d      	movs	r2, #13
 8004192:	701a      	strb	r2, [r3, #0]
      return kTfLiteOk;
 8004194:	2300      	movs	r3, #0
 8004196:	e027      	b.n	80041e8 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x110>
    case TensorType_STRING:
      *type = kTfLiteString;
 8004198:	68bb      	ldr	r3, [r7, #8]
 800419a:	2205      	movs	r2, #5
 800419c:	701a      	strb	r2, [r3, #0]
      return kTfLiteOk;
 800419e:	2300      	movs	r3, #0
 80041a0:	e022      	b.n	80041e8 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x110>
    case TensorType_BOOL:
      *type = kTfLiteBool;
 80041a2:	68bb      	ldr	r3, [r7, #8]
 80041a4:	2206      	movs	r2, #6
 80041a6:	701a      	strb	r2, [r3, #0]
      return kTfLiteOk;
 80041a8:	2300      	movs	r3, #0
 80041aa:	e01d      	b.n	80041e8 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x110>
    case TensorType_COMPLEX64:
      *type = kTfLiteComplex64;
 80041ac:	68bb      	ldr	r3, [r7, #8]
 80041ae:	2208      	movs	r2, #8
 80041b0:	701a      	strb	r2, [r3, #0]
      return kTfLiteOk;
 80041b2:	2300      	movs	r3, #0
 80041b4:	e018      	b.n	80041e8 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x110>
    case TensorType_COMPLEX128:
      *type = kTfLiteComplex128;
 80041b6:	68bb      	ldr	r3, [r7, #8]
 80041b8:	220c      	movs	r2, #12
 80041ba:	701a      	strb	r2, [r3, #0]
      return kTfLiteOk;
 80041bc:	2300      	movs	r3, #0
 80041be:	e013      	b.n	80041e8 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x110>
    case TensorType_RESOURCE:
      *type = kTfLiteResource;
 80041c0:	68bb      	ldr	r3, [r7, #8]
 80041c2:	220e      	movs	r2, #14
 80041c4:	701a      	strb	r2, [r3, #0]
      return kTfLiteOk;
 80041c6:	2300      	movs	r3, #0
 80041c8:	e00e      	b.n	80041e8 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x110>
    case TensorType_VARIANT:
      *type = kTfLiteVariant;
 80041ca:	68bb      	ldr	r3, [r7, #8]
 80041cc:	220f      	movs	r2, #15
 80041ce:	701a      	strb	r2, [r3, #0]
      return kTfLiteOk;
 80041d0:	2300      	movs	r3, #0
 80041d2:	e009      	b.n	80041e8 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x110>
    default:
      *type = kTfLiteNoType;
 80041d4:	68bb      	ldr	r3, [r7, #8]
 80041d6:	2200      	movs	r2, #0
 80041d8:	701a      	strb	r2, [r3, #0]
      TF_LITE_REPORT_ERROR(error_reporter,
 80041da:	7bfb      	ldrb	r3, [r7, #15]
 80041dc:	461a      	mov	r2, r3
 80041de:	4904      	ldr	r1, [pc, #16]	; (80041f0 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x118>)
 80041e0:	6878      	ldr	r0, [r7, #4]
 80041e2:	f7ff fd19 	bl	8003c18 <_ZN6tflite13ErrorReporter6ReportEPKcz>
                           "Unsupported data type %d in tensor\n", tensor_type);
      return kTfLiteError;
 80041e6:	2301      	movs	r3, #1
  }
}
 80041e8:	4618      	mov	r0, r3
 80041ea:	3710      	adds	r7, #16
 80041ec:	46bd      	mov	sp, r7
 80041ee:	bd80      	pop	{r7, pc}
 80041f0:	08013d0c 	.word	0x08013d0c

080041f4 <_ZN6tflite20ParseDepthwiseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>:
}

TfLiteStatus ParseDepthwiseConv2D(const Operator* op,
                                  ErrorReporter* error_reporter,
                                  BuiltinDataAllocator* allocator,
                                  void** builtin_data) {
 80041f4:	b5b0      	push	{r4, r5, r7, lr}
 80041f6:	b08a      	sub	sp, #40	; 0x28
 80041f8:	af02      	add	r7, sp, #8
 80041fa:	60f8      	str	r0, [r7, #12]
 80041fc:	60b9      	str	r1, [r7, #8]
 80041fe:	607a      	str	r2, [r7, #4]
 8004200:	603b      	str	r3, [r7, #0]
  CheckParsePointerParams(op, error_reporter, allocator, builtin_data);
 8004202:	683b      	ldr	r3, [r7, #0]
 8004204:	687a      	ldr	r2, [r7, #4]
 8004206:	68b9      	ldr	r1, [r7, #8]
 8004208:	68f8      	ldr	r0, [r7, #12]
 800420a:	f7ff fec5 	bl	8003f98 <_ZN6tflite12_GLOBAL__N_123CheckParsePointerParamsEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>

  SafeBuiltinDataAllocator safe_allocator(allocator);
 800420e:	f107 0318 	add.w	r3, r7, #24
 8004212:	6879      	ldr	r1, [r7, #4]
 8004214:	4618      	mov	r0, r3
 8004216:	f7ff feb0 	bl	8003f7a <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocatorC1EPNS_20BuiltinDataAllocatorE>

  std::unique_ptr<TfLiteDepthwiseConvParams,
                  SafeBuiltinDataAllocator::BuiltinDataDeleter>
      params = safe_allocator.Allocate<TfLiteDepthwiseConvParams>();
 800421a:	f107 0310 	add.w	r3, r7, #16
 800421e:	f107 0218 	add.w	r2, r7, #24
 8004222:	4611      	mov	r1, r2
 8004224:	4618      	mov	r0, r3
 8004226:	f000 fb0d 	bl	8004844 <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator8AllocateI25TfLiteDepthwiseConvParamsEESt10unique_ptrIT_NS1_18BuiltinDataDeleterEEv>
  TF_LITE_ENSURE(error_reporter, params != nullptr);
 800422a:	f107 0310 	add.w	r3, r7, #16
 800422e:	2100      	movs	r1, #0
 8004230:	4618      	mov	r0, r3
 8004232:	f000 fb47 	bl	80048c4 <_ZStneI25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEbRKSt10unique_ptrIT_T0_EDn>
 8004236:	4603      	mov	r3, r0
 8004238:	f083 0301 	eor.w	r3, r3, #1
 800423c:	b2db      	uxtb	r3, r3
 800423e:	2b00      	cmp	r3, #0
 8004240:	d00c      	beq.n	800425c <_ZN6tflite20ParseDepthwiseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x68>
 8004242:	4b3f      	ldr	r3, [pc, #252]	; (8004340 <_ZN6tflite20ParseDepthwiseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x14c>)
 8004244:	9301      	str	r3, [sp, #4]
 8004246:	f240 43a2 	movw	r3, #1186	; 0x4a2
 800424a:	9300      	str	r3, [sp, #0]
 800424c:	4b3d      	ldr	r3, [pc, #244]	; (8004344 <_ZN6tflite20ParseDepthwiseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x150>)
 800424e:	4a3e      	ldr	r2, [pc, #248]	; (8004348 <_ZN6tflite20ParseDepthwiseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x154>)
 8004250:	68b9      	ldr	r1, [r7, #8]
 8004252:	68b8      	ldr	r0, [r7, #8]
 8004254:	f7ff fcf9 	bl	8003c4a <_ZN6tflite13ErrorReporter11ReportErrorEPvPKcz>
 8004258:	2401      	movs	r4, #1
 800425a:	e066      	b.n	800432a <_ZN6tflite20ParseDepthwiseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x136>

  const DepthwiseConv2DOptions* schema_params =
      op->builtin_options_as_DepthwiseConv2DOptions();
 800425c:	68f8      	ldr	r0, [r7, #12]
 800425e:	f7ff fe1a 	bl	8003e96 <_ZNK6tflite8Operator41builtin_options_as_DepthwiseConv2DOptionsEv>
 8004262:	61f8      	str	r0, [r7, #28]

  if (schema_params != nullptr) {
 8004264:	69fb      	ldr	r3, [r7, #28]
 8004266:	2b00      	cmp	r3, #0
 8004268:	d056      	beq.n	8004318 <_ZN6tflite20ParseDepthwiseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x124>
    params->padding = ConvertPadding(schema_params->padding());
 800426a:	69f8      	ldr	r0, [r7, #28]
 800426c:	f7ff fd20 	bl	8003cb0 <_ZNK6tflite22DepthwiseConv2DOptions7paddingEv>
 8004270:	4603      	mov	r3, r0
 8004272:	461d      	mov	r5, r3
 8004274:	f107 0310 	add.w	r3, r7, #16
 8004278:	4618      	mov	r0, r3
 800427a:	f000 fb30 	bl	80048de <_ZNKSt10unique_ptrI25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>
 800427e:	4604      	mov	r4, r0
 8004280:	4628      	mov	r0, r5
 8004282:	f7ff ff13 	bl	80040ac <_ZN6tflite12_GLOBAL__N_114ConvertPaddingENS_7PaddingE>
 8004286:	4603      	mov	r3, r0
 8004288:	7023      	strb	r3, [r4, #0]
    params->stride_width = schema_params->stride_w();
 800428a:	f107 0310 	add.w	r3, r7, #16
 800428e:	4618      	mov	r0, r3
 8004290:	f000 fb25 	bl	80048de <_ZNKSt10unique_ptrI25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>
 8004294:	4604      	mov	r4, r0
 8004296:	69f8      	ldr	r0, [r7, #28]
 8004298:	f7ff fd1a 	bl	8003cd0 <_ZNK6tflite22DepthwiseConv2DOptions8stride_wEv>
 800429c:	4603      	mov	r3, r0
 800429e:	6063      	str	r3, [r4, #4]
    params->stride_height = schema_params->stride_h();
 80042a0:	f107 0310 	add.w	r3, r7, #16
 80042a4:	4618      	mov	r0, r3
 80042a6:	f000 fb1a 	bl	80048de <_ZNKSt10unique_ptrI25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>
 80042aa:	4604      	mov	r4, r0
 80042ac:	69f8      	ldr	r0, [r7, #28]
 80042ae:	f7ff fd1e 	bl	8003cee <_ZNK6tflite22DepthwiseConv2DOptions8stride_hEv>
 80042b2:	4603      	mov	r3, r0
 80042b4:	60a3      	str	r3, [r4, #8]
    params->depth_multiplier = schema_params->depth_multiplier();
 80042b6:	f107 0310 	add.w	r3, r7, #16
 80042ba:	4618      	mov	r0, r3
 80042bc:	f000 fb0f 	bl	80048de <_ZNKSt10unique_ptrI25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>
 80042c0:	4604      	mov	r4, r0
 80042c2:	69f8      	ldr	r0, [r7, #28]
 80042c4:	f7ff fd22 	bl	8003d0c <_ZNK6tflite22DepthwiseConv2DOptions16depth_multiplierEv>
 80042c8:	4603      	mov	r3, r0
 80042ca:	60e3      	str	r3, [r4, #12]
    params->activation =
        ConvertActivation(schema_params->fused_activation_function());
 80042cc:	69f8      	ldr	r0, [r7, #28]
 80042ce:	f7ff fd2c 	bl	8003d2a <_ZNK6tflite22DepthwiseConv2DOptions25fused_activation_functionEv>
 80042d2:	4603      	mov	r3, r0
 80042d4:	461d      	mov	r5, r3
    params->activation =
 80042d6:	f107 0310 	add.w	r3, r7, #16
 80042da:	4618      	mov	r0, r3
 80042dc:	f000 faff 	bl	80048de <_ZNKSt10unique_ptrI25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>
 80042e0:	4604      	mov	r4, r0
        ConvertActivation(schema_params->fused_activation_function());
 80042e2:	4628      	mov	r0, r5
 80042e4:	f7ff feb6 	bl	8004054 <_ZN6tflite12_GLOBAL__N_117ConvertActivationENS_22ActivationFunctionTypeE>
 80042e8:	4603      	mov	r3, r0
    params->activation =
 80042ea:	7423      	strb	r3, [r4, #16]

    params->dilation_width_factor = schema_params->dilation_w_factor();
 80042ec:	f107 0310 	add.w	r3, r7, #16
 80042f0:	4618      	mov	r0, r3
 80042f2:	f000 faf4 	bl	80048de <_ZNKSt10unique_ptrI25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>
 80042f6:	4604      	mov	r4, r0
 80042f8:	69f8      	ldr	r0, [r7, #28]
 80042fa:	f7ff fd26 	bl	8003d4a <_ZNK6tflite22DepthwiseConv2DOptions17dilation_w_factorEv>
 80042fe:	4603      	mov	r3, r0
 8004300:	6163      	str	r3, [r4, #20]
    params->dilation_height_factor = schema_params->dilation_h_factor();
 8004302:	f107 0310 	add.w	r3, r7, #16
 8004306:	4618      	mov	r0, r3
 8004308:	f000 fae9 	bl	80048de <_ZNKSt10unique_ptrI25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>
 800430c:	4604      	mov	r4, r0
 800430e:	69f8      	ldr	r0, [r7, #28]
 8004310:	f7ff fd2a 	bl	8003d68 <_ZNK6tflite22DepthwiseConv2DOptions17dilation_h_factorEv>
 8004314:	4603      	mov	r3, r0
 8004316:	61a3      	str	r3, [r4, #24]
    // TODO(b/157480169): We should either return kTfLiteError or fill in some
    // reasonable defaults in the params struct. We are not doing so until we
    // better undertand the ramifications of changing the legacy behavior.
  }

  *builtin_data = params.release();
 8004318:	f107 0310 	add.w	r3, r7, #16
 800431c:	4618      	mov	r0, r3
 800431e:	f000 faea 	bl	80048f6 <_ZNSt10unique_ptrI25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE7releaseEv>
 8004322:	4602      	mov	r2, r0
 8004324:	683b      	ldr	r3, [r7, #0]
 8004326:	601a      	str	r2, [r3, #0]
  return kTfLiteOk;
 8004328:	2400      	movs	r4, #0
      params = safe_allocator.Allocate<TfLiteDepthwiseConvParams>();
 800432a:	f107 0310 	add.w	r3, r7, #16
 800432e:	4618      	mov	r0, r3
 8004330:	f000 faa6 	bl	8004880 <_ZNSt10unique_ptrI25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEED1Ev>
 8004334:	4623      	mov	r3, r4
}
 8004336:	4618      	mov	r0, r3
 8004338:	3720      	adds	r7, #32
 800433a:	46bd      	mov	sp, r7
 800433c:	bdb0      	pop	{r4, r5, r7, pc}
 800433e:	bf00      	nop
 8004340:	08013c8c 	.word	0x08013c8c
 8004344:	08013c2c 	.word	0x08013c2c
 8004348:	08013c74 	.word	0x08013c74

0800434c <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>:
}

TfLiteStatus ParseFullyConnected(const Operator* op,
                                 ErrorReporter* error_reporter,
                                 BuiltinDataAllocator* allocator,
                                 void** builtin_data) {
 800434c:	b5b0      	push	{r4, r5, r7, lr}
 800434e:	b08a      	sub	sp, #40	; 0x28
 8004350:	af02      	add	r7, sp, #8
 8004352:	60f8      	str	r0, [r7, #12]
 8004354:	60b9      	str	r1, [r7, #8]
 8004356:	607a      	str	r2, [r7, #4]
 8004358:	603b      	str	r3, [r7, #0]
  CheckParsePointerParams(op, error_reporter, allocator, builtin_data);
 800435a:	683b      	ldr	r3, [r7, #0]
 800435c:	687a      	ldr	r2, [r7, #4]
 800435e:	68b9      	ldr	r1, [r7, #8]
 8004360:	68f8      	ldr	r0, [r7, #12]
 8004362:	f7ff fe19 	bl	8003f98 <_ZN6tflite12_GLOBAL__N_123CheckParsePointerParamsEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>

  SafeBuiltinDataAllocator safe_allocator(allocator);
 8004366:	f107 0318 	add.w	r3, r7, #24
 800436a:	6879      	ldr	r1, [r7, #4]
 800436c:	4618      	mov	r0, r3
 800436e:	f7ff fe04 	bl	8003f7a <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocatorC1EPNS_20BuiltinDataAllocatorE>

  std::unique_ptr<TfLiteFullyConnectedParams,
                  SafeBuiltinDataAllocator::BuiltinDataDeleter>
      params = safe_allocator.Allocate<TfLiteFullyConnectedParams>();
 8004372:	f107 0310 	add.w	r3, r7, #16
 8004376:	f107 0218 	add.w	r2, r7, #24
 800437a:	4611      	mov	r1, r2
 800437c:	4618      	mov	r0, r3
 800437e:	f000 face 	bl	800491e <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator8AllocateI26TfLiteFullyConnectedParamsEESt10unique_ptrIT_NS1_18BuiltinDataDeleterEEv>
  TF_LITE_ENSURE(error_reporter, params != nullptr);
 8004382:	f107 0310 	add.w	r3, r7, #16
 8004386:	2100      	movs	r1, #0
 8004388:	4618      	mov	r0, r3
 800438a:	f000 fb08 	bl	800499e <_ZStneI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEbRKSt10unique_ptrIT_T0_EDn>
 800438e:	4603      	mov	r3, r0
 8004390:	f083 0301 	eor.w	r3, r3, #1
 8004394:	b2db      	uxtb	r3, r3
 8004396:	2b00      	cmp	r3, #0
 8004398:	d00c      	beq.n	80043b4 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x68>
 800439a:	4b37      	ldr	r3, [pc, #220]	; (8004478 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x12c>)
 800439c:	9301      	str	r3, [sp, #4]
 800439e:	f240 531d 	movw	r3, #1309	; 0x51d
 80043a2:	9300      	str	r3, [sp, #0]
 80043a4:	4b35      	ldr	r3, [pc, #212]	; (800447c <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x130>)
 80043a6:	4a36      	ldr	r2, [pc, #216]	; (8004480 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x134>)
 80043a8:	68b9      	ldr	r1, [r7, #8]
 80043aa:	68b8      	ldr	r0, [r7, #8]
 80043ac:	f7ff fc4d 	bl	8003c4a <_ZN6tflite13ErrorReporter11ReportErrorEPvPKcz>
 80043b0:	2401      	movs	r4, #1
 80043b2:	e056      	b.n	8004462 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x116>

  const FullyConnectedOptions* schema_params =
      op->builtin_options_as_FullyConnectedOptions();
 80043b4:	68f8      	ldr	r0, [r7, #12]
 80043b6:	f7ff fd82 	bl	8003ebe <_ZNK6tflite8Operator40builtin_options_as_FullyConnectedOptionsEv>
 80043ba:	61f8      	str	r0, [r7, #28]

  if (schema_params != nullptr) {
 80043bc:	69fb      	ldr	r3, [r7, #28]
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d046      	beq.n	8004450 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x104>
    params->activation =
        ConvertActivation(schema_params->fused_activation_function());
 80043c2:	69f8      	ldr	r0, [r7, #28]
 80043c4:	f7ff fcdf 	bl	8003d86 <_ZNK6tflite21FullyConnectedOptions25fused_activation_functionEv>
 80043c8:	4603      	mov	r3, r0
 80043ca:	461d      	mov	r5, r3
    params->activation =
 80043cc:	f107 0310 	add.w	r3, r7, #16
 80043d0:	4618      	mov	r0, r3
 80043d2:	f000 faf1 	bl	80049b8 <_ZNKSt10unique_ptrI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>
 80043d6:	4604      	mov	r4, r0
        ConvertActivation(schema_params->fused_activation_function());
 80043d8:	4628      	mov	r0, r5
 80043da:	f7ff fe3b 	bl	8004054 <_ZN6tflite12_GLOBAL__N_117ConvertActivationENS_22ActivationFunctionTypeE>
 80043de:	4603      	mov	r3, r0
    params->activation =
 80043e0:	7023      	strb	r3, [r4, #0]
    params->keep_num_dims = schema_params->keep_num_dims();
 80043e2:	f107 0310 	add.w	r3, r7, #16
 80043e6:	4618      	mov	r0, r3
 80043e8:	f000 fae6 	bl	80049b8 <_ZNKSt10unique_ptrI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>
 80043ec:	4604      	mov	r4, r0
 80043ee:	69f8      	ldr	r0, [r7, #28]
 80043f0:	f7ff fce9 	bl	8003dc6 <_ZNK6tflite21FullyConnectedOptions13keep_num_dimsEv>
 80043f4:	4603      	mov	r3, r0
 80043f6:	70a3      	strb	r3, [r4, #2]
    params->asymmetric_quantize_inputs =
 80043f8:	f107 0310 	add.w	r3, r7, #16
 80043fc:	4618      	mov	r0, r3
 80043fe:	f000 fadb 	bl	80049b8 <_ZNKSt10unique_ptrI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>
 8004402:	4604      	mov	r4, r0
        schema_params->asymmetric_quantize_inputs();
 8004404:	69f8      	ldr	r0, [r7, #28]
 8004406:	f7ff fcf2 	bl	8003dee <_ZNK6tflite21FullyConnectedOptions26asymmetric_quantize_inputsEv>
 800440a:	4603      	mov	r3, r0
    params->asymmetric_quantize_inputs =
 800440c:	70e3      	strb	r3, [r4, #3]

    switch (schema_params->weights_format()) {
 800440e:	69f8      	ldr	r0, [r7, #28]
 8004410:	f7ff fcc9 	bl	8003da6 <_ZNK6tflite21FullyConnectedOptions14weights_formatEv>
 8004414:	4603      	mov	r3, r0
 8004416:	2b00      	cmp	r3, #0
 8004418:	d002      	beq.n	8004420 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xd4>
 800441a:	2b01      	cmp	r3, #1
 800441c:	d009      	beq.n	8004432 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xe6>
 800441e:	e011      	b.n	8004444 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xf8>
      case FullyConnectedOptionsWeightsFormat_DEFAULT:
        params->weights_format = kTfLiteFullyConnectedWeightsFormatDefault;
 8004420:	f107 0310 	add.w	r3, r7, #16
 8004424:	4618      	mov	r0, r3
 8004426:	f000 fac7 	bl	80049b8 <_ZNKSt10unique_ptrI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>
 800442a:	4603      	mov	r3, r0
 800442c:	2200      	movs	r2, #0
 800442e:	705a      	strb	r2, [r3, #1]
        break;
 8004430:	e00e      	b.n	8004450 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x104>
      case FullyConnectedOptionsWeightsFormat_SHUFFLED4x16INT8:
        params->weights_format =
 8004432:	f107 0310 	add.w	r3, r7, #16
 8004436:	4618      	mov	r0, r3
 8004438:	f000 fabe 	bl	80049b8 <_ZNKSt10unique_ptrI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>
 800443c:	4603      	mov	r3, r0
 800443e:	2201      	movs	r2, #1
 8004440:	705a      	strb	r2, [r3, #1]
            kTfLiteFullyConnectedWeightsFormatShuffled4x16Int8;
        break;
 8004442:	e005      	b.n	8004450 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x104>
      default:
        TF_LITE_REPORT_ERROR(error_reporter,
 8004444:	490f      	ldr	r1, [pc, #60]	; (8004484 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x138>)
 8004446:	68b8      	ldr	r0, [r7, #8]
 8004448:	f7ff fbe6 	bl	8003c18 <_ZN6tflite13ErrorReporter6ReportEPKcz>
                             "Unhandled fully-connected weights format.");
        return kTfLiteError;
 800444c:	2401      	movs	r4, #1
 800444e:	e008      	b.n	8004462 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x116>
    // TODO(b/157480169): We should either return kTfLiteError or fill in some
    // reasonable defaults in the params struct. We are not doing so until we
    // better undertand the ramifications of changing the legacy behavior.
  }

  *builtin_data = params.release();
 8004450:	f107 0310 	add.w	r3, r7, #16
 8004454:	4618      	mov	r0, r3
 8004456:	f000 fabb 	bl	80049d0 <_ZNSt10unique_ptrI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE7releaseEv>
 800445a:	4602      	mov	r2, r0
 800445c:	683b      	ldr	r3, [r7, #0]
 800445e:	601a      	str	r2, [r3, #0]
  return kTfLiteOk;
 8004460:	2400      	movs	r4, #0
      params = safe_allocator.Allocate<TfLiteFullyConnectedParams>();
 8004462:	f107 0310 	add.w	r3, r7, #16
 8004466:	4618      	mov	r0, r3
 8004468:	f000 fa77 	bl	800495a <_ZNSt10unique_ptrI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEED1Ev>
 800446c:	4623      	mov	r3, r4
}
 800446e:	4618      	mov	r0, r3
 8004470:	3720      	adds	r7, #32
 8004472:	46bd      	mov	sp, r7
 8004474:	bdb0      	pop	{r4, r5, r7, pc}
 8004476:	bf00      	nop
 8004478:	08013c8c 	.word	0x08013c8c
 800447c:	08013c2c 	.word	0x08013c2c
 8004480:	08013c74 	.word	0x08013c74
 8004484:	08013d30 	.word	0x08013d30

08004488 <_ZN6tflite12ParseReshapeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>:
  return kTfLiteOk;
}

TfLiteStatus ParseReshape(const Operator* op, ErrorReporter* error_reporter,
                          BuiltinDataAllocator* allocator,
                          void** builtin_data) {
 8004488:	b590      	push	{r4, r7, lr}
 800448a:	b08d      	sub	sp, #52	; 0x34
 800448c:	af02      	add	r7, sp, #8
 800448e:	60f8      	str	r0, [r7, #12]
 8004490:	60b9      	str	r1, [r7, #8]
 8004492:	607a      	str	r2, [r7, #4]
 8004494:	603b      	str	r3, [r7, #0]
  CheckParsePointerParams(op, error_reporter, allocator, builtin_data);
 8004496:	683b      	ldr	r3, [r7, #0]
 8004498:	687a      	ldr	r2, [r7, #4]
 800449a:	68b9      	ldr	r1, [r7, #8]
 800449c:	68f8      	ldr	r0, [r7, #12]
 800449e:	f7ff fd7b 	bl	8003f98 <_ZN6tflite12_GLOBAL__N_123CheckParsePointerParamsEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>

  SafeBuiltinDataAllocator safe_allocator(allocator);
 80044a2:	f107 0318 	add.w	r3, r7, #24
 80044a6:	6879      	ldr	r1, [r7, #4]
 80044a8:	4618      	mov	r0, r3
 80044aa:	f7ff fd66 	bl	8003f7a <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocatorC1EPNS_20BuiltinDataAllocatorE>

  std::unique_ptr<TfLiteReshapeParams,
                  SafeBuiltinDataAllocator::BuiltinDataDeleter>
      params = safe_allocator.Allocate<TfLiteReshapeParams>();
 80044ae:	f107 0310 	add.w	r3, r7, #16
 80044b2:	f107 0218 	add.w	r2, r7, #24
 80044b6:	4611      	mov	r1, r2
 80044b8:	4618      	mov	r0, r3
 80044ba:	f000 fa9d 	bl	80049f8 <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator8AllocateI19TfLiteReshapeParamsEESt10unique_ptrIT_NS1_18BuiltinDataDeleterEEv>
  TF_LITE_ENSURE(error_reporter, params != nullptr);
 80044be:	f107 0310 	add.w	r3, r7, #16
 80044c2:	2100      	movs	r1, #0
 80044c4:	4618      	mov	r0, r3
 80044c6:	f000 fad7 	bl	8004a78 <_ZStneI19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEbRKSt10unique_ptrIT_T0_EDn>
 80044ca:	4603      	mov	r3, r0
 80044cc:	f083 0301 	eor.w	r3, r3, #1
 80044d0:	b2db      	uxtb	r3, r3
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d00c      	beq.n	80044f0 <_ZN6tflite12ParseReshapeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x68>
 80044d6:	4b27      	ldr	r3, [pc, #156]	; (8004574 <_ZN6tflite12ParseReshapeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xec>)
 80044d8:	9301      	str	r3, [sp, #4]
 80044da:	f240 63c3 	movw	r3, #1731	; 0x6c3
 80044de:	9300      	str	r3, [sp, #0]
 80044e0:	4b25      	ldr	r3, [pc, #148]	; (8004578 <_ZN6tflite12ParseReshapeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xf0>)
 80044e2:	4a26      	ldr	r2, [pc, #152]	; (800457c <_ZN6tflite12ParseReshapeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xf4>)
 80044e4:	68b9      	ldr	r1, [r7, #8]
 80044e6:	68b8      	ldr	r0, [r7, #8]
 80044e8:	f7ff fbaf 	bl	8003c4a <_ZN6tflite13ErrorReporter11ReportErrorEPvPKcz>
 80044ec:	2401      	movs	r4, #1
 80044ee:	e037      	b.n	8004560 <_ZN6tflite12ParseReshapeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xd8>

  const ReshapeOptions* schema_params = op->builtin_options_as_ReshapeOptions();
 80044f0:	68f8      	ldr	r0, [r7, #12]
 80044f2:	f7ff fd0c 	bl	8003f0e <_ZNK6tflite8Operator33builtin_options_as_ReshapeOptionsEv>
 80044f6:	6278      	str	r0, [r7, #36]	; 0x24

  if (schema_params != nullptr) {
 80044f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d027      	beq.n	800454e <_ZN6tflite12ParseReshapeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xc6>
    const flatbuffers::Vector<int32_t>* new_shape = schema_params->new_shape();
 80044fe:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004500:	f7ff fc9e 	bl	8003e40 <_ZNK6tflite14ReshapeOptions9new_shapeEv>
 8004504:	6238      	str	r0, [r7, #32]
    if (new_shape != nullptr) {
 8004506:	6a3b      	ldr	r3, [r7, #32]
 8004508:	2b00      	cmp	r3, #0
 800450a:	d020      	beq.n	800454e <_ZN6tflite12ParseReshapeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xc6>
      TF_LITE_ENSURE_STATUS(
 800450c:	f107 0310 	add.w	r3, r7, #16
 8004510:	4618      	mov	r0, r3
 8004512:	f000 fabe 	bl	8004a92 <_ZNKSt10unique_ptrI19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>
 8004516:	4603      	mov	r3, r0
 8004518:	461a      	mov	r2, r3
 800451a:	4b19      	ldr	r3, [pc, #100]	; (8004580 <_ZN6tflite12ParseReshapeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xf8>)
 800451c:	9300      	str	r3, [sp, #0]
 800451e:	68bb      	ldr	r3, [r7, #8]
 8004520:	6a39      	ldr	r1, [r7, #32]
 8004522:	2020      	movs	r0, #32
 8004524:	f7ff fd58 	bl	8003fd8 <_ZN6tflite12_GLOBAL__N_126FlatBufferIntVectorToArrayEiPKN11flatbuffers6VectorIlEEPiPNS_13ErrorReporterEPKc>
 8004528:	4603      	mov	r3, r0
 800452a:	77fb      	strb	r3, [r7, #31]
 800452c:	7ffb      	ldrb	r3, [r7, #31]
 800452e:	2b00      	cmp	r3, #0
 8004530:	d001      	beq.n	8004536 <_ZN6tflite12ParseReshapeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xae>
 8004532:	7ffc      	ldrb	r4, [r7, #31]
 8004534:	e014      	b.n	8004560 <_ZN6tflite12ParseReshapeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xd8>
          FlatBufferIntVectorToArray(sizeof(params->shape), new_shape,
                                     params->shape, error_reporter, "reshape"));
      params->num_dimensions = new_shape->size();
 8004536:	6a38      	ldr	r0, [r7, #32]
 8004538:	f000 f94f 	bl	80047da <_ZNK11flatbuffers6VectorIlE4sizeEv>
 800453c:	4604      	mov	r4, r0
 800453e:	f107 0310 	add.w	r3, r7, #16
 8004542:	4618      	mov	r0, r3
 8004544:	f000 faa5 	bl	8004a92 <_ZNKSt10unique_ptrI19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>
 8004548:	4603      	mov	r3, r0
 800454a:	4622      	mov	r2, r4
 800454c:	621a      	str	r2, [r3, #32]
    // TODO(b/157480169): We should either return kTfLiteError or fill in some
    // reasonable defaults in the params struct. We are not doing so until we
    // better undertand the ramifications of changing the legacy behavior.
  }

  *builtin_data = params.release();
 800454e:	f107 0310 	add.w	r3, r7, #16
 8004552:	4618      	mov	r0, r3
 8004554:	f000 faa9 	bl	8004aaa <_ZNSt10unique_ptrI19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE7releaseEv>
 8004558:	4602      	mov	r2, r0
 800455a:	683b      	ldr	r3, [r7, #0]
 800455c:	601a      	str	r2, [r3, #0]
  return kTfLiteOk;
 800455e:	2400      	movs	r4, #0
      params = safe_allocator.Allocate<TfLiteReshapeParams>();
 8004560:	f107 0310 	add.w	r3, r7, #16
 8004564:	4618      	mov	r0, r3
 8004566:	f000 fa65 	bl	8004a34 <_ZNSt10unique_ptrI19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEED1Ev>
 800456a:	4623      	mov	r3, r4
}
 800456c:	4618      	mov	r0, r3
 800456e:	372c      	adds	r7, #44	; 0x2c
 8004570:	46bd      	mov	sp, r7
 8004572:	bd90      	pop	{r4, r7, pc}
 8004574:	08013c8c 	.word	0x08013c8c
 8004578:	08013c2c 	.word	0x08013c2c
 800457c:	08013c74 	.word	0x08013c74
 8004580:	08013d5c 	.word	0x08013d5c

08004584 <_ZN6tflite12ParseSoftmaxEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>:
  return kTfLiteOk;
}

TfLiteStatus ParseSoftmax(const Operator* op, ErrorReporter* error_reporter,
                          BuiltinDataAllocator* allocator,
                          void** builtin_data) {
 8004584:	b590      	push	{r4, r7, lr}
 8004586:	b08b      	sub	sp, #44	; 0x2c
 8004588:	af02      	add	r7, sp, #8
 800458a:	60f8      	str	r0, [r7, #12]
 800458c:	60b9      	str	r1, [r7, #8]
 800458e:	607a      	str	r2, [r7, #4]
 8004590:	603b      	str	r3, [r7, #0]
  CheckParsePointerParams(op, error_reporter, allocator, builtin_data);
 8004592:	683b      	ldr	r3, [r7, #0]
 8004594:	687a      	ldr	r2, [r7, #4]
 8004596:	68b9      	ldr	r1, [r7, #8]
 8004598:	68f8      	ldr	r0, [r7, #12]
 800459a:	f7ff fcfd 	bl	8003f98 <_ZN6tflite12_GLOBAL__N_123CheckParsePointerParamsEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>

  SafeBuiltinDataAllocator safe_allocator(allocator);
 800459e:	f107 0318 	add.w	r3, r7, #24
 80045a2:	6879      	ldr	r1, [r7, #4]
 80045a4:	4618      	mov	r0, r3
 80045a6:	f7ff fce8 	bl	8003f7a <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocatorC1EPNS_20BuiltinDataAllocatorE>
  std::unique_ptr<TfLiteSoftmaxParams,
                  SafeBuiltinDataAllocator::BuiltinDataDeleter>
      params = safe_allocator.Allocate<TfLiteSoftmaxParams>();
 80045aa:	f107 0310 	add.w	r3, r7, #16
 80045ae:	f107 0218 	add.w	r2, r7, #24
 80045b2:	4611      	mov	r1, r2
 80045b4:	4618      	mov	r0, r3
 80045b6:	f000 fa8c 	bl	8004ad2 <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator8AllocateI19TfLiteSoftmaxParamsEESt10unique_ptrIT_NS1_18BuiltinDataDeleterEEv>
  TF_LITE_ENSURE(error_reporter, params != nullptr);
 80045ba:	f107 0310 	add.w	r3, r7, #16
 80045be:	2100      	movs	r1, #0
 80045c0:	4618      	mov	r0, r3
 80045c2:	f000 fac6 	bl	8004b52 <_ZStneI19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEbRKSt10unique_ptrIT_T0_EDn>
 80045c6:	4603      	mov	r3, r0
 80045c8:	f083 0301 	eor.w	r3, r3, #1
 80045cc:	b2db      	uxtb	r3, r3
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d00c      	beq.n	80045ec <_ZN6tflite12ParseSoftmaxEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x68>
 80045d2:	4b1a      	ldr	r3, [pc, #104]	; (800463c <_ZN6tflite12ParseSoftmaxEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xb8>)
 80045d4:	9301      	str	r3, [sp, #4]
 80045d6:	f240 734c 	movw	r3, #1868	; 0x74c
 80045da:	9300      	str	r3, [sp, #0]
 80045dc:	4b18      	ldr	r3, [pc, #96]	; (8004640 <_ZN6tflite12ParseSoftmaxEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xbc>)
 80045de:	4a19      	ldr	r2, [pc, #100]	; (8004644 <_ZN6tflite12ParseSoftmaxEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xc0>)
 80045e0:	68b9      	ldr	r1, [r7, #8]
 80045e2:	68b8      	ldr	r0, [r7, #8]
 80045e4:	f7ff fb31 	bl	8003c4a <_ZN6tflite13ErrorReporter11ReportErrorEPvPKcz>
 80045e8:	2401      	movs	r4, #1
 80045ea:	e01c      	b.n	8004626 <_ZN6tflite12ParseSoftmaxEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xa2>

  const SoftmaxOptions* schema_params = op->builtin_options_as_SoftmaxOptions();
 80045ec:	68f8      	ldr	r0, [r7, #12]
 80045ee:	f7ff fc7a 	bl	8003ee6 <_ZNK6tflite8Operator33builtin_options_as_SoftmaxOptionsEv>
 80045f2:	61f8      	str	r0, [r7, #28]

  if (schema_params != nullptr) {
 80045f4:	69fb      	ldr	r3, [r7, #28]
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d00c      	beq.n	8004614 <_ZN6tflite12ParseSoftmaxEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x90>
    params->beta = schema_params->beta();
 80045fa:	f107 0310 	add.w	r3, r7, #16
 80045fe:	4618      	mov	r0, r3
 8004600:	f000 fab4 	bl	8004b6c <_ZNKSt10unique_ptrI19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>
 8004604:	4604      	mov	r4, r0
 8004606:	69f8      	ldr	r0, [r7, #28]
 8004608:	f7ff fc06 	bl	8003e18 <_ZNK6tflite14SoftmaxOptions4betaEv>
 800460c:	eef0 7a40 	vmov.f32	s15, s0
 8004610:	edc4 7a00 	vstr	s15, [r4]
    // TODO(b/157480169): We should either return kTfLiteError or fill in some
    // reasonable defaults in the params struct. We are not doing so until we
    // better undertand the ramifications of changing the legacy behavior.
  }

  *builtin_data = params.release();
 8004614:	f107 0310 	add.w	r3, r7, #16
 8004618:	4618      	mov	r0, r3
 800461a:	f000 fab3 	bl	8004b84 <_ZNSt10unique_ptrI19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE7releaseEv>
 800461e:	4602      	mov	r2, r0
 8004620:	683b      	ldr	r3, [r7, #0]
 8004622:	601a      	str	r2, [r3, #0]
  return kTfLiteOk;
 8004624:	2400      	movs	r4, #0
      params = safe_allocator.Allocate<TfLiteSoftmaxParams>();
 8004626:	f107 0310 	add.w	r3, r7, #16
 800462a:	4618      	mov	r0, r3
 800462c:	f000 fa6f 	bl	8004b0e <_ZNSt10unique_ptrI19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEED1Ev>
 8004630:	4623      	mov	r3, r4
}
 8004632:	4618      	mov	r0, r3
 8004634:	3724      	adds	r7, #36	; 0x24
 8004636:	46bd      	mov	sp, r7
 8004638:	bd90      	pop	{r4, r7, pc}
 800463a:	bf00      	nop
 800463c:	08013c8c 	.word	0x08013c8c
 8004640:	08013c2c 	.word	0x08013c2c
 8004644:	08013c74 	.word	0x08013c74

08004648 <_ZNK11flatbuffers6VectorIcE4DataEv>:
  const uint8_t *Data() const {
 8004648:	b480      	push	{r7}
 800464a:	b083      	sub	sp, #12
 800464c:	af00      	add	r7, sp, #0
 800464e:	6078      	str	r0, [r7, #4]
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	3304      	adds	r3, #4
  }
 8004654:	4618      	mov	r0, r3
 8004656:	370c      	adds	r7, #12
 8004658:	46bd      	mov	sp, r7
 800465a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800465e:	4770      	bx	lr

08004660 <_ZN11flatbuffers10ReadScalarIhEET_PKv>:
T ReadScalar(const void *p) {
 8004660:	b580      	push	{r7, lr}
 8004662:	b082      	sub	sp, #8
 8004664:	af00      	add	r7, sp, #0
 8004666:	6078      	str	r0, [r7, #4]
  return EndianScalar(*reinterpret_cast<const T *>(p));
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	781b      	ldrb	r3, [r3, #0]
 800466c:	4618      	mov	r0, r3
 800466e:	f000 fa9d 	bl	8004bac <_ZN11flatbuffers12EndianScalarIhEET_S1_>
 8004672:	4603      	mov	r3, r0
}
 8004674:	4618      	mov	r0, r3
 8004676:	3708      	adds	r7, #8
 8004678:	46bd      	mov	sp, r7
 800467a:	bd80      	pop	{r7, pc}

0800467c <_ZNK11flatbuffers5Table8GetFieldIhEET_tS2_>:
  template<typename T> T GetField(voffset_t field, T defaultval) const {
 800467c:	b580      	push	{r7, lr}
 800467e:	b084      	sub	sp, #16
 8004680:	af00      	add	r7, sp, #0
 8004682:	6078      	str	r0, [r7, #4]
 8004684:	460b      	mov	r3, r1
 8004686:	807b      	strh	r3, [r7, #2]
 8004688:	4613      	mov	r3, r2
 800468a:	707b      	strb	r3, [r7, #1]
    auto field_offset = GetOptionalFieldOffset(field);
 800468c:	887b      	ldrh	r3, [r7, #2]
 800468e:	4619      	mov	r1, r3
 8004690:	6878      	ldr	r0, [r7, #4]
 8004692:	f7fc fd29 	bl	80010e8 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
 8004696:	4603      	mov	r3, r0
 8004698:	81fb      	strh	r3, [r7, #14]
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
 800469a:	89fb      	ldrh	r3, [r7, #14]
 800469c:	2b00      	cmp	r3, #0
 800469e:	d007      	beq.n	80046b0 <_ZNK11flatbuffers5Table8GetFieldIhEET_tS2_+0x34>
 80046a0:	687a      	ldr	r2, [r7, #4]
 80046a2:	89fb      	ldrh	r3, [r7, #14]
 80046a4:	4413      	add	r3, r2
 80046a6:	4618      	mov	r0, r3
 80046a8:	f7ff ffda 	bl	8004660 <_ZN11flatbuffers10ReadScalarIhEET_PKv>
 80046ac:	4603      	mov	r3, r0
 80046ae:	e000      	b.n	80046b2 <_ZNK11flatbuffers5Table8GetFieldIhEET_tS2_+0x36>
 80046b0:	787b      	ldrb	r3, [r7, #1]
  }
 80046b2:	4618      	mov	r0, r3
 80046b4:	3710      	adds	r7, #16
 80046b6:	46bd      	mov	sp, r7
 80046b8:	bd80      	pop	{r7, pc}

080046ba <_ZNK11flatbuffers5Table10GetPointerIPKvEET_t>:
    auto field_offset = GetOptionalFieldOffset(field);
    auto p = data_ + field_offset;
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
                        : nullptr;
  }
  template<typename P> P GetPointer(voffset_t field) const {
 80046ba:	b580      	push	{r7, lr}
 80046bc:	b082      	sub	sp, #8
 80046be:	af00      	add	r7, sp, #0
 80046c0:	6078      	str	r0, [r7, #4]
 80046c2:	460b      	mov	r3, r1
 80046c4:	807b      	strh	r3, [r7, #2]
    return const_cast<Table *>(this)->GetPointer<P>(field);
 80046c6:	887b      	ldrh	r3, [r7, #2]
 80046c8:	4619      	mov	r1, r3
 80046ca:	6878      	ldr	r0, [r7, #4]
 80046cc:	f000 fa7a 	bl	8004bc4 <_ZN11flatbuffers5Table10GetPointerIPKvEET_t>
 80046d0:	4603      	mov	r3, r0
  }
 80046d2:	4618      	mov	r0, r3
 80046d4:	3708      	adds	r7, #8
 80046d6:	46bd      	mov	sp, r7
 80046d8:	bd80      	pop	{r7, pc}

080046da <_ZNK11flatbuffers5Table8GetFieldIlEET_tS2_>:
  template<typename T> T GetField(voffset_t field, T defaultval) const {
 80046da:	b580      	push	{r7, lr}
 80046dc:	b086      	sub	sp, #24
 80046de:	af00      	add	r7, sp, #0
 80046e0:	60f8      	str	r0, [r7, #12]
 80046e2:	460b      	mov	r3, r1
 80046e4:	607a      	str	r2, [r7, #4]
 80046e6:	817b      	strh	r3, [r7, #10]
    auto field_offset = GetOptionalFieldOffset(field);
 80046e8:	897b      	ldrh	r3, [r7, #10]
 80046ea:	4619      	mov	r1, r3
 80046ec:	68f8      	ldr	r0, [r7, #12]
 80046ee:	f7fc fcfb 	bl	80010e8 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
 80046f2:	4603      	mov	r3, r0
 80046f4:	82fb      	strh	r3, [r7, #22]
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
 80046f6:	8afb      	ldrh	r3, [r7, #22]
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d007      	beq.n	800470c <_ZNK11flatbuffers5Table8GetFieldIlEET_tS2_+0x32>
 80046fc:	68fa      	ldr	r2, [r7, #12]
 80046fe:	8afb      	ldrh	r3, [r7, #22]
 8004700:	4413      	add	r3, r2
 8004702:	4618      	mov	r0, r3
 8004704:	f7fd f9ba 	bl	8001a7c <_ZN11flatbuffers10ReadScalarIlEET_PKv>
 8004708:	4603      	mov	r3, r0
 800470a:	e000      	b.n	800470e <_ZNK11flatbuffers5Table8GetFieldIlEET_tS2_+0x34>
 800470c:	687b      	ldr	r3, [r7, #4]
  }
 800470e:	4618      	mov	r0, r3
 8004710:	3718      	adds	r7, #24
 8004712:	46bd      	mov	sp, r7
 8004714:	bd80      	pop	{r7, pc}

08004716 <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorIlEEEET_t>:
  template<typename P> P GetPointer(voffset_t field) const {
 8004716:	b580      	push	{r7, lr}
 8004718:	b082      	sub	sp, #8
 800471a:	af00      	add	r7, sp, #0
 800471c:	6078      	str	r0, [r7, #4]
 800471e:	460b      	mov	r3, r1
 8004720:	807b      	strh	r3, [r7, #2]
    return const_cast<Table *>(this)->GetPointer<P>(field);
 8004722:	887b      	ldrh	r3, [r7, #2]
 8004724:	4619      	mov	r1, r3
 8004726:	6878      	ldr	r0, [r7, #4]
 8004728:	f000 fa6c 	bl	8004c04 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIlEEEET_t>
 800472c:	4603      	mov	r3, r0
  }
 800472e:	4618      	mov	r0, r3
 8004730:	3708      	adds	r7, #8
 8004732:	46bd      	mov	sp, r7
 8004734:	bd80      	pop	{r7, pc}

08004736 <_ZNK11flatbuffers5Table8GetFieldIaEET_tS2_>:
  template<typename T> T GetField(voffset_t field, T defaultval) const {
 8004736:	b580      	push	{r7, lr}
 8004738:	b084      	sub	sp, #16
 800473a:	af00      	add	r7, sp, #0
 800473c:	6078      	str	r0, [r7, #4]
 800473e:	460b      	mov	r3, r1
 8004740:	807b      	strh	r3, [r7, #2]
 8004742:	4613      	mov	r3, r2
 8004744:	707b      	strb	r3, [r7, #1]
    auto field_offset = GetOptionalFieldOffset(field);
 8004746:	887b      	ldrh	r3, [r7, #2]
 8004748:	4619      	mov	r1, r3
 800474a:	6878      	ldr	r0, [r7, #4]
 800474c:	f7fc fccc 	bl	80010e8 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
 8004750:	4603      	mov	r3, r0
 8004752:	81fb      	strh	r3, [r7, #14]
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
 8004754:	89fb      	ldrh	r3, [r7, #14]
 8004756:	2b00      	cmp	r3, #0
 8004758:	d007      	beq.n	800476a <_ZNK11flatbuffers5Table8GetFieldIaEET_tS2_+0x34>
 800475a:	687a      	ldr	r2, [r7, #4]
 800475c:	89fb      	ldrh	r3, [r7, #14]
 800475e:	4413      	add	r3, r2
 8004760:	4618      	mov	r0, r3
 8004762:	f000 fa6f 	bl	8004c44 <_ZN11flatbuffers10ReadScalarIaEET_PKv>
 8004766:	4603      	mov	r3, r0
 8004768:	e001      	b.n	800476e <_ZNK11flatbuffers5Table8GetFieldIaEET_tS2_+0x38>
 800476a:	f997 3001 	ldrsb.w	r3, [r7, #1]
  }
 800476e:	4618      	mov	r0, r3
 8004770:	3710      	adds	r7, #16
 8004772:	46bd      	mov	sp, r7
 8004774:	bd80      	pop	{r7, pc}

08004776 <_ZNK11flatbuffers5Table10GetPointerIPKNS_6StringEEET_t>:
  template<typename P> P GetPointer(voffset_t field) const {
 8004776:	b580      	push	{r7, lr}
 8004778:	b082      	sub	sp, #8
 800477a:	af00      	add	r7, sp, #0
 800477c:	6078      	str	r0, [r7, #4]
 800477e:	460b      	mov	r3, r1
 8004780:	807b      	strh	r3, [r7, #2]
    return const_cast<Table *>(this)->GetPointer<P>(field);
 8004782:	887b      	ldrh	r3, [r7, #2]
 8004784:	4619      	mov	r1, r3
 8004786:	6878      	ldr	r0, [r7, #4]
 8004788:	f000 fa6b 	bl	8004c62 <_ZN11flatbuffers5Table10GetPointerIPKNS_6StringEEET_t>
 800478c:	4603      	mov	r3, r0
  }
 800478e:	4618      	mov	r0, r3
 8004790:	3708      	adds	r7, #8
 8004792:	46bd      	mov	sp, r7
 8004794:	bd80      	pop	{r7, pc}

08004796 <_ZNK11flatbuffers5Table8GetFieldIfEET_tS2_>:
  template<typename T> T GetField(voffset_t field, T defaultval) const {
 8004796:	b580      	push	{r7, lr}
 8004798:	b086      	sub	sp, #24
 800479a:	af00      	add	r7, sp, #0
 800479c:	60f8      	str	r0, [r7, #12]
 800479e:	460b      	mov	r3, r1
 80047a0:	ed87 0a01 	vstr	s0, [r7, #4]
 80047a4:	817b      	strh	r3, [r7, #10]
    auto field_offset = GetOptionalFieldOffset(field);
 80047a6:	897b      	ldrh	r3, [r7, #10]
 80047a8:	4619      	mov	r1, r3
 80047aa:	68f8      	ldr	r0, [r7, #12]
 80047ac:	f7fc fc9c 	bl	80010e8 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
 80047b0:	4603      	mov	r3, r0
 80047b2:	82fb      	strh	r3, [r7, #22]
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
 80047b4:	8afb      	ldrh	r3, [r7, #22]
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d008      	beq.n	80047cc <_ZNK11flatbuffers5Table8GetFieldIfEET_tS2_+0x36>
 80047ba:	68fa      	ldr	r2, [r7, #12]
 80047bc:	8afb      	ldrh	r3, [r7, #22]
 80047be:	4413      	add	r3, r2
 80047c0:	4618      	mov	r0, r3
 80047c2:	f000 fa6e 	bl	8004ca2 <_ZN11flatbuffers10ReadScalarIfEET_PKv>
 80047c6:	eef0 7a40 	vmov.f32	s15, s0
 80047ca:	e001      	b.n	80047d0 <_ZNK11flatbuffers5Table8GetFieldIfEET_tS2_+0x3a>
 80047cc:	edd7 7a01 	vldr	s15, [r7, #4]
  }
 80047d0:	eeb0 0a67 	vmov.f32	s0, s15
 80047d4:	3718      	adds	r7, #24
 80047d6:	46bd      	mov	sp, r7
 80047d8:	bd80      	pop	{r7, pc}

080047da <_ZNK11flatbuffers6VectorIlE4sizeEv>:
  uoffset_t size() const { return EndianScalar(length_); }
 80047da:	b580      	push	{r7, lr}
 80047dc:	b082      	sub	sp, #8
 80047de:	af00      	add	r7, sp, #0
 80047e0:	6078      	str	r0, [r7, #4]
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	4618      	mov	r0, r3
 80047e8:	f7fd f921 	bl	8001a2e <_ZN11flatbuffers12EndianScalarImEET_S1_>
 80047ec:	4603      	mov	r3, r0
 80047ee:	4618      	mov	r0, r3
 80047f0:	3708      	adds	r7, #8
 80047f2:	46bd      	mov	sp, r7
 80047f4:	bd80      	pop	{r7, pc}
	...

080047f8 <_ZNK11flatbuffers6VectorIlE3GetEm>:
  return_type Get(uoffset_t i) const {
 80047f8:	b580      	push	{r7, lr}
 80047fa:	b082      	sub	sp, #8
 80047fc:	af00      	add	r7, sp, #0
 80047fe:	6078      	str	r0, [r7, #4]
 8004800:	6039      	str	r1, [r7, #0]
    FLATBUFFERS_ASSERT(i < size());
 8004802:	6878      	ldr	r0, [r7, #4]
 8004804:	f7ff ffe9 	bl	80047da <_ZNK11flatbuffers6VectorIlE4sizeEv>
 8004808:	4602      	mov	r2, r0
 800480a:	683b      	ldr	r3, [r7, #0]
 800480c:	4293      	cmp	r3, r2
 800480e:	d306      	bcc.n	800481e <_ZNK11flatbuffers6VectorIlE3GetEm+0x26>
 8004810:	4b09      	ldr	r3, [pc, #36]	; (8004838 <_ZNK11flatbuffers6VectorIlE3GetEm+0x40>)
 8004812:	4a0a      	ldr	r2, [pc, #40]	; (800483c <_ZNK11flatbuffers6VectorIlE3GetEm+0x44>)
 8004814:	f44f 7183 	mov.w	r1, #262	; 0x106
 8004818:	4809      	ldr	r0, [pc, #36]	; (8004840 <_ZNK11flatbuffers6VectorIlE3GetEm+0x48>)
 800481a:	f00b ffc7 	bl	80107ac <__assert_func>
    return IndirectHelper<T>::Read(Data(), i);
 800481e:	6878      	ldr	r0, [r7, #4]
 8004820:	f000 fa63 	bl	8004cea <_ZNK11flatbuffers6VectorIlE4DataEv>
 8004824:	4603      	mov	r3, r0
 8004826:	6839      	ldr	r1, [r7, #0]
 8004828:	4618      	mov	r0, r3
 800482a:	f000 fa4c 	bl	8004cc6 <_ZN11flatbuffers14IndirectHelperIlE4ReadEPKhm>
 800482e:	4603      	mov	r3, r0
  }
 8004830:	4618      	mov	r0, r3
 8004832:	3708      	adds	r7, #8
 8004834:	46bd      	mov	sp, r7
 8004836:	bd80      	pop	{r7, pc}
 8004838:	08013d6c 	.word	0x08013d6c
 800483c:	08013d78 	.word	0x08013d78
 8004840:	08013e48 	.word	0x08013e48

08004844 <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator8AllocateI25TfLiteDepthwiseConvParamsEESt10unique_ptrIT_NS1_18BuiltinDataDeleterEEv>:
  BuiltinDataPtr<T> Allocate() {
 8004844:	b590      	push	{r4, r7, lr}
 8004846:	b085      	sub	sp, #20
 8004848:	af00      	add	r7, sp, #0
 800484a:	6078      	str	r0, [r7, #4]
 800484c:	6039      	str	r1, [r7, #0]
    return BuiltinDataPtr<T>(allocator_->AllocatePOD<T>(),
 800484e:	683b      	ldr	r3, [r7, #0]
 8004850:	681b      	ldr	r3, [r3, #0]
                             BuiltinDataDeleter(allocator_));
 8004852:	4618      	mov	r0, r3
 8004854:	f000 fa60 	bl	8004d18 <_ZN6tflite20BuiltinDataAllocator11AllocatePODI25TfLiteDepthwiseConvParamsEEPT_v>
 8004858:	4604      	mov	r4, r0
 800485a:	683b      	ldr	r3, [r7, #0]
 800485c:	681a      	ldr	r2, [r3, #0]
 800485e:	f107 030c 	add.w	r3, r7, #12
 8004862:	4611      	mov	r1, r2
 8004864:	4618      	mov	r0, r3
 8004866:	f7ff fb66 	bl	8003f36 <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterC1EPNS_20BuiltinDataAllocatorE>
 800486a:	f107 030c 	add.w	r3, r7, #12
 800486e:	461a      	mov	r2, r3
 8004870:	4621      	mov	r1, r4
 8004872:	6878      	ldr	r0, [r7, #4]
 8004874:	f000 fa70 	bl	8004d58 <_ZNSt10unique_ptrI25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC1IS4_vEEPS0_NSt9enable_ifIXntsrSt19is_lvalue_referenceIT_E5valueEOSA_E4typeE>
  }
 8004878:	6878      	ldr	r0, [r7, #4]
 800487a:	3714      	adds	r7, #20
 800487c:	46bd      	mov	sp, r7
 800487e:	bd90      	pop	{r4, r7, pc}

08004880 <_ZNSt10unique_ptrI25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEED1Ev>:
	unique_ptr(auto_ptr<_Up>&& __u) noexcept;
#pragma GCC diagnostic pop
#endif

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
 8004880:	b590      	push	{r4, r7, lr}
 8004882:	b085      	sub	sp, #20
 8004884:	af00      	add	r7, sp, #0
 8004886:	6078      	str	r0, [r7, #4]
      {
	static_assert(__is_invocable<deleter_type&, pointer>::value,
		      "unique_ptr's deleter must be invocable with a pointer");
	auto& __ptr = _M_t._M_ptr();
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	4618      	mov	r0, r3
 800488c:	f000 fa79 	bl	8004d82 <_ZNSt15__uniq_ptr_implI25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>
 8004890:	60f8      	str	r0, [r7, #12]
	if (__ptr != nullptr)
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	2b00      	cmp	r3, #0
 8004898:	d00c      	beq.n	80048b4 <_ZNSt10unique_ptrI25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEED1Ev+0x34>
	  get_deleter()(std::move(__ptr));
 800489a:	6878      	ldr	r0, [r7, #4]
 800489c:	f000 fa7e 	bl	8004d9c <_ZNSt10unique_ptrI25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE11get_deleterEv>
 80048a0:	4604      	mov	r4, r0
 80048a2:	68f8      	ldr	r0, [r7, #12]
 80048a4:	f000 fa87 	bl	8004db6 <_ZSt4moveIRP25TfLiteDepthwiseConvParamsEONSt16remove_referenceIT_E4typeEOS4_>
 80048a8:	4603      	mov	r3, r0
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	4619      	mov	r1, r3
 80048ae:	4620      	mov	r0, r4
 80048b0:	f7ff fb50 	bl	8003f54 <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterclEPv>
	__ptr = pointer();
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	2200      	movs	r2, #0
 80048b8:	601a      	str	r2, [r3, #0]
      }
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	4618      	mov	r0, r3
 80048be:	3714      	adds	r7, #20
 80048c0:	46bd      	mov	sp, r7
 80048c2:	bd90      	pop	{r4, r7, pc}

080048c4 <_ZStneI25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEbRKSt10unique_ptrIT_T0_EDn>:
	       const unique_ptr<_Up, _Ep>& __y)
    { return __x.get() != __y.get(); }

  template<typename _Tp, typename _Dp>
    _GLIBCXX_NODISCARD inline bool
    operator!=(const unique_ptr<_Tp, _Dp>& __x, nullptr_t) noexcept
 80048c4:	b580      	push	{r7, lr}
 80048c6:	b082      	sub	sp, #8
 80048c8:	af00      	add	r7, sp, #0
 80048ca:	6078      	str	r0, [r7, #4]
 80048cc:	6039      	str	r1, [r7, #0]
    { return (bool)__x; }
 80048ce:	6878      	ldr	r0, [r7, #4]
 80048d0:	f000 fa92 	bl	8004df8 <_ZNKSt10unique_ptrI25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEcvbEv>
 80048d4:	4603      	mov	r3, r0
 80048d6:	4618      	mov	r0, r3
 80048d8:	3708      	adds	r7, #8
 80048da:	46bd      	mov	sp, r7
 80048dc:	bd80      	pop	{r7, pc}

080048de <_ZNKSt10unique_ptrI25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>:
      operator->() const noexcept
 80048de:	b580      	push	{r7, lr}
 80048e0:	b082      	sub	sp, #8
 80048e2:	af00      	add	r7, sp, #0
 80048e4:	6078      	str	r0, [r7, #4]
	return get();
 80048e6:	6878      	ldr	r0, [r7, #4]
 80048e8:	f000 fa97 	bl	8004e1a <_ZNKSt10unique_ptrI25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE3getEv>
 80048ec:	4603      	mov	r3, r0
      }
 80048ee:	4618      	mov	r0, r3
 80048f0:	3708      	adds	r7, #8
 80048f2:	46bd      	mov	sp, r7
 80048f4:	bd80      	pop	{r7, pc}

080048f6 <_ZNSt10unique_ptrI25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE7releaseEv>:
      release() noexcept
 80048f6:	b580      	push	{r7, lr}
 80048f8:	b084      	sub	sp, #16
 80048fa:	af00      	add	r7, sp, #0
 80048fc:	6078      	str	r0, [r7, #4]
	pointer __p = get();
 80048fe:	6878      	ldr	r0, [r7, #4]
 8004900:	f000 fa8b 	bl	8004e1a <_ZNKSt10unique_ptrI25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE3getEv>
 8004904:	60f8      	str	r0, [r7, #12]
	_M_t._M_ptr() = pointer();
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	4618      	mov	r0, r3
 800490a:	f000 fa3a 	bl	8004d82 <_ZNSt15__uniq_ptr_implI25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>
 800490e:	4603      	mov	r3, r0
 8004910:	2200      	movs	r2, #0
 8004912:	601a      	str	r2, [r3, #0]
	return __p;
 8004914:	68fb      	ldr	r3, [r7, #12]
      }
 8004916:	4618      	mov	r0, r3
 8004918:	3710      	adds	r7, #16
 800491a:	46bd      	mov	sp, r7
 800491c:	bd80      	pop	{r7, pc}

0800491e <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator8AllocateI26TfLiteFullyConnectedParamsEESt10unique_ptrIT_NS1_18BuiltinDataDeleterEEv>:
  BuiltinDataPtr<T> Allocate() {
 800491e:	b590      	push	{r4, r7, lr}
 8004920:	b085      	sub	sp, #20
 8004922:	af00      	add	r7, sp, #0
 8004924:	6078      	str	r0, [r7, #4]
 8004926:	6039      	str	r1, [r7, #0]
    return BuiltinDataPtr<T>(allocator_->AllocatePOD<T>(),
 8004928:	683b      	ldr	r3, [r7, #0]
 800492a:	681b      	ldr	r3, [r3, #0]
                             BuiltinDataDeleter(allocator_));
 800492c:	4618      	mov	r0, r3
 800492e:	f000 fa81 	bl	8004e34 <_ZN6tflite20BuiltinDataAllocator11AllocatePODI26TfLiteFullyConnectedParamsEEPT_v>
 8004932:	4604      	mov	r4, r0
 8004934:	683b      	ldr	r3, [r7, #0]
 8004936:	681a      	ldr	r2, [r3, #0]
 8004938:	f107 030c 	add.w	r3, r7, #12
 800493c:	4611      	mov	r1, r2
 800493e:	4618      	mov	r0, r3
 8004940:	f7ff faf9 	bl	8003f36 <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterC1EPNS_20BuiltinDataAllocatorE>
 8004944:	f107 030c 	add.w	r3, r7, #12
 8004948:	461a      	mov	r2, r3
 800494a:	4621      	mov	r1, r4
 800494c:	6878      	ldr	r0, [r7, #4]
 800494e:	f000 fa8b 	bl	8004e68 <_ZNSt10unique_ptrI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC1IS4_vEEPS0_NSt9enable_ifIXntsrSt19is_lvalue_referenceIT_E5valueEOSA_E4typeE>
  }
 8004952:	6878      	ldr	r0, [r7, #4]
 8004954:	3714      	adds	r7, #20
 8004956:	46bd      	mov	sp, r7
 8004958:	bd90      	pop	{r4, r7, pc}

0800495a <_ZNSt10unique_ptrI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEED1Ev>:
      ~unique_ptr() noexcept
 800495a:	b590      	push	{r4, r7, lr}
 800495c:	b085      	sub	sp, #20
 800495e:	af00      	add	r7, sp, #0
 8004960:	6078      	str	r0, [r7, #4]
	auto& __ptr = _M_t._M_ptr();
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	4618      	mov	r0, r3
 8004966:	f000 fa94 	bl	8004e92 <_ZNSt15__uniq_ptr_implI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>
 800496a:	60f8      	str	r0, [r7, #12]
	if (__ptr != nullptr)
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	2b00      	cmp	r3, #0
 8004972:	d00c      	beq.n	800498e <_ZNSt10unique_ptrI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEED1Ev+0x34>
	  get_deleter()(std::move(__ptr));
 8004974:	6878      	ldr	r0, [r7, #4]
 8004976:	f000 fa99 	bl	8004eac <_ZNSt10unique_ptrI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE11get_deleterEv>
 800497a:	4604      	mov	r4, r0
 800497c:	68f8      	ldr	r0, [r7, #12]
 800497e:	f000 faa2 	bl	8004ec6 <_ZSt4moveIRP26TfLiteFullyConnectedParamsEONSt16remove_referenceIT_E4typeEOS4_>
 8004982:	4603      	mov	r3, r0
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	4619      	mov	r1, r3
 8004988:	4620      	mov	r0, r4
 800498a:	f7ff fae3 	bl	8003f54 <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterclEPv>
	__ptr = pointer();
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	2200      	movs	r2, #0
 8004992:	601a      	str	r2, [r3, #0]
      }
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	4618      	mov	r0, r3
 8004998:	3714      	adds	r7, #20
 800499a:	46bd      	mov	sp, r7
 800499c:	bd90      	pop	{r4, r7, pc}

0800499e <_ZStneI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEbRKSt10unique_ptrIT_T0_EDn>:
    operator!=(const unique_ptr<_Tp, _Dp>& __x, nullptr_t) noexcept
 800499e:	b580      	push	{r7, lr}
 80049a0:	b082      	sub	sp, #8
 80049a2:	af00      	add	r7, sp, #0
 80049a4:	6078      	str	r0, [r7, #4]
 80049a6:	6039      	str	r1, [r7, #0]
    { return (bool)__x; }
 80049a8:	6878      	ldr	r0, [r7, #4]
 80049aa:	f000 faad 	bl	8004f08 <_ZNKSt10unique_ptrI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEcvbEv>
 80049ae:	4603      	mov	r3, r0
 80049b0:	4618      	mov	r0, r3
 80049b2:	3708      	adds	r7, #8
 80049b4:	46bd      	mov	sp, r7
 80049b6:	bd80      	pop	{r7, pc}

080049b8 <_ZNKSt10unique_ptrI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>:
      operator->() const noexcept
 80049b8:	b580      	push	{r7, lr}
 80049ba:	b082      	sub	sp, #8
 80049bc:	af00      	add	r7, sp, #0
 80049be:	6078      	str	r0, [r7, #4]
	return get();
 80049c0:	6878      	ldr	r0, [r7, #4]
 80049c2:	f000 fab2 	bl	8004f2a <_ZNKSt10unique_ptrI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE3getEv>
 80049c6:	4603      	mov	r3, r0
      }
 80049c8:	4618      	mov	r0, r3
 80049ca:	3708      	adds	r7, #8
 80049cc:	46bd      	mov	sp, r7
 80049ce:	bd80      	pop	{r7, pc}

080049d0 <_ZNSt10unique_ptrI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE7releaseEv>:
      release() noexcept
 80049d0:	b580      	push	{r7, lr}
 80049d2:	b084      	sub	sp, #16
 80049d4:	af00      	add	r7, sp, #0
 80049d6:	6078      	str	r0, [r7, #4]
	pointer __p = get();
 80049d8:	6878      	ldr	r0, [r7, #4]
 80049da:	f000 faa6 	bl	8004f2a <_ZNKSt10unique_ptrI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE3getEv>
 80049de:	60f8      	str	r0, [r7, #12]
	_M_t._M_ptr() = pointer();
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	4618      	mov	r0, r3
 80049e4:	f000 fa55 	bl	8004e92 <_ZNSt15__uniq_ptr_implI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>
 80049e8:	4603      	mov	r3, r0
 80049ea:	2200      	movs	r2, #0
 80049ec:	601a      	str	r2, [r3, #0]
	return __p;
 80049ee:	68fb      	ldr	r3, [r7, #12]
      }
 80049f0:	4618      	mov	r0, r3
 80049f2:	3710      	adds	r7, #16
 80049f4:	46bd      	mov	sp, r7
 80049f6:	bd80      	pop	{r7, pc}

080049f8 <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator8AllocateI19TfLiteReshapeParamsEESt10unique_ptrIT_NS1_18BuiltinDataDeleterEEv>:
  BuiltinDataPtr<T> Allocate() {
 80049f8:	b590      	push	{r4, r7, lr}
 80049fa:	b085      	sub	sp, #20
 80049fc:	af00      	add	r7, sp, #0
 80049fe:	6078      	str	r0, [r7, #4]
 8004a00:	6039      	str	r1, [r7, #0]
    return BuiltinDataPtr<T>(allocator_->AllocatePOD<T>(),
 8004a02:	683b      	ldr	r3, [r7, #0]
 8004a04:	681b      	ldr	r3, [r3, #0]
                             BuiltinDataDeleter(allocator_));
 8004a06:	4618      	mov	r0, r3
 8004a08:	f000 fa9c 	bl	8004f44 <_ZN6tflite20BuiltinDataAllocator11AllocatePODI19TfLiteReshapeParamsEEPT_v>
 8004a0c:	4604      	mov	r4, r0
 8004a0e:	683b      	ldr	r3, [r7, #0]
 8004a10:	681a      	ldr	r2, [r3, #0]
 8004a12:	f107 030c 	add.w	r3, r7, #12
 8004a16:	4611      	mov	r1, r2
 8004a18:	4618      	mov	r0, r3
 8004a1a:	f7ff fa8c 	bl	8003f36 <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterC1EPNS_20BuiltinDataAllocatorE>
 8004a1e:	f107 030c 	add.w	r3, r7, #12
 8004a22:	461a      	mov	r2, r3
 8004a24:	4621      	mov	r1, r4
 8004a26:	6878      	ldr	r0, [r7, #4]
 8004a28:	f000 faa9 	bl	8004f7e <_ZNSt10unique_ptrI19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC1IS4_vEEPS0_NSt9enable_ifIXntsrSt19is_lvalue_referenceIT_E5valueEOSA_E4typeE>
  }
 8004a2c:	6878      	ldr	r0, [r7, #4]
 8004a2e:	3714      	adds	r7, #20
 8004a30:	46bd      	mov	sp, r7
 8004a32:	bd90      	pop	{r4, r7, pc}

08004a34 <_ZNSt10unique_ptrI19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEED1Ev>:
      ~unique_ptr() noexcept
 8004a34:	b590      	push	{r4, r7, lr}
 8004a36:	b085      	sub	sp, #20
 8004a38:	af00      	add	r7, sp, #0
 8004a3a:	6078      	str	r0, [r7, #4]
	auto& __ptr = _M_t._M_ptr();
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	4618      	mov	r0, r3
 8004a40:	f000 fab2 	bl	8004fa8 <_ZNSt15__uniq_ptr_implI19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>
 8004a44:	60f8      	str	r0, [r7, #12]
	if (__ptr != nullptr)
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d00c      	beq.n	8004a68 <_ZNSt10unique_ptrI19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEED1Ev+0x34>
	  get_deleter()(std::move(__ptr));
 8004a4e:	6878      	ldr	r0, [r7, #4]
 8004a50:	f000 fab7 	bl	8004fc2 <_ZNSt10unique_ptrI19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE11get_deleterEv>
 8004a54:	4604      	mov	r4, r0
 8004a56:	68f8      	ldr	r0, [r7, #12]
 8004a58:	f000 fac0 	bl	8004fdc <_ZSt4moveIRP19TfLiteReshapeParamsEONSt16remove_referenceIT_E4typeEOS4_>
 8004a5c:	4603      	mov	r3, r0
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	4619      	mov	r1, r3
 8004a62:	4620      	mov	r0, r4
 8004a64:	f7ff fa76 	bl	8003f54 <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterclEPv>
	__ptr = pointer();
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	2200      	movs	r2, #0
 8004a6c:	601a      	str	r2, [r3, #0]
      }
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	4618      	mov	r0, r3
 8004a72:	3714      	adds	r7, #20
 8004a74:	46bd      	mov	sp, r7
 8004a76:	bd90      	pop	{r4, r7, pc}

08004a78 <_ZStneI19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEbRKSt10unique_ptrIT_T0_EDn>:
    operator!=(const unique_ptr<_Tp, _Dp>& __x, nullptr_t) noexcept
 8004a78:	b580      	push	{r7, lr}
 8004a7a:	b082      	sub	sp, #8
 8004a7c:	af00      	add	r7, sp, #0
 8004a7e:	6078      	str	r0, [r7, #4]
 8004a80:	6039      	str	r1, [r7, #0]
    { return (bool)__x; }
 8004a82:	6878      	ldr	r0, [r7, #4]
 8004a84:	f000 facb 	bl	800501e <_ZNKSt10unique_ptrI19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEcvbEv>
 8004a88:	4603      	mov	r3, r0
 8004a8a:	4618      	mov	r0, r3
 8004a8c:	3708      	adds	r7, #8
 8004a8e:	46bd      	mov	sp, r7
 8004a90:	bd80      	pop	{r7, pc}

08004a92 <_ZNKSt10unique_ptrI19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>:
      operator->() const noexcept
 8004a92:	b580      	push	{r7, lr}
 8004a94:	b082      	sub	sp, #8
 8004a96:	af00      	add	r7, sp, #0
 8004a98:	6078      	str	r0, [r7, #4]
	return get();
 8004a9a:	6878      	ldr	r0, [r7, #4]
 8004a9c:	f000 fad0 	bl	8005040 <_ZNKSt10unique_ptrI19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE3getEv>
 8004aa0:	4603      	mov	r3, r0
      }
 8004aa2:	4618      	mov	r0, r3
 8004aa4:	3708      	adds	r7, #8
 8004aa6:	46bd      	mov	sp, r7
 8004aa8:	bd80      	pop	{r7, pc}

08004aaa <_ZNSt10unique_ptrI19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE7releaseEv>:
      release() noexcept
 8004aaa:	b580      	push	{r7, lr}
 8004aac:	b084      	sub	sp, #16
 8004aae:	af00      	add	r7, sp, #0
 8004ab0:	6078      	str	r0, [r7, #4]
	pointer __p = get();
 8004ab2:	6878      	ldr	r0, [r7, #4]
 8004ab4:	f000 fac4 	bl	8005040 <_ZNKSt10unique_ptrI19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE3getEv>
 8004ab8:	60f8      	str	r0, [r7, #12]
	_M_t._M_ptr() = pointer();
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	4618      	mov	r0, r3
 8004abe:	f000 fa73 	bl	8004fa8 <_ZNSt15__uniq_ptr_implI19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>
 8004ac2:	4603      	mov	r3, r0
 8004ac4:	2200      	movs	r2, #0
 8004ac6:	601a      	str	r2, [r3, #0]
	return __p;
 8004ac8:	68fb      	ldr	r3, [r7, #12]
      }
 8004aca:	4618      	mov	r0, r3
 8004acc:	3710      	adds	r7, #16
 8004ace:	46bd      	mov	sp, r7
 8004ad0:	bd80      	pop	{r7, pc}

08004ad2 <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator8AllocateI19TfLiteSoftmaxParamsEESt10unique_ptrIT_NS1_18BuiltinDataDeleterEEv>:
  BuiltinDataPtr<T> Allocate() {
 8004ad2:	b590      	push	{r4, r7, lr}
 8004ad4:	b085      	sub	sp, #20
 8004ad6:	af00      	add	r7, sp, #0
 8004ad8:	6078      	str	r0, [r7, #4]
 8004ada:	6039      	str	r1, [r7, #0]
    return BuiltinDataPtr<T>(allocator_->AllocatePOD<T>(),
 8004adc:	683b      	ldr	r3, [r7, #0]
 8004ade:	681b      	ldr	r3, [r3, #0]
                             BuiltinDataDeleter(allocator_));
 8004ae0:	4618      	mov	r0, r3
 8004ae2:	f000 faba 	bl	800505a <_ZN6tflite20BuiltinDataAllocator11AllocatePODI19TfLiteSoftmaxParamsEEPT_v>
 8004ae6:	4604      	mov	r4, r0
 8004ae8:	683b      	ldr	r3, [r7, #0]
 8004aea:	681a      	ldr	r2, [r3, #0]
 8004aec:	f107 030c 	add.w	r3, r7, #12
 8004af0:	4611      	mov	r1, r2
 8004af2:	4618      	mov	r0, r3
 8004af4:	f7ff fa1f 	bl	8003f36 <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterC1EPNS_20BuiltinDataAllocatorE>
 8004af8:	f107 030c 	add.w	r3, r7, #12
 8004afc:	461a      	mov	r2, r3
 8004afe:	4621      	mov	r1, r4
 8004b00:	6878      	ldr	r0, [r7, #4]
 8004b02:	f000 fac3 	bl	800508c <_ZNSt10unique_ptrI19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC1IS4_vEEPS0_NSt9enable_ifIXntsrSt19is_lvalue_referenceIT_E5valueEOSA_E4typeE>
  }
 8004b06:	6878      	ldr	r0, [r7, #4]
 8004b08:	3714      	adds	r7, #20
 8004b0a:	46bd      	mov	sp, r7
 8004b0c:	bd90      	pop	{r4, r7, pc}

08004b0e <_ZNSt10unique_ptrI19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEED1Ev>:
      ~unique_ptr() noexcept
 8004b0e:	b590      	push	{r4, r7, lr}
 8004b10:	b085      	sub	sp, #20
 8004b12:	af00      	add	r7, sp, #0
 8004b14:	6078      	str	r0, [r7, #4]
	auto& __ptr = _M_t._M_ptr();
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	4618      	mov	r0, r3
 8004b1a:	f000 facc 	bl	80050b6 <_ZNSt15__uniq_ptr_implI19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>
 8004b1e:	60f8      	str	r0, [r7, #12]
	if (__ptr != nullptr)
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d00c      	beq.n	8004b42 <_ZNSt10unique_ptrI19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEED1Ev+0x34>
	  get_deleter()(std::move(__ptr));
 8004b28:	6878      	ldr	r0, [r7, #4]
 8004b2a:	f000 fad1 	bl	80050d0 <_ZNSt10unique_ptrI19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE11get_deleterEv>
 8004b2e:	4604      	mov	r4, r0
 8004b30:	68f8      	ldr	r0, [r7, #12]
 8004b32:	f000 fada 	bl	80050ea <_ZSt4moveIRP19TfLiteSoftmaxParamsEONSt16remove_referenceIT_E4typeEOS4_>
 8004b36:	4603      	mov	r3, r0
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	4619      	mov	r1, r3
 8004b3c:	4620      	mov	r0, r4
 8004b3e:	f7ff fa09 	bl	8003f54 <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterclEPv>
	__ptr = pointer();
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	2200      	movs	r2, #0
 8004b46:	601a      	str	r2, [r3, #0]
      }
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	4618      	mov	r0, r3
 8004b4c:	3714      	adds	r7, #20
 8004b4e:	46bd      	mov	sp, r7
 8004b50:	bd90      	pop	{r4, r7, pc}

08004b52 <_ZStneI19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEbRKSt10unique_ptrIT_T0_EDn>:
    operator!=(const unique_ptr<_Tp, _Dp>& __x, nullptr_t) noexcept
 8004b52:	b580      	push	{r7, lr}
 8004b54:	b082      	sub	sp, #8
 8004b56:	af00      	add	r7, sp, #0
 8004b58:	6078      	str	r0, [r7, #4]
 8004b5a:	6039      	str	r1, [r7, #0]
    { return (bool)__x; }
 8004b5c:	6878      	ldr	r0, [r7, #4]
 8004b5e:	f000 fae5 	bl	800512c <_ZNKSt10unique_ptrI19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEcvbEv>
 8004b62:	4603      	mov	r3, r0
 8004b64:	4618      	mov	r0, r3
 8004b66:	3708      	adds	r7, #8
 8004b68:	46bd      	mov	sp, r7
 8004b6a:	bd80      	pop	{r7, pc}

08004b6c <_ZNKSt10unique_ptrI19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>:
      operator->() const noexcept
 8004b6c:	b580      	push	{r7, lr}
 8004b6e:	b082      	sub	sp, #8
 8004b70:	af00      	add	r7, sp, #0
 8004b72:	6078      	str	r0, [r7, #4]
	return get();
 8004b74:	6878      	ldr	r0, [r7, #4]
 8004b76:	f000 faea 	bl	800514e <_ZNKSt10unique_ptrI19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE3getEv>
 8004b7a:	4603      	mov	r3, r0
      }
 8004b7c:	4618      	mov	r0, r3
 8004b7e:	3708      	adds	r7, #8
 8004b80:	46bd      	mov	sp, r7
 8004b82:	bd80      	pop	{r7, pc}

08004b84 <_ZNSt10unique_ptrI19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE7releaseEv>:
      release() noexcept
 8004b84:	b580      	push	{r7, lr}
 8004b86:	b084      	sub	sp, #16
 8004b88:	af00      	add	r7, sp, #0
 8004b8a:	6078      	str	r0, [r7, #4]
	pointer __p = get();
 8004b8c:	6878      	ldr	r0, [r7, #4]
 8004b8e:	f000 fade 	bl	800514e <_ZNKSt10unique_ptrI19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE3getEv>
 8004b92:	60f8      	str	r0, [r7, #12]
	_M_t._M_ptr() = pointer();
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	4618      	mov	r0, r3
 8004b98:	f000 fa8d 	bl	80050b6 <_ZNSt15__uniq_ptr_implI19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>
 8004b9c:	4603      	mov	r3, r0
 8004b9e:	2200      	movs	r2, #0
 8004ba0:	601a      	str	r2, [r3, #0]
	return __p;
 8004ba2:	68fb      	ldr	r3, [r7, #12]
      }
 8004ba4:	4618      	mov	r0, r3
 8004ba6:	3710      	adds	r7, #16
 8004ba8:	46bd      	mov	sp, r7
 8004baa:	bd80      	pop	{r7, pc}

08004bac <_ZN11flatbuffers12EndianScalarIhEET_S1_>:
template<typename T> T EndianScalar(T t) {
 8004bac:	b480      	push	{r7}
 8004bae:	b083      	sub	sp, #12
 8004bb0:	af00      	add	r7, sp, #0
 8004bb2:	4603      	mov	r3, r0
 8004bb4:	71fb      	strb	r3, [r7, #7]
    return t;
 8004bb6:	79fb      	ldrb	r3, [r7, #7]
}
 8004bb8:	4618      	mov	r0, r3
 8004bba:	370c      	adds	r7, #12
 8004bbc:	46bd      	mov	sp, r7
 8004bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc2:	4770      	bx	lr

08004bc4 <_ZN11flatbuffers5Table10GetPointerIPKvEET_t>:
  template<typename P> P GetPointer(voffset_t field) {
 8004bc4:	b580      	push	{r7, lr}
 8004bc6:	b084      	sub	sp, #16
 8004bc8:	af00      	add	r7, sp, #0
 8004bca:	6078      	str	r0, [r7, #4]
 8004bcc:	460b      	mov	r3, r1
 8004bce:	807b      	strh	r3, [r7, #2]
    auto field_offset = GetOptionalFieldOffset(field);
 8004bd0:	887b      	ldrh	r3, [r7, #2]
 8004bd2:	4619      	mov	r1, r3
 8004bd4:	6878      	ldr	r0, [r7, #4]
 8004bd6:	f7fc fa87 	bl	80010e8 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
 8004bda:	4603      	mov	r3, r0
 8004bdc:	81fb      	strh	r3, [r7, #14]
    auto p = data_ + field_offset;
 8004bde:	687a      	ldr	r2, [r7, #4]
 8004be0:	89fb      	ldrh	r3, [r7, #14]
 8004be2:	4413      	add	r3, r2
 8004be4:	60bb      	str	r3, [r7, #8]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 8004be6:	89fb      	ldrh	r3, [r7, #14]
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d006      	beq.n	8004bfa <_ZN11flatbuffers5Table10GetPointerIPKvEET_t+0x36>
 8004bec:	68b8      	ldr	r0, [r7, #8]
 8004bee:	f7fc ff37 	bl	8001a60 <_ZN11flatbuffers10ReadScalarImEET_PKv>
 8004bf2:	4602      	mov	r2, r0
 8004bf4:	68bb      	ldr	r3, [r7, #8]
 8004bf6:	4413      	add	r3, r2
                        : nullptr;
 8004bf8:	e000      	b.n	8004bfc <_ZN11flatbuffers5Table10GetPointerIPKvEET_t+0x38>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 8004bfa:	2300      	movs	r3, #0
  }
 8004bfc:	4618      	mov	r0, r3
 8004bfe:	3710      	adds	r7, #16
 8004c00:	46bd      	mov	sp, r7
 8004c02:	bd80      	pop	{r7, pc}

08004c04 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIlEEEET_t>:
  template<typename P> P GetPointer(voffset_t field) {
 8004c04:	b580      	push	{r7, lr}
 8004c06:	b084      	sub	sp, #16
 8004c08:	af00      	add	r7, sp, #0
 8004c0a:	6078      	str	r0, [r7, #4]
 8004c0c:	460b      	mov	r3, r1
 8004c0e:	807b      	strh	r3, [r7, #2]
    auto field_offset = GetOptionalFieldOffset(field);
 8004c10:	887b      	ldrh	r3, [r7, #2]
 8004c12:	4619      	mov	r1, r3
 8004c14:	6878      	ldr	r0, [r7, #4]
 8004c16:	f7fc fa67 	bl	80010e8 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
 8004c1a:	4603      	mov	r3, r0
 8004c1c:	81fb      	strh	r3, [r7, #14]
    auto p = data_ + field_offset;
 8004c1e:	687a      	ldr	r2, [r7, #4]
 8004c20:	89fb      	ldrh	r3, [r7, #14]
 8004c22:	4413      	add	r3, r2
 8004c24:	60bb      	str	r3, [r7, #8]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 8004c26:	89fb      	ldrh	r3, [r7, #14]
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d006      	beq.n	8004c3a <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIlEEEET_t+0x36>
 8004c2c:	68b8      	ldr	r0, [r7, #8]
 8004c2e:	f7fc ff17 	bl	8001a60 <_ZN11flatbuffers10ReadScalarImEET_PKv>
 8004c32:	4602      	mov	r2, r0
 8004c34:	68bb      	ldr	r3, [r7, #8]
 8004c36:	4413      	add	r3, r2
                        : nullptr;
 8004c38:	e000      	b.n	8004c3c <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIlEEEET_t+0x38>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 8004c3a:	2300      	movs	r3, #0
  }
 8004c3c:	4618      	mov	r0, r3
 8004c3e:	3710      	adds	r7, #16
 8004c40:	46bd      	mov	sp, r7
 8004c42:	bd80      	pop	{r7, pc}

08004c44 <_ZN11flatbuffers10ReadScalarIaEET_PKv>:
T ReadScalar(const void *p) {
 8004c44:	b580      	push	{r7, lr}
 8004c46:	b082      	sub	sp, #8
 8004c48:	af00      	add	r7, sp, #0
 8004c4a:	6078      	str	r0, [r7, #4]
  return EndianScalar(*reinterpret_cast<const T *>(p));
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	f993 3000 	ldrsb.w	r3, [r3]
 8004c52:	4618      	mov	r0, r3
 8004c54:	f000 fa88 	bl	8005168 <_ZN11flatbuffers12EndianScalarIaEET_S1_>
 8004c58:	4603      	mov	r3, r0
}
 8004c5a:	4618      	mov	r0, r3
 8004c5c:	3708      	adds	r7, #8
 8004c5e:	46bd      	mov	sp, r7
 8004c60:	bd80      	pop	{r7, pc}

08004c62 <_ZN11flatbuffers5Table10GetPointerIPKNS_6StringEEET_t>:
  template<typename P> P GetPointer(voffset_t field) {
 8004c62:	b580      	push	{r7, lr}
 8004c64:	b084      	sub	sp, #16
 8004c66:	af00      	add	r7, sp, #0
 8004c68:	6078      	str	r0, [r7, #4]
 8004c6a:	460b      	mov	r3, r1
 8004c6c:	807b      	strh	r3, [r7, #2]
    auto field_offset = GetOptionalFieldOffset(field);
 8004c6e:	887b      	ldrh	r3, [r7, #2]
 8004c70:	4619      	mov	r1, r3
 8004c72:	6878      	ldr	r0, [r7, #4]
 8004c74:	f7fc fa38 	bl	80010e8 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
 8004c78:	4603      	mov	r3, r0
 8004c7a:	81fb      	strh	r3, [r7, #14]
    auto p = data_ + field_offset;
 8004c7c:	687a      	ldr	r2, [r7, #4]
 8004c7e:	89fb      	ldrh	r3, [r7, #14]
 8004c80:	4413      	add	r3, r2
 8004c82:	60bb      	str	r3, [r7, #8]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 8004c84:	89fb      	ldrh	r3, [r7, #14]
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d006      	beq.n	8004c98 <_ZN11flatbuffers5Table10GetPointerIPKNS_6StringEEET_t+0x36>
 8004c8a:	68b8      	ldr	r0, [r7, #8]
 8004c8c:	f7fc fee8 	bl	8001a60 <_ZN11flatbuffers10ReadScalarImEET_PKv>
 8004c90:	4602      	mov	r2, r0
 8004c92:	68bb      	ldr	r3, [r7, #8]
 8004c94:	4413      	add	r3, r2
                        : nullptr;
 8004c96:	e000      	b.n	8004c9a <_ZN11flatbuffers5Table10GetPointerIPKNS_6StringEEET_t+0x38>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 8004c98:	2300      	movs	r3, #0
  }
 8004c9a:	4618      	mov	r0, r3
 8004c9c:	3710      	adds	r7, #16
 8004c9e:	46bd      	mov	sp, r7
 8004ca0:	bd80      	pop	{r7, pc}

08004ca2 <_ZN11flatbuffers10ReadScalarIfEET_PKv>:
T ReadScalar(const void *p) {
 8004ca2:	b580      	push	{r7, lr}
 8004ca4:	b082      	sub	sp, #8
 8004ca6:	af00      	add	r7, sp, #0
 8004ca8:	6078      	str	r0, [r7, #4]
  return EndianScalar(*reinterpret_cast<const T *>(p));
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	edd3 7a00 	vldr	s15, [r3]
 8004cb0:	eeb0 0a67 	vmov.f32	s0, s15
 8004cb4:	f000 fa65 	bl	8005182 <_ZN11flatbuffers12EndianScalarIfEET_S1_>
 8004cb8:	eef0 7a40 	vmov.f32	s15, s0
}
 8004cbc:	eeb0 0a67 	vmov.f32	s0, s15
 8004cc0:	3708      	adds	r7, #8
 8004cc2:	46bd      	mov	sp, r7
 8004cc4:	bd80      	pop	{r7, pc}

08004cc6 <_ZN11flatbuffers14IndirectHelperIlE4ReadEPKhm>:
  static return_type Read(const uint8_t *p, uoffset_t i) {
 8004cc6:	b580      	push	{r7, lr}
 8004cc8:	b082      	sub	sp, #8
 8004cca:	af00      	add	r7, sp, #0
 8004ccc:	6078      	str	r0, [r7, #4]
 8004cce:	6039      	str	r1, [r7, #0]
    return EndianScalar((reinterpret_cast<const T *>(p))[i]);
 8004cd0:	683b      	ldr	r3, [r7, #0]
 8004cd2:	009b      	lsls	r3, r3, #2
 8004cd4:	687a      	ldr	r2, [r7, #4]
 8004cd6:	4413      	add	r3, r2
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	4618      	mov	r0, r3
 8004cdc:	f7fc ffac 	bl	8001c38 <_ZN11flatbuffers12EndianScalarIlEET_S1_>
 8004ce0:	4603      	mov	r3, r0
  }
 8004ce2:	4618      	mov	r0, r3
 8004ce4:	3708      	adds	r7, #8
 8004ce6:	46bd      	mov	sp, r7
 8004ce8:	bd80      	pop	{r7, pc}

08004cea <_ZNK11flatbuffers6VectorIlE4DataEv>:
  const uint8_t *Data() const {
 8004cea:	b480      	push	{r7}
 8004cec:	b083      	sub	sp, #12
 8004cee:	af00      	add	r7, sp, #0
 8004cf0:	6078      	str	r0, [r7, #4]
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	3304      	adds	r3, #4
  }
 8004cf6:	4618      	mov	r0, r3
 8004cf8:	370c      	adds	r7, #12
 8004cfa:	46bd      	mov	sp, r7
 8004cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d00:	4770      	bx	lr

08004d02 <_ZSt7forwardIN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEOT_RNSt16remove_referenceIS4_E4typeE>:
   *
   *  This function is used to implement "perfect forwarding".
   */
  template<typename _Tp>
    constexpr _Tp&&
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8004d02:	b480      	push	{r7}
 8004d04:	b083      	sub	sp, #12
 8004d06:	af00      	add	r7, sp, #0
 8004d08:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	4618      	mov	r0, r3
 8004d0e:	370c      	adds	r7, #12
 8004d10:	46bd      	mov	sp, r7
 8004d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d16:	4770      	bx	lr

08004d18 <_ZN6tflite20BuiltinDataAllocator11AllocatePODI25TfLiteDepthwiseConvParamsEEPT_v>:
  // Allocate a structure, but make sure it is a POD structure that doesn't
  // require constructors to run. The reason we do this, is that Interpreter's C
  // extension part will take ownership so destructors  will not be run during
  // deallocation.
  template <typename T>
  T* AllocatePOD() {
 8004d18:	b580      	push	{r7, lr}
 8004d1a:	b084      	sub	sp, #16
 8004d1c:	af00      	add	r7, sp, #0
 8004d1e:	6078      	str	r0, [r7, #4]
    // TODO(b/154346074): Change this to is_trivially_destructible when all
    // platform targets support that properly.
    static_assert(std::is_pod<T>::value, "Builtin data structure must be POD.");
    void* allocated_memory = this->Allocate(sizeof(T), alignof(T));
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	2204      	movs	r2, #4
 8004d28:	211c      	movs	r1, #28
 8004d2a:	6878      	ldr	r0, [r7, #4]
 8004d2c:	4798      	blx	r3
 8004d2e:	60f8      	str	r0, [r7, #12]
    return new (allocated_memory) T();
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	4619      	mov	r1, r3
 8004d34:	201c      	movs	r0, #28
 8004d36:	f7fe ffa2 	bl	8003c7e <_ZnwjPv>
 8004d3a:	4601      	mov	r1, r0
 8004d3c:	460a      	mov	r2, r1
 8004d3e:	2300      	movs	r3, #0
 8004d40:	6013      	str	r3, [r2, #0]
 8004d42:	6053      	str	r3, [r2, #4]
 8004d44:	6093      	str	r3, [r2, #8]
 8004d46:	60d3      	str	r3, [r2, #12]
 8004d48:	6113      	str	r3, [r2, #16]
 8004d4a:	6153      	str	r3, [r2, #20]
 8004d4c:	6193      	str	r3, [r2, #24]
 8004d4e:	460b      	mov	r3, r1
  }
 8004d50:	4618      	mov	r0, r3
 8004d52:	3710      	adds	r7, #16
 8004d54:	46bd      	mov	sp, r7
 8004d56:	bd80      	pop	{r7, pc}

08004d58 <_ZNSt10unique_ptrI25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC1IS4_vEEPS0_NSt9enable_ifIXntsrSt19is_lvalue_referenceIT_E5valueEOSA_E4typeE>:
	unique_ptr(pointer __p,
 8004d58:	b590      	push	{r4, r7, lr}
 8004d5a:	b085      	sub	sp, #20
 8004d5c:	af00      	add	r7, sp, #0
 8004d5e:	60f8      	str	r0, [r7, #12]
 8004d60:	60b9      	str	r1, [r7, #8]
 8004d62:	607a      	str	r2, [r7, #4]
	: _M_t(__p, std::move(__d))
 8004d64:	68fc      	ldr	r4, [r7, #12]
 8004d66:	6878      	ldr	r0, [r7, #4]
 8004d68:	f000 fa1a 	bl	80051a0 <_ZSt4moveIRN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEONSt16remove_referenceIT_E4typeEOS6_>
 8004d6c:	4603      	mov	r3, r0
 8004d6e:	461a      	mov	r2, r3
 8004d70:	68b9      	ldr	r1, [r7, #8]
 8004d72:	4620      	mov	r0, r4
 8004d74:	f000 f82a 	bl	8004dcc <_ZNSt15__uniq_ptr_implI25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC1IS4_EEPS0_OT_>
	{ }
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	4618      	mov	r0, r3
 8004d7c:	3714      	adds	r7, #20
 8004d7e:	46bd      	mov	sp, r7
 8004d80:	bd90      	pop	{r4, r7, pc}

08004d82 <_ZNSt15__uniq_ptr_implI25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>:
      pointer&   _M_ptr() { return std::get<0>(_M_t); }
 8004d82:	b580      	push	{r7, lr}
 8004d84:	b082      	sub	sp, #8
 8004d86:	af00      	add	r7, sp, #0
 8004d88:	6078      	str	r0, [r7, #4]
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	4618      	mov	r0, r3
 8004d8e:	f000 fa12 	bl	80051b6 <_ZSt3getILj0EJP25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>
 8004d92:	4603      	mov	r3, r0
 8004d94:	4618      	mov	r0, r3
 8004d96:	3708      	adds	r7, #8
 8004d98:	46bd      	mov	sp, r7
 8004d9a:	bd80      	pop	{r7, pc}

08004d9c <_ZNSt10unique_ptrI25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE11get_deleterEv>:
      get_deleter() noexcept
 8004d9c:	b580      	push	{r7, lr}
 8004d9e:	b082      	sub	sp, #8
 8004da0:	af00      	add	r7, sp, #0
 8004da2:	6078      	str	r0, [r7, #4]
      { return _M_t._M_deleter(); }
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	4618      	mov	r0, r3
 8004da8:	f000 fa12 	bl	80051d0 <_ZNSt15__uniq_ptr_implI25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE10_M_deleterEv>
 8004dac:	4603      	mov	r3, r0
 8004dae:	4618      	mov	r0, r3
 8004db0:	3708      	adds	r7, #8
 8004db2:	46bd      	mov	sp, r7
 8004db4:	bd80      	pop	{r7, pc}

08004db6 <_ZSt4moveIRP25TfLiteDepthwiseConvParamsEONSt16remove_referenceIT_E4typeEOS4_>:
   *  @param  __t  A thing of arbitrary type.
   *  @return The parameter cast to an rvalue-reference to allow moving it.
  */
  template<typename _Tp>
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
 8004db6:	b480      	push	{r7}
 8004db8:	b083      	sub	sp, #12
 8004dba:	af00      	add	r7, sp, #0
 8004dbc:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	4618      	mov	r0, r3
 8004dc2:	370c      	adds	r7, #12
 8004dc4:	46bd      	mov	sp, r7
 8004dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dca:	4770      	bx	lr

08004dcc <_ZNSt15__uniq_ptr_implI25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC1IS4_EEPS0_OT_>:
      __uniq_ptr_impl(pointer __p, _Del&& __d)
 8004dcc:	b590      	push	{r4, r7, lr}
 8004dce:	b085      	sub	sp, #20
 8004dd0:	af00      	add	r7, sp, #0
 8004dd2:	60f8      	str	r0, [r7, #12]
 8004dd4:	60b9      	str	r1, [r7, #8]
 8004dd6:	607a      	str	r2, [r7, #4]
	: _M_t(__p, std::forward<_Del>(__d)) { }
 8004dd8:	68fc      	ldr	r4, [r7, #12]
 8004dda:	6878      	ldr	r0, [r7, #4]
 8004ddc:	f7ff ff91 	bl	8004d02 <_ZSt7forwardIN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEOT_RNSt16remove_referenceIS4_E4typeE>
 8004de0:	4602      	mov	r2, r0
 8004de2:	f107 0308 	add.w	r3, r7, #8
 8004de6:	4619      	mov	r1, r3
 8004de8:	4620      	mov	r0, r4
 8004dea:	f000 f9fe 	bl	80051ea <_ZNSt5tupleIJP25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC1IRS1_S5_Lb1EEEOT_OT0_>
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	4618      	mov	r0, r3
 8004df2:	3714      	adds	r7, #20
 8004df4:	46bd      	mov	sp, r7
 8004df6:	bd90      	pop	{r4, r7, pc}

08004df8 <_ZNKSt10unique_ptrI25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEcvbEv>:
      explicit operator bool() const noexcept
 8004df8:	b580      	push	{r7, lr}
 8004dfa:	b082      	sub	sp, #8
 8004dfc:	af00      	add	r7, sp, #0
 8004dfe:	6078      	str	r0, [r7, #4]
      { return get() == pointer() ? false : true; }
 8004e00:	6878      	ldr	r0, [r7, #4]
 8004e02:	f000 f80a 	bl	8004e1a <_ZNKSt10unique_ptrI25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE3getEv>
 8004e06:	4603      	mov	r3, r0
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	bf14      	ite	ne
 8004e0c:	2301      	movne	r3, #1
 8004e0e:	2300      	moveq	r3, #0
 8004e10:	b2db      	uxtb	r3, r3
 8004e12:	4618      	mov	r0, r3
 8004e14:	3708      	adds	r7, #8
 8004e16:	46bd      	mov	sp, r7
 8004e18:	bd80      	pop	{r7, pc}

08004e1a <_ZNKSt10unique_ptrI25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE3getEv>:
      get() const noexcept
 8004e1a:	b580      	push	{r7, lr}
 8004e1c:	b082      	sub	sp, #8
 8004e1e:	af00      	add	r7, sp, #0
 8004e20:	6078      	str	r0, [r7, #4]
      { return _M_t._M_ptr(); }
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	4618      	mov	r0, r3
 8004e26:	f000 f9f9 	bl	800521c <_ZNKSt15__uniq_ptr_implI25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>
 8004e2a:	4603      	mov	r3, r0
 8004e2c:	4618      	mov	r0, r3
 8004e2e:	3708      	adds	r7, #8
 8004e30:	46bd      	mov	sp, r7
 8004e32:	bd80      	pop	{r7, pc}

08004e34 <_ZN6tflite20BuiltinDataAllocator11AllocatePODI26TfLiteFullyConnectedParamsEEPT_v>:
  T* AllocatePOD() {
 8004e34:	b580      	push	{r7, lr}
 8004e36:	b084      	sub	sp, #16
 8004e38:	af00      	add	r7, sp, #0
 8004e3a:	6078      	str	r0, [r7, #4]
    void* allocated_memory = this->Allocate(sizeof(T), alignof(T));
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	2201      	movs	r2, #1
 8004e44:	2104      	movs	r1, #4
 8004e46:	6878      	ldr	r0, [r7, #4]
 8004e48:	4798      	blx	r3
 8004e4a:	60f8      	str	r0, [r7, #12]
    return new (allocated_memory) T();
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	4619      	mov	r1, r3
 8004e50:	2004      	movs	r0, #4
 8004e52:	f7fe ff14 	bl	8003c7e <_ZnwjPv>
 8004e56:	4601      	mov	r1, r0
 8004e58:	460a      	mov	r2, r1
 8004e5a:	2300      	movs	r3, #0
 8004e5c:	6013      	str	r3, [r2, #0]
 8004e5e:	460b      	mov	r3, r1
  }
 8004e60:	4618      	mov	r0, r3
 8004e62:	3710      	adds	r7, #16
 8004e64:	46bd      	mov	sp, r7
 8004e66:	bd80      	pop	{r7, pc}

08004e68 <_ZNSt10unique_ptrI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC1IS4_vEEPS0_NSt9enable_ifIXntsrSt19is_lvalue_referenceIT_E5valueEOSA_E4typeE>:
	unique_ptr(pointer __p,
 8004e68:	b590      	push	{r4, r7, lr}
 8004e6a:	b085      	sub	sp, #20
 8004e6c:	af00      	add	r7, sp, #0
 8004e6e:	60f8      	str	r0, [r7, #12]
 8004e70:	60b9      	str	r1, [r7, #8]
 8004e72:	607a      	str	r2, [r7, #4]
	: _M_t(__p, std::move(__d))
 8004e74:	68fc      	ldr	r4, [r7, #12]
 8004e76:	6878      	ldr	r0, [r7, #4]
 8004e78:	f000 f992 	bl	80051a0 <_ZSt4moveIRN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEONSt16remove_referenceIT_E4typeEOS6_>
 8004e7c:	4603      	mov	r3, r0
 8004e7e:	461a      	mov	r2, r3
 8004e80:	68b9      	ldr	r1, [r7, #8]
 8004e82:	4620      	mov	r0, r4
 8004e84:	f000 f82a 	bl	8004edc <_ZNSt15__uniq_ptr_implI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC1IS4_EEPS0_OT_>
	{ }
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	4618      	mov	r0, r3
 8004e8c:	3714      	adds	r7, #20
 8004e8e:	46bd      	mov	sp, r7
 8004e90:	bd90      	pop	{r4, r7, pc}

08004e92 <_ZNSt15__uniq_ptr_implI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>:
      pointer&   _M_ptr() { return std::get<0>(_M_t); }
 8004e92:	b580      	push	{r7, lr}
 8004e94:	b082      	sub	sp, #8
 8004e96:	af00      	add	r7, sp, #0
 8004e98:	6078      	str	r0, [r7, #4]
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	4618      	mov	r0, r3
 8004e9e:	f000 f9cb 	bl	8005238 <_ZSt3getILj0EJP26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>
 8004ea2:	4603      	mov	r3, r0
 8004ea4:	4618      	mov	r0, r3
 8004ea6:	3708      	adds	r7, #8
 8004ea8:	46bd      	mov	sp, r7
 8004eaa:	bd80      	pop	{r7, pc}

08004eac <_ZNSt10unique_ptrI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE11get_deleterEv>:
      get_deleter() noexcept
 8004eac:	b580      	push	{r7, lr}
 8004eae:	b082      	sub	sp, #8
 8004eb0:	af00      	add	r7, sp, #0
 8004eb2:	6078      	str	r0, [r7, #4]
      { return _M_t._M_deleter(); }
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	4618      	mov	r0, r3
 8004eb8:	f000 f9cb 	bl	8005252 <_ZNSt15__uniq_ptr_implI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE10_M_deleterEv>
 8004ebc:	4603      	mov	r3, r0
 8004ebe:	4618      	mov	r0, r3
 8004ec0:	3708      	adds	r7, #8
 8004ec2:	46bd      	mov	sp, r7
 8004ec4:	bd80      	pop	{r7, pc}

08004ec6 <_ZSt4moveIRP26TfLiteFullyConnectedParamsEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
 8004ec6:	b480      	push	{r7}
 8004ec8:	b083      	sub	sp, #12
 8004eca:	af00      	add	r7, sp, #0
 8004ecc:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	4618      	mov	r0, r3
 8004ed2:	370c      	adds	r7, #12
 8004ed4:	46bd      	mov	sp, r7
 8004ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eda:	4770      	bx	lr

08004edc <_ZNSt15__uniq_ptr_implI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC1IS4_EEPS0_OT_>:
      __uniq_ptr_impl(pointer __p, _Del&& __d)
 8004edc:	b590      	push	{r4, r7, lr}
 8004ede:	b085      	sub	sp, #20
 8004ee0:	af00      	add	r7, sp, #0
 8004ee2:	60f8      	str	r0, [r7, #12]
 8004ee4:	60b9      	str	r1, [r7, #8]
 8004ee6:	607a      	str	r2, [r7, #4]
	: _M_t(__p, std::forward<_Del>(__d)) { }
 8004ee8:	68fc      	ldr	r4, [r7, #12]
 8004eea:	6878      	ldr	r0, [r7, #4]
 8004eec:	f7ff ff09 	bl	8004d02 <_ZSt7forwardIN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEOT_RNSt16remove_referenceIS4_E4typeE>
 8004ef0:	4602      	mov	r2, r0
 8004ef2:	f107 0308 	add.w	r3, r7, #8
 8004ef6:	4619      	mov	r1, r3
 8004ef8:	4620      	mov	r0, r4
 8004efa:	f000 f9b7 	bl	800526c <_ZNSt5tupleIJP26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC1IRS1_S5_Lb1EEEOT_OT0_>
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	4618      	mov	r0, r3
 8004f02:	3714      	adds	r7, #20
 8004f04:	46bd      	mov	sp, r7
 8004f06:	bd90      	pop	{r4, r7, pc}

08004f08 <_ZNKSt10unique_ptrI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEcvbEv>:
      explicit operator bool() const noexcept
 8004f08:	b580      	push	{r7, lr}
 8004f0a:	b082      	sub	sp, #8
 8004f0c:	af00      	add	r7, sp, #0
 8004f0e:	6078      	str	r0, [r7, #4]
      { return get() == pointer() ? false : true; }
 8004f10:	6878      	ldr	r0, [r7, #4]
 8004f12:	f000 f80a 	bl	8004f2a <_ZNKSt10unique_ptrI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE3getEv>
 8004f16:	4603      	mov	r3, r0
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	bf14      	ite	ne
 8004f1c:	2301      	movne	r3, #1
 8004f1e:	2300      	moveq	r3, #0
 8004f20:	b2db      	uxtb	r3, r3
 8004f22:	4618      	mov	r0, r3
 8004f24:	3708      	adds	r7, #8
 8004f26:	46bd      	mov	sp, r7
 8004f28:	bd80      	pop	{r7, pc}

08004f2a <_ZNKSt10unique_ptrI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE3getEv>:
      get() const noexcept
 8004f2a:	b580      	push	{r7, lr}
 8004f2c:	b082      	sub	sp, #8
 8004f2e:	af00      	add	r7, sp, #0
 8004f30:	6078      	str	r0, [r7, #4]
      { return _M_t._M_ptr(); }
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	4618      	mov	r0, r3
 8004f36:	f000 f9b2 	bl	800529e <_ZNKSt15__uniq_ptr_implI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>
 8004f3a:	4603      	mov	r3, r0
 8004f3c:	4618      	mov	r0, r3
 8004f3e:	3708      	adds	r7, #8
 8004f40:	46bd      	mov	sp, r7
 8004f42:	bd80      	pop	{r7, pc}

08004f44 <_ZN6tflite20BuiltinDataAllocator11AllocatePODI19TfLiteReshapeParamsEEPT_v>:
  T* AllocatePOD() {
 8004f44:	b590      	push	{r4, r7, lr}
 8004f46:	b085      	sub	sp, #20
 8004f48:	af00      	add	r7, sp, #0
 8004f4a:	6078      	str	r0, [r7, #4]
    void* allocated_memory = this->Allocate(sizeof(T), alignof(T));
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	2204      	movs	r2, #4
 8004f54:	2124      	movs	r1, #36	; 0x24
 8004f56:	6878      	ldr	r0, [r7, #4]
 8004f58:	4798      	blx	r3
 8004f5a:	60f8      	str	r0, [r7, #12]
    return new (allocated_memory) T();
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	4619      	mov	r1, r3
 8004f60:	2024      	movs	r0, #36	; 0x24
 8004f62:	f7fe fe8c 	bl	8003c7e <_ZnwjPv>
 8004f66:	4604      	mov	r4, r0
 8004f68:	4620      	mov	r0, r4
 8004f6a:	2324      	movs	r3, #36	; 0x24
 8004f6c:	461a      	mov	r2, r3
 8004f6e:	2100      	movs	r1, #0
 8004f70:	f00b ff42 	bl	8010df8 <memset>
 8004f74:	4623      	mov	r3, r4
  }
 8004f76:	4618      	mov	r0, r3
 8004f78:	3714      	adds	r7, #20
 8004f7a:	46bd      	mov	sp, r7
 8004f7c:	bd90      	pop	{r4, r7, pc}

08004f7e <_ZNSt10unique_ptrI19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC1IS4_vEEPS0_NSt9enable_ifIXntsrSt19is_lvalue_referenceIT_E5valueEOSA_E4typeE>:
	unique_ptr(pointer __p,
 8004f7e:	b590      	push	{r4, r7, lr}
 8004f80:	b085      	sub	sp, #20
 8004f82:	af00      	add	r7, sp, #0
 8004f84:	60f8      	str	r0, [r7, #12]
 8004f86:	60b9      	str	r1, [r7, #8]
 8004f88:	607a      	str	r2, [r7, #4]
	: _M_t(__p, std::move(__d))
 8004f8a:	68fc      	ldr	r4, [r7, #12]
 8004f8c:	6878      	ldr	r0, [r7, #4]
 8004f8e:	f000 f907 	bl	80051a0 <_ZSt4moveIRN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEONSt16remove_referenceIT_E4typeEOS6_>
 8004f92:	4603      	mov	r3, r0
 8004f94:	461a      	mov	r2, r3
 8004f96:	68b9      	ldr	r1, [r7, #8]
 8004f98:	4620      	mov	r0, r4
 8004f9a:	f000 f82a 	bl	8004ff2 <_ZNSt15__uniq_ptr_implI19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC1IS4_EEPS0_OT_>
	{ }
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	4618      	mov	r0, r3
 8004fa2:	3714      	adds	r7, #20
 8004fa4:	46bd      	mov	sp, r7
 8004fa6:	bd90      	pop	{r4, r7, pc}

08004fa8 <_ZNSt15__uniq_ptr_implI19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>:
      pointer&   _M_ptr() { return std::get<0>(_M_t); }
 8004fa8:	b580      	push	{r7, lr}
 8004faa:	b082      	sub	sp, #8
 8004fac:	af00      	add	r7, sp, #0
 8004fae:	6078      	str	r0, [r7, #4]
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	4618      	mov	r0, r3
 8004fb4:	f000 f981 	bl	80052ba <_ZSt3getILj0EJP19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>
 8004fb8:	4603      	mov	r3, r0
 8004fba:	4618      	mov	r0, r3
 8004fbc:	3708      	adds	r7, #8
 8004fbe:	46bd      	mov	sp, r7
 8004fc0:	bd80      	pop	{r7, pc}

08004fc2 <_ZNSt10unique_ptrI19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE11get_deleterEv>:
      get_deleter() noexcept
 8004fc2:	b580      	push	{r7, lr}
 8004fc4:	b082      	sub	sp, #8
 8004fc6:	af00      	add	r7, sp, #0
 8004fc8:	6078      	str	r0, [r7, #4]
      { return _M_t._M_deleter(); }
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	4618      	mov	r0, r3
 8004fce:	f000 f981 	bl	80052d4 <_ZNSt15__uniq_ptr_implI19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE10_M_deleterEv>
 8004fd2:	4603      	mov	r3, r0
 8004fd4:	4618      	mov	r0, r3
 8004fd6:	3708      	adds	r7, #8
 8004fd8:	46bd      	mov	sp, r7
 8004fda:	bd80      	pop	{r7, pc}

08004fdc <_ZSt4moveIRP19TfLiteReshapeParamsEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
 8004fdc:	b480      	push	{r7}
 8004fde:	b083      	sub	sp, #12
 8004fe0:	af00      	add	r7, sp, #0
 8004fe2:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	4618      	mov	r0, r3
 8004fe8:	370c      	adds	r7, #12
 8004fea:	46bd      	mov	sp, r7
 8004fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff0:	4770      	bx	lr

08004ff2 <_ZNSt15__uniq_ptr_implI19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC1IS4_EEPS0_OT_>:
      __uniq_ptr_impl(pointer __p, _Del&& __d)
 8004ff2:	b590      	push	{r4, r7, lr}
 8004ff4:	b085      	sub	sp, #20
 8004ff6:	af00      	add	r7, sp, #0
 8004ff8:	60f8      	str	r0, [r7, #12]
 8004ffa:	60b9      	str	r1, [r7, #8]
 8004ffc:	607a      	str	r2, [r7, #4]
	: _M_t(__p, std::forward<_Del>(__d)) { }
 8004ffe:	68fc      	ldr	r4, [r7, #12]
 8005000:	6878      	ldr	r0, [r7, #4]
 8005002:	f7ff fe7e 	bl	8004d02 <_ZSt7forwardIN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEOT_RNSt16remove_referenceIS4_E4typeE>
 8005006:	4602      	mov	r2, r0
 8005008:	f107 0308 	add.w	r3, r7, #8
 800500c:	4619      	mov	r1, r3
 800500e:	4620      	mov	r0, r4
 8005010:	f000 f96d 	bl	80052ee <_ZNSt5tupleIJP19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC1IRS1_S5_Lb1EEEOT_OT0_>
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	4618      	mov	r0, r3
 8005018:	3714      	adds	r7, #20
 800501a:	46bd      	mov	sp, r7
 800501c:	bd90      	pop	{r4, r7, pc}

0800501e <_ZNKSt10unique_ptrI19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEcvbEv>:
      explicit operator bool() const noexcept
 800501e:	b580      	push	{r7, lr}
 8005020:	b082      	sub	sp, #8
 8005022:	af00      	add	r7, sp, #0
 8005024:	6078      	str	r0, [r7, #4]
      { return get() == pointer() ? false : true; }
 8005026:	6878      	ldr	r0, [r7, #4]
 8005028:	f000 f80a 	bl	8005040 <_ZNKSt10unique_ptrI19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE3getEv>
 800502c:	4603      	mov	r3, r0
 800502e:	2b00      	cmp	r3, #0
 8005030:	bf14      	ite	ne
 8005032:	2301      	movne	r3, #1
 8005034:	2300      	moveq	r3, #0
 8005036:	b2db      	uxtb	r3, r3
 8005038:	4618      	mov	r0, r3
 800503a:	3708      	adds	r7, #8
 800503c:	46bd      	mov	sp, r7
 800503e:	bd80      	pop	{r7, pc}

08005040 <_ZNKSt10unique_ptrI19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE3getEv>:
      get() const noexcept
 8005040:	b580      	push	{r7, lr}
 8005042:	b082      	sub	sp, #8
 8005044:	af00      	add	r7, sp, #0
 8005046:	6078      	str	r0, [r7, #4]
      { return _M_t._M_ptr(); }
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	4618      	mov	r0, r3
 800504c:	f000 f968 	bl	8005320 <_ZNKSt15__uniq_ptr_implI19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>
 8005050:	4603      	mov	r3, r0
 8005052:	4618      	mov	r0, r3
 8005054:	3708      	adds	r7, #8
 8005056:	46bd      	mov	sp, r7
 8005058:	bd80      	pop	{r7, pc}

0800505a <_ZN6tflite20BuiltinDataAllocator11AllocatePODI19TfLiteSoftmaxParamsEEPT_v>:
  T* AllocatePOD() {
 800505a:	b580      	push	{r7, lr}
 800505c:	b084      	sub	sp, #16
 800505e:	af00      	add	r7, sp, #0
 8005060:	6078      	str	r0, [r7, #4]
    void* allocated_memory = this->Allocate(sizeof(T), alignof(T));
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	2204      	movs	r2, #4
 800506a:	2104      	movs	r1, #4
 800506c:	6878      	ldr	r0, [r7, #4]
 800506e:	4798      	blx	r3
 8005070:	60f8      	str	r0, [r7, #12]
    return new (allocated_memory) T();
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	4619      	mov	r1, r3
 8005076:	2004      	movs	r0, #4
 8005078:	f7fe fe01 	bl	8003c7e <_ZnwjPv>
 800507c:	4603      	mov	r3, r0
 800507e:	f04f 0200 	mov.w	r2, #0
 8005082:	601a      	str	r2, [r3, #0]
  }
 8005084:	4618      	mov	r0, r3
 8005086:	3710      	adds	r7, #16
 8005088:	46bd      	mov	sp, r7
 800508a:	bd80      	pop	{r7, pc}

0800508c <_ZNSt10unique_ptrI19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC1IS4_vEEPS0_NSt9enable_ifIXntsrSt19is_lvalue_referenceIT_E5valueEOSA_E4typeE>:
	unique_ptr(pointer __p,
 800508c:	b590      	push	{r4, r7, lr}
 800508e:	b085      	sub	sp, #20
 8005090:	af00      	add	r7, sp, #0
 8005092:	60f8      	str	r0, [r7, #12]
 8005094:	60b9      	str	r1, [r7, #8]
 8005096:	607a      	str	r2, [r7, #4]
	: _M_t(__p, std::move(__d))
 8005098:	68fc      	ldr	r4, [r7, #12]
 800509a:	6878      	ldr	r0, [r7, #4]
 800509c:	f000 f880 	bl	80051a0 <_ZSt4moveIRN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEONSt16remove_referenceIT_E4typeEOS6_>
 80050a0:	4603      	mov	r3, r0
 80050a2:	461a      	mov	r2, r3
 80050a4:	68b9      	ldr	r1, [r7, #8]
 80050a6:	4620      	mov	r0, r4
 80050a8:	f000 f82a 	bl	8005100 <_ZNSt15__uniq_ptr_implI19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC1IS4_EEPS0_OT_>
	{ }
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	4618      	mov	r0, r3
 80050b0:	3714      	adds	r7, #20
 80050b2:	46bd      	mov	sp, r7
 80050b4:	bd90      	pop	{r4, r7, pc}

080050b6 <_ZNSt15__uniq_ptr_implI19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>:
      pointer&   _M_ptr() { return std::get<0>(_M_t); }
 80050b6:	b580      	push	{r7, lr}
 80050b8:	b082      	sub	sp, #8
 80050ba:	af00      	add	r7, sp, #0
 80050bc:	6078      	str	r0, [r7, #4]
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	4618      	mov	r0, r3
 80050c2:	f000 f93b 	bl	800533c <_ZSt3getILj0EJP19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>
 80050c6:	4603      	mov	r3, r0
 80050c8:	4618      	mov	r0, r3
 80050ca:	3708      	adds	r7, #8
 80050cc:	46bd      	mov	sp, r7
 80050ce:	bd80      	pop	{r7, pc}

080050d0 <_ZNSt10unique_ptrI19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE11get_deleterEv>:
      get_deleter() noexcept
 80050d0:	b580      	push	{r7, lr}
 80050d2:	b082      	sub	sp, #8
 80050d4:	af00      	add	r7, sp, #0
 80050d6:	6078      	str	r0, [r7, #4]
      { return _M_t._M_deleter(); }
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	4618      	mov	r0, r3
 80050dc:	f000 f93b 	bl	8005356 <_ZNSt15__uniq_ptr_implI19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE10_M_deleterEv>
 80050e0:	4603      	mov	r3, r0
 80050e2:	4618      	mov	r0, r3
 80050e4:	3708      	adds	r7, #8
 80050e6:	46bd      	mov	sp, r7
 80050e8:	bd80      	pop	{r7, pc}

080050ea <_ZSt4moveIRP19TfLiteSoftmaxParamsEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
 80050ea:	b480      	push	{r7}
 80050ec:	b083      	sub	sp, #12
 80050ee:	af00      	add	r7, sp, #0
 80050f0:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	4618      	mov	r0, r3
 80050f6:	370c      	adds	r7, #12
 80050f8:	46bd      	mov	sp, r7
 80050fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050fe:	4770      	bx	lr

08005100 <_ZNSt15__uniq_ptr_implI19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC1IS4_EEPS0_OT_>:
      __uniq_ptr_impl(pointer __p, _Del&& __d)
 8005100:	b590      	push	{r4, r7, lr}
 8005102:	b085      	sub	sp, #20
 8005104:	af00      	add	r7, sp, #0
 8005106:	60f8      	str	r0, [r7, #12]
 8005108:	60b9      	str	r1, [r7, #8]
 800510a:	607a      	str	r2, [r7, #4]
	: _M_t(__p, std::forward<_Del>(__d)) { }
 800510c:	68fc      	ldr	r4, [r7, #12]
 800510e:	6878      	ldr	r0, [r7, #4]
 8005110:	f7ff fdf7 	bl	8004d02 <_ZSt7forwardIN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEOT_RNSt16remove_referenceIS4_E4typeE>
 8005114:	4602      	mov	r2, r0
 8005116:	f107 0308 	add.w	r3, r7, #8
 800511a:	4619      	mov	r1, r3
 800511c:	4620      	mov	r0, r4
 800511e:	f000 f927 	bl	8005370 <_ZNSt5tupleIJP19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC1IRS1_S5_Lb1EEEOT_OT0_>
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	4618      	mov	r0, r3
 8005126:	3714      	adds	r7, #20
 8005128:	46bd      	mov	sp, r7
 800512a:	bd90      	pop	{r4, r7, pc}

0800512c <_ZNKSt10unique_ptrI19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEcvbEv>:
      explicit operator bool() const noexcept
 800512c:	b580      	push	{r7, lr}
 800512e:	b082      	sub	sp, #8
 8005130:	af00      	add	r7, sp, #0
 8005132:	6078      	str	r0, [r7, #4]
      { return get() == pointer() ? false : true; }
 8005134:	6878      	ldr	r0, [r7, #4]
 8005136:	f000 f80a 	bl	800514e <_ZNKSt10unique_ptrI19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE3getEv>
 800513a:	4603      	mov	r3, r0
 800513c:	2b00      	cmp	r3, #0
 800513e:	bf14      	ite	ne
 8005140:	2301      	movne	r3, #1
 8005142:	2300      	moveq	r3, #0
 8005144:	b2db      	uxtb	r3, r3
 8005146:	4618      	mov	r0, r3
 8005148:	3708      	adds	r7, #8
 800514a:	46bd      	mov	sp, r7
 800514c:	bd80      	pop	{r7, pc}

0800514e <_ZNKSt10unique_ptrI19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE3getEv>:
      get() const noexcept
 800514e:	b580      	push	{r7, lr}
 8005150:	b082      	sub	sp, #8
 8005152:	af00      	add	r7, sp, #0
 8005154:	6078      	str	r0, [r7, #4]
      { return _M_t._M_ptr(); }
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	4618      	mov	r0, r3
 800515a:	f000 f922 	bl	80053a2 <_ZNKSt15__uniq_ptr_implI19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>
 800515e:	4603      	mov	r3, r0
 8005160:	4618      	mov	r0, r3
 8005162:	3708      	adds	r7, #8
 8005164:	46bd      	mov	sp, r7
 8005166:	bd80      	pop	{r7, pc}

08005168 <_ZN11flatbuffers12EndianScalarIaEET_S1_>:
template<typename T> T EndianScalar(T t) {
 8005168:	b480      	push	{r7}
 800516a:	b083      	sub	sp, #12
 800516c:	af00      	add	r7, sp, #0
 800516e:	4603      	mov	r3, r0
 8005170:	71fb      	strb	r3, [r7, #7]
    return t;
 8005172:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 8005176:	4618      	mov	r0, r3
 8005178:	370c      	adds	r7, #12
 800517a:	46bd      	mov	sp, r7
 800517c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005180:	4770      	bx	lr

08005182 <_ZN11flatbuffers12EndianScalarIfEET_S1_>:
template<typename T> T EndianScalar(T t) {
 8005182:	b480      	push	{r7}
 8005184:	b083      	sub	sp, #12
 8005186:	af00      	add	r7, sp, #0
 8005188:	ed87 0a01 	vstr	s0, [r7, #4]
    return t;
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	ee07 3a90 	vmov	s15, r3
}
 8005192:	eeb0 0a67 	vmov.f32	s0, s15
 8005196:	370c      	adds	r7, #12
 8005198:	46bd      	mov	sp, r7
 800519a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800519e:	4770      	bx	lr

080051a0 <_ZSt4moveIRN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEONSt16remove_referenceIT_E4typeEOS6_>:
    move(_Tp&& __t) noexcept
 80051a0:	b480      	push	{r7}
 80051a2:	b083      	sub	sp, #12
 80051a4:	af00      	add	r7, sp, #0
 80051a6:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	4618      	mov	r0, r3
 80051ac:	370c      	adds	r7, #12
 80051ae:	46bd      	mov	sp, r7
 80051b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b4:	4770      	bx	lr

080051b6 <_ZSt3getILj0EJP25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>:
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }

  /// Return a reference to the ith element of a tuple.
  template<std::size_t __i, typename... _Elements>
    constexpr __tuple_element_t<__i, tuple<_Elements...>>&
    get(tuple<_Elements...>& __t) noexcept
 80051b6:	b580      	push	{r7, lr}
 80051b8:	b082      	sub	sp, #8
 80051ba:	af00      	add	r7, sp, #0
 80051bc:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	4618      	mov	r0, r3
 80051c2:	f000 f8fc 	bl	80053be <_ZSt12__get_helperILj0EP25TfLiteDepthwiseConvParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERT0_RSt11_Tuple_implIXT_EJS6_DpT1_EE>
 80051c6:	4603      	mov	r3, r0
 80051c8:	4618      	mov	r0, r3
 80051ca:	3708      	adds	r7, #8
 80051cc:	46bd      	mov	sp, r7
 80051ce:	bd80      	pop	{r7, pc}

080051d0 <_ZNSt15__uniq_ptr_implI25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE10_M_deleterEv>:
      _Dp&       _M_deleter() { return std::get<1>(_M_t); }
 80051d0:	b580      	push	{r7, lr}
 80051d2:	b082      	sub	sp, #8
 80051d4:	af00      	add	r7, sp, #0
 80051d6:	6078      	str	r0, [r7, #4]
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	4618      	mov	r0, r3
 80051dc:	f000 f8fb 	bl	80053d6 <_ZSt3getILj1EJP25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>
 80051e0:	4603      	mov	r3, r0
 80051e2:	4618      	mov	r0, r3
 80051e4:	3708      	adds	r7, #8
 80051e6:	46bd      	mov	sp, r7
 80051e8:	bd80      	pop	{r7, pc}

080051ea <_ZNSt5tupleIJP25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC1IRS1_S5_Lb1EEEOT_OT0_>:
        constexpr tuple(_U1&& __a1, _U2&& __a2)
 80051ea:	b5b0      	push	{r4, r5, r7, lr}
 80051ec:	b084      	sub	sp, #16
 80051ee:	af00      	add	r7, sp, #0
 80051f0:	60f8      	str	r0, [r7, #12]
 80051f2:	60b9      	str	r1, [r7, #8]
 80051f4:	607a      	str	r2, [r7, #4]
	: _Inherited(std::forward<_U1>(__a1), std::forward<_U2>(__a2)) { }
 80051f6:	68fc      	ldr	r4, [r7, #12]
 80051f8:	68b8      	ldr	r0, [r7, #8]
 80051fa:	f000 f8f9 	bl	80053f0 <_ZSt7forwardIRP25TfLiteDepthwiseConvParamsEOT_RNSt16remove_referenceIS3_E4typeE>
 80051fe:	4605      	mov	r5, r0
 8005200:	6878      	ldr	r0, [r7, #4]
 8005202:	f7ff fd7e 	bl	8004d02 <_ZSt7forwardIN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEOT_RNSt16remove_referenceIS4_E4typeE>
 8005206:	4603      	mov	r3, r0
 8005208:	461a      	mov	r2, r3
 800520a:	4629      	mov	r1, r5
 800520c:	4620      	mov	r0, r4
 800520e:	f000 f8fa 	bl	8005406 <_ZNSt11_Tuple_implILj0EJP25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC2IRS1_JS5_EvEEOT_DpOT0_>
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	4618      	mov	r0, r3
 8005216:	3710      	adds	r7, #16
 8005218:	46bd      	mov	sp, r7
 800521a:	bdb0      	pop	{r4, r5, r7, pc}

0800521c <_ZNKSt15__uniq_ptr_implI25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>:
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
 800521c:	b580      	push	{r7, lr}
 800521e:	b082      	sub	sp, #8
 8005220:	af00      	add	r7, sp, #0
 8005222:	6078      	str	r0, [r7, #4]
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	4618      	mov	r0, r3
 8005228:	f000 f90b 	bl	8005442 <_ZSt3getILj0EJP25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKSA_>
 800522c:	4603      	mov	r3, r0
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	4618      	mov	r0, r3
 8005232:	3708      	adds	r7, #8
 8005234:	46bd      	mov	sp, r7
 8005236:	bd80      	pop	{r7, pc}

08005238 <_ZSt3getILj0EJP26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>:
    get(tuple<_Elements...>& __t) noexcept
 8005238:	b580      	push	{r7, lr}
 800523a:	b082      	sub	sp, #8
 800523c:	af00      	add	r7, sp, #0
 800523e:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	4618      	mov	r0, r3
 8005244:	f000 f90a 	bl	800545c <_ZSt12__get_helperILj0EP26TfLiteFullyConnectedParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERT0_RSt11_Tuple_implIXT_EJS6_DpT1_EE>
 8005248:	4603      	mov	r3, r0
 800524a:	4618      	mov	r0, r3
 800524c:	3708      	adds	r7, #8
 800524e:	46bd      	mov	sp, r7
 8005250:	bd80      	pop	{r7, pc}

08005252 <_ZNSt15__uniq_ptr_implI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE10_M_deleterEv>:
      _Dp&       _M_deleter() { return std::get<1>(_M_t); }
 8005252:	b580      	push	{r7, lr}
 8005254:	b082      	sub	sp, #8
 8005256:	af00      	add	r7, sp, #0
 8005258:	6078      	str	r0, [r7, #4]
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	4618      	mov	r0, r3
 800525e:	f000 f909 	bl	8005474 <_ZSt3getILj1EJP26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>
 8005262:	4603      	mov	r3, r0
 8005264:	4618      	mov	r0, r3
 8005266:	3708      	adds	r7, #8
 8005268:	46bd      	mov	sp, r7
 800526a:	bd80      	pop	{r7, pc}

0800526c <_ZNSt5tupleIJP26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC1IRS1_S5_Lb1EEEOT_OT0_>:
        constexpr tuple(_U1&& __a1, _U2&& __a2)
 800526c:	b5b0      	push	{r4, r5, r7, lr}
 800526e:	b084      	sub	sp, #16
 8005270:	af00      	add	r7, sp, #0
 8005272:	60f8      	str	r0, [r7, #12]
 8005274:	60b9      	str	r1, [r7, #8]
 8005276:	607a      	str	r2, [r7, #4]
	: _Inherited(std::forward<_U1>(__a1), std::forward<_U2>(__a2)) { }
 8005278:	68fc      	ldr	r4, [r7, #12]
 800527a:	68b8      	ldr	r0, [r7, #8]
 800527c:	f000 f907 	bl	800548e <_ZSt7forwardIRP26TfLiteFullyConnectedParamsEOT_RNSt16remove_referenceIS3_E4typeE>
 8005280:	4605      	mov	r5, r0
 8005282:	6878      	ldr	r0, [r7, #4]
 8005284:	f7ff fd3d 	bl	8004d02 <_ZSt7forwardIN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEOT_RNSt16remove_referenceIS4_E4typeE>
 8005288:	4603      	mov	r3, r0
 800528a:	461a      	mov	r2, r3
 800528c:	4629      	mov	r1, r5
 800528e:	4620      	mov	r0, r4
 8005290:	f000 f908 	bl	80054a4 <_ZNSt11_Tuple_implILj0EJP26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC2IRS1_JS5_EvEEOT_DpOT0_>
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	4618      	mov	r0, r3
 8005298:	3710      	adds	r7, #16
 800529a:	46bd      	mov	sp, r7
 800529c:	bdb0      	pop	{r4, r5, r7, pc}

0800529e <_ZNKSt15__uniq_ptr_implI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>:
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
 800529e:	b580      	push	{r7, lr}
 80052a0:	b082      	sub	sp, #8
 80052a2:	af00      	add	r7, sp, #0
 80052a4:	6078      	str	r0, [r7, #4]
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	4618      	mov	r0, r3
 80052aa:	f000 f919 	bl	80054e0 <_ZSt3getILj0EJP26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKSA_>
 80052ae:	4603      	mov	r3, r0
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	4618      	mov	r0, r3
 80052b4:	3708      	adds	r7, #8
 80052b6:	46bd      	mov	sp, r7
 80052b8:	bd80      	pop	{r7, pc}

080052ba <_ZSt3getILj0EJP19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>:
    get(tuple<_Elements...>& __t) noexcept
 80052ba:	b580      	push	{r7, lr}
 80052bc:	b082      	sub	sp, #8
 80052be:	af00      	add	r7, sp, #0
 80052c0:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	4618      	mov	r0, r3
 80052c6:	f000 f918 	bl	80054fa <_ZSt12__get_helperILj0EP19TfLiteReshapeParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERT0_RSt11_Tuple_implIXT_EJS6_DpT1_EE>
 80052ca:	4603      	mov	r3, r0
 80052cc:	4618      	mov	r0, r3
 80052ce:	3708      	adds	r7, #8
 80052d0:	46bd      	mov	sp, r7
 80052d2:	bd80      	pop	{r7, pc}

080052d4 <_ZNSt15__uniq_ptr_implI19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE10_M_deleterEv>:
      _Dp&       _M_deleter() { return std::get<1>(_M_t); }
 80052d4:	b580      	push	{r7, lr}
 80052d6:	b082      	sub	sp, #8
 80052d8:	af00      	add	r7, sp, #0
 80052da:	6078      	str	r0, [r7, #4]
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	4618      	mov	r0, r3
 80052e0:	f000 f917 	bl	8005512 <_ZSt3getILj1EJP19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>
 80052e4:	4603      	mov	r3, r0
 80052e6:	4618      	mov	r0, r3
 80052e8:	3708      	adds	r7, #8
 80052ea:	46bd      	mov	sp, r7
 80052ec:	bd80      	pop	{r7, pc}

080052ee <_ZNSt5tupleIJP19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC1IRS1_S5_Lb1EEEOT_OT0_>:
        constexpr tuple(_U1&& __a1, _U2&& __a2)
 80052ee:	b5b0      	push	{r4, r5, r7, lr}
 80052f0:	b084      	sub	sp, #16
 80052f2:	af00      	add	r7, sp, #0
 80052f4:	60f8      	str	r0, [r7, #12]
 80052f6:	60b9      	str	r1, [r7, #8]
 80052f8:	607a      	str	r2, [r7, #4]
	: _Inherited(std::forward<_U1>(__a1), std::forward<_U2>(__a2)) { }
 80052fa:	68fc      	ldr	r4, [r7, #12]
 80052fc:	68b8      	ldr	r0, [r7, #8]
 80052fe:	f000 f915 	bl	800552c <_ZSt7forwardIRP19TfLiteReshapeParamsEOT_RNSt16remove_referenceIS3_E4typeE>
 8005302:	4605      	mov	r5, r0
 8005304:	6878      	ldr	r0, [r7, #4]
 8005306:	f7ff fcfc 	bl	8004d02 <_ZSt7forwardIN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEOT_RNSt16remove_referenceIS4_E4typeE>
 800530a:	4603      	mov	r3, r0
 800530c:	461a      	mov	r2, r3
 800530e:	4629      	mov	r1, r5
 8005310:	4620      	mov	r0, r4
 8005312:	f000 f916 	bl	8005542 <_ZNSt11_Tuple_implILj0EJP19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC2IRS1_JS5_EvEEOT_DpOT0_>
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	4618      	mov	r0, r3
 800531a:	3710      	adds	r7, #16
 800531c:	46bd      	mov	sp, r7
 800531e:	bdb0      	pop	{r4, r5, r7, pc}

08005320 <_ZNKSt15__uniq_ptr_implI19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>:
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
 8005320:	b580      	push	{r7, lr}
 8005322:	b082      	sub	sp, #8
 8005324:	af00      	add	r7, sp, #0
 8005326:	6078      	str	r0, [r7, #4]
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	4618      	mov	r0, r3
 800532c:	f000 f927 	bl	800557e <_ZSt3getILj0EJP19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKSA_>
 8005330:	4603      	mov	r3, r0
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	4618      	mov	r0, r3
 8005336:	3708      	adds	r7, #8
 8005338:	46bd      	mov	sp, r7
 800533a:	bd80      	pop	{r7, pc}

0800533c <_ZSt3getILj0EJP19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>:
    get(tuple<_Elements...>& __t) noexcept
 800533c:	b580      	push	{r7, lr}
 800533e:	b082      	sub	sp, #8
 8005340:	af00      	add	r7, sp, #0
 8005342:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	4618      	mov	r0, r3
 8005348:	f000 f926 	bl	8005598 <_ZSt12__get_helperILj0EP19TfLiteSoftmaxParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERT0_RSt11_Tuple_implIXT_EJS6_DpT1_EE>
 800534c:	4603      	mov	r3, r0
 800534e:	4618      	mov	r0, r3
 8005350:	3708      	adds	r7, #8
 8005352:	46bd      	mov	sp, r7
 8005354:	bd80      	pop	{r7, pc}

08005356 <_ZNSt15__uniq_ptr_implI19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE10_M_deleterEv>:
      _Dp&       _M_deleter() { return std::get<1>(_M_t); }
 8005356:	b580      	push	{r7, lr}
 8005358:	b082      	sub	sp, #8
 800535a:	af00      	add	r7, sp, #0
 800535c:	6078      	str	r0, [r7, #4]
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	4618      	mov	r0, r3
 8005362:	f000 f925 	bl	80055b0 <_ZSt3getILj1EJP19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>
 8005366:	4603      	mov	r3, r0
 8005368:	4618      	mov	r0, r3
 800536a:	3708      	adds	r7, #8
 800536c:	46bd      	mov	sp, r7
 800536e:	bd80      	pop	{r7, pc}

08005370 <_ZNSt5tupleIJP19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC1IRS1_S5_Lb1EEEOT_OT0_>:
        constexpr tuple(_U1&& __a1, _U2&& __a2)
 8005370:	b5b0      	push	{r4, r5, r7, lr}
 8005372:	b084      	sub	sp, #16
 8005374:	af00      	add	r7, sp, #0
 8005376:	60f8      	str	r0, [r7, #12]
 8005378:	60b9      	str	r1, [r7, #8]
 800537a:	607a      	str	r2, [r7, #4]
	: _Inherited(std::forward<_U1>(__a1), std::forward<_U2>(__a2)) { }
 800537c:	68fc      	ldr	r4, [r7, #12]
 800537e:	68b8      	ldr	r0, [r7, #8]
 8005380:	f000 f923 	bl	80055ca <_ZSt7forwardIRP19TfLiteSoftmaxParamsEOT_RNSt16remove_referenceIS3_E4typeE>
 8005384:	4605      	mov	r5, r0
 8005386:	6878      	ldr	r0, [r7, #4]
 8005388:	f7ff fcbb 	bl	8004d02 <_ZSt7forwardIN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEOT_RNSt16remove_referenceIS4_E4typeE>
 800538c:	4603      	mov	r3, r0
 800538e:	461a      	mov	r2, r3
 8005390:	4629      	mov	r1, r5
 8005392:	4620      	mov	r0, r4
 8005394:	f000 f924 	bl	80055e0 <_ZNSt11_Tuple_implILj0EJP19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC2IRS1_JS5_EvEEOT_DpOT0_>
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	4618      	mov	r0, r3
 800539c:	3710      	adds	r7, #16
 800539e:	46bd      	mov	sp, r7
 80053a0:	bdb0      	pop	{r4, r5, r7, pc}

080053a2 <_ZNKSt15__uniq_ptr_implI19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>:
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
 80053a2:	b580      	push	{r7, lr}
 80053a4:	b082      	sub	sp, #8
 80053a6:	af00      	add	r7, sp, #0
 80053a8:	6078      	str	r0, [r7, #4]
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	4618      	mov	r0, r3
 80053ae:	f000 f935 	bl	800561c <_ZSt3getILj0EJP19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKSA_>
 80053b2:	4603      	mov	r3, r0
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	4618      	mov	r0, r3
 80053b8:	3708      	adds	r7, #8
 80053ba:	46bd      	mov	sp, r7
 80053bc:	bd80      	pop	{r7, pc}

080053be <_ZSt12__get_helperILj0EP25TfLiteDepthwiseConvParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERT0_RSt11_Tuple_implIXT_EJS6_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 80053be:	b580      	push	{r7, lr}
 80053c0:	b082      	sub	sp, #8
 80053c2:	af00      	add	r7, sp, #0
 80053c4:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 80053c6:	6878      	ldr	r0, [r7, #4]
 80053c8:	f000 f954 	bl	8005674 <_ZNSt11_Tuple_implILj0EJP25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERS6_>
 80053cc:	4603      	mov	r3, r0
 80053ce:	4618      	mov	r0, r3
 80053d0:	3708      	adds	r7, #8
 80053d2:	46bd      	mov	sp, r7
 80053d4:	bd80      	pop	{r7, pc}

080053d6 <_ZSt3getILj1EJP25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>:
    get(tuple<_Elements...>& __t) noexcept
 80053d6:	b580      	push	{r7, lr}
 80053d8:	b082      	sub	sp, #8
 80053da:	af00      	add	r7, sp, #0
 80053dc:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	4618      	mov	r0, r3
 80053e2:	f000 f928 	bl	8005636 <_ZSt12__get_helperILj1EN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEJEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>
 80053e6:	4603      	mov	r3, r0
 80053e8:	4618      	mov	r0, r3
 80053ea:	3708      	adds	r7, #8
 80053ec:	46bd      	mov	sp, r7
 80053ee:	bd80      	pop	{r7, pc}

080053f0 <_ZSt7forwardIRP25TfLiteDepthwiseConvParamsEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80053f0:	b480      	push	{r7}
 80053f2:	b083      	sub	sp, #12
 80053f4:	af00      	add	r7, sp, #0
 80053f6:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	4618      	mov	r0, r3
 80053fc:	370c      	adds	r7, #12
 80053fe:	46bd      	mov	sp, r7
 8005400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005404:	4770      	bx	lr

08005406 <_ZNSt11_Tuple_implILj0EJP25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC2IRS1_JS5_EvEEOT_DpOT0_>:
        constexpr _Tuple_impl(_UHead&& __head, _UTail&&... __tail)
 8005406:	b590      	push	{r4, r7, lr}
 8005408:	b085      	sub	sp, #20
 800540a:	af00      	add	r7, sp, #0
 800540c:	60f8      	str	r0, [r7, #12]
 800540e:	60b9      	str	r1, [r7, #8]
 8005410:	607a      	str	r2, [r7, #4]
	  _Base(std::forward<_UHead>(__head)) { }
 8005412:	68fc      	ldr	r4, [r7, #12]
 8005414:	6878      	ldr	r0, [r7, #4]
 8005416:	f7ff fc74 	bl	8004d02 <_ZSt7forwardIN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEOT_RNSt16remove_referenceIS4_E4typeE>
 800541a:	4603      	mov	r3, r0
 800541c:	4619      	mov	r1, r3
 800541e:	4620      	mov	r0, r4
 8005420:	f000 f915 	bl	800564e <_ZNSt11_Tuple_implILj1EJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC2IS3_EEOT_>
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	1d1c      	adds	r4, r3, #4
 8005428:	68b8      	ldr	r0, [r7, #8]
 800542a:	f7ff ffe1 	bl	80053f0 <_ZSt7forwardIRP25TfLiteDepthwiseConvParamsEOT_RNSt16remove_referenceIS3_E4typeE>
 800542e:	4603      	mov	r3, r0
 8005430:	4619      	mov	r1, r3
 8005432:	4620      	mov	r0, r4
 8005434:	f000 f92c 	bl	8005690 <_ZNSt10_Head_baseILj0EP25TfLiteDepthwiseConvParamsLb0EEC1IRS1_EEOT_>
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	4618      	mov	r0, r3
 800543c:	3714      	adds	r7, #20
 800543e:	46bd      	mov	sp, r7
 8005440:	bd90      	pop	{r4, r7, pc}

08005442 <_ZSt3getILj0EJP25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKSA_>:

  /// Return a const reference to the ith element of a const tuple.
  template<std::size_t __i, typename... _Elements>
    constexpr const __tuple_element_t<__i, tuple<_Elements...>>&
    get(const tuple<_Elements...>& __t) noexcept
 8005442:	b580      	push	{r7, lr}
 8005444:	b082      	sub	sp, #8
 8005446:	af00      	add	r7, sp, #0
 8005448:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	4618      	mov	r0, r3
 800544e:	f000 f930 	bl	80056b2 <_ZSt12__get_helperILj0EP25TfLiteDepthwiseConvParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKT0_RKSt11_Tuple_implIXT_EJS6_DpT1_EE>
 8005452:	4603      	mov	r3, r0
 8005454:	4618      	mov	r0, r3
 8005456:	3708      	adds	r7, #8
 8005458:	46bd      	mov	sp, r7
 800545a:	bd80      	pop	{r7, pc}

0800545c <_ZSt12__get_helperILj0EP26TfLiteFullyConnectedParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERT0_RSt11_Tuple_implIXT_EJS6_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 800545c:	b580      	push	{r7, lr}
 800545e:	b082      	sub	sp, #8
 8005460:	af00      	add	r7, sp, #0
 8005462:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8005464:	6878      	ldr	r0, [r7, #4]
 8005466:	f000 f930 	bl	80056ca <_ZNSt11_Tuple_implILj0EJP26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERS6_>
 800546a:	4603      	mov	r3, r0
 800546c:	4618      	mov	r0, r3
 800546e:	3708      	adds	r7, #8
 8005470:	46bd      	mov	sp, r7
 8005472:	bd80      	pop	{r7, pc}

08005474 <_ZSt3getILj1EJP26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>:
    get(tuple<_Elements...>& __t) noexcept
 8005474:	b580      	push	{r7, lr}
 8005476:	b082      	sub	sp, #8
 8005478:	af00      	add	r7, sp, #0
 800547a:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	4618      	mov	r0, r3
 8005480:	f000 f8d9 	bl	8005636 <_ZSt12__get_helperILj1EN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEJEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>
 8005484:	4603      	mov	r3, r0
 8005486:	4618      	mov	r0, r3
 8005488:	3708      	adds	r7, #8
 800548a:	46bd      	mov	sp, r7
 800548c:	bd80      	pop	{r7, pc}

0800548e <_ZSt7forwardIRP26TfLiteFullyConnectedParamsEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800548e:	b480      	push	{r7}
 8005490:	b083      	sub	sp, #12
 8005492:	af00      	add	r7, sp, #0
 8005494:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	4618      	mov	r0, r3
 800549a:	370c      	adds	r7, #12
 800549c:	46bd      	mov	sp, r7
 800549e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a2:	4770      	bx	lr

080054a4 <_ZNSt11_Tuple_implILj0EJP26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC2IRS1_JS5_EvEEOT_DpOT0_>:
        constexpr _Tuple_impl(_UHead&& __head, _UTail&&... __tail)
 80054a4:	b590      	push	{r4, r7, lr}
 80054a6:	b085      	sub	sp, #20
 80054a8:	af00      	add	r7, sp, #0
 80054aa:	60f8      	str	r0, [r7, #12]
 80054ac:	60b9      	str	r1, [r7, #8]
 80054ae:	607a      	str	r2, [r7, #4]
	  _Base(std::forward<_UHead>(__head)) { }
 80054b0:	68fc      	ldr	r4, [r7, #12]
 80054b2:	6878      	ldr	r0, [r7, #4]
 80054b4:	f7ff fc25 	bl	8004d02 <_ZSt7forwardIN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEOT_RNSt16remove_referenceIS4_E4typeE>
 80054b8:	4603      	mov	r3, r0
 80054ba:	4619      	mov	r1, r3
 80054bc:	4620      	mov	r0, r4
 80054be:	f000 f8c6 	bl	800564e <_ZNSt11_Tuple_implILj1EJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC2IS3_EEOT_>
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	1d1c      	adds	r4, r3, #4
 80054c6:	68b8      	ldr	r0, [r7, #8]
 80054c8:	f7ff ffe1 	bl	800548e <_ZSt7forwardIRP26TfLiteFullyConnectedParamsEOT_RNSt16remove_referenceIS3_E4typeE>
 80054cc:	4603      	mov	r3, r0
 80054ce:	4619      	mov	r1, r3
 80054d0:	4620      	mov	r0, r4
 80054d2:	f000 f908 	bl	80056e6 <_ZNSt10_Head_baseILj0EP26TfLiteFullyConnectedParamsLb0EEC1IRS1_EEOT_>
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	4618      	mov	r0, r3
 80054da:	3714      	adds	r7, #20
 80054dc:	46bd      	mov	sp, r7
 80054de:	bd90      	pop	{r4, r7, pc}

080054e0 <_ZSt3getILj0EJP26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKSA_>:
    get(const tuple<_Elements...>& __t) noexcept
 80054e0:	b580      	push	{r7, lr}
 80054e2:	b082      	sub	sp, #8
 80054e4:	af00      	add	r7, sp, #0
 80054e6:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	4618      	mov	r0, r3
 80054ec:	f000 f90c 	bl	8005708 <_ZSt12__get_helperILj0EP26TfLiteFullyConnectedParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKT0_RKSt11_Tuple_implIXT_EJS6_DpT1_EE>
 80054f0:	4603      	mov	r3, r0
 80054f2:	4618      	mov	r0, r3
 80054f4:	3708      	adds	r7, #8
 80054f6:	46bd      	mov	sp, r7
 80054f8:	bd80      	pop	{r7, pc}

080054fa <_ZSt12__get_helperILj0EP19TfLiteReshapeParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERT0_RSt11_Tuple_implIXT_EJS6_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 80054fa:	b580      	push	{r7, lr}
 80054fc:	b082      	sub	sp, #8
 80054fe:	af00      	add	r7, sp, #0
 8005500:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8005502:	6878      	ldr	r0, [r7, #4]
 8005504:	f000 f90c 	bl	8005720 <_ZNSt11_Tuple_implILj0EJP19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERS6_>
 8005508:	4603      	mov	r3, r0
 800550a:	4618      	mov	r0, r3
 800550c:	3708      	adds	r7, #8
 800550e:	46bd      	mov	sp, r7
 8005510:	bd80      	pop	{r7, pc}

08005512 <_ZSt3getILj1EJP19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>:
    get(tuple<_Elements...>& __t) noexcept
 8005512:	b580      	push	{r7, lr}
 8005514:	b082      	sub	sp, #8
 8005516:	af00      	add	r7, sp, #0
 8005518:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	4618      	mov	r0, r3
 800551e:	f000 f88a 	bl	8005636 <_ZSt12__get_helperILj1EN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEJEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>
 8005522:	4603      	mov	r3, r0
 8005524:	4618      	mov	r0, r3
 8005526:	3708      	adds	r7, #8
 8005528:	46bd      	mov	sp, r7
 800552a:	bd80      	pop	{r7, pc}

0800552c <_ZSt7forwardIRP19TfLiteReshapeParamsEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800552c:	b480      	push	{r7}
 800552e:	b083      	sub	sp, #12
 8005530:	af00      	add	r7, sp, #0
 8005532:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	4618      	mov	r0, r3
 8005538:	370c      	adds	r7, #12
 800553a:	46bd      	mov	sp, r7
 800553c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005540:	4770      	bx	lr

08005542 <_ZNSt11_Tuple_implILj0EJP19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC2IRS1_JS5_EvEEOT_DpOT0_>:
        constexpr _Tuple_impl(_UHead&& __head, _UTail&&... __tail)
 8005542:	b590      	push	{r4, r7, lr}
 8005544:	b085      	sub	sp, #20
 8005546:	af00      	add	r7, sp, #0
 8005548:	60f8      	str	r0, [r7, #12]
 800554a:	60b9      	str	r1, [r7, #8]
 800554c:	607a      	str	r2, [r7, #4]
	  _Base(std::forward<_UHead>(__head)) { }
 800554e:	68fc      	ldr	r4, [r7, #12]
 8005550:	6878      	ldr	r0, [r7, #4]
 8005552:	f7ff fbd6 	bl	8004d02 <_ZSt7forwardIN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEOT_RNSt16remove_referenceIS4_E4typeE>
 8005556:	4603      	mov	r3, r0
 8005558:	4619      	mov	r1, r3
 800555a:	4620      	mov	r0, r4
 800555c:	f000 f877 	bl	800564e <_ZNSt11_Tuple_implILj1EJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC2IS3_EEOT_>
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	1d1c      	adds	r4, r3, #4
 8005564:	68b8      	ldr	r0, [r7, #8]
 8005566:	f7ff ffe1 	bl	800552c <_ZSt7forwardIRP19TfLiteReshapeParamsEOT_RNSt16remove_referenceIS3_E4typeE>
 800556a:	4603      	mov	r3, r0
 800556c:	4619      	mov	r1, r3
 800556e:	4620      	mov	r0, r4
 8005570:	f000 f8e4 	bl	800573c <_ZNSt10_Head_baseILj0EP19TfLiteReshapeParamsLb0EEC1IRS1_EEOT_>
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	4618      	mov	r0, r3
 8005578:	3714      	adds	r7, #20
 800557a:	46bd      	mov	sp, r7
 800557c:	bd90      	pop	{r4, r7, pc}

0800557e <_ZSt3getILj0EJP19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKSA_>:
    get(const tuple<_Elements...>& __t) noexcept
 800557e:	b580      	push	{r7, lr}
 8005580:	b082      	sub	sp, #8
 8005582:	af00      	add	r7, sp, #0
 8005584:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	4618      	mov	r0, r3
 800558a:	f000 f8e8 	bl	800575e <_ZSt12__get_helperILj0EP19TfLiteReshapeParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKT0_RKSt11_Tuple_implIXT_EJS6_DpT1_EE>
 800558e:	4603      	mov	r3, r0
 8005590:	4618      	mov	r0, r3
 8005592:	3708      	adds	r7, #8
 8005594:	46bd      	mov	sp, r7
 8005596:	bd80      	pop	{r7, pc}

08005598 <_ZSt12__get_helperILj0EP19TfLiteSoftmaxParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERT0_RSt11_Tuple_implIXT_EJS6_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8005598:	b580      	push	{r7, lr}
 800559a:	b082      	sub	sp, #8
 800559c:	af00      	add	r7, sp, #0
 800559e:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 80055a0:	6878      	ldr	r0, [r7, #4]
 80055a2:	f000 f8e8 	bl	8005776 <_ZNSt11_Tuple_implILj0EJP19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERS6_>
 80055a6:	4603      	mov	r3, r0
 80055a8:	4618      	mov	r0, r3
 80055aa:	3708      	adds	r7, #8
 80055ac:	46bd      	mov	sp, r7
 80055ae:	bd80      	pop	{r7, pc}

080055b0 <_ZSt3getILj1EJP19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>:
    get(tuple<_Elements...>& __t) noexcept
 80055b0:	b580      	push	{r7, lr}
 80055b2:	b082      	sub	sp, #8
 80055b4:	af00      	add	r7, sp, #0
 80055b6:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	4618      	mov	r0, r3
 80055bc:	f000 f83b 	bl	8005636 <_ZSt12__get_helperILj1EN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEJEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>
 80055c0:	4603      	mov	r3, r0
 80055c2:	4618      	mov	r0, r3
 80055c4:	3708      	adds	r7, #8
 80055c6:	46bd      	mov	sp, r7
 80055c8:	bd80      	pop	{r7, pc}

080055ca <_ZSt7forwardIRP19TfLiteSoftmaxParamsEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80055ca:	b480      	push	{r7}
 80055cc:	b083      	sub	sp, #12
 80055ce:	af00      	add	r7, sp, #0
 80055d0:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	4618      	mov	r0, r3
 80055d6:	370c      	adds	r7, #12
 80055d8:	46bd      	mov	sp, r7
 80055da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055de:	4770      	bx	lr

080055e0 <_ZNSt11_Tuple_implILj0EJP19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC2IRS1_JS5_EvEEOT_DpOT0_>:
        constexpr _Tuple_impl(_UHead&& __head, _UTail&&... __tail)
 80055e0:	b590      	push	{r4, r7, lr}
 80055e2:	b085      	sub	sp, #20
 80055e4:	af00      	add	r7, sp, #0
 80055e6:	60f8      	str	r0, [r7, #12]
 80055e8:	60b9      	str	r1, [r7, #8]
 80055ea:	607a      	str	r2, [r7, #4]
	  _Base(std::forward<_UHead>(__head)) { }
 80055ec:	68fc      	ldr	r4, [r7, #12]
 80055ee:	6878      	ldr	r0, [r7, #4]
 80055f0:	f7ff fb87 	bl	8004d02 <_ZSt7forwardIN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEOT_RNSt16remove_referenceIS4_E4typeE>
 80055f4:	4603      	mov	r3, r0
 80055f6:	4619      	mov	r1, r3
 80055f8:	4620      	mov	r0, r4
 80055fa:	f000 f828 	bl	800564e <_ZNSt11_Tuple_implILj1EJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC2IS3_EEOT_>
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	1d1c      	adds	r4, r3, #4
 8005602:	68b8      	ldr	r0, [r7, #8]
 8005604:	f7ff ffe1 	bl	80055ca <_ZSt7forwardIRP19TfLiteSoftmaxParamsEOT_RNSt16remove_referenceIS3_E4typeE>
 8005608:	4603      	mov	r3, r0
 800560a:	4619      	mov	r1, r3
 800560c:	4620      	mov	r0, r4
 800560e:	f000 f8c0 	bl	8005792 <_ZNSt10_Head_baseILj0EP19TfLiteSoftmaxParamsLb0EEC1IRS1_EEOT_>
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	4618      	mov	r0, r3
 8005616:	3714      	adds	r7, #20
 8005618:	46bd      	mov	sp, r7
 800561a:	bd90      	pop	{r4, r7, pc}

0800561c <_ZSt3getILj0EJP19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKSA_>:
    get(const tuple<_Elements...>& __t) noexcept
 800561c:	b580      	push	{r7, lr}
 800561e:	b082      	sub	sp, #8
 8005620:	af00      	add	r7, sp, #0
 8005622:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	4618      	mov	r0, r3
 8005628:	f000 f8c4 	bl	80057b4 <_ZSt12__get_helperILj0EP19TfLiteSoftmaxParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKT0_RKSt11_Tuple_implIXT_EJS6_DpT1_EE>
 800562c:	4603      	mov	r3, r0
 800562e:	4618      	mov	r0, r3
 8005630:	3708      	adds	r7, #8
 8005632:	46bd      	mov	sp, r7
 8005634:	bd80      	pop	{r7, pc}

08005636 <_ZSt12__get_helperILj1EN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEJEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8005636:	b580      	push	{r7, lr}
 8005638:	b082      	sub	sp, #8
 800563a:	af00      	add	r7, sp, #0
 800563c:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 800563e:	6878      	ldr	r0, [r7, #4]
 8005640:	f000 f8c4 	bl	80057cc <_ZNSt11_Tuple_implILj1EJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERS4_>
 8005644:	4603      	mov	r3, r0
 8005646:	4618      	mov	r0, r3
 8005648:	3708      	adds	r7, #8
 800564a:	46bd      	mov	sp, r7
 800564c:	bd80      	pop	{r7, pc}

0800564e <_ZNSt11_Tuple_implILj1EJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC2IS3_EEOT_>:
        constexpr _Tuple_impl(_UHead&& __head)
 800564e:	b590      	push	{r4, r7, lr}
 8005650:	b083      	sub	sp, #12
 8005652:	af00      	add	r7, sp, #0
 8005654:	6078      	str	r0, [r7, #4]
 8005656:	6039      	str	r1, [r7, #0]
	: _Base(std::forward<_UHead>(__head)) { }
 8005658:	687c      	ldr	r4, [r7, #4]
 800565a:	6838      	ldr	r0, [r7, #0]
 800565c:	f7ff fb51 	bl	8004d02 <_ZSt7forwardIN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEOT_RNSt16remove_referenceIS4_E4typeE>
 8005660:	4603      	mov	r3, r0
 8005662:	4619      	mov	r1, r3
 8005664:	4620      	mov	r0, r4
 8005666:	f000 f8be 	bl	80057e6 <_ZNSt10_Head_baseILj1EN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterELb0EEC2IS3_EEOT_>
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	4618      	mov	r0, r3
 800566e:	370c      	adds	r7, #12
 8005670:	46bd      	mov	sp, r7
 8005672:	bd90      	pop	{r4, r7, pc}

08005674 <_ZNSt11_Tuple_implILj0EJP25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERS6_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8005674:	b580      	push	{r7, lr}
 8005676:	b082      	sub	sp, #8
 8005678:	af00      	add	r7, sp, #0
 800567a:	6078      	str	r0, [r7, #4]
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	3304      	adds	r3, #4
 8005680:	4618      	mov	r0, r3
 8005682:	f000 f8c1 	bl	8005808 <_ZNSt10_Head_baseILj0EP25TfLiteDepthwiseConvParamsLb0EE7_M_headERS2_>
 8005686:	4603      	mov	r3, r0
 8005688:	4618      	mov	r0, r3
 800568a:	3708      	adds	r7, #8
 800568c:	46bd      	mov	sp, r7
 800568e:	bd80      	pop	{r7, pc}

08005690 <_ZNSt10_Head_baseILj0EP25TfLiteDepthwiseConvParamsLb0EEC1IRS1_EEOT_>:
        constexpr _Head_base(_UHead&& __h)
 8005690:	b580      	push	{r7, lr}
 8005692:	b082      	sub	sp, #8
 8005694:	af00      	add	r7, sp, #0
 8005696:	6078      	str	r0, [r7, #4]
 8005698:	6039      	str	r1, [r7, #0]
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 800569a:	6838      	ldr	r0, [r7, #0]
 800569c:	f7ff fea8 	bl	80053f0 <_ZSt7forwardIRP25TfLiteDepthwiseConvParamsEOT_RNSt16remove_referenceIS3_E4typeE>
 80056a0:	4603      	mov	r3, r0
 80056a2:	681a      	ldr	r2, [r3, #0]
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	601a      	str	r2, [r3, #0]
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	4618      	mov	r0, r3
 80056ac:	3708      	adds	r7, #8
 80056ae:	46bd      	mov	sp, r7
 80056b0:	bd80      	pop	{r7, pc}

080056b2 <_ZSt12__get_helperILj0EP25TfLiteDepthwiseConvParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKT0_RKSt11_Tuple_implIXT_EJS6_DpT1_EE>:
    __get_helper(const _Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 80056b2:	b580      	push	{r7, lr}
 80056b4:	b082      	sub	sp, #8
 80056b6:	af00      	add	r7, sp, #0
 80056b8:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 80056ba:	6878      	ldr	r0, [r7, #4]
 80056bc:	f000 f8af 	bl	800581e <_ZNSt11_Tuple_implILj0EJP25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERKS6_>
 80056c0:	4603      	mov	r3, r0
 80056c2:	4618      	mov	r0, r3
 80056c4:	3708      	adds	r7, #8
 80056c6:	46bd      	mov	sp, r7
 80056c8:	bd80      	pop	{r7, pc}

080056ca <_ZNSt11_Tuple_implILj0EJP26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERS6_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 80056ca:	b580      	push	{r7, lr}
 80056cc:	b082      	sub	sp, #8
 80056ce:	af00      	add	r7, sp, #0
 80056d0:	6078      	str	r0, [r7, #4]
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	3304      	adds	r3, #4
 80056d6:	4618      	mov	r0, r3
 80056d8:	f000 f8af 	bl	800583a <_ZNSt10_Head_baseILj0EP26TfLiteFullyConnectedParamsLb0EE7_M_headERS2_>
 80056dc:	4603      	mov	r3, r0
 80056de:	4618      	mov	r0, r3
 80056e0:	3708      	adds	r7, #8
 80056e2:	46bd      	mov	sp, r7
 80056e4:	bd80      	pop	{r7, pc}

080056e6 <_ZNSt10_Head_baseILj0EP26TfLiteFullyConnectedParamsLb0EEC1IRS1_EEOT_>:
        constexpr _Head_base(_UHead&& __h)
 80056e6:	b580      	push	{r7, lr}
 80056e8:	b082      	sub	sp, #8
 80056ea:	af00      	add	r7, sp, #0
 80056ec:	6078      	str	r0, [r7, #4]
 80056ee:	6039      	str	r1, [r7, #0]
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 80056f0:	6838      	ldr	r0, [r7, #0]
 80056f2:	f7ff fecc 	bl	800548e <_ZSt7forwardIRP26TfLiteFullyConnectedParamsEOT_RNSt16remove_referenceIS3_E4typeE>
 80056f6:	4603      	mov	r3, r0
 80056f8:	681a      	ldr	r2, [r3, #0]
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	601a      	str	r2, [r3, #0]
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	4618      	mov	r0, r3
 8005702:	3708      	adds	r7, #8
 8005704:	46bd      	mov	sp, r7
 8005706:	bd80      	pop	{r7, pc}

08005708 <_ZSt12__get_helperILj0EP26TfLiteFullyConnectedParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKT0_RKSt11_Tuple_implIXT_EJS6_DpT1_EE>:
    __get_helper(const _Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8005708:	b580      	push	{r7, lr}
 800570a:	b082      	sub	sp, #8
 800570c:	af00      	add	r7, sp, #0
 800570e:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8005710:	6878      	ldr	r0, [r7, #4]
 8005712:	f000 f89d 	bl	8005850 <_ZNSt11_Tuple_implILj0EJP26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERKS6_>
 8005716:	4603      	mov	r3, r0
 8005718:	4618      	mov	r0, r3
 800571a:	3708      	adds	r7, #8
 800571c:	46bd      	mov	sp, r7
 800571e:	bd80      	pop	{r7, pc}

08005720 <_ZNSt11_Tuple_implILj0EJP19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERS6_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8005720:	b580      	push	{r7, lr}
 8005722:	b082      	sub	sp, #8
 8005724:	af00      	add	r7, sp, #0
 8005726:	6078      	str	r0, [r7, #4]
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	3304      	adds	r3, #4
 800572c:	4618      	mov	r0, r3
 800572e:	f000 f89d 	bl	800586c <_ZNSt10_Head_baseILj0EP19TfLiteReshapeParamsLb0EE7_M_headERS2_>
 8005732:	4603      	mov	r3, r0
 8005734:	4618      	mov	r0, r3
 8005736:	3708      	adds	r7, #8
 8005738:	46bd      	mov	sp, r7
 800573a:	bd80      	pop	{r7, pc}

0800573c <_ZNSt10_Head_baseILj0EP19TfLiteReshapeParamsLb0EEC1IRS1_EEOT_>:
        constexpr _Head_base(_UHead&& __h)
 800573c:	b580      	push	{r7, lr}
 800573e:	b082      	sub	sp, #8
 8005740:	af00      	add	r7, sp, #0
 8005742:	6078      	str	r0, [r7, #4]
 8005744:	6039      	str	r1, [r7, #0]
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 8005746:	6838      	ldr	r0, [r7, #0]
 8005748:	f7ff fef0 	bl	800552c <_ZSt7forwardIRP19TfLiteReshapeParamsEOT_RNSt16remove_referenceIS3_E4typeE>
 800574c:	4603      	mov	r3, r0
 800574e:	681a      	ldr	r2, [r3, #0]
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	601a      	str	r2, [r3, #0]
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	4618      	mov	r0, r3
 8005758:	3708      	adds	r7, #8
 800575a:	46bd      	mov	sp, r7
 800575c:	bd80      	pop	{r7, pc}

0800575e <_ZSt12__get_helperILj0EP19TfLiteReshapeParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKT0_RKSt11_Tuple_implIXT_EJS6_DpT1_EE>:
    __get_helper(const _Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 800575e:	b580      	push	{r7, lr}
 8005760:	b082      	sub	sp, #8
 8005762:	af00      	add	r7, sp, #0
 8005764:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8005766:	6878      	ldr	r0, [r7, #4]
 8005768:	f000 f88b 	bl	8005882 <_ZNSt11_Tuple_implILj0EJP19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERKS6_>
 800576c:	4603      	mov	r3, r0
 800576e:	4618      	mov	r0, r3
 8005770:	3708      	adds	r7, #8
 8005772:	46bd      	mov	sp, r7
 8005774:	bd80      	pop	{r7, pc}

08005776 <_ZNSt11_Tuple_implILj0EJP19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERS6_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8005776:	b580      	push	{r7, lr}
 8005778:	b082      	sub	sp, #8
 800577a:	af00      	add	r7, sp, #0
 800577c:	6078      	str	r0, [r7, #4]
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	3304      	adds	r3, #4
 8005782:	4618      	mov	r0, r3
 8005784:	f000 f88b 	bl	800589e <_ZNSt10_Head_baseILj0EP19TfLiteSoftmaxParamsLb0EE7_M_headERS2_>
 8005788:	4603      	mov	r3, r0
 800578a:	4618      	mov	r0, r3
 800578c:	3708      	adds	r7, #8
 800578e:	46bd      	mov	sp, r7
 8005790:	bd80      	pop	{r7, pc}

08005792 <_ZNSt10_Head_baseILj0EP19TfLiteSoftmaxParamsLb0EEC1IRS1_EEOT_>:
        constexpr _Head_base(_UHead&& __h)
 8005792:	b580      	push	{r7, lr}
 8005794:	b082      	sub	sp, #8
 8005796:	af00      	add	r7, sp, #0
 8005798:	6078      	str	r0, [r7, #4]
 800579a:	6039      	str	r1, [r7, #0]
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 800579c:	6838      	ldr	r0, [r7, #0]
 800579e:	f7ff ff14 	bl	80055ca <_ZSt7forwardIRP19TfLiteSoftmaxParamsEOT_RNSt16remove_referenceIS3_E4typeE>
 80057a2:	4603      	mov	r3, r0
 80057a4:	681a      	ldr	r2, [r3, #0]
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	601a      	str	r2, [r3, #0]
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	4618      	mov	r0, r3
 80057ae:	3708      	adds	r7, #8
 80057b0:	46bd      	mov	sp, r7
 80057b2:	bd80      	pop	{r7, pc}

080057b4 <_ZSt12__get_helperILj0EP19TfLiteSoftmaxParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKT0_RKSt11_Tuple_implIXT_EJS6_DpT1_EE>:
    __get_helper(const _Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 80057b4:	b580      	push	{r7, lr}
 80057b6:	b082      	sub	sp, #8
 80057b8:	af00      	add	r7, sp, #0
 80057ba:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 80057bc:	6878      	ldr	r0, [r7, #4]
 80057be:	f000 f879 	bl	80058b4 <_ZNSt11_Tuple_implILj0EJP19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERKS6_>
 80057c2:	4603      	mov	r3, r0
 80057c4:	4618      	mov	r0, r3
 80057c6:	3708      	adds	r7, #8
 80057c8:	46bd      	mov	sp, r7
 80057ca:	bd80      	pop	{r7, pc}

080057cc <_ZNSt11_Tuple_implILj1EJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERS4_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 80057cc:	b580      	push	{r7, lr}
 80057ce:	b082      	sub	sp, #8
 80057d0:	af00      	add	r7, sp, #0
 80057d2:	6078      	str	r0, [r7, #4]
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	4618      	mov	r0, r3
 80057d8:	f000 f87a 	bl	80058d0 <_ZNSt10_Head_baseILj1EN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterELb0EE7_M_headERS4_>
 80057dc:	4603      	mov	r3, r0
 80057de:	4618      	mov	r0, r3
 80057e0:	3708      	adds	r7, #8
 80057e2:	46bd      	mov	sp, r7
 80057e4:	bd80      	pop	{r7, pc}

080057e6 <_ZNSt10_Head_baseILj1EN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterELb0EEC2IS3_EEOT_>:
        constexpr _Head_base(_UHead&& __h)
 80057e6:	b580      	push	{r7, lr}
 80057e8:	b082      	sub	sp, #8
 80057ea:	af00      	add	r7, sp, #0
 80057ec:	6078      	str	r0, [r7, #4]
 80057ee:	6039      	str	r1, [r7, #0]
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 80057f0:	6838      	ldr	r0, [r7, #0]
 80057f2:	f7ff fa86 	bl	8004d02 <_ZSt7forwardIN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEOT_RNSt16remove_referenceIS4_E4typeE>
 80057f6:	4602      	mov	r2, r0
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	6812      	ldr	r2, [r2, #0]
 80057fc:	601a      	str	r2, [r3, #0]
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	4618      	mov	r0, r3
 8005802:	3708      	adds	r7, #8
 8005804:	46bd      	mov	sp, r7
 8005806:	bd80      	pop	{r7, pc}

08005808 <_ZNSt10_Head_baseILj0EP25TfLiteDepthwiseConvParamsLb0EE7_M_headERS2_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 8005808:	b480      	push	{r7}
 800580a:	b083      	sub	sp, #12
 800580c:	af00      	add	r7, sp, #0
 800580e:	6078      	str	r0, [r7, #4]
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	4618      	mov	r0, r3
 8005814:	370c      	adds	r7, #12
 8005816:	46bd      	mov	sp, r7
 8005818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800581c:	4770      	bx	lr

0800581e <_ZNSt11_Tuple_implILj0EJP25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERKS6_>:
      _M_head(const _Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 800581e:	b580      	push	{r7, lr}
 8005820:	b082      	sub	sp, #8
 8005822:	af00      	add	r7, sp, #0
 8005824:	6078      	str	r0, [r7, #4]
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	3304      	adds	r3, #4
 800582a:	4618      	mov	r0, r3
 800582c:	f000 f85b 	bl	80058e6 <_ZNSt10_Head_baseILj0EP25TfLiteDepthwiseConvParamsLb0EE7_M_headERKS2_>
 8005830:	4603      	mov	r3, r0
 8005832:	4618      	mov	r0, r3
 8005834:	3708      	adds	r7, #8
 8005836:	46bd      	mov	sp, r7
 8005838:	bd80      	pop	{r7, pc}

0800583a <_ZNSt10_Head_baseILj0EP26TfLiteFullyConnectedParamsLb0EE7_M_headERS2_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 800583a:	b480      	push	{r7}
 800583c:	b083      	sub	sp, #12
 800583e:	af00      	add	r7, sp, #0
 8005840:	6078      	str	r0, [r7, #4]
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	4618      	mov	r0, r3
 8005846:	370c      	adds	r7, #12
 8005848:	46bd      	mov	sp, r7
 800584a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800584e:	4770      	bx	lr

08005850 <_ZNSt11_Tuple_implILj0EJP26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERKS6_>:
      _M_head(const _Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8005850:	b580      	push	{r7, lr}
 8005852:	b082      	sub	sp, #8
 8005854:	af00      	add	r7, sp, #0
 8005856:	6078      	str	r0, [r7, #4]
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	3304      	adds	r3, #4
 800585c:	4618      	mov	r0, r3
 800585e:	f000 f84d 	bl	80058fc <_ZNSt10_Head_baseILj0EP26TfLiteFullyConnectedParamsLb0EE7_M_headERKS2_>
 8005862:	4603      	mov	r3, r0
 8005864:	4618      	mov	r0, r3
 8005866:	3708      	adds	r7, #8
 8005868:	46bd      	mov	sp, r7
 800586a:	bd80      	pop	{r7, pc}

0800586c <_ZNSt10_Head_baseILj0EP19TfLiteReshapeParamsLb0EE7_M_headERS2_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 800586c:	b480      	push	{r7}
 800586e:	b083      	sub	sp, #12
 8005870:	af00      	add	r7, sp, #0
 8005872:	6078      	str	r0, [r7, #4]
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	4618      	mov	r0, r3
 8005878:	370c      	adds	r7, #12
 800587a:	46bd      	mov	sp, r7
 800587c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005880:	4770      	bx	lr

08005882 <_ZNSt11_Tuple_implILj0EJP19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERKS6_>:
      _M_head(const _Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8005882:	b580      	push	{r7, lr}
 8005884:	b082      	sub	sp, #8
 8005886:	af00      	add	r7, sp, #0
 8005888:	6078      	str	r0, [r7, #4]
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	3304      	adds	r3, #4
 800588e:	4618      	mov	r0, r3
 8005890:	f000 f83f 	bl	8005912 <_ZNSt10_Head_baseILj0EP19TfLiteReshapeParamsLb0EE7_M_headERKS2_>
 8005894:	4603      	mov	r3, r0
 8005896:	4618      	mov	r0, r3
 8005898:	3708      	adds	r7, #8
 800589a:	46bd      	mov	sp, r7
 800589c:	bd80      	pop	{r7, pc}

0800589e <_ZNSt10_Head_baseILj0EP19TfLiteSoftmaxParamsLb0EE7_M_headERS2_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 800589e:	b480      	push	{r7}
 80058a0:	b083      	sub	sp, #12
 80058a2:	af00      	add	r7, sp, #0
 80058a4:	6078      	str	r0, [r7, #4]
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	4618      	mov	r0, r3
 80058aa:	370c      	adds	r7, #12
 80058ac:	46bd      	mov	sp, r7
 80058ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058b2:	4770      	bx	lr

080058b4 <_ZNSt11_Tuple_implILj0EJP19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERKS6_>:
      _M_head(const _Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 80058b4:	b580      	push	{r7, lr}
 80058b6:	b082      	sub	sp, #8
 80058b8:	af00      	add	r7, sp, #0
 80058ba:	6078      	str	r0, [r7, #4]
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	3304      	adds	r3, #4
 80058c0:	4618      	mov	r0, r3
 80058c2:	f000 f831 	bl	8005928 <_ZNSt10_Head_baseILj0EP19TfLiteSoftmaxParamsLb0EE7_M_headERKS2_>
 80058c6:	4603      	mov	r3, r0
 80058c8:	4618      	mov	r0, r3
 80058ca:	3708      	adds	r7, #8
 80058cc:	46bd      	mov	sp, r7
 80058ce:	bd80      	pop	{r7, pc}

080058d0 <_ZNSt10_Head_baseILj1EN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterELb0EE7_M_headERS4_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 80058d0:	b480      	push	{r7}
 80058d2:	b083      	sub	sp, #12
 80058d4:	af00      	add	r7, sp, #0
 80058d6:	6078      	str	r0, [r7, #4]
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	4618      	mov	r0, r3
 80058dc:	370c      	adds	r7, #12
 80058de:	46bd      	mov	sp, r7
 80058e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e4:	4770      	bx	lr

080058e6 <_ZNSt10_Head_baseILj0EP25TfLiteDepthwiseConvParamsLb0EE7_M_headERKS2_>:
      _M_head(const _Head_base& __b) noexcept { return __b._M_head_impl; }
 80058e6:	b480      	push	{r7}
 80058e8:	b083      	sub	sp, #12
 80058ea:	af00      	add	r7, sp, #0
 80058ec:	6078      	str	r0, [r7, #4]
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	4618      	mov	r0, r3
 80058f2:	370c      	adds	r7, #12
 80058f4:	46bd      	mov	sp, r7
 80058f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058fa:	4770      	bx	lr

080058fc <_ZNSt10_Head_baseILj0EP26TfLiteFullyConnectedParamsLb0EE7_M_headERKS2_>:
 80058fc:	b480      	push	{r7}
 80058fe:	b083      	sub	sp, #12
 8005900:	af00      	add	r7, sp, #0
 8005902:	6078      	str	r0, [r7, #4]
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	4618      	mov	r0, r3
 8005908:	370c      	adds	r7, #12
 800590a:	46bd      	mov	sp, r7
 800590c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005910:	4770      	bx	lr

08005912 <_ZNSt10_Head_baseILj0EP19TfLiteReshapeParamsLb0EE7_M_headERKS2_>:
 8005912:	b480      	push	{r7}
 8005914:	b083      	sub	sp, #12
 8005916:	af00      	add	r7, sp, #0
 8005918:	6078      	str	r0, [r7, #4]
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	4618      	mov	r0, r3
 800591e:	370c      	adds	r7, #12
 8005920:	46bd      	mov	sp, r7
 8005922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005926:	4770      	bx	lr

08005928 <_ZNSt10_Head_baseILj0EP19TfLiteSoftmaxParamsLb0EE7_M_headERKS2_>:
 8005928:	b480      	push	{r7}
 800592a:	b083      	sub	sp, #12
 800592c:	af00      	add	r7, sp, #0
 800592e:	6078      	str	r0, [r7, #4]
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	4618      	mov	r0, r3
 8005934:	370c      	adds	r7, #12
 8005936:	46bd      	mov	sp, r7
 8005938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800593c:	4770      	bx	lr
	...

08005940 <_ZN6tflite24EnumNamesBuiltinOperatorEv>:
inline const char * const *EnumNamesBuiltinOperator() {
 8005940:	b480      	push	{r7}
 8005942:	af00      	add	r7, sp, #0
  return names;
 8005944:	4b02      	ldr	r3, [pc, #8]	; (8005950 <_ZN6tflite24EnumNamesBuiltinOperatorEv+0x10>)
}
 8005946:	4618      	mov	r0, r3
 8005948:	46bd      	mov	sp, r7
 800594a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800594e:	4770      	bx	lr
 8005950:	0801cc70 	.word	0x0801cc70

08005954 <_ZN6tflite23EnumNameBuiltinOperatorENS_15BuiltinOperatorE>:
inline const char *EnumNameBuiltinOperator(BuiltinOperator e) {
 8005954:	b580      	push	{r7, lr}
 8005956:	b084      	sub	sp, #16
 8005958:	af00      	add	r7, sp, #0
 800595a:	4603      	mov	r3, r0
 800595c:	71fb      	strb	r3, [r7, #7]
  if (flatbuffers::IsOutRange(e, BuiltinOperator_ADD, BuiltinOperator_BROADCAST_ARGS)) return "";
 800595e:	2300      	movs	r3, #0
 8005960:	72bb      	strb	r3, [r7, #10]
 8005962:	2391      	movs	r3, #145	; 0x91
 8005964:	72fb      	strb	r3, [r7, #11]
 8005966:	f107 020b 	add.w	r2, r7, #11
 800596a:	f107 010a 	add.w	r1, r7, #10
 800596e:	1dfb      	adds	r3, r7, #7
 8005970:	4618      	mov	r0, r3
 8005972:	f000 f8a9 	bl	8005ac8 <_ZN11flatbuffers10IsOutRangeIN6tflite15BuiltinOperatorEEEbRKT_S5_S5_>
 8005976:	4603      	mov	r3, r0
 8005978:	2b00      	cmp	r3, #0
 800597a:	d001      	beq.n	8005980 <_ZN6tflite23EnumNameBuiltinOperatorENS_15BuiltinOperatorE+0x2c>
 800597c:	4b07      	ldr	r3, [pc, #28]	; (800599c <_ZN6tflite23EnumNameBuiltinOperatorENS_15BuiltinOperatorE+0x48>)
 800597e:	e008      	b.n	8005992 <_ZN6tflite23EnumNameBuiltinOperatorENS_15BuiltinOperatorE+0x3e>
  const size_t index = static_cast<size_t>(e);
 8005980:	79fb      	ldrb	r3, [r7, #7]
 8005982:	60fb      	str	r3, [r7, #12]
  return EnumNamesBuiltinOperator()[index];
 8005984:	f7ff ffdc 	bl	8005940 <_ZN6tflite24EnumNamesBuiltinOperatorEv>
 8005988:	4602      	mov	r2, r0
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	009b      	lsls	r3, r3, #2
 800598e:	4413      	add	r3, r2
 8005990:	681b      	ldr	r3, [r3, #0]
}
 8005992:	4618      	mov	r0, r3
 8005994:	3710      	adds	r7, #16
 8005996:	46bd      	mov	sp, r7
 8005998:	bd80      	pop	{r7, pc}
 800599a:	bf00      	nop
 800599c:	080145c8 	.word	0x080145c8

080059a0 <_ZNK6tflite12OperatorCode11custom_codeEv>:
  const flatbuffers::String *custom_code() const {
 80059a0:	b580      	push	{r7, lr}
 80059a2:	b082      	sub	sp, #8
 80059a4:	af00      	add	r7, sp, #0
 80059a6:	6078      	str	r0, [r7, #4]
    return GetPointer<const flatbuffers::String *>(VT_CUSTOM_CODE);
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	2106      	movs	r1, #6
 80059ac:	4618      	mov	r0, r3
 80059ae:	f7fe fee2 	bl	8004776 <_ZNK11flatbuffers5Table10GetPointerIPKNS_6StringEEET_t>
 80059b2:	4603      	mov	r3, r0
  }
 80059b4:	4618      	mov	r0, r3
 80059b6:	3708      	adds	r7, #8
 80059b8:	46bd      	mov	sp, r7
 80059ba:	bd80      	pop	{r7, pc}

080059bc <_ZNK6tflite12OperatorCode7versionEv>:
  int32_t version() const {
 80059bc:	b580      	push	{r7, lr}
 80059be:	b082      	sub	sp, #8
 80059c0:	af00      	add	r7, sp, #0
 80059c2:	6078      	str	r0, [r7, #4]
    return GetField<int32_t>(VT_VERSION, 1);
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	2201      	movs	r2, #1
 80059c8:	2108      	movs	r1, #8
 80059ca:	4618      	mov	r0, r3
 80059cc:	f7fe fe85 	bl	80046da <_ZNK11flatbuffers5Table8GetFieldIlEET_tS2_>
 80059d0:	4603      	mov	r3, r0
  }
 80059d2:	4618      	mov	r0, r3
 80059d4:	3708      	adds	r7, #8
 80059d6:	46bd      	mov	sp, r7
 80059d8:	bd80      	pop	{r7, pc}
	...

080059dc <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration>:

namespace tflite {

TfLiteStatus GetRegistrationFromOpCode(
    const OperatorCode* opcode, const OpResolver& op_resolver,
    ErrorReporter* error_reporter, const TfLiteRegistration** registration) {
 80059dc:	b580      	push	{r7, lr}
 80059de:	b088      	sub	sp, #32
 80059e0:	af00      	add	r7, sp, #0
 80059e2:	60f8      	str	r0, [r7, #12]
 80059e4:	60b9      	str	r1, [r7, #8]
 80059e6:	607a      	str	r2, [r7, #4]
 80059e8:	603b      	str	r3, [r7, #0]
  TfLiteStatus status = kTfLiteOk;
 80059ea:	2300      	movs	r3, #0
 80059ec:	77fb      	strb	r3, [r7, #31]
  *registration = nullptr;
 80059ee:	683b      	ldr	r3, [r7, #0]
 80059f0:	2200      	movs	r2, #0
 80059f2:	601a      	str	r2, [r3, #0]
  auto builtin_code = GetBuiltinCode(opcode);
 80059f4:	68f8      	ldr	r0, [r7, #12]
 80059f6:	f00a fc14 	bl	8010222 <_ZN6tflite14GetBuiltinCodeEPKNS_12OperatorCodeE>
 80059fa:	4603      	mov	r3, r0
 80059fc:	77bb      	strb	r3, [r7, #30]
  int version = opcode->version();
 80059fe:	68f8      	ldr	r0, [r7, #12]
 8005a00:	f7ff ffdc 	bl	80059bc <_ZNK6tflite12OperatorCode7versionEv>
 8005a04:	61b8      	str	r0, [r7, #24]

  if (builtin_code > BuiltinOperator_MAX) {
 8005a06:	7fbb      	ldrb	r3, [r7, #30]
 8005a08:	2b91      	cmp	r3, #145	; 0x91
 8005a0a:	d908      	bls.n	8005a1e <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0x42>
    TF_LITE_REPORT_ERROR(
 8005a0c:	7fbb      	ldrb	r3, [r7, #30]
 8005a0e:	461a      	mov	r2, r3
 8005a10:	492a      	ldr	r1, [pc, #168]	; (8005abc <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0xe0>)
 8005a12:	6878      	ldr	r0, [r7, #4]
 8005a14:	f7fe f900 	bl	8003c18 <_ZN6tflite13ErrorReporter6ReportEPKcz>
        error_reporter,
        "Op builtin_code out of range: %d. Are you using old TFLite binary "
        "with newer model?",
        builtin_code);
    status = kTfLiteError;
 8005a18:	2301      	movs	r3, #1
 8005a1a:	77fb      	strb	r3, [r7, #31]
 8005a1c:	e048      	b.n	8005ab0 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0xd4>
  } else if (builtin_code != BuiltinOperator_CUSTOM) {
 8005a1e:	7fbb      	ldrb	r3, [r7, #30]
 8005a20:	2b20      	cmp	r3, #32
 8005a22:	d01a      	beq.n	8005a5a <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0x7e>
    *registration = op_resolver.FindOp(builtin_code, version);
 8005a24:	68bb      	ldr	r3, [r7, #8]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	7fb9      	ldrb	r1, [r7, #30]
 8005a2c:	69ba      	ldr	r2, [r7, #24]
 8005a2e:	68b8      	ldr	r0, [r7, #8]
 8005a30:	4798      	blx	r3
 8005a32:	4602      	mov	r2, r0
 8005a34:	683b      	ldr	r3, [r7, #0]
 8005a36:	601a      	str	r2, [r3, #0]
    if (*registration == nullptr) {
 8005a38:	683b      	ldr	r3, [r7, #0]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d137      	bne.n	8005ab0 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0xd4>
      TF_LITE_REPORT_ERROR(
 8005a40:	7fbb      	ldrb	r3, [r7, #30]
 8005a42:	4618      	mov	r0, r3
 8005a44:	f7ff ff86 	bl	8005954 <_ZN6tflite23EnumNameBuiltinOperatorENS_15BuiltinOperatorE>
 8005a48:	4602      	mov	r2, r0
 8005a4a:	69bb      	ldr	r3, [r7, #24]
 8005a4c:	491c      	ldr	r1, [pc, #112]	; (8005ac0 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0xe4>)
 8005a4e:	6878      	ldr	r0, [r7, #4]
 8005a50:	f7fe f8e2 	bl	8003c18 <_ZN6tflite13ErrorReporter6ReportEPKcz>
          error_reporter,
          "Didn't find op for builtin opcode '%s' version '%d'. "
          "An older version of this builtin might be supported. "
          "Are you using an old TFLite binary with a newer model?\n",
          EnumNameBuiltinOperator(builtin_code), version);
      status = kTfLiteError;
 8005a54:	2301      	movs	r3, #1
 8005a56:	77fb      	strb	r3, [r7, #31]
 8005a58:	e02a      	b.n	8005ab0 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0xd4>
    }
  } else if (!opcode->custom_code()) {
 8005a5a:	68f8      	ldr	r0, [r7, #12]
 8005a5c:	f7ff ffa0 	bl	80059a0 <_ZNK6tflite12OperatorCode11custom_codeEv>
 8005a60:	4603      	mov	r3, r0
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	bf0c      	ite	eq
 8005a66:	2301      	moveq	r3, #1
 8005a68:	2300      	movne	r3, #0
 8005a6a:	b2db      	uxtb	r3, r3
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d006      	beq.n	8005a7e <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0xa2>
    TF_LITE_REPORT_ERROR(
 8005a70:	4914      	ldr	r1, [pc, #80]	; (8005ac4 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0xe8>)
 8005a72:	6878      	ldr	r0, [r7, #4]
 8005a74:	f7fe f8d0 	bl	8003c18 <_ZN6tflite13ErrorReporter6ReportEPKcz>
        error_reporter,
        "Operator with CUSTOM builtin_code has no custom_code.\n");
    status = kTfLiteError;
 8005a78:	2301      	movs	r3, #1
 8005a7a:	77fb      	strb	r3, [r7, #31]
 8005a7c:	e018      	b.n	8005ab0 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0xd4>
  } else {
    const char* name = opcode->custom_code()->c_str();
 8005a7e:	68f8      	ldr	r0, [r7, #12]
 8005a80:	f7ff ff8e 	bl	80059a0 <_ZNK6tflite12OperatorCode11custom_codeEv>
 8005a84:	4603      	mov	r3, r0
 8005a86:	4618      	mov	r0, r3
 8005a88:	f7fe f905 	bl	8003c96 <_ZNK11flatbuffers6String5c_strEv>
 8005a8c:	6178      	str	r0, [r7, #20]
    *registration = op_resolver.FindOp(name, version);
 8005a8e:	68bb      	ldr	r3, [r7, #8]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	3304      	adds	r3, #4
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	69ba      	ldr	r2, [r7, #24]
 8005a98:	6979      	ldr	r1, [r7, #20]
 8005a9a:	68b8      	ldr	r0, [r7, #8]
 8005a9c:	4798      	blx	r3
 8005a9e:	4602      	mov	r2, r0
 8005aa0:	683b      	ldr	r3, [r7, #0]
 8005aa2:	601a      	str	r2, [r3, #0]
    if (*registration == nullptr) {
 8005aa4:	683b      	ldr	r3, [r7, #0]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d101      	bne.n	8005ab0 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0xd4>
      // Do not report error for unresolved custom op, we do the final check
      // while preparing ops.
      status = kTfLiteError;
 8005aac:	2301      	movs	r3, #1
 8005aae:	77fb      	strb	r3, [r7, #31]
    }
  }
  return status;
 8005ab0:	7ffb      	ldrb	r3, [r7, #31]
}
 8005ab2:	4618      	mov	r0, r3
 8005ab4:	3720      	adds	r7, #32
 8005ab6:	46bd      	mov	sp, r7
 8005ab8:	bd80      	pop	{r7, pc}
 8005aba:	bf00      	nop
 8005abc:	080145cc 	.word	0x080145cc
 8005ac0:	08014620 	.word	0x08014620
 8005ac4:	080146c4 	.word	0x080146c4

08005ac8 <_ZN11flatbuffers10IsOutRangeIN6tflite15BuiltinOperatorEEEbRKT_S5_S5_>:
inline bool IsOutRange(const T &v, const T &low, const T &high) {
 8005ac8:	b480      	push	{r7}
 8005aca:	b085      	sub	sp, #20
 8005acc:	af00      	add	r7, sp, #0
 8005ace:	60f8      	str	r0, [r7, #12]
 8005ad0:	60b9      	str	r1, [r7, #8]
 8005ad2:	607a      	str	r2, [r7, #4]
  return (v < low) || (high < v);
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	781a      	ldrb	r2, [r3, #0]
 8005ad8:	68bb      	ldr	r3, [r7, #8]
 8005ada:	781b      	ldrb	r3, [r3, #0]
 8005adc:	429a      	cmp	r2, r3
 8005ade:	d305      	bcc.n	8005aec <_ZN11flatbuffers10IsOutRangeIN6tflite15BuiltinOperatorEEEbRKT_S5_S5_+0x24>
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	781a      	ldrb	r2, [r3, #0]
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	781b      	ldrb	r3, [r3, #0]
 8005ae8:	429a      	cmp	r2, r3
 8005aea:	d201      	bcs.n	8005af0 <_ZN11flatbuffers10IsOutRangeIN6tflite15BuiltinOperatorEEEbRKT_S5_S5_+0x28>
 8005aec:	2301      	movs	r3, #1
 8005aee:	e000      	b.n	8005af2 <_ZN11flatbuffers10IsOutRangeIN6tflite15BuiltinOperatorEEEbRKT_S5_S5_+0x2a>
 8005af0:	2300      	movs	r3, #0
}
 8005af2:	4618      	mov	r0, r3
 8005af4:	3714      	adds	r7, #20
 8005af6:	46bd      	mov	sp, r7
 8005af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005afc:	4770      	bx	lr

08005afe <_ZSt5roundf>:
#endif

#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO_FP
  constexpr float
  round(float __x)
  { return __builtin_roundf(__x); }
 8005afe:	b580      	push	{r7, lr}
 8005b00:	b082      	sub	sp, #8
 8005b02:	af00      	add	r7, sp, #0
 8005b04:	ed87 0a01 	vstr	s0, [r7, #4]
 8005b08:	ed97 0a01 	vldr	s0, [r7, #4]
 8005b0c:	f00a fd02 	bl	8010514 <roundf>
 8005b10:	eef0 7a40 	vmov.f32	s15, s0
 8005b14:	eeb0 0a67 	vmov.f32	s0, s15
 8005b18:	3708      	adds	r7, #8
 8005b1a:	46bd      	mov	sp, r7
 8005b1c:	bd80      	pop	{r7, pc}
	...

08005b20 <_ZN6tflite18QuantizeMultiplierEdPlPi>:
constexpr uint32_t kFractionRoundingMask = 0x003fffff;
constexpr uint32_t kFractionRoundingThreshold = 0x00200000;
}  // namespace

void QuantizeMultiplier(double double_multiplier, int32_t* quantized_multiplier,
                        int* shift) {
 8005b20:	b5b0      	push	{r4, r5, r7, lr}
 8005b22:	b088      	sub	sp, #32
 8005b24:	af00      	add	r7, sp, #0
 8005b26:	ed87 0b02 	vstr	d0, [r7, #8]
 8005b2a:	6078      	str	r0, [r7, #4]
 8005b2c:	6039      	str	r1, [r7, #0]
  if (double_multiplier == 0.) {
 8005b2e:	f04f 0200 	mov.w	r2, #0
 8005b32:	f04f 0300 	mov.w	r3, #0
 8005b36:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005b3a:	f7fa ffd7 	bl	8000aec <__aeabi_dcmpeq>
 8005b3e:	4603      	mov	r3, r0
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d006      	beq.n	8005b52 <_ZN6tflite18QuantizeMultiplierEdPlPi+0x32>
    *quantized_multiplier = 0;
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	2200      	movs	r2, #0
 8005b48:	601a      	str	r2, [r3, #0]
    *shift = 0;
 8005b4a:	683b      	ldr	r3, [r7, #0]
 8005b4c:	2200      	movs	r2, #0
 8005b4e:	601a      	str	r2, [r3, #0]
    return;
 8005b50:	e06b      	b.n	8005c2a <_ZN6tflite18QuantizeMultiplierEdPlPi+0x10a>
  // example on microcontrollers) then use an alternative implementation
  // that only requires integer and bitwise operations. To enable this, you
  // need to set the define during the build process for your platform.
  int64_t q_fixed = IntegerFrExp(double_multiplier, shift);
#else   // TFLITE_EMULATE_FLOAT
  const double q = std::frexp(double_multiplier, shift);
 8005b52:	6838      	ldr	r0, [r7, #0]
 8005b54:	ed97 0b02 	vldr	d0, [r7, #8]
 8005b58:	f00a fc5e 	bl	8010418 <frexp>
 8005b5c:	ed87 0b04 	vstr	d0, [r7, #16]
  auto q_fixed = static_cast<int64_t>(TfLiteRound(q * (1ll << 31)));
 8005b60:	f04f 0200 	mov.w	r2, #0
 8005b64:	4b32      	ldr	r3, [pc, #200]	; (8005c30 <_ZN6tflite18QuantizeMultiplierEdPlPi+0x110>)
 8005b66:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8005b6a:	f7fa fd57 	bl	800061c <__aeabi_dmul>
 8005b6e:	4602      	mov	r2, r0
 8005b70:	460b      	mov	r3, r1
 8005b72:	ec43 2b17 	vmov	d7, r2, r3
 8005b76:	eeb0 0a47 	vmov.f32	s0, s14
 8005b7a:	eef0 0a67 	vmov.f32	s1, s15
 8005b7e:	f000 f978 	bl	8005e72 <_ZN6tflite11TfLiteRoundIdEET_S1_>
 8005b82:	ec53 2b10 	vmov	r2, r3, d0
 8005b86:	4610      	mov	r0, r2
 8005b88:	4619      	mov	r1, r3
 8005b8a:	f7fb f887 	bl	8000c9c <__aeabi_d2lz>
 8005b8e:	4602      	mov	r2, r0
 8005b90:	460b      	mov	r3, r1
 8005b92:	e9c7 2306 	strd	r2, r3, [r7, #24]
#endif  // TFLITE_EMULATE_FLOAT
  TFLITE_CHECK(q_fixed <= (1ll << 31));
 8005b96:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005b9a:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 8005b9e:	f04f 0100 	mov.w	r1, #0
 8005ba2:	4290      	cmp	r0, r2
 8005ba4:	eb71 0303 	sbcs.w	r3, r1, r3
 8005ba8:	da01      	bge.n	8005bae <_ZN6tflite18QuantizeMultiplierEdPlPi+0x8e>
 8005baa:	f00a fdf8 	bl	801079e <abort>
  if (q_fixed == (1ll << 31)) {
 8005bae:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	bf08      	it	eq
 8005bb6:	f1b2 4f00 	cmpeq.w	r2, #2147483648	; 0x80000000
 8005bba:	d117      	bne.n	8005bec <_ZN6tflite18QuantizeMultiplierEdPlPi+0xcc>
    q_fixed /= 2;
 8005bbc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005bc0:	0fd9      	lsrs	r1, r3, #31
 8005bc2:	4608      	mov	r0, r1
 8005bc4:	f04f 0100 	mov.w	r1, #0
 8005bc8:	1884      	adds	r4, r0, r2
 8005bca:	eb41 0503 	adc.w	r5, r1, r3
 8005bce:	f04f 0200 	mov.w	r2, #0
 8005bd2:	f04f 0300 	mov.w	r3, #0
 8005bd6:	0862      	lsrs	r2, r4, #1
 8005bd8:	ea42 72c5 	orr.w	r2, r2, r5, lsl #31
 8005bdc:	106b      	asrs	r3, r5, #1
 8005bde:	e9c7 2306 	strd	r2, r3, [r7, #24]
    ++*shift;
 8005be2:	683b      	ldr	r3, [r7, #0]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	1c5a      	adds	r2, r3, #1
 8005be8:	683b      	ldr	r3, [r7, #0]
 8005bea:	601a      	str	r2, [r3, #0]
  }
  TFLITE_CHECK_LE(q_fixed, std::numeric_limits<int32_t>::max());
 8005bec:	f7fc f9b5 	bl	8001f5a <_ZNSt14numeric_limitsIlE3maxEv>
 8005bf0:	4603      	mov	r3, r0
 8005bf2:	4618      	mov	r0, r3
 8005bf4:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8005bf8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005bfc:	4290      	cmp	r0, r2
 8005bfe:	eb71 0303 	sbcs.w	r3, r1, r3
 8005c02:	da01      	bge.n	8005c08 <_ZN6tflite18QuantizeMultiplierEdPlPi+0xe8>
 8005c04:	f00a fdcb 	bl	801079e <abort>
  // that we're effectively flushing tiny double_multiplier's to zero.
  // We could conceivably handle values in the range (roughly) [32, 63]
  // as 'denormals' i.e. (shift==0, q_fixed < 2^30). In that point of view
  // the present handling is just doing 'flush denormals to zero'. We could
  // reconsider and actually generate nonzero denormals if a need arises.
  if (*shift < -31) {
 8005c08:	683b      	ldr	r3, [r7, #0]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	f113 0f1f 	cmn.w	r3, #31
 8005c10:	da08      	bge.n	8005c24 <_ZN6tflite18QuantizeMultiplierEdPlPi+0x104>
    *shift = 0;
 8005c12:	683b      	ldr	r3, [r7, #0]
 8005c14:	2200      	movs	r2, #0
 8005c16:	601a      	str	r2, [r3, #0]
    q_fixed = 0;
 8005c18:	f04f 0200 	mov.w	r2, #0
 8005c1c:	f04f 0300 	mov.w	r3, #0
 8005c20:	e9c7 2306 	strd	r2, r3, [r7, #24]
  }
  *quantized_multiplier = static_cast<int32_t>(q_fixed);
 8005c24:	69ba      	ldr	r2, [r7, #24]
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	601a      	str	r2, [r3, #0]
}
 8005c2a:	3720      	adds	r7, #32
 8005c2c:	46bd      	mov	sp, r7
 8005c2e:	bdb0      	pop	{r4, r5, r7, pc}
 8005c30:	41e00000 	.word	0x41e00000

08005c34 <_ZN6tflite32QuantizeMultiplierGreaterThanOneEdPlPi>:

void QuantizeMultiplierGreaterThanOne(double double_multiplier,
                                      int32_t* quantized_multiplier,
                                      int* left_shift) {
 8005c34:	b580      	push	{r7, lr}
 8005c36:	b084      	sub	sp, #16
 8005c38:	af00      	add	r7, sp, #0
 8005c3a:	ed87 0b02 	vstr	d0, [r7, #8]
 8005c3e:	6078      	str	r0, [r7, #4]
 8005c40:	6039      	str	r1, [r7, #0]
  TFLITE_CHECK_GT(double_multiplier, 1.);
 8005c42:	f04f 0200 	mov.w	r2, #0
 8005c46:	4b0d      	ldr	r3, [pc, #52]	; (8005c7c <_ZN6tflite32QuantizeMultiplierGreaterThanOneEdPlPi+0x48>)
 8005c48:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005c4c:	f7fa ff76 	bl	8000b3c <__aeabi_dcmpgt>
 8005c50:	4603      	mov	r3, r0
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d101      	bne.n	8005c5a <_ZN6tflite32QuantizeMultiplierGreaterThanOneEdPlPi+0x26>
 8005c56:	f00a fda2 	bl	801079e <abort>
  QuantizeMultiplier(double_multiplier, quantized_multiplier, left_shift);
 8005c5a:	6839      	ldr	r1, [r7, #0]
 8005c5c:	6878      	ldr	r0, [r7, #4]
 8005c5e:	ed97 0b02 	vldr	d0, [r7, #8]
 8005c62:	f7ff ff5d 	bl	8005b20 <_ZN6tflite18QuantizeMultiplierEdPlPi>
  TFLITE_CHECK_GE(*left_shift, 0);
 8005c66:	683b      	ldr	r3, [r7, #0]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	da01      	bge.n	8005c72 <_ZN6tflite32QuantizeMultiplierGreaterThanOneEdPlPi+0x3e>
 8005c6e:	f00a fd96 	bl	801079e <abort>
}
 8005c72:	bf00      	nop
 8005c74:	3710      	adds	r7, #16
 8005c76:	46bd      	mov	sp, r7
 8005c78:	bd80      	pop	{r7, pc}
 8005c7a:	bf00      	nop
 8005c7c:	3ff00000 	.word	0x3ff00000

08005c80 <_ZSt3minIdERKT_S2_S2_>:
   *  preprocessor macro.
  */
  template<typename _Tp>
    _GLIBCXX14_CONSTEXPR
    inline const _Tp&
    min(const _Tp& __a, const _Tp& __b)
 8005c80:	b580      	push	{r7, lr}
 8005c82:	b082      	sub	sp, #8
 8005c84:	af00      	add	r7, sp, #0
 8005c86:	6078      	str	r0, [r7, #4]
 8005c88:	6039      	str	r1, [r7, #0]
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return __b < __a ? __b : __a;
      if (__b < __a)
 8005c8a:	683b      	ldr	r3, [r7, #0]
 8005c8c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c96:	f7fa ff33 	bl	8000b00 <__aeabi_dcmplt>
 8005c9a:	4603      	mov	r3, r0
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d001      	beq.n	8005ca4 <_ZSt3minIdERKT_S2_S2_+0x24>
	return __b;
 8005ca0:	683b      	ldr	r3, [r7, #0]
 8005ca2:	e000      	b.n	8005ca6 <_ZSt3minIdERKT_S2_S2_+0x26>
      return __a;
 8005ca4:	687b      	ldr	r3, [r7, #4]
    }
 8005ca6:	4618      	mov	r0, r3
 8005ca8:	3708      	adds	r7, #8
 8005caa:	46bd      	mov	sp, r7
 8005cac:	bd80      	pop	{r7, pc}
	...

08005cb0 <_ZN6tflite24PreprocessSoftmaxScalingEddiPlPi>:
  }
}

void PreprocessSoftmaxScaling(double beta, double input_scale,
                              int input_integer_bits,
                              int32_t* quantized_multiplier, int* left_shift) {
 8005cb0:	b5b0      	push	{r4, r5, r7, lr}
 8005cb2:	b08e      	sub	sp, #56	; 0x38
 8005cb4:	af00      	add	r7, sp, #0
 8005cb6:	ed87 0b06 	vstr	d0, [r7, #24]
 8005cba:	ed87 1b04 	vstr	d1, [r7, #16]
 8005cbe:	60f8      	str	r0, [r7, #12]
 8005cc0:	60b9      	str	r1, [r7, #8]
 8005cc2:	607a      	str	r2, [r7, #4]
  if (IntegerDoubleCompare(input_beta_real_multiplier, (1ll << 31) - 1.0) > 0) {
    input_beta_real_multiplier = (1ll << 31) - 1.0;
  }
#else   // TFLITE_EMULATE_FLOAT
  const double input_beta_real_multiplier = std::min<double>(
      beta * input_scale * (1 << (31 - input_integer_bits)), (1ll << 31) - 1.0);
 8005cc4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8005cc8:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8005ccc:	f7fa fca6 	bl	800061c <__aeabi_dmul>
 8005cd0:	4602      	mov	r2, r0
 8005cd2:	460b      	mov	r3, r1
 8005cd4:	4614      	mov	r4, r2
 8005cd6:	461d      	mov	r5, r3
 8005cd8:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	fa22 f303 	lsr.w	r3, r2, r3
 8005ce2:	4618      	mov	r0, r3
 8005ce4:	f7fa fc30 	bl	8000548 <__aeabi_i2d>
 8005ce8:	4602      	mov	r2, r0
 8005cea:	460b      	mov	r3, r1
 8005cec:	4620      	mov	r0, r4
 8005cee:	4629      	mov	r1, r5
 8005cf0:	f7fa fc94 	bl	800061c <__aeabi_dmul>
 8005cf4:	4602      	mov	r2, r0
 8005cf6:	460b      	mov	r3, r1
 8005cf8:	e9c7 2308 	strd	r2, r3, [r7, #32]
 8005cfc:	a30e      	add	r3, pc, #56	; (adr r3, 8005d38 <_ZN6tflite24PreprocessSoftmaxScalingEddiPlPi+0x88>)
 8005cfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d02:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 8005d06:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8005d0a:	f107 0320 	add.w	r3, r7, #32
 8005d0e:	4611      	mov	r1, r2
 8005d10:	4618      	mov	r0, r3
 8005d12:	f7ff ffb5 	bl	8005c80 <_ZSt3minIdERKT_S2_S2_>
 8005d16:	4603      	mov	r3, r0
 8005d18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d1c:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
#endif  // TFLITE_EMULATE_FLOAT

  QuantizeMultiplierGreaterThanOne(input_beta_real_multiplier,
 8005d20:	6879      	ldr	r1, [r7, #4]
 8005d22:	68b8      	ldr	r0, [r7, #8]
 8005d24:	ed97 0b0c 	vldr	d0, [r7, #48]	; 0x30
 8005d28:	f7ff ff84 	bl	8005c34 <_ZN6tflite32QuantizeMultiplierGreaterThanOneEdPlPi>
                                   quantized_multiplier, left_shift);
}
 8005d2c:	bf00      	nop
 8005d2e:	3738      	adds	r7, #56	; 0x38
 8005d30:	46bd      	mov	sp, r7
 8005d32:	bdb0      	pop	{r4, r5, r7, pc}
 8005d34:	f3af 8000 	nop.w
 8005d38:	ffc00000 	.word	0xffc00000
 8005d3c:	41dfffff 	.word	0x41dfffff

08005d40 <_ZN6tflite20CalculateInputRadiusEiii>:
                                              reverse_scaling_divisor,
                                              reverse_scaling_left_shift);
}

int CalculateInputRadius(int input_integer_bits, int input_left_shift,
                         int total_signed_bits) {
 8005d40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d44:	b087      	sub	sp, #28
 8005d46:	af00      	add	r7, sp, #0
 8005d48:	60f8      	str	r0, [r7, #12]
 8005d4a:	60b9      	str	r1, [r7, #8]
 8005d4c:	607a      	str	r2, [r7, #4]
  result <<= (total_signed_bits - input_integer_bits);
  result >>= input_left_shift;
  return result;
#else   // TFLITE_EMULATE_FLOAT
  const double max_input_rescaled =
      1.0 * ((1 << input_integer_bits) - 1) *
 8005d4e:	2201      	movs	r2, #1
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	fa02 f303 	lsl.w	r3, r2, r3
 8005d56:	3b01      	subs	r3, #1
 8005d58:	4618      	mov	r0, r3
 8005d5a:	f7fa fbf5 	bl	8000548 <__aeabi_i2d>
 8005d5e:	4682      	mov	sl, r0
 8005d60:	468b      	mov	fp, r1
      (1ll << (total_signed_bits - input_integer_bits)) /
 8005d62:	687a      	ldr	r2, [r7, #4]
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	1ad1      	subs	r1, r2, r3
 8005d68:	f04f 0201 	mov.w	r2, #1
 8005d6c:	f04f 0300 	mov.w	r3, #0
 8005d70:	f1a1 0620 	sub.w	r6, r1, #32
 8005d74:	f1c1 0020 	rsb	r0, r1, #32
 8005d78:	fa03 f901 	lsl.w	r9, r3, r1
 8005d7c:	fa02 f606 	lsl.w	r6, r2, r6
 8005d80:	ea49 0906 	orr.w	r9, r9, r6
 8005d84:	fa22 f000 	lsr.w	r0, r2, r0
 8005d88:	ea49 0900 	orr.w	r9, r9, r0
 8005d8c:	fa02 f801 	lsl.w	r8, r2, r1
      1.0 * ((1 << input_integer_bits) - 1) *
 8005d90:	4640      	mov	r0, r8
 8005d92:	4649      	mov	r1, r9
 8005d94:	f7fa fc14 	bl	80005c0 <__aeabi_l2d>
 8005d98:	4602      	mov	r2, r0
 8005d9a:	460b      	mov	r3, r1
 8005d9c:	4650      	mov	r0, sl
 8005d9e:	4659      	mov	r1, fp
 8005da0:	f7fa fc3c 	bl	800061c <__aeabi_dmul>
 8005da4:	4602      	mov	r2, r0
 8005da6:	460b      	mov	r3, r1
 8005da8:	4690      	mov	r8, r2
 8005daa:	4699      	mov	r9, r3
      (1ll << input_left_shift);
 8005dac:	f04f 0201 	mov.w	r2, #1
 8005db0:	f04f 0300 	mov.w	r3, #0
 8005db4:	68b9      	ldr	r1, [r7, #8]
 8005db6:	f1a1 0620 	sub.w	r6, r1, #32
 8005dba:	f1c1 0020 	rsb	r0, r1, #32
 8005dbe:	fa03 f501 	lsl.w	r5, r3, r1
 8005dc2:	fa02 f606 	lsl.w	r6, r2, r6
 8005dc6:	4335      	orrs	r5, r6
 8005dc8:	fa22 f000 	lsr.w	r0, r2, r0
 8005dcc:	4305      	orrs	r5, r0
 8005dce:	fa02 f401 	lsl.w	r4, r2, r1
      (1ll << (total_signed_bits - input_integer_bits)) /
 8005dd2:	4620      	mov	r0, r4
 8005dd4:	4629      	mov	r1, r5
 8005dd6:	f7fa fbf3 	bl	80005c0 <__aeabi_l2d>
 8005dda:	4602      	mov	r2, r0
 8005ddc:	460b      	mov	r3, r1
  const double max_input_rescaled =
 8005dde:	4640      	mov	r0, r8
 8005de0:	4649      	mov	r1, r9
 8005de2:	f7fa fd45 	bl	8000870 <__aeabi_ddiv>
 8005de6:	4602      	mov	r2, r0
 8005de8:	460b      	mov	r3, r1
 8005dea:	e9c7 2304 	strd	r2, r3, [r7, #16]
  // Tighten bound using floor.  Suppose that we could use the exact value.
  // After scaling the difference, the result would be at the maximum.  Thus we
  // must ensure that our value has lower magnitude.
  return static_cast<int>(std::floor(max_input_rescaled));
 8005dee:	ed97 0b04 	vldr	d0, [r7, #16]
 8005df2:	f00a fa91 	bl	8010318 <floor>
 8005df6:	ec53 2b10 	vmov	r2, r3, d0
 8005dfa:	4610      	mov	r0, r2
 8005dfc:	4619      	mov	r1, r3
 8005dfe:	f7fa febd 	bl	8000b7c <__aeabi_d2iz>
 8005e02:	4603      	mov	r3, r0
#endif  // TFLITE_EMULATE_FLOAT
}
 8005e04:	4618      	mov	r0, r3
 8005e06:	371c      	adds	r7, #28
 8005e08:	46bd      	mov	sp, r7
 8005e0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08005e0e <_ZSt3minIfERKT_S2_S2_>:
    min(const _Tp& __a, const _Tp& __b)
 8005e0e:	b480      	push	{r7}
 8005e10:	b083      	sub	sp, #12
 8005e12:	af00      	add	r7, sp, #0
 8005e14:	6078      	str	r0, [r7, #4]
 8005e16:	6039      	str	r1, [r7, #0]
      if (__b < __a)
 8005e18:	683b      	ldr	r3, [r7, #0]
 8005e1a:	ed93 7a00 	vldr	s14, [r3]
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	edd3 7a00 	vldr	s15, [r3]
 8005e24:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005e28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005e2c:	d501      	bpl.n	8005e32 <_ZSt3minIfERKT_S2_S2_+0x24>
	return __b;
 8005e2e:	683b      	ldr	r3, [r7, #0]
 8005e30:	e000      	b.n	8005e34 <_ZSt3minIfERKT_S2_S2_+0x26>
      return __a;
 8005e32:	687b      	ldr	r3, [r7, #4]
    }
 8005e34:	4618      	mov	r0, r3
 8005e36:	370c      	adds	r7, #12
 8005e38:	46bd      	mov	sp, r7
 8005e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e3e:	4770      	bx	lr

08005e40 <_ZSt3maxIfERKT_S2_S2_>:
   *  preprocessor macro.
  */
  template<typename _Tp>
    _GLIBCXX14_CONSTEXPR
    inline const _Tp&
    max(const _Tp& __a, const _Tp& __b)
 8005e40:	b480      	push	{r7}
 8005e42:	b083      	sub	sp, #12
 8005e44:	af00      	add	r7, sp, #0
 8005e46:	6078      	str	r0, [r7, #4]
 8005e48:	6039      	str	r1, [r7, #0]
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return  __a < __b ? __b : __a;
      if (__a < __b)
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	ed93 7a00 	vldr	s14, [r3]
 8005e50:	683b      	ldr	r3, [r7, #0]
 8005e52:	edd3 7a00 	vldr	s15, [r3]
 8005e56:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005e5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005e5e:	d501      	bpl.n	8005e64 <_ZSt3maxIfERKT_S2_S2_+0x24>
	return __b;
 8005e60:	683b      	ldr	r3, [r7, #0]
 8005e62:	e000      	b.n	8005e66 <_ZSt3maxIfERKT_S2_S2_+0x26>
      return __a;
 8005e64:	687b      	ldr	r3, [r7, #4]
    }
 8005e66:	4618      	mov	r0, r3
 8005e68:	370c      	adds	r7, #12
 8005e6a:	46bd      	mov	sp, r7
 8005e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e70:	4770      	bx	lr

08005e72 <_ZN6tflite11TfLiteRoundIdEET_S1_>:
  template <class T>                                  \
  inline T tf_name(const T x) {                       \
    return TF_LITE_GLOBAL_STD_PREFIX::std_name(x);    \
  }

DECLARE_STD_GLOBAL_SWITCH1(TfLiteRound, round);
 8005e72:	b580      	push	{r7, lr}
 8005e74:	b082      	sub	sp, #8
 8005e76:	af00      	add	r7, sp, #0
 8005e78:	ed87 0b00 	vstr	d0, [r7]
 8005e7c:	ed97 0b00 	vldr	d0, [r7]
 8005e80:	f00a fb02 	bl	8010488 <round>
 8005e84:	eeb0 7a40 	vmov.f32	s14, s0
 8005e88:	eef0 7a60 	vmov.f32	s15, s1
 8005e8c:	eeb0 0a47 	vmov.f32	s0, s14
 8005e90:	eef0 0a67 	vmov.f32	s1, s15
 8005e94:	3708      	adds	r7, #8
 8005e96:	46bd      	mov	sp, r7
 8005e98:	bd80      	pop	{r7, pc}

08005e9a <_ZN6tflite11TfLiteRoundIfEET_S1_>:
 8005e9a:	b580      	push	{r7, lr}
 8005e9c:	b082      	sub	sp, #8
 8005e9e:	af00      	add	r7, sp, #0
 8005ea0:	ed87 0a01 	vstr	s0, [r7, #4]
 8005ea4:	ed97 0a01 	vldr	s0, [r7, #4]
 8005ea8:	f7ff fe29 	bl	8005afe <_ZSt5roundf>
 8005eac:	eef0 7a40 	vmov.f32	s15, s0
 8005eb0:	eeb0 0a67 	vmov.f32	s0, s15
 8005eb4:	3708      	adds	r7, #8
 8005eb6:	46bd      	mov	sp, r7
 8005eb8:	bd80      	pop	{r7, pc}

08005eba <_ZNSt14numeric_limitsIaE3minEv>:
      min() _GLIBCXX_USE_NOEXCEPT { return -__SCHAR_MAX__ - 1; }
 8005eba:	b480      	push	{r7}
 8005ebc:	af00      	add	r7, sp, #0
 8005ebe:	f06f 037f 	mvn.w	r3, #127	; 0x7f
 8005ec2:	4618      	mov	r0, r3
 8005ec4:	46bd      	mov	sp, r7
 8005ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eca:	4770      	bx	lr

08005ecc <_ZNSt14numeric_limitsIaE3maxEv>:
      max() _GLIBCXX_USE_NOEXCEPT { return __SCHAR_MAX__; }
 8005ecc:	b480      	push	{r7}
 8005ece:	af00      	add	r7, sp, #0
 8005ed0:	237f      	movs	r3, #127	; 0x7f
 8005ed2:	4618      	mov	r0, r3
 8005ed4:	46bd      	mov	sp, r7
 8005ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eda:	4770      	bx	lr

08005edc <_ZNSt14numeric_limitsIhE3minEv>:
      min() _GLIBCXX_USE_NOEXCEPT { return 0; }
 8005edc:	b480      	push	{r7}
 8005ede:	af00      	add	r7, sp, #0
 8005ee0:	2300      	movs	r3, #0
 8005ee2:	4618      	mov	r0, r3
 8005ee4:	46bd      	mov	sp, r7
 8005ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eea:	4770      	bx	lr

08005eec <_ZNSt14numeric_limitsIhE3maxEv>:
      max() _GLIBCXX_USE_NOEXCEPT { return __SCHAR_MAX__ * 2U + 1; }
 8005eec:	b480      	push	{r7}
 8005eee:	af00      	add	r7, sp, #0
 8005ef0:	23ff      	movs	r3, #255	; 0xff
 8005ef2:	4618      	mov	r0, r3
 8005ef4:	46bd      	mov	sp, r7
 8005ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005efa:	4770      	bx	lr

08005efc <_ZNSt14numeric_limitsIsE3minEv>:
      min() _GLIBCXX_USE_NOEXCEPT { return -__SHRT_MAX__ - 1; }
 8005efc:	b480      	push	{r7}
 8005efe:	af00      	add	r7, sp, #0
 8005f00:	4b02      	ldr	r3, [pc, #8]	; (8005f0c <_ZNSt14numeric_limitsIsE3minEv+0x10>)
 8005f02:	4618      	mov	r0, r3
 8005f04:	46bd      	mov	sp, r7
 8005f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f0a:	4770      	bx	lr
 8005f0c:	ffff8000 	.word	0xffff8000

08005f10 <_ZNSt14numeric_limitsIsE3maxEv>:
      max() _GLIBCXX_USE_NOEXCEPT { return __SHRT_MAX__; }
 8005f10:	b480      	push	{r7}
 8005f12:	af00      	add	r7, sp, #0
 8005f14:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8005f18:	4618      	mov	r0, r3
 8005f1a:	46bd      	mov	sp, r7
 8005f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f20:	4770      	bx	lr

08005f22 <_ZN6tflite13NumDimensionsEPK12TfLiteTensor>:
TfLiteStatus GetIntermediatesSafe(const TfLiteContext* context,
                                  const TfLiteNode* node, int index,
                                  TfLiteTensor** tensor);
#endif  // TF_LITE_STATIC_MEMORY

inline int NumDimensions(const TfLiteTensor* t) { return t->dims->size; }
 8005f22:	b480      	push	{r7}
 8005f24:	b083      	sub	sp, #12
 8005f26:	af00      	add	r7, sp, #0
 8005f28:	6078      	str	r0, [r7, #4]
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	689b      	ldr	r3, [r3, #8]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	4618      	mov	r0, r3
 8005f32:	370c      	adds	r7, #12
 8005f34:	46bd      	mov	sp, r7
 8005f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f3a:	4770      	bx	lr

08005f3c <_ZSt3absd>:
// 2735. std::abs(short), std::abs(signed char) and others should return int

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR double
  abs(double __x)
  { return __builtin_fabs(__x); }
 8005f3c:	b480      	push	{r7}
 8005f3e:	b083      	sub	sp, #12
 8005f40:	af00      	add	r7, sp, #0
 8005f42:	ed87 0b00 	vstr	d0, [r7]
 8005f46:	683a      	ldr	r2, [r7, #0]
 8005f48:	6879      	ldr	r1, [r7, #4]
 8005f4a:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8005f4e:	ec43 2b17 	vmov	d7, r2, r3
 8005f52:	eeb0 0a47 	vmov.f32	s0, s14
 8005f56:	eef0 0a67 	vmov.f32	s1, s15
 8005f5a:	370c      	adds	r7, #12
 8005f5c:	46bd      	mov	sp, r7
 8005f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f62:	4770      	bx	lr

08005f64 <_ZN6tflite12_GLOBAL__N_116GetTensorAtIndexEPK13TfLiteContexti>:

namespace {

// Assumes tensor_index is a valid index (in bounds)
inline TfLiteTensor* GetTensorAtIndex(const TfLiteContext* context,
                                      int tensor_index) {
 8005f64:	b580      	push	{r7, lr}
 8005f66:	b082      	sub	sp, #8
 8005f68:	af00      	add	r7, sp, #0
 8005f6a:	6078      	str	r0, [r7, #4]
 8005f6c:	6039      	str	r1, [r7, #0]
  if (context->tensors != nullptr) {
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	689b      	ldr	r3, [r3, #8]
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d005      	beq.n	8005f82 <_ZN6tflite12_GLOBAL__N_116GetTensorAtIndexEPK13TfLiteContexti+0x1e>
    return &context->tensors[tensor_index];
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	689a      	ldr	r2, [r3, #8]
 8005f7a:	683b      	ldr	r3, [r7, #0]
 8005f7c:	019b      	lsls	r3, r3, #6
 8005f7e:	4413      	add	r3, r2
 8005f80:	e006      	b.n	8005f90 <_ZN6tflite12_GLOBAL__N_116GetTensorAtIndexEPK13TfLiteContexti+0x2c>
  } else {
    return context->GetTensor(context, tensor_index);
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005f86:	6839      	ldr	r1, [r7, #0]
 8005f88:	6878      	ldr	r0, [r7, #4]
 8005f8a:	4798      	blx	r3
 8005f8c:	4603      	mov	r3, r0
 8005f8e:	bf00      	nop
  }
}
 8005f90:	4618      	mov	r0, r3
 8005f92:	3708      	adds	r7, #8
 8005f94:	46bd      	mov	sp, r7
 8005f96:	bd80      	pop	{r7, pc}

08005f98 <_ZN6tflite12_GLOBAL__N_122ValidateTensorIndexingEPK13TfLiteContextiiPKi>:
}

// Same as above but returns -1 for invalid inputs instead of status + logging
// error.
inline int ValidateTensorIndexing(const TfLiteContext* context, int index,
                                  int max_size, const int* tensor_indices) {
 8005f98:	b480      	push	{r7}
 8005f9a:	b087      	sub	sp, #28
 8005f9c:	af00      	add	r7, sp, #0
 8005f9e:	60f8      	str	r0, [r7, #12]
 8005fa0:	60b9      	str	r1, [r7, #8]
 8005fa2:	607a      	str	r2, [r7, #4]
 8005fa4:	603b      	str	r3, [r7, #0]
  if (index >= 0 && index < max_size) {
 8005fa6:	68bb      	ldr	r3, [r7, #8]
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	db0f      	blt.n	8005fcc <_ZN6tflite12_GLOBAL__N_122ValidateTensorIndexingEPK13TfLiteContextiiPKi+0x34>
 8005fac:	68ba      	ldr	r2, [r7, #8]
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	429a      	cmp	r2, r3
 8005fb2:	da0b      	bge.n	8005fcc <_ZN6tflite12_GLOBAL__N_122ValidateTensorIndexingEPK13TfLiteContextiiPKi+0x34>
    const int tensor_index = tensor_indices[index];
 8005fb4:	68bb      	ldr	r3, [r7, #8]
 8005fb6:	009b      	lsls	r3, r3, #2
 8005fb8:	683a      	ldr	r2, [r7, #0]
 8005fba:	4413      	add	r3, r2
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	617b      	str	r3, [r7, #20]
    if (tensor_index != kTfLiteOptionalTensor) {
 8005fc0:	697b      	ldr	r3, [r7, #20]
 8005fc2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005fc6:	d001      	beq.n	8005fcc <_ZN6tflite12_GLOBAL__N_122ValidateTensorIndexingEPK13TfLiteContextiiPKi+0x34>
      return tensor_index;
 8005fc8:	697b      	ldr	r3, [r7, #20]
 8005fca:	e001      	b.n	8005fd0 <_ZN6tflite12_GLOBAL__N_122ValidateTensorIndexingEPK13TfLiteContextiiPKi+0x38>
    }
  }
  return -1;
 8005fcc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005fd0:	4618      	mov	r0, r3
 8005fd2:	371c      	adds	r7, #28
 8005fd4:	46bd      	mov	sp, r7
 8005fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fda:	4770      	bx	lr

08005fdc <_ZN6tflite12_GLOBAL__N_115GetMutableInputEPK13TfLiteContextPK10TfLiteNodei>:

inline TfLiteTensor* GetMutableInput(const TfLiteContext* context,
                                     const TfLiteNode* node, int index) {
 8005fdc:	b580      	push	{r7, lr}
 8005fde:	b086      	sub	sp, #24
 8005fe0:	af00      	add	r7, sp, #0
 8005fe2:	60f8      	str	r0, [r7, #12]
 8005fe4:	60b9      	str	r1, [r7, #8]
 8005fe6:	607a      	str	r2, [r7, #4]
  const int tensor_index = ValidateTensorIndexing(
      context, index, node->inputs->size, node->inputs->data);
 8005fe8:	68bb      	ldr	r3, [r7, #8]
 8005fea:	681b      	ldr	r3, [r3, #0]
  const int tensor_index = ValidateTensorIndexing(
 8005fec:	681a      	ldr	r2, [r3, #0]
      context, index, node->inputs->size, node->inputs->data);
 8005fee:	68bb      	ldr	r3, [r7, #8]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	3304      	adds	r3, #4
  const int tensor_index = ValidateTensorIndexing(
 8005ff4:	6879      	ldr	r1, [r7, #4]
 8005ff6:	68f8      	ldr	r0, [r7, #12]
 8005ff8:	f7ff ffce 	bl	8005f98 <_ZN6tflite12_GLOBAL__N_122ValidateTensorIndexingEPK13TfLiteContextiiPKi>
 8005ffc:	6178      	str	r0, [r7, #20]
  if (tensor_index < 0) {
 8005ffe:	697b      	ldr	r3, [r7, #20]
 8006000:	2b00      	cmp	r3, #0
 8006002:	da01      	bge.n	8006008 <_ZN6tflite12_GLOBAL__N_115GetMutableInputEPK13TfLiteContextPK10TfLiteNodei+0x2c>
    return nullptr;
 8006004:	2300      	movs	r3, #0
 8006006:	e005      	b.n	8006014 <_ZN6tflite12_GLOBAL__N_115GetMutableInputEPK13TfLiteContextPK10TfLiteNodei+0x38>
  }
  return GetTensorAtIndex(context, tensor_index);
 8006008:	6979      	ldr	r1, [r7, #20]
 800600a:	68f8      	ldr	r0, [r7, #12]
 800600c:	f7ff ffaa 	bl	8005f64 <_ZN6tflite12_GLOBAL__N_116GetTensorAtIndexEPK13TfLiteContexti>
 8006010:	4603      	mov	r3, r0
 8006012:	bf00      	nop
}
 8006014:	4618      	mov	r0, r3
 8006016:	3718      	adds	r7, #24
 8006018:	46bd      	mov	sp, r7
 800601a:	bd80      	pop	{r7, pc}

0800601c <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>:
}

}  // anonymous namespace.

const TfLiteTensor* GetInput(const TfLiteContext* context,
                             const TfLiteNode* node, int index) {
 800601c:	b580      	push	{r7, lr}
 800601e:	b084      	sub	sp, #16
 8006020:	af00      	add	r7, sp, #0
 8006022:	60f8      	str	r0, [r7, #12]
 8006024:	60b9      	str	r1, [r7, #8]
 8006026:	607a      	str	r2, [r7, #4]
  return GetMutableInput(context, node, index);
 8006028:	687a      	ldr	r2, [r7, #4]
 800602a:	68b9      	ldr	r1, [r7, #8]
 800602c:	68f8      	ldr	r0, [r7, #12]
 800602e:	f7ff ffd5 	bl	8005fdc <_ZN6tflite12_GLOBAL__N_115GetMutableInputEPK13TfLiteContextPK10TfLiteNodei>
 8006032:	4603      	mov	r3, r0
}
 8006034:	4618      	mov	r0, r3
 8006036:	3710      	adds	r7, #16
 8006038:	46bd      	mov	sp, r7
 800603a:	bd80      	pop	{r7, pc}

0800603c <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei>:
  if (tensor == nullptr) return nullptr;
  return tensor->is_variable ? tensor : nullptr;
}

TfLiteTensor* GetOutput(TfLiteContext* context, const TfLiteNode* node,
                        int index) {
 800603c:	b580      	push	{r7, lr}
 800603e:	b086      	sub	sp, #24
 8006040:	af00      	add	r7, sp, #0
 8006042:	60f8      	str	r0, [r7, #12]
 8006044:	60b9      	str	r1, [r7, #8]
 8006046:	607a      	str	r2, [r7, #4]
  const int tensor_index = ValidateTensorIndexing(
      context, index, node->outputs->size, node->outputs->data);
 8006048:	68bb      	ldr	r3, [r7, #8]
 800604a:	685b      	ldr	r3, [r3, #4]
  const int tensor_index = ValidateTensorIndexing(
 800604c:	681a      	ldr	r2, [r3, #0]
      context, index, node->outputs->size, node->outputs->data);
 800604e:	68bb      	ldr	r3, [r7, #8]
 8006050:	685b      	ldr	r3, [r3, #4]
 8006052:	3304      	adds	r3, #4
  const int tensor_index = ValidateTensorIndexing(
 8006054:	6879      	ldr	r1, [r7, #4]
 8006056:	68f8      	ldr	r0, [r7, #12]
 8006058:	f7ff ff9e 	bl	8005f98 <_ZN6tflite12_GLOBAL__N_122ValidateTensorIndexingEPK13TfLiteContextiiPKi>
 800605c:	6178      	str	r0, [r7, #20]
  if (tensor_index < 0) {
 800605e:	697b      	ldr	r3, [r7, #20]
 8006060:	2b00      	cmp	r3, #0
 8006062:	da01      	bge.n	8006068 <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei+0x2c>
    return nullptr;
 8006064:	2300      	movs	r3, #0
 8006066:	e005      	b.n	8006074 <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei+0x38>
  }
  return GetTensorAtIndex(context, tensor_index);
 8006068:	6979      	ldr	r1, [r7, #20]
 800606a:	68f8      	ldr	r0, [r7, #12]
 800606c:	f7ff ff7a 	bl	8005f64 <_ZN6tflite12_GLOBAL__N_116GetTensorAtIndexEPK13TfLiteContexti>
 8006070:	4603      	mov	r3, r0
 8006072:	bf00      	nop
}
 8006074:	4618      	mov	r0, r3
 8006076:	3718      	adds	r7, #24
 8006078:	46bd      	mov	sp, r7
 800607a:	bd80      	pop	{r7, pc}

0800607c <_ZN6tflite22GetOptionalInputTensorEPK13TfLiteContextPK10TfLiteNodei>:
  *tensor = GetTensorAtIndex(context, tensor_index);
  return kTfLiteOk;
}

const TfLiteTensor* GetOptionalInputTensor(const TfLiteContext* context,
                                           const TfLiteNode* node, int index) {
 800607c:	b580      	push	{r7, lr}
 800607e:	b084      	sub	sp, #16
 8006080:	af00      	add	r7, sp, #0
 8006082:	60f8      	str	r0, [r7, #12]
 8006084:	60b9      	str	r1, [r7, #8]
 8006086:	607a      	str	r2, [r7, #4]
  return GetInput(context, node, index);
 8006088:	687a      	ldr	r2, [r7, #4]
 800608a:	68b9      	ldr	r1, [r7, #8]
 800608c:	68f8      	ldr	r0, [r7, #12]
 800608e:	f7ff ffc5 	bl	800601c <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
 8006092:	4603      	mov	r3, r0
}
 8006094:	4618      	mov	r0, r3
 8006096:	3710      	adds	r7, #16
 8006098:	46bd      	mov	sp, r7
 800609a:	bd80      	pop	{r7, pc}

0800609c <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i>:
    TfLiteContext* context, const TfLiteTensor* input,
    const TfLiteTensor* filter, const TfLiteTensor* bias, TfLiteTensor* output,
    const TfLiteFusedActivation& activation, int32_t* multiplier, int* shift,
    int32_t* output_activation_min, int32_t* output_activation_max,
    int32_t* per_channel_multiplier, int32_t* per_channel_shift,
    int num_channels) {
 800609c:	b5b0      	push	{r4, r5, r7, lr}
 800609e:	b09c      	sub	sp, #112	; 0x70
 80060a0:	af04      	add	r7, sp, #16
 80060a2:	60f8      	str	r0, [r7, #12]
 80060a4:	60b9      	str	r1, [r7, #8]
 80060a6:	607a      	str	r2, [r7, #4]
 80060a8:	603b      	str	r3, [r7, #0]
  TF_LITE_ENSURE_EQ(context, input->quantization.type,
 80060aa:	68bb      	ldr	r3, [r7, #8]
 80060ac:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80060b0:	2b01      	cmp	r3, #1
 80060b2:	d013      	beq.n	80060dc <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0x40>
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	695c      	ldr	r4, [r3, #20]
 80060b8:	68bb      	ldr	r3, [r7, #8]
 80060ba:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80060be:	461a      	mov	r2, r3
 80060c0:	2301      	movs	r3, #1
 80060c2:	9303      	str	r3, [sp, #12]
 80060c4:	9202      	str	r2, [sp, #8]
 80060c6:	4b98      	ldr	r3, [pc, #608]	; (8006328 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0x28c>)
 80060c8:	9301      	str	r3, [sp, #4]
 80060ca:	4b98      	ldr	r3, [pc, #608]	; (800632c <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0x290>)
 80060cc:	9300      	str	r3, [sp, #0]
 80060ce:	23da      	movs	r3, #218	; 0xda
 80060d0:	4a97      	ldr	r2, [pc, #604]	; (8006330 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0x294>)
 80060d2:	4998      	ldr	r1, [pc, #608]	; (8006334 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0x298>)
 80060d4:	68f8      	ldr	r0, [r7, #12]
 80060d6:	47a0      	blx	r4
 80060d8:	2301      	movs	r3, #1
 80060da:	e173      	b.n	80063c4 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0x328>
                    kTfLiteAffineQuantization);
  TF_LITE_ENSURE_EQ(context, filter->quantization.type,
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80060e2:	2b01      	cmp	r3, #1
 80060e4:	d013      	beq.n	800610e <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0x72>
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	695c      	ldr	r4, [r3, #20]
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80060f0:	461a      	mov	r2, r3
 80060f2:	2301      	movs	r3, #1
 80060f4:	9303      	str	r3, [sp, #12]
 80060f6:	9202      	str	r2, [sp, #8]
 80060f8:	4b8b      	ldr	r3, [pc, #556]	; (8006328 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0x28c>)
 80060fa:	9301      	str	r3, [sp, #4]
 80060fc:	4b8e      	ldr	r3, [pc, #568]	; (8006338 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0x29c>)
 80060fe:	9300      	str	r3, [sp, #0]
 8006100:	23dc      	movs	r3, #220	; 0xdc
 8006102:	4a8b      	ldr	r2, [pc, #556]	; (8006330 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0x294>)
 8006104:	498b      	ldr	r1, [pc, #556]	; (8006334 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0x298>)
 8006106:	68f8      	ldr	r0, [r7, #12]
 8006108:	47a0      	blx	r4
 800610a:	2301      	movs	r3, #1
 800610c:	e15a      	b.n	80063c4 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0x328>
  // quantization is properly populated.
  // TF_LITE_ENSURE_EQ(context, bias->quantization.type,
  // kTfLiteAffineQuantization);

  // Check data type.
  const auto* affine_quantization =
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006112:	65bb      	str	r3, [r7, #88]	; 0x58
      reinterpret_cast<TfLiteAffineQuantization*>(filter->quantization.params);
  TF_LITE_ENSURE(context, affine_quantization);
 8006114:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006116:	2b00      	cmp	r3, #0
 8006118:	d10a      	bne.n	8006130 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0x94>
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	695c      	ldr	r4, [r3, #20]
 800611e:	4b87      	ldr	r3, [pc, #540]	; (800633c <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0x2a0>)
 8006120:	9300      	str	r3, [sp, #0]
 8006122:	23e7      	movs	r3, #231	; 0xe7
 8006124:	4a82      	ldr	r2, [pc, #520]	; (8006330 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0x294>)
 8006126:	4986      	ldr	r1, [pc, #536]	; (8006340 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0x2a4>)
 8006128:	68f8      	ldr	r0, [r7, #12]
 800612a:	47a0      	blx	r4
 800612c:	2301      	movs	r3, #1
 800612e:	e149      	b.n	80063c4 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0x328>
  TF_LITE_ENSURE(context, affine_quantization->scale);
 8006130:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	2b00      	cmp	r3, #0
 8006136:	d10a      	bne.n	800614e <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0xb2>
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	695c      	ldr	r4, [r3, #20]
 800613c:	4b81      	ldr	r3, [pc, #516]	; (8006344 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0x2a8>)
 800613e:	9300      	str	r3, [sp, #0]
 8006140:	23e8      	movs	r3, #232	; 0xe8
 8006142:	4a7b      	ldr	r2, [pc, #492]	; (8006330 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0x294>)
 8006144:	497e      	ldr	r1, [pc, #504]	; (8006340 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0x2a4>)
 8006146:	68f8      	ldr	r0, [r7, #12]
 8006148:	47a0      	blx	r4
 800614a:	2301      	movs	r3, #1
 800614c:	e13a      	b.n	80063c4 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0x328>
  const bool is_per_channel = affine_quantization->scale->size > 1;
 800614e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	2b01      	cmp	r3, #1
 8006156:	bfcc      	ite	gt
 8006158:	2301      	movgt	r3, #1
 800615a:	2300      	movle	r3, #0
 800615c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
  if (is_per_channel) {
 8006160:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006164:	2b00      	cmp	r3, #0
 8006166:	d067      	beq.n	8006238 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0x19c>
    //  Currently only Int8/Int16 is supported for per channel quantization.
    TF_LITE_ENSURE(context,
 8006168:	68bb      	ldr	r3, [r7, #8]
 800616a:	781b      	ldrb	r3, [r3, #0]
 800616c:	2b09      	cmp	r3, #9
 800616e:	d00e      	beq.n	800618e <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0xf2>
 8006170:	68bb      	ldr	r3, [r7, #8]
 8006172:	781b      	ldrb	r3, [r3, #0]
 8006174:	2b07      	cmp	r3, #7
 8006176:	d00a      	beq.n	800618e <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0xf2>
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	695c      	ldr	r4, [r3, #20]
 800617c:	4b72      	ldr	r3, [pc, #456]	; (8006348 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0x2ac>)
 800617e:	9300      	str	r3, [sp, #0]
 8006180:	23ec      	movs	r3, #236	; 0xec
 8006182:	4a6b      	ldr	r2, [pc, #428]	; (8006330 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0x294>)
 8006184:	496e      	ldr	r1, [pc, #440]	; (8006340 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0x2a4>)
 8006186:	68f8      	ldr	r0, [r7, #12]
 8006188:	47a0      	blx	r4
 800618a:	2301      	movs	r3, #1
 800618c:	e11a      	b.n	80063c4 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0x328>
                   input->type == kTfLiteInt8 || input->type == kTfLiteInt16);
    TF_LITE_ENSURE_EQ(context, filter->type, kTfLiteInt8);
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	781b      	ldrb	r3, [r3, #0]
 8006192:	2b09      	cmp	r3, #9
 8006194:	d012      	beq.n	80061bc <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0x120>
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	695c      	ldr	r4, [r3, #20]
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	781b      	ldrb	r3, [r3, #0]
 800619e:	461a      	mov	r2, r3
 80061a0:	2309      	movs	r3, #9
 80061a2:	9303      	str	r3, [sp, #12]
 80061a4:	9202      	str	r2, [sp, #8]
 80061a6:	4b69      	ldr	r3, [pc, #420]	; (800634c <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0x2b0>)
 80061a8:	9301      	str	r3, [sp, #4]
 80061aa:	4b69      	ldr	r3, [pc, #420]	; (8006350 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0x2b4>)
 80061ac:	9300      	str	r3, [sp, #0]
 80061ae:	23ee      	movs	r3, #238	; 0xee
 80061b0:	4a5f      	ldr	r2, [pc, #380]	; (8006330 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0x294>)
 80061b2:	4960      	ldr	r1, [pc, #384]	; (8006334 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0x298>)
 80061b4:	68f8      	ldr	r0, [r7, #12]
 80061b6:	47a0      	blx	r4
 80061b8:	2301      	movs	r3, #1
 80061ba:	e103      	b.n	80063c4 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0x328>
    TF_LITE_ENSURE_EQ(context, affine_quantization->scale->size, num_channels);
 80061bc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 80061c6:	429a      	cmp	r2, r3
 80061c8:	d013      	beq.n	80061f2 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0x156>
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	695c      	ldr	r4, [r3, #20]
 80061ce:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 80061d8:	9203      	str	r2, [sp, #12]
 80061da:	9302      	str	r3, [sp, #8]
 80061dc:	4b5d      	ldr	r3, [pc, #372]	; (8006354 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0x2b8>)
 80061de:	9301      	str	r3, [sp, #4]
 80061e0:	4b5d      	ldr	r3, [pc, #372]	; (8006358 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0x2bc>)
 80061e2:	9300      	str	r3, [sp, #0]
 80061e4:	23ef      	movs	r3, #239	; 0xef
 80061e6:	4a52      	ldr	r2, [pc, #328]	; (8006330 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0x294>)
 80061e8:	4952      	ldr	r1, [pc, #328]	; (8006334 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0x298>)
 80061ea:	68f8      	ldr	r0, [r7, #12]
 80061ec:	47a0      	blx	r4
 80061ee:	2301      	movs	r3, #1
 80061f0:	e0e8      	b.n	80063c4 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0x328>
    TF_LITE_ENSURE_EQ(
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	689a      	ldr	r2, [r3, #8]
 80061f6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80061f8:	689b      	ldr	r3, [r3, #8]
 80061fa:	009b      	lsls	r3, r3, #2
 80061fc:	4413      	add	r3, r2
 80061fe:	685b      	ldr	r3, [r3, #4]
 8006200:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8006204:	429a      	cmp	r2, r3
 8006206:	d017      	beq.n	8006238 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0x19c>
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	695c      	ldr	r4, [r3, #20]
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	689a      	ldr	r2, [r3, #8]
 8006210:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006212:	689b      	ldr	r3, [r3, #8]
 8006214:	009b      	lsls	r3, r3, #2
 8006216:	4413      	add	r3, r2
 8006218:	685b      	ldr	r3, [r3, #4]
 800621a:	9303      	str	r3, [sp, #12]
 800621c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006220:	9302      	str	r3, [sp, #8]
 8006222:	4b4e      	ldr	r3, [pc, #312]	; (800635c <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0x2c0>)
 8006224:	9301      	str	r3, [sp, #4]
 8006226:	4b4b      	ldr	r3, [pc, #300]	; (8006354 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0x2b8>)
 8006228:	9300      	str	r3, [sp, #0]
 800622a:	23f0      	movs	r3, #240	; 0xf0
 800622c:	4a40      	ldr	r2, [pc, #256]	; (8006330 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0x294>)
 800622e:	4941      	ldr	r1, [pc, #260]	; (8006334 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0x298>)
 8006230:	68f8      	ldr	r0, [r7, #12]
 8006232:	47a0      	blx	r4
 8006234:	2301      	movs	r3, #1
 8006236:	e0c5      	b.n	80063c4 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0x328>
        context, num_channels,
        filter->dims->data[affine_quantization->quantized_dimension]);
  }

  // Populate multiplier and shift using affine quantization.
  const float input_scale = input->params.scale;
 8006238:	68bb      	ldr	r3, [r7, #8]
 800623a:	68db      	ldr	r3, [r3, #12]
 800623c:	653b      	str	r3, [r7, #80]	; 0x50
  const float output_scale = output->params.scale;
 800623e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006240:	68db      	ldr	r3, [r3, #12]
 8006242:	64fb      	str	r3, [r7, #76]	; 0x4c
  const float* filter_scales = affine_quantization->scale->data;
 8006244:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	3304      	adds	r3, #4
 800624a:	64bb      	str	r3, [r7, #72]	; 0x48
  for (int i = 0; i < num_channels; ++i) {
 800624c:	2300      	movs	r3, #0
 800624e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006250:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006252:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006256:	429a      	cmp	r2, r3
 8006258:	da47      	bge.n	80062ea <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0x24e>
    // If per-tensor quantization parameter is specified, broadcast it along the
    // quantization dimension (channels_out).
    const float scale = is_per_channel ? filter_scales[i] : filter_scales[0];
 800625a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800625e:	2b00      	cmp	r3, #0
 8006260:	d005      	beq.n	800626e <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0x1d2>
 8006262:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006264:	009b      	lsls	r3, r3, #2
 8006266:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006268:	4413      	add	r3, r2
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	e001      	b.n	8006272 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0x1d6>
 800626e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	647b      	str	r3, [r7, #68]	; 0x44
    const double filter_scale = static_cast<double>(scale);
 8006274:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8006276:	f7fa f979 	bl	800056c <__aeabi_f2d>
 800627a:	4602      	mov	r2, r0
 800627c:	460b      	mov	r3, r1
 800627e:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    const double effective_output_scale = static_cast<double>(input_scale) *
 8006282:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8006284:	f7fa f972 	bl	800056c <__aeabi_f2d>
 8006288:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800628c:	f7fa f9c6 	bl	800061c <__aeabi_dmul>
 8006290:	4602      	mov	r2, r0
 8006292:	460b      	mov	r3, r1
 8006294:	4614      	mov	r4, r2
 8006296:	461d      	mov	r5, r3
                                          filter_scale /
                                          static_cast<double>(output_scale);
 8006298:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800629a:	f7fa f967 	bl	800056c <__aeabi_f2d>
 800629e:	4602      	mov	r2, r0
 80062a0:	460b      	mov	r3, r1
    const double effective_output_scale = static_cast<double>(input_scale) *
 80062a2:	4620      	mov	r0, r4
 80062a4:	4629      	mov	r1, r5
 80062a6:	f7fa fae3 	bl	8000870 <__aeabi_ddiv>
 80062aa:	4602      	mov	r2, r0
 80062ac:	460b      	mov	r3, r1
 80062ae:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    int32_t significand;
    int channel_shift;
    QuantizeMultiplier(effective_output_scale, &significand, &channel_shift);
 80062b2:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80062b6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80062ba:	4611      	mov	r1, r2
 80062bc:	4618      	mov	r0, r3
 80062be:	ed97 0b0c 	vldr	d0, [r7, #48]	; 0x30
 80062c2:	f7ff fc2d 	bl	8005b20 <_ZN6tflite18QuantizeMultiplierEdPlPi>
    per_channel_multiplier[i] = significand;
 80062c6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80062c8:	009b      	lsls	r3, r3, #2
 80062ca:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 80062ce:	4413      	add	r3, r2
 80062d0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80062d2:	601a      	str	r2, [r3, #0]
    per_channel_shift[i] = channel_shift;
 80062d4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80062d6:	009b      	lsls	r3, r3, #2
 80062d8:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 80062dc:	4413      	add	r3, r2
 80062de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80062e0:	601a      	str	r2, [r3, #0]
  for (int i = 0; i < num_channels; ++i) {
 80062e2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80062e4:	3301      	adds	r3, #1
 80062e6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80062e8:	e7b2      	b.n	8006250 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0x1b4>
  }

  // Populate scalar quantization parameters.
  // This check on legacy quantization parameters is kept only for backward
  // compatibility.
  if (input->type == kTfLiteUInt8) {
 80062ea:	68bb      	ldr	r3, [r7, #8]
 80062ec:	781b      	ldrb	r3, [r3, #0]
 80062ee:	2b03      	cmp	r3, #3
 80062f0:	d146      	bne.n	8006380 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0x2e4>
    // Check bias scale == input scale * filter scale.
    double real_multiplier = 0.0;
 80062f2:	f04f 0200 	mov.w	r2, #0
 80062f6:	f04f 0300 	mov.w	r3, #0
 80062fa:	e9c7 2306 	strd	r2, r3, [r7, #24]
    TF_LITE_ENSURE_STATUS(GetQuantizedConvolutionMultipler(
 80062fe:	f107 0318 	add.w	r3, r7, #24
 8006302:	9301      	str	r3, [sp, #4]
 8006304:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006306:	9300      	str	r3, [sp, #0]
 8006308:	683b      	ldr	r3, [r7, #0]
 800630a:	687a      	ldr	r2, [r7, #4]
 800630c:	68b9      	ldr	r1, [r7, #8]
 800630e:	68f8      	ldr	r0, [r7, #12]
 8006310:	f000 f85e 	bl	80063d0 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd>
 8006314:	4603      	mov	r3, r0
 8006316:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800631a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800631e:	2b00      	cmp	r3, #0
 8006320:	d01e      	beq.n	8006360 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0x2c4>
 8006322:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006326:	e04d      	b.n	80063c4 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0x328>
 8006328:	080147b8 	.word	0x080147b8
 800632c:	080147d4 	.word	0x080147d4
 8006330:	08014760 	.word	0x08014760
 8006334:	0801479c 	.word	0x0801479c
 8006338:	080147f0 	.word	0x080147f0
 800633c:	08014824 	.word	0x08014824
 8006340:	0801480c 	.word	0x0801480c
 8006344:	08014838 	.word	0x08014838
 8006348:	08014854 	.word	0x08014854
 800634c:	08014890 	.word	0x08014890
 8006350:	0801489c 	.word	0x0801489c
 8006354:	080148ac 	.word	0x080148ac
 8006358:	080148bc 	.word	0x080148bc
 800635c:	080148e0 	.word	0x080148e0
        context, input, filter, bias, output, &real_multiplier));
    int exponent;

    // Populate quantization parameters with multiplier and shift.
    QuantizeMultiplier(real_multiplier, multiplier, &exponent);
 8006360:	ed97 7b06 	vldr	d7, [r7, #24]
 8006364:	f107 0314 	add.w	r3, r7, #20
 8006368:	4619      	mov	r1, r3
 800636a:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 800636c:	eeb0 0a47 	vmov.f32	s0, s14
 8006370:	eef0 0a67 	vmov.f32	s1, s15
 8006374:	f7ff fbd4 	bl	8005b20 <_ZN6tflite18QuantizeMultiplierEdPlPi>
    *shift = -exponent;
 8006378:	697b      	ldr	r3, [r7, #20]
 800637a:	425a      	negs	r2, r3
 800637c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800637e:	601a      	str	r2, [r3, #0]
  }
  if (input->type == kTfLiteInt8 || input->type == kTfLiteUInt8 ||
 8006380:	68bb      	ldr	r3, [r7, #8]
 8006382:	781b      	ldrb	r3, [r3, #0]
 8006384:	2b09      	cmp	r3, #9
 8006386:	d007      	beq.n	8006398 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0x2fc>
 8006388:	68bb      	ldr	r3, [r7, #8]
 800638a:	781b      	ldrb	r3, [r3, #0]
 800638c:	2b03      	cmp	r3, #3
 800638e:	d003      	beq.n	8006398 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0x2fc>
      input->type == kTfLiteInt16) {
 8006390:	68bb      	ldr	r3, [r7, #8]
 8006392:	781b      	ldrb	r3, [r3, #0]
  if (input->type == kTfLiteInt8 || input->type == kTfLiteUInt8 ||
 8006394:	2b07      	cmp	r3, #7
 8006396:	d114      	bne.n	80063c2 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0x326>
    TF_LITE_ENSURE_STATUS(CalculateActivationRangeQuantized(
 8006398:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800639a:	7819      	ldrb	r1, [r3, #0]
 800639c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80063a0:	9300      	str	r3, [sp, #0]
 80063a2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80063a6:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80063a8:	68f8      	ldr	r0, [r7, #12]
 80063aa:	f000 fa03 	bl	80067b4 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_>
 80063ae:	4603      	mov	r3, r0
 80063b0:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 80063b4:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d002      	beq.n	80063c2 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0x326>
 80063bc:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80063c0:	e000      	b.n	80063c4 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0x328>
        context, activation, output, output_activation_min,
        output_activation_max));
  }
  return kTfLiteOk;
 80063c2:	2300      	movs	r3, #0
}
 80063c4:	4618      	mov	r0, r3
 80063c6:	3760      	adds	r7, #96	; 0x60
 80063c8:	46bd      	mov	sp, r7
 80063ca:	bdb0      	pop	{r4, r5, r7, pc}
 80063cc:	0000      	movs	r0, r0
	...

080063d0 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd>:
TfLiteStatus GetQuantizedConvolutionMultipler(TfLiteContext* context,
                                              const TfLiteTensor* input,
                                              const TfLiteTensor* filter,
                                              const TfLiteTensor* bias,
                                              TfLiteTensor* output,
                                              double* multiplier) {
 80063d0:	b5b0      	push	{r4, r5, r7, lr}
 80063d2:	b08e      	sub	sp, #56	; 0x38
 80063d4:	af02      	add	r7, sp, #8
 80063d6:	60f8      	str	r0, [r7, #12]
 80063d8:	60b9      	str	r1, [r7, #8]
 80063da:	607a      	str	r2, [r7, #4]
 80063dc:	603b      	str	r3, [r7, #0]
  const double input_product_scale = static_cast<double>(input->params.scale) *
 80063de:	68bb      	ldr	r3, [r7, #8]
 80063e0:	68db      	ldr	r3, [r3, #12]
 80063e2:	4618      	mov	r0, r3
 80063e4:	f7fa f8c2 	bl	800056c <__aeabi_f2d>
 80063e8:	4604      	mov	r4, r0
 80063ea:	460d      	mov	r5, r1
                                     static_cast<double>(filter->params.scale);
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	68db      	ldr	r3, [r3, #12]
 80063f0:	4618      	mov	r0, r3
 80063f2:	f7fa f8bb 	bl	800056c <__aeabi_f2d>
 80063f6:	4602      	mov	r2, r0
 80063f8:	460b      	mov	r3, r1
  const double input_product_scale = static_cast<double>(input->params.scale) *
 80063fa:	4620      	mov	r0, r4
 80063fc:	4629      	mov	r1, r5
 80063fe:	f7fa f90d 	bl	800061c <__aeabi_dmul>
 8006402:	4602      	mov	r2, r0
 8006404:	460b      	mov	r3, r1
 8006406:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
  // The following conditions must be guaranteed by the training pipeline.
  if (bias) {
 800640a:	683b      	ldr	r3, [r7, #0]
 800640c:	2b00      	cmp	r3, #0
 800640e:	d04b      	beq.n	80064a8 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0xd8>
    const double bias_scale = static_cast<double>(bias->params.scale);
 8006410:	683b      	ldr	r3, [r7, #0]
 8006412:	68db      	ldr	r3, [r3, #12]
 8006414:	4618      	mov	r0, r3
 8006416:	f7fa f8a9 	bl	800056c <__aeabi_f2d>
 800641a:	4602      	mov	r2, r0
 800641c:	460b      	mov	r3, r1
 800641e:	e9c7 2308 	strd	r2, r3, [r7, #32]
    // bias * (bias_scale - input_product_scale) / output_scale should be
    // a small number for an integer.
    // Since normally bias should be within a small range.
    // We should expect (bias_scale - input_product_scale) / output_scale to
    // be a small number like 0.02.
    const double scale_diff = std::abs(input_product_scale - bias_scale);
 8006422:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006426:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800642a:	f7f9 ff3f 	bl	80002ac <__aeabi_dsub>
 800642e:	4602      	mov	r2, r0
 8006430:	460b      	mov	r3, r1
 8006432:	ec43 2b17 	vmov	d7, r2, r3
 8006436:	eeb0 0a47 	vmov.f32	s0, s14
 800643a:	eef0 0a67 	vmov.f32	s1, s15
 800643e:	f7ff fd7d 	bl	8005f3c <_ZSt3absd>
 8006442:	ed87 0b06 	vstr	d0, [r7, #24]
    const double output_scale = static_cast<double>(output->params.scale);
 8006446:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006448:	68db      	ldr	r3, [r3, #12]
 800644a:	4618      	mov	r0, r3
 800644c:	f7fa f88e 	bl	800056c <__aeabi_f2d>
 8006450:	4602      	mov	r2, r0
 8006452:	460b      	mov	r3, r1
 8006454:	e9c7 2304 	strd	r2, r3, [r7, #16]

    TF_LITE_ENSURE(context, scale_diff / output_scale <= 0.02);
 8006458:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800645c:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8006460:	f7fa fa06 	bl	8000870 <__aeabi_ddiv>
 8006464:	4602      	mov	r2, r0
 8006466:	460b      	mov	r3, r1
 8006468:	4610      	mov	r0, r2
 800646a:	4619      	mov	r1, r3
 800646c:	2301      	movs	r3, #1
 800646e:	461c      	mov	r4, r3
 8006470:	a318      	add	r3, pc, #96	; (adr r3, 80064d4 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0x104>)
 8006472:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006476:	f7fa fb4d 	bl	8000b14 <__aeabi_dcmple>
 800647a:	4603      	mov	r3, r0
 800647c:	2b00      	cmp	r3, #0
 800647e:	d101      	bne.n	8006484 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0xb4>
 8006480:	2300      	movs	r3, #0
 8006482:	461c      	mov	r4, r3
 8006484:	b2e3      	uxtb	r3, r4
 8006486:	f083 0301 	eor.w	r3, r3, #1
 800648a:	b2db      	uxtb	r3, r3
 800648c:	2b00      	cmp	r3, #0
 800648e:	d00b      	beq.n	80064a8 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0xd8>
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	695c      	ldr	r4, [r3, #20]
 8006494:	4b0c      	ldr	r3, [pc, #48]	; (80064c8 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0xf8>)
 8006496:	9300      	str	r3, [sp, #0]
 8006498:	f44f 739f 	mov.w	r3, #318	; 0x13e
 800649c:	4a0b      	ldr	r2, [pc, #44]	; (80064cc <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0xfc>)
 800649e:	490c      	ldr	r1, [pc, #48]	; (80064d0 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0x100>)
 80064a0:	68f8      	ldr	r0, [r7, #12]
 80064a2:	47a0      	blx	r4
 80064a4:	2301      	movs	r3, #1
 80064a6:	e009      	b.n	80064bc <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0xec>
  }
  return GetQuantizedConvolutionMultipler(context, input, filter, output,
 80064a8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80064aa:	9300      	str	r3, [sp, #0]
 80064ac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80064ae:	687a      	ldr	r2, [r7, #4]
 80064b0:	68b9      	ldr	r1, [r7, #8]
 80064b2:	68f8      	ldr	r0, [r7, #12]
 80064b4:	f000 f812 	bl	80064dc <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd>
 80064b8:	4603      	mov	r3, r0
                                          multiplier);
 80064ba:	bf00      	nop
}
 80064bc:	4618      	mov	r0, r3
 80064be:	3730      	adds	r7, #48	; 0x30
 80064c0:	46bd      	mov	sp, r7
 80064c2:	bdb0      	pop	{r4, r5, r7, pc}
 80064c4:	f3af 8000 	nop.w
 80064c8:	08014920 	.word	0x08014920
 80064cc:	08014760 	.word	0x08014760
 80064d0:	0801480c 	.word	0x0801480c
 80064d4:	47ae147b 	.word	0x47ae147b
 80064d8:	3f947ae1 	.word	0x3f947ae1

080064dc <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd>:

TfLiteStatus GetQuantizedConvolutionMultipler(TfLiteContext* context,
                                              const TfLiteTensor* input,
                                              const TfLiteTensor* filter,
                                              TfLiteTensor* output,
                                              double* multiplier) {
 80064dc:	b590      	push	{r4, r7, lr}
 80064de:	b089      	sub	sp, #36	; 0x24
 80064e0:	af02      	add	r7, sp, #8
 80064e2:	60f8      	str	r0, [r7, #12]
 80064e4:	60b9      	str	r1, [r7, #8]
 80064e6:	607a      	str	r2, [r7, #4]
 80064e8:	603b      	str	r3, [r7, #0]
  const double input_product_scale =
      static_cast<double>(input->params.scale * filter->params.scale);
 80064ea:	68bb      	ldr	r3, [r7, #8]
 80064ec:	ed93 7a03 	vldr	s14, [r3, #12]
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	edd3 7a03 	vldr	s15, [r3, #12]
 80064f6:	ee67 7a27 	vmul.f32	s15, s14, s15
  const double input_product_scale =
 80064fa:	ee17 0a90 	vmov	r0, s15
 80064fe:	f7fa f835 	bl	800056c <__aeabi_f2d>
 8006502:	4602      	mov	r2, r0
 8006504:	460b      	mov	r3, r1
 8006506:	e9c7 2304 	strd	r2, r3, [r7, #16]
  TF_LITE_ENSURE(context, input_product_scale >= 0);
 800650a:	2301      	movs	r3, #1
 800650c:	461c      	mov	r4, r3
 800650e:	f04f 0200 	mov.w	r2, #0
 8006512:	f04f 0300 	mov.w	r3, #0
 8006516:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800651a:	f7fa fb05 	bl	8000b28 <__aeabi_dcmpge>
 800651e:	4603      	mov	r3, r0
 8006520:	2b00      	cmp	r3, #0
 8006522:	d101      	bne.n	8006528 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd+0x4c>
 8006524:	2300      	movs	r3, #0
 8006526:	461c      	mov	r4, r3
 8006528:	b2e3      	uxtb	r3, r4
 800652a:	f083 0301 	eor.w	r3, r3, #1
 800652e:	b2db      	uxtb	r3, r3
 8006530:	2b00      	cmp	r3, #0
 8006532:	d00b      	beq.n	800654c <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd+0x70>
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	695c      	ldr	r4, [r3, #20]
 8006538:	4b0f      	ldr	r3, [pc, #60]	; (8006578 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd+0x9c>)
 800653a:	9300      	str	r3, [sp, #0]
 800653c:	f240 134b 	movw	r3, #331	; 0x14b
 8006540:	4a0e      	ldr	r2, [pc, #56]	; (800657c <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd+0xa0>)
 8006542:	490f      	ldr	r1, [pc, #60]	; (8006580 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd+0xa4>)
 8006544:	68f8      	ldr	r0, [r7, #12]
 8006546:	47a0      	blx	r4
 8006548:	2301      	movs	r3, #1
 800654a:	e010      	b.n	800656e <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd+0x92>
  *multiplier = input_product_scale / static_cast<double>(output->params.scale);
 800654c:	683b      	ldr	r3, [r7, #0]
 800654e:	68db      	ldr	r3, [r3, #12]
 8006550:	4618      	mov	r0, r3
 8006552:	f7fa f80b 	bl	800056c <__aeabi_f2d>
 8006556:	4602      	mov	r2, r0
 8006558:	460b      	mov	r3, r1
 800655a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800655e:	f7fa f987 	bl	8000870 <__aeabi_ddiv>
 8006562:	4602      	mov	r2, r0
 8006564:	460b      	mov	r3, r1
 8006566:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006568:	e9c1 2300 	strd	r2, r3, [r1]

  return kTfLiteOk;
 800656c:	2300      	movs	r3, #0
}
 800656e:	4618      	mov	r0, r3
 8006570:	371c      	adds	r7, #28
 8006572:	46bd      	mov	sp, r7
 8006574:	bd90      	pop	{r4, r7, pc}
 8006576:	bf00      	nop
 8006578:	08014944 	.word	0x08014944
 800657c:	08014760 	.word	0x08014760
 8006580:	0801480c 	.word	0x0801480c

08006584 <_ZN6tflite12_GLOBAL__N_18QuantizeEP13TfLiteContextflfRl>:

namespace {

inline TfLiteStatus Quantize(TfLiteContext* context, float scale,
                             int32_t zero_point, float f, int32_t& q) {
 8006584:	b590      	push	{r4, r7, lr}
 8006586:	b08b      	sub	sp, #44	; 0x2c
 8006588:	af02      	add	r7, sp, #8
 800658a:	6178      	str	r0, [r7, #20]
 800658c:	ed87 0a04 	vstr	s0, [r7, #16]
 8006590:	60f9      	str	r1, [r7, #12]
 8006592:	edc7 0a02 	vstr	s1, [r7, #8]
 8006596:	607a      	str	r2, [r7, #4]
  const float tmp = TfLiteRound(f / scale);
 8006598:	ed97 7a02 	vldr	s14, [r7, #8]
 800659c:	edd7 7a04 	vldr	s15, [r7, #16]
 80065a0:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80065a4:	eeb0 0a66 	vmov.f32	s0, s13
 80065a8:	f7ff fc77 	bl	8005e9a <_ZN6tflite11TfLiteRoundIfEET_S1_>
 80065ac:	ed87 0a07 	vstr	s0, [r7, #28]
  const bool no_integer_overflow_from_quantization =
      (tmp >= static_cast<float>(std::numeric_limits<int32_t>::min()) &&
 80065b0:	f7fb fcca 	bl	8001f48 <_ZNSt14numeric_limitsIlE3minEv>
 80065b4:	ee07 0a90 	vmov	s15, r0
 80065b8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80065bc:	ed97 7a07 	vldr	s14, [r7, #28]
 80065c0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80065c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80065c8:	db0e      	blt.n	80065e8 <_ZN6tflite12_GLOBAL__N_18QuantizeEP13TfLiteContextflfRl+0x64>
       tmp <= static_cast<float>(std::numeric_limits<int32_t>::max()));
 80065ca:	f7fb fcc6 	bl	8001f5a <_ZNSt14numeric_limitsIlE3maxEv>
 80065ce:	ee07 0a90 	vmov	s15, r0
 80065d2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
      (tmp >= static_cast<float>(std::numeric_limits<int32_t>::min()) &&
 80065d6:	ed97 7a07 	vldr	s14, [r7, #28]
 80065da:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80065de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80065e2:	d801      	bhi.n	80065e8 <_ZN6tflite12_GLOBAL__N_18QuantizeEP13TfLiteContextflfRl+0x64>
 80065e4:	2301      	movs	r3, #1
 80065e6:	e000      	b.n	80065ea <_ZN6tflite12_GLOBAL__N_18QuantizeEP13TfLiteContextflfRl+0x66>
 80065e8:	2300      	movs	r3, #0
       tmp <= static_cast<float>(std::numeric_limits<int32_t>::max()));
 80065ea:	76fb      	strb	r3, [r7, #27]
  TF_LITE_ENSURE(context, no_integer_overflow_from_quantization);
 80065ec:	7efb      	ldrb	r3, [r7, #27]
 80065ee:	f083 0301 	eor.w	r3, r3, #1
 80065f2:	b2db      	uxtb	r3, r3
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d00b      	beq.n	8006610 <_ZN6tflite12_GLOBAL__N_18QuantizeEP13TfLiteContextflfRl+0x8c>
 80065f8:	697b      	ldr	r3, [r7, #20]
 80065fa:	695c      	ldr	r4, [r3, #20]
 80065fc:	4b0c      	ldr	r3, [pc, #48]	; (8006630 <_ZN6tflite12_GLOBAL__N_18QuantizeEP13TfLiteContextflfRl+0xac>)
 80065fe:	9300      	str	r3, [sp, #0]
 8006600:	f240 1359 	movw	r3, #345	; 0x159
 8006604:	4a0b      	ldr	r2, [pc, #44]	; (8006634 <_ZN6tflite12_GLOBAL__N_18QuantizeEP13TfLiteContextflfRl+0xb0>)
 8006606:	490c      	ldr	r1, [pc, #48]	; (8006638 <_ZN6tflite12_GLOBAL__N_18QuantizeEP13TfLiteContextflfRl+0xb4>)
 8006608:	6978      	ldr	r0, [r7, #20]
 800660a:	47a0      	blx	r4
 800660c:	2301      	movs	r3, #1
 800660e:	e00a      	b.n	8006626 <_ZN6tflite12_GLOBAL__N_18QuantizeEP13TfLiteContextflfRl+0xa2>
  q = zero_point + static_cast<int32_t>(tmp);
 8006610:	edd7 7a07 	vldr	s15, [r7, #28]
 8006614:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006618:	ee17 2a90 	vmov	r2, s15
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	441a      	add	r2, r3
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	601a      	str	r2, [r3, #0]
  return kTfLiteOk;
 8006624:	2300      	movs	r3, #0
}
 8006626:	4618      	mov	r0, r3
 8006628:	3724      	adds	r7, #36	; 0x24
 800662a:	46bd      	mov	sp, r7
 800662c:	bd90      	pop	{r4, r7, pc}
 800662e:	bf00      	nop
 8006630:	08014960 	.word	0x08014960
 8006634:	08014760 	.word	0x08014760
 8006638:	0801480c 	.word	0x0801480c

0800663c <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationllP12TfLiteTensorPlS6_>:

TfLiteStatus CalculateActivationRangeQuantizedImpl(
    TfLiteContext* context, TfLiteFusedActivation activation, int32_t qmin,
    int32_t qmax, TfLiteTensor* output, int32_t* act_min, int32_t* act_max) {
 800663c:	b580      	push	{r7, lr}
 800663e:	b08a      	sub	sp, #40	; 0x28
 8006640:	af00      	add	r7, sp, #0
 8006642:	60f8      	str	r0, [r7, #12]
 8006644:	607a      	str	r2, [r7, #4]
 8006646:	603b      	str	r3, [r7, #0]
 8006648:	460b      	mov	r3, r1
 800664a:	72fb      	strb	r3, [r7, #11]
  const auto scale = output->params.scale;
 800664c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800664e:	68db      	ldr	r3, [r3, #12]
 8006650:	627b      	str	r3, [r7, #36]	; 0x24
  const auto zero_point = output->params.zero_point;
 8006652:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006654:	691b      	ldr	r3, [r3, #16]
 8006656:	623b      	str	r3, [r7, #32]

  int32_t tmp_q;
  if (activation == kTfLiteActRelu) {
 8006658:	7afb      	ldrb	r3, [r7, #11]
 800665a:	2b01      	cmp	r3, #1
 800665c:	d120      	bne.n	80066a0 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationllP12TfLiteTensorPlS6_+0x64>
    TF_LITE_ENSURE_OK(context,
 800665e:	f107 0314 	add.w	r3, r7, #20
 8006662:	461a      	mov	r2, r3
 8006664:	eddf 0a52 	vldr	s1, [pc, #328]	; 80067b0 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationllP12TfLiteTensorPlS6_+0x174>
 8006668:	6a39      	ldr	r1, [r7, #32]
 800666a:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 800666e:	68f8      	ldr	r0, [r7, #12]
 8006670:	f7ff ff88 	bl	8006584 <_ZN6tflite12_GLOBAL__N_18QuantizeEP13TfLiteContextflfRl>
 8006674:	4603      	mov	r3, r0
 8006676:	76fb      	strb	r3, [r7, #27]
 8006678:	7efb      	ldrb	r3, [r7, #27]
 800667a:	2b00      	cmp	r3, #0
 800667c:	d001      	beq.n	8006682 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationllP12TfLiteTensorPlS6_+0x46>
 800667e:	7efb      	ldrb	r3, [r7, #27]
 8006680:	e091      	b.n	80067a6 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationllP12TfLiteTensorPlS6_+0x16a>
                      Quantize(context, scale, zero_point, 0.0, tmp_q));
    *act_min = std::max(qmin, tmp_q);
 8006682:	f107 0214 	add.w	r2, r7, #20
 8006686:	1d3b      	adds	r3, r7, #4
 8006688:	4611      	mov	r1, r2
 800668a:	4618      	mov	r0, r3
 800668c:	f000 f8fe 	bl	800688c <_ZSt3maxIlERKT_S2_S2_>
 8006690:	4603      	mov	r3, r0
 8006692:	681a      	ldr	r2, [r3, #0]
 8006694:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006696:	601a      	str	r2, [r3, #0]
    *act_max = qmax;
 8006698:	683a      	ldr	r2, [r7, #0]
 800669a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800669c:	601a      	str	r2, [r3, #0]
 800669e:	e081      	b.n	80067a4 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationllP12TfLiteTensorPlS6_+0x168>
  } else if (activation == kTfLiteActRelu6) {
 80066a0:	7afb      	ldrb	r3, [r7, #11]
 80066a2:	2b03      	cmp	r3, #3
 80066a4:	d13a      	bne.n	800671c <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationllP12TfLiteTensorPlS6_+0xe0>
    TF_LITE_ENSURE_OK(context,
 80066a6:	f107 0314 	add.w	r3, r7, #20
 80066aa:	461a      	mov	r2, r3
 80066ac:	eddf 0a40 	vldr	s1, [pc, #256]	; 80067b0 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationllP12TfLiteTensorPlS6_+0x174>
 80066b0:	6a39      	ldr	r1, [r7, #32]
 80066b2:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 80066b6:	68f8      	ldr	r0, [r7, #12]
 80066b8:	f7ff ff64 	bl	8006584 <_ZN6tflite12_GLOBAL__N_18QuantizeEP13TfLiteContextflfRl>
 80066bc:	4603      	mov	r3, r0
 80066be:	777b      	strb	r3, [r7, #29]
 80066c0:	7f7b      	ldrb	r3, [r7, #29]
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d001      	beq.n	80066ca <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationllP12TfLiteTensorPlS6_+0x8e>
 80066c6:	7f7b      	ldrb	r3, [r7, #29]
 80066c8:	e06d      	b.n	80067a6 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationllP12TfLiteTensorPlS6_+0x16a>
                      Quantize(context, scale, zero_point, 0.0, tmp_q));
    *act_min = std::max(qmin, tmp_q);
 80066ca:	f107 0214 	add.w	r2, r7, #20
 80066ce:	1d3b      	adds	r3, r7, #4
 80066d0:	4611      	mov	r1, r2
 80066d2:	4618      	mov	r0, r3
 80066d4:	f000 f8da 	bl	800688c <_ZSt3maxIlERKT_S2_S2_>
 80066d8:	4603      	mov	r3, r0
 80066da:	681a      	ldr	r2, [r3, #0]
 80066dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80066de:	601a      	str	r2, [r3, #0]
    TF_LITE_ENSURE_OK(context,
 80066e0:	f107 0314 	add.w	r3, r7, #20
 80066e4:	461a      	mov	r2, r3
 80066e6:	eef1 0a08 	vmov.f32	s1, #24	; 0x40c00000  6.0
 80066ea:	6a39      	ldr	r1, [r7, #32]
 80066ec:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 80066f0:	68f8      	ldr	r0, [r7, #12]
 80066f2:	f7ff ff47 	bl	8006584 <_ZN6tflite12_GLOBAL__N_18QuantizeEP13TfLiteContextflfRl>
 80066f6:	4603      	mov	r3, r0
 80066f8:	773b      	strb	r3, [r7, #28]
 80066fa:	7f3b      	ldrb	r3, [r7, #28]
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d001      	beq.n	8006704 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationllP12TfLiteTensorPlS6_+0xc8>
 8006700:	7f3b      	ldrb	r3, [r7, #28]
 8006702:	e050      	b.n	80067a6 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationllP12TfLiteTensorPlS6_+0x16a>
                      Quantize(context, scale, zero_point, 6.0, tmp_q));
    *act_max = std::min(qmax, tmp_q);
 8006704:	f107 0214 	add.w	r2, r7, #20
 8006708:	463b      	mov	r3, r7
 800670a:	4611      	mov	r1, r2
 800670c:	4618      	mov	r0, r3
 800670e:	f000 f8a9 	bl	8006864 <_ZSt3minIlERKT_S2_S2_>
 8006712:	4603      	mov	r3, r0
 8006714:	681a      	ldr	r2, [r3, #0]
 8006716:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006718:	601a      	str	r2, [r3, #0]
 800671a:	e043      	b.n	80067a4 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationllP12TfLiteTensorPlS6_+0x168>
  } else if (activation == kTfLiteActReluN1To1) {
 800671c:	7afb      	ldrb	r3, [r7, #11]
 800671e:	2b02      	cmp	r3, #2
 8006720:	d13a      	bne.n	8006798 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationllP12TfLiteTensorPlS6_+0x15c>
    TF_LITE_ENSURE_OK(context,
 8006722:	f107 0314 	add.w	r3, r7, #20
 8006726:	461a      	mov	r2, r3
 8006728:	eeff 0a00 	vmov.f32	s1, #240	; 0xbf800000 -1.0
 800672c:	6a39      	ldr	r1, [r7, #32]
 800672e:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 8006732:	68f8      	ldr	r0, [r7, #12]
 8006734:	f7ff ff26 	bl	8006584 <_ZN6tflite12_GLOBAL__N_18QuantizeEP13TfLiteContextflfRl>
 8006738:	4603      	mov	r3, r0
 800673a:	77fb      	strb	r3, [r7, #31]
 800673c:	7ffb      	ldrb	r3, [r7, #31]
 800673e:	2b00      	cmp	r3, #0
 8006740:	d001      	beq.n	8006746 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationllP12TfLiteTensorPlS6_+0x10a>
 8006742:	7ffb      	ldrb	r3, [r7, #31]
 8006744:	e02f      	b.n	80067a6 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationllP12TfLiteTensorPlS6_+0x16a>
                      Quantize(context, scale, zero_point, -1.0, tmp_q));
    *act_min = std::max(qmin, tmp_q);
 8006746:	f107 0214 	add.w	r2, r7, #20
 800674a:	1d3b      	adds	r3, r7, #4
 800674c:	4611      	mov	r1, r2
 800674e:	4618      	mov	r0, r3
 8006750:	f000 f89c 	bl	800688c <_ZSt3maxIlERKT_S2_S2_>
 8006754:	4603      	mov	r3, r0
 8006756:	681a      	ldr	r2, [r3, #0]
 8006758:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800675a:	601a      	str	r2, [r3, #0]
    TF_LITE_ENSURE_OK(context,
 800675c:	f107 0314 	add.w	r3, r7, #20
 8006760:	461a      	mov	r2, r3
 8006762:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8006766:	6a39      	ldr	r1, [r7, #32]
 8006768:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 800676c:	68f8      	ldr	r0, [r7, #12]
 800676e:	f7ff ff09 	bl	8006584 <_ZN6tflite12_GLOBAL__N_18QuantizeEP13TfLiteContextflfRl>
 8006772:	4603      	mov	r3, r0
 8006774:	77bb      	strb	r3, [r7, #30]
 8006776:	7fbb      	ldrb	r3, [r7, #30]
 8006778:	2b00      	cmp	r3, #0
 800677a:	d001      	beq.n	8006780 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationllP12TfLiteTensorPlS6_+0x144>
 800677c:	7fbb      	ldrb	r3, [r7, #30]
 800677e:	e012      	b.n	80067a6 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationllP12TfLiteTensorPlS6_+0x16a>
                      Quantize(context, scale, zero_point, 1.0, tmp_q));
    *act_max = std::min(qmax, tmp_q);
 8006780:	f107 0214 	add.w	r2, r7, #20
 8006784:	463b      	mov	r3, r7
 8006786:	4611      	mov	r1, r2
 8006788:	4618      	mov	r0, r3
 800678a:	f000 f86b 	bl	8006864 <_ZSt3minIlERKT_S2_S2_>
 800678e:	4603      	mov	r3, r0
 8006790:	681a      	ldr	r2, [r3, #0]
 8006792:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006794:	601a      	str	r2, [r3, #0]
 8006796:	e005      	b.n	80067a4 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationllP12TfLiteTensorPlS6_+0x168>
  } else {
    *act_min = qmin;
 8006798:	687a      	ldr	r2, [r7, #4]
 800679a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800679c:	601a      	str	r2, [r3, #0]
    *act_max = qmax;
 800679e:	683a      	ldr	r2, [r7, #0]
 80067a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067a2:	601a      	str	r2, [r3, #0]
  }
  return kTfLiteOk;
 80067a4:	2300      	movs	r3, #0
}
 80067a6:	4618      	mov	r0, r3
 80067a8:	3728      	adds	r7, #40	; 0x28
 80067aa:	46bd      	mov	sp, r7
 80067ac:	bd80      	pop	{r7, pc}
 80067ae:	bf00      	nop
 80067b0:	00000000 	.word	0x00000000

080067b4 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_>:

TfLiteStatus CalculateActivationRangeQuantized(TfLiteContext* context,
                                               TfLiteFusedActivation activation,
                                               TfLiteTensor* output,
                                               int32_t* act_min,
                                               int32_t* act_max) {
 80067b4:	b590      	push	{r4, r7, lr}
 80067b6:	b08b      	sub	sp, #44	; 0x2c
 80067b8:	af04      	add	r7, sp, #16
 80067ba:	60f8      	str	r0, [r7, #12]
 80067bc:	607a      	str	r2, [r7, #4]
 80067be:	603b      	str	r3, [r7, #0]
 80067c0:	460b      	mov	r3, r1
 80067c2:	72fb      	strb	r3, [r7, #11]
  int32_t qmin = 0;
 80067c4:	2300      	movs	r3, #0
 80067c6:	617b      	str	r3, [r7, #20]
  int32_t qmax = 0;
 80067c8:	2300      	movs	r3, #0
 80067ca:	613b      	str	r3, [r7, #16]
  if (output->type == kTfLiteUInt8) {
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	781b      	ldrb	r3, [r3, #0]
 80067d0:	2b03      	cmp	r3, #3
 80067d2:	d108      	bne.n	80067e6 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x32>
    qmin = std::numeric_limits<uint8_t>::min();
 80067d4:	f7ff fb82 	bl	8005edc <_ZNSt14numeric_limitsIhE3minEv>
 80067d8:	4603      	mov	r3, r0
 80067da:	617b      	str	r3, [r7, #20]
    qmax = std::numeric_limits<uint8_t>::max();
 80067dc:	f7ff fb86 	bl	8005eec <_ZNSt14numeric_limitsIhE3maxEv>
 80067e0:	4603      	mov	r3, r0
 80067e2:	613b      	str	r3, [r7, #16]
 80067e4:	e025      	b.n	8006832 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x7e>
  } else if (output->type == kTfLiteInt8) {
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	781b      	ldrb	r3, [r3, #0]
 80067ea:	2b09      	cmp	r3, #9
 80067ec:	d108      	bne.n	8006800 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x4c>
    qmin = std::numeric_limits<int8_t>::min();
 80067ee:	f7ff fb64 	bl	8005eba <_ZNSt14numeric_limitsIaE3minEv>
 80067f2:	4603      	mov	r3, r0
 80067f4:	617b      	str	r3, [r7, #20]
    qmax = std::numeric_limits<int8_t>::max();
 80067f6:	f7ff fb69 	bl	8005ecc <_ZNSt14numeric_limitsIaE3maxEv>
 80067fa:	4603      	mov	r3, r0
 80067fc:	613b      	str	r3, [r7, #16]
 80067fe:	e018      	b.n	8006832 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x7e>
  } else if (output->type == kTfLiteInt16) {
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	781b      	ldrb	r3, [r3, #0]
 8006804:	2b07      	cmp	r3, #7
 8006806:	d108      	bne.n	800681a <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x66>
    qmin = std::numeric_limits<int16_t>::min();
 8006808:	f7ff fb78 	bl	8005efc <_ZNSt14numeric_limitsIsE3minEv>
 800680c:	4603      	mov	r3, r0
 800680e:	617b      	str	r3, [r7, #20]
    qmax = std::numeric_limits<int16_t>::max();
 8006810:	f7ff fb7e 	bl	8005f10 <_ZNSt14numeric_limitsIsE3maxEv>
 8006814:	4603      	mov	r3, r0
 8006816:	613b      	str	r3, [r7, #16]
 8006818:	e00b      	b.n	8006832 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x7e>
  } else {
    TF_LITE_ENSURE(context, false);
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	695c      	ldr	r4, [r3, #20]
 800681e:	4b0e      	ldr	r3, [pc, #56]	; (8006858 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0xa4>)
 8006820:	9300      	str	r3, [sp, #0]
 8006822:	f240 1391 	movw	r3, #401	; 0x191
 8006826:	4a0d      	ldr	r2, [pc, #52]	; (800685c <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0xa8>)
 8006828:	490d      	ldr	r1, [pc, #52]	; (8006860 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0xac>)
 800682a:	68f8      	ldr	r0, [r7, #12]
 800682c:	47a0      	blx	r4
 800682e:	2301      	movs	r3, #1
 8006830:	e00d      	b.n	800684e <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x9a>
  }

  return CalculateActivationRangeQuantizedImpl(context, activation, qmin, qmax,
 8006832:	7af9      	ldrb	r1, [r7, #11]
 8006834:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006836:	9302      	str	r3, [sp, #8]
 8006838:	683b      	ldr	r3, [r7, #0]
 800683a:	9301      	str	r3, [sp, #4]
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	9300      	str	r3, [sp, #0]
 8006840:	693b      	ldr	r3, [r7, #16]
 8006842:	697a      	ldr	r2, [r7, #20]
 8006844:	68f8      	ldr	r0, [r7, #12]
 8006846:	f7ff fef9 	bl	800663c <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationllP12TfLiteTensorPlS6_>
 800684a:	4603      	mov	r3, r0
                                               output, act_min, act_max);
 800684c:	bf00      	nop
}
 800684e:	4618      	mov	r0, r3
 8006850:	371c      	adds	r7, #28
 8006852:	46bd      	mov	sp, r7
 8006854:	bd90      	pop	{r4, r7, pc}
 8006856:	bf00      	nop
 8006858:	08014988 	.word	0x08014988
 800685c:	08014760 	.word	0x08014760
 8006860:	0801480c 	.word	0x0801480c

08006864 <_ZSt3minIlERKT_S2_S2_>:
    min(const _Tp& __a, const _Tp& __b)
 8006864:	b480      	push	{r7}
 8006866:	b083      	sub	sp, #12
 8006868:	af00      	add	r7, sp, #0
 800686a:	6078      	str	r0, [r7, #4]
 800686c:	6039      	str	r1, [r7, #0]
      if (__b < __a)
 800686e:	683b      	ldr	r3, [r7, #0]
 8006870:	681a      	ldr	r2, [r3, #0]
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	429a      	cmp	r2, r3
 8006878:	da01      	bge.n	800687e <_ZSt3minIlERKT_S2_S2_+0x1a>
	return __b;
 800687a:	683b      	ldr	r3, [r7, #0]
 800687c:	e000      	b.n	8006880 <_ZSt3minIlERKT_S2_S2_+0x1c>
      return __a;
 800687e:	687b      	ldr	r3, [r7, #4]
    }
 8006880:	4618      	mov	r0, r3
 8006882:	370c      	adds	r7, #12
 8006884:	46bd      	mov	sp, r7
 8006886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800688a:	4770      	bx	lr

0800688c <_ZSt3maxIlERKT_S2_S2_>:
    max(const _Tp& __a, const _Tp& __b)
 800688c:	b480      	push	{r7}
 800688e:	b083      	sub	sp, #12
 8006890:	af00      	add	r7, sp, #0
 8006892:	6078      	str	r0, [r7, #4]
 8006894:	6039      	str	r1, [r7, #0]
      if (__a < __b)
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	681a      	ldr	r2, [r3, #0]
 800689a:	683b      	ldr	r3, [r7, #0]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	429a      	cmp	r2, r3
 80068a0:	da01      	bge.n	80068a6 <_ZSt3maxIlERKT_S2_S2_+0x1a>
	return __b;
 80068a2:	683b      	ldr	r3, [r7, #0]
 80068a4:	e000      	b.n	80068a8 <_ZSt3maxIlERKT_S2_S2_+0x1c>
      return __a;
 80068a6:	687b      	ldr	r3, [r7, #4]
    }
 80068a8:	4618      	mov	r0, r3
 80068aa:	370c      	adds	r7, #12
 80068ac:	46bd      	mov	sp, r7
 80068ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068b2:	4770      	bx	lr

080068b4 <DebugLog>:

#ifndef TF_LITE_STRIP_ERROR_STRINGS
#include <cstdio>
#endif

extern "C" void DebugLog(const char* s) {
 80068b4:	b580      	push	{r7, lr}
 80068b6:	b082      	sub	sp, #8
 80068b8:	af00      	add	r7, sp, #0
 80068ba:	6078      	str	r0, [r7, #4]
#ifndef TF_LITE_STRIP_ERROR_STRINGS
  // Reusing TF_LITE_STRIP_ERROR_STRINGS to disable DebugLog completely to get
  // maximum reduction in binary size. This is because we have DebugLog calls
  // via TF_LITE_CHECK that are not stubbed out by TF_LITE_REPORT_ERROR.
  fprintf(stderr, "%s", s);
 80068bc:	4b05      	ldr	r3, [pc, #20]	; (80068d4 <DebugLog+0x20>)
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	68db      	ldr	r3, [r3, #12]
 80068c2:	4619      	mov	r1, r3
 80068c4:	6878      	ldr	r0, [r7, #4]
 80068c6:	f00a f9ab 	bl	8010c20 <fputs>
#endif
}
 80068ca:	bf00      	nop
 80068cc:	3708      	adds	r7, #8
 80068ce:	46bd      	mov	sp, r7
 80068d0:	bd80      	pop	{r7, pc}
 80068d2:	bf00      	nop
 80068d4:	20000018 	.word	0x20000018

080068d8 <_ZNK6tflite8SubGraph9operatorsEv>:
  const flatbuffers::Vector<flatbuffers::Offset<tflite::Operator>> *operators() const {
 80068d8:	b580      	push	{r7, lr}
 80068da:	b082      	sub	sp, #8
 80068dc:	af00      	add	r7, sp, #0
 80068de:	6078      	str	r0, [r7, #4]
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<tflite::Operator>> *>(VT_OPERATORS);
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	210a      	movs	r1, #10
 80068e4:	4618      	mov	r0, r3
 80068e6:	f000 f847 	bl	8006978 <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite8OperatorEEEEEEET_t>
 80068ea:	4603      	mov	r3, r0
  }
 80068ec:	4618      	mov	r0, r3
 80068ee:	3708      	adds	r7, #8
 80068f0:	46bd      	mov	sp, r7
 80068f2:	bd80      	pop	{r7, pc}

080068f4 <_ZNK6tflite5Model9subgraphsEv>:
  const flatbuffers::Vector<flatbuffers::Offset<tflite::SubGraph>> *subgraphs() const {
 80068f4:	b580      	push	{r7, lr}
 80068f6:	b082      	sub	sp, #8
 80068f8:	af00      	add	r7, sp, #0
 80068fa:	6078      	str	r0, [r7, #4]
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<tflite::SubGraph>> *>(VT_SUBGRAPHS);
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	2108      	movs	r1, #8
 8006900:	4618      	mov	r0, r3
 8006902:	f000 f849 	bl	8006998 <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite8SubGraphEEEEEEET_t>
 8006906:	4603      	mov	r3, r0
  }
 8006908:	4618      	mov	r0, r3
 800690a:	3708      	adds	r7, #8
 800690c:	46bd      	mov	sp, r7
 800690e:	bd80      	pop	{r7, pc}

08006910 <_ZN6tflite20NumSubgraphOperatorsEPKNS_8SubGraphE>:
float FlexbufferWrapper::ElementAsFloat(size_t i) const {
  return static_cast<float>(FlexbufferWrapper::ElementAsDouble(i));
}

// TODO(b/192589496): Ops must always be there. Remove this function when fixed
uint32_t NumSubgraphOperators(const SubGraph* subgraph) {
 8006910:	b580      	push	{r7, lr}
 8006912:	b082      	sub	sp, #8
 8006914:	af00      	add	r7, sp, #0
 8006916:	6078      	str	r0, [r7, #4]
  if (subgraph->operators() != nullptr) {
 8006918:	6878      	ldr	r0, [r7, #4]
 800691a:	f7ff ffdd 	bl	80068d8 <_ZNK6tflite8SubGraph9operatorsEv>
 800691e:	4603      	mov	r3, r0
 8006920:	2b00      	cmp	r3, #0
 8006922:	bf14      	ite	ne
 8006924:	2301      	movne	r3, #1
 8006926:	2300      	moveq	r3, #0
 8006928:	b2db      	uxtb	r3, r3
 800692a:	2b00      	cmp	r3, #0
 800692c:	d008      	beq.n	8006940 <_ZN6tflite20NumSubgraphOperatorsEPKNS_8SubGraphE+0x30>
    return subgraph->operators()->size();
 800692e:	6878      	ldr	r0, [r7, #4]
 8006930:	f7ff ffd2 	bl	80068d8 <_ZNK6tflite8SubGraph9operatorsEv>
 8006934:	4603      	mov	r3, r0
 8006936:	4618      	mov	r0, r3
 8006938:	f000 f83e 	bl	80069b8 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8OperatorEEEE4sizeEv>
 800693c:	4603      	mov	r3, r0
 800693e:	e000      	b.n	8006942 <_ZN6tflite20NumSubgraphOperatorsEPKNS_8SubGraphE+0x32>
  } else {
    return 0;
 8006940:	2300      	movs	r3, #0
  }
}
 8006942:	4618      	mov	r0, r3
 8006944:	3708      	adds	r7, #8
 8006946:	46bd      	mov	sp, r7
 8006948:	bd80      	pop	{r7, pc}

0800694a <_ZN6tflite20NumSubgraphOperatorsEPKNS_5ModelEi>:
// TODO(b/192589496): Ops must always be there. Remove this function when fixed
uint32_t NumSubgraphOperators(const Model* model, int subgraph_idx) {
 800694a:	b580      	push	{r7, lr}
 800694c:	b084      	sub	sp, #16
 800694e:	af00      	add	r7, sp, #0
 8006950:	6078      	str	r0, [r7, #4]
 8006952:	6039      	str	r1, [r7, #0]
  const SubGraph* subgraph = model->subgraphs()->Get(subgraph_idx);
 8006954:	6878      	ldr	r0, [r7, #4]
 8006956:	f7ff ffcd 	bl	80068f4 <_ZNK6tflite5Model9subgraphsEv>
 800695a:	4602      	mov	r2, r0
 800695c:	683b      	ldr	r3, [r7, #0]
 800695e:	4619      	mov	r1, r3
 8006960:	4610      	mov	r0, r2
 8006962:	f000 f845 	bl	80069f0 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE3GetEm>
 8006966:	60f8      	str	r0, [r7, #12]
  return NumSubgraphOperators(subgraph);
 8006968:	68f8      	ldr	r0, [r7, #12]
 800696a:	f7ff ffd1 	bl	8006910 <_ZN6tflite20NumSubgraphOperatorsEPKNS_8SubGraphE>
 800696e:	4603      	mov	r3, r0
}
 8006970:	4618      	mov	r0, r3
 8006972:	3710      	adds	r7, #16
 8006974:	46bd      	mov	sp, r7
 8006976:	bd80      	pop	{r7, pc}

08006978 <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite8OperatorEEEEEEET_t>:
  template<typename P> P GetPointer(voffset_t field) const {
 8006978:	b580      	push	{r7, lr}
 800697a:	b082      	sub	sp, #8
 800697c:	af00      	add	r7, sp, #0
 800697e:	6078      	str	r0, [r7, #4]
 8006980:	460b      	mov	r3, r1
 8006982:	807b      	strh	r3, [r7, #2]
    return const_cast<Table *>(this)->GetPointer<P>(field);
 8006984:	887b      	ldrh	r3, [r7, #2]
 8006986:	4619      	mov	r1, r3
 8006988:	6878      	ldr	r0, [r7, #4]
 800698a:	f000 f865 	bl	8006a58 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite8OperatorEEEEEEET_t>
 800698e:	4603      	mov	r3, r0
  }
 8006990:	4618      	mov	r0, r3
 8006992:	3708      	adds	r7, #8
 8006994:	46bd      	mov	sp, r7
 8006996:	bd80      	pop	{r7, pc}

08006998 <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite8SubGraphEEEEEEET_t>:
  template<typename P> P GetPointer(voffset_t field) const {
 8006998:	b580      	push	{r7, lr}
 800699a:	b082      	sub	sp, #8
 800699c:	af00      	add	r7, sp, #0
 800699e:	6078      	str	r0, [r7, #4]
 80069a0:	460b      	mov	r3, r1
 80069a2:	807b      	strh	r3, [r7, #2]
    return const_cast<Table *>(this)->GetPointer<P>(field);
 80069a4:	887b      	ldrh	r3, [r7, #2]
 80069a6:	4619      	mov	r1, r3
 80069a8:	6878      	ldr	r0, [r7, #4]
 80069aa:	f000 f875 	bl	8006a98 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite8SubGraphEEEEEEET_t>
 80069ae:	4603      	mov	r3, r0
  }
 80069b0:	4618      	mov	r0, r3
 80069b2:	3708      	adds	r7, #8
 80069b4:	46bd      	mov	sp, r7
 80069b6:	bd80      	pop	{r7, pc}

080069b8 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8OperatorEEEE4sizeEv>:
  uoffset_t size() const { return EndianScalar(length_); }
 80069b8:	b580      	push	{r7, lr}
 80069ba:	b082      	sub	sp, #8
 80069bc:	af00      	add	r7, sp, #0
 80069be:	6078      	str	r0, [r7, #4]
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	4618      	mov	r0, r3
 80069c6:	f7fb f832 	bl	8001a2e <_ZN11flatbuffers12EndianScalarImEET_S1_>
 80069ca:	4603      	mov	r3, r0
 80069cc:	4618      	mov	r0, r3
 80069ce:	3708      	adds	r7, #8
 80069d0:	46bd      	mov	sp, r7
 80069d2:	bd80      	pop	{r7, pc}

080069d4 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE4sizeEv>:
 80069d4:	b580      	push	{r7, lr}
 80069d6:	b082      	sub	sp, #8
 80069d8:	af00      	add	r7, sp, #0
 80069da:	6078      	str	r0, [r7, #4]
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	4618      	mov	r0, r3
 80069e2:	f7fb f824 	bl	8001a2e <_ZN11flatbuffers12EndianScalarImEET_S1_>
 80069e6:	4603      	mov	r3, r0
 80069e8:	4618      	mov	r0, r3
 80069ea:	3708      	adds	r7, #8
 80069ec:	46bd      	mov	sp, r7
 80069ee:	bd80      	pop	{r7, pc}

080069f0 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE3GetEm>:
  return_type Get(uoffset_t i) const {
 80069f0:	b580      	push	{r7, lr}
 80069f2:	b082      	sub	sp, #8
 80069f4:	af00      	add	r7, sp, #0
 80069f6:	6078      	str	r0, [r7, #4]
 80069f8:	6039      	str	r1, [r7, #0]
    FLATBUFFERS_ASSERT(i < size());
 80069fa:	6878      	ldr	r0, [r7, #4]
 80069fc:	f7ff ffea 	bl	80069d4 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE4sizeEv>
 8006a00:	4602      	mov	r2, r0
 8006a02:	683b      	ldr	r3, [r7, #0]
 8006a04:	4293      	cmp	r3, r2
 8006a06:	d306      	bcc.n	8006a16 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE3GetEm+0x26>
 8006a08:	4b09      	ldr	r3, [pc, #36]	; (8006a30 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE3GetEm+0x40>)
 8006a0a:	4a0a      	ldr	r2, [pc, #40]	; (8006a34 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE3GetEm+0x44>)
 8006a0c:	f44f 7183 	mov.w	r1, #262	; 0x106
 8006a10:	4809      	ldr	r0, [pc, #36]	; (8006a38 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE3GetEm+0x48>)
 8006a12:	f009 fecb 	bl	80107ac <__assert_func>
    return IndirectHelper<T>::Read(Data(), i);
 8006a16:	6878      	ldr	r0, [r7, #4]
 8006a18:	f000 f872 	bl	8006b00 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE4DataEv>
 8006a1c:	4603      	mov	r3, r0
 8006a1e:	6839      	ldr	r1, [r7, #0]
 8006a20:	4618      	mov	r0, r3
 8006a22:	f000 f859 	bl	8006ad8 <_ZN11flatbuffers14IndirectHelperINS_6OffsetIN6tflite8SubGraphEEEE4ReadEPKhm>
 8006a26:	4603      	mov	r3, r0
  }
 8006a28:	4618      	mov	r0, r3
 8006a2a:	3708      	adds	r7, #8
 8006a2c:	46bd      	mov	sp, r7
 8006a2e:	bd80      	pop	{r7, pc}
 8006a30:	08014a40 	.word	0x08014a40
 8006a34:	08014a4c 	.word	0x08014a4c
 8006a38:	08014b48 	.word	0x08014b48

08006a3c <_ZN11flatbuffers12EndianScalarIxEET_S1_>:
template<typename T> T EndianScalar(T t) {
 8006a3c:	b480      	push	{r7}
 8006a3e:	b083      	sub	sp, #12
 8006a40:	af00      	add	r7, sp, #0
 8006a42:	e9c7 0100 	strd	r0, r1, [r7]
    return t;
 8006a46:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 8006a4a:	4610      	mov	r0, r2
 8006a4c:	4619      	mov	r1, r3
 8006a4e:	370c      	adds	r7, #12
 8006a50:	46bd      	mov	sp, r7
 8006a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a56:	4770      	bx	lr

08006a58 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite8OperatorEEEEEEET_t>:
  template<typename P> P GetPointer(voffset_t field) {
 8006a58:	b580      	push	{r7, lr}
 8006a5a:	b084      	sub	sp, #16
 8006a5c:	af00      	add	r7, sp, #0
 8006a5e:	6078      	str	r0, [r7, #4]
 8006a60:	460b      	mov	r3, r1
 8006a62:	807b      	strh	r3, [r7, #2]
    auto field_offset = GetOptionalFieldOffset(field);
 8006a64:	887b      	ldrh	r3, [r7, #2]
 8006a66:	4619      	mov	r1, r3
 8006a68:	6878      	ldr	r0, [r7, #4]
 8006a6a:	f7fa fb3d 	bl	80010e8 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
 8006a6e:	4603      	mov	r3, r0
 8006a70:	81fb      	strh	r3, [r7, #14]
    auto p = data_ + field_offset;
 8006a72:	687a      	ldr	r2, [r7, #4]
 8006a74:	89fb      	ldrh	r3, [r7, #14]
 8006a76:	4413      	add	r3, r2
 8006a78:	60bb      	str	r3, [r7, #8]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 8006a7a:	89fb      	ldrh	r3, [r7, #14]
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d006      	beq.n	8006a8e <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite8OperatorEEEEEEET_t+0x36>
 8006a80:	68b8      	ldr	r0, [r7, #8]
 8006a82:	f7fa ffed 	bl	8001a60 <_ZN11flatbuffers10ReadScalarImEET_PKv>
 8006a86:	4602      	mov	r2, r0
 8006a88:	68bb      	ldr	r3, [r7, #8]
 8006a8a:	4413      	add	r3, r2
                        : nullptr;
 8006a8c:	e000      	b.n	8006a90 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite8OperatorEEEEEEET_t+0x38>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 8006a8e:	2300      	movs	r3, #0
  }
 8006a90:	4618      	mov	r0, r3
 8006a92:	3710      	adds	r7, #16
 8006a94:	46bd      	mov	sp, r7
 8006a96:	bd80      	pop	{r7, pc}

08006a98 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite8SubGraphEEEEEEET_t>:
  template<typename P> P GetPointer(voffset_t field) {
 8006a98:	b580      	push	{r7, lr}
 8006a9a:	b084      	sub	sp, #16
 8006a9c:	af00      	add	r7, sp, #0
 8006a9e:	6078      	str	r0, [r7, #4]
 8006aa0:	460b      	mov	r3, r1
 8006aa2:	807b      	strh	r3, [r7, #2]
    auto field_offset = GetOptionalFieldOffset(field);
 8006aa4:	887b      	ldrh	r3, [r7, #2]
 8006aa6:	4619      	mov	r1, r3
 8006aa8:	6878      	ldr	r0, [r7, #4]
 8006aaa:	f7fa fb1d 	bl	80010e8 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
 8006aae:	4603      	mov	r3, r0
 8006ab0:	81fb      	strh	r3, [r7, #14]
    auto p = data_ + field_offset;
 8006ab2:	687a      	ldr	r2, [r7, #4]
 8006ab4:	89fb      	ldrh	r3, [r7, #14]
 8006ab6:	4413      	add	r3, r2
 8006ab8:	60bb      	str	r3, [r7, #8]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 8006aba:	89fb      	ldrh	r3, [r7, #14]
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d006      	beq.n	8006ace <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite8SubGraphEEEEEEET_t+0x36>
 8006ac0:	68b8      	ldr	r0, [r7, #8]
 8006ac2:	f7fa ffcd 	bl	8001a60 <_ZN11flatbuffers10ReadScalarImEET_PKv>
 8006ac6:	4602      	mov	r2, r0
 8006ac8:	68bb      	ldr	r3, [r7, #8]
 8006aca:	4413      	add	r3, r2
                        : nullptr;
 8006acc:	e000      	b.n	8006ad0 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite8SubGraphEEEEEEET_t+0x38>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 8006ace:	2300      	movs	r3, #0
  }
 8006ad0:	4618      	mov	r0, r3
 8006ad2:	3710      	adds	r7, #16
 8006ad4:	46bd      	mov	sp, r7
 8006ad6:	bd80      	pop	{r7, pc}

08006ad8 <_ZN11flatbuffers14IndirectHelperINS_6OffsetIN6tflite8SubGraphEEEE4ReadEPKhm>:
  static return_type Read(const uint8_t *p, uoffset_t i) {
 8006ad8:	b580      	push	{r7, lr}
 8006ada:	b082      	sub	sp, #8
 8006adc:	af00      	add	r7, sp, #0
 8006ade:	6078      	str	r0, [r7, #4]
 8006ae0:	6039      	str	r1, [r7, #0]
    p += i * sizeof(uoffset_t);
 8006ae2:	683b      	ldr	r3, [r7, #0]
 8006ae4:	009b      	lsls	r3, r3, #2
 8006ae6:	687a      	ldr	r2, [r7, #4]
 8006ae8:	4413      	add	r3, r2
 8006aea:	607b      	str	r3, [r7, #4]
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
 8006aec:	6878      	ldr	r0, [r7, #4]
 8006aee:	f7fa ffb7 	bl	8001a60 <_ZN11flatbuffers10ReadScalarImEET_PKv>
 8006af2:	4602      	mov	r2, r0
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	4413      	add	r3, r2
  }
 8006af8:	4618      	mov	r0, r3
 8006afa:	3708      	adds	r7, #8
 8006afc:	46bd      	mov	sp, r7
 8006afe:	bd80      	pop	{r7, pc}

08006b00 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE4DataEv>:
  const uint8_t *Data() const {
 8006b00:	b480      	push	{r7}
 8006b02:	b083      	sub	sp, #12
 8006b04:	af00      	add	r7, sp, #0
 8006b06:	6078      	str	r0, [r7, #4]
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	3304      	adds	r3, #4
  }
 8006b0c:	4618      	mov	r0, r3
 8006b0e:	370c      	adds	r7, #12
 8006b10:	46bd      	mov	sp, r7
 8006b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b16:	4770      	bx	lr

08006b18 <_ZNK6tflite6Tensor5shapeEv>:
  const flatbuffers::Vector<int32_t> *shape() const {
 8006b18:	b580      	push	{r7, lr}
 8006b1a:	b082      	sub	sp, #8
 8006b1c:	af00      	add	r7, sp, #0
 8006b1e:	6078      	str	r0, [r7, #4]
    return GetPointer<const flatbuffers::Vector<int32_t> *>(VT_SHAPE);
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	2104      	movs	r1, #4
 8006b24:	4618      	mov	r0, r3
 8006b26:	f7fd fdf6 	bl	8004716 <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorIlEEEET_t>
 8006b2a:	4603      	mov	r3, r0
  }
 8006b2c:	4618      	mov	r0, r3
 8006b2e:	3708      	adds	r7, #8
 8006b30:	46bd      	mov	sp, r7
 8006b32:	bd80      	pop	{r7, pc}

08006b34 <_ZNK6tflite6Tensor4typeEv>:
  tflite::TensorType type() const {
 8006b34:	b580      	push	{r7, lr}
 8006b36:	b082      	sub	sp, #8
 8006b38:	af00      	add	r7, sp, #0
 8006b3a:	6078      	str	r0, [r7, #4]
    return static_cast<tflite::TensorType>(GetField<int8_t>(VT_TYPE, 0));
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	2200      	movs	r2, #0
 8006b40:	2106      	movs	r1, #6
 8006b42:	4618      	mov	r0, r3
 8006b44:	f7fd fdf7 	bl	8004736 <_ZNK11flatbuffers5Table8GetFieldIaEET_tS2_>
 8006b48:	4603      	mov	r3, r0
 8006b4a:	b2db      	uxtb	r3, r3
  }
 8006b4c:	4618      	mov	r0, r3
 8006b4e:	3708      	adds	r7, #8
 8006b50:	46bd      	mov	sp, r7
 8006b52:	bd80      	pop	{r7, pc}

08006b54 <_ZN6tflite12RuntimeShapeC1Ev>:
  // larger shapes are separately allocated.
  static constexpr int kMaxSmallSize = 5;

  RuntimeShape& operator=(RuntimeShape const&) = delete;

  RuntimeShape() : size_(0) {}
 8006b54:	b480      	push	{r7}
 8006b56:	b083      	sub	sp, #12
 8006b58:	af00      	add	r7, sp, #0
 8006b5a:	6078      	str	r0, [r7, #4]
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	2200      	movs	r2, #0
 8006b60:	601a      	str	r2, [r3, #0]
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	4618      	mov	r0, r3
 8006b66:	370c      	adds	r7, #12
 8006b68:	46bd      	mov	sp, r7
 8006b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b6e:	4770      	bx	lr

08006b70 <_ZN6tflite12RuntimeShapeC1EiPKl>:
    for (int i = 0; i < shape_size; ++i) {
      SetDim(i, value);
    }
  }

  RuntimeShape(int dimensions_count, const int32_t* dims_data) : size_(0) {
 8006b70:	b580      	push	{r7, lr}
 8006b72:	b084      	sub	sp, #16
 8006b74:	af00      	add	r7, sp, #0
 8006b76:	60f8      	str	r0, [r7, #12]
 8006b78:	60b9      	str	r1, [r7, #8]
 8006b7a:	607a      	str	r2, [r7, #4]
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	2200      	movs	r2, #0
 8006b80:	601a      	str	r2, [r3, #0]
    ReplaceWith(dimensions_count, dims_data);
 8006b82:	687a      	ldr	r2, [r7, #4]
 8006b84:	68b9      	ldr	r1, [r7, #8]
 8006b86:	68f8      	ldr	r0, [r7, #12]
 8006b88:	f000 f866 	bl	8006c58 <_ZN6tflite12RuntimeShape11ReplaceWithEiPKl>
  }
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	4618      	mov	r0, r3
 8006b90:	3710      	adds	r7, #16
 8006b92:	46bd      	mov	sp, r7
 8006b94:	bd80      	pop	{r7, pc}

08006b96 <_ZN6tflite12RuntimeShapeD1Ev>:
    return this->size_ == comp.size_ &&
           std::memcmp(DimsData(), comp.DimsData(), size_ * sizeof(int32_t)) ==
               0;
  }

  ~RuntimeShape() {
 8006b96:	b580      	push	{r7, lr}
 8006b98:	b082      	sub	sp, #8
 8006b9a:	af00      	add	r7, sp, #0
 8006b9c:	6078      	str	r0, [r7, #4]
    if (size_ > kMaxSmallSize) {
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	2b05      	cmp	r3, #5
 8006ba4:	dd08      	ble.n	8006bb8 <_ZN6tflite12RuntimeShapeD1Ev+0x22>
#ifdef TF_LITE_STATIC_MEMORY
      TFLITE_CHECK(false && "No shape resizing supported on this platform");
#else  // TF_LITE_STATIC_MEMORY
      delete[] dims_pointer_;
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	685b      	ldr	r3, [r3, #4]
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d004      	beq.n	8006bb8 <_ZN6tflite12RuntimeShapeD1Ev+0x22>
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	685b      	ldr	r3, [r3, #4]
 8006bb2:	4618      	mov	r0, r3
 8006bb4:	f009 fb6f 	bl	8010296 <_ZdaPv>
#endif  // TF_LITE_STATIC_MEMORY
    }
  }
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	4618      	mov	r0, r3
 8006bbc:	3708      	adds	r7, #8
 8006bbe:	46bd      	mov	sp, r7
 8006bc0:	bd80      	pop	{r7, pc}

08006bc2 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>:

  inline int32_t DimensionsCount() const { return size_; }
 8006bc2:	b480      	push	{r7}
 8006bc4:	b083      	sub	sp, #12
 8006bc6:	af00      	add	r7, sp, #0
 8006bc8:	6078      	str	r0, [r7, #4]
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	4618      	mov	r0, r3
 8006bd0:	370c      	adds	r7, #12
 8006bd2:	46bd      	mov	sp, r7
 8006bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bd8:	4770      	bx	lr

08006bda <_ZN6tflite12RuntimeShape8DimsDataEv>:
    } else {
      dims_[i] = val;
    }
  }

  inline int32_t* DimsData() {
 8006bda:	b480      	push	{r7}
 8006bdc:	b083      	sub	sp, #12
 8006bde:	af00      	add	r7, sp, #0
 8006be0:	6078      	str	r0, [r7, #4]
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	2b05      	cmp	r3, #5
 8006be8:	dd02      	ble.n	8006bf0 <_ZN6tflite12RuntimeShape8DimsDataEv+0x16>
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	685b      	ldr	r3, [r3, #4]
 8006bee:	e001      	b.n	8006bf4 <_ZN6tflite12RuntimeShape8DimsDataEv+0x1a>
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	3304      	adds	r3, #4
  }
 8006bf4:	4618      	mov	r0, r3
 8006bf6:	370c      	adds	r7, #12
 8006bf8:	46bd      	mov	sp, r7
 8006bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bfe:	4770      	bx	lr

08006c00 <_ZN6tflite12RuntimeShape6ResizeEi>:
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
  }
  // The caller must ensure that the shape is no bigger than 5-D.
  inline const int32_t* DimsDataUpTo5D() const { return dims_; }

  inline void Resize(int dimensions_count) {
 8006c00:	b580      	push	{r7, lr}
 8006c02:	b082      	sub	sp, #8
 8006c04:	af00      	add	r7, sp, #0
 8006c06:	6078      	str	r0, [r7, #4]
 8006c08:	6039      	str	r1, [r7, #0]
    if (size_ > kMaxSmallSize) {
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	2b05      	cmp	r3, #5
 8006c10:	dd08      	ble.n	8006c24 <_ZN6tflite12RuntimeShape6ResizeEi+0x24>
#ifdef TF_LITE_STATIC_MEMORY
      TFLITE_CHECK(false && "No shape resizing supported on this platform");
#else  // TF_LITE_STATIC_MEMORY
      delete[] dims_pointer_;
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	685b      	ldr	r3, [r3, #4]
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d004      	beq.n	8006c24 <_ZN6tflite12RuntimeShape6ResizeEi+0x24>
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	685b      	ldr	r3, [r3, #4]
 8006c1e:	4618      	mov	r0, r3
 8006c20:	f009 fb39 	bl	8010296 <_ZdaPv>
#endif  // TF_LITE_STATIC_MEMORY
    }
    size_ = dimensions_count;
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	683a      	ldr	r2, [r7, #0]
 8006c28:	601a      	str	r2, [r3, #0]
    if (dimensions_count > kMaxSmallSize) {
 8006c2a:	683b      	ldr	r3, [r7, #0]
 8006c2c:	2b05      	cmp	r3, #5
 8006c2e:	dd0f      	ble.n	8006c50 <_ZN6tflite12RuntimeShape6ResizeEi+0x50>
#ifdef TF_LITE_STATIC_MEMORY
      TFLITE_CHECK(false && "No shape resizing supported on this platform");
#else  // TF_LITE_STATIC_MEMORY
      dims_pointer_ = new int32_t[dimensions_count];
 8006c30:	683b      	ldr	r3, [r7, #0]
 8006c32:	f06f 4260 	mvn.w	r2, #3758096384	; 0xe0000000
 8006c36:	4293      	cmp	r3, r2
 8006c38:	d201      	bcs.n	8006c3e <_ZN6tflite12RuntimeShape6ResizeEi+0x3e>
 8006c3a:	009b      	lsls	r3, r3, #2
 8006c3c:	e001      	b.n	8006c42 <_ZN6tflite12RuntimeShape6ResizeEi+0x42>
 8006c3e:	f04f 33ff 	mov.w	r3, #4294967295
 8006c42:	4618      	mov	r0, r3
 8006c44:	f009 fb49 	bl	80102da <_Znaj>
 8006c48:	4603      	mov	r3, r0
 8006c4a:	461a      	mov	r2, r3
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	605a      	str	r2, [r3, #4]
#endif  // TF_LITE_STATIC_MEMORY
    }
  }
 8006c50:	bf00      	nop
 8006c52:	3708      	adds	r7, #8
 8006c54:	46bd      	mov	sp, r7
 8006c56:	bd80      	pop	{r7, pc}

08006c58 <_ZN6tflite12RuntimeShape11ReplaceWithEiPKl>:

  inline void ReplaceWith(int dimensions_count, const int32_t* dims_data) {
 8006c58:	b580      	push	{r7, lr}
 8006c5a:	b086      	sub	sp, #24
 8006c5c:	af00      	add	r7, sp, #0
 8006c5e:	60f8      	str	r0, [r7, #12]
 8006c60:	60b9      	str	r1, [r7, #8]
 8006c62:	607a      	str	r2, [r7, #4]
    Resize(dimensions_count);
 8006c64:	68b9      	ldr	r1, [r7, #8]
 8006c66:	68f8      	ldr	r0, [r7, #12]
 8006c68:	f7ff ffca 	bl	8006c00 <_ZN6tflite12RuntimeShape6ResizeEi>
    int32_t* dst_dims = DimsData();
 8006c6c:	68f8      	ldr	r0, [r7, #12]
 8006c6e:	f7ff ffb4 	bl	8006bda <_ZN6tflite12RuntimeShape8DimsDataEv>
 8006c72:	6178      	str	r0, [r7, #20]
    std::memcpy(dst_dims, dims_data, dimensions_count * sizeof(int32_t));
 8006c74:	68bb      	ldr	r3, [r7, #8]
 8006c76:	009b      	lsls	r3, r3, #2
 8006c78:	461a      	mov	r2, r3
 8006c7a:	6879      	ldr	r1, [r7, #4]
 8006c7c:	6978      	ldr	r0, [r7, #20]
 8006c7e:	f00a f893 	bl	8010da8 <memcpy>
  }
 8006c82:	bf00      	nop
 8006c84:	3718      	adds	r7, #24
 8006c86:	46bd      	mov	sp, r7
 8006c88:	bd80      	pop	{r7, pc}

08006c8a <_ZN6tflite14AlignPointerUpEPhj>:
#include "tensorflow/lite/kernels/internal/tensor_ctypes.h"
#include "tensorflow/lite/schema/schema_generated.h"

namespace tflite {

uint8_t* AlignPointerUp(uint8_t* data, size_t alignment) {
 8006c8a:	b480      	push	{r7}
 8006c8c:	b085      	sub	sp, #20
 8006c8e:	af00      	add	r7, sp, #0
 8006c90:	6078      	str	r0, [r7, #4]
 8006c92:	6039      	str	r1, [r7, #0]
  std::uintptr_t data_as_uintptr_t = reinterpret_cast<std::uintptr_t>(data);
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	60fb      	str	r3, [r7, #12]
  uint8_t* aligned_result = reinterpret_cast<uint8_t*>(
      ((data_as_uintptr_t + (alignment - 1)) / alignment) * alignment);
 8006c98:	683a      	ldr	r2, [r7, #0]
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	4413      	add	r3, r2
 8006c9e:	1e5a      	subs	r2, r3, #1
 8006ca0:	683b      	ldr	r3, [r7, #0]
 8006ca2:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ca6:	683a      	ldr	r2, [r7, #0]
 8006ca8:	fb02 f303 	mul.w	r3, r2, r3
  uint8_t* aligned_result = reinterpret_cast<uint8_t*>(
 8006cac:	60bb      	str	r3, [r7, #8]
  return aligned_result;
 8006cae:	68bb      	ldr	r3, [r7, #8]
}
 8006cb0:	4618      	mov	r0, r3
 8006cb2:	3714      	adds	r7, #20
 8006cb4:	46bd      	mov	sp, r7
 8006cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cba:	4770      	bx	lr

08006cbc <_ZN6tflite16AlignPointerDownEPhj>:

uint8_t* AlignPointerDown(uint8_t* data, size_t alignment) {
 8006cbc:	b480      	push	{r7}
 8006cbe:	b085      	sub	sp, #20
 8006cc0:	af00      	add	r7, sp, #0
 8006cc2:	6078      	str	r0, [r7, #4]
 8006cc4:	6039      	str	r1, [r7, #0]
  std::uintptr_t data_as_uintptr_t = reinterpret_cast<std::uintptr_t>(data);
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	60fb      	str	r3, [r7, #12]
  uint8_t* aligned_result =
      reinterpret_cast<uint8_t*>((data_as_uintptr_t / alignment) * alignment);
 8006cca:	68fa      	ldr	r2, [r7, #12]
 8006ccc:	683b      	ldr	r3, [r7, #0]
 8006cce:	fbb2 f3f3 	udiv	r3, r2, r3
 8006cd2:	683a      	ldr	r2, [r7, #0]
 8006cd4:	fb02 f303 	mul.w	r3, r2, r3
  uint8_t* aligned_result =
 8006cd8:	60bb      	str	r3, [r7, #8]
  return aligned_result;
 8006cda:	68bb      	ldr	r3, [r7, #8]
}
 8006cdc:	4618      	mov	r0, r3
 8006cde:	3714      	adds	r7, #20
 8006ce0:	46bd      	mov	sp, r7
 8006ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ce6:	4770      	bx	lr

08006ce8 <_ZN6tflite11AlignSizeUpEjj>:

size_t AlignSizeUp(size_t size, size_t alignment) {
 8006ce8:	b480      	push	{r7}
 8006cea:	b085      	sub	sp, #20
 8006cec:	af00      	add	r7, sp, #0
 8006cee:	6078      	str	r0, [r7, #4]
 8006cf0:	6039      	str	r1, [r7, #0]
  size_t aligned_size = (((size + (alignment - 1)) / alignment) * alignment);
 8006cf2:	683a      	ldr	r2, [r7, #0]
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	4413      	add	r3, r2
 8006cf8:	1e5a      	subs	r2, r3, #1
 8006cfa:	683b      	ldr	r3, [r7, #0]
 8006cfc:	fbb2 f2f3 	udiv	r2, r2, r3
 8006d00:	683b      	ldr	r3, [r7, #0]
 8006d02:	fb02 f303 	mul.w	r3, r2, r3
 8006d06:	60fb      	str	r3, [r7, #12]
  return aligned_size;
 8006d08:	68fb      	ldr	r3, [r7, #12]
}
 8006d0a:	4618      	mov	r0, r3
 8006d0c:	3714      	adds	r7, #20
 8006d0e:	46bd      	mov	sp, r7
 8006d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d14:	4770      	bx	lr
	...

08006d18 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj>:

TfLiteStatus TfLiteTypeSizeOf(TfLiteType type, size_t* size) {
 8006d18:	b480      	push	{r7}
 8006d1a:	b083      	sub	sp, #12
 8006d1c:	af00      	add	r7, sp, #0
 8006d1e:	4603      	mov	r3, r0
 8006d20:	6039      	str	r1, [r7, #0]
 8006d22:	71fb      	strb	r3, [r7, #7]
  switch (type) {
 8006d24:	79fb      	ldrb	r3, [r7, #7]
 8006d26:	3b01      	subs	r3, #1
 8006d28:	2b0f      	cmp	r3, #15
 8006d2a:	d857      	bhi.n	8006ddc <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj+0xc4>
 8006d2c:	a201      	add	r2, pc, #4	; (adr r2, 8006d34 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj+0x1c>)
 8006d2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d32:	bf00      	nop
 8006d34:	08006d7d 	.word	0x08006d7d
 8006d38:	08006d95 	.word	0x08006d95
 8006d3c:	08006da5 	.word	0x08006da5
 8006d40:	08006db5 	.word	0x08006db5
 8006d44:	08006ddd 	.word	0x08006ddd
 8006d48:	08006dc5 	.word	0x08006dc5
 8006d4c:	08006d8d 	.word	0x08006d8d
 8006d50:	08006dcd 	.word	0x08006dcd
 8006d54:	08006dad 	.word	0x08006dad
 8006d58:	08006d75 	.word	0x08006d75
 8006d5c:	08006d85 	.word	0x08006d85
 8006d60:	08006dd5 	.word	0x08006dd5
 8006d64:	08006dbd 	.word	0x08006dbd
 8006d68:	08006ddd 	.word	0x08006ddd
 8006d6c:	08006ddd 	.word	0x08006ddd
 8006d70:	08006d9d 	.word	0x08006d9d
    case kTfLiteFloat16:
      *size = sizeof(int16_t);
 8006d74:	683b      	ldr	r3, [r7, #0]
 8006d76:	2202      	movs	r2, #2
 8006d78:	601a      	str	r2, [r3, #0]
      break;
 8006d7a:	e031      	b.n	8006de0 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj+0xc8>
    case kTfLiteFloat32:
      *size = sizeof(float);
 8006d7c:	683b      	ldr	r3, [r7, #0]
 8006d7e:	2204      	movs	r2, #4
 8006d80:	601a      	str	r2, [r3, #0]
      break;
 8006d82:	e02d      	b.n	8006de0 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj+0xc8>
    case kTfLiteFloat64:
      *size = sizeof(double);
 8006d84:	683b      	ldr	r3, [r7, #0]
 8006d86:	2208      	movs	r2, #8
 8006d88:	601a      	str	r2, [r3, #0]
      break;
 8006d8a:	e029      	b.n	8006de0 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj+0xc8>
    case kTfLiteInt16:
      *size = sizeof(int16_t);
 8006d8c:	683b      	ldr	r3, [r7, #0]
 8006d8e:	2202      	movs	r2, #2
 8006d90:	601a      	str	r2, [r3, #0]
      break;
 8006d92:	e025      	b.n	8006de0 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj+0xc8>
    case kTfLiteInt32:
      *size = sizeof(int32_t);
 8006d94:	683b      	ldr	r3, [r7, #0]
 8006d96:	2204      	movs	r2, #4
 8006d98:	601a      	str	r2, [r3, #0]
      break;
 8006d9a:	e021      	b.n	8006de0 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj+0xc8>
    case kTfLiteUInt32:
      *size = sizeof(uint32_t);
 8006d9c:	683b      	ldr	r3, [r7, #0]
 8006d9e:	2204      	movs	r2, #4
 8006da0:	601a      	str	r2, [r3, #0]
      break;
 8006da2:	e01d      	b.n	8006de0 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj+0xc8>
    case kTfLiteUInt8:
      *size = sizeof(uint8_t);
 8006da4:	683b      	ldr	r3, [r7, #0]
 8006da6:	2201      	movs	r2, #1
 8006da8:	601a      	str	r2, [r3, #0]
      break;
 8006daa:	e019      	b.n	8006de0 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj+0xc8>
    case kTfLiteInt8:
      *size = sizeof(int8_t);
 8006dac:	683b      	ldr	r3, [r7, #0]
 8006dae:	2201      	movs	r2, #1
 8006db0:	601a      	str	r2, [r3, #0]
      break;
 8006db2:	e015      	b.n	8006de0 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj+0xc8>
    case kTfLiteInt64:
      *size = sizeof(int64_t);
 8006db4:	683b      	ldr	r3, [r7, #0]
 8006db6:	2208      	movs	r2, #8
 8006db8:	601a      	str	r2, [r3, #0]
      break;
 8006dba:	e011      	b.n	8006de0 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj+0xc8>
    case kTfLiteUInt64:
      *size = sizeof(uint64_t);
 8006dbc:	683b      	ldr	r3, [r7, #0]
 8006dbe:	2208      	movs	r2, #8
 8006dc0:	601a      	str	r2, [r3, #0]
      break;
 8006dc2:	e00d      	b.n	8006de0 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj+0xc8>
    case kTfLiteBool:
      *size = sizeof(bool);
 8006dc4:	683b      	ldr	r3, [r7, #0]
 8006dc6:	2201      	movs	r2, #1
 8006dc8:	601a      	str	r2, [r3, #0]
      break;
 8006dca:	e009      	b.n	8006de0 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj+0xc8>
    case kTfLiteComplex64:
      *size = sizeof(float) * 2;
 8006dcc:	683b      	ldr	r3, [r7, #0]
 8006dce:	2208      	movs	r2, #8
 8006dd0:	601a      	str	r2, [r3, #0]
      break;
 8006dd2:	e005      	b.n	8006de0 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj+0xc8>
    case kTfLiteComplex128:
      *size = sizeof(double) * 2;
 8006dd4:	683b      	ldr	r3, [r7, #0]
 8006dd6:	2210      	movs	r2, #16
 8006dd8:	601a      	str	r2, [r3, #0]
      break;
 8006dda:	e001      	b.n	8006de0 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj+0xc8>
    default:
      return kTfLiteError;
 8006ddc:	2301      	movs	r3, #1
 8006dde:	e000      	b.n	8006de2 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj+0xca>
  }
  return kTfLiteOk;
 8006de0:	2300      	movs	r3, #0
}
 8006de2:	4618      	mov	r0, r3
 8006de4:	370c      	adds	r7, #12
 8006de6:	46bd      	mov	sp, r7
 8006de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dec:	4770      	bx	lr
 8006dee:	bf00      	nop

08006df0 <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE>:

TfLiteStatus BytesRequiredForTensor(const tflite::Tensor& flatbuffer_tensor,
                                    size_t* bytes, size_t* type_size,
                                    ErrorReporter* error_reporter) {
 8006df0:	b580      	push	{r7, lr}
 8006df2:	b088      	sub	sp, #32
 8006df4:	af00      	add	r7, sp, #0
 8006df6:	60f8      	str	r0, [r7, #12]
 8006df8:	60b9      	str	r1, [r7, #8]
 8006dfa:	607a      	str	r2, [r7, #4]
 8006dfc:	603b      	str	r3, [r7, #0]
  int element_count = 1;
 8006dfe:	2301      	movs	r3, #1
 8006e00:	61fb      	str	r3, [r7, #28]
  // If flatbuffer_tensor.shape == nullptr, then flatbuffer_tensor is a scalar
  // so has 1 element.
  if (flatbuffer_tensor.shape() != nullptr) {
 8006e02:	68f8      	ldr	r0, [r7, #12]
 8006e04:	f7ff fe88 	bl	8006b18 <_ZNK6tflite6Tensor5shapeEv>
 8006e08:	4603      	mov	r3, r0
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	bf14      	ite	ne
 8006e0e:	2301      	movne	r3, #1
 8006e10:	2300      	moveq	r3, #0
 8006e12:	b2db      	uxtb	r3, r3
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d022      	beq.n	8006e5e <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE+0x6e>
    for (size_t n = 0; n < flatbuffer_tensor.shape()->Length(); ++n) {
 8006e18:	2300      	movs	r3, #0
 8006e1a:	61bb      	str	r3, [r7, #24]
 8006e1c:	68f8      	ldr	r0, [r7, #12]
 8006e1e:	f7ff fe7b 	bl	8006b18 <_ZNK6tflite6Tensor5shapeEv>
 8006e22:	4603      	mov	r3, r0
 8006e24:	4618      	mov	r0, r3
 8006e26:	f000 f884 	bl	8006f32 <_ZNK11flatbuffers6VectorIlE6LengthEv>
 8006e2a:	4602      	mov	r2, r0
 8006e2c:	69bb      	ldr	r3, [r7, #24]
 8006e2e:	4293      	cmp	r3, r2
 8006e30:	bf34      	ite	cc
 8006e32:	2301      	movcc	r3, #1
 8006e34:	2300      	movcs	r3, #0
 8006e36:	b2db      	uxtb	r3, r3
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	d010      	beq.n	8006e5e <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE+0x6e>
      element_count *= flatbuffer_tensor.shape()->Get(n);
 8006e3c:	68f8      	ldr	r0, [r7, #12]
 8006e3e:	f7ff fe6b 	bl	8006b18 <_ZNK6tflite6Tensor5shapeEv>
 8006e42:	4603      	mov	r3, r0
 8006e44:	69b9      	ldr	r1, [r7, #24]
 8006e46:	4618      	mov	r0, r3
 8006e48:	f7fd fcd6 	bl	80047f8 <_ZNK11flatbuffers6VectorIlE3GetEm>
 8006e4c:	4602      	mov	r2, r0
 8006e4e:	69fb      	ldr	r3, [r7, #28]
 8006e50:	fb02 f303 	mul.w	r3, r2, r3
 8006e54:	61fb      	str	r3, [r7, #28]
    for (size_t n = 0; n < flatbuffer_tensor.shape()->Length(); ++n) {
 8006e56:	69bb      	ldr	r3, [r7, #24]
 8006e58:	3301      	adds	r3, #1
 8006e5a:	61bb      	str	r3, [r7, #24]
 8006e5c:	e7de      	b.n	8006e1c <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE+0x2c>
    }
  }

  TfLiteType tf_lite_type;
  TF_LITE_ENSURE_STATUS(ConvertTensorType(flatbuffer_tensor.type(),
 8006e5e:	68f8      	ldr	r0, [r7, #12]
 8006e60:	f7ff fe68 	bl	8006b34 <_ZNK6tflite6Tensor4typeEv>
 8006e64:	4603      	mov	r3, r0
 8006e66:	4618      	mov	r0, r3
 8006e68:	f107 0315 	add.w	r3, r7, #21
 8006e6c:	683a      	ldr	r2, [r7, #0]
 8006e6e:	4619      	mov	r1, r3
 8006e70:	f7fd f932 	bl	80040d8 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE>
 8006e74:	4603      	mov	r3, r0
 8006e76:	75fb      	strb	r3, [r7, #23]
 8006e78:	7dfb      	ldrb	r3, [r7, #23]
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d001      	beq.n	8006e82 <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE+0x92>
 8006e7e:	7dfb      	ldrb	r3, [r7, #23]
 8006e80:	e013      	b.n	8006eaa <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE+0xba>
                                          &tf_lite_type, error_reporter));
  TF_LITE_ENSURE_STATUS(TfLiteTypeSizeOf(tf_lite_type, type_size));
 8006e82:	7d7b      	ldrb	r3, [r7, #21]
 8006e84:	6879      	ldr	r1, [r7, #4]
 8006e86:	4618      	mov	r0, r3
 8006e88:	f7ff ff46 	bl	8006d18 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj>
 8006e8c:	4603      	mov	r3, r0
 8006e8e:	75bb      	strb	r3, [r7, #22]
 8006e90:	7dbb      	ldrb	r3, [r7, #22]
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d001      	beq.n	8006e9a <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE+0xaa>
 8006e96:	7dbb      	ldrb	r3, [r7, #22]
 8006e98:	e007      	b.n	8006eaa <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE+0xba>
  *bytes = element_count * (*type_size);
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	69fa      	ldr	r2, [r7, #28]
 8006ea0:	fb02 f203 	mul.w	r2, r2, r3
 8006ea4:	68bb      	ldr	r3, [r7, #8]
 8006ea6:	601a      	str	r2, [r3, #0]
  return kTfLiteOk;
 8006ea8:	2300      	movs	r3, #0
}
 8006eaa:	4618      	mov	r0, r3
 8006eac:	3720      	adds	r7, #32
 8006eae:	46bd      	mov	sp, r7
 8006eb0:	bd80      	pop	{r7, pc}

08006eb2 <_ZN6tflite26TfLiteEvalTensorByteLengthEPK16TfLiteEvalTensorPj>:

TfLiteStatus TfLiteEvalTensorByteLength(const TfLiteEvalTensor* eval_tensor,
                                        size_t* out_bytes) {
 8006eb2:	b580      	push	{r7, lr}
 8006eb4:	b086      	sub	sp, #24
 8006eb6:	af00      	add	r7, sp, #0
 8006eb8:	6078      	str	r0, [r7, #4]
 8006eba:	6039      	str	r1, [r7, #0]
  TFLITE_DCHECK(out_bytes != nullptr);
 8006ebc:	683b      	ldr	r3, [r7, #0]
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d101      	bne.n	8006ec6 <_ZN6tflite26TfLiteEvalTensorByteLengthEPK16TfLiteEvalTensorPj+0x14>
 8006ec2:	f009 fc6c 	bl	801079e <abort>

  int element_count = 1;
 8006ec6:	2301      	movs	r3, #1
 8006ec8:	617b      	str	r3, [r7, #20]
  // If eval_tensor->dims == nullptr, then tensor is a scalar so has 1 element.
  if (eval_tensor->dims != nullptr) {
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	685b      	ldr	r3, [r3, #4]
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d015      	beq.n	8006efe <_ZN6tflite26TfLiteEvalTensorByteLengthEPK16TfLiteEvalTensorPj+0x4c>
    for (int n = 0; n < eval_tensor->dims->size; ++n) {
 8006ed2:	2300      	movs	r3, #0
 8006ed4:	613b      	str	r3, [r7, #16]
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	685b      	ldr	r3, [r3, #4]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	693a      	ldr	r2, [r7, #16]
 8006ede:	429a      	cmp	r2, r3
 8006ee0:	da0d      	bge.n	8006efe <_ZN6tflite26TfLiteEvalTensorByteLengthEPK16TfLiteEvalTensorPj+0x4c>
      element_count *= eval_tensor->dims->data[n];
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	685a      	ldr	r2, [r3, #4]
 8006ee6:	693b      	ldr	r3, [r7, #16]
 8006ee8:	009b      	lsls	r3, r3, #2
 8006eea:	4413      	add	r3, r2
 8006eec:	685a      	ldr	r2, [r3, #4]
 8006eee:	697b      	ldr	r3, [r7, #20]
 8006ef0:	fb02 f303 	mul.w	r3, r2, r3
 8006ef4:	617b      	str	r3, [r7, #20]
    for (int n = 0; n < eval_tensor->dims->size; ++n) {
 8006ef6:	693b      	ldr	r3, [r7, #16]
 8006ef8:	3301      	adds	r3, #1
 8006efa:	613b      	str	r3, [r7, #16]
 8006efc:	e7eb      	b.n	8006ed6 <_ZN6tflite26TfLiteEvalTensorByteLengthEPK16TfLiteEvalTensorPj+0x24>
    }
  }
  size_t type_size;
  TF_LITE_ENSURE_STATUS(TfLiteTypeSizeOf(eval_tensor->type, &type_size));
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	7a1b      	ldrb	r3, [r3, #8]
 8006f02:	f107 0208 	add.w	r2, r7, #8
 8006f06:	4611      	mov	r1, r2
 8006f08:	4618      	mov	r0, r3
 8006f0a:	f7ff ff05 	bl	8006d18 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj>
 8006f0e:	4603      	mov	r3, r0
 8006f10:	73fb      	strb	r3, [r7, #15]
 8006f12:	7bfb      	ldrb	r3, [r7, #15]
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	d001      	beq.n	8006f1c <_ZN6tflite26TfLiteEvalTensorByteLengthEPK16TfLiteEvalTensorPj+0x6a>
 8006f18:	7bfb      	ldrb	r3, [r7, #15]
 8006f1a:	e006      	b.n	8006f2a <_ZN6tflite26TfLiteEvalTensorByteLengthEPK16TfLiteEvalTensorPj+0x78>
  *out_bytes = element_count * type_size;
 8006f1c:	697b      	ldr	r3, [r7, #20]
 8006f1e:	68ba      	ldr	r2, [r7, #8]
 8006f20:	fb02 f203 	mul.w	r2, r2, r3
 8006f24:	683b      	ldr	r3, [r7, #0]
 8006f26:	601a      	str	r2, [r3, #0]
  return kTfLiteOk;
 8006f28:	2300      	movs	r3, #0
}
 8006f2a:	4618      	mov	r0, r3
 8006f2c:	3718      	adds	r7, #24
 8006f2e:	46bd      	mov	sp, r7
 8006f30:	bd80      	pop	{r7, pc}

08006f32 <_ZNK11flatbuffers6VectorIlE6LengthEv>:
  uoffset_t Length() const { return size(); }
 8006f32:	b580      	push	{r7, lr}
 8006f34:	b082      	sub	sp, #8
 8006f36:	af00      	add	r7, sp, #0
 8006f38:	6078      	str	r0, [r7, #4]
 8006f3a:	6878      	ldr	r0, [r7, #4]
 8006f3c:	f7fd fc4d 	bl	80047da <_ZNK11flatbuffers6VectorIlE4sizeEv>
 8006f40:	4603      	mov	r3, r0
 8006f42:	4618      	mov	r0, r3
 8006f44:	3708      	adds	r7, #8
 8006f46:	46bd      	mov	sp, r7
 8006f48:	bd80      	pop	{r7, pc}

08006f4a <_ZNK6tflite22QuantizationParameters5scaleEv>:
  const flatbuffers::Vector<float> *scale() const {
 8006f4a:	b580      	push	{r7, lr}
 8006f4c:	b082      	sub	sp, #8
 8006f4e:	af00      	add	r7, sp, #0
 8006f50:	6078      	str	r0, [r7, #4]
    return GetPointer<const flatbuffers::Vector<float> *>(VT_SCALE);
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	2108      	movs	r1, #8
 8006f56:	4618      	mov	r0, r3
 8006f58:	f001 fc7f 	bl	800885a <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorIfEEEET_t>
 8006f5c:	4603      	mov	r3, r0
  }
 8006f5e:	4618      	mov	r0, r3
 8006f60:	3708      	adds	r7, #8
 8006f62:	46bd      	mov	sp, r7
 8006f64:	bd80      	pop	{r7, pc}

08006f66 <_ZNK6tflite22QuantizationParameters10zero_pointEv>:
  const flatbuffers::Vector<int64_t> *zero_point() const {
 8006f66:	b580      	push	{r7, lr}
 8006f68:	b082      	sub	sp, #8
 8006f6a:	af00      	add	r7, sp, #0
 8006f6c:	6078      	str	r0, [r7, #4]
    return GetPointer<const flatbuffers::Vector<int64_t> *>(VT_ZERO_POINT);
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	210a      	movs	r1, #10
 8006f72:	4618      	mov	r0, r3
 8006f74:	f001 fc81 	bl	800887a <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorIxEEEET_t>
 8006f78:	4603      	mov	r3, r0
  }
 8006f7a:	4618      	mov	r0, r3
 8006f7c:	3708      	adds	r7, #8
 8006f7e:	46bd      	mov	sp, r7
 8006f80:	bd80      	pop	{r7, pc}

08006f82 <_ZNK6tflite22QuantizationParameters19quantized_dimensionEv>:
  int32_t quantized_dimension() const {
 8006f82:	b580      	push	{r7, lr}
 8006f84:	b082      	sub	sp, #8
 8006f86:	af00      	add	r7, sp, #0
 8006f88:	6078      	str	r0, [r7, #4]
    return GetField<int32_t>(VT_QUANTIZED_DIMENSION, 0);
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	2200      	movs	r2, #0
 8006f8e:	2110      	movs	r1, #16
 8006f90:	4618      	mov	r0, r3
 8006f92:	f7fd fba2 	bl	80046da <_ZNK11flatbuffers5Table8GetFieldIlEET_tS2_>
 8006f96:	4603      	mov	r3, r0
  }
 8006f98:	4618      	mov	r0, r3
 8006f9a:	3708      	adds	r7, #8
 8006f9c:	46bd      	mov	sp, r7
 8006f9e:	bd80      	pop	{r7, pc}

08006fa0 <_ZNK6tflite6Tensor6bufferEv>:
  uint32_t buffer() const {
 8006fa0:	b580      	push	{r7, lr}
 8006fa2:	b082      	sub	sp, #8
 8006fa4:	af00      	add	r7, sp, #0
 8006fa6:	6078      	str	r0, [r7, #4]
    return GetField<uint32_t>(VT_BUFFER, 0);
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	2200      	movs	r2, #0
 8006fac:	2108      	movs	r1, #8
 8006fae:	4618      	mov	r0, r3
 8006fb0:	f7fa fd72 	bl	8001a98 <_ZNK11flatbuffers5Table8GetFieldImEET_tS2_>
 8006fb4:	4603      	mov	r3, r0
  }
 8006fb6:	4618      	mov	r0, r3
 8006fb8:	3708      	adds	r7, #8
 8006fba:	46bd      	mov	sp, r7
 8006fbc:	bd80      	pop	{r7, pc}

08006fbe <_ZNK6tflite6Tensor12quantizationEv>:
  const tflite::QuantizationParameters *quantization() const {
 8006fbe:	b580      	push	{r7, lr}
 8006fc0:	b082      	sub	sp, #8
 8006fc2:	af00      	add	r7, sp, #0
 8006fc4:	6078      	str	r0, [r7, #4]
    return GetPointer<const tflite::QuantizationParameters *>(VT_QUANTIZATION);
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	210c      	movs	r1, #12
 8006fca:	4618      	mov	r0, r3
 8006fcc:	f001 fc65 	bl	800889a <_ZNK11flatbuffers5Table10GetPointerIPKN6tflite22QuantizationParametersEEET_t>
 8006fd0:	4603      	mov	r3, r0
  }
 8006fd2:	4618      	mov	r0, r3
 8006fd4:	3708      	adds	r7, #8
 8006fd6:	46bd      	mov	sp, r7
 8006fd8:	bd80      	pop	{r7, pc}

08006fda <_ZNK6tflite6Tensor11is_variableEv>:
  bool is_variable() const {
 8006fda:	b580      	push	{r7, lr}
 8006fdc:	b082      	sub	sp, #8
 8006fde:	af00      	add	r7, sp, #0
 8006fe0:	6078      	str	r0, [r7, #4]
    return GetField<uint8_t>(VT_IS_VARIABLE, 0) != 0;
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	2200      	movs	r2, #0
 8006fe6:	210e      	movs	r1, #14
 8006fe8:	4618      	mov	r0, r3
 8006fea:	f7fd fb47 	bl	800467c <_ZNK11flatbuffers5Table8GetFieldIhEET_tS2_>
 8006fee:	4603      	mov	r3, r0
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	bf14      	ite	ne
 8006ff4:	2301      	movne	r3, #1
 8006ff6:	2300      	moveq	r3, #0
 8006ff8:	b2db      	uxtb	r3, r3
  }
 8006ffa:	4618      	mov	r0, r3
 8006ffc:	3708      	adds	r7, #8
 8006ffe:	46bd      	mov	sp, r7
 8007000:	bd80      	pop	{r7, pc}

08007002 <_ZNK6tflite8Operator6inputsEv>:
  const flatbuffers::Vector<int32_t> *inputs() const {
 8007002:	b580      	push	{r7, lr}
 8007004:	b082      	sub	sp, #8
 8007006:	af00      	add	r7, sp, #0
 8007008:	6078      	str	r0, [r7, #4]
    return GetPointer<const flatbuffers::Vector<int32_t> *>(VT_INPUTS);
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	2106      	movs	r1, #6
 800700e:	4618      	mov	r0, r3
 8007010:	f7fd fb81 	bl	8004716 <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorIlEEEET_t>
 8007014:	4603      	mov	r3, r0
  }
 8007016:	4618      	mov	r0, r3
 8007018:	3708      	adds	r7, #8
 800701a:	46bd      	mov	sp, r7
 800701c:	bd80      	pop	{r7, pc}

0800701e <_ZNK6tflite8Operator7outputsEv>:
  const flatbuffers::Vector<int32_t> *outputs() const {
 800701e:	b580      	push	{r7, lr}
 8007020:	b082      	sub	sp, #8
 8007022:	af00      	add	r7, sp, #0
 8007024:	6078      	str	r0, [r7, #4]
    return GetPointer<const flatbuffers::Vector<int32_t> *>(VT_OUTPUTS);
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	2108      	movs	r1, #8
 800702a:	4618      	mov	r0, r3
 800702c:	f7fd fb73 	bl	8004716 <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorIlEEEET_t>
 8007030:	4603      	mov	r3, r0
  }
 8007032:	4618      	mov	r0, r3
 8007034:	3708      	adds	r7, #8
 8007036:	46bd      	mov	sp, r7
 8007038:	bd80      	pop	{r7, pc}

0800703a <_ZNK6tflite8SubGraph7tensorsEv>:
  const flatbuffers::Vector<flatbuffers::Offset<tflite::Tensor>> *tensors() const {
 800703a:	b580      	push	{r7, lr}
 800703c:	b082      	sub	sp, #8
 800703e:	af00      	add	r7, sp, #0
 8007040:	6078      	str	r0, [r7, #4]
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<tflite::Tensor>> *>(VT_TENSORS);
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	2104      	movs	r1, #4
 8007046:	4618      	mov	r0, r3
 8007048:	f001 fc37 	bl	80088ba <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite6TensorEEEEEEET_t>
 800704c:	4603      	mov	r3, r0
  }
 800704e:	4618      	mov	r0, r3
 8007050:	3708      	adds	r7, #8
 8007052:	46bd      	mov	sp, r7
 8007054:	bd80      	pop	{r7, pc}

08007056 <_ZNK6tflite8SubGraph6inputsEv>:
  const flatbuffers::Vector<int32_t> *inputs() const {
 8007056:	b580      	push	{r7, lr}
 8007058:	b082      	sub	sp, #8
 800705a:	af00      	add	r7, sp, #0
 800705c:	6078      	str	r0, [r7, #4]
    return GetPointer<const flatbuffers::Vector<int32_t> *>(VT_INPUTS);
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	2106      	movs	r1, #6
 8007062:	4618      	mov	r0, r3
 8007064:	f7fd fb57 	bl	8004716 <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorIlEEEET_t>
 8007068:	4603      	mov	r3, r0
  }
 800706a:	4618      	mov	r0, r3
 800706c:	3708      	adds	r7, #8
 800706e:	46bd      	mov	sp, r7
 8007070:	bd80      	pop	{r7, pc}

08007072 <_ZNK6tflite8SubGraph7outputsEv>:
  const flatbuffers::Vector<int32_t> *outputs() const {
 8007072:	b580      	push	{r7, lr}
 8007074:	b082      	sub	sp, #8
 8007076:	af00      	add	r7, sp, #0
 8007078:	6078      	str	r0, [r7, #4]
    return GetPointer<const flatbuffers::Vector<int32_t> *>(VT_OUTPUTS);
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	2108      	movs	r1, #8
 800707e:	4618      	mov	r0, r3
 8007080:	f7fd fb49 	bl	8004716 <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorIlEEEET_t>
 8007084:	4603      	mov	r3, r0
  }
 8007086:	4618      	mov	r0, r3
 8007088:	3708      	adds	r7, #8
 800708a:	46bd      	mov	sp, r7
 800708c:	bd80      	pop	{r7, pc}

0800708e <_ZNK6tflite6Buffer4dataEv>:
  const flatbuffers::Vector<uint8_t> *data() const {
 800708e:	b580      	push	{r7, lr}
 8007090:	b082      	sub	sp, #8
 8007092:	af00      	add	r7, sp, #0
 8007094:	6078      	str	r0, [r7, #4]
    return GetPointer<const flatbuffers::Vector<uint8_t> *>(VT_DATA);
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	2104      	movs	r1, #4
 800709a:	4618      	mov	r0, r3
 800709c:	f001 fbcd 	bl	800883a <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorIhEEEET_t>
 80070a0:	4603      	mov	r3, r0
  }
 80070a2:	4618      	mov	r0, r3
 80070a4:	3708      	adds	r7, #8
 80070a6:	46bd      	mov	sp, r7
 80070a8:	bd80      	pop	{r7, pc}

080070aa <_ZNK6tflite8Metadata4nameEv>:
  const flatbuffers::String *name() const {
 80070aa:	b580      	push	{r7, lr}
 80070ac:	b082      	sub	sp, #8
 80070ae:	af00      	add	r7, sp, #0
 80070b0:	6078      	str	r0, [r7, #4]
    return GetPointer<const flatbuffers::String *>(VT_NAME);
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	2104      	movs	r1, #4
 80070b6:	4618      	mov	r0, r3
 80070b8:	f7fd fb5d 	bl	8004776 <_ZNK11flatbuffers5Table10GetPointerIPKNS_6StringEEET_t>
 80070bc:	4603      	mov	r3, r0
  }
 80070be:	4618      	mov	r0, r3
 80070c0:	3708      	adds	r7, #8
 80070c2:	46bd      	mov	sp, r7
 80070c4:	bd80      	pop	{r7, pc}

080070c6 <_ZNK6tflite8Metadata6bufferEv>:
  uint32_t buffer() const {
 80070c6:	b580      	push	{r7, lr}
 80070c8:	b082      	sub	sp, #8
 80070ca:	af00      	add	r7, sp, #0
 80070cc:	6078      	str	r0, [r7, #4]
    return GetField<uint32_t>(VT_BUFFER, 0);
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	2200      	movs	r2, #0
 80070d2:	2106      	movs	r1, #6
 80070d4:	4618      	mov	r0, r3
 80070d6:	f7fa fcdf 	bl	8001a98 <_ZNK11flatbuffers5Table8GetFieldImEET_tS2_>
 80070da:	4603      	mov	r3, r0
  }
 80070dc:	4618      	mov	r0, r3
 80070de:	3708      	adds	r7, #8
 80070e0:	46bd      	mov	sp, r7
 80070e2:	bd80      	pop	{r7, pc}

080070e4 <_ZNK6tflite5Model7buffersEv>:
  const flatbuffers::Vector<flatbuffers::Offset<tflite::Buffer>> *buffers() const {
 80070e4:	b580      	push	{r7, lr}
 80070e6:	b082      	sub	sp, #8
 80070e8:	af00      	add	r7, sp, #0
 80070ea:	6078      	str	r0, [r7, #4]
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<tflite::Buffer>> *>(VT_BUFFERS);
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	210c      	movs	r1, #12
 80070f0:	4618      	mov	r0, r3
 80070f2:	f001 fbf2 	bl	80088da <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite6BufferEEEEEEET_t>
 80070f6:	4603      	mov	r3, r0
  }
 80070f8:	4618      	mov	r0, r3
 80070fa:	3708      	adds	r7, #8
 80070fc:	46bd      	mov	sp, r7
 80070fe:	bd80      	pop	{r7, pc}

08007100 <_ZNK6tflite5Model8metadataEv>:
  const flatbuffers::Vector<flatbuffers::Offset<tflite::Metadata>> *metadata() const {
 8007100:	b580      	push	{r7, lr}
 8007102:	b082      	sub	sp, #8
 8007104:	af00      	add	r7, sp, #0
 8007106:	6078      	str	r0, [r7, #4]
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<tflite::Metadata>> *>(VT_METADATA);
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	2110      	movs	r1, #16
 800710c:	4618      	mov	r0, r3
 800710e:	f001 fbf4 	bl	80088fa <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite8MetadataEEEEEEET_t>
 8007112:	4603      	mov	r3, r0
  }
 8007114:	4618      	mov	r0, r3
 8007116:	3708      	adds	r7, #8
 8007118:	46bd      	mov	sp, r7
 800711a:	bd80      	pop	{r7, pc}

0800711c <_ZN6tflite20BuiltinDataAllocatorD1Ev>:

  virtual ~BuiltinDataAllocator() {}
 800711c:	b480      	push	{r7}
 800711e:	b083      	sub	sp, #12
 8007120:	af00      	add	r7, sp, #0
 8007122:	6078      	str	r0, [r7, #4]
 8007124:	4a04      	ldr	r2, [pc, #16]	; (8007138 <_ZN6tflite20BuiltinDataAllocatorD1Ev+0x1c>)
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	601a      	str	r2, [r3, #0]
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	4618      	mov	r0, r3
 800712e:	370c      	adds	r7, #12
 8007130:	46bd      	mov	sp, r7
 8007132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007136:	4770      	bx	lr
 8007138:	0801cf34 	.word	0x0801cf34

0800713c <_ZN6tflite20BuiltinDataAllocatorD0Ev>:
 800713c:	b580      	push	{r7, lr}
 800713e:	b082      	sub	sp, #8
 8007140:	af00      	add	r7, sp, #0
 8007142:	6078      	str	r0, [r7, #4]
 8007144:	6878      	ldr	r0, [r7, #4]
 8007146:	f7ff ffe9 	bl	800711c <_ZN6tflite20BuiltinDataAllocatorD1Ev>
 800714a:	2104      	movs	r1, #4
 800714c:	6878      	ldr	r0, [r7, #4]
 800714e:	f009 f8a0 	bl	8010292 <_ZdlPvj>
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	4618      	mov	r0, r3
 8007156:	3708      	adds	r7, #8
 8007158:	46bd      	mov	sp, r7
 800715a:	bd80      	pop	{r7, pc}

0800715c <_ZN6tflite20BuiltinDataAllocatorC1Ev>:
class BuiltinDataAllocator {
 800715c:	b480      	push	{r7}
 800715e:	b083      	sub	sp, #12
 8007160:	af00      	add	r7, sp, #0
 8007162:	6078      	str	r0, [r7, #4]
 8007164:	4a04      	ldr	r2, [pc, #16]	; (8007178 <_ZN6tflite20BuiltinDataAllocatorC1Ev+0x1c>)
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	601a      	str	r2, [r3, #0]
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	4618      	mov	r0, r3
 800716e:	370c      	adds	r7, #12
 8007170:	46bd      	mov	sp, r7
 8007172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007176:	4770      	bx	lr
 8007178:	0801cf34 	.word	0x0801cf34

0800717c <_ZN6tflite12_GLOBAL__N_125MicroBuiltinDataAllocatorC1EPNS_21SimpleMemoryAllocatorE>:
constexpr char kOfflineMemAllocMetadata[] = "OfflineMemoryAllocation";
const TfLiteIntArray kZeroLengthIntArray = {};

class MicroBuiltinDataAllocator : public BuiltinDataAllocator {
 public:
  explicit MicroBuiltinDataAllocator(SimpleMemoryAllocator* memory_allocator)
 800717c:	b580      	push	{r7, lr}
 800717e:	b082      	sub	sp, #8
 8007180:	af00      	add	r7, sp, #0
 8007182:	6078      	str	r0, [r7, #4]
 8007184:	6039      	str	r1, [r7, #0]
      : memory_allocator_(memory_allocator) {}
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	4618      	mov	r0, r3
 800718a:	f7ff ffe7 	bl	800715c <_ZN6tflite20BuiltinDataAllocatorC1Ev>
 800718e:	4a05      	ldr	r2, [pc, #20]	; (80071a4 <_ZN6tflite12_GLOBAL__N_125MicroBuiltinDataAllocatorC1EPNS_21SimpleMemoryAllocatorE+0x28>)
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	601a      	str	r2, [r3, #0]
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	683a      	ldr	r2, [r7, #0]
 8007198:	605a      	str	r2, [r3, #4]
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	4618      	mov	r0, r3
 800719e:	3708      	adds	r7, #8
 80071a0:	46bd      	mov	sp, r7
 80071a2:	bd80      	pop	{r7, pc}
 80071a4:	0801cee0 	.word	0x0801cee0

080071a8 <_ZN6tflite12_GLOBAL__N_125MicroBuiltinDataAllocator8AllocateEjj>:

  void* Allocate(size_t size, size_t alignment_hint) override {
 80071a8:	b580      	push	{r7, lr}
 80071aa:	b084      	sub	sp, #16
 80071ac:	af00      	add	r7, sp, #0
 80071ae:	60f8      	str	r0, [r7, #12]
 80071b0:	60b9      	str	r1, [r7, #8]
 80071b2:	607a      	str	r2, [r7, #4]
    return memory_allocator_->AllocateFromTail(size, alignment_hint);
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	6858      	ldr	r0, [r3, #4]
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	685b      	ldr	r3, [r3, #4]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	330c      	adds	r3, #12
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	687a      	ldr	r2, [r7, #4]
 80071c4:	68b9      	ldr	r1, [r7, #8]
 80071c6:	4798      	blx	r3
 80071c8:	4603      	mov	r3, r0
  }
 80071ca:	4618      	mov	r0, r3
 80071cc:	3710      	adds	r7, #16
 80071ce:	46bd      	mov	sp, r7
 80071d0:	bd80      	pop	{r7, pc}

080071d2 <_ZN6tflite12_GLOBAL__N_125MicroBuiltinDataAllocator10DeallocateEPv>:
  void Deallocate(void* data) override {
 80071d2:	b480      	push	{r7}
 80071d4:	b083      	sub	sp, #12
 80071d6:	af00      	add	r7, sp, #0
 80071d8:	6078      	str	r0, [r7, #4]
 80071da:	6039      	str	r1, [r7, #0]
    // Do not deallocate, builtin data needs to be available for the life time
    // of the model.
  }
 80071dc:	bf00      	nop
 80071de:	370c      	adds	r7, #12
 80071e0:	46bd      	mov	sp, r7
 80071e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071e6:	4770      	bx	lr

080071e8 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilderC1EPNS0_14AllocationInfoEjjPNS_13ErrorReporterE>:
// A helper class to construct AllocationInfo array. This array contains the
// lifetime of tensors / scratch_buffer and will be used to calculate the memory
// plan. Methods need to be called in order from `Init`, `Add*`, to `Finish`.
class AllocationInfoBuilder {
 public:
  AllocationInfoBuilder(AllocationInfo* info, size_t tensor_count,
 80071e8:	b480      	push	{r7}
 80071ea:	b085      	sub	sp, #20
 80071ec:	af00      	add	r7, sp, #0
 80071ee:	60f8      	str	r0, [r7, #12]
 80071f0:	60b9      	str	r1, [r7, #8]
 80071f2:	607a      	str	r2, [r7, #4]
 80071f4:	603b      	str	r3, [r7, #0]
                        size_t scratch_buffer_count, ErrorReporter* reporter)
      : info_(info),
        tensor_count_(tensor_count),
        buffer_count_(scratch_buffer_count),
        reporter_(reporter) {}
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	68ba      	ldr	r2, [r7, #8]
 80071fa:	601a      	str	r2, [r3, #0]
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	687a      	ldr	r2, [r7, #4]
 8007200:	605a      	str	r2, [r3, #4]
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	683a      	ldr	r2, [r7, #0]
 8007206:	609a      	str	r2, [r3, #8]
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	69ba      	ldr	r2, [r7, #24]
 800720c:	60da      	str	r2, [r3, #12]
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	4618      	mov	r0, r3
 8007212:	3714      	adds	r7, #20
 8007214:	46bd      	mov	sp, r7
 8007216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800721a:	4770      	bx	lr

0800721c <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP16TfLiteEvalTensor>:
  ErrorReporter* reporter_ = nullptr;
};

TfLiteStatus AllocationInfoBuilder::AddTensors(const SubGraph* subgraph,
                                               const int32_t* offline_offsets,
                                               TfLiteEvalTensor* eval_tensors) {
 800721c:	b580      	push	{r7, lr}
 800721e:	b096      	sub	sp, #88	; 0x58
 8007220:	af00      	add	r7, sp, #0
 8007222:	60f8      	str	r0, [r7, #12]
 8007224:	60b9      	str	r1, [r7, #8]
 8007226:	607a      	str	r2, [r7, #4]
 8007228:	603b      	str	r3, [r7, #0]
  TFLITE_DCHECK(eval_tensors != nullptr);
 800722a:	683b      	ldr	r3, [r7, #0]
 800722c:	2b00      	cmp	r3, #0
 800722e:	d101      	bne.n	8007234 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP16TfLiteEvalTensor+0x18>
 8007230:	f009 fab5 	bl	801079e <abort>

  // Set up allocation info for all tensors.
  for (size_t i = 0; i < tensor_count_; ++i) {
 8007234:	2300      	movs	r3, #0
 8007236:	657b      	str	r3, [r7, #84]	; 0x54
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	685b      	ldr	r3, [r3, #4]
 800723c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800723e:	429a      	cmp	r2, r3
 8007240:	d267      	bcs.n	8007312 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP16TfLiteEvalTensor+0xf6>
    AllocationInfo* current = &info_[i];
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	6819      	ldr	r1, [r3, #0]
 8007246:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8007248:	4613      	mov	r3, r2
 800724a:	005b      	lsls	r3, r3, #1
 800724c:	4413      	add	r3, r2
 800724e:	00db      	lsls	r3, r3, #3
 8007250:	440b      	add	r3, r1
 8007252:	63fb      	str	r3, [r7, #60]	; 0x3c
    current->output_ptr = &(eval_tensors[i].data.data);
 8007254:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8007256:	4613      	mov	r3, r2
 8007258:	005b      	lsls	r3, r3, #1
 800725a:	4413      	add	r3, r2
 800725c:	009b      	lsls	r3, r3, #2
 800725e:	461a      	mov	r2, r3
 8007260:	683b      	ldr	r3, [r7, #0]
 8007262:	4413      	add	r3, r2
 8007264:	461a      	mov	r2, r3
 8007266:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007268:	605a      	str	r2, [r3, #4]

    TF_LITE_ENSURE_STATUS(
 800726a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800726c:	4613      	mov	r3, r2
 800726e:	005b      	lsls	r3, r3, #1
 8007270:	4413      	add	r3, r2
 8007272:	009b      	lsls	r3, r3, #2
 8007274:	461a      	mov	r2, r3
 8007276:	683b      	ldr	r3, [r7, #0]
 8007278:	4413      	add	r3, r2
 800727a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800727c:	4611      	mov	r1, r2
 800727e:	4618      	mov	r0, r3
 8007280:	f7ff fe17 	bl	8006eb2 <_ZN6tflite26TfLiteEvalTensorByteLengthEPK16TfLiteEvalTensorPj>
 8007284:	4603      	mov	r3, r0
 8007286:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800728a:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800728e:	2b00      	cmp	r3, #0
 8007290:	d002      	beq.n	8007298 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP16TfLiteEvalTensor+0x7c>
 8007292:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8007296:	e117      	b.n	80074c8 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP16TfLiteEvalTensor+0x2ac>
        TfLiteEvalTensorByteLength(&eval_tensors[i], &current->bytes));

    current->first_created = -1;
 8007298:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800729a:	f04f 32ff 	mov.w	r2, #4294967295
 800729e:	609a      	str	r2, [r3, #8]
    current->last_used = -1;
 80072a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80072a2:	f04f 32ff 	mov.w	r2, #4294967295
 80072a6:	60da      	str	r2, [r3, #12]
    current->needs_allocating = (eval_tensors[i].data.data == nullptr) &&
 80072a8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80072aa:	4613      	mov	r3, r2
 80072ac:	005b      	lsls	r3, r3, #1
 80072ae:	4413      	add	r3, r2
 80072b0:	009b      	lsls	r3, r3, #2
 80072b2:	461a      	mov	r2, r3
 80072b4:	683b      	ldr	r3, [r7, #0]
 80072b6:	4413      	add	r3, r2
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d113      	bne.n	80072e6 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP16TfLiteEvalTensor+0xca>
                                (!subgraph->tensors()->Get(i)->is_variable());
 80072be:	68b8      	ldr	r0, [r7, #8]
 80072c0:	f7ff febb 	bl	800703a <_ZNK6tflite8SubGraph7tensorsEv>
 80072c4:	4603      	mov	r3, r0
 80072c6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80072c8:	4618      	mov	r0, r3
 80072ca:	f001 fbaf 	bl	8008a2c <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEE3GetEm>
 80072ce:	4603      	mov	r3, r0
 80072d0:	4618      	mov	r0, r3
 80072d2:	f7ff fe82 	bl	8006fda <_ZNK6tflite6Tensor11is_variableEv>
 80072d6:	4603      	mov	r3, r0
 80072d8:	f083 0301 	eor.w	r3, r3, #1
 80072dc:	b2db      	uxtb	r3, r3
    current->needs_allocating = (eval_tensors[i].data.data == nullptr) &&
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d001      	beq.n	80072e6 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP16TfLiteEvalTensor+0xca>
 80072e2:	2201      	movs	r2, #1
 80072e4:	e000      	b.n	80072e8 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP16TfLiteEvalTensor+0xcc>
 80072e6:	2200      	movs	r2, #0
 80072e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80072ea:	751a      	strb	r2, [r3, #20]
    if (offline_offsets) {
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d007      	beq.n	8007302 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP16TfLiteEvalTensor+0xe6>
      current->offline_offset = offline_offsets[i];
 80072f2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80072f4:	009b      	lsls	r3, r3, #2
 80072f6:	687a      	ldr	r2, [r7, #4]
 80072f8:	4413      	add	r3, r2
 80072fa:	681a      	ldr	r2, [r3, #0]
 80072fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80072fe:	611a      	str	r2, [r3, #16]
 8007300:	e003      	b.n	800730a <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP16TfLiteEvalTensor+0xee>
    } else {
      current->offline_offset = kOnlinePlannedBuffer;
 8007302:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007304:	f04f 32ff 	mov.w	r2, #4294967295
 8007308:	611a      	str	r2, [r3, #16]
  for (size_t i = 0; i < tensor_count_; ++i) {
 800730a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800730c:	3301      	adds	r3, #1
 800730e:	657b      	str	r3, [r7, #84]	; 0x54
 8007310:	e792      	b.n	8007238 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP16TfLiteEvalTensor+0x1c>
    }
  }

  uint32_t operators_size = NumSubgraphOperators(subgraph);
 8007312:	68b8      	ldr	r0, [r7, #8]
 8007314:	f7ff fafc 	bl	8006910 <_ZN6tflite20NumSubgraphOperatorsEPKNS_8SubGraphE>
 8007318:	6378      	str	r0, [r7, #52]	; 0x34

  for (size_t i = 0; i < subgraph->inputs()->size(); ++i) {
 800731a:	2300      	movs	r3, #0
 800731c:	653b      	str	r3, [r7, #80]	; 0x50
 800731e:	68b8      	ldr	r0, [r7, #8]
 8007320:	f7ff fe99 	bl	8007056 <_ZNK6tflite8SubGraph6inputsEv>
 8007324:	4603      	mov	r3, r0
 8007326:	4618      	mov	r0, r3
 8007328:	f7fd fa57 	bl	80047da <_ZNK11flatbuffers6VectorIlE4sizeEv>
 800732c:	4602      	mov	r2, r0
 800732e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007330:	4293      	cmp	r3, r2
 8007332:	bf34      	ite	cc
 8007334:	2301      	movcc	r3, #1
 8007336:	2300      	movcs	r3, #0
 8007338:	b2db      	uxtb	r3, r3
 800733a:	2b00      	cmp	r3, #0
 800733c:	d018      	beq.n	8007370 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP16TfLiteEvalTensor+0x154>
    const int tensor_index = subgraph->inputs()->Get(i);
 800733e:	68b8      	ldr	r0, [r7, #8]
 8007340:	f7ff fe89 	bl	8007056 <_ZNK6tflite8SubGraph6inputsEv>
 8007344:	4603      	mov	r3, r0
 8007346:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8007348:	4618      	mov	r0, r3
 800734a:	f7fd fa55 	bl	80047f8 <_ZNK11flatbuffers6VectorIlE3GetEm>
 800734e:	6178      	str	r0, [r7, #20]
    AllocationInfo* current = &info_[tensor_index];
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	6819      	ldr	r1, [r3, #0]
 8007354:	697a      	ldr	r2, [r7, #20]
 8007356:	4613      	mov	r3, r2
 8007358:	005b      	lsls	r3, r3, #1
 800735a:	4413      	add	r3, r2
 800735c:	00db      	lsls	r3, r3, #3
 800735e:	440b      	add	r3, r1
 8007360:	613b      	str	r3, [r7, #16]
    current->first_created = 0;
 8007362:	693b      	ldr	r3, [r7, #16]
 8007364:	2200      	movs	r2, #0
 8007366:	609a      	str	r2, [r3, #8]
  for (size_t i = 0; i < subgraph->inputs()->size(); ++i) {
 8007368:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800736a:	3301      	adds	r3, #1
 800736c:	653b      	str	r3, [r7, #80]	; 0x50
 800736e:	e7d6      	b.n	800731e <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP16TfLiteEvalTensor+0x102>
  }

  // Mark all outputs as persistent to the end of the invocation.
  for (size_t i = 0; i < subgraph->outputs()->size(); ++i) {
 8007370:	2300      	movs	r3, #0
 8007372:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007374:	68b8      	ldr	r0, [r7, #8]
 8007376:	f7ff fe7c 	bl	8007072 <_ZNK6tflite8SubGraph7outputsEv>
 800737a:	4603      	mov	r3, r0
 800737c:	4618      	mov	r0, r3
 800737e:	f7fd fa2c 	bl	80047da <_ZNK11flatbuffers6VectorIlE4sizeEv>
 8007382:	4602      	mov	r2, r0
 8007384:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007386:	4293      	cmp	r3, r2
 8007388:	bf34      	ite	cc
 800738a:	2301      	movcc	r3, #1
 800738c:	2300      	movcs	r3, #0
 800738e:	b2db      	uxtb	r3, r3
 8007390:	2b00      	cmp	r3, #0
 8007392:	d01a      	beq.n	80073ca <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP16TfLiteEvalTensor+0x1ae>
    const int tensor_index = subgraph->outputs()->Get(i);
 8007394:	68b8      	ldr	r0, [r7, #8]
 8007396:	f7ff fe6c 	bl	8007072 <_ZNK6tflite8SubGraph7outputsEv>
 800739a:	4603      	mov	r3, r0
 800739c:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800739e:	4618      	mov	r0, r3
 80073a0:	f7fd fa2a 	bl	80047f8 <_ZNK11flatbuffers6VectorIlE3GetEm>
 80073a4:	61f8      	str	r0, [r7, #28]
    AllocationInfo* current = &info_[tensor_index];
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	6819      	ldr	r1, [r3, #0]
 80073aa:	69fa      	ldr	r2, [r7, #28]
 80073ac:	4613      	mov	r3, r2
 80073ae:	005b      	lsls	r3, r3, #1
 80073b0:	4413      	add	r3, r2
 80073b2:	00db      	lsls	r3, r3, #3
 80073b4:	440b      	add	r3, r1
 80073b6:	61bb      	str	r3, [r7, #24]
    current->last_used = operators_size - 1;
 80073b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80073ba:	3b01      	subs	r3, #1
 80073bc:	461a      	mov	r2, r3
 80073be:	69bb      	ldr	r3, [r7, #24]
 80073c0:	60da      	str	r2, [r3, #12]
  for (size_t i = 0; i < subgraph->outputs()->size(); ++i) {
 80073c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80073c4:	3301      	adds	r3, #1
 80073c6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80073c8:	e7d4      	b.n	8007374 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP16TfLiteEvalTensor+0x158>
  }

  // Figure out when the first and last use of each tensor is.
  for (int i = (operators_size - 1); i >= 0; --i) {
 80073ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80073cc:	3b01      	subs	r3, #1
 80073ce:	64bb      	str	r3, [r7, #72]	; 0x48
 80073d0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	db77      	blt.n	80074c6 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP16TfLiteEvalTensor+0x2aa>
    const auto* op = subgraph->operators()->Get(i);
 80073d6:	68b8      	ldr	r0, [r7, #8]
 80073d8:	f7ff fa7e 	bl	80068d8 <_ZNK6tflite8SubGraph9operatorsEv>
 80073dc:	4602      	mov	r2, r0
 80073de:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80073e0:	4619      	mov	r1, r3
 80073e2:	4610      	mov	r0, r2
 80073e4:	f001 fb48 	bl	8008a78 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8OperatorEEEE3GetEm>
 80073e8:	6338      	str	r0, [r7, #48]	; 0x30
    for (size_t n = 0; n < op->inputs()->size(); ++n) {
 80073ea:	2300      	movs	r3, #0
 80073ec:	647b      	str	r3, [r7, #68]	; 0x44
 80073ee:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80073f0:	f7ff fe07 	bl	8007002 <_ZNK6tflite8Operator6inputsEv>
 80073f4:	4603      	mov	r3, r0
 80073f6:	4618      	mov	r0, r3
 80073f8:	f7fd f9ef 	bl	80047da <_ZNK11flatbuffers6VectorIlE4sizeEv>
 80073fc:	4602      	mov	r2, r0
 80073fe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007400:	4293      	cmp	r3, r2
 8007402:	bf34      	ite	cc
 8007404:	2301      	movcc	r3, #1
 8007406:	2300      	movcs	r3, #0
 8007408:	b2db      	uxtb	r3, r3
 800740a:	2b00      	cmp	r3, #0
 800740c:	d022      	beq.n	8007454 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP16TfLiteEvalTensor+0x238>
      const int tensor_index = op->inputs()->Get(n);
 800740e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007410:	f7ff fdf7 	bl	8007002 <_ZNK6tflite8Operator6inputsEv>
 8007414:	4603      	mov	r3, r0
 8007416:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007418:	4618      	mov	r0, r3
 800741a:	f7fd f9ed 	bl	80047f8 <_ZNK11flatbuffers6VectorIlE3GetEm>
 800741e:	6278      	str	r0, [r7, #36]	; 0x24
      AllocationInfo* current = &info_[tensor_index];
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	6819      	ldr	r1, [r3, #0]
 8007424:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007426:	4613      	mov	r3, r2
 8007428:	005b      	lsls	r3, r3, #1
 800742a:	4413      	add	r3, r2
 800742c:	00db      	lsls	r3, r3, #3
 800742e:	440b      	add	r3, r1
 8007430:	623b      	str	r3, [r7, #32]
      if (((current->last_used == -1) || (current->last_used < i))) {
 8007432:	6a3b      	ldr	r3, [r7, #32]
 8007434:	68db      	ldr	r3, [r3, #12]
 8007436:	f1b3 3fff 	cmp.w	r3, #4294967295
 800743a:	d004      	beq.n	8007446 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP16TfLiteEvalTensor+0x22a>
 800743c:	6a3b      	ldr	r3, [r7, #32]
 800743e:	68db      	ldr	r3, [r3, #12]
 8007440:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007442:	429a      	cmp	r2, r3
 8007444:	dd02      	ble.n	800744c <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP16TfLiteEvalTensor+0x230>
        current->last_used = i;
 8007446:	6a3b      	ldr	r3, [r7, #32]
 8007448:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800744a:	60da      	str	r2, [r3, #12]
    for (size_t n = 0; n < op->inputs()->size(); ++n) {
 800744c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800744e:	3301      	adds	r3, #1
 8007450:	647b      	str	r3, [r7, #68]	; 0x44
 8007452:	e7cc      	b.n	80073ee <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP16TfLiteEvalTensor+0x1d2>
      }
    }
    for (size_t n = 0; n < op->outputs()->size(); ++n) {
 8007454:	2300      	movs	r3, #0
 8007456:	643b      	str	r3, [r7, #64]	; 0x40
 8007458:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800745a:	f7ff fde0 	bl	800701e <_ZNK6tflite8Operator7outputsEv>
 800745e:	4603      	mov	r3, r0
 8007460:	4618      	mov	r0, r3
 8007462:	f7fd f9ba 	bl	80047da <_ZNK11flatbuffers6VectorIlE4sizeEv>
 8007466:	4602      	mov	r2, r0
 8007468:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800746a:	4293      	cmp	r3, r2
 800746c:	bf34      	ite	cc
 800746e:	2301      	movcc	r3, #1
 8007470:	2300      	movcs	r3, #0
 8007472:	b2db      	uxtb	r3, r3
 8007474:	2b00      	cmp	r3, #0
 8007476:	d022      	beq.n	80074be <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP16TfLiteEvalTensor+0x2a2>
      const int tensor_index = op->outputs()->Get(n);
 8007478:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800747a:	f7ff fdd0 	bl	800701e <_ZNK6tflite8Operator7outputsEv>
 800747e:	4603      	mov	r3, r0
 8007480:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007482:	4618      	mov	r0, r3
 8007484:	f7fd f9b8 	bl	80047f8 <_ZNK11flatbuffers6VectorIlE3GetEm>
 8007488:	62f8      	str	r0, [r7, #44]	; 0x2c
      AllocationInfo* current = &info_[tensor_index];
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	6819      	ldr	r1, [r3, #0]
 800748e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007490:	4613      	mov	r3, r2
 8007492:	005b      	lsls	r3, r3, #1
 8007494:	4413      	add	r3, r2
 8007496:	00db      	lsls	r3, r3, #3
 8007498:	440b      	add	r3, r1
 800749a:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((current->first_created == -1) || (current->first_created > i)) {
 800749c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800749e:	689b      	ldr	r3, [r3, #8]
 80074a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80074a4:	d004      	beq.n	80074b0 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP16TfLiteEvalTensor+0x294>
 80074a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074a8:	689b      	ldr	r3, [r3, #8]
 80074aa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80074ac:	429a      	cmp	r2, r3
 80074ae:	da02      	bge.n	80074b6 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP16TfLiteEvalTensor+0x29a>
        current->first_created = i;
 80074b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074b2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80074b4:	609a      	str	r2, [r3, #8]
    for (size_t n = 0; n < op->outputs()->size(); ++n) {
 80074b6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80074b8:	3301      	adds	r3, #1
 80074ba:	643b      	str	r3, [r7, #64]	; 0x40
 80074bc:	e7cc      	b.n	8007458 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP16TfLiteEvalTensor+0x23c>
  for (int i = (operators_size - 1); i >= 0; --i) {
 80074be:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80074c0:	3b01      	subs	r3, #1
 80074c2:	64bb      	str	r3, [r7, #72]	; 0x48
 80074c4:	e784      	b.n	80073d0 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP16TfLiteEvalTensor+0x1b4>
      }
    }
  }
  return kTfLiteOk;
 80074c6:	2300      	movs	r3, #0
}
 80074c8:	4618      	mov	r0, r3
 80074ca:	3758      	adds	r7, #88	; 0x58
 80074cc:	46bd      	mov	sp, r7
 80074ce:	bd80      	pop	{r7, pc}

080074d0 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder24GetOfflinePlannedOffsetsEPKNS_5ModelEPPKl>:

// Get offline tensors allocation plan. See
// micro/docs/memory_management.md for more info.
TfLiteStatus AllocationInfoBuilder::GetOfflinePlannedOffsets(
    const Model* model, const int32_t** offline_planner_offsets) {
 80074d0:	b580      	push	{r7, lr}
 80074d2:	b08c      	sub	sp, #48	; 0x30
 80074d4:	af00      	add	r7, sp, #0
 80074d6:	60f8      	str	r0, [r7, #12]
 80074d8:	60b9      	str	r1, [r7, #8]
 80074da:	607a      	str	r2, [r7, #4]
  if (model->metadata()) {
 80074dc:	68b8      	ldr	r0, [r7, #8]
 80074de:	f7ff fe0f 	bl	8007100 <_ZNK6tflite5Model8metadataEv>
 80074e2:	4603      	mov	r3, r0
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	bf14      	ite	ne
 80074e8:	2301      	movne	r3, #1
 80074ea:	2300      	moveq	r3, #0
 80074ec:	b2db      	uxtb	r3, r3
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	d060      	beq.n	80075b4 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder24GetOfflinePlannedOffsetsEPKNS_5ModelEPPKl+0xe4>
    for (size_t i = 0; i < model->metadata()->size(); ++i) {
 80074f2:	2300      	movs	r3, #0
 80074f4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80074f6:	68b8      	ldr	r0, [r7, #8]
 80074f8:	f7ff fe02 	bl	8007100 <_ZNK6tflite5Model8metadataEv>
 80074fc:	4603      	mov	r3, r0
 80074fe:	4618      	mov	r0, r3
 8007500:	f001 fb14 	bl	8008b2c <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8MetadataEEEE4sizeEv>
 8007504:	4602      	mov	r2, r0
 8007506:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007508:	4293      	cmp	r3, r2
 800750a:	bf34      	ite	cc
 800750c:	2301      	movcc	r3, #1
 800750e:	2300      	movcs	r3, #0
 8007510:	b2db      	uxtb	r3, r3
 8007512:	2b00      	cmp	r3, #0
 8007514:	d04e      	beq.n	80075b4 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder24GetOfflinePlannedOffsetsEPKNS_5ModelEPPKl+0xe4>
      auto metadata = model->metadata()->Get(i);
 8007516:	68b8      	ldr	r0, [r7, #8]
 8007518:	f7ff fdf2 	bl	8007100 <_ZNK6tflite5Model8metadataEv>
 800751c:	4603      	mov	r3, r0
 800751e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007520:	4618      	mov	r0, r3
 8007522:	f001 fb11 	bl	8008b48 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8MetadataEEEE3GetEm>
 8007526:	62b8      	str	r0, [r7, #40]	; 0x28
      if (strncmp(metadata->name()->c_str(), kOfflineMemAllocMetadata,
 8007528:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800752a:	f7ff fdbe 	bl	80070aa <_ZNK6tflite8Metadata4nameEv>
 800752e:	4603      	mov	r3, r0
 8007530:	4618      	mov	r0, r3
 8007532:	f7fc fbb0 	bl	8003c96 <_ZNK11flatbuffers6String5c_strEv>
 8007536:	4603      	mov	r3, r0
 8007538:	2217      	movs	r2, #23
 800753a:	4921      	ldr	r1, [pc, #132]	; (80075c0 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder24GetOfflinePlannedOffsetsEPKNS_5ModelEPPKl+0xf0>)
 800753c:	4618      	mov	r0, r3
 800753e:	f00a fb98 	bl	8011c72 <strncmp>
 8007542:	4603      	mov	r3, r0
                  strlen(kOfflineMemAllocMetadata)) == 0) {
 8007544:	2b00      	cmp	r3, #0
 8007546:	bf0c      	ite	eq
 8007548:	2301      	moveq	r3, #1
 800754a:	2300      	movne	r3, #0
 800754c:	b2db      	uxtb	r3, r3
      if (strncmp(metadata->name()->c_str(), kOfflineMemAllocMetadata,
 800754e:	2b00      	cmp	r3, #0
 8007550:	d02c      	beq.n	80075ac <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder24GetOfflinePlannedOffsetsEPKNS_5ModelEPPKl+0xdc>
        const flatbuffers::Vector<flatbuffers::Offset<Buffer>>* buffers =
            model->buffers();
 8007552:	68b8      	ldr	r0, [r7, #8]
 8007554:	f7ff fdc6 	bl	80070e4 <_ZNK6tflite5Model7buffersEv>
 8007558:	6278      	str	r0, [r7, #36]	; 0x24
        auto* buffer = (*buffers)[metadata->buffer()];
 800755a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800755c:	f7ff fdb3 	bl	80070c6 <_ZNK6tflite8Metadata6bufferEv>
 8007560:	4603      	mov	r3, r0
 8007562:	4619      	mov	r1, r3
 8007564:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007566:	f001 fb23 	bl	8008bb0 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6BufferEEEEixEm>
 800756a:	6238      	str	r0, [r7, #32]
        auto* array = buffer->data();
 800756c:	6a38      	ldr	r0, [r7, #32]
 800756e:	f7ff fd8e 	bl	800708e <_ZNK6tflite6Buffer4dataEv>
 8007572:	61f8      	str	r0, [r7, #28]
        const uint32_t* metadata_buffer =
            reinterpret_cast<const uint32_t*>(array->data());
 8007574:	69f8      	ldr	r0, [r7, #28]
 8007576:	f001 fb29 	bl	8008bcc <_ZNK11flatbuffers6VectorIhE4dataEv>
 800757a:	61b8      	str	r0, [r7, #24]
        const size_t nbr_tensors = static_cast<size_t>(metadata_buffer[2]);
 800757c:	69bb      	ldr	r3, [r7, #24]
 800757e:	3308      	adds	r3, #8
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	617b      	str	r3, [r7, #20]
        *offline_planner_offsets =
            reinterpret_cast<const int32_t*>(&metadata_buffer[3]);
 8007584:	69bb      	ldr	r3, [r7, #24]
 8007586:	f103 020c 	add.w	r2, r3, #12
        *offline_planner_offsets =
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	601a      	str	r2, [r3, #0]

        if (tensor_count_ != nbr_tensors) {
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	685b      	ldr	r3, [r3, #4]
 8007592:	697a      	ldr	r2, [r7, #20]
 8007594:	429a      	cmp	r2, r3
 8007596:	d009      	beq.n	80075ac <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder24GetOfflinePlannedOffsetsEPKNS_5ModelEPPKl+0xdc>
          TF_LITE_REPORT_ERROR(reporter_,
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	68d8      	ldr	r0, [r3, #12]
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	685b      	ldr	r3, [r3, #4]
 80075a0:	697a      	ldr	r2, [r7, #20]
 80075a2:	4908      	ldr	r1, [pc, #32]	; (80075c4 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder24GetOfflinePlannedOffsetsEPKNS_5ModelEPPKl+0xf4>)
 80075a4:	f7fc fb38 	bl	8003c18 <_ZN6tflite13ErrorReporter6ReportEPKcz>
                               "Nbr of offline buffer offsets (%d) in metadata "
                               "not equal nbr tensors (%d)\n",
                               nbr_tensors, tensor_count_);
          return kTfLiteError;
 80075a8:	2301      	movs	r3, #1
 80075aa:	e004      	b.n	80075b6 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder24GetOfflinePlannedOffsetsEPKNS_5ModelEPPKl+0xe6>
    for (size_t i = 0; i < model->metadata()->size(); ++i) {
 80075ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075ae:	3301      	adds	r3, #1
 80075b0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80075b2:	e7a0      	b.n	80074f6 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder24GetOfflinePlannedOffsetsEPKNS_5ModelEPPKl+0x26>
        }
      }
    }
  }
  return kTfLiteOk;
 80075b4:	2300      	movs	r3, #0
}
 80075b6:	4618      	mov	r0, r3
 80075b8:	3730      	adds	r7, #48	; 0x30
 80075ba:	46bd      	mov	sp, r7
 80075bc:	bd80      	pop	{r7, pc}
 80075be:	bf00      	nop
 80075c0:	0801cebc 	.word	0x0801cebc
 80075c4:	08014cec 	.word	0x08014cec

080075c8 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder17AddScratchBuffersEPNS_8internal20ScratchBufferRequestEPNS_19ScratchBufferHandleE>:

TfLiteStatus AllocationInfoBuilder::AddScratchBuffers(
    internal::ScratchBufferRequest* scratch_buffer_requests,
    ScratchBufferHandle* scratch_buffer_handles) {
 80075c8:	b480      	push	{r7}
 80075ca:	b089      	sub	sp, #36	; 0x24
 80075cc:	af00      	add	r7, sp, #0
 80075ce:	60f8      	str	r0, [r7, #12]
 80075d0:	60b9      	str	r1, [r7, #8]
 80075d2:	607a      	str	r2, [r7, #4]
  // Set up allocation info for buffers.
  for (size_t i = tensor_count_; i < tensor_count_ + buffer_count_; ++i) {
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	685b      	ldr	r3, [r3, #4]
 80075d8:	61fb      	str	r3, [r7, #28]
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	685a      	ldr	r2, [r3, #4]
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	689b      	ldr	r3, [r3, #8]
 80075e2:	4413      	add	r3, r2
 80075e4:	69fa      	ldr	r2, [r7, #28]
 80075e6:	429a      	cmp	r2, r3
 80075e8:	d232      	bcs.n	8007650 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder17AddScratchBuffersEPNS_8internal20ScratchBufferRequestEPNS_19ScratchBufferHandleE+0x88>
    internal::ScratchBufferRequest* current_request =
        &(scratch_buffer_requests[i - tensor_count_]);
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	685b      	ldr	r3, [r3, #4]
 80075ee:	69fa      	ldr	r2, [r7, #28]
 80075f0:	1ad3      	subs	r3, r2, r3
 80075f2:	00db      	lsls	r3, r3, #3
    internal::ScratchBufferRequest* current_request =
 80075f4:	68ba      	ldr	r2, [r7, #8]
 80075f6:	4413      	add	r3, r2
 80075f8:	61bb      	str	r3, [r7, #24]
    ScratchBufferHandle* current_handle =
        &(scratch_buffer_handles[i - tensor_count_]);
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	685b      	ldr	r3, [r3, #4]
 80075fe:	69fa      	ldr	r2, [r7, #28]
 8007600:	1ad3      	subs	r3, r2, r3
 8007602:	009b      	lsls	r3, r3, #2
    ScratchBufferHandle* current_handle =
 8007604:	687a      	ldr	r2, [r7, #4]
 8007606:	4413      	add	r3, r2
 8007608:	617b      	str	r3, [r7, #20]

    AllocationInfo* current = &info_[i];
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	6819      	ldr	r1, [r3, #0]
 800760e:	69fa      	ldr	r2, [r7, #28]
 8007610:	4613      	mov	r3, r2
 8007612:	005b      	lsls	r3, r3, #1
 8007614:	4413      	add	r3, r2
 8007616:	00db      	lsls	r3, r3, #3
 8007618:	440b      	add	r3, r1
 800761a:	613b      	str	r3, [r7, #16]
    current->output_ptr = reinterpret_cast<void**>(&current_handle->data);
 800761c:	697a      	ldr	r2, [r7, #20]
 800761e:	693b      	ldr	r3, [r7, #16]
 8007620:	605a      	str	r2, [r3, #4]
    current->bytes = current_request->bytes;
 8007622:	69bb      	ldr	r3, [r7, #24]
 8007624:	681a      	ldr	r2, [r3, #0]
 8007626:	693b      	ldr	r3, [r7, #16]
 8007628:	601a      	str	r2, [r3, #0]
    current->first_created = current_request->node_idx;
 800762a:	69bb      	ldr	r3, [r7, #24]
 800762c:	685a      	ldr	r2, [r3, #4]
 800762e:	693b      	ldr	r3, [r7, #16]
 8007630:	609a      	str	r2, [r3, #8]
    current->last_used = current_request->node_idx;
 8007632:	69bb      	ldr	r3, [r7, #24]
 8007634:	685a      	ldr	r2, [r3, #4]
 8007636:	693b      	ldr	r3, [r7, #16]
 8007638:	60da      	str	r2, [r3, #12]
    current->offline_offset = kOnlinePlannedBuffer;
 800763a:	693b      	ldr	r3, [r7, #16]
 800763c:	f04f 32ff 	mov.w	r2, #4294967295
 8007640:	611a      	str	r2, [r3, #16]
    current->needs_allocating = true;
 8007642:	693b      	ldr	r3, [r7, #16]
 8007644:	2201      	movs	r2, #1
 8007646:	751a      	strb	r2, [r3, #20]
  for (size_t i = tensor_count_; i < tensor_count_ + buffer_count_; ++i) {
 8007648:	69fb      	ldr	r3, [r7, #28]
 800764a:	3301      	adds	r3, #1
 800764c:	61fb      	str	r3, [r7, #28]
 800764e:	e7c4      	b.n	80075da <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder17AddScratchBuffersEPNS_8internal20ScratchBufferRequestEPNS_19ScratchBufferHandleE+0x12>
  }
  return kTfLiteOk;
 8007650:	2300      	movs	r3, #0
}
 8007652:	4618      	mov	r0, r3
 8007654:	3724      	adds	r7, #36	; 0x24
 8007656:	46bd      	mov	sp, r7
 8007658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800765c:	4770      	bx	lr

0800765e <_ZN6tflite12_GLOBAL__N_110CreatePlanEPNS_13ErrorReporterEPNS_19GreedyMemoryPlannerEPKNS0_14AllocationInfoEj>:

TfLiteStatus CreatePlan(ErrorReporter* error_reporter,
                        GreedyMemoryPlanner* planner,
                        const AllocationInfo* allocation_info,
                        size_t allocation_info_size) {
 800765e:	b590      	push	{r4, r7, lr}
 8007660:	b08b      	sub	sp, #44	; 0x2c
 8007662:	af02      	add	r7, sp, #8
 8007664:	60f8      	str	r0, [r7, #12]
 8007666:	60b9      	str	r1, [r7, #8]
 8007668:	607a      	str	r2, [r7, #4]
 800766a:	603b      	str	r3, [r7, #0]
  // Add the tensors to our allocation plan.
  for (size_t i = 0; i < allocation_info_size; ++i) {
 800766c:	2300      	movs	r3, #0
 800766e:	61fb      	str	r3, [r7, #28]
 8007670:	69fa      	ldr	r2, [r7, #28]
 8007672:	683b      	ldr	r3, [r7, #0]
 8007674:	429a      	cmp	r2, r3
 8007676:	d247      	bcs.n	8007708 <_ZN6tflite12_GLOBAL__N_110CreatePlanEPNS_13ErrorReporterEPNS_19GreedyMemoryPlannerEPKNS0_14AllocationInfoEj+0xaa>
    const AllocationInfo* current = &allocation_info[i];
 8007678:	69fa      	ldr	r2, [r7, #28]
 800767a:	4613      	mov	r3, r2
 800767c:	005b      	lsls	r3, r3, #1
 800767e:	4413      	add	r3, r2
 8007680:	00db      	lsls	r3, r3, #3
 8007682:	461a      	mov	r2, r3
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	4413      	add	r3, r2
 8007688:	61bb      	str	r3, [r7, #24]
    if (current->needs_allocating) {
 800768a:	69bb      	ldr	r3, [r7, #24]
 800768c:	7d1b      	ldrb	r3, [r3, #20]
 800768e:	2b00      	cmp	r3, #0
 8007690:	d036      	beq.n	8007700 <_ZN6tflite12_GLOBAL__N_110CreatePlanEPNS_13ErrorReporterEPNS_19GreedyMemoryPlannerEPKNS0_14AllocationInfoEj+0xa2>
      size_t aligned_bytes_required =
          AlignSizeUp(current->bytes, kBufferAlignment);
 8007692:	69bb      	ldr	r3, [r7, #24]
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	2110      	movs	r1, #16
 8007698:	4618      	mov	r0, r3
 800769a:	f7ff fb25 	bl	8006ce8 <_ZN6tflite11AlignSizeUpEjj>
 800769e:	6178      	str	r0, [r7, #20]
      if (current->offline_offset == kOnlinePlannedBuffer) {
 80076a0:	69bb      	ldr	r3, [r7, #24]
 80076a2:	691b      	ldr	r3, [r3, #16]
 80076a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80076a8:	d114      	bne.n	80076d4 <_ZN6tflite12_GLOBAL__N_110CreatePlanEPNS_13ErrorReporterEPNS_19GreedyMemoryPlannerEPKNS0_14AllocationInfoEj+0x76>
        TF_LITE_ENSURE_STATUS(
 80076aa:	68bb      	ldr	r3, [r7, #8]
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	3308      	adds	r3, #8
 80076b0:	681c      	ldr	r4, [r3, #0]
 80076b2:	697a      	ldr	r2, [r7, #20]
 80076b4:	69bb      	ldr	r3, [r7, #24]
 80076b6:	6899      	ldr	r1, [r3, #8]
 80076b8:	69bb      	ldr	r3, [r7, #24]
 80076ba:	68db      	ldr	r3, [r3, #12]
 80076bc:	9300      	str	r3, [sp, #0]
 80076be:	460b      	mov	r3, r1
 80076c0:	68f9      	ldr	r1, [r7, #12]
 80076c2:	68b8      	ldr	r0, [r7, #8]
 80076c4:	47a0      	blx	r4
 80076c6:	4603      	mov	r3, r0
 80076c8:	74bb      	strb	r3, [r7, #18]
 80076ca:	7cbb      	ldrb	r3, [r7, #18]
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	d017      	beq.n	8007700 <_ZN6tflite12_GLOBAL__N_110CreatePlanEPNS_13ErrorReporterEPNS_19GreedyMemoryPlannerEPKNS0_14AllocationInfoEj+0xa2>
 80076d0:	7cbb      	ldrb	r3, [r7, #18]
 80076d2:	e01a      	b.n	800770a <_ZN6tflite12_GLOBAL__N_110CreatePlanEPNS_13ErrorReporterEPNS_19GreedyMemoryPlannerEPKNS0_14AllocationInfoEj+0xac>
            planner->AddBuffer(error_reporter, aligned_bytes_required,
                               current->first_created, current->last_used));
      } else {
        TF_LITE_ENSURE_STATUS(planner->AddBuffer(
 80076d4:	6979      	ldr	r1, [r7, #20]
 80076d6:	69bb      	ldr	r3, [r7, #24]
 80076d8:	6898      	ldr	r0, [r3, #8]
 80076da:	69bb      	ldr	r3, [r7, #24]
 80076dc:	68db      	ldr	r3, [r3, #12]
 80076de:	69ba      	ldr	r2, [r7, #24]
 80076e0:	6912      	ldr	r2, [r2, #16]
 80076e2:	9201      	str	r2, [sp, #4]
 80076e4:	9300      	str	r3, [sp, #0]
 80076e6:	4603      	mov	r3, r0
 80076e8:	460a      	mov	r2, r1
 80076ea:	68f9      	ldr	r1, [r7, #12]
 80076ec:	68b8      	ldr	r0, [r7, #8]
 80076ee:	f008 faf1 	bl	800fcd4 <_ZN6tflite19GreedyMemoryPlanner9AddBufferEPNS_13ErrorReporterEiiii>
 80076f2:	4603      	mov	r3, r0
 80076f4:	74fb      	strb	r3, [r7, #19]
 80076f6:	7cfb      	ldrb	r3, [r7, #19]
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	d001      	beq.n	8007700 <_ZN6tflite12_GLOBAL__N_110CreatePlanEPNS_13ErrorReporterEPNS_19GreedyMemoryPlannerEPKNS0_14AllocationInfoEj+0xa2>
 80076fc:	7cfb      	ldrb	r3, [r7, #19]
 80076fe:	e004      	b.n	800770a <_ZN6tflite12_GLOBAL__N_110CreatePlanEPNS_13ErrorReporterEPNS_19GreedyMemoryPlannerEPKNS0_14AllocationInfoEj+0xac>
  for (size_t i = 0; i < allocation_info_size; ++i) {
 8007700:	69fb      	ldr	r3, [r7, #28]
 8007702:	3301      	adds	r3, #1
 8007704:	61fb      	str	r3, [r7, #28]
 8007706:	e7b3      	b.n	8007670 <_ZN6tflite12_GLOBAL__N_110CreatePlanEPNS_13ErrorReporterEPNS_19GreedyMemoryPlannerEPKNS0_14AllocationInfoEj+0x12>
            error_reporter, aligned_bytes_required, current->first_created,
            current->last_used, current->offline_offset));
      }
    }
  }
  return kTfLiteOk;
 8007708:	2300      	movs	r3, #0
}
 800770a:	4618      	mov	r0, r3
 800770c:	3724      	adds	r7, #36	; 0x24
 800770e:	46bd      	mov	sp, r7
 8007710:	bd90      	pop	{r4, r7, pc}

08007712 <_ZN6tflite12_GLOBAL__N_110CommitPlanEPNS_13ErrorReporterEPNS_13MemoryPlannerEPhPKNS0_14AllocationInfoEj>:

TfLiteStatus CommitPlan(ErrorReporter* error_reporter, MemoryPlanner* planner,
                        uint8_t* starting_point,
                        const AllocationInfo* allocation_info,
                        size_t allocation_info_size) {
 8007712:	b590      	push	{r4, r7, lr}
 8007714:	b08b      	sub	sp, #44	; 0x2c
 8007716:	af00      	add	r7, sp, #0
 8007718:	60f8      	str	r0, [r7, #12]
 800771a:	60b9      	str	r1, [r7, #8]
 800771c:	607a      	str	r2, [r7, #4]
 800771e:	603b      	str	r3, [r7, #0]
  // Figure out the actual memory addresses for each buffer, based on the plan.
  int planner_index = 0;
 8007720:	2300      	movs	r3, #0
 8007722:	627b      	str	r3, [r7, #36]	; 0x24
  for (size_t i = 0; i < allocation_info_size; ++i) {
 8007724:	2300      	movs	r3, #0
 8007726:	623b      	str	r3, [r7, #32]
 8007728:	6a3a      	ldr	r2, [r7, #32]
 800772a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800772c:	429a      	cmp	r2, r3
 800772e:	d22e      	bcs.n	800778e <_ZN6tflite12_GLOBAL__N_110CommitPlanEPNS_13ErrorReporterEPNS_13MemoryPlannerEPhPKNS0_14AllocationInfoEj+0x7c>
    const AllocationInfo* current = &allocation_info[i];
 8007730:	6a3a      	ldr	r2, [r7, #32]
 8007732:	4613      	mov	r3, r2
 8007734:	005b      	lsls	r3, r3, #1
 8007736:	4413      	add	r3, r2
 8007738:	00db      	lsls	r3, r3, #3
 800773a:	461a      	mov	r2, r3
 800773c:	683b      	ldr	r3, [r7, #0]
 800773e:	4413      	add	r3, r2
 8007740:	61fb      	str	r3, [r7, #28]
    if (current->needs_allocating) {
 8007742:	69fb      	ldr	r3, [r7, #28]
 8007744:	7d1b      	ldrb	r3, [r3, #20]
 8007746:	2b00      	cmp	r3, #0
 8007748:	d01d      	beq.n	8007786 <_ZN6tflite12_GLOBAL__N_110CommitPlanEPNS_13ErrorReporterEPNS_13MemoryPlannerEPhPKNS0_14AllocationInfoEj+0x74>
      int offset = -1;
 800774a:	f04f 33ff 	mov.w	r3, #4294967295
 800774e:	617b      	str	r3, [r7, #20]
      TF_LITE_ENSURE_STATUS(
 8007750:	68bb      	ldr	r3, [r7, #8]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	3314      	adds	r3, #20
 8007756:	681c      	ldr	r4, [r3, #0]
 8007758:	f107 0314 	add.w	r3, r7, #20
 800775c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800775e:	68f9      	ldr	r1, [r7, #12]
 8007760:	68b8      	ldr	r0, [r7, #8]
 8007762:	47a0      	blx	r4
 8007764:	4603      	mov	r3, r0
 8007766:	76fb      	strb	r3, [r7, #27]
 8007768:	7efb      	ldrb	r3, [r7, #27]
 800776a:	2b00      	cmp	r3, #0
 800776c:	d001      	beq.n	8007772 <_ZN6tflite12_GLOBAL__N_110CommitPlanEPNS_13ErrorReporterEPNS_13MemoryPlannerEPhPKNS0_14AllocationInfoEj+0x60>
 800776e:	7efb      	ldrb	r3, [r7, #27]
 8007770:	e00e      	b.n	8007790 <_ZN6tflite12_GLOBAL__N_110CommitPlanEPNS_13ErrorReporterEPNS_13MemoryPlannerEPhPKNS0_14AllocationInfoEj+0x7e>
          planner->GetOffsetForBuffer(error_reporter, planner_index, &offset));
      *current->output_ptr = reinterpret_cast<void*>(starting_point + offset);
 8007772:	697b      	ldr	r3, [r7, #20]
 8007774:	4619      	mov	r1, r3
 8007776:	69fb      	ldr	r3, [r7, #28]
 8007778:	685b      	ldr	r3, [r3, #4]
 800777a:	687a      	ldr	r2, [r7, #4]
 800777c:	440a      	add	r2, r1
 800777e:	601a      	str	r2, [r3, #0]
      ++planner_index;
 8007780:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007782:	3301      	adds	r3, #1
 8007784:	627b      	str	r3, [r7, #36]	; 0x24
  for (size_t i = 0; i < allocation_info_size; ++i) {
 8007786:	6a3b      	ldr	r3, [r7, #32]
 8007788:	3301      	adds	r3, #1
 800778a:	623b      	str	r3, [r7, #32]
 800778c:	e7cc      	b.n	8007728 <_ZN6tflite12_GLOBAL__N_110CommitPlanEPNS_13ErrorReporterEPNS_13MemoryPlannerEPhPKNS0_14AllocationInfoEj+0x16>
    }
  }
  return kTfLiteOk;
 800778e:	2300      	movs	r3, #0
}
 8007790:	4618      	mov	r0, r3
 8007792:	372c      	adds	r7, #44	; 0x2c
 8007794:	46bd      	mov	sp, r7
 8007796:	bd90      	pop	{r4, r7, pc}

08007798 <_ZN6tflite8internal25GetFlatbufferTensorBufferERKNS_6TensorEPKN11flatbuffers6VectorINS4_6OffsetINS_6BufferEEEEE>:

// Returns a pointer to any buffer associated with the flatbuffer tensor. Can
// return nullptr if no buffer is found.
void* GetFlatbufferTensorBuffer(
    const tflite::Tensor& flatbuffer_tensor,
    const flatbuffers::Vector<flatbuffers::Offset<Buffer>>* buffers) {
 8007798:	b580      	push	{r7, lr}
 800779a:	b086      	sub	sp, #24
 800779c:	af00      	add	r7, sp, #0
 800779e:	6078      	str	r0, [r7, #4]
 80077a0:	6039      	str	r1, [r7, #0]
  // the same as a constant op in TensorFlow) associated with this tensor first,
  // and if there is update the runtime structure to point to its location in
  // memory.
  // First see if there's any buffer information in the serialized tensor.
  // TODO(b/170379532): Add better unit tests to validate flatbuffer values.
  void* out_buffer = nullptr;
 80077a2:	2300      	movs	r3, #0
 80077a4:	617b      	str	r3, [r7, #20]
  if (auto* buffer = (*buffers)[flatbuffer_tensor.buffer()]) {
 80077a6:	6878      	ldr	r0, [r7, #4]
 80077a8:	f7ff fbfa 	bl	8006fa0 <_ZNK6tflite6Tensor6bufferEv>
 80077ac:	4603      	mov	r3, r0
 80077ae:	4619      	mov	r1, r3
 80077b0:	6838      	ldr	r0, [r7, #0]
 80077b2:	f001 f9fd 	bl	8008bb0 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6BufferEEEEixEm>
 80077b6:	6138      	str	r0, [r7, #16]
 80077b8:	693b      	ldr	r3, [r7, #16]
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d015      	beq.n	80077ea <_ZN6tflite8internal25GetFlatbufferTensorBufferERKNS_6TensorEPKN11flatbuffers6VectorINS4_6OffsetINS_6BufferEEEEE+0x52>
    // If we've found a buffer, does it have any data?
    if (auto* array = buffer->data()) {
 80077be:	6938      	ldr	r0, [r7, #16]
 80077c0:	f7ff fc65 	bl	800708e <_ZNK6tflite6Buffer4dataEv>
 80077c4:	60f8      	str	r0, [r7, #12]
 80077c6:	68fb      	ldr	r3, [r7, #12]
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	d00e      	beq.n	80077ea <_ZN6tflite8internal25GetFlatbufferTensorBufferERKNS_6TensorEPKN11flatbuffers6VectorINS4_6OffsetINS_6BufferEEEEE+0x52>
      // If it has any data, is the data size larger than zero?
      if (array->size()) {
 80077cc:	68f8      	ldr	r0, [r7, #12]
 80077ce:	f001 f8a4 	bl	800891a <_ZNK11flatbuffers6VectorIhE4sizeEv>
 80077d2:	4603      	mov	r3, r0
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	bf14      	ite	ne
 80077d8:	2301      	movne	r3, #1
 80077da:	2300      	moveq	r3, #0
 80077dc:	b2db      	uxtb	r3, r3
 80077de:	2b00      	cmp	r3, #0
 80077e0:	d003      	beq.n	80077ea <_ZN6tflite8internal25GetFlatbufferTensorBufferERKNS_6TensorEPKN11flatbuffers6VectorINS4_6OffsetINS_6BufferEEEEE+0x52>
        // We've found a buffer with valid data, so update the runtime tensor
        // data structure to point to it.
        out_buffer = const_cast<void*>(static_cast<const void*>(array->data()));
 80077e2:	68f8      	ldr	r0, [r7, #12]
 80077e4:	f001 f9f2 	bl	8008bcc <_ZNK11flatbuffers6VectorIhE4dataEv>
 80077e8:	6178      	str	r0, [r7, #20]
    // buffer in the serialized tensor, but it doesn't have any data in it. Is
    // that a validly-generated file, and if so what does it mean, or is it an
    // error condition? It would be good to tighten up the specification to make
    // it less ambiguous.
  }
  return out_buffer;
 80077ea:	697b      	ldr	r3, [r7, #20]
}
 80077ec:	4618      	mov	r0, r3
 80077ee:	3718      	adds	r7, #24
 80077f0:	46bd      	mov	sp, r7
 80077f2:	bd80      	pop	{r7, pc}

080077f4 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor>:

TfLiteStatus InitializeTfLiteTensorFromFlatbuffer(
    SimpleMemoryAllocator* allocator, bool allocate_temp,
    const tflite::Tensor& flatbuffer_tensor,
    const flatbuffers::Vector<flatbuffers::Offset<Buffer>>* buffers,
    ErrorReporter* error_reporter, TfLiteTensor* result) {
 80077f4:	b590      	push	{r4, r7, lr}
 80077f6:	b08d      	sub	sp, #52	; 0x34
 80077f8:	af00      	add	r7, sp, #0
 80077fa:	60f8      	str	r0, [r7, #12]
 80077fc:	607a      	str	r2, [r7, #4]
 80077fe:	603b      	str	r3, [r7, #0]
 8007800:	460b      	mov	r3, r1
 8007802:	72fb      	strb	r3, [r7, #11]
  TFLITE_DCHECK(result != nullptr);
 8007804:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007806:	2b00      	cmp	r3, #0
 8007808:	d101      	bne.n	800780e <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x1a>
 800780a:	f008 ffc8 	bl	801079e <abort>

  *result = {};
 800780e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007810:	4618      	mov	r0, r3
 8007812:	2340      	movs	r3, #64	; 0x40
 8007814:	461a      	mov	r2, r3
 8007816:	2100      	movs	r1, #0
 8007818:	f009 faee 	bl	8010df8 <memset>
  // Make sure the serialized type is one we know how to deal with, and convert
  // it from a flatbuffer enum into a constant used by the kernel C API.
  TF_LITE_ENSURE_STATUS(ConvertTensorType(flatbuffer_tensor.type(),
 800781c:	6878      	ldr	r0, [r7, #4]
 800781e:	f7ff f989 	bl	8006b34 <_ZNK6tflite6Tensor4typeEv>
 8007822:	4603      	mov	r3, r0
 8007824:	4618      	mov	r0, r3
 8007826:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007828:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800782a:	4619      	mov	r1, r3
 800782c:	f7fc fc54 	bl	80040d8 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE>
 8007830:	4603      	mov	r3, r0
 8007832:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007836:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800783a:	2b00      	cmp	r3, #0
 800783c:	d002      	beq.n	8007844 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x50>
 800783e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007842:	e127      	b.n	8007a94 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x2a0>
                                          &result->type, error_reporter));
  // Make sure we remember if the serialized tensor is designated as a variable.
  result->is_variable = flatbuffer_tensor.is_variable();
 8007844:	6878      	ldr	r0, [r7, #4]
 8007846:	f7ff fbc8 	bl	8006fda <_ZNK6tflite6Tensor11is_variableEv>
 800784a:	4603      	mov	r3, r0
 800784c:	461a      	mov	r2, r3
 800784e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007850:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  result->data.data = GetFlatbufferTensorBuffer(flatbuffer_tensor, buffers);
 8007854:	6839      	ldr	r1, [r7, #0]
 8007856:	6878      	ldr	r0, [r7, #4]
 8007858:	f7ff ff9e 	bl	8007798 <_ZN6tflite8internal25GetFlatbufferTensorBufferERKNS_6TensorEPKN11flatbuffers6VectorINS4_6OffsetINS_6BufferEEEEE>
 800785c:	4602      	mov	r2, r0
 800785e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007860:	605a      	str	r2, [r3, #4]

  // TODO(petewarden): Some of these paths aren't getting enough testing
  // coverage, so we should figure out some tests that exercise them.
  if (result->data.data == nullptr) {
 8007862:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007864:	685b      	ldr	r3, [r3, #4]
 8007866:	2b00      	cmp	r3, #0
 8007868:	d103      	bne.n	8007872 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x7e>
    // The tensor contents haven't been set from a serialized buffer, so
    // make a note that they will be allocated from memory. The actual
    // allocation won't happen until later.
    result->allocation_type = kTfLiteArenaRw;
 800786a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800786c:	2202      	movs	r2, #2
 800786e:	751a      	strb	r2, [r3, #20]
 8007870:	e002      	b.n	8007878 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x84>
  } else {
    // We set the data from a serialized buffer, so record tha.
    result->allocation_type = kTfLiteMmapRo;
 8007872:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007874:	2201      	movs	r2, #1
 8007876:	751a      	strb	r2, [r3, #20]
  }

  // Figure out what the size in bytes of the buffer is and store it.
  size_t type_size;
  TF_LITE_ENSURE_STATUS(BytesRequiredForTensor(
 8007878:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800787a:	f103 0118 	add.w	r1, r3, #24
 800787e:	f107 0210 	add.w	r2, r7, #16
 8007882:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007884:	6878      	ldr	r0, [r7, #4]
 8007886:	f7ff fab3 	bl	8006df0 <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE>
 800788a:	4603      	mov	r3, r0
 800788c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8007890:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8007894:	2b00      	cmp	r3, #0
 8007896:	d002      	beq.n	800789e <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0xaa>
 8007898:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 800789c:	e0fa      	b.n	8007a94 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x2a0>
      flatbuffer_tensor, &result->bytes, &type_size, error_reporter));

  if (flatbuffer_tensor.shape() == nullptr) {
 800789e:	6878      	ldr	r0, [r7, #4]
 80078a0:	f7ff f93a 	bl	8006b18 <_ZNK6tflite6Tensor5shapeEv>
 80078a4:	4603      	mov	r3, r0
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	bf0c      	ite	eq
 80078aa:	2301      	moveq	r3, #1
 80078ac:	2300      	movne	r3, #0
 80078ae:	b2db      	uxtb	r3, r3
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	d003      	beq.n	80078bc <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0xc8>
    // flatbuffer_tensor.shape() can return a nullptr in the case of a scalar
    // tensor.
    result->dims = const_cast<TfLiteIntArray*>(&kZeroLengthIntArray);
 80078b4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80078b6:	4a79      	ldr	r2, [pc, #484]	; (8007a9c <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x2a8>)
 80078b8:	609a      	str	r2, [r3, #8]
 80078ba:	e013      	b.n	80078e4 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0xf0>
  } else {
    // TFLM doesn't allow reshaping the tensor which requires dynamic memory
    // allocation so it is safe to drop the const qualifier. In the future, if
    // we really want to update the tensor shape, we can always pass in a new
    // TfLiteIntArray - especially we have to do so if the dimension is
    TF_LITE_ENSURE_STATUS(FlatBufferVectorToTfLiteTypeArray(
 80078bc:	6878      	ldr	r0, [r7, #4]
 80078be:	f7ff f92b 	bl	8006b18 <_ZNK6tflite6Tensor5shapeEv>
 80078c2:	4602      	mov	r2, r0
 80078c4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80078c6:	3308      	adds	r3, #8
 80078c8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80078ca:	68f8      	ldr	r0, [r7, #12]
 80078cc:	f001 f98a 	bl	8008be4 <_ZN6tflite8internal33FlatBufferVectorToTfLiteTypeArrayIl14TfLiteIntArrayEE12TfLiteStatusPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterEPKN11flatbuffers6VectorIT_EEPPT0_>
 80078d0:	4603      	mov	r3, r0
 80078d2:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
 80078d6:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 80078da:	2b00      	cmp	r3, #0
 80078dc:	d002      	beq.n	80078e4 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0xf0>
 80078de:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 80078e2:	e0d7      	b.n	8007a94 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x2a0>
        allocator, error_reporter, flatbuffer_tensor.shape(), &(result->dims)));
  }

  // Copy the quantization information from the serialized data.
  const auto* src_quantization = flatbuffer_tensor.quantization();
 80078e4:	6878      	ldr	r0, [r7, #4]
 80078e6:	f7ff fb6a 	bl	8006fbe <_ZNK6tflite6Tensor12quantizationEv>
 80078ea:	6278      	str	r0, [r7, #36]	; 0x24
  if (src_quantization && src_quantization->scale() &&
      (src_quantization->scale()->size() > 0) &&
      src_quantization->zero_point() &&
 80078ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	d021      	beq.n	8007936 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x142>
  if (src_quantization && src_quantization->scale() &&
 80078f2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80078f4:	f7ff fb29 	bl	8006f4a <_ZNK6tflite22QuantizationParameters5scaleEv>
 80078f8:	4603      	mov	r3, r0
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	d01b      	beq.n	8007936 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x142>
      (src_quantization->scale()->size() > 0) &&
 80078fe:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007900:	f7ff fb23 	bl	8006f4a <_ZNK6tflite22QuantizationParameters5scaleEv>
 8007904:	4603      	mov	r3, r0
 8007906:	4618      	mov	r0, r3
 8007908:	f001 f815 	bl	8008936 <_ZNK11flatbuffers6VectorIfE4sizeEv>
 800790c:	4603      	mov	r3, r0
  if (src_quantization && src_quantization->scale() &&
 800790e:	2b00      	cmp	r3, #0
 8007910:	d011      	beq.n	8007936 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x142>
      src_quantization->zero_point() &&
 8007912:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007914:	f7ff fb27 	bl	8006f66 <_ZNK6tflite22QuantizationParameters10zero_pointEv>
 8007918:	4603      	mov	r3, r0
      (src_quantization->scale()->size() > 0) &&
 800791a:	2b00      	cmp	r3, #0
 800791c:	d00b      	beq.n	8007936 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x142>
      (src_quantization->zero_point()->size() > 0)) {
 800791e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007920:	f7ff fb21 	bl	8006f66 <_ZNK6tflite22QuantizationParameters10zero_pointEv>
 8007924:	4603      	mov	r3, r0
 8007926:	4618      	mov	r0, r3
 8007928:	f001 f83c 	bl	80089a4 <_ZNK11flatbuffers6VectorIxE4sizeEv>
 800792c:	4603      	mov	r3, r0
      src_quantization->zero_point() &&
 800792e:	2b00      	cmp	r3, #0
 8007930:	d001      	beq.n	8007936 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x142>
 8007932:	2301      	movs	r3, #1
 8007934:	e000      	b.n	8007938 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x144>
 8007936:	2300      	movs	r3, #0
  if (src_quantization && src_quantization->scale() &&
 8007938:	2b00      	cmp	r3, #0
 800793a:	f000 80aa 	beq.w	8007a92 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x29e>
    // Always populate the TfLiteTensor.params field, even if there are
    // per-channel quantization parameters.
    result->params.scale = src_quantization->scale()->Get(0);
 800793e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007940:	f7ff fb03 	bl	8006f4a <_ZNK6tflite22QuantizationParameters5scaleEv>
 8007944:	4603      	mov	r3, r0
 8007946:	2100      	movs	r1, #0
 8007948:	4618      	mov	r0, r3
 800794a:	f001 f803 	bl	8008954 <_ZNK11flatbuffers6VectorIfE3GetEm>
 800794e:	eef0 7a40 	vmov.f32	s15, s0
 8007952:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007954:	edc3 7a03 	vstr	s15, [r3, #12]
    // Note that the zero_point field in the FlatBuffers schema is a 64-bit
    // integer, but the zero_point field in the TfLiteQuantizationParams struct
    // is a 32-bit integer.
    result->params.zero_point =
        static_cast<int32_t>(src_quantization->zero_point()->Get(0));
 8007958:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800795a:	f7ff fb04 	bl	8006f66 <_ZNK6tflite22QuantizationParameters10zero_pointEv>
 800795e:	4603      	mov	r3, r0
 8007960:	2100      	movs	r1, #0
 8007962:	4618      	mov	r0, r3
 8007964:	f001 f82c 	bl	80089c0 <_ZNK11flatbuffers6VectorIxE3GetEm>
 8007968:	4602      	mov	r2, r0
 800796a:	460b      	mov	r3, r1
    result->params.zero_point =
 800796c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800796e:	611a      	str	r2, [r3, #16]

    // Populate per-channel quantization params.
    int channels = src_quantization->scale()->size();
 8007970:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007972:	f7ff faea 	bl	8006f4a <_ZNK6tflite22QuantizationParameters5scaleEv>
 8007976:	4603      	mov	r3, r0
 8007978:	4618      	mov	r0, r3
 800797a:	f000 ffdc 	bl	8008936 <_ZNK11flatbuffers6VectorIfE4sizeEv>
 800797e:	4603      	mov	r3, r0
 8007980:	623b      	str	r3, [r7, #32]
    TfLiteAffineQuantization* quantization =
        allocate_temp
            ? reinterpret_cast<TfLiteAffineQuantization*>(
 8007982:	7afb      	ldrb	r3, [r7, #11]
 8007984:	2b00      	cmp	r3, #0
 8007986:	d009      	beq.n	800799c <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x1a8>
                  allocator->AllocateTemp(sizeof(TfLiteAffineQuantization),
                                          alignof(TfLiteAffineQuantization)))
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	3310      	adds	r3, #16
 800798e:	681b      	ldr	r3, [r3, #0]
                  allocator->AllocateTemp(sizeof(TfLiteAffineQuantization),
 8007990:	2204      	movs	r2, #4
 8007992:	210c      	movs	r1, #12
 8007994:	68f8      	ldr	r0, [r7, #12]
 8007996:	4798      	blx	r3
 8007998:	4603      	mov	r3, r0
 800799a:	e008      	b.n	80079ae <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x1ba>
            : reinterpret_cast<TfLiteAffineQuantization*>(
                  allocator->AllocateFromTail(
                      sizeof(TfLiteAffineQuantization),
                      alignof(TfLiteAffineQuantization)));
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	330c      	adds	r3, #12
 80079a2:	681b      	ldr	r3, [r3, #0]
                  allocator->AllocateFromTail(
 80079a4:	2204      	movs	r2, #4
 80079a6:	210c      	movs	r1, #12
 80079a8:	68f8      	ldr	r0, [r7, #12]
 80079aa:	4798      	blx	r3
 80079ac:	4603      	mov	r3, r0
                      alignof(TfLiteAffineQuantization)));
 80079ae:	61fb      	str	r3, [r7, #28]
    if (quantization == nullptr) {
 80079b0:	69fb      	ldr	r3, [r7, #28]
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	d105      	bne.n	80079c2 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x1ce>
      TF_LITE_REPORT_ERROR(error_reporter,
 80079b6:	493a      	ldr	r1, [pc, #232]	; (8007aa0 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x2ac>)
 80079b8:	6c38      	ldr	r0, [r7, #64]	; 0x40
 80079ba:	f7fc f92d 	bl	8003c18 <_ZN6tflite13ErrorReporter6ReportEPKcz>
                           "Unable to allocate TfLiteAffineQuantization.\n");
      return kTfLiteError;
 80079be:	2301      	movs	r3, #1
 80079c0:	e068      	b.n	8007a94 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x2a0>
    // TODO(b/153688719): Reduce tail allocation by using a global zero-point
    // buffer. This value can not be reused from the flatbuffer since the
    // zero_point is stored as a int64_t.
    quantization->zero_point =
        allocate_temp
            ? reinterpret_cast<TfLiteIntArray*>(allocator->AllocateTemp(
 80079c2:	7afb      	ldrb	r3, [r7, #11]
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	d00d      	beq.n	80079e4 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x1f0>
                  TfLiteIntArrayGetSizeInBytes(channels),
                  alignof(TfLiteIntArray)))
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	3310      	adds	r3, #16
 80079ce:	681c      	ldr	r4, [r3, #0]
                  TfLiteIntArrayGetSizeInBytes(channels),
 80079d0:	6a38      	ldr	r0, [r7, #32]
 80079d2:	f7fc f897 	bl	8003b04 <TfLiteIntArrayGetSizeInBytes>
 80079d6:	4603      	mov	r3, r0
            ? reinterpret_cast<TfLiteIntArray*>(allocator->AllocateTemp(
 80079d8:	2204      	movs	r2, #4
 80079da:	4619      	mov	r1, r3
 80079dc:	68f8      	ldr	r0, [r7, #12]
 80079de:	47a0      	blx	r4
 80079e0:	4603      	mov	r3, r0
 80079e2:	e00c      	b.n	80079fe <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x20a>
            : reinterpret_cast<TfLiteIntArray*>(allocator->AllocateFromTail(
                  TfLiteIntArrayGetSizeInBytes(channels),
                  alignof(TfLiteIntArray)));
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	330c      	adds	r3, #12
 80079ea:	681c      	ldr	r4, [r3, #0]
                  TfLiteIntArrayGetSizeInBytes(channels),
 80079ec:	6a38      	ldr	r0, [r7, #32]
 80079ee:	f7fc f889 	bl	8003b04 <TfLiteIntArrayGetSizeInBytes>
 80079f2:	4603      	mov	r3, r0
            : reinterpret_cast<TfLiteIntArray*>(allocator->AllocateFromTail(
 80079f4:	2204      	movs	r2, #4
 80079f6:	4619      	mov	r1, r3
 80079f8:	68f8      	ldr	r0, [r7, #12]
 80079fa:	47a0      	blx	r4
 80079fc:	4603      	mov	r3, r0
    quantization->zero_point =
 80079fe:	69fa      	ldr	r2, [r7, #28]
 8007a00:	6053      	str	r3, [r2, #4]
    if (quantization->zero_point == nullptr) {
 8007a02:	69fb      	ldr	r3, [r7, #28]
 8007a04:	685b      	ldr	r3, [r3, #4]
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	d105      	bne.n	8007a16 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x222>
      TF_LITE_REPORT_ERROR(error_reporter,
 8007a0a:	4926      	ldr	r1, [pc, #152]	; (8007aa4 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x2b0>)
 8007a0c:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8007a0e:	f7fc f903 	bl	8003c18 <_ZN6tflite13ErrorReporter6ReportEPKcz>
                           "Unable to allocate quantization->zero_point.\n");
      return kTfLiteError;
 8007a12:	2301      	movs	r3, #1
 8007a14:	e03e      	b.n	8007a94 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x2a0>
    }

    TF_LITE_ENSURE_STATUS(FlatBufferVectorToTfLiteTypeArray(
 8007a16:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007a18:	f7ff fa97 	bl	8006f4a <_ZNK6tflite22QuantizationParameters5scaleEv>
 8007a1c:	4602      	mov	r2, r0
 8007a1e:	69fb      	ldr	r3, [r7, #28]
 8007a20:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007a22:	68f8      	ldr	r0, [r7, #12]
 8007a24:	f001 f8f7 	bl	8008c16 <_ZN6tflite8internal33FlatBufferVectorToTfLiteTypeArrayIf16TfLiteFloatArrayEE12TfLiteStatusPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterEPKN11flatbuffers6VectorIT_EEPPT0_>
 8007a28:	4603      	mov	r3, r0
 8007a2a:	76fb      	strb	r3, [r7, #27]
 8007a2c:	7efb      	ldrb	r3, [r7, #27]
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	d001      	beq.n	8007a36 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x242>
 8007a32:	7efb      	ldrb	r3, [r7, #27]
 8007a34:	e02e      	b.n	8007a94 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x2a0>
        allocator, error_reporter, src_quantization->scale(),
        &quantization->scale));

    quantization->zero_point->size = channels;
 8007a36:	69fb      	ldr	r3, [r7, #28]
 8007a38:	685b      	ldr	r3, [r3, #4]
 8007a3a:	6a3a      	ldr	r2, [r7, #32]
 8007a3c:	601a      	str	r2, [r3, #0]
    int* zero_point_data = quantization->zero_point->data;
 8007a3e:	69fb      	ldr	r3, [r7, #28]
 8007a40:	685b      	ldr	r3, [r3, #4]
 8007a42:	3304      	adds	r3, #4
 8007a44:	617b      	str	r3, [r7, #20]
    for (int i = 0; i < channels; i++) {
 8007a46:	2300      	movs	r3, #0
 8007a48:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007a4a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007a4c:	6a3b      	ldr	r3, [r7, #32]
 8007a4e:	429a      	cmp	r2, r3
 8007a50:	da12      	bge.n	8007a78 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x284>
      zero_point_data[i] = src_quantization->zero_point()->Get(i);
 8007a52:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007a54:	f7ff fa87 	bl	8006f66 <_ZNK6tflite22QuantizationParameters10zero_pointEv>
 8007a58:	4602      	mov	r2, r0
 8007a5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a5c:	4619      	mov	r1, r3
 8007a5e:	4610      	mov	r0, r2
 8007a60:	f000 ffae 	bl	80089c0 <_ZNK11flatbuffers6VectorIxE3GetEm>
 8007a64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a66:	009b      	lsls	r3, r3, #2
 8007a68:	697a      	ldr	r2, [r7, #20]
 8007a6a:	4413      	add	r3, r2
 8007a6c:	4602      	mov	r2, r0
 8007a6e:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < channels; i++) {
 8007a70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a72:	3301      	adds	r3, #1
 8007a74:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007a76:	e7e8      	b.n	8007a4a <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x256>
    }
    // TODO(rocky): Need to add a micro_allocator test case that fails when
    // this is not copied:
    quantization->quantized_dimension = src_quantization->quantized_dimension();
 8007a78:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007a7a:	f7ff fa82 	bl	8006f82 <_ZNK6tflite22QuantizationParameters19quantized_dimensionEv>
 8007a7e:	4602      	mov	r2, r0
 8007a80:	69fb      	ldr	r3, [r7, #28]
 8007a82:	609a      	str	r2, [r3, #8]

    result->quantization = {kTfLiteAffineQuantization, quantization};
 8007a84:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007a86:	2201      	movs	r2, #1
 8007a88:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
 8007a8c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007a8e:	69fa      	ldr	r2, [r7, #28]
 8007a90:	635a      	str	r2, [r3, #52]	; 0x34
  }
  return kTfLiteOk;
 8007a92:	2300      	movs	r3, #0
}
 8007a94:	4618      	mov	r0, r3
 8007a96:	3734      	adds	r7, #52	; 0x34
 8007a98:	46bd      	mov	sp, r7
 8007a9a:	bd90      	pop	{r4, r7, pc}
 8007a9c:	0801ced4 	.word	0x0801ced4
 8007aa0:	08014d38 	.word	0x08014d38
 8007aa4:	08014d68 	.word	0x08014d68

08007aa8 <_ZN6tflite8internal40InitializeTfLiteEvalTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP16TfLiteEvalTensor>:

TfLiteStatus InitializeTfLiteEvalTensorFromFlatbuffer(
    SimpleMemoryAllocator* allocator, const tflite::Tensor& flatbuffer_tensor,
    const flatbuffers::Vector<flatbuffers::Offset<Buffer>>* buffers,
    ErrorReporter* error_reporter, TfLiteEvalTensor* result) {
 8007aa8:	b580      	push	{r7, lr}
 8007aaa:	b086      	sub	sp, #24
 8007aac:	af00      	add	r7, sp, #0
 8007aae:	60f8      	str	r0, [r7, #12]
 8007ab0:	60b9      	str	r1, [r7, #8]
 8007ab2:	607a      	str	r2, [r7, #4]
 8007ab4:	603b      	str	r3, [r7, #0]
  *result = {};
 8007ab6:	6a3b      	ldr	r3, [r7, #32]
 8007ab8:	461a      	mov	r2, r3
 8007aba:	2300      	movs	r3, #0
 8007abc:	6013      	str	r3, [r2, #0]
 8007abe:	6053      	str	r3, [r2, #4]
 8007ac0:	6093      	str	r3, [r2, #8]
  // Make sure the serialized type is one we know how to deal with, and convert
  // it from a flatbuffer enum into a constant used by the kernel C API.
  TF_LITE_ENSURE_STATUS(ConvertTensorType(flatbuffer_tensor.type(),
 8007ac2:	68b8      	ldr	r0, [r7, #8]
 8007ac4:	f7ff f836 	bl	8006b34 <_ZNK6tflite6Tensor4typeEv>
 8007ac8:	4603      	mov	r3, r0
 8007aca:	4618      	mov	r0, r3
 8007acc:	6a3b      	ldr	r3, [r7, #32]
 8007ace:	3308      	adds	r3, #8
 8007ad0:	683a      	ldr	r2, [r7, #0]
 8007ad2:	4619      	mov	r1, r3
 8007ad4:	f7fc fb00 	bl	80040d8 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE>
 8007ad8:	4603      	mov	r3, r0
 8007ada:	75fb      	strb	r3, [r7, #23]
 8007adc:	7dfb      	ldrb	r3, [r7, #23]
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	d001      	beq.n	8007ae6 <_ZN6tflite8internal40InitializeTfLiteEvalTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP16TfLiteEvalTensor+0x3e>
 8007ae2:	7dfb      	ldrb	r3, [r7, #23]
 8007ae4:	e027      	b.n	8007b36 <_ZN6tflite8internal40InitializeTfLiteEvalTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP16TfLiteEvalTensor+0x8e>
                                          &result->type, error_reporter));

  result->data.data = GetFlatbufferTensorBuffer(flatbuffer_tensor, buffers);
 8007ae6:	6879      	ldr	r1, [r7, #4]
 8007ae8:	68b8      	ldr	r0, [r7, #8]
 8007aea:	f7ff fe55 	bl	8007798 <_ZN6tflite8internal25GetFlatbufferTensorBufferERKNS_6TensorEPKN11flatbuffers6VectorINS4_6OffsetINS_6BufferEEEEE>
 8007aee:	4602      	mov	r2, r0
 8007af0:	6a3b      	ldr	r3, [r7, #32]
 8007af2:	601a      	str	r2, [r3, #0]

  if (flatbuffer_tensor.shape() == nullptr) {
 8007af4:	68b8      	ldr	r0, [r7, #8]
 8007af6:	f7ff f80f 	bl	8006b18 <_ZNK6tflite6Tensor5shapeEv>
 8007afa:	4603      	mov	r3, r0
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	bf0c      	ite	eq
 8007b00:	2301      	moveq	r3, #1
 8007b02:	2300      	movne	r3, #0
 8007b04:	b2db      	uxtb	r3, r3
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	d003      	beq.n	8007b12 <_ZN6tflite8internal40InitializeTfLiteEvalTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP16TfLiteEvalTensor+0x6a>
    // flatbuffer_tensor.shape() can return a nullptr in the case of a scalar
    // tensor.
    result->dims = const_cast<TfLiteIntArray*>(&kZeroLengthIntArray);
 8007b0a:	6a3b      	ldr	r3, [r7, #32]
 8007b0c:	4a0c      	ldr	r2, [pc, #48]	; (8007b40 <_ZN6tflite8internal40InitializeTfLiteEvalTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP16TfLiteEvalTensor+0x98>)
 8007b0e:	605a      	str	r2, [r3, #4]
 8007b10:	e010      	b.n	8007b34 <_ZN6tflite8internal40InitializeTfLiteEvalTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP16TfLiteEvalTensor+0x8c>
  } else {
    TF_LITE_ENSURE_STATUS(FlatBufferVectorToTfLiteTypeArray(
 8007b12:	68b8      	ldr	r0, [r7, #8]
 8007b14:	f7ff f800 	bl	8006b18 <_ZNK6tflite6Tensor5shapeEv>
 8007b18:	4602      	mov	r2, r0
 8007b1a:	6a3b      	ldr	r3, [r7, #32]
 8007b1c:	3304      	adds	r3, #4
 8007b1e:	6839      	ldr	r1, [r7, #0]
 8007b20:	68f8      	ldr	r0, [r7, #12]
 8007b22:	f001 f85f 	bl	8008be4 <_ZN6tflite8internal33FlatBufferVectorToTfLiteTypeArrayIl14TfLiteIntArrayEE12TfLiteStatusPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterEPKN11flatbuffers6VectorIT_EEPPT0_>
 8007b26:	4603      	mov	r3, r0
 8007b28:	75bb      	strb	r3, [r7, #22]
 8007b2a:	7dbb      	ldrb	r3, [r7, #22]
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	d001      	beq.n	8007b34 <_ZN6tflite8internal40InitializeTfLiteEvalTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP16TfLiteEvalTensor+0x8c>
 8007b30:	7dbb      	ldrb	r3, [r7, #22]
 8007b32:	e000      	b.n	8007b36 <_ZN6tflite8internal40InitializeTfLiteEvalTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP16TfLiteEvalTensor+0x8e>
        allocator, error_reporter, flatbuffer_tensor.shape(), &(result->dims)));
  }
  return kTfLiteOk;
 8007b34:	2300      	movs	r3, #0
}
 8007b36:	4618      	mov	r0, r3
 8007b38:	3718      	adds	r7, #24
 8007b3a:	46bd      	mov	sp, r7
 8007b3c:	bd80      	pop	{r7, pc}
 8007b3e:	bf00      	nop
 8007b40:	0801ced4 	.word	0x0801ced4

08007b44 <_ZN6tflite14MicroAllocatorC1EPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterE>:

}  // namespace internal

MicroAllocator::MicroAllocator(SimpleMemoryAllocator* memory_allocator,
 8007b44:	b480      	push	{r7}
 8007b46:	b085      	sub	sp, #20
 8007b48:	af00      	add	r7, sp, #0
 8007b4a:	60f8      	str	r0, [r7, #12]
 8007b4c:	60b9      	str	r1, [r7, #8]
 8007b4e:	607a      	str	r2, [r7, #4]
                               ErrorReporter* error_reporter)
    : memory_allocator_(memory_allocator),
      error_reporter_(error_reporter),
      model_is_allocating_(false) {}
 8007b50:	4a0c      	ldr	r2, [pc, #48]	; (8007b84 <_ZN6tflite14MicroAllocatorC1EPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterE+0x40>)
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	601a      	str	r2, [r3, #0]
 8007b56:	68fb      	ldr	r3, [r7, #12]
 8007b58:	68ba      	ldr	r2, [r7, #8]
 8007b5a:	605a      	str	r2, [r3, #4]
 8007b5c:	68fb      	ldr	r3, [r7, #12]
 8007b5e:	687a      	ldr	r2, [r7, #4]
 8007b60:	60da      	str	r2, [r3, #12]
 8007b62:	68fb      	ldr	r3, [r7, #12]
 8007b64:	2200      	movs	r2, #0
 8007b66:	741a      	strb	r2, [r3, #16]
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	2200      	movs	r2, #0
 8007b6c:	615a      	str	r2, [r3, #20]
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	2200      	movs	r2, #0
 8007b72:	619a      	str	r2, [r3, #24]
 8007b74:	68fb      	ldr	r3, [r7, #12]
 8007b76:	4618      	mov	r0, r3
 8007b78:	3714      	adds	r7, #20
 8007b7a:	46bd      	mov	sp, r7
 8007b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b80:	4770      	bx	lr
 8007b82:	bf00      	nop
 8007b84:	0801cef8 	.word	0x0801cef8

08007b88 <_ZN6tflite14MicroAllocatorD1Ev>:

MicroAllocator::~MicroAllocator() {}
 8007b88:	b480      	push	{r7}
 8007b8a:	b083      	sub	sp, #12
 8007b8c:	af00      	add	r7, sp, #0
 8007b8e:	6078      	str	r0, [r7, #4]
 8007b90:	4a04      	ldr	r2, [pc, #16]	; (8007ba4 <_ZN6tflite14MicroAllocatorD1Ev+0x1c>)
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	601a      	str	r2, [r3, #0]
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	4618      	mov	r0, r3
 8007b9a:	370c      	adds	r7, #12
 8007b9c:	46bd      	mov	sp, r7
 8007b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ba2:	4770      	bx	lr
 8007ba4:	0801cef8 	.word	0x0801cef8

08007ba8 <_ZN6tflite14MicroAllocatorD0Ev>:
 8007ba8:	b580      	push	{r7, lr}
 8007baa:	b082      	sub	sp, #8
 8007bac:	af00      	add	r7, sp, #0
 8007bae:	6078      	str	r0, [r7, #4]
 8007bb0:	6878      	ldr	r0, [r7, #4]
 8007bb2:	f7ff ffe9 	bl	8007b88 <_ZN6tflite14MicroAllocatorD1Ev>
 8007bb6:	211c      	movs	r1, #28
 8007bb8:	6878      	ldr	r0, [r7, #4]
 8007bba:	f008 fb6a 	bl	8010292 <_ZdlPvj>
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	4618      	mov	r0, r3
 8007bc2:	3708      	adds	r7, #8
 8007bc4:	46bd      	mov	sp, r7
 8007bc6:	bd80      	pop	{r7, pc}

08007bc8 <_ZN6tflite14MicroAllocator6CreateEPhjPNS_13ErrorReporterE>:

MicroAllocator* MicroAllocator::Create(uint8_t* tensor_arena, size_t arena_size,
                                       ErrorReporter* error_reporter) {
 8007bc8:	b580      	push	{r7, lr}
 8007bca:	b086      	sub	sp, #24
 8007bcc:	af00      	add	r7, sp, #0
 8007bce:	60f8      	str	r0, [r7, #12]
 8007bd0:	60b9      	str	r1, [r7, #8]
 8007bd2:	607a      	str	r2, [r7, #4]
  uint8_t* aligned_arena = AlignPointerUp(tensor_arena, kBufferAlignment);
 8007bd4:	2110      	movs	r1, #16
 8007bd6:	68f8      	ldr	r0, [r7, #12]
 8007bd8:	f7ff f857 	bl	8006c8a <_ZN6tflite14AlignPointerUpEPhj>
 8007bdc:	6178      	str	r0, [r7, #20]
  size_t aligned_arena_size = tensor_arena + arena_size - aligned_arena;
 8007bde:	68fa      	ldr	r2, [r7, #12]
 8007be0:	68bb      	ldr	r3, [r7, #8]
 8007be2:	441a      	add	r2, r3
 8007be4:	697b      	ldr	r3, [r7, #20]
 8007be6:	1ad3      	subs	r3, r2, r3
 8007be8:	613b      	str	r3, [r7, #16]
  return Create(SimpleMemoryAllocator::Create(error_reporter, aligned_arena,
 8007bea:	693a      	ldr	r2, [r7, #16]
 8007bec:	6979      	ldr	r1, [r7, #20]
 8007bee:	6878      	ldr	r0, [r7, #4]
 8007bf0:	f002 ffe6 	bl	800abc0 <_ZN6tflite21SimpleMemoryAllocator6CreateEPNS_13ErrorReporterEPhj>
 8007bf4:	4603      	mov	r3, r0
 8007bf6:	6879      	ldr	r1, [r7, #4]
 8007bf8:	4618      	mov	r0, r3
 8007bfa:	f000 f805 	bl	8007c08 <_ZN6tflite14MicroAllocator6CreateEPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterE>
 8007bfe:	4603      	mov	r3, r0
                                              aligned_arena_size),
                error_reporter);
}
 8007c00:	4618      	mov	r0, r3
 8007c02:	3718      	adds	r7, #24
 8007c04:	46bd      	mov	sp, r7
 8007c06:	bd80      	pop	{r7, pc}

08007c08 <_ZN6tflite14MicroAllocator6CreateEPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterE>:

MicroAllocator* MicroAllocator::Create(SimpleMemoryAllocator* memory_allocator,
                                       ErrorReporter* error_reporter) {
 8007c08:	b590      	push	{r4, r7, lr}
 8007c0a:	b085      	sub	sp, #20
 8007c0c:	af00      	add	r7, sp, #0
 8007c0e:	6078      	str	r0, [r7, #4]
 8007c10:	6039      	str	r1, [r7, #0]
  TFLITE_DCHECK(memory_allocator != nullptr);
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	d101      	bne.n	8007c1c <_ZN6tflite14MicroAllocator6CreateEPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterE+0x14>
 8007c18:	f008 fdc1 	bl	801079e <abort>
  TFLITE_DCHECK(error_reporter != nullptr);
 8007c1c:	683b      	ldr	r3, [r7, #0]
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	d101      	bne.n	8007c26 <_ZN6tflite14MicroAllocator6CreateEPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterE+0x1e>
 8007c22:	f008 fdbc 	bl	801079e <abort>

  uint8_t* allocator_buffer = memory_allocator->AllocateFromTail(
      sizeof(MicroAllocator), alignof(MicroAllocator));
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	330c      	adds	r3, #12
 8007c2c:	681b      	ldr	r3, [r3, #0]
  uint8_t* allocator_buffer = memory_allocator->AllocateFromTail(
 8007c2e:	2204      	movs	r2, #4
 8007c30:	211c      	movs	r1, #28
 8007c32:	6878      	ldr	r0, [r7, #4]
 8007c34:	4798      	blx	r3
 8007c36:	60f8      	str	r0, [r7, #12]
  MicroAllocator* allocator =
      new (allocator_buffer) MicroAllocator(memory_allocator, error_reporter);
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	4619      	mov	r1, r3
 8007c3c:	201c      	movs	r0, #28
 8007c3e:	f7fc f81e 	bl	8003c7e <_ZnwjPv>
 8007c42:	4604      	mov	r4, r0
 8007c44:	683a      	ldr	r2, [r7, #0]
 8007c46:	6879      	ldr	r1, [r7, #4]
 8007c48:	4620      	mov	r0, r4
 8007c4a:	f7ff ff7b 	bl	8007b44 <_ZN6tflite14MicroAllocatorC1EPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterE>
 8007c4e:	60bc      	str	r4, [r7, #8]
  return allocator;
 8007c50:	68bb      	ldr	r3, [r7, #8]
}
 8007c52:	4618      	mov	r0, r3
 8007c54:	3714      	adds	r7, #20
 8007c56:	46bd      	mov	sp, r7
 8007c58:	bd90      	pop	{r4, r7, pc}
	...

08007c5c <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelE>:

SubgraphAllocations* MicroAllocator::StartModelAllocation(const Model* model) {
 8007c5c:	b5b0      	push	{r4, r5, r7, lr}
 8007c5e:	b084      	sub	sp, #16
 8007c60:	af00      	add	r7, sp, #0
 8007c62:	6078      	str	r0, [r7, #4]
 8007c64:	6039      	str	r1, [r7, #0]
  TFLITE_DCHECK(model != nullptr);
 8007c66:	683b      	ldr	r3, [r7, #0]
 8007c68:	2b00      	cmp	r3, #0
 8007c6a:	d101      	bne.n	8007c70 <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelE+0x14>
 8007c6c:	f008 fd97 	bl	801079e <abort>

  if (model_is_allocating_) {
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	7c1b      	ldrb	r3, [r3, #16]
 8007c74:	2b00      	cmp	r3, #0
 8007c76:	d007      	beq.n	8007c88 <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelE+0x2c>
    TF_LITE_REPORT_ERROR(error_reporter_,
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	68db      	ldr	r3, [r3, #12]
 8007c7c:	4936      	ldr	r1, [pc, #216]	; (8007d58 <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelE+0xfc>)
 8007c7e:	4618      	mov	r0, r3
 8007c80:	f7fb ffca 	bl	8003c18 <_ZN6tflite13ErrorReporter6ReportEPKcz>
                         "MicroAllocator: Model allocation started before "
                         "finishing previously allocated model");
    return nullptr;
 8007c84:	2300      	movs	r3, #0
 8007c86:	e063      	b.n	8007d50 <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelE+0xf4>
  }

  model_is_allocating_ = true;
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	2201      	movs	r2, #1
 8007c8c:	741a      	strb	r2, [r3, #16]

  uint8_t* data_allocator_buffer = memory_allocator_->AllocateFromTail(
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	6858      	ldr	r0, [r3, #4]
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	685b      	ldr	r3, [r3, #4]
      sizeof(MicroBuiltinDataAllocator), alignof(MicroBuiltinDataAllocator));
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	330c      	adds	r3, #12
 8007c9a:	681b      	ldr	r3, [r3, #0]
  uint8_t* data_allocator_buffer = memory_allocator_->AllocateFromTail(
 8007c9c:	2204      	movs	r2, #4
 8007c9e:	2108      	movs	r1, #8
 8007ca0:	4798      	blx	r3
 8007ca2:	60f8      	str	r0, [r7, #12]
  builtin_data_allocator_ =
 8007ca4:	68fb      	ldr	r3, [r7, #12]
      new (data_allocator_buffer) MicroBuiltinDataAllocator(memory_allocator_);
 8007ca6:	4619      	mov	r1, r3
 8007ca8:	2008      	movs	r0, #8
 8007caa:	f7fb ffe8 	bl	8003c7e <_ZnwjPv>
 8007cae:	4604      	mov	r4, r0
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	685b      	ldr	r3, [r3, #4]
 8007cb4:	4619      	mov	r1, r3
 8007cb6:	4620      	mov	r0, r4
 8007cb8:	f7ff fa60 	bl	800717c <_ZN6tflite12_GLOBAL__N_125MicroBuiltinDataAllocatorC1EPNS_21SimpleMemoryAllocatorE>
  builtin_data_allocator_ =
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	609c      	str	r4, [r3, #8]

  if (InitScratchBufferData() != kTfLiteOk) {
 8007cc0:	6878      	ldr	r0, [r7, #4]
 8007cc2:	f000 fd6b 	bl	800879c <_ZN6tflite14MicroAllocator21InitScratchBufferDataEv>
 8007cc6:	4603      	mov	r3, r0
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	bf14      	ite	ne
 8007ccc:	2301      	movne	r3, #1
 8007cce:	2300      	moveq	r3, #0
 8007cd0:	b2db      	uxtb	r3, r3
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	d001      	beq.n	8007cda <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelE+0x7e>
    return nullptr;
 8007cd6:	2300      	movs	r3, #0
 8007cd8:	e03a      	b.n	8007d50 <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelE+0xf4>
  }

  // Allocate struct to store eval tensors, nodes and registrations.
  SubgraphAllocations* output = reinterpret_cast<SubgraphAllocations*>(
      memory_allocator_->AllocateFromTail(
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	685d      	ldr	r5, [r3, #4]
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	685b      	ldr	r3, [r3, #4]
          sizeof(SubgraphAllocations) * model->subgraphs()->size(),
          alignof(SubgraphAllocations)));
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	330c      	adds	r3, #12
 8007ce6:	681c      	ldr	r4, [r3, #0]
          sizeof(SubgraphAllocations) * model->subgraphs()->size(),
 8007ce8:	6838      	ldr	r0, [r7, #0]
 8007cea:	f7fe fe03 	bl	80068f4 <_ZNK6tflite5Model9subgraphsEv>
 8007cee:	4603      	mov	r3, r0
 8007cf0:	4618      	mov	r0, r3
 8007cf2:	f7fe fe6f 	bl	80069d4 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE4sizeEv>
 8007cf6:	4603      	mov	r3, r0
 8007cf8:	00db      	lsls	r3, r3, #3
      memory_allocator_->AllocateFromTail(
 8007cfa:	2204      	movs	r2, #4
 8007cfc:	4619      	mov	r1, r3
 8007cfe:	4628      	mov	r0, r5
 8007d00:	47a0      	blx	r4
 8007d02:	60b8      	str	r0, [r7, #8]
  if (output == nullptr) {
 8007d04:	68bb      	ldr	r3, [r7, #8]
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	d104      	bne.n	8007d14 <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelE+0xb8>
    MicroPrintf("Failed to allocate memory for model metadata.");
 8007d0a:	4814      	ldr	r0, [pc, #80]	; (8007d5c <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelE+0x100>)
 8007d0c:	f001 f98e 	bl	800902c <_Z11MicroPrintfPKcz>
    return nullptr;
 8007d10:	2300      	movs	r3, #0
 8007d12:	e01d      	b.n	8007d50 <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelE+0xf4>
  }

  if (AllocateTfLiteEvalTensors(model, output) != kTfLiteOk ||
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	331c      	adds	r3, #28
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	68ba      	ldr	r2, [r7, #8]
 8007d1e:	6839      	ldr	r1, [r7, #0]
 8007d20:	6878      	ldr	r0, [r7, #4]
 8007d22:	4798      	blx	r3
 8007d24:	4603      	mov	r3, r0
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	d10a      	bne.n	8007d40 <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelE+0xe4>
      AllocateNodeAndRegistrations(model, output) != kTfLiteOk) {
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	3318      	adds	r3, #24
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	68ba      	ldr	r2, [r7, #8]
 8007d34:	6839      	ldr	r1, [r7, #0]
 8007d36:	6878      	ldr	r0, [r7, #4]
 8007d38:	4798      	blx	r3
 8007d3a:	4603      	mov	r3, r0
  if (AllocateTfLiteEvalTensors(model, output) != kTfLiteOk ||
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	d001      	beq.n	8007d44 <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelE+0xe8>
 8007d40:	2301      	movs	r3, #1
 8007d42:	e000      	b.n	8007d46 <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelE+0xea>
 8007d44:	2300      	movs	r3, #0
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	d001      	beq.n	8007d4e <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelE+0xf2>
    return nullptr;
 8007d4a:	2300      	movs	r3, #0
 8007d4c:	e000      	b.n	8007d50 <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelE+0xf4>
  }
  return output;
 8007d4e:	68bb      	ldr	r3, [r7, #8]
}
 8007d50:	4618      	mov	r0, r3
 8007d52:	3710      	adds	r7, #16
 8007d54:	46bd      	mov	sp, r7
 8007d56:	bdb0      	pop	{r4, r5, r7, pc}
 8007d58:	08014d98 	.word	0x08014d98
 8007d5c:	08014df0 	.word	0x08014df0

08007d60 <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEPNS_19SubgraphAllocationsEPPNS_19ScratchBufferHandleE>:

TfLiteStatus MicroAllocator::FinishModelAllocation(
    const Model* model, SubgraphAllocations* subgraph_allocations,
    ScratchBufferHandle** scratch_buffer_handles) {
 8007d60:	b590      	push	{r4, r7, lr}
 8007d62:	b08b      	sub	sp, #44	; 0x2c
 8007d64:	af02      	add	r7, sp, #8
 8007d66:	60f8      	str	r0, [r7, #12]
 8007d68:	60b9      	str	r1, [r7, #8]
 8007d6a:	607a      	str	r2, [r7, #4]
 8007d6c:	603b      	str	r3, [r7, #0]
  if (!model_is_allocating_) {
 8007d6e:	68fb      	ldr	r3, [r7, #12]
 8007d70:	7c1b      	ldrb	r3, [r3, #16]
 8007d72:	f083 0301 	eor.w	r3, r3, #1
 8007d76:	b2db      	uxtb	r3, r3
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	d007      	beq.n	8007d8c <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEPNS_19SubgraphAllocationsEPPNS_19ScratchBufferHandleE+0x2c>
    TF_LITE_REPORT_ERROR(error_reporter_,
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	68db      	ldr	r3, [r3, #12]
 8007d80:	4936      	ldr	r1, [pc, #216]	; (8007e5c <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEPNS_19SubgraphAllocationsEPPNS_19ScratchBufferHandleE+0xfc>)
 8007d82:	4618      	mov	r0, r3
 8007d84:	f7fb ff48 	bl	8003c18 <_ZN6tflite13ErrorReporter6ReportEPKcz>
                         "MicroAllocator: Model allocation finished before "
                         "starting allocating model");
    return kTfLiteError;
 8007d88:	2301      	movs	r3, #1
 8007d8a:	e062      	b.n	8007e52 <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEPNS_19SubgraphAllocationsEPPNS_19ScratchBufferHandleE+0xf2>
  }

  // TODO(b/187993197): Track scratch buffers for each subgraph.
  for (size_t subgraph_idx = 0; subgraph_idx < model->subgraphs()->size();
 8007d8c:	2300      	movs	r3, #0
 8007d8e:	61fb      	str	r3, [r7, #28]
 8007d90:	68b8      	ldr	r0, [r7, #8]
 8007d92:	f7fe fdaf 	bl	80068f4 <_ZNK6tflite5Model9subgraphsEv>
 8007d96:	4603      	mov	r3, r0
 8007d98:	4618      	mov	r0, r3
 8007d9a:	f7fe fe1b 	bl	80069d4 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE4sizeEv>
 8007d9e:	4602      	mov	r2, r0
 8007da0:	69fb      	ldr	r3, [r7, #28]
 8007da2:	4293      	cmp	r3, r2
 8007da4:	bf34      	ite	cc
 8007da6:	2301      	movcc	r3, #1
 8007da8:	2300      	movcs	r3, #0
 8007daa:	b2db      	uxtb	r3, r3
 8007dac:	2b00      	cmp	r3, #0
 8007dae:	d04c      	beq.n	8007e4a <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEPNS_19SubgraphAllocationsEPPNS_19ScratchBufferHandleE+0xea>
       subgraph_idx++) {
    const SubGraph* subgraph = model->subgraphs()->Get(subgraph_idx);
 8007db0:	68b8      	ldr	r0, [r7, #8]
 8007db2:	f7fe fd9f 	bl	80068f4 <_ZNK6tflite5Model9subgraphsEv>
 8007db6:	4603      	mov	r3, r0
 8007db8:	69f9      	ldr	r1, [r7, #28]
 8007dba:	4618      	mov	r0, r3
 8007dbc:	f7fe fe18 	bl	80069f0 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE3GetEm>
 8007dc0:	61b8      	str	r0, [r7, #24]
    TFLITE_DCHECK(subgraph != nullptr);
 8007dc2:	69bb      	ldr	r3, [r7, #24]
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	d101      	bne.n	8007dcc <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEPNS_19SubgraphAllocationsEPPNS_19ScratchBufferHandleE+0x6c>
 8007dc8:	f008 fce9 	bl	801079e <abort>

    TF_LITE_ENSURE_STATUS(AllocateScratchBufferHandles(
 8007dcc:	68fb      	ldr	r3, [r7, #12]
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	3330      	adds	r3, #48	; 0x30
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	68fa      	ldr	r2, [r7, #12]
 8007dd6:	6952      	ldr	r2, [r2, #20]
 8007dd8:	6839      	ldr	r1, [r7, #0]
 8007dda:	68f8      	ldr	r0, [r7, #12]
 8007ddc:	4798      	blx	r3
 8007dde:	4603      	mov	r3, r0
 8007de0:	75fb      	strb	r3, [r7, #23]
 8007de2:	7dfb      	ldrb	r3, [r7, #23]
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	d001      	beq.n	8007dec <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEPNS_19SubgraphAllocationsEPPNS_19ScratchBufferHandleE+0x8c>
 8007de8:	7dfb      	ldrb	r3, [r7, #23]
 8007dea:	e032      	b.n	8007e52 <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEPNS_19SubgraphAllocationsEPPNS_19ScratchBufferHandleE+0xf2>
        scratch_buffer_handles, scratch_buffer_request_count_));
    TF_LITE_ENSURE_STATUS(CommitStaticMemoryPlan(
 8007dec:	68fb      	ldr	r3, [r7, #12]
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	332c      	adds	r3, #44	; 0x2c
 8007df2:	681c      	ldr	r4, [r3, #0]
 8007df4:	69fb      	ldr	r3, [r7, #28]
 8007df6:	00db      	lsls	r3, r3, #3
 8007df8:	687a      	ldr	r2, [r7, #4]
 8007dfa:	4413      	add	r3, r2
 8007dfc:	685a      	ldr	r2, [r3, #4]
 8007dfe:	683b      	ldr	r3, [r7, #0]
 8007e00:	6819      	ldr	r1, [r3, #0]
 8007e02:	69fb      	ldr	r3, [r7, #28]
 8007e04:	9300      	str	r3, [sp, #0]
 8007e06:	460b      	mov	r3, r1
 8007e08:	68b9      	ldr	r1, [r7, #8]
 8007e0a:	68f8      	ldr	r0, [r7, #12]
 8007e0c:	47a0      	blx	r4
 8007e0e:	4603      	mov	r3, r0
 8007e10:	75bb      	strb	r3, [r7, #22]
 8007e12:	7dbb      	ldrb	r3, [r7, #22]
 8007e14:	2b00      	cmp	r3, #0
 8007e16:	d001      	beq.n	8007e1c <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEPNS_19SubgraphAllocationsEPPNS_19ScratchBufferHandleE+0xbc>
 8007e18:	7dbb      	ldrb	r3, [r7, #22]
 8007e1a:	e01a      	b.n	8007e52 <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEPNS_19SubgraphAllocationsEPPNS_19ScratchBufferHandleE+0xf2>
        model, subgraph_allocations[subgraph_idx].tensors,
        *scratch_buffer_handles, subgraph_idx));
    TF_LITE_ENSURE_STATUS(AllocateVariables(
 8007e1c:	68fb      	ldr	r3, [r7, #12]
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	3320      	adds	r3, #32
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	69fa      	ldr	r2, [r7, #28]
 8007e26:	00d2      	lsls	r2, r2, #3
 8007e28:	6879      	ldr	r1, [r7, #4]
 8007e2a:	440a      	add	r2, r1
 8007e2c:	6852      	ldr	r2, [r2, #4]
 8007e2e:	69b9      	ldr	r1, [r7, #24]
 8007e30:	68f8      	ldr	r0, [r7, #12]
 8007e32:	4798      	blx	r3
 8007e34:	4603      	mov	r3, r0
 8007e36:	757b      	strb	r3, [r7, #21]
 8007e38:	7d7b      	ldrb	r3, [r7, #21]
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	d001      	beq.n	8007e42 <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEPNS_19SubgraphAllocationsEPPNS_19ScratchBufferHandleE+0xe2>
 8007e3e:	7d7b      	ldrb	r3, [r7, #21]
 8007e40:	e007      	b.n	8007e52 <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEPNS_19SubgraphAllocationsEPPNS_19ScratchBufferHandleE+0xf2>
  for (size_t subgraph_idx = 0; subgraph_idx < model->subgraphs()->size();
 8007e42:	69fb      	ldr	r3, [r7, #28]
 8007e44:	3301      	adds	r3, #1
 8007e46:	61fb      	str	r3, [r7, #28]
 8007e48:	e7a2      	b.n	8007d90 <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEPNS_19SubgraphAllocationsEPPNS_19ScratchBufferHandleE+0x30>
        subgraph, subgraph_allocations[subgraph_idx].tensors));
  }
  model_is_allocating_ = false;
 8007e4a:	68fb      	ldr	r3, [r7, #12]
 8007e4c:	2200      	movs	r2, #0
 8007e4e:	741a      	strb	r2, [r3, #16]
  return kTfLiteOk;
 8007e50:	2300      	movs	r3, #0
}
 8007e52:	4618      	mov	r0, r3
 8007e54:	3724      	adds	r7, #36	; 0x24
 8007e56:	46bd      	mov	sp, r7
 8007e58:	bd90      	pop	{r4, r7, pc}
 8007e5a:	bf00      	nop
 8007e5c:	08014e20 	.word	0x08014e20

08007e60 <_ZN6tflite14MicroAllocator24AllocatePersistentBufferEj>:

void* MicroAllocator::AllocatePersistentBuffer(size_t bytes) {
 8007e60:	b580      	push	{r7, lr}
 8007e62:	b082      	sub	sp, #8
 8007e64:	af00      	add	r7, sp, #0
 8007e66:	6078      	str	r0, [r7, #4]
 8007e68:	6039      	str	r1, [r7, #0]
  return memory_allocator_->AllocateFromTail(bytes, kBufferAlignment);
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	6858      	ldr	r0, [r3, #4]
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	685b      	ldr	r3, [r3, #4]
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	330c      	adds	r3, #12
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	2210      	movs	r2, #16
 8007e7a:	6839      	ldr	r1, [r7, #0]
 8007e7c:	4798      	blx	r3
 8007e7e:	4603      	mov	r3, r0
}
 8007e80:	4618      	mov	r0, r3
 8007e82:	3708      	adds	r7, #8
 8007e84:	46bd      	mov	sp, r7
 8007e86:	bd80      	pop	{r7, pc}

08007e88 <_ZN6tflite14MicroAllocator27RequestScratchBufferInArenaEjiPi>:

TfLiteStatus MicroAllocator::RequestScratchBufferInArena(size_t bytes,
                                                         int subgraph_idx,
                                                         int* buffer_idx) {
 8007e88:	b580      	push	{r7, lr}
 8007e8a:	b088      	sub	sp, #32
 8007e8c:	af00      	add	r7, sp, #0
 8007e8e:	60f8      	str	r0, [r7, #12]
 8007e90:	60b9      	str	r1, [r7, #8]
 8007e92:	607a      	str	r2, [r7, #4]
 8007e94:	603b      	str	r3, [r7, #0]
  // All scratch buffer requests are stored in the head section of the arena
  // when a model is in the prepare phase. First align a scratch buffer request
  // pointer to the start of the head:
  internal::ScratchBufferRequest* requests = GetScratchBufferRequests();
 8007e96:	68f8      	ldr	r0, [r7, #12]
 8007e98:	f000 fc9d 	bl	80087d6 <_ZN6tflite14MicroAllocator24GetScratchBufferRequestsEv>
 8007e9c:	6178      	str	r0, [r7, #20]

  // Count the number of requested scratch buffers for the current node:
  size_t current_node_request_count = 0;
 8007e9e:	2300      	movs	r3, #0
 8007ea0:	61fb      	str	r3, [r7, #28]
  for (size_t i = 0; i < scratch_buffer_request_count_; ++i) {
 8007ea2:	2300      	movs	r3, #0
 8007ea4:	61bb      	str	r3, [r7, #24]
 8007ea6:	68fb      	ldr	r3, [r7, #12]
 8007ea8:	695b      	ldr	r3, [r3, #20]
 8007eaa:	69ba      	ldr	r2, [r7, #24]
 8007eac:	429a      	cmp	r2, r3
 8007eae:	d20e      	bcs.n	8007ece <_ZN6tflite14MicroAllocator27RequestScratchBufferInArenaEjiPi+0x46>
    if (requests[i].node_idx == kUnassignedScratchBufferRequestIndex) {
 8007eb0:	69bb      	ldr	r3, [r7, #24]
 8007eb2:	00db      	lsls	r3, r3, #3
 8007eb4:	697a      	ldr	r2, [r7, #20]
 8007eb6:	4413      	add	r3, r2
 8007eb8:	685b      	ldr	r3, [r3, #4]
 8007eba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ebe:	d102      	bne.n	8007ec6 <_ZN6tflite14MicroAllocator27RequestScratchBufferInArenaEjiPi+0x3e>
      ++current_node_request_count;
 8007ec0:	69fb      	ldr	r3, [r7, #28]
 8007ec2:	3301      	adds	r3, #1
 8007ec4:	61fb      	str	r3, [r7, #28]
  for (size_t i = 0; i < scratch_buffer_request_count_; ++i) {
 8007ec6:	69bb      	ldr	r3, [r7, #24]
 8007ec8:	3301      	adds	r3, #1
 8007eca:	61bb      	str	r3, [r7, #24]
 8007ecc:	e7eb      	b.n	8007ea6 <_ZN6tflite14MicroAllocator27RequestScratchBufferInArenaEjiPi+0x1e>
    }
  }

  // First, ensure that the per-kernel request has not exceeded the limit:
  if (current_node_request_count >= kMaxScratchBuffersPerOp) {
 8007ece:	69fb      	ldr	r3, [r7, #28]
 8007ed0:	2b0b      	cmp	r3, #11
 8007ed2:	d908      	bls.n	8007ee6 <_ZN6tflite14MicroAllocator27RequestScratchBufferInArenaEjiPi+0x5e>
    TF_LITE_REPORT_ERROR(
 8007ed4:	68fb      	ldr	r3, [r7, #12]
 8007ed6:	68db      	ldr	r3, [r3, #12]
 8007ed8:	220c      	movs	r2, #12
 8007eda:	4913      	ldr	r1, [pc, #76]	; (8007f28 <_ZN6tflite14MicroAllocator27RequestScratchBufferInArenaEjiPi+0xa0>)
 8007edc:	4618      	mov	r0, r3
 8007ede:	f7fb fe9b 	bl	8003c18 <_ZN6tflite13ErrorReporter6ReportEPKcz>
        error_reporter_,
        "Scratch buffer request exeeds limit per operator (%d)",
        kMaxScratchBuffersPerOp);
    return kTfLiteError;
 8007ee2:	2301      	movs	r3, #1
 8007ee4:	e01c      	b.n	8007f20 <_ZN6tflite14MicroAllocator27RequestScratchBufferInArenaEjiPi+0x98>
  }

  // Initialize and assign values for the request at the current index:
  internal::ScratchBufferRequest* current_request =
      &requests[scratch_buffer_request_count_];
 8007ee6:	68fb      	ldr	r3, [r7, #12]
 8007ee8:	695b      	ldr	r3, [r3, #20]
 8007eea:	00db      	lsls	r3, r3, #3
  internal::ScratchBufferRequest* current_request =
 8007eec:	697a      	ldr	r2, [r7, #20]
 8007eee:	4413      	add	r3, r2
 8007ef0:	613b      	str	r3, [r7, #16]
  *current_request = {};
 8007ef2:	693b      	ldr	r3, [r7, #16]
 8007ef4:	461a      	mov	r2, r3
 8007ef6:	2300      	movs	r3, #0
 8007ef8:	6013      	str	r3, [r2, #0]
 8007efa:	6053      	str	r3, [r2, #4]
  // Assign -1 as a sentinel value that will be updated when the node finishes
  // allocating:
  current_request->bytes = bytes;
 8007efc:	693b      	ldr	r3, [r7, #16]
 8007efe:	68ba      	ldr	r2, [r7, #8]
 8007f00:	601a      	str	r2, [r3, #0]
  current_request->node_idx = kUnassignedScratchBufferRequestIndex;
 8007f02:	693b      	ldr	r3, [r7, #16]
 8007f04:	f04f 32ff 	mov.w	r2, #4294967295
 8007f08:	605a      	str	r2, [r3, #4]

  // Assign the current request index to the out-param:
  *buffer_idx = scratch_buffer_request_count_;
 8007f0a:	68fb      	ldr	r3, [r7, #12]
 8007f0c:	695b      	ldr	r3, [r3, #20]
 8007f0e:	461a      	mov	r2, r3
 8007f10:	683b      	ldr	r3, [r7, #0]
 8007f12:	601a      	str	r2, [r3, #0]

  // Bump the request count to prepare for the next request:
  ++scratch_buffer_request_count_;
 8007f14:	68fb      	ldr	r3, [r7, #12]
 8007f16:	695b      	ldr	r3, [r3, #20]
 8007f18:	1c5a      	adds	r2, r3, #1
 8007f1a:	68fb      	ldr	r3, [r7, #12]
 8007f1c:	615a      	str	r2, [r3, #20]
  return kTfLiteOk;
 8007f1e:	2300      	movs	r3, #0
}
 8007f20:	4618      	mov	r0, r3
 8007f22:	3720      	adds	r7, #32
 8007f24:	46bd      	mov	sp, r7
 8007f26:	bd80      	pop	{r7, pc}
 8007f28:	08014e6c 	.word	0x08014e6c

08007f2c <_ZN6tflite14MicroAllocator28FinishPrepareNodeAllocationsEi>:

TfLiteStatus MicroAllocator::FinishPrepareNodeAllocations(int node_id) {
 8007f2c:	b580      	push	{r7, lr}
 8007f2e:	b086      	sub	sp, #24
 8007f30:	af00      	add	r7, sp, #0
 8007f32:	6078      	str	r0, [r7, #4]
 8007f34:	6039      	str	r1, [r7, #0]
  // When a node has finished preparing, all temp allocations performed by the
  // kernel should be cleaned up:
  ResetTempAllocations();
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	3308      	adds	r3, #8
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	6878      	ldr	r0, [r7, #4]
 8007f40:	4798      	blx	r3

  // Find and update any new scratch buffer requests for the current node:
  internal::ScratchBufferRequest* requests = GetScratchBufferRequests();
 8007f42:	6878      	ldr	r0, [r7, #4]
 8007f44:	f000 fc47 	bl	80087d6 <_ZN6tflite14MicroAllocator24GetScratchBufferRequestsEv>
 8007f48:	6138      	str	r0, [r7, #16]

  for (size_t i = 0; i < scratch_buffer_request_count_; ++i) {
 8007f4a:	2300      	movs	r3, #0
 8007f4c:	617b      	str	r3, [r7, #20]
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	695b      	ldr	r3, [r3, #20]
 8007f52:	697a      	ldr	r2, [r7, #20]
 8007f54:	429a      	cmp	r2, r3
 8007f56:	d211      	bcs.n	8007f7c <_ZN6tflite14MicroAllocator28FinishPrepareNodeAllocationsEi+0x50>
    // A request with a node_idx of -1 is a sentinel value used to indicate this
    // was a new request for the current node. The allocator finally knows the
    // node index at this point. Assign the value and update the list of new
    // requests so the head section can be adjusted to allow for the next kernel
    // to allocate at most kMaxScratchBuffersPerOp requests:
    if (requests[i].node_idx == kUnassignedScratchBufferRequestIndex) {
 8007f58:	697b      	ldr	r3, [r7, #20]
 8007f5a:	00db      	lsls	r3, r3, #3
 8007f5c:	693a      	ldr	r2, [r7, #16]
 8007f5e:	4413      	add	r3, r2
 8007f60:	685b      	ldr	r3, [r3, #4]
 8007f62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f66:	d105      	bne.n	8007f74 <_ZN6tflite14MicroAllocator28FinishPrepareNodeAllocationsEi+0x48>
      requests[i].node_idx = node_id;
 8007f68:	697b      	ldr	r3, [r7, #20]
 8007f6a:	00db      	lsls	r3, r3, #3
 8007f6c:	693a      	ldr	r2, [r7, #16]
 8007f6e:	4413      	add	r3, r2
 8007f70:	683a      	ldr	r2, [r7, #0]
 8007f72:	605a      	str	r2, [r3, #4]
  for (size_t i = 0; i < scratch_buffer_request_count_; ++i) {
 8007f74:	697b      	ldr	r3, [r7, #20]
 8007f76:	3301      	adds	r3, #1
 8007f78:	617b      	str	r3, [r7, #20]
 8007f7a:	e7e8      	b.n	8007f4e <_ZN6tflite14MicroAllocator28FinishPrepareNodeAllocationsEi+0x22>
    }
  }

  // Ensure that the head is re-adjusted to allow for another at-most
  // kMaxScratchBuffersPerOp scratch buffer requests in the next operator:
  TF_LITE_ENSURE_STATUS(memory_allocator_->SetHeadBufferSize(
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	6858      	ldr	r0, [r3, #4]
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	685b      	ldr	r3, [r3, #4]
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	3308      	adds	r3, #8
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	687a      	ldr	r2, [r7, #4]
 8007f8c:	6952      	ldr	r2, [r2, #20]
 8007f8e:	320c      	adds	r2, #12
 8007f90:	00d1      	lsls	r1, r2, #3
 8007f92:	2204      	movs	r2, #4
 8007f94:	4798      	blx	r3
 8007f96:	4603      	mov	r3, r0
 8007f98:	73fb      	strb	r3, [r7, #15]
 8007f9a:	7bfb      	ldrb	r3, [r7, #15]
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	d001      	beq.n	8007fa4 <_ZN6tflite14MicroAllocator28FinishPrepareNodeAllocationsEi+0x78>
 8007fa0:	7bfb      	ldrb	r3, [r7, #15]
 8007fa2:	e000      	b.n	8007fa6 <_ZN6tflite14MicroAllocator28FinishPrepareNodeAllocationsEi+0x7a>
      sizeof(internal::ScratchBufferRequest) *
          (scratch_buffer_request_count_ + kMaxScratchBuffersPerOp),
      alignof(internal::ScratchBufferRequest)));

  return kTfLiteOk;
 8007fa4:	2300      	movs	r3, #0
}
 8007fa6:	4618      	mov	r0, r3
 8007fa8:	3718      	adds	r7, #24
 8007faa:	46bd      	mov	sp, r7
 8007fac:	bd80      	pop	{r7, pc}
	...

08007fb0 <_ZN6tflite14MicroAllocator28AllocateNodeAndRegistrationsEPKNS_5ModelEPNS_19SubgraphAllocationsE>:
size_t MicroAllocator::used_bytes() const {
  return memory_allocator_->GetUsedBytes();
}

TfLiteStatus MicroAllocator::AllocateNodeAndRegistrations(
    const Model* model, SubgraphAllocations* subgraph_allocations) {
 8007fb0:	b580      	push	{r7, lr}
 8007fb2:	b088      	sub	sp, #32
 8007fb4:	af00      	add	r7, sp, #0
 8007fb6:	60f8      	str	r0, [r7, #12]
 8007fb8:	60b9      	str	r1, [r7, #8]
 8007fba:	607a      	str	r2, [r7, #4]
  TFLITE_DCHECK(subgraph_allocations != nullptr);
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	d101      	bne.n	8007fc6 <_ZN6tflite14MicroAllocator28AllocateNodeAndRegistrationsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x16>
 8007fc2:	f008 fbec 	bl	801079e <abort>

  for (size_t subgraph_idx = 0; subgraph_idx < model->subgraphs()->size();
 8007fc6:	2300      	movs	r3, #0
 8007fc8:	61fb      	str	r3, [r7, #28]
 8007fca:	68b8      	ldr	r0, [r7, #8]
 8007fcc:	f7fe fc92 	bl	80068f4 <_ZNK6tflite5Model9subgraphsEv>
 8007fd0:	4603      	mov	r3, r0
 8007fd2:	4618      	mov	r0, r3
 8007fd4:	f7fe fcfe 	bl	80069d4 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE4sizeEv>
 8007fd8:	4602      	mov	r2, r0
 8007fda:	69fb      	ldr	r3, [r7, #28]
 8007fdc:	4293      	cmp	r3, r2
 8007fde:	bf34      	ite	cc
 8007fe0:	2301      	movcc	r3, #1
 8007fe2:	2300      	movcs	r3, #0
 8007fe4:	b2db      	uxtb	r3, r3
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	d034      	beq.n	8008054 <_ZN6tflite14MicroAllocator28AllocateNodeAndRegistrationsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0xa4>
       subgraph_idx++) {
    const SubGraph* subgraph = model->subgraphs()->Get(subgraph_idx);
 8007fea:	68b8      	ldr	r0, [r7, #8]
 8007fec:	f7fe fc82 	bl	80068f4 <_ZNK6tflite5Model9subgraphsEv>
 8007ff0:	4603      	mov	r3, r0
 8007ff2:	69f9      	ldr	r1, [r7, #28]
 8007ff4:	4618      	mov	r0, r3
 8007ff6:	f7fe fcfb 	bl	80069f0 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE3GetEm>
 8007ffa:	61b8      	str	r0, [r7, #24]
    TFLITE_DCHECK(subgraph != nullptr);
 8007ffc:	69bb      	ldr	r3, [r7, #24]
 8007ffe:	2b00      	cmp	r3, #0
 8008000:	d101      	bne.n	8008006 <_ZN6tflite14MicroAllocator28AllocateNodeAndRegistrationsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x56>
 8008002:	f008 fbcc 	bl	801079e <abort>

    uint32_t operators_size = NumSubgraphOperators(subgraph);
 8008006:	69b8      	ldr	r0, [r7, #24]
 8008008:	f7fe fc82 	bl	8006910 <_ZN6tflite20NumSubgraphOperatorsEPKNS_8SubGraphE>
 800800c:	6178      	str	r0, [r7, #20]

    // Initialize NodeAndRegistrations for the subgraph.
    NodeAndRegistration* output = reinterpret_cast<NodeAndRegistration*>(
        memory_allocator_->AllocateFromTail(
 800800e:	68fb      	ldr	r3, [r7, #12]
 8008010:	6858      	ldr	r0, [r3, #4]
 8008012:	68fb      	ldr	r3, [r7, #12]
 8008014:	685b      	ldr	r3, [r3, #4]
            sizeof(NodeAndRegistration) * operators_size,
            alignof(NodeAndRegistration)));
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	330c      	adds	r3, #12
 800801a:	681b      	ldr	r3, [r3, #0]
            sizeof(NodeAndRegistration) * operators_size,
 800801c:	697a      	ldr	r2, [r7, #20]
 800801e:	212c      	movs	r1, #44	; 0x2c
 8008020:	fb01 f102 	mul.w	r1, r1, r2
        memory_allocator_->AllocateFromTail(
 8008024:	2204      	movs	r2, #4
 8008026:	4798      	blx	r3
 8008028:	6138      	str	r0, [r7, #16]
    if (output == nullptr) {
 800802a:	693b      	ldr	r3, [r7, #16]
 800802c:	2b00      	cmp	r3, #0
 800802e:	d107      	bne.n	8008040 <_ZN6tflite14MicroAllocator28AllocateNodeAndRegistrationsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x90>
      TF_LITE_REPORT_ERROR(
 8008030:	68fb      	ldr	r3, [r7, #12]
 8008032:	68db      	ldr	r3, [r3, #12]
 8008034:	490a      	ldr	r1, [pc, #40]	; (8008060 <_ZN6tflite14MicroAllocator28AllocateNodeAndRegistrationsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0xb0>)
 8008036:	4618      	mov	r0, r3
 8008038:	f7fb fdee 	bl	8003c18 <_ZN6tflite13ErrorReporter6ReportEPKcz>
          error_reporter_,
          "Failed to allocate memory for node_and_registrations.");
      return kTfLiteError;
 800803c:	2301      	movs	r3, #1
 800803e:	e00a      	b.n	8008056 <_ZN6tflite14MicroAllocator28AllocateNodeAndRegistrationsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0xa6>
    }
    subgraph_allocations[subgraph_idx].node_and_registrations = output;
 8008040:	69fb      	ldr	r3, [r7, #28]
 8008042:	00db      	lsls	r3, r3, #3
 8008044:	687a      	ldr	r2, [r7, #4]
 8008046:	4413      	add	r3, r2
 8008048:	693a      	ldr	r2, [r7, #16]
 800804a:	601a      	str	r2, [r3, #0]
  for (size_t subgraph_idx = 0; subgraph_idx < model->subgraphs()->size();
 800804c:	69fb      	ldr	r3, [r7, #28]
 800804e:	3301      	adds	r3, #1
 8008050:	61fb      	str	r3, [r7, #28]
 8008052:	e7ba      	b.n	8007fca <_ZN6tflite14MicroAllocator28AllocateNodeAndRegistrationsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x1a>
  }
  return kTfLiteOk;
 8008054:	2300      	movs	r3, #0
}
 8008056:	4618      	mov	r0, r3
 8008058:	3720      	adds	r7, #32
 800805a:	46bd      	mov	sp, r7
 800805c:	bd80      	pop	{r7, pc}
 800805e:	bf00      	nop
 8008060:	08014ea4 	.word	0x08014ea4

08008064 <_ZN6tflite14MicroAllocator30AllocatePersistentTfLiteTensorEPKNS_5ModelEPKNS_19SubgraphAllocationsEii>:
TfLiteTensor* MicroAllocator::AllocatePersistentTfLiteTensor(
    const Model* model, const SubgraphAllocations* subgraph_allocations,
    int tensor_index, int subgraph_index) {
 8008064:	b590      	push	{r4, r7, lr}
 8008066:	b089      	sub	sp, #36	; 0x24
 8008068:	af02      	add	r7, sp, #8
 800806a:	60f8      	str	r0, [r7, #12]
 800806c:	60b9      	str	r1, [r7, #8]
 800806e:	607a      	str	r2, [r7, #4]
 8008070:	603b      	str	r3, [r7, #0]
  const SubGraph* subgraph = model->subgraphs()->Get(subgraph_index);
 8008072:	68b8      	ldr	r0, [r7, #8]
 8008074:	f7fe fc3e 	bl	80068f4 <_ZNK6tflite5Model9subgraphsEv>
 8008078:	4602      	mov	r2, r0
 800807a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800807c:	4619      	mov	r1, r3
 800807e:	4610      	mov	r0, r2
 8008080:	f7fe fcb6 	bl	80069f0 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE3GetEm>
 8008084:	6178      	str	r0, [r7, #20]
  TFLITE_DCHECK(subgraph != nullptr);
 8008086:	697b      	ldr	r3, [r7, #20]
 8008088:	2b00      	cmp	r3, #0
 800808a:	d101      	bne.n	8008090 <_ZN6tflite14MicroAllocator30AllocatePersistentTfLiteTensorEPKNS_5ModelEPKNS_19SubgraphAllocationsEii+0x2c>
 800808c:	f008 fb87 	bl	801079e <abort>

  // This value is allocated from persistent arena space. It is guaranteed to be
  // around for the lifetime of the application.
  TfLiteTensor* tensor = AllocatePersistentTfLiteTensorInternal();
 8008090:	68fb      	ldr	r3, [r7, #12]
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	3324      	adds	r3, #36	; 0x24
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	68f8      	ldr	r0, [r7, #12]
 800809a:	4798      	blx	r3
 800809c:	6138      	str	r0, [r7, #16]
  // Populate any fields from the flatbuffer, since this TfLiteTensor struct is
  // allocated in the persistent section of the arena, ensure that additional
  // allocations also take place in that section of the arena.
  if (PopulateTfLiteTensorFromFlatbuffer(
          model, tensor, tensor_index, subgraph_index,
          /*allocate_temp=*/false) != kTfLiteOk) {
 800809e:	68fb      	ldr	r3, [r7, #12]
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	3328      	adds	r3, #40	; 0x28
 80080a4:	681c      	ldr	r4, [r3, #0]
  if (PopulateTfLiteTensorFromFlatbuffer(
 80080a6:	2300      	movs	r3, #0
 80080a8:	9301      	str	r3, [sp, #4]
 80080aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080ac:	9300      	str	r3, [sp, #0]
 80080ae:	683b      	ldr	r3, [r7, #0]
 80080b0:	693a      	ldr	r2, [r7, #16]
 80080b2:	68b9      	ldr	r1, [r7, #8]
 80080b4:	68f8      	ldr	r0, [r7, #12]
 80080b6:	47a0      	blx	r4
 80080b8:	4603      	mov	r3, r0
          /*allocate_temp=*/false) != kTfLiteOk) {
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	bf14      	ite	ne
 80080be:	2301      	movne	r3, #1
 80080c0:	2300      	moveq	r3, #0
 80080c2:	b2db      	uxtb	r3, r3
  if (PopulateTfLiteTensorFromFlatbuffer(
 80080c4:	2b00      	cmp	r3, #0
 80080c6:	d007      	beq.n	80080d8 <_ZN6tflite14MicroAllocator30AllocatePersistentTfLiteTensorEPKNS_5ModelEPKNS_19SubgraphAllocationsEii+0x74>
    TF_LITE_REPORT_ERROR(error_reporter_,
 80080c8:	68fb      	ldr	r3, [r7, #12]
 80080ca:	68db      	ldr	r3, [r3, #12]
 80080cc:	4914      	ldr	r1, [pc, #80]	; (8008120 <_ZN6tflite14MicroAllocator30AllocatePersistentTfLiteTensorEPKNS_5ModelEPKNS_19SubgraphAllocationsEii+0xbc>)
 80080ce:	4618      	mov	r0, r3
 80080d0:	f7fb fda2 	bl	8003c18 <_ZN6tflite13ErrorReporter6ReportEPKcz>
                         "Failed to populate a persistent TfLiteTensor struct "
                         "from flatbuffer data!");
    return nullptr;
 80080d4:	2300      	movs	r3, #0
 80080d6:	e01f      	b.n	8008118 <_ZN6tflite14MicroAllocator30AllocatePersistentTfLiteTensorEPKNS_5ModelEPKNS_19SubgraphAllocationsEii+0xb4>
  }

  if (subgraph_allocations != nullptr) {
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	2b00      	cmp	r3, #0
 80080dc:	d01b      	beq.n	8008116 <_ZN6tflite14MicroAllocator30AllocatePersistentTfLiteTensorEPKNS_5ModelEPKNS_19SubgraphAllocationsEii+0xb2>
    // Tensor buffers that are allocated at runtime (e.g. non-weight buffers)
    // and not located in the flatbuffer are stored on the pre-allocated list of
    // TfLiteEvalTensors structs. These structs are the source of truth, simply
    // point the corresponding buffer to the new TfLiteTensor data value.
    tensor->data.data =
        subgraph_allocations[subgraph_index].tensors[tensor_index].data.data;
 80080de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080e0:	00db      	lsls	r3, r3, #3
 80080e2:	687a      	ldr	r2, [r7, #4]
 80080e4:	4413      	add	r3, r2
 80080e6:	6859      	ldr	r1, [r3, #4]
 80080e8:	683a      	ldr	r2, [r7, #0]
 80080ea:	4613      	mov	r3, r2
 80080ec:	005b      	lsls	r3, r3, #1
 80080ee:	4413      	add	r3, r2
 80080f0:	009b      	lsls	r3, r3, #2
 80080f2:	440b      	add	r3, r1
 80080f4:	681a      	ldr	r2, [r3, #0]
    tensor->data.data =
 80080f6:	693b      	ldr	r3, [r7, #16]
 80080f8:	605a      	str	r2, [r3, #4]
    // TfLiteEvalTensor structs must also be the source of truth for the
    // TfLiteTensor dims.
    tensor->dims =
        subgraph_allocations[subgraph_index].tensors[tensor_index].dims;
 80080fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080fc:	00db      	lsls	r3, r3, #3
 80080fe:	687a      	ldr	r2, [r7, #4]
 8008100:	4413      	add	r3, r2
 8008102:	6859      	ldr	r1, [r3, #4]
 8008104:	683a      	ldr	r2, [r7, #0]
 8008106:	4613      	mov	r3, r2
 8008108:	005b      	lsls	r3, r3, #1
 800810a:	4413      	add	r3, r2
 800810c:	009b      	lsls	r3, r3, #2
 800810e:	440b      	add	r3, r1
 8008110:	685a      	ldr	r2, [r3, #4]
    tensor->dims =
 8008112:	693b      	ldr	r3, [r7, #16]
 8008114:	609a      	str	r2, [r3, #8]
  }
  return tensor;
 8008116:	693b      	ldr	r3, [r7, #16]
}
 8008118:	4618      	mov	r0, r3
 800811a:	371c      	adds	r7, #28
 800811c:	46bd      	mov	sp, r7
 800811e:	bd90      	pop	{r4, r7, pc}
 8008120:	08014edc 	.word	0x08014edc

08008124 <_ZN6tflite14MicroAllocator24AllocateTempTfLiteTensorEPKNS_5ModelEPKNS_19SubgraphAllocationsEii>:

TfLiteTensor* MicroAllocator::AllocateTempTfLiteTensor(
    const Model* model, const SubgraphAllocations* subgraph_allocations,
    int tensor_index, int subgraph_index) {
 8008124:	b590      	push	{r4, r7, lr}
 8008126:	b089      	sub	sp, #36	; 0x24
 8008128:	af02      	add	r7, sp, #8
 800812a:	60f8      	str	r0, [r7, #12]
 800812c:	60b9      	str	r1, [r7, #8]
 800812e:	607a      	str	r2, [r7, #4]
 8008130:	603b      	str	r3, [r7, #0]
  const SubGraph* subgraph = model->subgraphs()->Get(subgraph_index);
 8008132:	68b8      	ldr	r0, [r7, #8]
 8008134:	f7fe fbde 	bl	80068f4 <_ZNK6tflite5Model9subgraphsEv>
 8008138:	4602      	mov	r2, r0
 800813a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800813c:	4619      	mov	r1, r3
 800813e:	4610      	mov	r0, r2
 8008140:	f7fe fc56 	bl	80069f0 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE3GetEm>
 8008144:	6178      	str	r0, [r7, #20]
  TFLITE_DCHECK(subgraph != nullptr);
 8008146:	697b      	ldr	r3, [r7, #20]
 8008148:	2b00      	cmp	r3, #0
 800814a:	d101      	bne.n	8008150 <_ZN6tflite14MicroAllocator24AllocateTempTfLiteTensorEPKNS_5ModelEPKNS_19SubgraphAllocationsEii+0x2c>
 800814c:	f008 fb27 	bl	801079e <abort>

  // This value is allocated from temporary arena space. It is guaranteed to be
  // around for at least the scope of the calling function. Since this struct
  // allocation takes place in temp space, no need to own or cleanup.
  TfLiteTensor* tensor =
      reinterpret_cast<TfLiteTensor*>(memory_allocator_->AllocateTemp(
 8008150:	68fb      	ldr	r3, [r7, #12]
 8008152:	6858      	ldr	r0, [r3, #4]
 8008154:	68fb      	ldr	r3, [r7, #12]
 8008156:	685b      	ldr	r3, [r3, #4]
          sizeof(TfLiteTensor), alignof(TfLiteTensor)));
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	3310      	adds	r3, #16
 800815c:	681b      	ldr	r3, [r3, #0]
      reinterpret_cast<TfLiteTensor*>(memory_allocator_->AllocateTemp(
 800815e:	2204      	movs	r2, #4
 8008160:	2140      	movs	r1, #64	; 0x40
 8008162:	4798      	blx	r3
 8008164:	6138      	str	r0, [r7, #16]
  // Populate any fields from the flatbuffer, since this TfLiteTensor struct is
  // allocated in the temp section of the arena, ensure that additional
  // allocations also take place in that section of the arena.
  if (PopulateTfLiteTensorFromFlatbuffer(model, tensor, tensor_index,
                                         subgraph_index,
                                         /*allocate_temp=*/true) != kTfLiteOk) {
 8008166:	68fb      	ldr	r3, [r7, #12]
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	3328      	adds	r3, #40	; 0x28
 800816c:	681c      	ldr	r4, [r3, #0]
  if (PopulateTfLiteTensorFromFlatbuffer(model, tensor, tensor_index,
 800816e:	2301      	movs	r3, #1
 8008170:	9301      	str	r3, [sp, #4]
 8008172:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008174:	9300      	str	r3, [sp, #0]
 8008176:	683b      	ldr	r3, [r7, #0]
 8008178:	693a      	ldr	r2, [r7, #16]
 800817a:	68b9      	ldr	r1, [r7, #8]
 800817c:	68f8      	ldr	r0, [r7, #12]
 800817e:	47a0      	blx	r4
 8008180:	4603      	mov	r3, r0
                                         /*allocate_temp=*/true) != kTfLiteOk) {
 8008182:	2b00      	cmp	r3, #0
 8008184:	bf14      	ite	ne
 8008186:	2301      	movne	r3, #1
 8008188:	2300      	moveq	r3, #0
 800818a:	b2db      	uxtb	r3, r3
  if (PopulateTfLiteTensorFromFlatbuffer(model, tensor, tensor_index,
 800818c:	2b00      	cmp	r3, #0
 800818e:	d007      	beq.n	80081a0 <_ZN6tflite14MicroAllocator24AllocateTempTfLiteTensorEPKNS_5ModelEPKNS_19SubgraphAllocationsEii+0x7c>
    TF_LITE_REPORT_ERROR(
 8008190:	68fb      	ldr	r3, [r7, #12]
 8008192:	68db      	ldr	r3, [r3, #12]
 8008194:	4914      	ldr	r1, [pc, #80]	; (80081e8 <_ZN6tflite14MicroAllocator24AllocateTempTfLiteTensorEPKNS_5ModelEPKNS_19SubgraphAllocationsEii+0xc4>)
 8008196:	4618      	mov	r0, r3
 8008198:	f7fb fd3e 	bl	8003c18 <_ZN6tflite13ErrorReporter6ReportEPKcz>
        error_reporter_,
        "Failed to populate a temp TfLiteTensor struct from flatbuffer data!");
    return nullptr;
 800819c:	2300      	movs	r3, #0
 800819e:	e01f      	b.n	80081e0 <_ZN6tflite14MicroAllocator24AllocateTempTfLiteTensorEPKNS_5ModelEPKNS_19SubgraphAllocationsEii+0xbc>
  }

  if (subgraph_allocations != nullptr) {
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	d01b      	beq.n	80081de <_ZN6tflite14MicroAllocator24AllocateTempTfLiteTensorEPKNS_5ModelEPKNS_19SubgraphAllocationsEii+0xba>
    // Tensor buffers that are allocated at runtime (e.g. non-weight buffers)
    // and not located in the flatbuffer are stored on the pre-allocated list of
    // TfLiteEvalTensors structs. These structs are the source of truth, simply
    // point the corresponding buffer to the new TfLiteTensor data value.
    tensor->data.data =
        subgraph_allocations[subgraph_index].tensors[tensor_index].data.data;
 80081a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081a8:	00db      	lsls	r3, r3, #3
 80081aa:	687a      	ldr	r2, [r7, #4]
 80081ac:	4413      	add	r3, r2
 80081ae:	6859      	ldr	r1, [r3, #4]
 80081b0:	683a      	ldr	r2, [r7, #0]
 80081b2:	4613      	mov	r3, r2
 80081b4:	005b      	lsls	r3, r3, #1
 80081b6:	4413      	add	r3, r2
 80081b8:	009b      	lsls	r3, r3, #2
 80081ba:	440b      	add	r3, r1
 80081bc:	681a      	ldr	r2, [r3, #0]
    tensor->data.data =
 80081be:	693b      	ldr	r3, [r7, #16]
 80081c0:	605a      	str	r2, [r3, #4]
    // TfLiteEvalTensor structs must also be the source of truth for the
    // TfLiteTensor dims.
    tensor->dims =
        subgraph_allocations[subgraph_index].tensors[tensor_index].dims;
 80081c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081c4:	00db      	lsls	r3, r3, #3
 80081c6:	687a      	ldr	r2, [r7, #4]
 80081c8:	4413      	add	r3, r2
 80081ca:	6859      	ldr	r1, [r3, #4]
 80081cc:	683a      	ldr	r2, [r7, #0]
 80081ce:	4613      	mov	r3, r2
 80081d0:	005b      	lsls	r3, r3, #1
 80081d2:	4413      	add	r3, r2
 80081d4:	009b      	lsls	r3, r3, #2
 80081d6:	440b      	add	r3, r1
 80081d8:	685a      	ldr	r2, [r3, #4]
    tensor->dims =
 80081da:	693b      	ldr	r3, [r7, #16]
 80081dc:	609a      	str	r2, [r3, #8]
  }
  return tensor;
 80081de:	693b      	ldr	r3, [r7, #16]
}
 80081e0:	4618      	mov	r0, r3
 80081e2:	371c      	adds	r7, #28
 80081e4:	46bd      	mov	sp, r7
 80081e6:	bd90      	pop	{r4, r7, pc}
 80081e8:	08014f28 	.word	0x08014f28

080081ec <_ZN6tflite14MicroAllocator20ResetTempAllocationsEv>:

void MicroAllocator::ResetTempAllocations() {
 80081ec:	b580      	push	{r7, lr}
 80081ee:	b082      	sub	sp, #8
 80081f0:	af00      	add	r7, sp, #0
 80081f2:	6078      	str	r0, [r7, #4]
  memory_allocator_->ResetTempAllocations();
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	685a      	ldr	r2, [r3, #4]
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	685b      	ldr	r3, [r3, #4]
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	3314      	adds	r3, #20
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	4610      	mov	r0, r2
 8008204:	4798      	blx	r3
}
 8008206:	bf00      	nop
 8008208:	3708      	adds	r7, #8
 800820a:	46bd      	mov	sp, r7
 800820c:	bd80      	pop	{r7, pc}
	...

08008210 <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE>:

TfLiteStatus MicroAllocator::AllocateTfLiteEvalTensors(
    const Model* model, SubgraphAllocations* subgraph_allocations) {
 8008210:	b5b0      	push	{r4, r5, r7, lr}
 8008212:	b08c      	sub	sp, #48	; 0x30
 8008214:	af02      	add	r7, sp, #8
 8008216:	60f8      	str	r0, [r7, #12]
 8008218:	60b9      	str	r1, [r7, #8]
 800821a:	607a      	str	r2, [r7, #4]
  TFLITE_DCHECK(subgraph_allocations != nullptr);
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	2b00      	cmp	r3, #0
 8008220:	d101      	bne.n	8008226 <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x16>
 8008222:	f008 fabc 	bl	801079e <abort>

  for (size_t subgraph_idx = 0; subgraph_idx < model->subgraphs()->size();
 8008226:	2300      	movs	r3, #0
 8008228:	627b      	str	r3, [r7, #36]	; 0x24
 800822a:	68b8      	ldr	r0, [r7, #8]
 800822c:	f7fe fb62 	bl	80068f4 <_ZNK6tflite5Model9subgraphsEv>
 8008230:	4603      	mov	r3, r0
 8008232:	4618      	mov	r0, r3
 8008234:	f7fe fbce 	bl	80069d4 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE4sizeEv>
 8008238:	4602      	mov	r2, r0
 800823a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800823c:	4293      	cmp	r3, r2
 800823e:	bf34      	ite	cc
 8008240:	2301      	movcc	r3, #1
 8008242:	2300      	movcs	r3, #0
 8008244:	b2db      	uxtb	r3, r3
 8008246:	2b00      	cmp	r3, #0
 8008248:	d076      	beq.n	8008338 <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x128>
       subgraph_idx++) {
    const SubGraph* subgraph = model->subgraphs()->Get(subgraph_idx);
 800824a:	68b8      	ldr	r0, [r7, #8]
 800824c:	f7fe fb52 	bl	80068f4 <_ZNK6tflite5Model9subgraphsEv>
 8008250:	4603      	mov	r3, r0
 8008252:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008254:	4618      	mov	r0, r3
 8008256:	f7fe fbcb 	bl	80069f0 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE3GetEm>
 800825a:	61f8      	str	r0, [r7, #28]
    TFLITE_DCHECK(subgraph != nullptr);
 800825c:	69fb      	ldr	r3, [r7, #28]
 800825e:	2b00      	cmp	r3, #0
 8008260:	d101      	bne.n	8008266 <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x56>
 8008262:	f008 fa9c 	bl	801079e <abort>

    size_t alloc_count = subgraph->tensors()->size();
 8008266:	69f8      	ldr	r0, [r7, #28]
 8008268:	f7fe fee7 	bl	800703a <_ZNK6tflite8SubGraph7tensorsEv>
 800826c:	4603      	mov	r3, r0
 800826e:	4618      	mov	r0, r3
 8008270:	f000 fbce 	bl	8008a10 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEE4sizeEv>
 8008274:	61b8      	str	r0, [r7, #24]
    TfLiteEvalTensor* tensors =
        reinterpret_cast<TfLiteEvalTensor*>(memory_allocator_->AllocateFromTail(
 8008276:	68fb      	ldr	r3, [r7, #12]
 8008278:	6858      	ldr	r0, [r3, #4]
 800827a:	68fb      	ldr	r3, [r7, #12]
 800827c:	685b      	ldr	r3, [r3, #4]
            sizeof(TfLiteEvalTensor) * alloc_count, alignof(TfLiteEvalTensor)));
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	330c      	adds	r3, #12
 8008282:	681c      	ldr	r4, [r3, #0]
        reinterpret_cast<TfLiteEvalTensor*>(memory_allocator_->AllocateFromTail(
 8008284:	69ba      	ldr	r2, [r7, #24]
 8008286:	4613      	mov	r3, r2
 8008288:	005b      	lsls	r3, r3, #1
 800828a:	4413      	add	r3, r2
 800828c:	009b      	lsls	r3, r3, #2
 800828e:	2204      	movs	r2, #4
 8008290:	4619      	mov	r1, r3
 8008292:	47a0      	blx	r4
 8008294:	6178      	str	r0, [r7, #20]
    if (tensors == nullptr) {
 8008296:	697b      	ldr	r3, [r7, #20]
 8008298:	2b00      	cmp	r3, #0
 800829a:	d10c      	bne.n	80082b6 <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0xa6>
      TF_LITE_REPORT_ERROR(
 800829c:	68fb      	ldr	r3, [r7, #12]
 800829e:	68d8      	ldr	r0, [r3, #12]
 80082a0:	69ba      	ldr	r2, [r7, #24]
 80082a2:	4613      	mov	r3, r2
 80082a4:	005b      	lsls	r3, r3, #1
 80082a6:	4413      	add	r3, r2
 80082a8:	009b      	lsls	r3, r3, #2
 80082aa:	461a      	mov	r2, r3
 80082ac:	4925      	ldr	r1, [pc, #148]	; (8008344 <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x134>)
 80082ae:	f7fb fcb3 	bl	8003c18 <_ZN6tflite13ErrorReporter6ReportEPKcz>
          error_reporter_,
          "Failed to allocate memory for context->eval_tensors, "
          "%d bytes required",
          sizeof(TfLiteEvalTensor) * alloc_count);
      return kTfLiteError;
 80082b2:	2301      	movs	r3, #1
 80082b4:	e041      	b.n	800833a <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x12a>
    }

    for (size_t i = 0; i < alloc_count; ++i) {
 80082b6:	2300      	movs	r3, #0
 80082b8:	623b      	str	r3, [r7, #32]
 80082ba:	6a3a      	ldr	r2, [r7, #32]
 80082bc:	69bb      	ldr	r3, [r7, #24]
 80082be:	429a      	cmp	r2, r3
 80082c0:	d230      	bcs.n	8008324 <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x114>
      TfLiteStatus status = internal::InitializeTfLiteEvalTensorFromFlatbuffer(
 80082c2:	68fb      	ldr	r3, [r7, #12]
 80082c4:	685c      	ldr	r4, [r3, #4]
          memory_allocator_, *subgraph->tensors()->Get(i), model->buffers(),
 80082c6:	69f8      	ldr	r0, [r7, #28]
 80082c8:	f7fe feb7 	bl	800703a <_ZNK6tflite8SubGraph7tensorsEv>
 80082cc:	4603      	mov	r3, r0
 80082ce:	6a39      	ldr	r1, [r7, #32]
 80082d0:	4618      	mov	r0, r3
 80082d2:	f000 fbab 	bl	8008a2c <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEE3GetEm>
 80082d6:	4605      	mov	r5, r0
      TfLiteStatus status = internal::InitializeTfLiteEvalTensorFromFlatbuffer(
 80082d8:	68b8      	ldr	r0, [r7, #8]
 80082da:	f7fe ff03 	bl	80070e4 <_ZNK6tflite5Model7buffersEv>
 80082de:	68fb      	ldr	r3, [r7, #12]
 80082e0:	68d9      	ldr	r1, [r3, #12]
          error_reporter_, &tensors[i]);
 80082e2:	6a3a      	ldr	r2, [r7, #32]
 80082e4:	4613      	mov	r3, r2
 80082e6:	005b      	lsls	r3, r3, #1
 80082e8:	4413      	add	r3, r2
 80082ea:	009b      	lsls	r3, r3, #2
 80082ec:	461a      	mov	r2, r3
      TfLiteStatus status = internal::InitializeTfLiteEvalTensorFromFlatbuffer(
 80082ee:	697b      	ldr	r3, [r7, #20]
 80082f0:	4413      	add	r3, r2
 80082f2:	9300      	str	r3, [sp, #0]
 80082f4:	460b      	mov	r3, r1
 80082f6:	4602      	mov	r2, r0
 80082f8:	4629      	mov	r1, r5
 80082fa:	4620      	mov	r0, r4
 80082fc:	f7ff fbd4 	bl	8007aa8 <_ZN6tflite8internal40InitializeTfLiteEvalTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP16TfLiteEvalTensor>
 8008300:	4603      	mov	r3, r0
 8008302:	74fb      	strb	r3, [r7, #19]
      if (status != kTfLiteOk) {
 8008304:	7cfb      	ldrb	r3, [r7, #19]
 8008306:	2b00      	cmp	r3, #0
 8008308:	d008      	beq.n	800831c <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x10c>
        TF_LITE_REPORT_ERROR(error_reporter_, "Failed to initialize tensor %d",
 800830a:	68fb      	ldr	r3, [r7, #12]
 800830c:	68db      	ldr	r3, [r3, #12]
 800830e:	6a3a      	ldr	r2, [r7, #32]
 8008310:	490d      	ldr	r1, [pc, #52]	; (8008348 <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x138>)
 8008312:	4618      	mov	r0, r3
 8008314:	f7fb fc80 	bl	8003c18 <_ZN6tflite13ErrorReporter6ReportEPKcz>
                             i);
        return kTfLiteError;
 8008318:	2301      	movs	r3, #1
 800831a:	e00e      	b.n	800833a <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x12a>
    for (size_t i = 0; i < alloc_count; ++i) {
 800831c:	6a3b      	ldr	r3, [r7, #32]
 800831e:	3301      	adds	r3, #1
 8008320:	623b      	str	r3, [r7, #32]
 8008322:	e7ca      	b.n	80082ba <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0xaa>
      }
    }
    subgraph_allocations[subgraph_idx].tensors = tensors;
 8008324:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008326:	00db      	lsls	r3, r3, #3
 8008328:	687a      	ldr	r2, [r7, #4]
 800832a:	4413      	add	r3, r2
 800832c:	697a      	ldr	r2, [r7, #20]
 800832e:	605a      	str	r2, [r3, #4]
  for (size_t subgraph_idx = 0; subgraph_idx < model->subgraphs()->size();
 8008330:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008332:	3301      	adds	r3, #1
 8008334:	627b      	str	r3, [r7, #36]	; 0x24
 8008336:	e778      	b.n	800822a <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x1a>
  }
  return kTfLiteOk;
 8008338:	2300      	movs	r3, #0
}
 800833a:	4618      	mov	r0, r3
 800833c:	3728      	adds	r7, #40	; 0x28
 800833e:	46bd      	mov	sp, r7
 8008340:	bdb0      	pop	{r4, r5, r7, pc}
 8008342:	bf00      	nop
 8008344:	08014f6c 	.word	0x08014f6c
 8008348:	08014fb4 	.word	0x08014fb4

0800834c <_ZN6tflite14MicroAllocator17AllocateVariablesEPKNS_8SubGraphEP16TfLiteEvalTensor>:
TfLiteStatus MicroAllocator::AllocateVariables(const SubGraph* subgraph,
                                               TfLiteEvalTensor* eval_tensors) {
 800834c:	b5b0      	push	{r4, r5, r7, lr}
 800834e:	b088      	sub	sp, #32
 8008350:	af00      	add	r7, sp, #0
 8008352:	60f8      	str	r0, [r7, #12]
 8008354:	60b9      	str	r1, [r7, #8]
 8008356:	607a      	str	r2, [r7, #4]
  for (size_t i = 0; i < subgraph->tensors()->size(); ++i) {
 8008358:	2300      	movs	r3, #0
 800835a:	61fb      	str	r3, [r7, #28]
 800835c:	68b8      	ldr	r0, [r7, #8]
 800835e:	f7fe fe6c 	bl	800703a <_ZNK6tflite8SubGraph7tensorsEv>
 8008362:	4603      	mov	r3, r0
 8008364:	4618      	mov	r0, r3
 8008366:	f000 fb53 	bl	8008a10 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEE4sizeEv>
 800836a:	4602      	mov	r2, r0
 800836c:	69fb      	ldr	r3, [r7, #28]
 800836e:	4293      	cmp	r3, r2
 8008370:	bf34      	ite	cc
 8008372:	2301      	movcc	r3, #1
 8008374:	2300      	movcs	r3, #0
 8008376:	b2db      	uxtb	r3, r3
 8008378:	2b00      	cmp	r3, #0
 800837a:	d04f      	beq.n	800841c <_ZN6tflite14MicroAllocator17AllocateVariablesEPKNS_8SubGraphEP16TfLiteEvalTensor+0xd0>
    auto* tensor = subgraph->tensors()->Get(i);
 800837c:	68b8      	ldr	r0, [r7, #8]
 800837e:	f7fe fe5c 	bl	800703a <_ZNK6tflite8SubGraph7tensorsEv>
 8008382:	4603      	mov	r3, r0
 8008384:	69f9      	ldr	r1, [r7, #28]
 8008386:	4618      	mov	r0, r3
 8008388:	f000 fb50 	bl	8008a2c <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEE3GetEm>
 800838c:	61b8      	str	r0, [r7, #24]
    if (tensor->is_variable()) {
 800838e:	69b8      	ldr	r0, [r7, #24]
 8008390:	f7fe fe23 	bl	8006fda <_ZNK6tflite6Tensor11is_variableEv>
 8008394:	4603      	mov	r3, r0
 8008396:	2b00      	cmp	r3, #0
 8008398:	d03c      	beq.n	8008414 <_ZN6tflite14MicroAllocator17AllocateVariablesEPKNS_8SubGraphEP16TfLiteEvalTensor+0xc8>
      size_t buffer_size;
      TF_LITE_ENSURE_STATUS(
 800839a:	69fa      	ldr	r2, [r7, #28]
 800839c:	4613      	mov	r3, r2
 800839e:	005b      	lsls	r3, r3, #1
 80083a0:	4413      	add	r3, r2
 80083a2:	009b      	lsls	r3, r3, #2
 80083a4:	461a      	mov	r2, r3
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	4413      	add	r3, r2
 80083aa:	f107 0210 	add.w	r2, r7, #16
 80083ae:	4611      	mov	r1, r2
 80083b0:	4618      	mov	r0, r3
 80083b2:	f7fe fd7e 	bl	8006eb2 <_ZN6tflite26TfLiteEvalTensorByteLengthEPK16TfLiteEvalTensorPj>
 80083b6:	4603      	mov	r3, r0
 80083b8:	75fb      	strb	r3, [r7, #23]
 80083ba:	7dfb      	ldrb	r3, [r7, #23]
 80083bc:	2b00      	cmp	r3, #0
 80083be:	d001      	beq.n	80083c4 <_ZN6tflite14MicroAllocator17AllocateVariablesEPKNS_8SubGraphEP16TfLiteEvalTensor+0x78>
 80083c0:	7dfb      	ldrb	r3, [r7, #23]
 80083c2:	e02c      	b.n	800841e <_ZN6tflite14MicroAllocator17AllocateVariablesEPKNS_8SubGraphEP16TfLiteEvalTensor+0xd2>
          TfLiteEvalTensorByteLength(&eval_tensors[i], &buffer_size));

      eval_tensors[i].data.data =
          memory_allocator_->AllocateFromTail(buffer_size, kBufferAlignment);
 80083c4:	68fb      	ldr	r3, [r7, #12]
 80083c6:	6858      	ldr	r0, [r3, #4]
 80083c8:	68fb      	ldr	r3, [r7, #12]
 80083ca:	685b      	ldr	r3, [r3, #4]
 80083cc:	681b      	ldr	r3, [r3, #0]
 80083ce:	330c      	adds	r3, #12
 80083d0:	681d      	ldr	r5, [r3, #0]
 80083d2:	6939      	ldr	r1, [r7, #16]
      eval_tensors[i].data.data =
 80083d4:	69fa      	ldr	r2, [r7, #28]
 80083d6:	4613      	mov	r3, r2
 80083d8:	005b      	lsls	r3, r3, #1
 80083da:	4413      	add	r3, r2
 80083dc:	009b      	lsls	r3, r3, #2
 80083de:	461a      	mov	r2, r3
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	189c      	adds	r4, r3, r2
          memory_allocator_->AllocateFromTail(buffer_size, kBufferAlignment);
 80083e4:	2210      	movs	r2, #16
 80083e6:	47a8      	blx	r5
 80083e8:	4603      	mov	r3, r0
      eval_tensors[i].data.data =
 80083ea:	6023      	str	r3, [r4, #0]

      if (eval_tensors[i].data.data == nullptr) {
 80083ec:	69fa      	ldr	r2, [r7, #28]
 80083ee:	4613      	mov	r3, r2
 80083f0:	005b      	lsls	r3, r3, #1
 80083f2:	4413      	add	r3, r2
 80083f4:	009b      	lsls	r3, r3, #2
 80083f6:	461a      	mov	r2, r3
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	4413      	add	r3, r2
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	2b00      	cmp	r3, #0
 8008400:	d108      	bne.n	8008414 <_ZN6tflite14MicroAllocator17AllocateVariablesEPKNS_8SubGraphEP16TfLiteEvalTensor+0xc8>
        TF_LITE_REPORT_ERROR(error_reporter_,
 8008402:	68fb      	ldr	r3, [r7, #12]
 8008404:	68db      	ldr	r3, [r3, #12]
 8008406:	693a      	ldr	r2, [r7, #16]
 8008408:	4907      	ldr	r1, [pc, #28]	; (8008428 <_ZN6tflite14MicroAllocator17AllocateVariablesEPKNS_8SubGraphEP16TfLiteEvalTensor+0xdc>)
 800840a:	4618      	mov	r0, r3
 800840c:	f7fb fc04 	bl	8003c18 <_ZN6tflite13ErrorReporter6ReportEPKcz>
                             "Failed to allocate variable tensor of size %d",
                             buffer_size);
        return kTfLiteError;
 8008410:	2301      	movs	r3, #1
 8008412:	e004      	b.n	800841e <_ZN6tflite14MicroAllocator17AllocateVariablesEPKNS_8SubGraphEP16TfLiteEvalTensor+0xd2>
  for (size_t i = 0; i < subgraph->tensors()->size(); ++i) {
 8008414:	69fb      	ldr	r3, [r7, #28]
 8008416:	3301      	adds	r3, #1
 8008418:	61fb      	str	r3, [r7, #28]
 800841a:	e79f      	b.n	800835c <_ZN6tflite14MicroAllocator17AllocateVariablesEPKNS_8SubGraphEP16TfLiteEvalTensor+0x10>
      }
    }
  }
  return kTfLiteOk;
 800841c:	2300      	movs	r3, #0
}
 800841e:	4618      	mov	r0, r3
 8008420:	3720      	adds	r7, #32
 8008422:	46bd      	mov	sp, r7
 8008424:	bdb0      	pop	{r4, r5, r7, pc}
 8008426:	bf00      	nop
 8008428:	08014fd4 	.word	0x08014fd4

0800842c <_ZN6tflite14MicroAllocator38AllocatePersistentTfLiteTensorInternalEv>:

TfLiteTensor* MicroAllocator::AllocatePersistentTfLiteTensorInternal() {
 800842c:	b580      	push	{r7, lr}
 800842e:	b082      	sub	sp, #8
 8008430:	af00      	add	r7, sp, #0
 8008432:	6078      	str	r0, [r7, #4]
  return reinterpret_cast<TfLiteTensor*>(memory_allocator_->AllocateFromTail(
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	6858      	ldr	r0, [r3, #4]
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	685b      	ldr	r3, [r3, #4]
      sizeof(TfLiteTensor), alignof(TfLiteTensor)));
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	330c      	adds	r3, #12
 8008440:	681b      	ldr	r3, [r3, #0]
  return reinterpret_cast<TfLiteTensor*>(memory_allocator_->AllocateFromTail(
 8008442:	2204      	movs	r2, #4
 8008444:	2140      	movs	r1, #64	; 0x40
 8008446:	4798      	blx	r3
 8008448:	4603      	mov	r3, r0
}
 800844a:	4618      	mov	r0, r3
 800844c:	3708      	adds	r7, #8
 800844e:	46bd      	mov	sp, r7
 8008450:	bd80      	pop	{r7, pc}

08008452 <_ZN6tflite14MicroAllocator34PopulateTfLiteTensorFromFlatbufferEPKNS_5ModelEP12TfLiteTensoriib>:

TfLiteStatus MicroAllocator::PopulateTfLiteTensorFromFlatbuffer(
    const Model* model, TfLiteTensor* tensor, int tensor_index,
    int subgraph_idx, bool allocate_temp) {
 8008452:	b5b0      	push	{r4, r5, r7, lr}
 8008454:	b086      	sub	sp, #24
 8008456:	af02      	add	r7, sp, #8
 8008458:	60f8      	str	r0, [r7, #12]
 800845a:	60b9      	str	r1, [r7, #8]
 800845c:	607a      	str	r2, [r7, #4]
 800845e:	603b      	str	r3, [r7, #0]
  // TODO(b/162311891): This method serves as a stub to ensure quantized
  // allocations in the tail can be recorded. Once the interpreter has APIs for
  // accessing buffers on TfLiteEvalTensor this method can be dropped.
  return internal::InitializeTfLiteTensorFromFlatbuffer(
 8008460:	68fb      	ldr	r3, [r7, #12]
 8008462:	685c      	ldr	r4, [r3, #4]
      memory_allocator_, allocate_temp,
      *model->subgraphs()->Get(subgraph_idx)->tensors()->Get(tensor_index),
 8008464:	68b8      	ldr	r0, [r7, #8]
 8008466:	f7fe fa45 	bl	80068f4 <_ZNK6tflite5Model9subgraphsEv>
 800846a:	4602      	mov	r2, r0
 800846c:	6a3b      	ldr	r3, [r7, #32]
 800846e:	4619      	mov	r1, r3
 8008470:	4610      	mov	r0, r2
 8008472:	f7fe fabd 	bl	80069f0 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE3GetEm>
 8008476:	4603      	mov	r3, r0
 8008478:	4618      	mov	r0, r3
 800847a:	f7fe fdde 	bl	800703a <_ZNK6tflite8SubGraph7tensorsEv>
 800847e:	4602      	mov	r2, r0
 8008480:	683b      	ldr	r3, [r7, #0]
 8008482:	4619      	mov	r1, r3
 8008484:	4610      	mov	r0, r2
 8008486:	f000 fad1 	bl	8008a2c <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEE3GetEm>
 800848a:	4605      	mov	r5, r0
  return internal::InitializeTfLiteTensorFromFlatbuffer(
 800848c:	68b8      	ldr	r0, [r7, #8]
 800848e:	f7fe fe29 	bl	80070e4 <_ZNK6tflite5Model7buffersEv>
 8008492:	68fb      	ldr	r3, [r7, #12]
 8008494:	68db      	ldr	r3, [r3, #12]
 8008496:	f897 1024 	ldrb.w	r1, [r7, #36]	; 0x24
 800849a:	687a      	ldr	r2, [r7, #4]
 800849c:	9201      	str	r2, [sp, #4]
 800849e:	9300      	str	r3, [sp, #0]
 80084a0:	4603      	mov	r3, r0
 80084a2:	462a      	mov	r2, r5
 80084a4:	4620      	mov	r0, r4
 80084a6:	f7ff f9a5 	bl	80077f4 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor>
 80084aa:	4603      	mov	r3, r0
      model->buffers(), error_reporter_, tensor);
}
 80084ac:	4618      	mov	r0, r3
 80084ae:	3710      	adds	r7, #16
 80084b0:	46bd      	mov	sp, r7
 80084b2:	bdb0      	pop	{r4, r5, r7, pc}

080084b4 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi>:
  return error_reporter_;
}

TfLiteStatus MicroAllocator::CommitStaticMemoryPlan(
    const Model* model, TfLiteEvalTensor* eval_tensors,
    ScratchBufferHandle* scratch_buffer_handles, int subgraph_idx) {
 80084b4:	b590      	push	{r4, r7, lr}
 80084b6:	b0a5      	sub	sp, #148	; 0x94
 80084b8:	af02      	add	r7, sp, #8
 80084ba:	60f8      	str	r0, [r7, #12]
 80084bc:	60b9      	str	r1, [r7, #8]
 80084be:	607a      	str	r2, [r7, #4]
 80084c0:	603b      	str	r3, [r7, #0]
  size_t head_usage = 0;
 80084c2:	2300      	movs	r3, #0
 80084c4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  //
  // Note that AllocationInfo is only needed for creating the plan. It will be
  // allocated from the temp section and cleaned up at the bottom of this
  // function.

  const SubGraph* subgraph = model->subgraphs()->Get(subgraph_idx);
 80084c8:	68b8      	ldr	r0, [r7, #8]
 80084ca:	f7fe fa13 	bl	80068f4 <_ZNK6tflite5Model9subgraphsEv>
 80084ce:	4602      	mov	r2, r0
 80084d0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80084d4:	4619      	mov	r1, r3
 80084d6:	4610      	mov	r0, r2
 80084d8:	f7fe fa8a 	bl	80069f0 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE3GetEm>
 80084dc:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
  size_t allocation_info_count =
      subgraph->tensors()->size() + scratch_buffer_request_count_;
 80084e0:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 80084e4:	f7fe fda9 	bl	800703a <_ZNK6tflite8SubGraph7tensorsEv>
 80084e8:	4603      	mov	r3, r0
 80084ea:	4618      	mov	r0, r3
 80084ec:	f000 fa90 	bl	8008a10 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEE4sizeEv>
 80084f0:	4602      	mov	r2, r0
 80084f2:	68fb      	ldr	r3, [r7, #12]
 80084f4:	695b      	ldr	r3, [r3, #20]
 80084f6:	4413      	add	r3, r2
 80084f8:	67fb      	str	r3, [r7, #124]	; 0x7c
  size_t bytes = sizeof(AllocationInfo) * allocation_info_count;
 80084fa:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80084fc:	4613      	mov	r3, r2
 80084fe:	005b      	lsls	r3, r3, #1
 8008500:	4413      	add	r3, r2
 8008502:	00db      	lsls	r3, r3, #3
 8008504:	67bb      	str	r3, [r7, #120]	; 0x78

  // Allocate an array of AllocationInfo structs from the temp section. This
  // struct will be used by AllocationInfoBuilder to find buffer usage.
  AllocationInfo* allocation_info = reinterpret_cast<AllocationInfo*>(
      memory_allocator_->AllocateTemp(bytes, alignof(AllocationInfo)));
 8008506:	68fb      	ldr	r3, [r7, #12]
 8008508:	6858      	ldr	r0, [r3, #4]
 800850a:	68fb      	ldr	r3, [r7, #12]
 800850c:	685b      	ldr	r3, [r3, #4]
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	3310      	adds	r3, #16
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	2204      	movs	r2, #4
 8008516:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8008518:	4798      	blx	r3
 800851a:	6778      	str	r0, [r7, #116]	; 0x74
  if (allocation_info == nullptr) {
 800851c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800851e:	2b00      	cmp	r3, #0
 8008520:	d108      	bne.n	8008534 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x80>
    TF_LITE_REPORT_ERROR(
 8008522:	68fb      	ldr	r3, [r7, #12]
 8008524:	68db      	ldr	r3, [r3, #12]
 8008526:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8008528:	4985      	ldr	r1, [pc, #532]	; (8008740 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x28c>)
 800852a:	4618      	mov	r0, r3
 800852c:	f7fb fb74 	bl	8003c18 <_ZN6tflite13ErrorReporter6ReportEPKcz>
        error_reporter_,
        "Failed to allocate memory for allocation_info, %d bytes required",
        bytes);
    return kTfLiteError;
 8008530:	2401      	movs	r4, #1
 8008532:	e0ff      	b.n	8008734 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x280>
  }

  // Use the AllocationInfoBuilder class to help determine where buffers are
  // used in the subgraph.
  AllocationInfoBuilder builder(allocation_info, subgraph->tensors()->size(),
 8008534:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 8008538:	f7fe fd7f 	bl	800703a <_ZNK6tflite8SubGraph7tensorsEv>
 800853c:	4603      	mov	r3, r0
 800853e:	4618      	mov	r0, r3
 8008540:	f000 fa66 	bl	8008a10 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEE4sizeEv>
 8008544:	4601      	mov	r1, r0
                                scratch_buffer_request_count_, error_reporter_);
 8008546:	68fb      	ldr	r3, [r7, #12]
 8008548:	695a      	ldr	r2, [r3, #20]
 800854a:	68fb      	ldr	r3, [r7, #12]
 800854c:	68db      	ldr	r3, [r3, #12]
 800854e:	f107 0044 	add.w	r0, r7, #68	; 0x44
 8008552:	9300      	str	r3, [sp, #0]
 8008554:	4613      	mov	r3, r2
 8008556:	460a      	mov	r2, r1
 8008558:	6f79      	ldr	r1, [r7, #116]	; 0x74
 800855a:	f7fe fe45 	bl	80071e8 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilderC1EPNS0_14AllocationInfoEjjPNS_13ErrorReporterE>

  const int32_t* offline_planner_offsets = nullptr;
 800855e:	2300      	movs	r3, #0
 8008560:	643b      	str	r3, [r7, #64]	; 0x40
  TF_LITE_ENSURE_STATUS(
 8008562:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8008566:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800856a:	68b9      	ldr	r1, [r7, #8]
 800856c:	4618      	mov	r0, r3
 800856e:	f7fe ffaf 	bl	80074d0 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder24GetOfflinePlannedOffsetsEPKNS_5ModelEPPKl>
 8008572:	4603      	mov	r3, r0
 8008574:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
 8008578:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 800857c:	2b00      	cmp	r3, #0
 800857e:	d002      	beq.n	8008586 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0xd2>
 8008580:	f897 4073 	ldrb.w	r4, [r7, #115]	; 0x73
 8008584:	e0d6      	b.n	8008734 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x280>
      builder.GetOfflinePlannedOffsets(model, &offline_planner_offsets));
  TF_LITE_ENSURE_STATUS(
 8008586:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008588:	f107 0044 	add.w	r0, r7, #68	; 0x44
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 8008592:	f7fe fe43 	bl	800721c <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP16TfLiteEvalTensor>
 8008596:	4603      	mov	r3, r0
 8008598:	f887 3072 	strb.w	r3, [r7, #114]	; 0x72
 800859c:	f897 3072 	ldrb.w	r3, [r7, #114]	; 0x72
 80085a0:	2b00      	cmp	r3, #0
 80085a2:	d002      	beq.n	80085aa <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0xf6>
 80085a4:	f897 4072 	ldrb.w	r4, [r7, #114]	; 0x72
 80085a8:	e0c4      	b.n	8008734 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x280>
      builder.AddTensors(subgraph, offline_planner_offsets, eval_tensors));

  internal::ScratchBufferRequest* scratch_buffer_requests =
      GetScratchBufferRequests();
 80085aa:	68f8      	ldr	r0, [r7, #12]
 80085ac:	f000 f913 	bl	80087d6 <_ZN6tflite14MicroAllocator24GetScratchBufferRequestsEv>
 80085b0:	66f8      	str	r0, [r7, #108]	; 0x6c

  TF_LITE_ENSURE_STATUS(builder.AddScratchBuffers(scratch_buffer_requests,
 80085b2:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80085b6:	683a      	ldr	r2, [r7, #0]
 80085b8:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 80085ba:	4618      	mov	r0, r3
 80085bc:	f7ff f804 	bl	80075c8 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder17AddScratchBuffersEPNS_8internal20ScratchBufferRequestEPNS_19ScratchBufferHandleE>
 80085c0:	4603      	mov	r3, r0
 80085c2:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
 80085c6:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 80085ca:	2b00      	cmp	r3, #0
 80085cc:	d002      	beq.n	80085d4 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x120>
 80085ce:	f897 406b 	ldrb.w	r4, [r7, #107]	; 0x6b
 80085d2:	e0af      	b.n	8008734 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x280>
                                                  scratch_buffer_handles));

  // Remaining arena size that memory planner can use for calculating offsets.
  size_t remaining_arena_size =
      memory_allocator_->GetAvailableMemory(kBufferAlignment);
 80085d4:	68fb      	ldr	r3, [r7, #12]
 80085d6:	685b      	ldr	r3, [r3, #4]
 80085d8:	2110      	movs	r1, #16
 80085da:	4618      	mov	r0, r3
 80085dc:	f002 fc06 	bl	800adec <_ZNK6tflite21SimpleMemoryAllocator18GetAvailableMemoryEj>
 80085e0:	6678      	str	r0, [r7, #100]	; 0x64
  uint8_t* planner_arena =
      memory_allocator_->AllocateTemp(remaining_arena_size, kBufferAlignment);
 80085e2:	68fb      	ldr	r3, [r7, #12]
 80085e4:	6858      	ldr	r0, [r3, #4]
 80085e6:	68fb      	ldr	r3, [r7, #12]
 80085e8:	685b      	ldr	r3, [r3, #4]
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	3310      	adds	r3, #16
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	2210      	movs	r2, #16
 80085f2:	6e79      	ldr	r1, [r7, #100]	; 0x64
 80085f4:	4798      	blx	r3
 80085f6:	6638      	str	r0, [r7, #96]	; 0x60
  TF_LITE_ENSURE(error_reporter_, planner_arena != nullptr);
 80085f8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80085fa:	2b00      	cmp	r3, #0
 80085fc:	d10e      	bne.n	800861c <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x168>
 80085fe:	68fb      	ldr	r3, [r7, #12]
 8008600:	68d8      	ldr	r0, [r3, #12]
 8008602:	68fb      	ldr	r3, [r7, #12]
 8008604:	68d9      	ldr	r1, [r3, #12]
 8008606:	4b4f      	ldr	r3, [pc, #316]	; (8008744 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x290>)
 8008608:	9301      	str	r3, [sp, #4]
 800860a:	f240 33d2 	movw	r3, #978	; 0x3d2
 800860e:	9300      	str	r3, [sp, #0]
 8008610:	4b4d      	ldr	r3, [pc, #308]	; (8008748 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x294>)
 8008612:	4a4e      	ldr	r2, [pc, #312]	; (800874c <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x298>)
 8008614:	f7fb fb19 	bl	8003c4a <_ZN6tflite13ErrorReporter11ReportErrorEPvPKcz>
 8008618:	2401      	movs	r4, #1
 800861a:	e08b      	b.n	8008734 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x280>
  GreedyMemoryPlanner planner(planner_arena, remaining_arena_size);
 800861c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800861e:	f107 0314 	add.w	r3, r7, #20
 8008622:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8008624:	4618      	mov	r0, r3
 8008626:	f007 faa7 	bl	800fb78 <_ZN6tflite19GreedyMemoryPlannerC1EPhi>
  TF_LITE_ENSURE_STATUS(CreatePlan(error_reporter_, &planner, allocation_info,
 800862a:	68fb      	ldr	r3, [r7, #12]
 800862c:	68d8      	ldr	r0, [r3, #12]
 800862e:	f107 0114 	add.w	r1, r7, #20
 8008632:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008634:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8008636:	f7ff f812 	bl	800765e <_ZN6tflite12_GLOBAL__N_110CreatePlanEPNS_13ErrorReporterEPNS_19GreedyMemoryPlannerEPKNS0_14AllocationInfoEj>
 800863a:	4603      	mov	r3, r0
 800863c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8008640:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008644:	2b00      	cmp	r3, #0
 8008646:	d002      	beq.n	800864e <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x19a>
 8008648:	f897 405f 	ldrb.w	r4, [r7, #95]	; 0x5f
 800864c:	e06d      	b.n	800872a <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x276>
                                   allocation_info_count));

  // Reset all temp allocations used above:
  memory_allocator_->ResetTempAllocations();
 800864e:	68fb      	ldr	r3, [r7, #12]
 8008650:	685a      	ldr	r2, [r3, #4]
 8008652:	68fb      	ldr	r3, [r7, #12]
 8008654:	685b      	ldr	r3, [r3, #4]
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	3314      	adds	r3, #20
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	4610      	mov	r0, r2
 800865e:	4798      	blx	r3

  size_t actual_available_arena_size =
      memory_allocator_->GetAvailableMemory(kBufferAlignment);
 8008660:	68fb      	ldr	r3, [r7, #12]
 8008662:	685b      	ldr	r3, [r3, #4]
 8008664:	2110      	movs	r1, #16
 8008666:	4618      	mov	r0, r3
 8008668:	f002 fbc0 	bl	800adec <_ZNK6tflite21SimpleMemoryAllocator18GetAvailableMemoryEj>
 800866c:	65b8      	str	r0, [r7, #88]	; 0x58

  // Make sure we have enough arena size.
  if (planner.GetMaximumMemorySize() > actual_available_arena_size) {
 800866e:	f107 0314 	add.w	r3, r7, #20
 8008672:	4618      	mov	r0, r3
 8008674:	f007 fd39 	bl	80100ea <_ZN6tflite19GreedyMemoryPlanner20GetMaximumMemorySizeEv>
 8008678:	4602      	mov	r2, r0
 800867a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800867c:	4293      	cmp	r3, r2
 800867e:	bf34      	ite	cc
 8008680:	2301      	movcc	r3, #1
 8008682:	2300      	movcs	r3, #0
 8008684:	b2db      	uxtb	r3, r3
 8008686:	2b00      	cmp	r3, #0
 8008688:	d00e      	beq.n	80086a8 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x1f4>
    TF_LITE_REPORT_ERROR(
 800868a:	68fb      	ldr	r3, [r7, #12]
 800868c:	68dc      	ldr	r4, [r3, #12]
 800868e:	f107 0314 	add.w	r3, r7, #20
 8008692:	4618      	mov	r0, r3
 8008694:	f007 fd29 	bl	80100ea <_ZN6tflite19GreedyMemoryPlanner20GetMaximumMemorySizeEv>
 8008698:	4602      	mov	r2, r0
 800869a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800869c:	492c      	ldr	r1, [pc, #176]	; (8008750 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x29c>)
 800869e:	4620      	mov	r0, r4
 80086a0:	f7fb faba 	bl	8003c18 <_ZN6tflite13ErrorReporter6ReportEPKcz>
        error_reporter_,
        "Arena size is too small for all buffers. Needed %u but only "
        "%u was available.",
        planner.GetMaximumMemorySize(), actual_available_arena_size);
    return kTfLiteError;
 80086a4:	2401      	movs	r4, #1
 80086a6:	e040      	b.n	800872a <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x276>
  }
  // Commit the plan.
  TF_LITE_ENSURE_STATUS(CommitPlan(error_reporter_, &planner,
 80086a8:	68fb      	ldr	r3, [r7, #12]
 80086aa:	68dc      	ldr	r4, [r3, #12]
 80086ac:	68fb      	ldr	r3, [r7, #12]
 80086ae:	685b      	ldr	r3, [r3, #4]
 80086b0:	4618      	mov	r0, r3
 80086b2:	f002 fb8f 	bl	800add4 <_ZNK6tflite21SimpleMemoryAllocator13GetHeadBufferEv>
 80086b6:	4602      	mov	r2, r0
 80086b8:	f107 0114 	add.w	r1, r7, #20
 80086bc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80086be:	9300      	str	r3, [sp, #0]
 80086c0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80086c2:	4620      	mov	r0, r4
 80086c4:	f7ff f825 	bl	8007712 <_ZN6tflite12_GLOBAL__N_110CommitPlanEPNS_13ErrorReporterEPNS_13MemoryPlannerEPhPKNS0_14AllocationInfoEj>
 80086c8:	4603      	mov	r3, r0
 80086ca:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 80086ce:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80086d2:	2b00      	cmp	r3, #0
 80086d4:	d002      	beq.n	80086dc <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x228>
 80086d6:	f897 4057 	ldrb.w	r4, [r7, #87]	; 0x57
 80086da:	e026      	b.n	800872a <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x276>
                                   memory_allocator_->GetHeadBuffer(),
                                   allocation_info, allocation_info_count));
#ifdef TF_LITE_SHOW_MEMORY_USE
  planner.PrintMemoryPlan();
#endif
  head_usage = planner.GetMaximumMemorySize();
 80086dc:	f107 0314 	add.w	r3, r7, #20
 80086e0:	4618      	mov	r0, r3
 80086e2:	f007 fd02 	bl	80100ea <_ZN6tflite19GreedyMemoryPlanner20GetMaximumMemorySizeEv>
 80086e6:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84
  // The head is used to store memory plans for one model at a time during the
  // model preparation stage, and is re-purposed to store scratch buffer handles
  // during model invocation. The head must be as large as the greater of the
  // largest model memory plan's size and the total space required for all
  // scratch buffer handles.
  if (max_head_buffer_usage_ < head_usage) {
 80086ea:	68fb      	ldr	r3, [r7, #12]
 80086ec:	699b      	ldr	r3, [r3, #24]
 80086ee:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80086f2:	429a      	cmp	r2, r3
 80086f4:	d903      	bls.n	80086fe <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x24a>
    max_head_buffer_usage_ = head_usage;
 80086f6:	68fb      	ldr	r3, [r7, #12]
 80086f8:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80086fc:	619a      	str	r2, [r3, #24]
  }

  // The head is used for storing scratch buffer allocations before finalizing a
  // memory plan in this function. Ensure that the head is set to the largest
  // memory plan sent through the allocator:
  TF_LITE_ENSURE_STATUS(memory_allocator_->SetHeadBufferSize(
 80086fe:	68fb      	ldr	r3, [r7, #12]
 8008700:	6858      	ldr	r0, [r3, #4]
 8008702:	68fb      	ldr	r3, [r7, #12]
 8008704:	685b      	ldr	r3, [r3, #4]
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	3308      	adds	r3, #8
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	68fa      	ldr	r2, [r7, #12]
 800870e:	6991      	ldr	r1, [r2, #24]
 8008710:	2210      	movs	r2, #16
 8008712:	4798      	blx	r3
 8008714:	4603      	mov	r3, r0
 8008716:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
 800871a:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 800871e:	2b00      	cmp	r3, #0
 8008720:	d002      	beq.n	8008728 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x274>
 8008722:	f897 4056 	ldrb.w	r4, [r7, #86]	; 0x56
 8008726:	e000      	b.n	800872a <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x276>
      max_head_buffer_usage_, kBufferAlignment));
  return kTfLiteOk;
 8008728:	2400      	movs	r4, #0
  GreedyMemoryPlanner planner(planner_arena, remaining_arena_size);
 800872a:	f107 0314 	add.w	r3, r7, #20
 800872e:	4618      	mov	r0, r3
 8008730:	f007 fa74 	bl	800fc1c <_ZN6tflite19GreedyMemoryPlannerD1Ev>
 8008734:	4623      	mov	r3, r4
}
 8008736:	4618      	mov	r0, r3
 8008738:	378c      	adds	r7, #140	; 0x8c
 800873a:	46bd      	mov	sp, r7
 800873c:	bd90      	pop	{r4, r7, pc}
 800873e:	bf00      	nop
 8008740:	08015004 	.word	0x08015004
 8008744:	0801509c 	.word	0x0801509c
 8008748:	08015048 	.word	0x08015048
 800874c:	08015084 	.word	0x08015084
 8008750:	080150b8 	.word	0x080150b8

08008754 <_ZN6tflite14MicroAllocator28AllocateScratchBufferHandlesEPPNS_19ScratchBufferHandleEj>:

TfLiteStatus MicroAllocator::AllocateScratchBufferHandles(
    ScratchBufferHandle** scratch_buffer_handles, size_t handle_count) {
 8008754:	b580      	push	{r7, lr}
 8008756:	b084      	sub	sp, #16
 8008758:	af00      	add	r7, sp, #0
 800875a:	60f8      	str	r0, [r7, #12]
 800875c:	60b9      	str	r1, [r7, #8]
 800875e:	607a      	str	r2, [r7, #4]
  TFLITE_DCHECK(scratch_buffer_handles != nullptr);
 8008760:	68bb      	ldr	r3, [r7, #8]
 8008762:	2b00      	cmp	r3, #0
 8008764:	d101      	bne.n	800876a <_ZN6tflite14MicroAllocator28AllocateScratchBufferHandlesEPPNS_19ScratchBufferHandleEj+0x16>
 8008766:	f008 f81a 	bl	801079e <abort>

  if (scratch_buffer_request_count_ == 0) {
 800876a:	68fb      	ldr	r3, [r7, #12]
 800876c:	695b      	ldr	r3, [r3, #20]
 800876e:	2b00      	cmp	r3, #0
 8008770:	d101      	bne.n	8008776 <_ZN6tflite14MicroAllocator28AllocateScratchBufferHandlesEPPNS_19ScratchBufferHandleEj+0x22>
    // No scratch buffer requests were requested during model allocation.
    return kTfLiteOk;
 8008772:	2300      	movs	r3, #0
 8008774:	e00e      	b.n	8008794 <_ZN6tflite14MicroAllocator28AllocateScratchBufferHandlesEPPNS_19ScratchBufferHandleEj+0x40>
  }

  // Allocate a consecutive block of memory store the scratch buffer handles.
  // This alignment ensures quick lookup during inference time for the model:
  *scratch_buffer_handles = reinterpret_cast<ScratchBufferHandle*>(
      memory_allocator_->AllocateFromTail(
 8008776:	68fb      	ldr	r3, [r7, #12]
 8008778:	6858      	ldr	r0, [r3, #4]
 800877a:	68fb      	ldr	r3, [r7, #12]
 800877c:	685b      	ldr	r3, [r3, #4]
          sizeof(ScratchBufferHandle) * handle_count,
          alignof(ScratchBufferHandle)));
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	330c      	adds	r3, #12
 8008782:	681b      	ldr	r3, [r3, #0]
      memory_allocator_->AllocateFromTail(
 8008784:	687a      	ldr	r2, [r7, #4]
 8008786:	0091      	lsls	r1, r2, #2
 8008788:	2204      	movs	r2, #4
 800878a:	4798      	blx	r3
 800878c:	4602      	mov	r2, r0
  *scratch_buffer_handles = reinterpret_cast<ScratchBufferHandle*>(
 800878e:	68bb      	ldr	r3, [r7, #8]
 8008790:	601a      	str	r2, [r3, #0]

  return kTfLiteOk;
 8008792:	2300      	movs	r3, #0
}
 8008794:	4618      	mov	r0, r3
 8008796:	3710      	adds	r7, #16
 8008798:	46bd      	mov	sp, r7
 800879a:	bd80      	pop	{r7, pc}

0800879c <_ZN6tflite14MicroAllocator21InitScratchBufferDataEv>:

TfLiteStatus MicroAllocator::InitScratchBufferData() {
 800879c:	b580      	push	{r7, lr}
 800879e:	b084      	sub	sp, #16
 80087a0:	af00      	add	r7, sp, #0
 80087a2:	6078      	str	r0, [r7, #4]
  // A model is preparing to allocate resources, ensure that scratch buffer
  // request counter is cleared:
  scratch_buffer_request_count_ = 0;
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	2200      	movs	r2, #0
 80087a8:	615a      	str	r2, [r3, #20]

  // All requests will be stored in the head section. Each kernel is allowed at
  // most kMaxScratchBuffersPerOp requests. Adjust the head to reserve at most
  // that many requests to begin:
  TF_LITE_ENSURE_STATUS(memory_allocator_->SetHeadBufferSize(
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	6858      	ldr	r0, [r3, #4]
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	685b      	ldr	r3, [r3, #4]
 80087b2:	681b      	ldr	r3, [r3, #0]
 80087b4:	3308      	adds	r3, #8
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	2204      	movs	r2, #4
 80087ba:	2160      	movs	r1, #96	; 0x60
 80087bc:	4798      	blx	r3
 80087be:	4603      	mov	r3, r0
 80087c0:	73fb      	strb	r3, [r7, #15]
 80087c2:	7bfb      	ldrb	r3, [r7, #15]
 80087c4:	2b00      	cmp	r3, #0
 80087c6:	d001      	beq.n	80087cc <_ZN6tflite14MicroAllocator21InitScratchBufferDataEv+0x30>
 80087c8:	7bfb      	ldrb	r3, [r7, #15]
 80087ca:	e000      	b.n	80087ce <_ZN6tflite14MicroAllocator21InitScratchBufferDataEv+0x32>
      sizeof(internal::ScratchBufferRequest) * kMaxScratchBuffersPerOp,
      alignof(internal::ScratchBufferRequest)));

  return kTfLiteOk;
 80087cc:	2300      	movs	r3, #0
}
 80087ce:	4618      	mov	r0, r3
 80087d0:	3710      	adds	r7, #16
 80087d2:	46bd      	mov	sp, r7
 80087d4:	bd80      	pop	{r7, pc}

080087d6 <_ZN6tflite14MicroAllocator24GetScratchBufferRequestsEv>:

internal::ScratchBufferRequest* MicroAllocator::GetScratchBufferRequests() {
 80087d6:	b580      	push	{r7, lr}
 80087d8:	b082      	sub	sp, #8
 80087da:	af00      	add	r7, sp, #0
 80087dc:	6078      	str	r0, [r7, #4]
  return reinterpret_cast<internal::ScratchBufferRequest*>(
      AlignPointerUp(memory_allocator_->GetHeadBuffer(),
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	685b      	ldr	r3, [r3, #4]
 80087e2:	4618      	mov	r0, r3
 80087e4:	f002 faf6 	bl	800add4 <_ZNK6tflite21SimpleMemoryAllocator13GetHeadBufferEv>
 80087e8:	4603      	mov	r3, r0
 80087ea:	2104      	movs	r1, #4
 80087ec:	4618      	mov	r0, r3
 80087ee:	f7fe fa4c 	bl	8006c8a <_ZN6tflite14AlignPointerUpEPhj>
 80087f2:	4603      	mov	r3, r0
                     alignof(internal::ScratchBufferRequest)));
}
 80087f4:	4618      	mov	r0, r3
 80087f6:	3708      	adds	r7, #8
 80087f8:	46bd      	mov	sp, r7
 80087fa:	bd80      	pop	{r7, pc}

080087fc <_ZN6tflite14MicroAllocator33FlatBufferVectorToTfLiteTypeArrayEPKN11flatbuffers6VectorIlEEPP14TfLiteIntArray>:

TfLiteStatus MicroAllocator::FlatBufferVectorToTfLiteTypeArray(
    const flatbuffers::Vector<int32_t>* flatbuffer_array,
    TfLiteIntArray** result) {
 80087fc:	b580      	push	{r7, lr}
 80087fe:	b084      	sub	sp, #16
 8008800:	af00      	add	r7, sp, #0
 8008802:	60f8      	str	r0, [r7, #12]
 8008804:	60b9      	str	r1, [r7, #8]
 8008806:	607a      	str	r2, [r7, #4]
  return internal::FlatBufferVectorToTfLiteTypeArray(
 8008808:	68fb      	ldr	r3, [r7, #12]
 800880a:	6858      	ldr	r0, [r3, #4]
 800880c:	68fb      	ldr	r3, [r7, #12]
 800880e:	68d9      	ldr	r1, [r3, #12]
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	68ba      	ldr	r2, [r7, #8]
 8008814:	f000 f9e6 	bl	8008be4 <_ZN6tflite8internal33FlatBufferVectorToTfLiteTypeArrayIl14TfLiteIntArrayEE12TfLiteStatusPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterEPKN11flatbuffers6VectorIT_EEPPT0_>
 8008818:	4603      	mov	r3, r0
      memory_allocator_, error_reporter_, flatbuffer_array, result);
}
 800881a:	4618      	mov	r0, r3
 800881c:	3710      	adds	r7, #16
 800881e:	46bd      	mov	sp, r7
 8008820:	bd80      	pop	{r7, pc}

08008822 <_ZN6tflite14MicroAllocator23GetBuiltinDataAllocatorEv>:

BuiltinDataAllocator* MicroAllocator::GetBuiltinDataAllocator() {
 8008822:	b480      	push	{r7}
 8008824:	b083      	sub	sp, #12
 8008826:	af00      	add	r7, sp, #0
 8008828:	6078      	str	r0, [r7, #4]
  return builtin_data_allocator_;
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	689b      	ldr	r3, [r3, #8]
}
 800882e:	4618      	mov	r0, r3
 8008830:	370c      	adds	r7, #12
 8008832:	46bd      	mov	sp, r7
 8008834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008838:	4770      	bx	lr

0800883a <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorIhEEEET_t>:
  template<typename P> P GetPointer(voffset_t field) const {
 800883a:	b580      	push	{r7, lr}
 800883c:	b082      	sub	sp, #8
 800883e:	af00      	add	r7, sp, #0
 8008840:	6078      	str	r0, [r7, #4]
 8008842:	460b      	mov	r3, r1
 8008844:	807b      	strh	r3, [r7, #2]
    return const_cast<Table *>(this)->GetPointer<P>(field);
 8008846:	887b      	ldrh	r3, [r7, #2]
 8008848:	4619      	mov	r1, r3
 800884a:	6878      	ldr	r0, [r7, #4]
 800884c:	f000 f9fc 	bl	8008c48 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIhEEEET_t>
 8008850:	4603      	mov	r3, r0
  }
 8008852:	4618      	mov	r0, r3
 8008854:	3708      	adds	r7, #8
 8008856:	46bd      	mov	sp, r7
 8008858:	bd80      	pop	{r7, pc}

0800885a <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorIfEEEET_t>:
  template<typename P> P GetPointer(voffset_t field) const {
 800885a:	b580      	push	{r7, lr}
 800885c:	b082      	sub	sp, #8
 800885e:	af00      	add	r7, sp, #0
 8008860:	6078      	str	r0, [r7, #4]
 8008862:	460b      	mov	r3, r1
 8008864:	807b      	strh	r3, [r7, #2]
    return const_cast<Table *>(this)->GetPointer<P>(field);
 8008866:	887b      	ldrh	r3, [r7, #2]
 8008868:	4619      	mov	r1, r3
 800886a:	6878      	ldr	r0, [r7, #4]
 800886c:	f000 fa0c 	bl	8008c88 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIfEEEET_t>
 8008870:	4603      	mov	r3, r0
  }
 8008872:	4618      	mov	r0, r3
 8008874:	3708      	adds	r7, #8
 8008876:	46bd      	mov	sp, r7
 8008878:	bd80      	pop	{r7, pc}

0800887a <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorIxEEEET_t>:
  template<typename P> P GetPointer(voffset_t field) const {
 800887a:	b580      	push	{r7, lr}
 800887c:	b082      	sub	sp, #8
 800887e:	af00      	add	r7, sp, #0
 8008880:	6078      	str	r0, [r7, #4]
 8008882:	460b      	mov	r3, r1
 8008884:	807b      	strh	r3, [r7, #2]
    return const_cast<Table *>(this)->GetPointer<P>(field);
 8008886:	887b      	ldrh	r3, [r7, #2]
 8008888:	4619      	mov	r1, r3
 800888a:	6878      	ldr	r0, [r7, #4]
 800888c:	f000 fa1c 	bl	8008cc8 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIxEEEET_t>
 8008890:	4603      	mov	r3, r0
  }
 8008892:	4618      	mov	r0, r3
 8008894:	3708      	adds	r7, #8
 8008896:	46bd      	mov	sp, r7
 8008898:	bd80      	pop	{r7, pc}

0800889a <_ZNK11flatbuffers5Table10GetPointerIPKN6tflite22QuantizationParametersEEET_t>:
  template<typename P> P GetPointer(voffset_t field) const {
 800889a:	b580      	push	{r7, lr}
 800889c:	b082      	sub	sp, #8
 800889e:	af00      	add	r7, sp, #0
 80088a0:	6078      	str	r0, [r7, #4]
 80088a2:	460b      	mov	r3, r1
 80088a4:	807b      	strh	r3, [r7, #2]
    return const_cast<Table *>(this)->GetPointer<P>(field);
 80088a6:	887b      	ldrh	r3, [r7, #2]
 80088a8:	4619      	mov	r1, r3
 80088aa:	6878      	ldr	r0, [r7, #4]
 80088ac:	f000 fa2c 	bl	8008d08 <_ZN11flatbuffers5Table10GetPointerIPKN6tflite22QuantizationParametersEEET_t>
 80088b0:	4603      	mov	r3, r0
  }
 80088b2:	4618      	mov	r0, r3
 80088b4:	3708      	adds	r7, #8
 80088b6:	46bd      	mov	sp, r7
 80088b8:	bd80      	pop	{r7, pc}

080088ba <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite6TensorEEEEEEET_t>:
  template<typename P> P GetPointer(voffset_t field) const {
 80088ba:	b580      	push	{r7, lr}
 80088bc:	b082      	sub	sp, #8
 80088be:	af00      	add	r7, sp, #0
 80088c0:	6078      	str	r0, [r7, #4]
 80088c2:	460b      	mov	r3, r1
 80088c4:	807b      	strh	r3, [r7, #2]
    return const_cast<Table *>(this)->GetPointer<P>(field);
 80088c6:	887b      	ldrh	r3, [r7, #2]
 80088c8:	4619      	mov	r1, r3
 80088ca:	6878      	ldr	r0, [r7, #4]
 80088cc:	f000 fa3c 	bl	8008d48 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite6TensorEEEEEEET_t>
 80088d0:	4603      	mov	r3, r0
  }
 80088d2:	4618      	mov	r0, r3
 80088d4:	3708      	adds	r7, #8
 80088d6:	46bd      	mov	sp, r7
 80088d8:	bd80      	pop	{r7, pc}

080088da <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite6BufferEEEEEEET_t>:
  template<typename P> P GetPointer(voffset_t field) const {
 80088da:	b580      	push	{r7, lr}
 80088dc:	b082      	sub	sp, #8
 80088de:	af00      	add	r7, sp, #0
 80088e0:	6078      	str	r0, [r7, #4]
 80088e2:	460b      	mov	r3, r1
 80088e4:	807b      	strh	r3, [r7, #2]
    return const_cast<Table *>(this)->GetPointer<P>(field);
 80088e6:	887b      	ldrh	r3, [r7, #2]
 80088e8:	4619      	mov	r1, r3
 80088ea:	6878      	ldr	r0, [r7, #4]
 80088ec:	f000 fa4c 	bl	8008d88 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite6BufferEEEEEEET_t>
 80088f0:	4603      	mov	r3, r0
  }
 80088f2:	4618      	mov	r0, r3
 80088f4:	3708      	adds	r7, #8
 80088f6:	46bd      	mov	sp, r7
 80088f8:	bd80      	pop	{r7, pc}

080088fa <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite8MetadataEEEEEEET_t>:
  template<typename P> P GetPointer(voffset_t field) const {
 80088fa:	b580      	push	{r7, lr}
 80088fc:	b082      	sub	sp, #8
 80088fe:	af00      	add	r7, sp, #0
 8008900:	6078      	str	r0, [r7, #4]
 8008902:	460b      	mov	r3, r1
 8008904:	807b      	strh	r3, [r7, #2]
    return const_cast<Table *>(this)->GetPointer<P>(field);
 8008906:	887b      	ldrh	r3, [r7, #2]
 8008908:	4619      	mov	r1, r3
 800890a:	6878      	ldr	r0, [r7, #4]
 800890c:	f000 fa5c 	bl	8008dc8 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite8MetadataEEEEEEET_t>
 8008910:	4603      	mov	r3, r0
  }
 8008912:	4618      	mov	r0, r3
 8008914:	3708      	adds	r7, #8
 8008916:	46bd      	mov	sp, r7
 8008918:	bd80      	pop	{r7, pc}

0800891a <_ZNK11flatbuffers6VectorIhE4sizeEv>:
  uoffset_t size() const { return EndianScalar(length_); }
 800891a:	b580      	push	{r7, lr}
 800891c:	b082      	sub	sp, #8
 800891e:	af00      	add	r7, sp, #0
 8008920:	6078      	str	r0, [r7, #4]
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	681b      	ldr	r3, [r3, #0]
 8008926:	4618      	mov	r0, r3
 8008928:	f7f9 f881 	bl	8001a2e <_ZN11flatbuffers12EndianScalarImEET_S1_>
 800892c:	4603      	mov	r3, r0
 800892e:	4618      	mov	r0, r3
 8008930:	3708      	adds	r7, #8
 8008932:	46bd      	mov	sp, r7
 8008934:	bd80      	pop	{r7, pc}

08008936 <_ZNK11flatbuffers6VectorIfE4sizeEv>:
 8008936:	b580      	push	{r7, lr}
 8008938:	b082      	sub	sp, #8
 800893a:	af00      	add	r7, sp, #0
 800893c:	6078      	str	r0, [r7, #4]
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	681b      	ldr	r3, [r3, #0]
 8008942:	4618      	mov	r0, r3
 8008944:	f7f9 f873 	bl	8001a2e <_ZN11flatbuffers12EndianScalarImEET_S1_>
 8008948:	4603      	mov	r3, r0
 800894a:	4618      	mov	r0, r3
 800894c:	3708      	adds	r7, #8
 800894e:	46bd      	mov	sp, r7
 8008950:	bd80      	pop	{r7, pc}
	...

08008954 <_ZNK11flatbuffers6VectorIfE3GetEm>:
  return_type Get(uoffset_t i) const {
 8008954:	b580      	push	{r7, lr}
 8008956:	b082      	sub	sp, #8
 8008958:	af00      	add	r7, sp, #0
 800895a:	6078      	str	r0, [r7, #4]
 800895c:	6039      	str	r1, [r7, #0]
    FLATBUFFERS_ASSERT(i < size());
 800895e:	6878      	ldr	r0, [r7, #4]
 8008960:	f7ff ffe9 	bl	8008936 <_ZNK11flatbuffers6VectorIfE4sizeEv>
 8008964:	4602      	mov	r2, r0
 8008966:	683b      	ldr	r3, [r7, #0]
 8008968:	4293      	cmp	r3, r2
 800896a:	d306      	bcc.n	800897a <_ZNK11flatbuffers6VectorIfE3GetEm+0x26>
 800896c:	4b0a      	ldr	r3, [pc, #40]	; (8008998 <_ZNK11flatbuffers6VectorIfE3GetEm+0x44>)
 800896e:	4a0b      	ldr	r2, [pc, #44]	; (800899c <_ZNK11flatbuffers6VectorIfE3GetEm+0x48>)
 8008970:	f44f 7183 	mov.w	r1, #262	; 0x106
 8008974:	480a      	ldr	r0, [pc, #40]	; (80089a0 <_ZNK11flatbuffers6VectorIfE3GetEm+0x4c>)
 8008976:	f007 ff19 	bl	80107ac <__assert_func>
    return IndirectHelper<T>::Read(Data(), i);
 800897a:	6878      	ldr	r0, [r7, #4]
 800897c:	f000 fa66 	bl	8008e4c <_ZNK11flatbuffers6VectorIfE4DataEv>
 8008980:	4603      	mov	r3, r0
 8008982:	6839      	ldr	r1, [r7, #0]
 8008984:	4618      	mov	r0, r3
 8008986:	f000 fa4b 	bl	8008e20 <_ZN11flatbuffers14IndirectHelperIfE4ReadEPKhm>
 800898a:	eef0 7a40 	vmov.f32	s15, s0
  }
 800898e:	eeb0 0a67 	vmov.f32	s0, s15
 8008992:	3708      	adds	r7, #8
 8008994:	46bd      	mov	sp, r7
 8008996:	bd80      	pop	{r7, pc}
 8008998:	08015108 	.word	0x08015108
 800899c:	08015114 	.word	0x08015114
 80089a0:	080151dc 	.word	0x080151dc

080089a4 <_ZNK11flatbuffers6VectorIxE4sizeEv>:
  uoffset_t size() const { return EndianScalar(length_); }
 80089a4:	b580      	push	{r7, lr}
 80089a6:	b082      	sub	sp, #8
 80089a8:	af00      	add	r7, sp, #0
 80089aa:	6078      	str	r0, [r7, #4]
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	4618      	mov	r0, r3
 80089b2:	f7f9 f83c 	bl	8001a2e <_ZN11flatbuffers12EndianScalarImEET_S1_>
 80089b6:	4603      	mov	r3, r0
 80089b8:	4618      	mov	r0, r3
 80089ba:	3708      	adds	r7, #8
 80089bc:	46bd      	mov	sp, r7
 80089be:	bd80      	pop	{r7, pc}

080089c0 <_ZNK11flatbuffers6VectorIxE3GetEm>:
  return_type Get(uoffset_t i) const {
 80089c0:	b580      	push	{r7, lr}
 80089c2:	b082      	sub	sp, #8
 80089c4:	af00      	add	r7, sp, #0
 80089c6:	6078      	str	r0, [r7, #4]
 80089c8:	6039      	str	r1, [r7, #0]
    FLATBUFFERS_ASSERT(i < size());
 80089ca:	6878      	ldr	r0, [r7, #4]
 80089cc:	f7ff ffea 	bl	80089a4 <_ZNK11flatbuffers6VectorIxE4sizeEv>
 80089d0:	4602      	mov	r2, r0
 80089d2:	683b      	ldr	r3, [r7, #0]
 80089d4:	4293      	cmp	r3, r2
 80089d6:	d306      	bcc.n	80089e6 <_ZNK11flatbuffers6VectorIxE3GetEm+0x26>
 80089d8:	4b0a      	ldr	r3, [pc, #40]	; (8008a04 <_ZNK11flatbuffers6VectorIxE3GetEm+0x44>)
 80089da:	4a0b      	ldr	r2, [pc, #44]	; (8008a08 <_ZNK11flatbuffers6VectorIxE3GetEm+0x48>)
 80089dc:	f44f 7183 	mov.w	r1, #262	; 0x106
 80089e0:	480a      	ldr	r0, [pc, #40]	; (8008a0c <_ZNK11flatbuffers6VectorIxE3GetEm+0x4c>)
 80089e2:	f007 fee3 	bl	80107ac <__assert_func>
    return IndirectHelper<T>::Read(Data(), i);
 80089e6:	6878      	ldr	r0, [r7, #4]
 80089e8:	f000 fa52 	bl	8008e90 <_ZNK11flatbuffers6VectorIxE4DataEv>
 80089ec:	4603      	mov	r3, r0
 80089ee:	6839      	ldr	r1, [r7, #0]
 80089f0:	4618      	mov	r0, r3
 80089f2:	f000 fa37 	bl	8008e64 <_ZN11flatbuffers14IndirectHelperIxE4ReadEPKhm>
 80089f6:	4602      	mov	r2, r0
 80089f8:	460b      	mov	r3, r1
  }
 80089fa:	4610      	mov	r0, r2
 80089fc:	4619      	mov	r1, r3
 80089fe:	3708      	adds	r7, #8
 8008a00:	46bd      	mov	sp, r7
 8008a02:	bd80      	pop	{r7, pc}
 8008a04:	08015108 	.word	0x08015108
 8008a08:	08015278 	.word	0x08015278
 8008a0c:	080151dc 	.word	0x080151dc

08008a10 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEE4sizeEv>:
  uoffset_t size() const { return EndianScalar(length_); }
 8008a10:	b580      	push	{r7, lr}
 8008a12:	b082      	sub	sp, #8
 8008a14:	af00      	add	r7, sp, #0
 8008a16:	6078      	str	r0, [r7, #4]
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	4618      	mov	r0, r3
 8008a1e:	f7f9 f806 	bl	8001a2e <_ZN11flatbuffers12EndianScalarImEET_S1_>
 8008a22:	4603      	mov	r3, r0
 8008a24:	4618      	mov	r0, r3
 8008a26:	3708      	adds	r7, #8
 8008a28:	46bd      	mov	sp, r7
 8008a2a:	bd80      	pop	{r7, pc}

08008a2c <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEE3GetEm>:
  return_type Get(uoffset_t i) const {
 8008a2c:	b580      	push	{r7, lr}
 8008a2e:	b082      	sub	sp, #8
 8008a30:	af00      	add	r7, sp, #0
 8008a32:	6078      	str	r0, [r7, #4]
 8008a34:	6039      	str	r1, [r7, #0]
    FLATBUFFERS_ASSERT(i < size());
 8008a36:	6878      	ldr	r0, [r7, #4]
 8008a38:	f7ff ffea 	bl	8008a10 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEE4sizeEv>
 8008a3c:	4602      	mov	r2, r0
 8008a3e:	683b      	ldr	r3, [r7, #0]
 8008a40:	4293      	cmp	r3, r2
 8008a42:	d306      	bcc.n	8008a52 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEE3GetEm+0x26>
 8008a44:	4b09      	ldr	r3, [pc, #36]	; (8008a6c <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEE3GetEm+0x40>)
 8008a46:	4a0a      	ldr	r2, [pc, #40]	; (8008a70 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEE3GetEm+0x44>)
 8008a48:	f44f 7183 	mov.w	r1, #262	; 0x106
 8008a4c:	4809      	ldr	r0, [pc, #36]	; (8008a74 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEE3GetEm+0x48>)
 8008a4e:	f007 fead 	bl	80107ac <__assert_func>
    return IndirectHelper<T>::Read(Data(), i);
 8008a52:	6878      	ldr	r0, [r7, #4]
 8008a54:	f000 fa3c 	bl	8008ed0 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEE4DataEv>
 8008a58:	4603      	mov	r3, r0
 8008a5a:	6839      	ldr	r1, [r7, #0]
 8008a5c:	4618      	mov	r0, r3
 8008a5e:	f000 fa23 	bl	8008ea8 <_ZN11flatbuffers14IndirectHelperINS_6OffsetIN6tflite6TensorEEEE4ReadEPKhm>
 8008a62:	4603      	mov	r3, r0
  }
 8008a64:	4618      	mov	r0, r3
 8008a66:	3708      	adds	r7, #8
 8008a68:	46bd      	mov	sp, r7
 8008a6a:	bd80      	pop	{r7, pc}
 8008a6c:	08015108 	.word	0x08015108
 8008a70:	08015420 	.word	0x08015420
 8008a74:	080151dc 	.word	0x080151dc

08008a78 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8OperatorEEEE3GetEm>:
  return_type Get(uoffset_t i) const {
 8008a78:	b580      	push	{r7, lr}
 8008a7a:	b082      	sub	sp, #8
 8008a7c:	af00      	add	r7, sp, #0
 8008a7e:	6078      	str	r0, [r7, #4]
 8008a80:	6039      	str	r1, [r7, #0]
    FLATBUFFERS_ASSERT(i < size());
 8008a82:	6878      	ldr	r0, [r7, #4]
 8008a84:	f7fd ff98 	bl	80069b8 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8OperatorEEEE4sizeEv>
 8008a88:	4602      	mov	r2, r0
 8008a8a:	683b      	ldr	r3, [r7, #0]
 8008a8c:	4293      	cmp	r3, r2
 8008a8e:	d306      	bcc.n	8008a9e <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8OperatorEEEE3GetEm+0x26>
 8008a90:	4b09      	ldr	r3, [pc, #36]	; (8008ab8 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8OperatorEEEE3GetEm+0x40>)
 8008a92:	4a0a      	ldr	r2, [pc, #40]	; (8008abc <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8OperatorEEEE3GetEm+0x44>)
 8008a94:	f44f 7183 	mov.w	r1, #262	; 0x106
 8008a98:	4809      	ldr	r0, [pc, #36]	; (8008ac0 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8OperatorEEEE3GetEm+0x48>)
 8008a9a:	f007 fe87 	bl	80107ac <__assert_func>
    return IndirectHelper<T>::Read(Data(), i);
 8008a9e:	6878      	ldr	r0, [r7, #4]
 8008aa0:	f000 fa36 	bl	8008f10 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8OperatorEEEE4DataEv>
 8008aa4:	4603      	mov	r3, r0
 8008aa6:	6839      	ldr	r1, [r7, #0]
 8008aa8:	4618      	mov	r0, r3
 8008aaa:	f000 fa1d 	bl	8008ee8 <_ZN11flatbuffers14IndirectHelperINS_6OffsetIN6tflite8OperatorEEEE4ReadEPKhm>
 8008aae:	4603      	mov	r3, r0
  }
 8008ab0:	4618      	mov	r0, r3
 8008ab2:	3708      	adds	r7, #8
 8008ab4:	46bd      	mov	sp, r7
 8008ab6:	bd80      	pop	{r7, pc}
 8008ab8:	08015108 	.word	0x08015108
 8008abc:	08015518 	.word	0x08015518
 8008ac0:	080151dc 	.word	0x080151dc

08008ac4 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6BufferEEEE4sizeEv>:
  uoffset_t size() const { return EndianScalar(length_); }
 8008ac4:	b580      	push	{r7, lr}
 8008ac6:	b082      	sub	sp, #8
 8008ac8:	af00      	add	r7, sp, #0
 8008aca:	6078      	str	r0, [r7, #4]
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	681b      	ldr	r3, [r3, #0]
 8008ad0:	4618      	mov	r0, r3
 8008ad2:	f7f8 ffac 	bl	8001a2e <_ZN11flatbuffers12EndianScalarImEET_S1_>
 8008ad6:	4603      	mov	r3, r0
 8008ad8:	4618      	mov	r0, r3
 8008ada:	3708      	adds	r7, #8
 8008adc:	46bd      	mov	sp, r7
 8008ade:	bd80      	pop	{r7, pc}

08008ae0 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6BufferEEEE3GetEm>:
  return_type Get(uoffset_t i) const {
 8008ae0:	b580      	push	{r7, lr}
 8008ae2:	b082      	sub	sp, #8
 8008ae4:	af00      	add	r7, sp, #0
 8008ae6:	6078      	str	r0, [r7, #4]
 8008ae8:	6039      	str	r1, [r7, #0]
    FLATBUFFERS_ASSERT(i < size());
 8008aea:	6878      	ldr	r0, [r7, #4]
 8008aec:	f7ff ffea 	bl	8008ac4 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6BufferEEEE4sizeEv>
 8008af0:	4602      	mov	r2, r0
 8008af2:	683b      	ldr	r3, [r7, #0]
 8008af4:	4293      	cmp	r3, r2
 8008af6:	d306      	bcc.n	8008b06 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6BufferEEEE3GetEm+0x26>
 8008af8:	4b09      	ldr	r3, [pc, #36]	; (8008b20 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6BufferEEEE3GetEm+0x40>)
 8008afa:	4a0a      	ldr	r2, [pc, #40]	; (8008b24 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6BufferEEEE3GetEm+0x44>)
 8008afc:	f44f 7183 	mov.w	r1, #262	; 0x106
 8008b00:	4809      	ldr	r0, [pc, #36]	; (8008b28 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6BufferEEEE3GetEm+0x48>)
 8008b02:	f007 fe53 	bl	80107ac <__assert_func>
    return IndirectHelper<T>::Read(Data(), i);
 8008b06:	6878      	ldr	r0, [r7, #4]
 8008b08:	f000 fa22 	bl	8008f50 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6BufferEEEE4DataEv>
 8008b0c:	4603      	mov	r3, r0
 8008b0e:	6839      	ldr	r1, [r7, #0]
 8008b10:	4618      	mov	r0, r3
 8008b12:	f000 fa09 	bl	8008f28 <_ZN11flatbuffers14IndirectHelperINS_6OffsetIN6tflite6BufferEEEE4ReadEPKhm>
 8008b16:	4603      	mov	r3, r0
  }
 8008b18:	4618      	mov	r0, r3
 8008b1a:	3708      	adds	r7, #8
 8008b1c:	46bd      	mov	sp, r7
 8008b1e:	bd80      	pop	{r7, pc}
 8008b20:	08015108 	.word	0x08015108
 8008b24:	08015710 	.word	0x08015710
 8008b28:	080151dc 	.word	0x080151dc

08008b2c <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8MetadataEEEE4sizeEv>:
  uoffset_t size() const { return EndianScalar(length_); }
 8008b2c:	b580      	push	{r7, lr}
 8008b2e:	b082      	sub	sp, #8
 8008b30:	af00      	add	r7, sp, #0
 8008b32:	6078      	str	r0, [r7, #4]
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	681b      	ldr	r3, [r3, #0]
 8008b38:	4618      	mov	r0, r3
 8008b3a:	f7f8 ff78 	bl	8001a2e <_ZN11flatbuffers12EndianScalarImEET_S1_>
 8008b3e:	4603      	mov	r3, r0
 8008b40:	4618      	mov	r0, r3
 8008b42:	3708      	adds	r7, #8
 8008b44:	46bd      	mov	sp, r7
 8008b46:	bd80      	pop	{r7, pc}

08008b48 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8MetadataEEEE3GetEm>:
  return_type Get(uoffset_t i) const {
 8008b48:	b580      	push	{r7, lr}
 8008b4a:	b082      	sub	sp, #8
 8008b4c:	af00      	add	r7, sp, #0
 8008b4e:	6078      	str	r0, [r7, #4]
 8008b50:	6039      	str	r1, [r7, #0]
    FLATBUFFERS_ASSERT(i < size());
 8008b52:	6878      	ldr	r0, [r7, #4]
 8008b54:	f7ff ffea 	bl	8008b2c <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8MetadataEEEE4sizeEv>
 8008b58:	4602      	mov	r2, r0
 8008b5a:	683b      	ldr	r3, [r7, #0]
 8008b5c:	4293      	cmp	r3, r2
 8008b5e:	d306      	bcc.n	8008b6e <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8MetadataEEEE3GetEm+0x26>
 8008b60:	4b09      	ldr	r3, [pc, #36]	; (8008b88 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8MetadataEEEE3GetEm+0x40>)
 8008b62:	4a0a      	ldr	r2, [pc, #40]	; (8008b8c <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8MetadataEEEE3GetEm+0x44>)
 8008b64:	f44f 7183 	mov.w	r1, #262	; 0x106
 8008b68:	4809      	ldr	r0, [pc, #36]	; (8008b90 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8MetadataEEEE3GetEm+0x48>)
 8008b6a:	f007 fe1f 	bl	80107ac <__assert_func>
    return IndirectHelper<T>::Read(Data(), i);
 8008b6e:	6878      	ldr	r0, [r7, #4]
 8008b70:	f000 fa0e 	bl	8008f90 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8MetadataEEEE4DataEv>
 8008b74:	4603      	mov	r3, r0
 8008b76:	6839      	ldr	r1, [r7, #0]
 8008b78:	4618      	mov	r0, r3
 8008b7a:	f000 f9f5 	bl	8008f68 <_ZN11flatbuffers14IndirectHelperINS_6OffsetIN6tflite8MetadataEEEE4ReadEPKhm>
 8008b7e:	4603      	mov	r3, r0
  }
 8008b80:	4618      	mov	r0, r3
 8008b82:	3708      	adds	r7, #8
 8008b84:	46bd      	mov	sp, r7
 8008b86:	bd80      	pop	{r7, pc}
 8008b88:	08015108 	.word	0x08015108
 8008b8c:	08015808 	.word	0x08015808
 8008b90:	080151dc 	.word	0x080151dc

08008b94 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEEixEm>:
  return_type operator[](uoffset_t i) const { return Get(i); }
 8008b94:	b580      	push	{r7, lr}
 8008b96:	b082      	sub	sp, #8
 8008b98:	af00      	add	r7, sp, #0
 8008b9a:	6078      	str	r0, [r7, #4]
 8008b9c:	6039      	str	r1, [r7, #0]
 8008b9e:	6839      	ldr	r1, [r7, #0]
 8008ba0:	6878      	ldr	r0, [r7, #4]
 8008ba2:	f7fd ff25 	bl	80069f0 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE3GetEm>
 8008ba6:	4603      	mov	r3, r0
 8008ba8:	4618      	mov	r0, r3
 8008baa:	3708      	adds	r7, #8
 8008bac:	46bd      	mov	sp, r7
 8008bae:	bd80      	pop	{r7, pc}

08008bb0 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6BufferEEEEixEm>:
 8008bb0:	b580      	push	{r7, lr}
 8008bb2:	b082      	sub	sp, #8
 8008bb4:	af00      	add	r7, sp, #0
 8008bb6:	6078      	str	r0, [r7, #4]
 8008bb8:	6039      	str	r1, [r7, #0]
 8008bba:	6839      	ldr	r1, [r7, #0]
 8008bbc:	6878      	ldr	r0, [r7, #4]
 8008bbe:	f7ff ff8f 	bl	8008ae0 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6BufferEEEE3GetEm>
 8008bc2:	4603      	mov	r3, r0
 8008bc4:	4618      	mov	r0, r3
 8008bc6:	3708      	adds	r7, #8
 8008bc8:	46bd      	mov	sp, r7
 8008bca:	bd80      	pop	{r7, pc}

08008bcc <_ZNK11flatbuffers6VectorIhE4dataEv>:
  const T *data() const { return reinterpret_cast<const T *>(Data()); }
 8008bcc:	b580      	push	{r7, lr}
 8008bce:	b082      	sub	sp, #8
 8008bd0:	af00      	add	r7, sp, #0
 8008bd2:	6078      	str	r0, [r7, #4]
 8008bd4:	6878      	ldr	r0, [r7, #4]
 8008bd6:	f000 f917 	bl	8008e08 <_ZNK11flatbuffers6VectorIhE4DataEv>
 8008bda:	4603      	mov	r3, r0
 8008bdc:	4618      	mov	r0, r3
 8008bde:	3708      	adds	r7, #8
 8008be0:	46bd      	mov	sp, r7
 8008be2:	bd80      	pop	{r7, pc}

08008be4 <_ZN6tflite8internal33FlatBufferVectorToTfLiteTypeArrayIl14TfLiteIntArrayEE12TfLiteStatusPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterEPKN11flatbuffers6VectorIT_EEPPT0_>:
TfLiteStatus FlatBufferVectorToTfLiteTypeArray(
 8008be4:	b580      	push	{r7, lr}
 8008be6:	b084      	sub	sp, #16
 8008be8:	af00      	add	r7, sp, #0
 8008bea:	60f8      	str	r0, [r7, #12]
 8008bec:	60b9      	str	r1, [r7, #8]
 8008bee:	607a      	str	r2, [r7, #4]
 8008bf0:	603b      	str	r3, [r7, #0]
  TFLITE_DCHECK(error_reporter != nullptr);
 8008bf2:	68bb      	ldr	r3, [r7, #8]
 8008bf4:	2b00      	cmp	r3, #0
 8008bf6:	d101      	bne.n	8008bfc <_ZN6tflite8internal33FlatBufferVectorToTfLiteTypeArrayIl14TfLiteIntArrayEE12TfLiteStatusPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterEPKN11flatbuffers6VectorIT_EEPPT0_+0x18>
 8008bf8:	f007 fdd1 	bl	801079e <abort>
  TFLITE_DCHECK(flatbuffer_array != nullptr);
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	2b00      	cmp	r3, #0
 8008c00:	d101      	bne.n	8008c06 <_ZN6tflite8internal33FlatBufferVectorToTfLiteTypeArrayIl14TfLiteIntArrayEE12TfLiteStatusPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterEPKN11flatbuffers6VectorIT_EEPPT0_+0x22>
 8008c02:	f007 fdcc 	bl	801079e <abort>
    *result = const_cast<kTfLiteArrayType*>(
 8008c06:	683b      	ldr	r3, [r7, #0]
 8008c08:	687a      	ldr	r2, [r7, #4]
 8008c0a:	601a      	str	r2, [r3, #0]
  return kTfLiteOk;
 8008c0c:	2300      	movs	r3, #0
}
 8008c0e:	4618      	mov	r0, r3
 8008c10:	3710      	adds	r7, #16
 8008c12:	46bd      	mov	sp, r7
 8008c14:	bd80      	pop	{r7, pc}

08008c16 <_ZN6tflite8internal33FlatBufferVectorToTfLiteTypeArrayIf16TfLiteFloatArrayEE12TfLiteStatusPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterEPKN11flatbuffers6VectorIT_EEPPT0_>:
TfLiteStatus FlatBufferVectorToTfLiteTypeArray(
 8008c16:	b580      	push	{r7, lr}
 8008c18:	b084      	sub	sp, #16
 8008c1a:	af00      	add	r7, sp, #0
 8008c1c:	60f8      	str	r0, [r7, #12]
 8008c1e:	60b9      	str	r1, [r7, #8]
 8008c20:	607a      	str	r2, [r7, #4]
 8008c22:	603b      	str	r3, [r7, #0]
  TFLITE_DCHECK(error_reporter != nullptr);
 8008c24:	68bb      	ldr	r3, [r7, #8]
 8008c26:	2b00      	cmp	r3, #0
 8008c28:	d101      	bne.n	8008c2e <_ZN6tflite8internal33FlatBufferVectorToTfLiteTypeArrayIf16TfLiteFloatArrayEE12TfLiteStatusPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterEPKN11flatbuffers6VectorIT_EEPPT0_+0x18>
 8008c2a:	f007 fdb8 	bl	801079e <abort>
  TFLITE_DCHECK(flatbuffer_array != nullptr);
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	2b00      	cmp	r3, #0
 8008c32:	d101      	bne.n	8008c38 <_ZN6tflite8internal33FlatBufferVectorToTfLiteTypeArrayIf16TfLiteFloatArrayEE12TfLiteStatusPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterEPKN11flatbuffers6VectorIT_EEPPT0_+0x22>
 8008c34:	f007 fdb3 	bl	801079e <abort>
    *result = const_cast<kTfLiteArrayType*>(
 8008c38:	683b      	ldr	r3, [r7, #0]
 8008c3a:	687a      	ldr	r2, [r7, #4]
 8008c3c:	601a      	str	r2, [r3, #0]
  return kTfLiteOk;
 8008c3e:	2300      	movs	r3, #0
}
 8008c40:	4618      	mov	r0, r3
 8008c42:	3710      	adds	r7, #16
 8008c44:	46bd      	mov	sp, r7
 8008c46:	bd80      	pop	{r7, pc}

08008c48 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIhEEEET_t>:
  template<typename P> P GetPointer(voffset_t field) {
 8008c48:	b580      	push	{r7, lr}
 8008c4a:	b084      	sub	sp, #16
 8008c4c:	af00      	add	r7, sp, #0
 8008c4e:	6078      	str	r0, [r7, #4]
 8008c50:	460b      	mov	r3, r1
 8008c52:	807b      	strh	r3, [r7, #2]
    auto field_offset = GetOptionalFieldOffset(field);
 8008c54:	887b      	ldrh	r3, [r7, #2]
 8008c56:	4619      	mov	r1, r3
 8008c58:	6878      	ldr	r0, [r7, #4]
 8008c5a:	f7f8 fa45 	bl	80010e8 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
 8008c5e:	4603      	mov	r3, r0
 8008c60:	81fb      	strh	r3, [r7, #14]
    auto p = data_ + field_offset;
 8008c62:	687a      	ldr	r2, [r7, #4]
 8008c64:	89fb      	ldrh	r3, [r7, #14]
 8008c66:	4413      	add	r3, r2
 8008c68:	60bb      	str	r3, [r7, #8]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 8008c6a:	89fb      	ldrh	r3, [r7, #14]
 8008c6c:	2b00      	cmp	r3, #0
 8008c6e:	d006      	beq.n	8008c7e <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIhEEEET_t+0x36>
 8008c70:	68b8      	ldr	r0, [r7, #8]
 8008c72:	f7f8 fef5 	bl	8001a60 <_ZN11flatbuffers10ReadScalarImEET_PKv>
 8008c76:	4602      	mov	r2, r0
 8008c78:	68bb      	ldr	r3, [r7, #8]
 8008c7a:	4413      	add	r3, r2
                        : nullptr;
 8008c7c:	e000      	b.n	8008c80 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIhEEEET_t+0x38>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 8008c7e:	2300      	movs	r3, #0
  }
 8008c80:	4618      	mov	r0, r3
 8008c82:	3710      	adds	r7, #16
 8008c84:	46bd      	mov	sp, r7
 8008c86:	bd80      	pop	{r7, pc}

08008c88 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIfEEEET_t>:
  template<typename P> P GetPointer(voffset_t field) {
 8008c88:	b580      	push	{r7, lr}
 8008c8a:	b084      	sub	sp, #16
 8008c8c:	af00      	add	r7, sp, #0
 8008c8e:	6078      	str	r0, [r7, #4]
 8008c90:	460b      	mov	r3, r1
 8008c92:	807b      	strh	r3, [r7, #2]
    auto field_offset = GetOptionalFieldOffset(field);
 8008c94:	887b      	ldrh	r3, [r7, #2]
 8008c96:	4619      	mov	r1, r3
 8008c98:	6878      	ldr	r0, [r7, #4]
 8008c9a:	f7f8 fa25 	bl	80010e8 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
 8008c9e:	4603      	mov	r3, r0
 8008ca0:	81fb      	strh	r3, [r7, #14]
    auto p = data_ + field_offset;
 8008ca2:	687a      	ldr	r2, [r7, #4]
 8008ca4:	89fb      	ldrh	r3, [r7, #14]
 8008ca6:	4413      	add	r3, r2
 8008ca8:	60bb      	str	r3, [r7, #8]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 8008caa:	89fb      	ldrh	r3, [r7, #14]
 8008cac:	2b00      	cmp	r3, #0
 8008cae:	d006      	beq.n	8008cbe <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIfEEEET_t+0x36>
 8008cb0:	68b8      	ldr	r0, [r7, #8]
 8008cb2:	f7f8 fed5 	bl	8001a60 <_ZN11flatbuffers10ReadScalarImEET_PKv>
 8008cb6:	4602      	mov	r2, r0
 8008cb8:	68bb      	ldr	r3, [r7, #8]
 8008cba:	4413      	add	r3, r2
                        : nullptr;
 8008cbc:	e000      	b.n	8008cc0 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIfEEEET_t+0x38>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 8008cbe:	2300      	movs	r3, #0
  }
 8008cc0:	4618      	mov	r0, r3
 8008cc2:	3710      	adds	r7, #16
 8008cc4:	46bd      	mov	sp, r7
 8008cc6:	bd80      	pop	{r7, pc}

08008cc8 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIxEEEET_t>:
  template<typename P> P GetPointer(voffset_t field) {
 8008cc8:	b580      	push	{r7, lr}
 8008cca:	b084      	sub	sp, #16
 8008ccc:	af00      	add	r7, sp, #0
 8008cce:	6078      	str	r0, [r7, #4]
 8008cd0:	460b      	mov	r3, r1
 8008cd2:	807b      	strh	r3, [r7, #2]
    auto field_offset = GetOptionalFieldOffset(field);
 8008cd4:	887b      	ldrh	r3, [r7, #2]
 8008cd6:	4619      	mov	r1, r3
 8008cd8:	6878      	ldr	r0, [r7, #4]
 8008cda:	f7f8 fa05 	bl	80010e8 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
 8008cde:	4603      	mov	r3, r0
 8008ce0:	81fb      	strh	r3, [r7, #14]
    auto p = data_ + field_offset;
 8008ce2:	687a      	ldr	r2, [r7, #4]
 8008ce4:	89fb      	ldrh	r3, [r7, #14]
 8008ce6:	4413      	add	r3, r2
 8008ce8:	60bb      	str	r3, [r7, #8]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 8008cea:	89fb      	ldrh	r3, [r7, #14]
 8008cec:	2b00      	cmp	r3, #0
 8008cee:	d006      	beq.n	8008cfe <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIxEEEET_t+0x36>
 8008cf0:	68b8      	ldr	r0, [r7, #8]
 8008cf2:	f7f8 feb5 	bl	8001a60 <_ZN11flatbuffers10ReadScalarImEET_PKv>
 8008cf6:	4602      	mov	r2, r0
 8008cf8:	68bb      	ldr	r3, [r7, #8]
 8008cfa:	4413      	add	r3, r2
                        : nullptr;
 8008cfc:	e000      	b.n	8008d00 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIxEEEET_t+0x38>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 8008cfe:	2300      	movs	r3, #0
  }
 8008d00:	4618      	mov	r0, r3
 8008d02:	3710      	adds	r7, #16
 8008d04:	46bd      	mov	sp, r7
 8008d06:	bd80      	pop	{r7, pc}

08008d08 <_ZN11flatbuffers5Table10GetPointerIPKN6tflite22QuantizationParametersEEET_t>:
  template<typename P> P GetPointer(voffset_t field) {
 8008d08:	b580      	push	{r7, lr}
 8008d0a:	b084      	sub	sp, #16
 8008d0c:	af00      	add	r7, sp, #0
 8008d0e:	6078      	str	r0, [r7, #4]
 8008d10:	460b      	mov	r3, r1
 8008d12:	807b      	strh	r3, [r7, #2]
    auto field_offset = GetOptionalFieldOffset(field);
 8008d14:	887b      	ldrh	r3, [r7, #2]
 8008d16:	4619      	mov	r1, r3
 8008d18:	6878      	ldr	r0, [r7, #4]
 8008d1a:	f7f8 f9e5 	bl	80010e8 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
 8008d1e:	4603      	mov	r3, r0
 8008d20:	81fb      	strh	r3, [r7, #14]
    auto p = data_ + field_offset;
 8008d22:	687a      	ldr	r2, [r7, #4]
 8008d24:	89fb      	ldrh	r3, [r7, #14]
 8008d26:	4413      	add	r3, r2
 8008d28:	60bb      	str	r3, [r7, #8]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 8008d2a:	89fb      	ldrh	r3, [r7, #14]
 8008d2c:	2b00      	cmp	r3, #0
 8008d2e:	d006      	beq.n	8008d3e <_ZN11flatbuffers5Table10GetPointerIPKN6tflite22QuantizationParametersEEET_t+0x36>
 8008d30:	68b8      	ldr	r0, [r7, #8]
 8008d32:	f7f8 fe95 	bl	8001a60 <_ZN11flatbuffers10ReadScalarImEET_PKv>
 8008d36:	4602      	mov	r2, r0
 8008d38:	68bb      	ldr	r3, [r7, #8]
 8008d3a:	4413      	add	r3, r2
                        : nullptr;
 8008d3c:	e000      	b.n	8008d40 <_ZN11flatbuffers5Table10GetPointerIPKN6tflite22QuantizationParametersEEET_t+0x38>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 8008d3e:	2300      	movs	r3, #0
  }
 8008d40:	4618      	mov	r0, r3
 8008d42:	3710      	adds	r7, #16
 8008d44:	46bd      	mov	sp, r7
 8008d46:	bd80      	pop	{r7, pc}

08008d48 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite6TensorEEEEEEET_t>:
  template<typename P> P GetPointer(voffset_t field) {
 8008d48:	b580      	push	{r7, lr}
 8008d4a:	b084      	sub	sp, #16
 8008d4c:	af00      	add	r7, sp, #0
 8008d4e:	6078      	str	r0, [r7, #4]
 8008d50:	460b      	mov	r3, r1
 8008d52:	807b      	strh	r3, [r7, #2]
    auto field_offset = GetOptionalFieldOffset(field);
 8008d54:	887b      	ldrh	r3, [r7, #2]
 8008d56:	4619      	mov	r1, r3
 8008d58:	6878      	ldr	r0, [r7, #4]
 8008d5a:	f7f8 f9c5 	bl	80010e8 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
 8008d5e:	4603      	mov	r3, r0
 8008d60:	81fb      	strh	r3, [r7, #14]
    auto p = data_ + field_offset;
 8008d62:	687a      	ldr	r2, [r7, #4]
 8008d64:	89fb      	ldrh	r3, [r7, #14]
 8008d66:	4413      	add	r3, r2
 8008d68:	60bb      	str	r3, [r7, #8]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 8008d6a:	89fb      	ldrh	r3, [r7, #14]
 8008d6c:	2b00      	cmp	r3, #0
 8008d6e:	d006      	beq.n	8008d7e <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite6TensorEEEEEEET_t+0x36>
 8008d70:	68b8      	ldr	r0, [r7, #8]
 8008d72:	f7f8 fe75 	bl	8001a60 <_ZN11flatbuffers10ReadScalarImEET_PKv>
 8008d76:	4602      	mov	r2, r0
 8008d78:	68bb      	ldr	r3, [r7, #8]
 8008d7a:	4413      	add	r3, r2
                        : nullptr;
 8008d7c:	e000      	b.n	8008d80 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite6TensorEEEEEEET_t+0x38>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 8008d7e:	2300      	movs	r3, #0
  }
 8008d80:	4618      	mov	r0, r3
 8008d82:	3710      	adds	r7, #16
 8008d84:	46bd      	mov	sp, r7
 8008d86:	bd80      	pop	{r7, pc}

08008d88 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite6BufferEEEEEEET_t>:
  template<typename P> P GetPointer(voffset_t field) {
 8008d88:	b580      	push	{r7, lr}
 8008d8a:	b084      	sub	sp, #16
 8008d8c:	af00      	add	r7, sp, #0
 8008d8e:	6078      	str	r0, [r7, #4]
 8008d90:	460b      	mov	r3, r1
 8008d92:	807b      	strh	r3, [r7, #2]
    auto field_offset = GetOptionalFieldOffset(field);
 8008d94:	887b      	ldrh	r3, [r7, #2]
 8008d96:	4619      	mov	r1, r3
 8008d98:	6878      	ldr	r0, [r7, #4]
 8008d9a:	f7f8 f9a5 	bl	80010e8 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
 8008d9e:	4603      	mov	r3, r0
 8008da0:	81fb      	strh	r3, [r7, #14]
    auto p = data_ + field_offset;
 8008da2:	687a      	ldr	r2, [r7, #4]
 8008da4:	89fb      	ldrh	r3, [r7, #14]
 8008da6:	4413      	add	r3, r2
 8008da8:	60bb      	str	r3, [r7, #8]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 8008daa:	89fb      	ldrh	r3, [r7, #14]
 8008dac:	2b00      	cmp	r3, #0
 8008dae:	d006      	beq.n	8008dbe <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite6BufferEEEEEEET_t+0x36>
 8008db0:	68b8      	ldr	r0, [r7, #8]
 8008db2:	f7f8 fe55 	bl	8001a60 <_ZN11flatbuffers10ReadScalarImEET_PKv>
 8008db6:	4602      	mov	r2, r0
 8008db8:	68bb      	ldr	r3, [r7, #8]
 8008dba:	4413      	add	r3, r2
                        : nullptr;
 8008dbc:	e000      	b.n	8008dc0 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite6BufferEEEEEEET_t+0x38>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 8008dbe:	2300      	movs	r3, #0
  }
 8008dc0:	4618      	mov	r0, r3
 8008dc2:	3710      	adds	r7, #16
 8008dc4:	46bd      	mov	sp, r7
 8008dc6:	bd80      	pop	{r7, pc}

08008dc8 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite8MetadataEEEEEEET_t>:
  template<typename P> P GetPointer(voffset_t field) {
 8008dc8:	b580      	push	{r7, lr}
 8008dca:	b084      	sub	sp, #16
 8008dcc:	af00      	add	r7, sp, #0
 8008dce:	6078      	str	r0, [r7, #4]
 8008dd0:	460b      	mov	r3, r1
 8008dd2:	807b      	strh	r3, [r7, #2]
    auto field_offset = GetOptionalFieldOffset(field);
 8008dd4:	887b      	ldrh	r3, [r7, #2]
 8008dd6:	4619      	mov	r1, r3
 8008dd8:	6878      	ldr	r0, [r7, #4]
 8008dda:	f7f8 f985 	bl	80010e8 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
 8008dde:	4603      	mov	r3, r0
 8008de0:	81fb      	strh	r3, [r7, #14]
    auto p = data_ + field_offset;
 8008de2:	687a      	ldr	r2, [r7, #4]
 8008de4:	89fb      	ldrh	r3, [r7, #14]
 8008de6:	4413      	add	r3, r2
 8008de8:	60bb      	str	r3, [r7, #8]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 8008dea:	89fb      	ldrh	r3, [r7, #14]
 8008dec:	2b00      	cmp	r3, #0
 8008dee:	d006      	beq.n	8008dfe <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite8MetadataEEEEEEET_t+0x36>
 8008df0:	68b8      	ldr	r0, [r7, #8]
 8008df2:	f7f8 fe35 	bl	8001a60 <_ZN11flatbuffers10ReadScalarImEET_PKv>
 8008df6:	4602      	mov	r2, r0
 8008df8:	68bb      	ldr	r3, [r7, #8]
 8008dfa:	4413      	add	r3, r2
                        : nullptr;
 8008dfc:	e000      	b.n	8008e00 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite8MetadataEEEEEEET_t+0x38>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 8008dfe:	2300      	movs	r3, #0
  }
 8008e00:	4618      	mov	r0, r3
 8008e02:	3710      	adds	r7, #16
 8008e04:	46bd      	mov	sp, r7
 8008e06:	bd80      	pop	{r7, pc}

08008e08 <_ZNK11flatbuffers6VectorIhE4DataEv>:
  const uint8_t *Data() const {
 8008e08:	b480      	push	{r7}
 8008e0a:	b083      	sub	sp, #12
 8008e0c:	af00      	add	r7, sp, #0
 8008e0e:	6078      	str	r0, [r7, #4]
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	3304      	adds	r3, #4
  }
 8008e14:	4618      	mov	r0, r3
 8008e16:	370c      	adds	r7, #12
 8008e18:	46bd      	mov	sp, r7
 8008e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e1e:	4770      	bx	lr

08008e20 <_ZN11flatbuffers14IndirectHelperIfE4ReadEPKhm>:
  static return_type Read(const uint8_t *p, uoffset_t i) {
 8008e20:	b580      	push	{r7, lr}
 8008e22:	b082      	sub	sp, #8
 8008e24:	af00      	add	r7, sp, #0
 8008e26:	6078      	str	r0, [r7, #4]
 8008e28:	6039      	str	r1, [r7, #0]
    return EndianScalar((reinterpret_cast<const T *>(p))[i]);
 8008e2a:	683b      	ldr	r3, [r7, #0]
 8008e2c:	009b      	lsls	r3, r3, #2
 8008e2e:	687a      	ldr	r2, [r7, #4]
 8008e30:	4413      	add	r3, r2
 8008e32:	edd3 7a00 	vldr	s15, [r3]
 8008e36:	eeb0 0a67 	vmov.f32	s0, s15
 8008e3a:	f7fc f9a2 	bl	8005182 <_ZN11flatbuffers12EndianScalarIfEET_S1_>
 8008e3e:	eef0 7a40 	vmov.f32	s15, s0
  }
 8008e42:	eeb0 0a67 	vmov.f32	s0, s15
 8008e46:	3708      	adds	r7, #8
 8008e48:	46bd      	mov	sp, r7
 8008e4a:	bd80      	pop	{r7, pc}

08008e4c <_ZNK11flatbuffers6VectorIfE4DataEv>:
  const uint8_t *Data() const {
 8008e4c:	b480      	push	{r7}
 8008e4e:	b083      	sub	sp, #12
 8008e50:	af00      	add	r7, sp, #0
 8008e52:	6078      	str	r0, [r7, #4]
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	3304      	adds	r3, #4
  }
 8008e58:	4618      	mov	r0, r3
 8008e5a:	370c      	adds	r7, #12
 8008e5c:	46bd      	mov	sp, r7
 8008e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e62:	4770      	bx	lr

08008e64 <_ZN11flatbuffers14IndirectHelperIxE4ReadEPKhm>:
  static return_type Read(const uint8_t *p, uoffset_t i) {
 8008e64:	b580      	push	{r7, lr}
 8008e66:	b082      	sub	sp, #8
 8008e68:	af00      	add	r7, sp, #0
 8008e6a:	6078      	str	r0, [r7, #4]
 8008e6c:	6039      	str	r1, [r7, #0]
    return EndianScalar((reinterpret_cast<const T *>(p))[i]);
 8008e6e:	683b      	ldr	r3, [r7, #0]
 8008e70:	00db      	lsls	r3, r3, #3
 8008e72:	687a      	ldr	r2, [r7, #4]
 8008e74:	4413      	add	r3, r2
 8008e76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e7a:	4610      	mov	r0, r2
 8008e7c:	4619      	mov	r1, r3
 8008e7e:	f7fd fddd 	bl	8006a3c <_ZN11flatbuffers12EndianScalarIxEET_S1_>
 8008e82:	4602      	mov	r2, r0
 8008e84:	460b      	mov	r3, r1
  }
 8008e86:	4610      	mov	r0, r2
 8008e88:	4619      	mov	r1, r3
 8008e8a:	3708      	adds	r7, #8
 8008e8c:	46bd      	mov	sp, r7
 8008e8e:	bd80      	pop	{r7, pc}

08008e90 <_ZNK11flatbuffers6VectorIxE4DataEv>:
  const uint8_t *Data() const {
 8008e90:	b480      	push	{r7}
 8008e92:	b083      	sub	sp, #12
 8008e94:	af00      	add	r7, sp, #0
 8008e96:	6078      	str	r0, [r7, #4]
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	3304      	adds	r3, #4
  }
 8008e9c:	4618      	mov	r0, r3
 8008e9e:	370c      	adds	r7, #12
 8008ea0:	46bd      	mov	sp, r7
 8008ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ea6:	4770      	bx	lr

08008ea8 <_ZN11flatbuffers14IndirectHelperINS_6OffsetIN6tflite6TensorEEEE4ReadEPKhm>:
  static return_type Read(const uint8_t *p, uoffset_t i) {
 8008ea8:	b580      	push	{r7, lr}
 8008eaa:	b082      	sub	sp, #8
 8008eac:	af00      	add	r7, sp, #0
 8008eae:	6078      	str	r0, [r7, #4]
 8008eb0:	6039      	str	r1, [r7, #0]
    p += i * sizeof(uoffset_t);
 8008eb2:	683b      	ldr	r3, [r7, #0]
 8008eb4:	009b      	lsls	r3, r3, #2
 8008eb6:	687a      	ldr	r2, [r7, #4]
 8008eb8:	4413      	add	r3, r2
 8008eba:	607b      	str	r3, [r7, #4]
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
 8008ebc:	6878      	ldr	r0, [r7, #4]
 8008ebe:	f7f8 fdcf 	bl	8001a60 <_ZN11flatbuffers10ReadScalarImEET_PKv>
 8008ec2:	4602      	mov	r2, r0
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	4413      	add	r3, r2
  }
 8008ec8:	4618      	mov	r0, r3
 8008eca:	3708      	adds	r7, #8
 8008ecc:	46bd      	mov	sp, r7
 8008ece:	bd80      	pop	{r7, pc}

08008ed0 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEE4DataEv>:
  const uint8_t *Data() const {
 8008ed0:	b480      	push	{r7}
 8008ed2:	b083      	sub	sp, #12
 8008ed4:	af00      	add	r7, sp, #0
 8008ed6:	6078      	str	r0, [r7, #4]
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	3304      	adds	r3, #4
  }
 8008edc:	4618      	mov	r0, r3
 8008ede:	370c      	adds	r7, #12
 8008ee0:	46bd      	mov	sp, r7
 8008ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ee6:	4770      	bx	lr

08008ee8 <_ZN11flatbuffers14IndirectHelperINS_6OffsetIN6tflite8OperatorEEEE4ReadEPKhm>:
  static return_type Read(const uint8_t *p, uoffset_t i) {
 8008ee8:	b580      	push	{r7, lr}
 8008eea:	b082      	sub	sp, #8
 8008eec:	af00      	add	r7, sp, #0
 8008eee:	6078      	str	r0, [r7, #4]
 8008ef0:	6039      	str	r1, [r7, #0]
    p += i * sizeof(uoffset_t);
 8008ef2:	683b      	ldr	r3, [r7, #0]
 8008ef4:	009b      	lsls	r3, r3, #2
 8008ef6:	687a      	ldr	r2, [r7, #4]
 8008ef8:	4413      	add	r3, r2
 8008efa:	607b      	str	r3, [r7, #4]
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
 8008efc:	6878      	ldr	r0, [r7, #4]
 8008efe:	f7f8 fdaf 	bl	8001a60 <_ZN11flatbuffers10ReadScalarImEET_PKv>
 8008f02:	4602      	mov	r2, r0
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	4413      	add	r3, r2
  }
 8008f08:	4618      	mov	r0, r3
 8008f0a:	3708      	adds	r7, #8
 8008f0c:	46bd      	mov	sp, r7
 8008f0e:	bd80      	pop	{r7, pc}

08008f10 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8OperatorEEEE4DataEv>:
  const uint8_t *Data() const {
 8008f10:	b480      	push	{r7}
 8008f12:	b083      	sub	sp, #12
 8008f14:	af00      	add	r7, sp, #0
 8008f16:	6078      	str	r0, [r7, #4]
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	3304      	adds	r3, #4
  }
 8008f1c:	4618      	mov	r0, r3
 8008f1e:	370c      	adds	r7, #12
 8008f20:	46bd      	mov	sp, r7
 8008f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f26:	4770      	bx	lr

08008f28 <_ZN11flatbuffers14IndirectHelperINS_6OffsetIN6tflite6BufferEEEE4ReadEPKhm>:
  static return_type Read(const uint8_t *p, uoffset_t i) {
 8008f28:	b580      	push	{r7, lr}
 8008f2a:	b082      	sub	sp, #8
 8008f2c:	af00      	add	r7, sp, #0
 8008f2e:	6078      	str	r0, [r7, #4]
 8008f30:	6039      	str	r1, [r7, #0]
    p += i * sizeof(uoffset_t);
 8008f32:	683b      	ldr	r3, [r7, #0]
 8008f34:	009b      	lsls	r3, r3, #2
 8008f36:	687a      	ldr	r2, [r7, #4]
 8008f38:	4413      	add	r3, r2
 8008f3a:	607b      	str	r3, [r7, #4]
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
 8008f3c:	6878      	ldr	r0, [r7, #4]
 8008f3e:	f7f8 fd8f 	bl	8001a60 <_ZN11flatbuffers10ReadScalarImEET_PKv>
 8008f42:	4602      	mov	r2, r0
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	4413      	add	r3, r2
  }
 8008f48:	4618      	mov	r0, r3
 8008f4a:	3708      	adds	r7, #8
 8008f4c:	46bd      	mov	sp, r7
 8008f4e:	bd80      	pop	{r7, pc}

08008f50 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6BufferEEEE4DataEv>:
  const uint8_t *Data() const {
 8008f50:	b480      	push	{r7}
 8008f52:	b083      	sub	sp, #12
 8008f54:	af00      	add	r7, sp, #0
 8008f56:	6078      	str	r0, [r7, #4]
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	3304      	adds	r3, #4
  }
 8008f5c:	4618      	mov	r0, r3
 8008f5e:	370c      	adds	r7, #12
 8008f60:	46bd      	mov	sp, r7
 8008f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f66:	4770      	bx	lr

08008f68 <_ZN11flatbuffers14IndirectHelperINS_6OffsetIN6tflite8MetadataEEEE4ReadEPKhm>:
  static return_type Read(const uint8_t *p, uoffset_t i) {
 8008f68:	b580      	push	{r7, lr}
 8008f6a:	b082      	sub	sp, #8
 8008f6c:	af00      	add	r7, sp, #0
 8008f6e:	6078      	str	r0, [r7, #4]
 8008f70:	6039      	str	r1, [r7, #0]
    p += i * sizeof(uoffset_t);
 8008f72:	683b      	ldr	r3, [r7, #0]
 8008f74:	009b      	lsls	r3, r3, #2
 8008f76:	687a      	ldr	r2, [r7, #4]
 8008f78:	4413      	add	r3, r2
 8008f7a:	607b      	str	r3, [r7, #4]
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
 8008f7c:	6878      	ldr	r0, [r7, #4]
 8008f7e:	f7f8 fd6f 	bl	8001a60 <_ZN11flatbuffers10ReadScalarImEET_PKv>
 8008f82:	4602      	mov	r2, r0
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	4413      	add	r3, r2
  }
 8008f88:	4618      	mov	r0, r3
 8008f8a:	3708      	adds	r7, #8
 8008f8c:	46bd      	mov	sp, r7
 8008f8e:	bd80      	pop	{r7, pc}

08008f90 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8MetadataEEEE4DataEv>:
  const uint8_t *Data() const {
 8008f90:	b480      	push	{r7}
 8008f92:	b083      	sub	sp, #12
 8008f94:	af00      	add	r7, sp, #0
 8008f96:	6078      	str	r0, [r7, #4]
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	3304      	adds	r3, #4
  }
 8008f9c:	4618      	mov	r0, r3
 8008f9e:	370c      	adds	r7, #12
 8008fa0:	46bd      	mov	sp, r7
 8008fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fa6:	4770      	bx	lr

08008fa8 <_ZN6tflite12_GLOBAL__N_125MicroBuiltinDataAllocatorD1Ev>:
class MicroBuiltinDataAllocator : public BuiltinDataAllocator {
 8008fa8:	b580      	push	{r7, lr}
 8008faa:	b082      	sub	sp, #8
 8008fac:	af00      	add	r7, sp, #0
 8008fae:	6078      	str	r0, [r7, #4]
 8008fb0:	4a05      	ldr	r2, [pc, #20]	; (8008fc8 <_ZN6tflite12_GLOBAL__N_125MicroBuiltinDataAllocatorD1Ev+0x20>)
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	601a      	str	r2, [r3, #0]
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	4618      	mov	r0, r3
 8008fba:	f7fe f8af 	bl	800711c <_ZN6tflite20BuiltinDataAllocatorD1Ev>
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	4618      	mov	r0, r3
 8008fc2:	3708      	adds	r7, #8
 8008fc4:	46bd      	mov	sp, r7
 8008fc6:	bd80      	pop	{r7, pc}
 8008fc8:	0801cee0 	.word	0x0801cee0

08008fcc <_ZN6tflite12_GLOBAL__N_125MicroBuiltinDataAllocatorD0Ev>:
 8008fcc:	b580      	push	{r7, lr}
 8008fce:	b082      	sub	sp, #8
 8008fd0:	af00      	add	r7, sp, #0
 8008fd2:	6078      	str	r0, [r7, #4]
 8008fd4:	6878      	ldr	r0, [r7, #4]
 8008fd6:	f7ff ffe7 	bl	8008fa8 <_ZN6tflite12_GLOBAL__N_125MicroBuiltinDataAllocatorD1Ev>
 8008fda:	2108      	movs	r1, #8
 8008fdc:	6878      	ldr	r0, [r7, #4]
 8008fde:	f007 f958 	bl	8010292 <_ZdlPvj>
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	4618      	mov	r0, r3
 8008fe6:	3708      	adds	r7, #8
 8008fe8:	46bd      	mov	sp, r7
 8008fea:	bd80      	pop	{r7, pc}

08008fec <_ZN12_GLOBAL__N_13LogEPKcSt9__va_list>:

namespace {
uint8_t micro_error_reporter_buffer[sizeof(tflite::MicroErrorReporter)];
tflite::MicroErrorReporter* error_reporter_ = nullptr;

void Log(const char* format, va_list args) {
 8008fec:	b580      	push	{r7, lr}
 8008fee:	b0c2      	sub	sp, #264	; 0x108
 8008ff0:	af00      	add	r7, sp, #0
 8008ff2:	1d3b      	adds	r3, r7, #4
 8008ff4:	6018      	str	r0, [r3, #0]
 8008ff6:	463b      	mov	r3, r7
 8008ff8:	6019      	str	r1, [r3, #0]
  // Only pulling in the implementation of this function for builds where we
  // expect to make use of it to be extra cautious about not increasing the code
  // size.
  static constexpr int kMaxLogLen = 256;
  char log_buffer[kMaxLogLen];
  MicroVsnprintf(log_buffer, kMaxLogLen, format, args);
 8008ffa:	463b      	mov	r3, r7
 8008ffc:	1d3a      	adds	r2, r7, #4
 8008ffe:	f107 0008 	add.w	r0, r7, #8
 8009002:	681b      	ldr	r3, [r3, #0]
 8009004:	6812      	ldr	r2, [r2, #0]
 8009006:	f44f 7180 	mov.w	r1, #256	; 0x100
 800900a:	f001 fbe1 	bl	800a7d0 <MicroVsnprintf>
  DebugLog(log_buffer);
 800900e:	f107 0308 	add.w	r3, r7, #8
 8009012:	4618      	mov	r0, r3
 8009014:	f7fd fc4e 	bl	80068b4 <DebugLog>
  DebugLog("\r\n");
 8009018:	4803      	ldr	r0, [pc, #12]	; (8009028 <_ZN12_GLOBAL__N_13LogEPKcSt9__va_list+0x3c>)
 800901a:	f7fd fc4b 	bl	80068b4 <DebugLog>
#endif
}
 800901e:	bf00      	nop
 8009020:	f507 7784 	add.w	r7, r7, #264	; 0x108
 8009024:	46bd      	mov	sp, r7
 8009026:	bd80      	pop	{r7, pc}
 8009028:	08015904 	.word	0x08015904

0800902c <_Z11MicroPrintfPKcz>:

}  // namespace

#if !defined(TF_LITE_STRIP_ERROR_STRINGS)
void MicroPrintf(const char* format, ...) {
 800902c:	b40f      	push	{r0, r1, r2, r3}
 800902e:	b580      	push	{r7, lr}
 8009030:	b082      	sub	sp, #8
 8009032:	af00      	add	r7, sp, #0
  va_list args;
  va_start(args, format);
 8009034:	f107 0314 	add.w	r3, r7, #20
 8009038:	607b      	str	r3, [r7, #4]
  Log(format, args);
 800903a:	6879      	ldr	r1, [r7, #4]
 800903c:	6938      	ldr	r0, [r7, #16]
 800903e:	f7ff ffd5 	bl	8008fec <_ZN12_GLOBAL__N_13LogEPKcSt9__va_list>
  va_end(args);
}
 8009042:	bf00      	nop
 8009044:	3708      	adds	r7, #8
 8009046:	46bd      	mov	sp, r7
 8009048:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800904c:	b004      	add	sp, #16
 800904e:	4770      	bx	lr

08009050 <_ZN6tflite18MicroErrorReporter6ReportEPKcSt9__va_list>:
    error_reporter_ = new (micro_error_reporter_buffer) MicroErrorReporter();
  }
  return error_reporter_;
}

int MicroErrorReporter::Report(const char* format, va_list args) {
 8009050:	b580      	push	{r7, lr}
 8009052:	b084      	sub	sp, #16
 8009054:	af00      	add	r7, sp, #0
 8009056:	60f8      	str	r0, [r7, #12]
 8009058:	60b9      	str	r1, [r7, #8]
 800905a:	607a      	str	r2, [r7, #4]
  Log(format, args);
 800905c:	6879      	ldr	r1, [r7, #4]
 800905e:	68b8      	ldr	r0, [r7, #8]
 8009060:	f7ff ffc4 	bl	8008fec <_ZN12_GLOBAL__N_13LogEPKcSt9__va_list>
  return 0;
 8009064:	2300      	movs	r3, #0
}
 8009066:	4618      	mov	r0, r3
 8009068:	3710      	adds	r7, #16
 800906a:	46bd      	mov	sp, r7
 800906c:	bd80      	pop	{r7, pc}

0800906e <_ZN6tflite19ScopedMicroProfilerC1EPKcPNS_13MicroProfilerE>:
//   ScopedMicroProfiler scoped_profiler("custom_tag", profiler);
//   work_to_profile();
// }
class ScopedMicroProfiler {
 public:
  explicit ScopedMicroProfiler(const char* tag, MicroProfiler* profiler)
 800906e:	b580      	push	{r7, lr}
 8009070:	b084      	sub	sp, #16
 8009072:	af00      	add	r7, sp, #0
 8009074:	60f8      	str	r0, [r7, #12]
 8009076:	60b9      	str	r1, [r7, #8]
 8009078:	607a      	str	r2, [r7, #4]
      : profiler_(profiler) {
 800907a:	68fb      	ldr	r3, [r7, #12]
 800907c:	2200      	movs	r2, #0
 800907e:	601a      	str	r2, [r3, #0]
 8009080:	68fb      	ldr	r3, [r7, #12]
 8009082:	687a      	ldr	r2, [r7, #4]
 8009084:	605a      	str	r2, [r3, #4]
    if (profiler_ != nullptr) {
 8009086:	68fb      	ldr	r3, [r7, #12]
 8009088:	685b      	ldr	r3, [r3, #4]
 800908a:	2b00      	cmp	r3, #0
 800908c:	d00c      	beq.n	80090a8 <_ZN6tflite19ScopedMicroProfilerC1EPKcPNS_13MicroProfilerE+0x3a>
      event_handle_ = profiler_->BeginEvent(tag);
 800908e:	68fb      	ldr	r3, [r7, #12]
 8009090:	685a      	ldr	r2, [r3, #4]
 8009092:	68fb      	ldr	r3, [r7, #12]
 8009094:	685b      	ldr	r3, [r3, #4]
 8009096:	681b      	ldr	r3, [r3, #0]
 8009098:	3308      	adds	r3, #8
 800909a:	681b      	ldr	r3, [r3, #0]
 800909c:	68b9      	ldr	r1, [r7, #8]
 800909e:	4610      	mov	r0, r2
 80090a0:	4798      	blx	r3
 80090a2:	4602      	mov	r2, r0
 80090a4:	68fb      	ldr	r3, [r7, #12]
 80090a6:	601a      	str	r2, [r3, #0]
    }
  }
 80090a8:	68fb      	ldr	r3, [r7, #12]
 80090aa:	4618      	mov	r0, r3
 80090ac:	3710      	adds	r7, #16
 80090ae:	46bd      	mov	sp, r7
 80090b0:	bd80      	pop	{r7, pc}

080090b2 <_ZN6tflite19ScopedMicroProfilerD1Ev>:

  ~ScopedMicroProfiler() {
 80090b2:	b580      	push	{r7, lr}
 80090b4:	b082      	sub	sp, #8
 80090b6:	af00      	add	r7, sp, #0
 80090b8:	6078      	str	r0, [r7, #4]
    if (profiler_ != nullptr) {
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	685b      	ldr	r3, [r3, #4]
 80090be:	2b00      	cmp	r3, #0
 80090c0:	d00a      	beq.n	80090d8 <_ZN6tflite19ScopedMicroProfilerD1Ev+0x26>
      profiler_->EndEvent(event_handle_);
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	6858      	ldr	r0, [r3, #4]
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	685b      	ldr	r3, [r3, #4]
 80090ca:	681b      	ldr	r3, [r3, #0]
 80090cc:	330c      	adds	r3, #12
 80090ce:	681b      	ldr	r3, [r3, #0]
 80090d0:	687a      	ldr	r2, [r7, #4]
 80090d2:	6812      	ldr	r2, [r2, #0]
 80090d4:	4611      	mov	r1, r2
 80090d6:	4798      	blx	r3
    }
  }
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	4618      	mov	r0, r3
 80090dc:	3708      	adds	r7, #8
 80090de:	46bd      	mov	sp, r7
 80090e0:	bd80      	pop	{r7, pc}

080090e2 <_ZN6tflite12_GLOBAL__N_122OpNameFromRegistrationEPK18TfLiteRegistration>:

namespace tflite {
namespace {

#ifndef TF_LITE_STRIP_ERROR_STRINGS
const char* OpNameFromRegistration(const TfLiteRegistration* registration) {
 80090e2:	b580      	push	{r7, lr}
 80090e4:	b082      	sub	sp, #8
 80090e6:	af00      	add	r7, sp, #0
 80090e8:	6078      	str	r0, [r7, #4]
  if (registration->builtin_code == BuiltinOperator_CUSTOM) {
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	695b      	ldr	r3, [r3, #20]
 80090ee:	2b20      	cmp	r3, #32
 80090f0:	d102      	bne.n	80090f8 <_ZN6tflite12_GLOBAL__N_122OpNameFromRegistrationEPK18TfLiteRegistration+0x16>
    return registration->custom_name;
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	699b      	ldr	r3, [r3, #24]
 80090f6:	e007      	b.n	8009108 <_ZN6tflite12_GLOBAL__N_122OpNameFromRegistrationEPK18TfLiteRegistration+0x26>
  } else {
    return EnumNameBuiltinOperator(BuiltinOperator(registration->builtin_code));
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	695b      	ldr	r3, [r3, #20]
 80090fc:	b2db      	uxtb	r3, r3
 80090fe:	4618      	mov	r0, r3
 8009100:	f7fc fc28 	bl	8005954 <_ZN6tflite23EnumNameBuiltinOperatorENS_15BuiltinOperatorE>
 8009104:	4603      	mov	r3, r0
 8009106:	bf00      	nop
  }
}
 8009108:	4618      	mov	r0, r3
 800910a:	3708      	adds	r7, #8
 800910c:	46bd      	mov	sp, r7
 800910e:	bd80      	pop	{r7, pc}

08009110 <_ZN6tflite10MicroGraphC1EP13TfLiteContextPKNS_5ModelEPNS_14MicroAllocatorE>:
#endif  // !defined(TF_LITE_STRIP_ERROR_STRINGS)

}  // namespace

MicroGraph::MicroGraph(TfLiteContext* context, const Model* model,
 8009110:	b580      	push	{r7, lr}
 8009112:	b084      	sub	sp, #16
 8009114:	af00      	add	r7, sp, #0
 8009116:	60f8      	str	r0, [r7, #12]
 8009118:	60b9      	str	r1, [r7, #8]
 800911a:	607a      	str	r2, [r7, #4]
 800911c:	603b      	str	r3, [r7, #0]
                       MicroAllocator* allocator)
    : context_(context),
      model_(model),
      allocator_(allocator),
      current_subgraph_index_(0) {
 800911e:	4a10      	ldr	r2, [pc, #64]	; (8009160 <_ZN6tflite10MicroGraphC1EP13TfLiteContextPKNS_5ModelEPNS_14MicroAllocatorE+0x50>)
 8009120:	68fb      	ldr	r3, [r7, #12]
 8009122:	601a      	str	r2, [r3, #0]
 8009124:	68fb      	ldr	r3, [r7, #12]
 8009126:	68ba      	ldr	r2, [r7, #8]
 8009128:	605a      	str	r2, [r3, #4]
 800912a:	68fb      	ldr	r3, [r7, #12]
 800912c:	687a      	ldr	r2, [r7, #4]
 800912e:	609a      	str	r2, [r3, #8]
 8009130:	68fb      	ldr	r3, [r7, #12]
 8009132:	683a      	ldr	r2, [r7, #0]
 8009134:	60da      	str	r2, [r3, #12]
 8009136:	68fb      	ldr	r3, [r7, #12]
 8009138:	2200      	movs	r2, #0
 800913a:	611a      	str	r2, [r3, #16]
 800913c:	68fb      	ldr	r3, [r7, #12]
 800913e:	2200      	movs	r2, #0
 8009140:	615a      	str	r2, [r3, #20]
  if (model != nullptr) {
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	2b00      	cmp	r3, #0
 8009146:	d005      	beq.n	8009154 <_ZN6tflite10MicroGraphC1EP13TfLiteContextPKNS_5ModelEPNS_14MicroAllocatorE+0x44>
    subgraphs_ = model->subgraphs();
 8009148:	6878      	ldr	r0, [r7, #4]
 800914a:	f7fd fbd3 	bl	80068f4 <_ZNK6tflite5Model9subgraphsEv>
 800914e:	4602      	mov	r2, r0
 8009150:	68fb      	ldr	r3, [r7, #12]
 8009152:	619a      	str	r2, [r3, #24]
  }
}
 8009154:	68fb      	ldr	r3, [r7, #12]
 8009156:	4618      	mov	r0, r3
 8009158:	3710      	adds	r7, #16
 800915a:	46bd      	mov	sp, r7
 800915c:	bd80      	pop	{r7, pc}
 800915e:	bf00      	nop
 8009160:	0801cf60 	.word	0x0801cf60

08009164 <_ZN6tflite10MicroGraphD1Ev>:

MicroGraph::~MicroGraph() {}
 8009164:	b480      	push	{r7}
 8009166:	b083      	sub	sp, #12
 8009168:	af00      	add	r7, sp, #0
 800916a:	6078      	str	r0, [r7, #4]
 800916c:	4a04      	ldr	r2, [pc, #16]	; (8009180 <_ZN6tflite10MicroGraphD1Ev+0x1c>)
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	601a      	str	r2, [r3, #0]
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	4618      	mov	r0, r3
 8009176:	370c      	adds	r7, #12
 8009178:	46bd      	mov	sp, r7
 800917a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800917e:	4770      	bx	lr
 8009180:	0801cf60 	.word	0x0801cf60

08009184 <_ZN6tflite10MicroGraphD0Ev>:
 8009184:	b580      	push	{r7, lr}
 8009186:	b082      	sub	sp, #8
 8009188:	af00      	add	r7, sp, #0
 800918a:	6078      	str	r0, [r7, #4]
 800918c:	6878      	ldr	r0, [r7, #4]
 800918e:	f7ff ffe9 	bl	8009164 <_ZN6tflite10MicroGraphD1Ev>
 8009192:	211c      	movs	r1, #28
 8009194:	6878      	ldr	r0, [r7, #4]
 8009196:	f007 f87c 	bl	8010292 <_ZdlPvj>
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	4618      	mov	r0, r3
 800919e:	3708      	adds	r7, #8
 80091a0:	46bd      	mov	sp, r7
 80091a2:	bd80      	pop	{r7, pc}

080091a4 <_ZN6tflite10MicroGraph13InitSubgraphsEv>:

TfLiteStatus MicroGraph::InitSubgraphs() {
 80091a4:	b580      	push	{r7, lr}
 80091a6:	b08a      	sub	sp, #40	; 0x28
 80091a8:	af00      	add	r7, sp, #0
 80091aa:	6078      	str	r0, [r7, #4]
  int previous_subgraph_idx = current_subgraph_index_;
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	695b      	ldr	r3, [r3, #20]
 80091b0:	617b      	str	r3, [r7, #20]

  for (size_t subgraph_idx = 0; subgraph_idx < subgraphs_->size();
 80091b2:	2300      	movs	r3, #0
 80091b4:	627b      	str	r3, [r7, #36]	; 0x24
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	699b      	ldr	r3, [r3, #24]
 80091ba:	4618      	mov	r0, r3
 80091bc:	f7fd fc0a 	bl	80069d4 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE4sizeEv>
 80091c0:	4602      	mov	r2, r0
 80091c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091c4:	4293      	cmp	r3, r2
 80091c6:	bf34      	ite	cc
 80091c8:	2301      	movcc	r3, #1
 80091ca:	2300      	movcs	r3, #0
 80091cc:	b2db      	uxtb	r3, r3
 80091ce:	2b00      	cmp	r3, #0
 80091d0:	d04f      	beq.n	8009272 <_ZN6tflite10MicroGraph13InitSubgraphsEv+0xce>
       subgraph_idx++) {
    current_subgraph_index_ = subgraph_idx;
 80091d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	615a      	str	r2, [r3, #20]
    uint32_t operators_size = NumSubgraphOperators(model_, subgraph_idx);
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	689b      	ldr	r3, [r3, #8]
 80091dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80091de:	4611      	mov	r1, r2
 80091e0:	4618      	mov	r0, r3
 80091e2:	f7fd fbb2 	bl	800694a <_ZN6tflite20NumSubgraphOperatorsEPKNS_5ModelEi>
 80091e6:	6138      	str	r0, [r7, #16]
    for (size_t i = 0; i < operators_size; ++i) {
 80091e8:	2300      	movs	r3, #0
 80091ea:	623b      	str	r3, [r7, #32]
 80091ec:	6a3a      	ldr	r2, [r7, #32]
 80091ee:	693b      	ldr	r3, [r7, #16]
 80091f0:	429a      	cmp	r2, r3
 80091f2:	d23a      	bcs.n	800926a <_ZN6tflite10MicroGraph13InitSubgraphsEv+0xc6>
      TfLiteNode* node =
          &(subgraph_allocations_[subgraph_idx].node_and_registrations[i].node);
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	691a      	ldr	r2, [r3, #16]
 80091f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091fa:	00db      	lsls	r3, r3, #3
 80091fc:	4413      	add	r3, r2
 80091fe:	681a      	ldr	r2, [r3, #0]
 8009200:	6a3b      	ldr	r3, [r7, #32]
 8009202:	212c      	movs	r1, #44	; 0x2c
 8009204:	fb01 f303 	mul.w	r3, r1, r3
 8009208:	4413      	add	r3, r2
      TfLiteNode* node =
 800920a:	60fb      	str	r3, [r7, #12]
      const TfLiteRegistration* registration =
          subgraph_allocations_[subgraph_idx]
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	691a      	ldr	r2, [r3, #16]
 8009210:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009212:	00db      	lsls	r3, r3, #3
 8009214:	4413      	add	r3, r2
              .node_and_registrations[i]
 8009216:	681a      	ldr	r2, [r3, #0]
 8009218:	6a3b      	ldr	r3, [r7, #32]
 800921a:	212c      	movs	r1, #44	; 0x2c
 800921c:	fb01 f303 	mul.w	r3, r1, r3
 8009220:	4413      	add	r3, r2
      const TfLiteRegistration* registration =
 8009222:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009224:	60bb      	str	r3, [r7, #8]
              .registration;
      size_t init_data_size;
      const char* init_data;
      if (registration->builtin_code == BuiltinOperator_CUSTOM) {
 8009226:	68bb      	ldr	r3, [r7, #8]
 8009228:	695b      	ldr	r3, [r3, #20]
 800922a:	2b20      	cmp	r3, #32
 800922c:	d106      	bne.n	800923c <_ZN6tflite10MicroGraph13InitSubgraphsEv+0x98>
        init_data = reinterpret_cast<const char*>(node->custom_initial_data);
 800922e:	68fb      	ldr	r3, [r7, #12]
 8009230:	699b      	ldr	r3, [r3, #24]
 8009232:	61bb      	str	r3, [r7, #24]
        init_data_size = node->custom_initial_data_size;
 8009234:	68fb      	ldr	r3, [r7, #12]
 8009236:	69db      	ldr	r3, [r3, #28]
 8009238:	61fb      	str	r3, [r7, #28]
 800923a:	e004      	b.n	8009246 <_ZN6tflite10MicroGraph13InitSubgraphsEv+0xa2>
      } else {
        init_data = reinterpret_cast<const char*>(node->builtin_data);
 800923c:	68fb      	ldr	r3, [r7, #12]
 800923e:	695b      	ldr	r3, [r3, #20]
 8009240:	61bb      	str	r3, [r7, #24]
        init_data_size = 0;
 8009242:	2300      	movs	r3, #0
 8009244:	61fb      	str	r3, [r7, #28]
      }
      if (registration->init) {
 8009246:	68bb      	ldr	r3, [r7, #8]
 8009248:	681b      	ldr	r3, [r3, #0]
 800924a:	2b00      	cmp	r3, #0
 800924c:	d009      	beq.n	8009262 <_ZN6tflite10MicroGraph13InitSubgraphsEv+0xbe>
        node->user_data =
            registration->init(context_, init_data, init_data_size);
 800924e:	68bb      	ldr	r3, [r7, #8]
 8009250:	681b      	ldr	r3, [r3, #0]
 8009252:	687a      	ldr	r2, [r7, #4]
 8009254:	6850      	ldr	r0, [r2, #4]
 8009256:	69fa      	ldr	r2, [r7, #28]
 8009258:	69b9      	ldr	r1, [r7, #24]
 800925a:	4798      	blx	r3
 800925c:	4602      	mov	r2, r0
        node->user_data =
 800925e:	68fb      	ldr	r3, [r7, #12]
 8009260:	611a      	str	r2, [r3, #16]
    for (size_t i = 0; i < operators_size; ++i) {
 8009262:	6a3b      	ldr	r3, [r7, #32]
 8009264:	3301      	adds	r3, #1
 8009266:	623b      	str	r3, [r7, #32]
 8009268:	e7c0      	b.n	80091ec <_ZN6tflite10MicroGraph13InitSubgraphsEv+0x48>
  for (size_t subgraph_idx = 0; subgraph_idx < subgraphs_->size();
 800926a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800926c:	3301      	adds	r3, #1
 800926e:	627b      	str	r3, [r7, #36]	; 0x24
 8009270:	e7a1      	b.n	80091b6 <_ZN6tflite10MicroGraph13InitSubgraphsEv+0x12>
      }
    }
  }
  current_subgraph_index_ = previous_subgraph_idx;
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	697a      	ldr	r2, [r7, #20]
 8009276:	615a      	str	r2, [r3, #20]

  return kTfLiteOk;
 8009278:	2300      	movs	r3, #0
}
 800927a:	4618      	mov	r0, r3
 800927c:	3728      	adds	r7, #40	; 0x28
 800927e:	46bd      	mov	sp, r7
 8009280:	bd80      	pop	{r7, pc}
	...

08009284 <_ZN6tflite10MicroGraph16PrepareSubgraphsEv>:

TfLiteStatus MicroGraph::PrepareSubgraphs() {
 8009284:	b580      	push	{r7, lr}
 8009286:	b08a      	sub	sp, #40	; 0x28
 8009288:	af00      	add	r7, sp, #0
 800928a:	6078      	str	r0, [r7, #4]
  int previous_subgraph_idx = current_subgraph_index_;
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	695b      	ldr	r3, [r3, #20]
 8009290:	61fb      	str	r3, [r7, #28]

  for (size_t subgraph_idx = 0; subgraph_idx < subgraphs_->size();
 8009292:	2300      	movs	r3, #0
 8009294:	627b      	str	r3, [r7, #36]	; 0x24
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	699b      	ldr	r3, [r3, #24]
 800929a:	4618      	mov	r0, r3
 800929c:	f7fd fb9a 	bl	80069d4 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE4sizeEv>
 80092a0:	4602      	mov	r2, r0
 80092a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092a4:	4293      	cmp	r3, r2
 80092a6:	bf34      	ite	cc
 80092a8:	2301      	movcc	r3, #1
 80092aa:	2300      	movcs	r3, #0
 80092ac:	b2db      	uxtb	r3, r3
 80092ae:	2b00      	cmp	r3, #0
 80092b0:	d053      	beq.n	800935a <_ZN6tflite10MicroGraph16PrepareSubgraphsEv+0xd6>
       subgraph_idx++) {
    current_subgraph_index_ = subgraph_idx;
 80092b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	615a      	str	r2, [r3, #20]
    uint32_t operators_size = NumSubgraphOperators(model_, subgraph_idx);
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	689b      	ldr	r3, [r3, #8]
 80092bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80092be:	4611      	mov	r1, r2
 80092c0:	4618      	mov	r0, r3
 80092c2:	f7fd fb42 	bl	800694a <_ZN6tflite20NumSubgraphOperatorsEPKNS_5ModelEi>
 80092c6:	61b8      	str	r0, [r7, #24]
    for (size_t i = 0; i < operators_size; ++i) {
 80092c8:	2300      	movs	r3, #0
 80092ca:	623b      	str	r3, [r7, #32]
 80092cc:	6a3a      	ldr	r2, [r7, #32]
 80092ce:	69bb      	ldr	r3, [r7, #24]
 80092d0:	429a      	cmp	r2, r3
 80092d2:	d23e      	bcs.n	8009352 <_ZN6tflite10MicroGraph16PrepareSubgraphsEv+0xce>
      TfLiteNode* node =
          &(subgraph_allocations_[subgraph_idx].node_and_registrations[i].node);
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	691a      	ldr	r2, [r3, #16]
 80092d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092da:	00db      	lsls	r3, r3, #3
 80092dc:	4413      	add	r3, r2
 80092de:	681a      	ldr	r2, [r3, #0]
 80092e0:	6a3b      	ldr	r3, [r7, #32]
 80092e2:	212c      	movs	r1, #44	; 0x2c
 80092e4:	fb01 f303 	mul.w	r3, r1, r3
 80092e8:	4413      	add	r3, r2
      TfLiteNode* node =
 80092ea:	617b      	str	r3, [r7, #20]
      const TfLiteRegistration* registration =
          subgraph_allocations_[subgraph_idx]
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	691a      	ldr	r2, [r3, #16]
 80092f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092f2:	00db      	lsls	r3, r3, #3
 80092f4:	4413      	add	r3, r2
              .node_and_registrations[i]
 80092f6:	681a      	ldr	r2, [r3, #0]
 80092f8:	6a3b      	ldr	r3, [r7, #32]
 80092fa:	212c      	movs	r1, #44	; 0x2c
 80092fc:	fb01 f303 	mul.w	r3, r1, r3
 8009300:	4413      	add	r3, r2
      const TfLiteRegistration* registration =
 8009302:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009304:	613b      	str	r3, [r7, #16]
              .registration;
      if (registration->prepare != nullptr) {
 8009306:	693b      	ldr	r3, [r7, #16]
 8009308:	689b      	ldr	r3, [r3, #8]
 800930a:	2b00      	cmp	r3, #0
 800930c:	d016      	beq.n	800933c <_ZN6tflite10MicroGraph16PrepareSubgraphsEv+0xb8>
        TfLiteStatus prepare_status = registration->prepare(context_, node);
 800930e:	693b      	ldr	r3, [r7, #16]
 8009310:	689b      	ldr	r3, [r3, #8]
 8009312:	687a      	ldr	r2, [r7, #4]
 8009314:	6852      	ldr	r2, [r2, #4]
 8009316:	6979      	ldr	r1, [r7, #20]
 8009318:	4610      	mov	r0, r2
 800931a:	4798      	blx	r3
 800931c:	4603      	mov	r3, r0
 800931e:	73fb      	strb	r3, [r7, #15]
        if (prepare_status != kTfLiteOk) {
 8009320:	7bfb      	ldrb	r3, [r7, #15]
 8009322:	2b00      	cmp	r3, #0
 8009324:	d00a      	beq.n	800933c <_ZN6tflite10MicroGraph16PrepareSubgraphsEv+0xb8>
          MicroPrintf("Node %s (number %df) failed to prepare with status %d",
 8009326:	6938      	ldr	r0, [r7, #16]
 8009328:	f7ff fedb 	bl	80090e2 <_ZN6tflite12_GLOBAL__N_122OpNameFromRegistrationEPK18TfLiteRegistration>
 800932c:	4601      	mov	r1, r0
 800932e:	7bfb      	ldrb	r3, [r7, #15]
 8009330:	6a3a      	ldr	r2, [r7, #32]
 8009332:	480e      	ldr	r0, [pc, #56]	; (800936c <_ZN6tflite10MicroGraph16PrepareSubgraphsEv+0xe8>)
 8009334:	f7ff fe7a 	bl	800902c <_Z11MicroPrintfPKcz>
                      OpNameFromRegistration(registration), i, prepare_status);
          return kTfLiteError;
 8009338:	2301      	movs	r3, #1
 800933a:	e012      	b.n	8009362 <_ZN6tflite10MicroGraph16PrepareSubgraphsEv+0xde>
        }
      }
      allocator_->FinishPrepareNodeAllocations(/*node_id=*/i);
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	68db      	ldr	r3, [r3, #12]
 8009340:	6a3a      	ldr	r2, [r7, #32]
 8009342:	4611      	mov	r1, r2
 8009344:	4618      	mov	r0, r3
 8009346:	f7fe fdf1 	bl	8007f2c <_ZN6tflite14MicroAllocator28FinishPrepareNodeAllocationsEi>
    for (size_t i = 0; i < operators_size; ++i) {
 800934a:	6a3b      	ldr	r3, [r7, #32]
 800934c:	3301      	adds	r3, #1
 800934e:	623b      	str	r3, [r7, #32]
 8009350:	e7bc      	b.n	80092cc <_ZN6tflite10MicroGraph16PrepareSubgraphsEv+0x48>
  for (size_t subgraph_idx = 0; subgraph_idx < subgraphs_->size();
 8009352:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009354:	3301      	adds	r3, #1
 8009356:	627b      	str	r3, [r7, #36]	; 0x24
 8009358:	e79d      	b.n	8009296 <_ZN6tflite10MicroGraph16PrepareSubgraphsEv+0x12>
    }
  }
  current_subgraph_index_ = previous_subgraph_idx;
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	69fa      	ldr	r2, [r7, #28]
 800935e:	615a      	str	r2, [r3, #20]

  return kTfLiteOk;
 8009360:	2300      	movs	r3, #0
}
 8009362:	4618      	mov	r0, r3
 8009364:	3728      	adds	r7, #40	; 0x28
 8009366:	46bd      	mov	sp, r7
 8009368:	bd80      	pop	{r7, pc}
 800936a:	bf00      	nop
 800936c:	08015ff0 	.word	0x08015ff0

08009370 <_ZN6tflite10MicroGraph13FreeSubgraphsEv>:

TfLiteStatus MicroGraph::FreeSubgraphs() {
 8009370:	b580      	push	{r7, lr}
 8009372:	b088      	sub	sp, #32
 8009374:	af00      	add	r7, sp, #0
 8009376:	6078      	str	r0, [r7, #4]
  int previous_subgraph_idx = current_subgraph_index_;
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	695b      	ldr	r3, [r3, #20]
 800937c:	617b      	str	r3, [r7, #20]

  for (size_t subgraph_idx = 0; subgraph_idx < subgraphs_->size();
 800937e:	2300      	movs	r3, #0
 8009380:	61fb      	str	r3, [r7, #28]
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	699b      	ldr	r3, [r3, #24]
 8009386:	4618      	mov	r0, r3
 8009388:	f7fd fb24 	bl	80069d4 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE4sizeEv>
 800938c:	4602      	mov	r2, r0
 800938e:	69fb      	ldr	r3, [r7, #28]
 8009390:	4293      	cmp	r3, r2
 8009392:	bf34      	ite	cc
 8009394:	2301      	movcc	r3, #1
 8009396:	2300      	movcs	r3, #0
 8009398:	b2db      	uxtb	r3, r3
 800939a:	2b00      	cmp	r3, #0
 800939c:	d040      	beq.n	8009420 <_ZN6tflite10MicroGraph13FreeSubgraphsEv+0xb0>
       subgraph_idx++) {
    current_subgraph_index_ = subgraph_idx;
 800939e:	69fa      	ldr	r2, [r7, #28]
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	615a      	str	r2, [r3, #20]
    uint32_t operators_size = NumSubgraphOperators(model_, subgraph_idx);
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	689b      	ldr	r3, [r3, #8]
 80093a8:	69fa      	ldr	r2, [r7, #28]
 80093aa:	4611      	mov	r1, r2
 80093ac:	4618      	mov	r0, r3
 80093ae:	f7fd facc 	bl	800694a <_ZN6tflite20NumSubgraphOperatorsEPKNS_5ModelEi>
 80093b2:	6138      	str	r0, [r7, #16]
    for (size_t i = 0; i < operators_size; ++i) {
 80093b4:	2300      	movs	r3, #0
 80093b6:	61bb      	str	r3, [r7, #24]
 80093b8:	69ba      	ldr	r2, [r7, #24]
 80093ba:	693b      	ldr	r3, [r7, #16]
 80093bc:	429a      	cmp	r2, r3
 80093be:	d22b      	bcs.n	8009418 <_ZN6tflite10MicroGraph13FreeSubgraphsEv+0xa8>
      TfLiteNode* node =
          &(subgraph_allocations_[subgraph_idx].node_and_registrations[i].node);
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	691a      	ldr	r2, [r3, #16]
 80093c4:	69fb      	ldr	r3, [r7, #28]
 80093c6:	00db      	lsls	r3, r3, #3
 80093c8:	4413      	add	r3, r2
 80093ca:	681a      	ldr	r2, [r3, #0]
 80093cc:	69bb      	ldr	r3, [r7, #24]
 80093ce:	212c      	movs	r1, #44	; 0x2c
 80093d0:	fb01 f303 	mul.w	r3, r1, r3
 80093d4:	4413      	add	r3, r2
      TfLiteNode* node =
 80093d6:	60fb      	str	r3, [r7, #12]
      const TfLiteRegistration* registration =
          subgraph_allocations_[subgraph_idx]
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	691a      	ldr	r2, [r3, #16]
 80093dc:	69fb      	ldr	r3, [r7, #28]
 80093de:	00db      	lsls	r3, r3, #3
 80093e0:	4413      	add	r3, r2
              .node_and_registrations[i]
 80093e2:	681a      	ldr	r2, [r3, #0]
 80093e4:	69bb      	ldr	r3, [r7, #24]
 80093e6:	212c      	movs	r1, #44	; 0x2c
 80093e8:	fb01 f303 	mul.w	r3, r1, r3
 80093ec:	4413      	add	r3, r2
      const TfLiteRegistration* registration =
 80093ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80093f0:	60bb      	str	r3, [r7, #8]
              .registration;
      // registration is allocated outside the interpreter, so double check to
      // make sure it's not nullptr;
      if (registration != nullptr && registration->free != nullptr) {
 80093f2:	68bb      	ldr	r3, [r7, #8]
 80093f4:	2b00      	cmp	r3, #0
 80093f6:	d00b      	beq.n	8009410 <_ZN6tflite10MicroGraph13FreeSubgraphsEv+0xa0>
 80093f8:	68bb      	ldr	r3, [r7, #8]
 80093fa:	685b      	ldr	r3, [r3, #4]
 80093fc:	2b00      	cmp	r3, #0
 80093fe:	d007      	beq.n	8009410 <_ZN6tflite10MicroGraph13FreeSubgraphsEv+0xa0>
        registration->free(context_, node->user_data);
 8009400:	68bb      	ldr	r3, [r7, #8]
 8009402:	685b      	ldr	r3, [r3, #4]
 8009404:	687a      	ldr	r2, [r7, #4]
 8009406:	6850      	ldr	r0, [r2, #4]
 8009408:	68fa      	ldr	r2, [r7, #12]
 800940a:	6912      	ldr	r2, [r2, #16]
 800940c:	4611      	mov	r1, r2
 800940e:	4798      	blx	r3
    for (size_t i = 0; i < operators_size; ++i) {
 8009410:	69bb      	ldr	r3, [r7, #24]
 8009412:	3301      	adds	r3, #1
 8009414:	61bb      	str	r3, [r7, #24]
 8009416:	e7cf      	b.n	80093b8 <_ZN6tflite10MicroGraph13FreeSubgraphsEv+0x48>
  for (size_t subgraph_idx = 0; subgraph_idx < subgraphs_->size();
 8009418:	69fb      	ldr	r3, [r7, #28]
 800941a:	3301      	adds	r3, #1
 800941c:	61fb      	str	r3, [r7, #28]
 800941e:	e7b0      	b.n	8009382 <_ZN6tflite10MicroGraph13FreeSubgraphsEv+0x12>
      }
    }
  }
  current_subgraph_index_ = previous_subgraph_idx;
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	697a      	ldr	r2, [r7, #20]
 8009424:	615a      	str	r2, [r3, #20]

  return kTfLiteOk;
 8009426:	2300      	movs	r3, #0
}
 8009428:	4618      	mov	r0, r3
 800942a:	3720      	adds	r7, #32
 800942c:	46bd      	mov	sp, r7
 800942e:	bd80      	pop	{r7, pc}

08009430 <_ZN6tflite10MicroGraph14InvokeSubgraphEi>:

TfLiteStatus MicroGraph::InvokeSubgraph(int subgraph_idx) {
 8009430:	b5b0      	push	{r4, r5, r7, lr}
 8009432:	b08a      	sub	sp, #40	; 0x28
 8009434:	af00      	add	r7, sp, #0
 8009436:	6078      	str	r0, [r7, #4]
 8009438:	6039      	str	r1, [r7, #0]
 800943a:	2400      	movs	r4, #0
  int previous_subgraph_idx = current_subgraph_index_;
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	695b      	ldr	r3, [r3, #20]
 8009440:	623b      	str	r3, [r7, #32]
  current_subgraph_index_ = subgraph_idx;
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	683a      	ldr	r2, [r7, #0]
 8009446:	615a      	str	r2, [r3, #20]

  if (static_cast<size_t>(subgraph_idx) >= subgraphs_->size()) {
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	699b      	ldr	r3, [r3, #24]
 800944c:	4618      	mov	r0, r3
 800944e:	f7fd fac1 	bl	80069d4 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE4sizeEv>
 8009452:	4602      	mov	r2, r0
 8009454:	683b      	ldr	r3, [r7, #0]
 8009456:	429a      	cmp	r2, r3
 8009458:	bf94      	ite	ls
 800945a:	2301      	movls	r3, #1
 800945c:	2300      	movhi	r3, #0
 800945e:	b2db      	uxtb	r3, r3
 8009460:	2b00      	cmp	r3, #0
 8009462:	d00c      	beq.n	800947e <_ZN6tflite10MicroGraph14InvokeSubgraphEi+0x4e>
    MicroPrintf("Accessing subgraph %d but only %d subgraphs found",
                subgraph_idx, subgraphs_->size());
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	699b      	ldr	r3, [r3, #24]
    MicroPrintf("Accessing subgraph %d but only %d subgraphs found",
 8009468:	4618      	mov	r0, r3
 800946a:	f7fd fab3 	bl	80069d4 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE4sizeEv>
 800946e:	4603      	mov	r3, r0
 8009470:	461a      	mov	r2, r3
 8009472:	6839      	ldr	r1, [r7, #0]
 8009474:	483c      	ldr	r0, [pc, #240]	; (8009568 <_ZN6tflite10MicroGraph14InvokeSubgraphEi+0x138>)
 8009476:	f7ff fdd9 	bl	800902c <_Z11MicroPrintfPKcz>
    return kTfLiteError;
 800947a:	2401      	movs	r4, #1
 800947c:	e06e      	b.n	800955c <_ZN6tflite10MicroGraph14InvokeSubgraphEi+0x12c>
  }
  uint32_t operators_size = NumSubgraphOperators(model_, subgraph_idx);
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	689b      	ldr	r3, [r3, #8]
 8009482:	6839      	ldr	r1, [r7, #0]
 8009484:	4618      	mov	r0, r3
 8009486:	f7fd fa60 	bl	800694a <_ZN6tflite20NumSubgraphOperatorsEPKNS_5ModelEi>
 800948a:	61f8      	str	r0, [r7, #28]
  for (size_t i = 0; i < operators_size; ++i) {
 800948c:	2300      	movs	r3, #0
 800948e:	627b      	str	r3, [r7, #36]	; 0x24
 8009490:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009492:	69fb      	ldr	r3, [r7, #28]
 8009494:	429a      	cmp	r2, r3
 8009496:	d25d      	bcs.n	8009554 <_ZN6tflite10MicroGraph14InvokeSubgraphEi+0x124>
    TfLiteNode* node =
        &(subgraph_allocations_[subgraph_idx].node_and_registrations[i].node);
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	691a      	ldr	r2, [r3, #16]
 800949c:	683b      	ldr	r3, [r7, #0]
 800949e:	00db      	lsls	r3, r3, #3
 80094a0:	4413      	add	r3, r2
 80094a2:	681a      	ldr	r2, [r3, #0]
 80094a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094a6:	212c      	movs	r1, #44	; 0x2c
 80094a8:	fb01 f303 	mul.w	r3, r1, r3
 80094ac:	4413      	add	r3, r2
    TfLiteNode* node =
 80094ae:	61bb      	str	r3, [r7, #24]
    const TfLiteRegistration* registration = subgraph_allocations_[subgraph_idx]
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	691a      	ldr	r2, [r3, #16]
 80094b4:	683b      	ldr	r3, [r7, #0]
 80094b6:	00db      	lsls	r3, r3, #3
 80094b8:	4413      	add	r3, r2
                                                 .node_and_registrations[i]
 80094ba:	681a      	ldr	r2, [r3, #0]
 80094bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094be:	212c      	movs	r1, #44	; 0x2c
 80094c0:	fb01 f303 	mul.w	r3, r1, r3
 80094c4:	4413      	add	r3, r2
    const TfLiteRegistration* registration = subgraph_allocations_[subgraph_idx]
 80094c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80094c8:	617b      	str	r3, [r7, #20]
// -DTF_LITE_STRIP_ERROR_STRINGS) because the function OpNameFromRegistration is
// only defined for builds with the error strings.
#if !defined(TF_LITE_STRIP_ERROR_STRINGS)
    ScopedMicroProfiler scoped_profiler(
        OpNameFromRegistration(registration),
        reinterpret_cast<MicroProfiler*>(context_->profiler));
 80094ca:	6978      	ldr	r0, [r7, #20]
 80094cc:	f7ff fe09 	bl	80090e2 <_ZN6tflite12_GLOBAL__N_122OpNameFromRegistrationEPK18TfLiteRegistration>
 80094d0:	4601      	mov	r1, r0
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	685b      	ldr	r3, [r3, #4]
 80094d6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80094d8:	f107 0308 	add.w	r3, r7, #8
 80094dc:	4618      	mov	r0, r3
 80094de:	f7ff fdc6 	bl	800906e <_ZN6tflite19ScopedMicroProfilerC1EPKcPNS_13MicroProfilerE>
#endif

    TFLITE_DCHECK(registration->invoke);
 80094e2:	697b      	ldr	r3, [r7, #20]
 80094e4:	68db      	ldr	r3, [r3, #12]
 80094e6:	2b00      	cmp	r3, #0
 80094e8:	d101      	bne.n	80094ee <_ZN6tflite10MicroGraph14InvokeSubgraphEi+0xbe>
 80094ea:	f007 f958 	bl	801079e <abort>
    TfLiteStatus invoke_status = registration->invoke(context_, node);
 80094ee:	697b      	ldr	r3, [r7, #20]
 80094f0:	68db      	ldr	r3, [r3, #12]
 80094f2:	687a      	ldr	r2, [r7, #4]
 80094f4:	6852      	ldr	r2, [r2, #4]
 80094f6:	69b9      	ldr	r1, [r7, #24]
 80094f8:	4610      	mov	r0, r2
 80094fa:	4798      	blx	r3
 80094fc:	4603      	mov	r3, r0
 80094fe:	74fb      	strb	r3, [r7, #19]

    // All TfLiteTensor structs used in the kernel are allocated from temp
    // memory in the allocator. This creates a chain of allocations in the
    // temp section. The call below resets the chain of allocations to
    // prepare for the next call.
    allocator_->ResetTempAllocations();
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	68da      	ldr	r2, [r3, #12]
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	68db      	ldr	r3, [r3, #12]
 8009508:	681b      	ldr	r3, [r3, #0]
 800950a:	3308      	adds	r3, #8
 800950c:	681b      	ldr	r3, [r3, #0]
 800950e:	4610      	mov	r0, r2
 8009510:	4798      	blx	r3

    if (invoke_status == kTfLiteError) {
 8009512:	7cfb      	ldrb	r3, [r7, #19]
 8009514:	2b01      	cmp	r3, #1
 8009516:	d10b      	bne.n	8009530 <_ZN6tflite10MicroGraph14InvokeSubgraphEi+0x100>
      MicroPrintf("Node %s (number %d) failed to invoke with status %d",
 8009518:	6978      	ldr	r0, [r7, #20]
 800951a:	f7ff fde2 	bl	80090e2 <_ZN6tflite12_GLOBAL__N_122OpNameFromRegistrationEPK18TfLiteRegistration>
 800951e:	4601      	mov	r1, r0
 8009520:	7cfb      	ldrb	r3, [r7, #19]
 8009522:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009524:	4811      	ldr	r0, [pc, #68]	; (800956c <_ZN6tflite10MicroGraph14InvokeSubgraphEi+0x13c>)
 8009526:	f7ff fd81 	bl	800902c <_Z11MicroPrintfPKcz>
                  OpNameFromRegistration(registration), i, invoke_status);
      return kTfLiteError;
 800952a:	2401      	movs	r4, #1
 800952c:	2500      	movs	r5, #0
 800952e:	e006      	b.n	800953e <_ZN6tflite10MicroGraph14InvokeSubgraphEi+0x10e>
    } else if (invoke_status != kTfLiteOk) {
 8009530:	7cfb      	ldrb	r3, [r7, #19]
 8009532:	2b00      	cmp	r3, #0
 8009534:	d002      	beq.n	800953c <_ZN6tflite10MicroGraph14InvokeSubgraphEi+0x10c>
      return invoke_status;
 8009536:	7cfc      	ldrb	r4, [r7, #19]
 8009538:	2500      	movs	r5, #0
 800953a:	e000      	b.n	800953e <_ZN6tflite10MicroGraph14InvokeSubgraphEi+0x10e>
        reinterpret_cast<MicroProfiler*>(context_->profiler));
 800953c:	2501      	movs	r5, #1
 800953e:	f107 0308 	add.w	r3, r7, #8
 8009542:	4618      	mov	r0, r3
 8009544:	f7ff fdb5 	bl	80090b2 <_ZN6tflite19ScopedMicroProfilerD1Ev>
 8009548:	2d01      	cmp	r5, #1
 800954a:	d107      	bne.n	800955c <_ZN6tflite10MicroGraph14InvokeSubgraphEi+0x12c>
  for (size_t i = 0; i < operators_size; ++i) {
 800954c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800954e:	3301      	adds	r3, #1
 8009550:	627b      	str	r3, [r7, #36]	; 0x24
 8009552:	e79d      	b.n	8009490 <_ZN6tflite10MicroGraph14InvokeSubgraphEi+0x60>
    }
  }
  current_subgraph_index_ = previous_subgraph_idx;
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	6a3a      	ldr	r2, [r7, #32]
 8009558:	615a      	str	r2, [r3, #20]
  return kTfLiteOk;
 800955a:	2400      	movs	r4, #0
 800955c:	4623      	mov	r3, r4
}
 800955e:	4618      	mov	r0, r3
 8009560:	3728      	adds	r7, #40	; 0x28
 8009562:	46bd      	mov	sp, r7
 8009564:	bdb0      	pop	{r4, r5, r7, pc}
 8009566:	bf00      	nop
 8009568:	08016028 	.word	0x08016028
 800956c:	0801605c 	.word	0x0801605c

08009570 <_ZN6tflite10MicroGraph20ResetVariableTensorsEv>:

TfLiteStatus MicroGraph::ResetVariableTensors() {
 8009570:	b580      	push	{r7, lr}
 8009572:	b08a      	sub	sp, #40	; 0x28
 8009574:	af00      	add	r7, sp, #0
 8009576:	6078      	str	r0, [r7, #4]
  for (size_t subgraph_idx = 0; subgraph_idx < subgraphs_->size();
 8009578:	2300      	movs	r3, #0
 800957a:	627b      	str	r3, [r7, #36]	; 0x24
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	699b      	ldr	r3, [r3, #24]
 8009580:	4618      	mov	r0, r3
 8009582:	f7fd fa27 	bl	80069d4 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE4sizeEv>
 8009586:	4602      	mov	r2, r0
 8009588:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800958a:	4293      	cmp	r3, r2
 800958c:	bf34      	ite	cc
 800958e:	2301      	movcc	r3, #1
 8009590:	2300      	movcs	r3, #0
 8009592:	b2db      	uxtb	r3, r3
 8009594:	2b00      	cmp	r3, #0
 8009596:	d077      	beq.n	8009688 <_ZN6tflite10MicroGraph20ResetVariableTensorsEv+0x118>
       subgraph_idx++) {
    const SubGraph* subgraph = (*subgraphs_)[subgraph_idx];
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	699b      	ldr	r3, [r3, #24]
 800959c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800959e:	4618      	mov	r0, r3
 80095a0:	f7ff faf8 	bl	8008b94 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEEixEm>
 80095a4:	61b8      	str	r0, [r7, #24]
    for (size_t i = 0; i < subgraph->tensors()->size(); ++i) {
 80095a6:	2300      	movs	r3, #0
 80095a8:	623b      	str	r3, [r7, #32]
 80095aa:	69b8      	ldr	r0, [r7, #24]
 80095ac:	f7fd fd45 	bl	800703a <_ZNK6tflite8SubGraph7tensorsEv>
 80095b0:	4603      	mov	r3, r0
 80095b2:	4618      	mov	r0, r3
 80095b4:	f7ff fa2c 	bl	8008a10 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEE4sizeEv>
 80095b8:	4602      	mov	r2, r0
 80095ba:	6a3b      	ldr	r3, [r7, #32]
 80095bc:	4293      	cmp	r3, r2
 80095be:	bf34      	ite	cc
 80095c0:	2301      	movcc	r3, #1
 80095c2:	2300      	movcs	r3, #0
 80095c4:	b2db      	uxtb	r3, r3
 80095c6:	2b00      	cmp	r3, #0
 80095c8:	d05a      	beq.n	8009680 <_ZN6tflite10MicroGraph20ResetVariableTensorsEv+0x110>
      auto* tensor = subgraph->tensors()->Get(i);
 80095ca:	69b8      	ldr	r0, [r7, #24]
 80095cc:	f7fd fd35 	bl	800703a <_ZNK6tflite8SubGraph7tensorsEv>
 80095d0:	4603      	mov	r3, r0
 80095d2:	6a39      	ldr	r1, [r7, #32]
 80095d4:	4618      	mov	r0, r3
 80095d6:	f7ff fa29 	bl	8008a2c <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEE3GetEm>
 80095da:	6178      	str	r0, [r7, #20]
      if (tensor->is_variable()) {
 80095dc:	6978      	ldr	r0, [r7, #20]
 80095de:	f7fd fcfc 	bl	8006fda <_ZNK6tflite6Tensor11is_variableEv>
 80095e2:	4603      	mov	r3, r0
 80095e4:	2b00      	cmp	r3, #0
 80095e6:	d047      	beq.n	8009678 <_ZN6tflite10MicroGraph20ResetVariableTensorsEv+0x108>
        size_t buffer_size;
        TF_LITE_ENSURE_STATUS(TfLiteEvalTensorByteLength(
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	691a      	ldr	r2, [r3, #16]
 80095ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095ee:	00db      	lsls	r3, r3, #3
 80095f0:	4413      	add	r3, r2
 80095f2:	6859      	ldr	r1, [r3, #4]
 80095f4:	6a3a      	ldr	r2, [r7, #32]
 80095f6:	4613      	mov	r3, r2
 80095f8:	005b      	lsls	r3, r3, #1
 80095fa:	4413      	add	r3, r2
 80095fc:	009b      	lsls	r3, r3, #2
 80095fe:	440b      	add	r3, r1
 8009600:	f107 020c 	add.w	r2, r7, #12
 8009604:	4611      	mov	r1, r2
 8009606:	4618      	mov	r0, r3
 8009608:	f7fd fc53 	bl	8006eb2 <_ZN6tflite26TfLiteEvalTensorByteLengthEPK16TfLiteEvalTensorPj>
 800960c:	4603      	mov	r3, r0
 800960e:	74fb      	strb	r3, [r7, #19]
 8009610:	7cfb      	ldrb	r3, [r7, #19]
 8009612:	2b00      	cmp	r3, #0
 8009614:	d001      	beq.n	800961a <_ZN6tflite10MicroGraph20ResetVariableTensorsEv+0xaa>
 8009616:	7cfb      	ldrb	r3, [r7, #19]
 8009618:	e037      	b.n	800968a <_ZN6tflite10MicroGraph20ResetVariableTensorsEv+0x11a>
            &subgraph_allocations_[subgraph_idx].tensors[i], &buffer_size));

        int value = 0;
 800961a:	2300      	movs	r3, #0
 800961c:	61fb      	str	r3, [r7, #28]
        if (tensor->type() == tflite::TensorType_INT8) {
 800961e:	6978      	ldr	r0, [r7, #20]
 8009620:	f7fd fa88 	bl	8006b34 <_ZNK6tflite6Tensor4typeEv>
 8009624:	4603      	mov	r3, r0
 8009626:	2b09      	cmp	r3, #9
 8009628:	bf0c      	ite	eq
 800962a:	2301      	moveq	r3, #1
 800962c:	2300      	movne	r3, #0
 800962e:	b2db      	uxtb	r3, r3
 8009630:	2b00      	cmp	r3, #0
 8009632:	d00f      	beq.n	8009654 <_ZN6tflite10MicroGraph20ResetVariableTensorsEv+0xe4>
          value = tensor->quantization()->zero_point()->Get(0);
 8009634:	6978      	ldr	r0, [r7, #20]
 8009636:	f7fd fcc2 	bl	8006fbe <_ZNK6tflite6Tensor12quantizationEv>
 800963a:	4603      	mov	r3, r0
 800963c:	4618      	mov	r0, r3
 800963e:	f7fd fc92 	bl	8006f66 <_ZNK6tflite22QuantizationParameters10zero_pointEv>
 8009642:	4603      	mov	r3, r0
 8009644:	2100      	movs	r1, #0
 8009646:	4618      	mov	r0, r3
 8009648:	f7ff f9ba 	bl	80089c0 <_ZNK11flatbuffers6VectorIxE3GetEm>
 800964c:	4602      	mov	r2, r0
 800964e:	460b      	mov	r3, r1
 8009650:	4613      	mov	r3, r2
 8009652:	61fb      	str	r3, [r7, #28]
        }
        memset(subgraph_allocations_[subgraph_idx].tensors[i].data.raw, value,
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	691a      	ldr	r2, [r3, #16]
 8009658:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800965a:	00db      	lsls	r3, r3, #3
 800965c:	4413      	add	r3, r2
 800965e:	6859      	ldr	r1, [r3, #4]
 8009660:	6a3a      	ldr	r2, [r7, #32]
 8009662:	4613      	mov	r3, r2
 8009664:	005b      	lsls	r3, r3, #1
 8009666:	4413      	add	r3, r2
 8009668:	009b      	lsls	r3, r3, #2
 800966a:	440b      	add	r3, r1
 800966c:	681b      	ldr	r3, [r3, #0]
 800966e:	68fa      	ldr	r2, [r7, #12]
 8009670:	69f9      	ldr	r1, [r7, #28]
 8009672:	4618      	mov	r0, r3
 8009674:	f007 fbc0 	bl	8010df8 <memset>
    for (size_t i = 0; i < subgraph->tensors()->size(); ++i) {
 8009678:	6a3b      	ldr	r3, [r7, #32]
 800967a:	3301      	adds	r3, #1
 800967c:	623b      	str	r3, [r7, #32]
 800967e:	e794      	b.n	80095aa <_ZN6tflite10MicroGraph20ResetVariableTensorsEv+0x3a>
  for (size_t subgraph_idx = 0; subgraph_idx < subgraphs_->size();
 8009680:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009682:	3301      	adds	r3, #1
 8009684:	627b      	str	r3, [r7, #36]	; 0x24
 8009686:	e779      	b.n	800957c <_ZN6tflite10MicroGraph20ResetVariableTensorsEv+0xc>
               buffer_size);
      }
    }
  }

  return kTfLiteOk;
 8009688:	2300      	movs	r3, #0
}
 800968a:	4618      	mov	r0, r3
 800968c:	3728      	adds	r7, #40	; 0x28
 800968e:	46bd      	mov	sp, r7
 8009690:	bd80      	pop	{r7, pc}

08009692 <_ZN6tflite10MicroGraph12NumSubgraphsEv>:

int MicroGraph::NumSubgraphs() { return model_->subgraphs()->size(); }
 8009692:	b580      	push	{r7, lr}
 8009694:	b082      	sub	sp, #8
 8009696:	af00      	add	r7, sp, #0
 8009698:	6078      	str	r0, [r7, #4]
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	689b      	ldr	r3, [r3, #8]
 800969e:	4618      	mov	r0, r3
 80096a0:	f7fd f928 	bl	80068f4 <_ZNK6tflite5Model9subgraphsEv>
 80096a4:	4603      	mov	r3, r0
 80096a6:	4618      	mov	r0, r3
 80096a8:	f7fd f994 	bl	80069d4 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE4sizeEv>
 80096ac:	4603      	mov	r3, r0
 80096ae:	4618      	mov	r0, r3
 80096b0:	3708      	adds	r7, #8
 80096b2:	46bd      	mov	sp, r7
 80096b4:	bd80      	pop	{r7, pc}

080096b6 <_ZN6tflite10MicroGraph22SetSubgraphAllocationsEPNS_19SubgraphAllocationsE>:

void MicroGraph::SetSubgraphAllocations(
    SubgraphAllocations* subgraph_allocations) {
 80096b6:	b480      	push	{r7}
 80096b8:	b083      	sub	sp, #12
 80096ba:	af00      	add	r7, sp, #0
 80096bc:	6078      	str	r0, [r7, #4]
 80096be:	6039      	str	r1, [r7, #0]
  subgraph_allocations_ = subgraph_allocations;
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	683a      	ldr	r2, [r7, #0]
 80096c4:	611a      	str	r2, [r3, #16]
}
 80096c6:	bf00      	nop
 80096c8:	370c      	adds	r7, #12
 80096ca:	46bd      	mov	sp, r7
 80096cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096d0:	4770      	bx	lr

080096d2 <_ZN6tflite10MicroGraph17NumSubgraphInputsEi>:

size_t MicroGraph::NumSubgraphInputs(int subgraph_idx) {
 80096d2:	b580      	push	{r7, lr}
 80096d4:	b082      	sub	sp, #8
 80096d6:	af00      	add	r7, sp, #0
 80096d8:	6078      	str	r0, [r7, #4]
 80096da:	6039      	str	r1, [r7, #0]
  return model_->subgraphs()->Get(subgraph_idx)->inputs()->size();
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	689b      	ldr	r3, [r3, #8]
 80096e0:	4618      	mov	r0, r3
 80096e2:	f7fd f907 	bl	80068f4 <_ZNK6tflite5Model9subgraphsEv>
 80096e6:	4602      	mov	r2, r0
 80096e8:	683b      	ldr	r3, [r7, #0]
 80096ea:	4619      	mov	r1, r3
 80096ec:	4610      	mov	r0, r2
 80096ee:	f7fd f97f 	bl	80069f0 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE3GetEm>
 80096f2:	4603      	mov	r3, r0
 80096f4:	4618      	mov	r0, r3
 80096f6:	f7fd fcae 	bl	8007056 <_ZNK6tflite8SubGraph6inputsEv>
 80096fa:	4603      	mov	r3, r0
 80096fc:	4618      	mov	r0, r3
 80096fe:	f7fb f86c 	bl	80047da <_ZNK11flatbuffers6VectorIlE4sizeEv>
 8009702:	4603      	mov	r3, r0
}
 8009704:	4618      	mov	r0, r3
 8009706:	3708      	adds	r7, #8
 8009708:	46bd      	mov	sp, r7
 800970a:	bd80      	pop	{r7, pc}

0800970c <_ZN6tflite10MicroGraph16GetSubgraphInputEii>:

TfLiteEvalTensor* MicroGraph::GetSubgraphInput(int subgraph_idx,
                                               int input_idx) {
 800970c:	b580      	push	{r7, lr}
 800970e:	b086      	sub	sp, #24
 8009710:	af00      	add	r7, sp, #0
 8009712:	60f8      	str	r0, [r7, #12]
 8009714:	60b9      	str	r1, [r7, #8]
 8009716:	607a      	str	r2, [r7, #4]
  int tensor_idx =
      model_->subgraphs()->Get(subgraph_idx)->inputs()->Get(input_idx);
 8009718:	68fb      	ldr	r3, [r7, #12]
 800971a:	689b      	ldr	r3, [r3, #8]
 800971c:	4618      	mov	r0, r3
 800971e:	f7fd f8e9 	bl	80068f4 <_ZNK6tflite5Model9subgraphsEv>
 8009722:	4602      	mov	r2, r0
 8009724:	68bb      	ldr	r3, [r7, #8]
 8009726:	4619      	mov	r1, r3
 8009728:	4610      	mov	r0, r2
 800972a:	f7fd f961 	bl	80069f0 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE3GetEm>
 800972e:	4603      	mov	r3, r0
 8009730:	4618      	mov	r0, r3
 8009732:	f7fd fc90 	bl	8007056 <_ZNK6tflite8SubGraph6inputsEv>
 8009736:	4602      	mov	r2, r0
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	4619      	mov	r1, r3
 800973c:	4610      	mov	r0, r2
 800973e:	f7fb f85b 	bl	80047f8 <_ZNK11flatbuffers6VectorIlE3GetEm>
 8009742:	6178      	str	r0, [r7, #20]
  return &subgraph_allocations_[subgraph_idx].tensors[tensor_idx];
 8009744:	68fb      	ldr	r3, [r7, #12]
 8009746:	691a      	ldr	r2, [r3, #16]
 8009748:	68bb      	ldr	r3, [r7, #8]
 800974a:	00db      	lsls	r3, r3, #3
 800974c:	4413      	add	r3, r2
 800974e:	6859      	ldr	r1, [r3, #4]
 8009750:	697a      	ldr	r2, [r7, #20]
 8009752:	4613      	mov	r3, r2
 8009754:	005b      	lsls	r3, r3, #1
 8009756:	4413      	add	r3, r2
 8009758:	009b      	lsls	r3, r3, #2
 800975a:	440b      	add	r3, r1
}
 800975c:	4618      	mov	r0, r3
 800975e:	3718      	adds	r7, #24
 8009760:	46bd      	mov	sp, r7
 8009762:	bd80      	pop	{r7, pc}

08009764 <_ZN6tflite10MicroGraph18NumSubgraphOutputsEi>:

size_t MicroGraph::NumSubgraphOutputs(int subgraph_idx) {
 8009764:	b580      	push	{r7, lr}
 8009766:	b082      	sub	sp, #8
 8009768:	af00      	add	r7, sp, #0
 800976a:	6078      	str	r0, [r7, #4]
 800976c:	6039      	str	r1, [r7, #0]
  return model_->subgraphs()->Get(subgraph_idx)->outputs()->size();
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	689b      	ldr	r3, [r3, #8]
 8009772:	4618      	mov	r0, r3
 8009774:	f7fd f8be 	bl	80068f4 <_ZNK6tflite5Model9subgraphsEv>
 8009778:	4602      	mov	r2, r0
 800977a:	683b      	ldr	r3, [r7, #0]
 800977c:	4619      	mov	r1, r3
 800977e:	4610      	mov	r0, r2
 8009780:	f7fd f936 	bl	80069f0 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE3GetEm>
 8009784:	4603      	mov	r3, r0
 8009786:	4618      	mov	r0, r3
 8009788:	f7fd fc73 	bl	8007072 <_ZNK6tflite8SubGraph7outputsEv>
 800978c:	4603      	mov	r3, r0
 800978e:	4618      	mov	r0, r3
 8009790:	f7fb f823 	bl	80047da <_ZNK11flatbuffers6VectorIlE4sizeEv>
 8009794:	4603      	mov	r3, r0
}
 8009796:	4618      	mov	r0, r3
 8009798:	3708      	adds	r7, #8
 800979a:	46bd      	mov	sp, r7
 800979c:	bd80      	pop	{r7, pc}

0800979e <_ZN6tflite10MicroGraph17GetSubgraphOutputEii>:

TfLiteEvalTensor* MicroGraph::GetSubgraphOutput(int subgraph_idx,
                                                int output_idx) {
 800979e:	b580      	push	{r7, lr}
 80097a0:	b086      	sub	sp, #24
 80097a2:	af00      	add	r7, sp, #0
 80097a4:	60f8      	str	r0, [r7, #12]
 80097a6:	60b9      	str	r1, [r7, #8]
 80097a8:	607a      	str	r2, [r7, #4]
  int tensor_idx =
      model_->subgraphs()->Get(subgraph_idx)->outputs()->Get(output_idx);
 80097aa:	68fb      	ldr	r3, [r7, #12]
 80097ac:	689b      	ldr	r3, [r3, #8]
 80097ae:	4618      	mov	r0, r3
 80097b0:	f7fd f8a0 	bl	80068f4 <_ZNK6tflite5Model9subgraphsEv>
 80097b4:	4602      	mov	r2, r0
 80097b6:	68bb      	ldr	r3, [r7, #8]
 80097b8:	4619      	mov	r1, r3
 80097ba:	4610      	mov	r0, r2
 80097bc:	f7fd f918 	bl	80069f0 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE3GetEm>
 80097c0:	4603      	mov	r3, r0
 80097c2:	4618      	mov	r0, r3
 80097c4:	f7fd fc55 	bl	8007072 <_ZNK6tflite8SubGraph7outputsEv>
 80097c8:	4602      	mov	r2, r0
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	4619      	mov	r1, r3
 80097ce:	4610      	mov	r0, r2
 80097d0:	f7fb f812 	bl	80047f8 <_ZNK11flatbuffers6VectorIlE3GetEm>
 80097d4:	6178      	str	r0, [r7, #20]
  return &subgraph_allocations_[subgraph_idx].tensors[tensor_idx];
 80097d6:	68fb      	ldr	r3, [r7, #12]
 80097d8:	691a      	ldr	r2, [r3, #16]
 80097da:	68bb      	ldr	r3, [r7, #8]
 80097dc:	00db      	lsls	r3, r3, #3
 80097de:	4413      	add	r3, r2
 80097e0:	6859      	ldr	r1, [r3, #4]
 80097e2:	697a      	ldr	r2, [r7, #20]
 80097e4:	4613      	mov	r3, r2
 80097e6:	005b      	lsls	r3, r3, #1
 80097e8:	4413      	add	r3, r2
 80097ea:	009b      	lsls	r3, r3, #2
 80097ec:	440b      	add	r3, r1
}
 80097ee:	4618      	mov	r0, r3
 80097f0:	3718      	adds	r7, #24
 80097f2:	46bd      	mov	sp, r7
 80097f4:	bd80      	pop	{r7, pc}

080097f6 <_ZNK6tflite8Operator12opcode_indexEv>:
  uint32_t opcode_index() const {
 80097f6:	b580      	push	{r7, lr}
 80097f8:	b082      	sub	sp, #8
 80097fa:	af00      	add	r7, sp, #0
 80097fc:	6078      	str	r0, [r7, #4]
    return GetField<uint32_t>(VT_OPCODE_INDEX, 0);
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	2200      	movs	r2, #0
 8009802:	2104      	movs	r1, #4
 8009804:	4618      	mov	r0, r3
 8009806:	f7f8 f947 	bl	8001a98 <_ZNK11flatbuffers5Table8GetFieldImEET_tS2_>
 800980a:	4603      	mov	r3, r0
  }
 800980c:	4618      	mov	r0, r3
 800980e:	3708      	adds	r7, #8
 8009810:	46bd      	mov	sp, r7
 8009812:	bd80      	pop	{r7, pc}

08009814 <_ZNK6tflite8Operator14custom_optionsEv>:
  const flatbuffers::Vector<uint8_t> *custom_options() const {
 8009814:	b580      	push	{r7, lr}
 8009816:	b082      	sub	sp, #8
 8009818:	af00      	add	r7, sp, #0
 800981a:	6078      	str	r0, [r7, #4]
    return GetPointer<const flatbuffers::Vector<uint8_t> *>(VT_CUSTOM_OPTIONS);
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	210e      	movs	r1, #14
 8009820:	4618      	mov	r0, r3
 8009822:	f7ff f80a 	bl	800883a <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorIhEEEET_t>
 8009826:	4603      	mov	r3, r0
  }
 8009828:	4618      	mov	r0, r3
 800982a:	3708      	adds	r7, #8
 800982c:	46bd      	mov	sp, r7
 800982e:	bd80      	pop	{r7, pc}

08009830 <_ZNK6tflite5Model14operator_codesEv>:
  const flatbuffers::Vector<flatbuffers::Offset<tflite::OperatorCode>> *operator_codes() const {
 8009830:	b580      	push	{r7, lr}
 8009832:	b082      	sub	sp, #8
 8009834:	af00      	add	r7, sp, #0
 8009836:	6078      	str	r0, [r7, #4]
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<tflite::OperatorCode>> *>(VT_OPERATOR_CODES);
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	2106      	movs	r1, #6
 800983c:	4618      	mov	r0, r3
 800983e:	f000 fd30 	bl	800a2a2 <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite12OperatorCodeEEEEEEET_t>
 8009842:	4603      	mov	r3, r0
  }
 8009844:	4618      	mov	r0, r3
 8009846:	3708      	adds	r7, #8
 8009848:	46bd      	mov	sp, r7
 800984a:	bd80      	pop	{r7, pc}

0800984c <_ZN6tflite10MicroGraph23GetCurrentSubgraphIndexEv>:
  // allowing MicroGraph to init / prepare / invoke subgraphs in the model.
  void SetSubgraphAllocations(SubgraphAllocations* subgraph_allocations);

  // Get the current subgraph index. Within an on operator, this is guaranteed
  // to be the subgraph of that operator.
  int GetCurrentSubgraphIndex() { return current_subgraph_index_; }
 800984c:	b480      	push	{r7}
 800984e:	b083      	sub	sp, #12
 8009850:	af00      	add	r7, sp, #0
 8009852:	6078      	str	r0, [r7, #4]
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	695b      	ldr	r3, [r3, #20]
 8009858:	4618      	mov	r0, r3
 800985a:	370c      	adds	r7, #12
 800985c:	46bd      	mov	sp, r7
 800985e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009862:	4770      	bx	lr

08009864 <_ZN6tflite10MicroGraph14GetAllocationsEv>:

  // Gets the list of alloctions for each subgraph. This is the source of truth
  // for all per-subgraph allocation data.
  SubgraphAllocations* GetAllocations() { return subgraph_allocations_; }
 8009864:	b480      	push	{r7}
 8009866:	b083      	sub	sp, #12
 8009868:	af00      	add	r7, sp, #0
 800986a:	6078      	str	r0, [r7, #4]
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	691b      	ldr	r3, [r3, #16]
 8009870:	4618      	mov	r0, r3
 8009872:	370c      	adds	r7, #12
 8009874:	46bd      	mov	sp, r7
 8009876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800987a:	4770      	bx	lr

0800987c <_ZNK6tflite16MicroInterpreter11inputs_sizeEv>:
  // values other than kTfLiteOk and kTfLiteError.
  // TODO(b/149795762): Add this to the TfLiteStatus enum.
  TfLiteStatus Invoke();

  TfLiteTensor* input(size_t index);
  size_t inputs_size() const {
 800987c:	b580      	push	{r7, lr}
 800987e:	b082      	sub	sp, #8
 8009880:	af00      	add	r7, sp, #0
 8009882:	6078      	str	r0, [r7, #4]
    return model_->subgraphs()->Get(0)->inputs()->size();
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	681b      	ldr	r3, [r3, #0]
 8009888:	4618      	mov	r0, r3
 800988a:	f7fd f833 	bl	80068f4 <_ZNK6tflite5Model9subgraphsEv>
 800988e:	4603      	mov	r3, r0
 8009890:	2100      	movs	r1, #0
 8009892:	4618      	mov	r0, r3
 8009894:	f7fd f8ac 	bl	80069f0 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE3GetEm>
 8009898:	4603      	mov	r3, r0
 800989a:	4618      	mov	r0, r3
 800989c:	f7fd fbdb 	bl	8007056 <_ZNK6tflite8SubGraph6inputsEv>
 80098a0:	4603      	mov	r3, r0
 80098a2:	4618      	mov	r0, r3
 80098a4:	f7fa ff99 	bl	80047da <_ZNK11flatbuffers6VectorIlE4sizeEv>
 80098a8:	4603      	mov	r3, r0
  }
 80098aa:	4618      	mov	r0, r3
 80098ac:	3708      	adds	r7, #8
 80098ae:	46bd      	mov	sp, r7
 80098b0:	bd80      	pop	{r7, pc}

080098b2 <_ZNK6tflite16MicroInterpreter6inputsEv>:
  const flatbuffers::Vector<int32_t>& inputs() const {
 80098b2:	b580      	push	{r7, lr}
 80098b4:	b082      	sub	sp, #8
 80098b6:	af00      	add	r7, sp, #0
 80098b8:	6078      	str	r0, [r7, #4]
    return *model_->subgraphs()->Get(0)->inputs();
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	681b      	ldr	r3, [r3, #0]
 80098be:	4618      	mov	r0, r3
 80098c0:	f7fd f818 	bl	80068f4 <_ZNK6tflite5Model9subgraphsEv>
 80098c4:	4603      	mov	r3, r0
 80098c6:	2100      	movs	r1, #0
 80098c8:	4618      	mov	r0, r3
 80098ca:	f7fd f891 	bl	80069f0 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE3GetEm>
 80098ce:	4603      	mov	r3, r0
 80098d0:	4618      	mov	r0, r3
 80098d2:	f7fd fbc0 	bl	8007056 <_ZNK6tflite8SubGraph6inputsEv>
 80098d6:	4603      	mov	r3, r0
  }
 80098d8:	4618      	mov	r0, r3
 80098da:	3708      	adds	r7, #8
 80098dc:	46bd      	mov	sp, r7
 80098de:	bd80      	pop	{r7, pc}

080098e0 <_ZNK6tflite16MicroInterpreter12outputs_sizeEv>:
    }
    return nullptr;
  }

  TfLiteTensor* output(size_t index);
  size_t outputs_size() const {
 80098e0:	b580      	push	{r7, lr}
 80098e2:	b082      	sub	sp, #8
 80098e4:	af00      	add	r7, sp, #0
 80098e6:	6078      	str	r0, [r7, #4]
    return model_->subgraphs()->Get(0)->outputs()->size();
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	681b      	ldr	r3, [r3, #0]
 80098ec:	4618      	mov	r0, r3
 80098ee:	f7fd f801 	bl	80068f4 <_ZNK6tflite5Model9subgraphsEv>
 80098f2:	4603      	mov	r3, r0
 80098f4:	2100      	movs	r1, #0
 80098f6:	4618      	mov	r0, r3
 80098f8:	f7fd f87a 	bl	80069f0 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE3GetEm>
 80098fc:	4603      	mov	r3, r0
 80098fe:	4618      	mov	r0, r3
 8009900:	f7fd fbb7 	bl	8007072 <_ZNK6tflite8SubGraph7outputsEv>
 8009904:	4603      	mov	r3, r0
 8009906:	4618      	mov	r0, r3
 8009908:	f7fa ff67 	bl	80047da <_ZNK11flatbuffers6VectorIlE4sizeEv>
 800990c:	4603      	mov	r3, r0
  }
 800990e:	4618      	mov	r0, r3
 8009910:	3708      	adds	r7, #8
 8009912:	46bd      	mov	sp, r7
 8009914:	bd80      	pop	{r7, pc}

08009916 <_ZNK6tflite16MicroInterpreter7outputsEv>:
  const flatbuffers::Vector<int32_t>& outputs() const {
 8009916:	b580      	push	{r7, lr}
 8009918:	b082      	sub	sp, #8
 800991a:	af00      	add	r7, sp, #0
 800991c:	6078      	str	r0, [r7, #4]
    return *model_->subgraphs()->Get(0)->outputs();
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	681b      	ldr	r3, [r3, #0]
 8009922:	4618      	mov	r0, r3
 8009924:	f7fc ffe6 	bl	80068f4 <_ZNK6tflite5Model9subgraphsEv>
 8009928:	4603      	mov	r3, r0
 800992a:	2100      	movs	r1, #0
 800992c:	4618      	mov	r0, r3
 800992e:	f7fd f85f 	bl	80069f0 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE3GetEm>
 8009932:	4603      	mov	r3, r0
 8009934:	4618      	mov	r0, r3
 8009936:	f7fd fb9c 	bl	8007072 <_ZNK6tflite8SubGraph7outputsEv>
 800993a:	4603      	mov	r3, r0
  }
 800993c:	4618      	mov	r0, r3
 800993e:	3708      	adds	r7, #8
 8009940:	46bd      	mov	sp, r7
 8009942:	bd80      	pop	{r7, pc}

08009944 <_ZN6tflite16MicroInterpreter18get_subgraph_indexEv>:
  // TODO(b/158263161): Consider switching to Create() function to enable better
  // error reporting during initialization.
  void Init(MicroProfiler* profiler);

  // Gets the current subgraph index used from within context methods.
  int get_subgraph_index() { return graph_.GetCurrentSubgraphIndex(); }
 8009944:	b580      	push	{r7, lr}
 8009946:	b082      	sub	sp, #8
 8009948:	af00      	add	r7, sp, #0
 800994a:	6078      	str	r0, [r7, #4]
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	336c      	adds	r3, #108	; 0x6c
 8009950:	4618      	mov	r0, r3
 8009952:	f7ff ff7b 	bl	800984c <_ZN6tflite10MicroGraph23GetCurrentSubgraphIndexEv>
 8009956:	4603      	mov	r3, r0
 8009958:	4618      	mov	r0, r3
 800995a:	3708      	adds	r7, #8
 800995c:	46bd      	mov	sp, r7
 800995e:	bd80      	pop	{r7, pc}

08009960 <_ZN6tflite16MicroInterpreterC1EPKNS_5ModelERKNS_15MicroOpResolverEPhjPNS_13ErrorReporterEPNS_13MicroProfilerE>:
#include "tensorflow/lite/schema/schema_generated.h"
#include "tensorflow/lite/schema/schema_utils.h"

namespace tflite {

MicroInterpreter::MicroInterpreter(const Model* model,
 8009960:	b580      	push	{r7, lr}
 8009962:	b084      	sub	sp, #16
 8009964:	af00      	add	r7, sp, #0
 8009966:	60f8      	str	r0, [r7, #12]
 8009968:	60b9      	str	r1, [r7, #8]
 800996a:	607a      	str	r2, [r7, #4]
 800996c:	603b      	str	r3, [r7, #0]

      graph_(&context_, model, &allocator_),
      tensors_allocated_(false),
      initialization_status_(kTfLiteError),
      input_tensors_(nullptr),
      output_tensors_(nullptr) {
 800996e:	68fb      	ldr	r3, [r7, #12]
 8009970:	68ba      	ldr	r2, [r7, #8]
 8009972:	601a      	str	r2, [r3, #0]
 8009974:	68fb      	ldr	r3, [r7, #12]
 8009976:	687a      	ldr	r2, [r7, #4]
 8009978:	605a      	str	r2, [r3, #4]
 800997a:	68fb      	ldr	r3, [r7, #12]
 800997c:	69fa      	ldr	r2, [r7, #28]
 800997e:	609a      	str	r2, [r3, #8]
 8009980:	68fb      	ldr	r3, [r7, #12]
 8009982:	330c      	adds	r3, #12
 8009984:	225c      	movs	r2, #92	; 0x5c
 8009986:	2100      	movs	r1, #0
 8009988:	4618      	mov	r0, r3
 800998a:	f007 fa35 	bl	8010df8 <memset>
      allocator_(*MicroAllocator::Create(tensor_arena, tensor_arena_size,
 800998e:	69fa      	ldr	r2, [r7, #28]
 8009990:	69b9      	ldr	r1, [r7, #24]
 8009992:	6838      	ldr	r0, [r7, #0]
 8009994:	f7fe f918 	bl	8007bc8 <_ZN6tflite14MicroAllocator6CreateEPhjPNS_13ErrorReporterE>
 8009998:	4602      	mov	r2, r0
      output_tensors_(nullptr) {
 800999a:	68fb      	ldr	r3, [r7, #12]
 800999c:	669a      	str	r2, [r3, #104]	; 0x68
 800999e:	68fb      	ldr	r3, [r7, #12]
 80099a0:	f103 006c 	add.w	r0, r3, #108	; 0x6c
 80099a4:	68fb      	ldr	r3, [r7, #12]
 80099a6:	f103 010c 	add.w	r1, r3, #12
      graph_(&context_, model, &allocator_),
 80099aa:	68fb      	ldr	r3, [r7, #12]
 80099ac:	6e9b      	ldr	r3, [r3, #104]	; 0x68
      output_tensors_(nullptr) {
 80099ae:	68ba      	ldr	r2, [r7, #8]
 80099b0:	f7ff fbae 	bl	8009110 <_ZN6tflite10MicroGraphC1EP13TfLiteContextPKNS_5ModelEPNS_14MicroAllocatorE>
 80099b4:	68fb      	ldr	r3, [r7, #12]
 80099b6:	2200      	movs	r2, #0
 80099b8:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
 80099bc:	68fb      	ldr	r3, [r7, #12]
 80099be:	2201      	movs	r2, #1
 80099c0:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
 80099c4:	68fb      	ldr	r3, [r7, #12]
 80099c6:	2200      	movs	r2, #0
 80099c8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
 80099cc:	68fb      	ldr	r3, [r7, #12]
 80099ce:	2200      	movs	r2, #0
 80099d0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 80099d4:	68fb      	ldr	r3, [r7, #12]
 80099d6:	2200      	movs	r2, #0
 80099d8:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  Init(profiler);
 80099dc:	6a39      	ldr	r1, [r7, #32]
 80099de:	68f8      	ldr	r0, [r7, #12]
 80099e0:	f000 f806 	bl	80099f0 <_ZN6tflite16MicroInterpreter4InitEPNS_13MicroProfilerE>
}
 80099e4:	68fb      	ldr	r3, [r7, #12]
 80099e6:	4618      	mov	r0, r3
 80099e8:	3710      	adds	r7, #16
 80099ea:	46bd      	mov	sp, r7
 80099ec:	bd80      	pop	{r7, pc}
	...

080099f0 <_ZN6tflite16MicroInterpreter4InitEPNS_13MicroProfilerE>:
  if (graph_.GetAllocations() != nullptr) {
    graph_.FreeSubgraphs();
  }
}

void MicroInterpreter::Init(MicroProfiler* profiler) {
 80099f0:	b480      	push	{r7}
 80099f2:	b083      	sub	sp, #12
 80099f4:	af00      	add	r7, sp, #0
 80099f6:	6078      	str	r0, [r7, #4]
 80099f8:	6039      	str	r1, [r7, #0]
  context_.impl_ = static_cast<void*>(this);
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	687a      	ldr	r2, [r7, #4]
 80099fe:	619a      	str	r2, [r3, #24]
  context_.ReportError = ReportOpError;
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	4a0d      	ldr	r2, [pc, #52]	; (8009a38 <_ZN6tflite16MicroInterpreter4InitEPNS_13MicroProfilerE+0x48>)
 8009a04:	621a      	str	r2, [r3, #32]
  context_.GetTensor = GetTensor;
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	4a0c      	ldr	r2, [pc, #48]	; (8009a3c <_ZN6tflite16MicroInterpreter4InitEPNS_13MicroProfilerE+0x4c>)
 8009a0a:	65da      	str	r2, [r3, #92]	; 0x5c
  context_.ReportError = ReportOpError;
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	4a0a      	ldr	r2, [pc, #40]	; (8009a38 <_ZN6tflite16MicroInterpreter4InitEPNS_13MicroProfilerE+0x48>)
 8009a10:	621a      	str	r2, [r3, #32]
  context_.GetTensor = GetTensor;
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	4a09      	ldr	r2, [pc, #36]	; (8009a3c <_ZN6tflite16MicroInterpreter4InitEPNS_13MicroProfilerE+0x4c>)
 8009a16:	65da      	str	r2, [r3, #92]	; 0x5c
  context_.GetEvalTensor = GetEvalTensor;
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	4a09      	ldr	r2, [pc, #36]	; (8009a40 <_ZN6tflite16MicroInterpreter4InitEPNS_13MicroProfilerE+0x50>)
 8009a1c:	661a      	str	r2, [r3, #96]	; 0x60
  context_.profiler = profiler;
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	683a      	ldr	r2, [r7, #0]
 8009a22:	641a      	str	r2, [r3, #64]	; 0x40

  initialization_status_ = kTfLiteOk;
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	2200      	movs	r2, #0
 8009a28:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
}
 8009a2c:	bf00      	nop
 8009a2e:	370c      	adds	r7, #12
 8009a30:	46bd      	mov	sp, r7
 8009a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a36:	4770      	bx	lr
 8009a38:	0800a1b5 	.word	0x0800a1b5
 8009a3c:	0800a1ed 	.word	0x0800a1ed
 8009a40:	0800a23d 	.word	0x0800a23d

08009a44 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv>:

TfLiteStatus MicroInterpreter::PrepareNodeAndRegistrationDataFromFlatbuffer() {
 8009a44:	b5b0      	push	{r4, r5, r7, lr}
 8009a46:	b096      	sub	sp, #88	; 0x58
 8009a48:	af00      	add	r7, sp, #0
 8009a4a:	6078      	str	r0, [r7, #4]
  for (int subgraph_idx = 0; subgraph_idx < graph_.NumSubgraphs();
 8009a4c:	2300      	movs	r3, #0
 8009a4e:	657b      	str	r3, [r7, #84]	; 0x54
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	336c      	adds	r3, #108	; 0x6c
 8009a54:	4618      	mov	r0, r3
 8009a56:	f7ff fe1c 	bl	8009692 <_ZN6tflite10MicroGraph12NumSubgraphsEv>
 8009a5a:	4602      	mov	r2, r0
 8009a5c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009a5e:	4293      	cmp	r3, r2
 8009a60:	bfb4      	ite	lt
 8009a62:	2301      	movlt	r3, #1
 8009a64:	2300      	movge	r3, #0
 8009a66:	b2db      	uxtb	r3, r3
 8009a68:	2b00      	cmp	r3, #0
 8009a6a:	f000 8155 	beq.w	8009d18 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x2d4>
       subgraph_idx++) {
    const SubGraph* subgraph = model_->subgraphs()->Get(subgraph_idx);
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	681b      	ldr	r3, [r3, #0]
 8009a72:	4618      	mov	r0, r3
 8009a74:	f7fc ff3e 	bl	80068f4 <_ZNK6tflite5Model9subgraphsEv>
 8009a78:	4602      	mov	r2, r0
 8009a7a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009a7c:	4619      	mov	r1, r3
 8009a7e:	4610      	mov	r0, r2
 8009a80:	f7fc ffb6 	bl	80069f0 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE3GetEm>
 8009a84:	6478      	str	r0, [r7, #68]	; 0x44
    TFLITE_DCHECK(subgraph != nullptr);
 8009a86:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009a88:	2b00      	cmp	r3, #0
 8009a8a:	d101      	bne.n	8009a90 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x4c>
 8009a8c:	f006 fe87 	bl	801079e <abort>

    auto* opcodes = model_->operator_codes();
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	681b      	ldr	r3, [r3, #0]
 8009a94:	4618      	mov	r0, r3
 8009a96:	f7ff fecb 	bl	8009830 <_ZNK6tflite5Model14operator_codesEv>
 8009a9a:	6438      	str	r0, [r7, #64]	; 0x40
    BuiltinDataAllocator* builtin_data_allocator =
        allocator_.GetBuiltinDataAllocator();
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009aa0:	4618      	mov	r0, r3
 8009aa2:	f7fe febe 	bl	8008822 <_ZN6tflite14MicroAllocator23GetBuiltinDataAllocatorEv>
 8009aa6:	63f8      	str	r0, [r7, #60]	; 0x3c
    uint32_t operators_size = NumSubgraphOperators(subgraph);
 8009aa8:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8009aaa:	f7fc ff31 	bl	8006910 <_ZN6tflite20NumSubgraphOperatorsEPKNS_8SubGraphE>
 8009aae:	63b8      	str	r0, [r7, #56]	; 0x38
    for (size_t i = 0; i < operators_size; ++i) {
 8009ab0:	2300      	movs	r3, #0
 8009ab2:	653b      	str	r3, [r7, #80]	; 0x50
 8009ab4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8009ab6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ab8:	429a      	cmp	r2, r3
 8009aba:	f080 8129 	bcs.w	8009d10 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x2cc>
      const auto* op = subgraph->operators()->Get(i);
 8009abe:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8009ac0:	f7fc ff0a 	bl	80068d8 <_ZNK6tflite8SubGraph9operatorsEv>
 8009ac4:	4603      	mov	r3, r0
 8009ac6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8009ac8:	4618      	mov	r0, r3
 8009aca:	f7fe ffd5 	bl	8008a78 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8OperatorEEEE3GetEm>
 8009ace:	6378      	str	r0, [r7, #52]	; 0x34
      const size_t index = op->opcode_index();
 8009ad0:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8009ad2:	f7ff fe90 	bl	80097f6 <_ZNK6tflite8Operator12opcode_indexEv>
 8009ad6:	6338      	str	r0, [r7, #48]	; 0x30
      if (index >= opcodes->size()) {
 8009ad8:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8009ada:	f000 fbf2 	bl	800a2c2 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite12OperatorCodeEEEE4sizeEv>
 8009ade:	4602      	mov	r2, r0
 8009ae0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ae2:	4293      	cmp	r3, r2
 8009ae4:	bf2c      	ite	cs
 8009ae6:	2301      	movcs	r3, #1
 8009ae8:	2300      	movcc	r3, #0
 8009aea:	b2db      	uxtb	r3, r3
 8009aec:	2b00      	cmp	r3, #0
 8009aee:	d005      	beq.n	8009afc <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0xb8>
        MicroPrintf("Missing registration for opcode_index %d\n", index);
 8009af0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009af2:	488c      	ldr	r0, [pc, #560]	; (8009d24 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x2e0>)
 8009af4:	f7ff fa9a 	bl	800902c <_Z11MicroPrintfPKcz>
        return kTfLiteError;
 8009af8:	2301      	movs	r3, #1
 8009afa:	e10e      	b.n	8009d1a <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x2d6>
      }
      const auto* opcode = opcodes->Get(index);
 8009afc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009afe:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8009b00:	f000 fbee 	bl	800a2e0 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite12OperatorCodeEEEE3GetEm>
 8009b04:	62f8      	str	r0, [r7, #44]	; 0x2c
      TfLiteStatus status =
          GetRegistrationFromOpCode(opcode, op_resolver_, error_reporter_,
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	685b      	ldr	r3, [r3, #4]
 8009b0a:	461d      	mov	r5, r3
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	689c      	ldr	r4, [r3, #8]
                                    &(graph_.GetAllocations()[subgraph_idx]
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	336c      	adds	r3, #108	; 0x6c
 8009b14:	4618      	mov	r0, r3
 8009b16:	f7ff fea5 	bl	8009864 <_ZN6tflite10MicroGraph14GetAllocationsEv>
 8009b1a:	4602      	mov	r2, r0
 8009b1c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009b1e:	00db      	lsls	r3, r3, #3
 8009b20:	4413      	add	r3, r2
                                          .node_and_registrations[i]
 8009b22:	681a      	ldr	r2, [r3, #0]
 8009b24:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009b26:	212c      	movs	r1, #44	; 0x2c
 8009b28:	fb01 f303 	mul.w	r3, r1, r3
 8009b2c:	4413      	add	r3, r2
          GetRegistrationFromOpCode(opcode, op_resolver_, error_reporter_,
 8009b2e:	3328      	adds	r3, #40	; 0x28
 8009b30:	4622      	mov	r2, r4
 8009b32:	4629      	mov	r1, r5
 8009b34:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009b36:	f7fb ff51 	bl	80059dc <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration>
 8009b3a:	4603      	mov	r3, r0
 8009b3c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
                                          .registration));
      if (status != kTfLiteOk) {
 8009b40:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8009b44:	2b00      	cmp	r3, #0
 8009b46:	d00e      	beq.n	8009b66 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x122>
        MicroPrintf("Failed to get registration from op code %s\n ",
 8009b48:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009b4a:	f006 fb6a 	bl	8010222 <_ZN6tflite14GetBuiltinCodeEPKNS_12OperatorCodeE>
 8009b4e:	4603      	mov	r3, r0
 8009b50:	4618      	mov	r0, r3
 8009b52:	f7fb feff 	bl	8005954 <_ZN6tflite23EnumNameBuiltinOperatorENS_15BuiltinOperatorE>
 8009b56:	4603      	mov	r3, r0
 8009b58:	4619      	mov	r1, r3
 8009b5a:	4873      	ldr	r0, [pc, #460]	; (8009d28 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x2e4>)
 8009b5c:	f7ff fa66 	bl	800902c <_Z11MicroPrintfPKcz>
                    EnumNameBuiltinOperator(GetBuiltinCode(opcode)));
        return status;
 8009b60:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8009b64:	e0d9      	b.n	8009d1a <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x2d6>
      }
      const auto* registration = graph_.GetAllocations()[subgraph_idx]
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	336c      	adds	r3, #108	; 0x6c
 8009b6a:	4618      	mov	r0, r3
 8009b6c:	f7ff fe7a 	bl	8009864 <_ZN6tflite10MicroGraph14GetAllocationsEv>
 8009b70:	4602      	mov	r2, r0
 8009b72:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009b74:	00db      	lsls	r3, r3, #3
 8009b76:	4413      	add	r3, r2
                                     .node_and_registrations[i]
 8009b78:	681a      	ldr	r2, [r3, #0]
 8009b7a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009b7c:	212c      	movs	r1, #44	; 0x2c
 8009b7e:	fb01 f303 	mul.w	r3, r1, r3
 8009b82:	4413      	add	r3, r2
                                     .registration;
 8009b84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b86:	627b      	str	r3, [r7, #36]	; 0x24
      if (registration == nullptr) {
 8009b88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b8a:	2b00      	cmp	r3, #0
 8009b8c:	d105      	bne.n	8009b9a <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x156>
        MicroPrintf("Skipping op for opcode_index %d\n", index);
 8009b8e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009b90:	4866      	ldr	r0, [pc, #408]	; (8009d2c <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x2e8>)
 8009b92:	f7ff fa4b 	bl	800902c <_Z11MicroPrintfPKcz>
        return kTfLiteError;
 8009b96:	2301      	movs	r3, #1
 8009b98:	e0bf      	b.n	8009d1a <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x2d6>
      }
      BuiltinOperator op_type =
          static_cast<BuiltinOperator>(registration->builtin_code);
 8009b9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b9c:	695b      	ldr	r3, [r3, #20]
      BuiltinOperator op_type =
 8009b9e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

      const char* custom_data = nullptr;
 8009ba2:	2300      	movs	r3, #0
 8009ba4:	64fb      	str	r3, [r7, #76]	; 0x4c
      size_t custom_data_size = 0;
 8009ba6:	2300      	movs	r3, #0
 8009ba8:	64bb      	str	r3, [r7, #72]	; 0x48
      unsigned char* builtin_data = nullptr;
 8009baa:	2300      	movs	r3, #0
 8009bac:	613b      	str	r3, [r7, #16]

      if (op_type == BuiltinOperator_CUSTOM) {
 8009bae:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009bb2:	2b20      	cmp	r3, #32
 8009bb4:	d11b      	bne.n	8009bee <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x1aa>
        // Custom Ops may or may not have a non-null custom_options field.
        if (op->custom_options() != nullptr) {
 8009bb6:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8009bb8:	f7ff fe2c 	bl	8009814 <_ZNK6tflite8Operator14custom_optionsEv>
 8009bbc:	4603      	mov	r3, r0
 8009bbe:	2b00      	cmp	r3, #0
 8009bc0:	bf14      	ite	ne
 8009bc2:	2301      	movne	r3, #1
 8009bc4:	2300      	moveq	r3, #0
 8009bc6:	b2db      	uxtb	r3, r3
 8009bc8:	2b00      	cmp	r3, #0
 8009bca:	d051      	beq.n	8009c70 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x22c>
          custom_data =
              reinterpret_cast<const char*>(op->custom_options()->data());
 8009bcc:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8009bce:	f7ff fe21 	bl	8009814 <_ZNK6tflite8Operator14custom_optionsEv>
 8009bd2:	4603      	mov	r3, r0
 8009bd4:	4618      	mov	r0, r3
 8009bd6:	f7fe fff9 	bl	8008bcc <_ZNK11flatbuffers6VectorIhE4dataEv>
 8009bda:	64f8      	str	r0, [r7, #76]	; 0x4c
          custom_data_size = op->custom_options()->size();
 8009bdc:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8009bde:	f7ff fe19 	bl	8009814 <_ZNK6tflite8Operator14custom_optionsEv>
 8009be2:	4603      	mov	r3, r0
 8009be4:	4618      	mov	r0, r3
 8009be6:	f7fe fe98 	bl	800891a <_ZNK11flatbuffers6VectorIhE4sizeEv>
 8009bea:	64b8      	str	r0, [r7, #72]	; 0x48
 8009bec:	e040      	b.n	8009c70 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x22c>
        }
      } else {
        if (op->custom_options() != nullptr) {
 8009bee:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8009bf0:	f7ff fe10 	bl	8009814 <_ZNK6tflite8Operator14custom_optionsEv>
 8009bf4:	4603      	mov	r3, r0
 8009bf6:	2b00      	cmp	r3, #0
 8009bf8:	bf14      	ite	ne
 8009bfa:	2301      	movne	r3, #1
 8009bfc:	2300      	moveq	r3, #0
 8009bfe:	b2db      	uxtb	r3, r3
 8009c00:	2b00      	cmp	r3, #0
 8009c02:	d00b      	beq.n	8009c1c <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x1d8>
          MicroPrintf(
 8009c04:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009c08:	4618      	mov	r0, r3
 8009c0a:	f7fb fea3 	bl	8005954 <_ZN6tflite23EnumNameBuiltinOperatorENS_15BuiltinOperatorE>
 8009c0e:	4603      	mov	r3, r0
 8009c10:	4619      	mov	r1, r3
 8009c12:	4847      	ldr	r0, [pc, #284]	; (8009d30 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x2ec>)
 8009c14:	f7ff fa0a 	bl	800902c <_Z11MicroPrintfPKcz>
              "Unsupported behavior: found builtin operator %s with custom "
              "options.\n",
              EnumNameBuiltinOperator(op_type));
          return kTfLiteError;
 8009c18:	2301      	movs	r3, #1
 8009c1a:	e07e      	b.n	8009d1a <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x2d6>
        }

        MicroOpResolver::BuiltinParseFunction parser =
            op_resolver_.GetOpDataParser(op_type);
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	685a      	ldr	r2, [r3, #4]
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	685b      	ldr	r3, [r3, #4]
 8009c24:	681b      	ldr	r3, [r3, #0]
 8009c26:	3320      	adds	r3, #32
 8009c28:	681b      	ldr	r3, [r3, #0]
 8009c2a:	f897 1023 	ldrb.w	r1, [r7, #35]	; 0x23
 8009c2e:	4610      	mov	r0, r2
 8009c30:	4798      	blx	r3
 8009c32:	61f8      	str	r0, [r7, #28]
        if (parser == nullptr) {
 8009c34:	69fb      	ldr	r3, [r7, #28]
 8009c36:	2b00      	cmp	r3, #0
 8009c38:	d10b      	bne.n	8009c52 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x20e>
          MicroPrintf("Did not find a parser for %s",
 8009c3a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009c3e:	4618      	mov	r0, r3
 8009c40:	f7fb fe88 	bl	8005954 <_ZN6tflite23EnumNameBuiltinOperatorENS_15BuiltinOperatorE>
 8009c44:	4603      	mov	r3, r0
 8009c46:	4619      	mov	r1, r3
 8009c48:	483a      	ldr	r0, [pc, #232]	; (8009d34 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x2f0>)
 8009c4a:	f7ff f9ef 	bl	800902c <_Z11MicroPrintfPKcz>
                      EnumNameBuiltinOperator(op_type));

          return kTfLiteError;
 8009c4e:	2301      	movs	r3, #1
 8009c50:	e063      	b.n	8009d1a <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x2d6>
        }
        TF_LITE_ENSURE_STATUS(parser(op, error_reporter_,
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	6899      	ldr	r1, [r3, #8]
 8009c56:	f107 0310 	add.w	r3, r7, #16
 8009c5a:	69fc      	ldr	r4, [r7, #28]
 8009c5c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8009c5e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8009c60:	47a0      	blx	r4
 8009c62:	4603      	mov	r3, r0
 8009c64:	76fb      	strb	r3, [r7, #27]
 8009c66:	7efb      	ldrb	r3, [r7, #27]
 8009c68:	2b00      	cmp	r3, #0
 8009c6a:	d001      	beq.n	8009c70 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x22c>
 8009c6c:	7efb      	ldrb	r3, [r7, #27]
 8009c6e:	e054      	b.n	8009d1a <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x2d6>
                                     builtin_data_allocator,
                                     (void**)(&builtin_data)));
      }

      TfLiteIntArray* inputs_array;
      TF_LITE_ENSURE_STATUS(allocator_.FlatBufferVectorToTfLiteTypeArray(
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	6e9c      	ldr	r4, [r3, #104]	; 0x68
 8009c74:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8009c76:	f7fd f9c4 	bl	8007002 <_ZNK6tflite8Operator6inputsEv>
 8009c7a:	4601      	mov	r1, r0
 8009c7c:	f107 030c 	add.w	r3, r7, #12
 8009c80:	461a      	mov	r2, r3
 8009c82:	4620      	mov	r0, r4
 8009c84:	f7fe fdba 	bl	80087fc <_ZN6tflite14MicroAllocator33FlatBufferVectorToTfLiteTypeArrayEPKN11flatbuffers6VectorIlEEPP14TfLiteIntArray>
 8009c88:	4603      	mov	r3, r0
 8009c8a:	76bb      	strb	r3, [r7, #26]
 8009c8c:	7ebb      	ldrb	r3, [r7, #26]
 8009c8e:	2b00      	cmp	r3, #0
 8009c90:	d001      	beq.n	8009c96 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x252>
 8009c92:	7ebb      	ldrb	r3, [r7, #26]
 8009c94:	e041      	b.n	8009d1a <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x2d6>
          op->inputs(), &inputs_array));

      TfLiteIntArray* outputs_array;
      TF_LITE_ENSURE_STATUS(allocator_.FlatBufferVectorToTfLiteTypeArray(
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	6e9c      	ldr	r4, [r3, #104]	; 0x68
 8009c9a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8009c9c:	f7fd f9bf 	bl	800701e <_ZNK6tflite8Operator7outputsEv>
 8009ca0:	4601      	mov	r1, r0
 8009ca2:	f107 0308 	add.w	r3, r7, #8
 8009ca6:	461a      	mov	r2, r3
 8009ca8:	4620      	mov	r0, r4
 8009caa:	f7fe fda7 	bl	80087fc <_ZN6tflite14MicroAllocator33FlatBufferVectorToTfLiteTypeArrayEPKN11flatbuffers6VectorIlEEPP14TfLiteIntArray>
 8009cae:	4603      	mov	r3, r0
 8009cb0:	767b      	strb	r3, [r7, #25]
 8009cb2:	7e7b      	ldrb	r3, [r7, #25]
 8009cb4:	2b00      	cmp	r3, #0
 8009cb6:	d001      	beq.n	8009cbc <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x278>
 8009cb8:	7e7b      	ldrb	r3, [r7, #25]
 8009cba:	e02e      	b.n	8009d1a <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x2d6>
          op->outputs(), &outputs_array));

      TfLiteNode* node = &(
          graph_.GetAllocations()[subgraph_idx].node_and_registrations[i].node);
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	336c      	adds	r3, #108	; 0x6c
 8009cc0:	4618      	mov	r0, r3
 8009cc2:	f7ff fdcf 	bl	8009864 <_ZN6tflite10MicroGraph14GetAllocationsEv>
 8009cc6:	4602      	mov	r2, r0
 8009cc8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009cca:	00db      	lsls	r3, r3, #3
 8009ccc:	4413      	add	r3, r2
 8009cce:	681a      	ldr	r2, [r3, #0]
 8009cd0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009cd2:	212c      	movs	r1, #44	; 0x2c
 8009cd4:	fb01 f303 	mul.w	r3, r1, r3
 8009cd8:	4413      	add	r3, r2
 8009cda:	617b      	str	r3, [r7, #20]
      *node = {};
 8009cdc:	697b      	ldr	r3, [r7, #20]
 8009cde:	4618      	mov	r0, r3
 8009ce0:	2328      	movs	r3, #40	; 0x28
 8009ce2:	461a      	mov	r2, r3
 8009ce4:	2100      	movs	r1, #0
 8009ce6:	f007 f887 	bl	8010df8 <memset>
      node->inputs = inputs_array;
 8009cea:	68fa      	ldr	r2, [r7, #12]
 8009cec:	697b      	ldr	r3, [r7, #20]
 8009cee:	601a      	str	r2, [r3, #0]
      node->outputs = outputs_array;
 8009cf0:	68ba      	ldr	r2, [r7, #8]
 8009cf2:	697b      	ldr	r3, [r7, #20]
 8009cf4:	605a      	str	r2, [r3, #4]
      node->builtin_data = reinterpret_cast<void*>(builtin_data);
 8009cf6:	693a      	ldr	r2, [r7, #16]
 8009cf8:	697b      	ldr	r3, [r7, #20]
 8009cfa:	615a      	str	r2, [r3, #20]
      node->custom_initial_data = custom_data;
 8009cfc:	697b      	ldr	r3, [r7, #20]
 8009cfe:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009d00:	619a      	str	r2, [r3, #24]
      node->custom_initial_data_size = custom_data_size;
 8009d02:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009d04:	697b      	ldr	r3, [r7, #20]
 8009d06:	61da      	str	r2, [r3, #28]
    for (size_t i = 0; i < operators_size; ++i) {
 8009d08:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009d0a:	3301      	adds	r3, #1
 8009d0c:	653b      	str	r3, [r7, #80]	; 0x50
 8009d0e:	e6d1      	b.n	8009ab4 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x70>
  for (int subgraph_idx = 0; subgraph_idx < graph_.NumSubgraphs();
 8009d10:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009d12:	3301      	adds	r3, #1
 8009d14:	657b      	str	r3, [r7, #84]	; 0x54
 8009d16:	e69b      	b.n	8009a50 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0xc>
    }
  }
  return kTfLiteOk;
 8009d18:	2300      	movs	r3, #0
}
 8009d1a:	4618      	mov	r0, r3
 8009d1c:	3758      	adds	r7, #88	; 0x58
 8009d1e:	46bd      	mov	sp, r7
 8009d20:	bdb0      	pop	{r4, r5, r7, pc}
 8009d22:	bf00      	nop
 8009d24:	08016bbc 	.word	0x08016bbc
 8009d28:	08016be8 	.word	0x08016be8
 8009d2c:	08016c18 	.word	0x08016c18
 8009d30:	08016c3c 	.word	0x08016c3c
 8009d34:	08016c84 	.word	0x08016c84

08009d38 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv>:

TfLiteStatus MicroInterpreter::AllocateTensors() {
 8009d38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009d3c:	b088      	sub	sp, #32
 8009d3e:	af02      	add	r7, sp, #8
 8009d40:	6078      	str	r0, [r7, #4]
  SubgraphAllocations* allocations = allocator_.StartModelAllocation(model_);
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	681b      	ldr	r3, [r3, #0]
 8009d4a:	4619      	mov	r1, r3
 8009d4c:	4610      	mov	r0, r2
 8009d4e:	f7fd ff85 	bl	8007c5c <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelE>
 8009d52:	60f8      	str	r0, [r7, #12]

  if (allocations == nullptr) {
 8009d54:	68fb      	ldr	r3, [r7, #12]
 8009d56:	2b00      	cmp	r3, #0
 8009d58:	d10b      	bne.n	8009d72 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x3a>
    TF_LITE_REPORT_ERROR(error_reporter_,
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	689b      	ldr	r3, [r3, #8]
 8009d5e:	49a4      	ldr	r1, [pc, #656]	; (8009ff0 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x2b8>)
 8009d60:	4618      	mov	r0, r3
 8009d62:	f7f9 ff59 	bl	8003c18 <_ZN6tflite13ErrorReporter6ReportEPKcz>
                         "Failed starting model allocation.\n");
    initialization_status_ = kTfLiteError;
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	2201      	movs	r2, #1
 8009d6a:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
    return kTfLiteError;
 8009d6e:	2301      	movs	r3, #1
 8009d70:	e139      	b.n	8009fe6 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x2ae>
  }

  graph_.SetSubgraphAllocations(allocations);
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	336c      	adds	r3, #108	; 0x6c
 8009d76:	68f9      	ldr	r1, [r7, #12]
 8009d78:	4618      	mov	r0, r3
 8009d7a:	f7ff fc9c 	bl	80096b6 <_ZN6tflite10MicroGraph22SetSubgraphAllocationsEPNS_19SubgraphAllocationsE>

  TF_LITE_ENSURE_STATUS(PrepareNodeAndRegistrationDataFromFlatbuffer());
 8009d7e:	6878      	ldr	r0, [r7, #4]
 8009d80:	f7ff fe60 	bl	8009a44 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv>
 8009d84:	4603      	mov	r3, r0
 8009d86:	72fb      	strb	r3, [r7, #11]
 8009d88:	7afb      	ldrb	r3, [r7, #11]
 8009d8a:	2b00      	cmp	r3, #0
 8009d8c:	d001      	beq.n	8009d92 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x5a>
 8009d8e:	7afb      	ldrb	r3, [r7, #11]
 8009d90:	e129      	b.n	8009fe6 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x2ae>

  // Only allow AllocatePersistentBuffer in Init stage.
  context_.AllocatePersistentBuffer = AllocatePersistentBuffer;
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	4a97      	ldr	r2, [pc, #604]	; (8009ff4 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x2bc>)
 8009d96:	645a      	str	r2, [r3, #68]	; 0x44
  context_.RequestScratchBufferInArena = nullptr;
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	2200      	movs	r2, #0
 8009d9c:	64da      	str	r2, [r3, #76]	; 0x4c
  context_.GetScratchBuffer = nullptr;
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	2200      	movs	r2, #0
 8009da2:	651a      	str	r2, [r3, #80]	; 0x50
  context_.GetExecutionPlan = GetGraph;
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	4a94      	ldr	r2, [pc, #592]	; (8009ff8 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x2c0>)
 8009da8:	611a      	str	r2, [r3, #16]
  graph_.InitSubgraphs();
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	336c      	adds	r3, #108	; 0x6c
 8009dae:	4618      	mov	r0, r3
 8009db0:	f7ff f9f8 	bl	80091a4 <_ZN6tflite10MicroGraph13InitSubgraphsEv>

  // Both AllocatePersistentBuffer and RequestScratchBufferInArena is
  // available in Prepare stage.
  context_.RequestScratchBufferInArena = RequestScratchBufferInArena;
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	4a91      	ldr	r2, [pc, #580]	; (8009ffc <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x2c4>)
 8009db8:	64da      	str	r2, [r3, #76]	; 0x4c
  graph_.PrepareSubgraphs();
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	336c      	adds	r3, #108	; 0x6c
 8009dbe:	4618      	mov	r0, r3
 8009dc0:	f7ff fa60 	bl	8009284 <_ZN6tflite10MicroGraph16PrepareSubgraphsEv>

  // Prepare is done, we're ready for Invoke. Memory allocation is no longer
  // allowed. Kernels can only fetch scratch buffers via GetScratchBuffer.
  context_.AllocatePersistentBuffer = nullptr;
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	2200      	movs	r2, #0
 8009dc8:	645a      	str	r2, [r3, #68]	; 0x44
  context_.RequestScratchBufferInArena = nullptr;
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	2200      	movs	r2, #0
 8009dce:	64da      	str	r2, [r3, #76]	; 0x4c
  context_.GetScratchBuffer = GetScratchBuffer;
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	4a8b      	ldr	r2, [pc, #556]	; (800a000 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x2c8>)
 8009dd4:	651a      	str	r2, [r3, #80]	; 0x50

  TF_LITE_ENSURE_OK(&context_, allocator_.FinishModelAllocation(
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	6e9c      	ldr	r4, [r3, #104]	; 0x68
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	681d      	ldr	r5, [r3, #0]
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	336c      	adds	r3, #108	; 0x6c
 8009de2:	4618      	mov	r0, r3
 8009de4:	f7ff fd3e 	bl	8009864 <_ZN6tflite10MicroGraph14GetAllocationsEv>
 8009de8:	4602      	mov	r2, r0
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	338c      	adds	r3, #140	; 0x8c
 8009dee:	4629      	mov	r1, r5
 8009df0:	4620      	mov	r0, r4
 8009df2:	f7fd ffb5 	bl	8007d60 <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEPNS_19SubgraphAllocationsEPPNS_19ScratchBufferHandleE>
 8009df6:	4603      	mov	r3, r0
 8009df8:	72bb      	strb	r3, [r7, #10]
 8009dfa:	7abb      	ldrb	r3, [r7, #10]
 8009dfc:	2b00      	cmp	r3, #0
 8009dfe:	d001      	beq.n	8009e04 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0xcc>
 8009e00:	7abb      	ldrb	r3, [r7, #10]
 8009e02:	e0f0      	b.n	8009fe6 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x2ae>
                                   &scratch_buffer_handles_));

  // TODO(b/162311891): Drop these allocations when the interpreter supports
  // handling buffers from TfLiteEvalTensor.
  input_tensors_ =
      reinterpret_cast<TfLiteTensor**>(allocator_.AllocatePersistentBuffer(
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	6e9d      	ldr	r5, [r3, #104]	; 0x68
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
          sizeof(TfLiteTensor*) * inputs_size()));
 8009e0c:	681b      	ldr	r3, [r3, #0]
 8009e0e:	330c      	adds	r3, #12
 8009e10:	681c      	ldr	r4, [r3, #0]
 8009e12:	6878      	ldr	r0, [r7, #4]
 8009e14:	f7ff fd32 	bl	800987c <_ZNK6tflite16MicroInterpreter11inputs_sizeEv>
 8009e18:	4603      	mov	r3, r0
      reinterpret_cast<TfLiteTensor**>(allocator_.AllocatePersistentBuffer(
 8009e1a:	009b      	lsls	r3, r3, #2
 8009e1c:	4619      	mov	r1, r3
 8009e1e:	4628      	mov	r0, r5
 8009e20:	47a0      	blx	r4
 8009e22:	4602      	mov	r2, r0
  input_tensors_ =
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  if (input_tensors_ == nullptr) {
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009e30:	2b00      	cmp	r3, #0
 8009e32:	d10d      	bne.n	8009e50 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x118>
    TF_LITE_REPORT_ERROR(
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	689c      	ldr	r4, [r3, #8]
 8009e38:	6878      	ldr	r0, [r7, #4]
 8009e3a:	f7ff fd1f 	bl	800987c <_ZNK6tflite16MicroInterpreter11inputs_sizeEv>
 8009e3e:	4603      	mov	r3, r0
 8009e40:	009b      	lsls	r3, r3, #2
 8009e42:	461a      	mov	r2, r3
 8009e44:	496f      	ldr	r1, [pc, #444]	; (800a004 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x2cc>)
 8009e46:	4620      	mov	r0, r4
 8009e48:	f7f9 fee6 	bl	8003c18 <_ZN6tflite13ErrorReporter6ReportEPKcz>
        error_reporter_,
        "Failed to allocate memory for context->input_tensors_, "
        "%d bytes required",
        sizeof(TfLiteTensor*) * inputs_size());
    return kTfLiteError;
 8009e4c:	2301      	movs	r3, #1
 8009e4e:	e0ca      	b.n	8009fe6 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x2ae>
  }

  for (size_t i = 0; i < inputs_size(); ++i) {
 8009e50:	2300      	movs	r3, #0
 8009e52:	617b      	str	r3, [r7, #20]
 8009e54:	6878      	ldr	r0, [r7, #4]
 8009e56:	f7ff fd11 	bl	800987c <_ZNK6tflite16MicroInterpreter11inputs_sizeEv>
 8009e5a:	4602      	mov	r2, r0
 8009e5c:	697b      	ldr	r3, [r7, #20]
 8009e5e:	4293      	cmp	r3, r2
 8009e60:	bf34      	ite	cc
 8009e62:	2301      	movcc	r3, #1
 8009e64:	2300      	movcs	r3, #0
 8009e66:	b2db      	uxtb	r3, r3
 8009e68:	2b00      	cmp	r3, #0
 8009e6a:	d03c      	beq.n	8009ee6 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x1ae>
    input_tensors_[i] = allocator_.AllocatePersistentTfLiteTensor(
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	6e9e      	ldr	r6, [r3, #104]	; 0x68
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	6e9b      	ldr	r3, [r3, #104]	; 0x68
        model_, graph_.GetAllocations(), inputs().Get(i), 0);
 8009e74:	681b      	ldr	r3, [r3, #0]
 8009e76:	681d      	ldr	r5, [r3, #0]
    input_tensors_[i] = allocator_.AllocatePersistentTfLiteTensor(
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	681b      	ldr	r3, [r3, #0]
 8009e7c:	603b      	str	r3, [r7, #0]
        model_, graph_.GetAllocations(), inputs().Get(i), 0);
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	336c      	adds	r3, #108	; 0x6c
 8009e82:	4618      	mov	r0, r3
 8009e84:	f7ff fcee 	bl	8009864 <_ZN6tflite10MicroGraph14GetAllocationsEv>
 8009e88:	4680      	mov	r8, r0
 8009e8a:	6878      	ldr	r0, [r7, #4]
 8009e8c:	f7ff fd11 	bl	80098b2 <_ZNK6tflite16MicroInterpreter6inputsEv>
 8009e90:	4603      	mov	r3, r0
 8009e92:	6979      	ldr	r1, [r7, #20]
 8009e94:	4618      	mov	r0, r3
 8009e96:	f7fa fcaf 	bl	80047f8 <_ZNK11flatbuffers6VectorIlE3GetEm>
 8009e9a:	4601      	mov	r1, r0
    input_tensors_[i] = allocator_.AllocatePersistentTfLiteTensor(
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8009ea2:	697b      	ldr	r3, [r7, #20]
 8009ea4:	009b      	lsls	r3, r3, #2
 8009ea6:	18d4      	adds	r4, r2, r3
 8009ea8:	2300      	movs	r3, #0
 8009eaa:	9300      	str	r3, [sp, #0]
 8009eac:	460b      	mov	r3, r1
 8009eae:	4642      	mov	r2, r8
 8009eb0:	6839      	ldr	r1, [r7, #0]
 8009eb2:	4630      	mov	r0, r6
 8009eb4:	47a8      	blx	r5
 8009eb6:	4603      	mov	r3, r0
 8009eb8:	6023      	str	r3, [r4, #0]
    if (input_tensors_[i] == nullptr) {
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8009ec0:	697b      	ldr	r3, [r7, #20]
 8009ec2:	009b      	lsls	r3, r3, #2
 8009ec4:	4413      	add	r3, r2
 8009ec6:	681b      	ldr	r3, [r3, #0]
 8009ec8:	2b00      	cmp	r3, #0
 8009eca:	d108      	bne.n	8009ede <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x1a6>
      TF_LITE_REPORT_ERROR(error_reporter_,
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	689b      	ldr	r3, [r3, #8]
 8009ed0:	697a      	ldr	r2, [r7, #20]
 8009ed2:	494d      	ldr	r1, [pc, #308]	; (800a008 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x2d0>)
 8009ed4:	4618      	mov	r0, r3
 8009ed6:	f7f9 fe9f 	bl	8003c18 <_ZN6tflite13ErrorReporter6ReportEPKcz>
                           "Failed to initialize input tensor %d", i);
      return kTfLiteError;
 8009eda:	2301      	movs	r3, #1
 8009edc:	e083      	b.n	8009fe6 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x2ae>
  for (size_t i = 0; i < inputs_size(); ++i) {
 8009ede:	697b      	ldr	r3, [r7, #20]
 8009ee0:	3301      	adds	r3, #1
 8009ee2:	617b      	str	r3, [r7, #20]
 8009ee4:	e7b6      	b.n	8009e54 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x11c>
  }

  // TODO(b/162311891): Drop these allocations when the interpreter supports
  // handling buffers from TfLiteEvalTensor.
  output_tensors_ =
      reinterpret_cast<TfLiteTensor**>(allocator_.AllocatePersistentBuffer(
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	6e9d      	ldr	r5, [r3, #104]	; 0x68
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	6e9b      	ldr	r3, [r3, #104]	; 0x68
          sizeof(TfLiteTensor*) * outputs_size()));
 8009eee:	681b      	ldr	r3, [r3, #0]
 8009ef0:	330c      	adds	r3, #12
 8009ef2:	681c      	ldr	r4, [r3, #0]
 8009ef4:	6878      	ldr	r0, [r7, #4]
 8009ef6:	f7ff fcf3 	bl	80098e0 <_ZNK6tflite16MicroInterpreter12outputs_sizeEv>
 8009efa:	4603      	mov	r3, r0
      reinterpret_cast<TfLiteTensor**>(allocator_.AllocatePersistentBuffer(
 8009efc:	009b      	lsls	r3, r3, #2
 8009efe:	4619      	mov	r1, r3
 8009f00:	4628      	mov	r0, r5
 8009f02:	47a0      	blx	r4
 8009f04:	4602      	mov	r2, r0
  output_tensors_ =
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  if (output_tensors_ == nullptr) {
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009f12:	2b00      	cmp	r3, #0
 8009f14:	d10d      	bne.n	8009f32 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x1fa>
    TF_LITE_REPORT_ERROR(
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	689c      	ldr	r4, [r3, #8]
 8009f1a:	6878      	ldr	r0, [r7, #4]
 8009f1c:	f7ff fce0 	bl	80098e0 <_ZNK6tflite16MicroInterpreter12outputs_sizeEv>
 8009f20:	4603      	mov	r3, r0
 8009f22:	009b      	lsls	r3, r3, #2
 8009f24:	461a      	mov	r2, r3
 8009f26:	4939      	ldr	r1, [pc, #228]	; (800a00c <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x2d4>)
 8009f28:	4620      	mov	r0, r4
 8009f2a:	f7f9 fe75 	bl	8003c18 <_ZN6tflite13ErrorReporter6ReportEPKcz>
        error_reporter_,
        "Failed to allocate memory for context->output_tensors_, "
        "%d bytes required",
        sizeof(TfLiteTensor*) * outputs_size());
    return kTfLiteError;
 8009f2e:	2301      	movs	r3, #1
 8009f30:	e059      	b.n	8009fe6 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x2ae>
  }

  for (size_t i = 0; i < outputs_size(); ++i) {
 8009f32:	2300      	movs	r3, #0
 8009f34:	613b      	str	r3, [r7, #16]
 8009f36:	6878      	ldr	r0, [r7, #4]
 8009f38:	f7ff fcd2 	bl	80098e0 <_ZNK6tflite16MicroInterpreter12outputs_sizeEv>
 8009f3c:	4602      	mov	r2, r0
 8009f3e:	693b      	ldr	r3, [r7, #16]
 8009f40:	4293      	cmp	r3, r2
 8009f42:	bf34      	ite	cc
 8009f44:	2301      	movcc	r3, #1
 8009f46:	2300      	movcs	r3, #0
 8009f48:	b2db      	uxtb	r3, r3
 8009f4a:	2b00      	cmp	r3, #0
 8009f4c:	d03c      	beq.n	8009fc8 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x290>
    output_tensors_[i] = allocator_.AllocatePersistentTfLiteTensor(
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	6e9e      	ldr	r6, [r3, #104]	; 0x68
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	6e9b      	ldr	r3, [r3, #104]	; 0x68
        model_, graph_.GetAllocations(), outputs().Get(i), 0);
 8009f56:	681b      	ldr	r3, [r3, #0]
 8009f58:	681d      	ldr	r5, [r3, #0]
    output_tensors_[i] = allocator_.AllocatePersistentTfLiteTensor(
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	681b      	ldr	r3, [r3, #0]
 8009f5e:	603b      	str	r3, [r7, #0]
        model_, graph_.GetAllocations(), outputs().Get(i), 0);
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	336c      	adds	r3, #108	; 0x6c
 8009f64:	4618      	mov	r0, r3
 8009f66:	f7ff fc7d 	bl	8009864 <_ZN6tflite10MicroGraph14GetAllocationsEv>
 8009f6a:	4680      	mov	r8, r0
 8009f6c:	6878      	ldr	r0, [r7, #4]
 8009f6e:	f7ff fcd2 	bl	8009916 <_ZNK6tflite16MicroInterpreter7outputsEv>
 8009f72:	4603      	mov	r3, r0
 8009f74:	6939      	ldr	r1, [r7, #16]
 8009f76:	4618      	mov	r0, r3
 8009f78:	f7fa fc3e 	bl	80047f8 <_ZNK11flatbuffers6VectorIlE3GetEm>
 8009f7c:	4601      	mov	r1, r0
    output_tensors_[i] = allocator_.AllocatePersistentTfLiteTensor(
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 8009f84:	693b      	ldr	r3, [r7, #16]
 8009f86:	009b      	lsls	r3, r3, #2
 8009f88:	18d4      	adds	r4, r2, r3
 8009f8a:	2300      	movs	r3, #0
 8009f8c:	9300      	str	r3, [sp, #0]
 8009f8e:	460b      	mov	r3, r1
 8009f90:	4642      	mov	r2, r8
 8009f92:	6839      	ldr	r1, [r7, #0]
 8009f94:	4630      	mov	r0, r6
 8009f96:	47a8      	blx	r5
 8009f98:	4603      	mov	r3, r0
 8009f9a:	6023      	str	r3, [r4, #0]
    if (output_tensors_[i] == nullptr) {
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 8009fa2:	693b      	ldr	r3, [r7, #16]
 8009fa4:	009b      	lsls	r3, r3, #2
 8009fa6:	4413      	add	r3, r2
 8009fa8:	681b      	ldr	r3, [r3, #0]
 8009faa:	2b00      	cmp	r3, #0
 8009fac:	d108      	bne.n	8009fc0 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x288>
      TF_LITE_REPORT_ERROR(error_reporter_,
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	689b      	ldr	r3, [r3, #8]
 8009fb2:	693a      	ldr	r2, [r7, #16]
 8009fb4:	4916      	ldr	r1, [pc, #88]	; (800a010 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x2d8>)
 8009fb6:	4618      	mov	r0, r3
 8009fb8:	f7f9 fe2e 	bl	8003c18 <_ZN6tflite13ErrorReporter6ReportEPKcz>
                           "Failed to initialize output tensor %d", i);
      return kTfLiteError;
 8009fbc:	2301      	movs	r3, #1
 8009fbe:	e012      	b.n	8009fe6 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x2ae>
  for (size_t i = 0; i < outputs_size(); ++i) {
 8009fc0:	693b      	ldr	r3, [r7, #16]
 8009fc2:	3301      	adds	r3, #1
 8009fc4:	613b      	str	r3, [r7, #16]
 8009fc6:	e7b6      	b.n	8009f36 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x1fe>
    }
  }

  TF_LITE_ENSURE_STATUS(ResetVariableTensors());
 8009fc8:	6878      	ldr	r0, [r7, #4]
 8009fca:	f000 f89d 	bl	800a108 <_ZN6tflite16MicroInterpreter20ResetVariableTensorsEv>
 8009fce:	4603      	mov	r3, r0
 8009fd0:	727b      	strb	r3, [r7, #9]
 8009fd2:	7a7b      	ldrb	r3, [r7, #9]
 8009fd4:	2b00      	cmp	r3, #0
 8009fd6:	d001      	beq.n	8009fdc <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x2a4>
 8009fd8:	7a7b      	ldrb	r3, [r7, #9]
 8009fda:	e004      	b.n	8009fe6 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x2ae>

  tensors_allocated_ = true;
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	2201      	movs	r2, #1
 8009fe0:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
  return kTfLiteOk;
 8009fe4:	2300      	movs	r3, #0
}
 8009fe6:	4618      	mov	r0, r3
 8009fe8:	3718      	adds	r7, #24
 8009fea:	46bd      	mov	sp, r7
 8009fec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009ff0:	08016ca4 	.word	0x08016ca4
 8009ff4:	0800a125 	.word	0x0800a125
 8009ff8:	0800a27b 	.word	0x0800a27b
 8009ffc:	0800a151 	.word	0x0800a151
 800a000:	0800a187 	.word	0x0800a187
 800a004:	08016cc8 	.word	0x08016cc8
 800a008:	08016d14 	.word	0x08016d14
 800a00c:	08016d3c 	.word	0x08016d3c
 800a010:	08016d88 	.word	0x08016d88

0800a014 <_ZN6tflite16MicroInterpreter6InvokeEv>:

TfLiteStatus MicroInterpreter::Invoke() {
 800a014:	b580      	push	{r7, lr}
 800a016:	b084      	sub	sp, #16
 800a018:	af00      	add	r7, sp, #0
 800a01a:	6078      	str	r0, [r7, #4]
  if (initialization_status_ != kTfLiteOk) {
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 800a022:	2b00      	cmp	r3, #0
 800a024:	d007      	beq.n	800a036 <_ZN6tflite16MicroInterpreter6InvokeEv+0x22>
    TF_LITE_REPORT_ERROR(error_reporter_,
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	689b      	ldr	r3, [r3, #8]
 800a02a:	4912      	ldr	r1, [pc, #72]	; (800a074 <_ZN6tflite16MicroInterpreter6InvokeEv+0x60>)
 800a02c:	4618      	mov	r0, r3
 800a02e:	f7f9 fdf3 	bl	8003c18 <_ZN6tflite13ErrorReporter6ReportEPKcz>
                         "Invoke() called after initialization failed\n");
    return kTfLiteError;
 800a032:	2301      	movs	r3, #1
 800a034:	e019      	b.n	800a06a <_ZN6tflite16MicroInterpreter6InvokeEv+0x56>
  }

  // Ensure tensors are allocated before the interpreter is invoked to avoid
  // difficult to debug segfaults.
  if (!tensors_allocated_) {
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 800a03c:	f083 0301 	eor.w	r3, r3, #1
 800a040:	b2db      	uxtb	r3, r3
 800a042:	2b00      	cmp	r3, #0
 800a044:	d009      	beq.n	800a05a <_ZN6tflite16MicroInterpreter6InvokeEv+0x46>
    TF_LITE_ENSURE_OK(&context_, AllocateTensors());
 800a046:	6878      	ldr	r0, [r7, #4]
 800a048:	f7ff fe76 	bl	8009d38 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv>
 800a04c:	4603      	mov	r3, r0
 800a04e:	73fb      	strb	r3, [r7, #15]
 800a050:	7bfb      	ldrb	r3, [r7, #15]
 800a052:	2b00      	cmp	r3, #0
 800a054:	d001      	beq.n	800a05a <_ZN6tflite16MicroInterpreter6InvokeEv+0x46>
 800a056:	7bfb      	ldrb	r3, [r7, #15]
 800a058:	e007      	b.n	800a06a <_ZN6tflite16MicroInterpreter6InvokeEv+0x56>
  }
  return graph_.InvokeSubgraph(0);
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	336c      	adds	r3, #108	; 0x6c
 800a05e:	2100      	movs	r1, #0
 800a060:	4618      	mov	r0, r3
 800a062:	f7ff f9e5 	bl	8009430 <_ZN6tflite10MicroGraph14InvokeSubgraphEi>
 800a066:	4603      	mov	r3, r0
 800a068:	bf00      	nop
}
 800a06a:	4618      	mov	r0, r3
 800a06c:	3710      	adds	r7, #16
 800a06e:	46bd      	mov	sp, r7
 800a070:	bd80      	pop	{r7, pc}
 800a072:	bf00      	nop
 800a074:	08016db0 	.word	0x08016db0

0800a078 <_ZN6tflite16MicroInterpreter5inputEj>:

TfLiteTensor* MicroInterpreter::input(size_t index) {
 800a078:	b580      	push	{r7, lr}
 800a07a:	b084      	sub	sp, #16
 800a07c:	af00      	add	r7, sp, #0
 800a07e:	6078      	str	r0, [r7, #4]
 800a080:	6039      	str	r1, [r7, #0]
  const size_t length = inputs_size();
 800a082:	6878      	ldr	r0, [r7, #4]
 800a084:	f7ff fbfa 	bl	800987c <_ZNK6tflite16MicroInterpreter11inputs_sizeEv>
 800a088:	60f8      	str	r0, [r7, #12]
  if (index >= length) {
 800a08a:	683a      	ldr	r2, [r7, #0]
 800a08c:	68fb      	ldr	r3, [r7, #12]
 800a08e:	429a      	cmp	r2, r3
 800a090:	d308      	bcc.n	800a0a4 <_ZN6tflite16MicroInterpreter5inputEj+0x2c>
    TF_LITE_REPORT_ERROR(error_reporter_,
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	6898      	ldr	r0, [r3, #8]
 800a096:	68fb      	ldr	r3, [r7, #12]
 800a098:	683a      	ldr	r2, [r7, #0]
 800a09a:	4908      	ldr	r1, [pc, #32]	; (800a0bc <_ZN6tflite16MicroInterpreter5inputEj+0x44>)
 800a09c:	f7f9 fdbc 	bl	8003c18 <_ZN6tflite13ErrorReporter6ReportEPKcz>
                         "Input index %d out of range (length is %d)", index,
                         length);
    return nullptr;
 800a0a0:	2300      	movs	r3, #0
 800a0a2:	e006      	b.n	800a0b2 <_ZN6tflite16MicroInterpreter5inputEj+0x3a>
  }
  return input_tensors_[index];
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 800a0aa:	683b      	ldr	r3, [r7, #0]
 800a0ac:	009b      	lsls	r3, r3, #2
 800a0ae:	4413      	add	r3, r2
 800a0b0:	681b      	ldr	r3, [r3, #0]
}
 800a0b2:	4618      	mov	r0, r3
 800a0b4:	3710      	adds	r7, #16
 800a0b6:	46bd      	mov	sp, r7
 800a0b8:	bd80      	pop	{r7, pc}
 800a0ba:	bf00      	nop
 800a0bc:	08016de0 	.word	0x08016de0

0800a0c0 <_ZN6tflite16MicroInterpreter6outputEj>:

TfLiteTensor* MicroInterpreter::output(size_t index) {
 800a0c0:	b580      	push	{r7, lr}
 800a0c2:	b084      	sub	sp, #16
 800a0c4:	af00      	add	r7, sp, #0
 800a0c6:	6078      	str	r0, [r7, #4]
 800a0c8:	6039      	str	r1, [r7, #0]
  const size_t length = outputs_size();
 800a0ca:	6878      	ldr	r0, [r7, #4]
 800a0cc:	f7ff fc08 	bl	80098e0 <_ZNK6tflite16MicroInterpreter12outputs_sizeEv>
 800a0d0:	60f8      	str	r0, [r7, #12]
  if (index >= length) {
 800a0d2:	683a      	ldr	r2, [r7, #0]
 800a0d4:	68fb      	ldr	r3, [r7, #12]
 800a0d6:	429a      	cmp	r2, r3
 800a0d8:	d308      	bcc.n	800a0ec <_ZN6tflite16MicroInterpreter6outputEj+0x2c>
    TF_LITE_REPORT_ERROR(error_reporter_,
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	6898      	ldr	r0, [r3, #8]
 800a0de:	68fb      	ldr	r3, [r7, #12]
 800a0e0:	683a      	ldr	r2, [r7, #0]
 800a0e2:	4908      	ldr	r1, [pc, #32]	; (800a104 <_ZN6tflite16MicroInterpreter6outputEj+0x44>)
 800a0e4:	f7f9 fd98 	bl	8003c18 <_ZN6tflite13ErrorReporter6ReportEPKcz>
                         "Output index %d out of range (length is %d)", index,
                         length);
    return nullptr;
 800a0e8:	2300      	movs	r3, #0
 800a0ea:	e006      	b.n	800a0fa <_ZN6tflite16MicroInterpreter6outputEj+0x3a>
  }
  return output_tensors_[index];
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 800a0f2:	683b      	ldr	r3, [r7, #0]
 800a0f4:	009b      	lsls	r3, r3, #2
 800a0f6:	4413      	add	r3, r2
 800a0f8:	681b      	ldr	r3, [r3, #0]
}
 800a0fa:	4618      	mov	r0, r3
 800a0fc:	3710      	adds	r7, #16
 800a0fe:	46bd      	mov	sp, r7
 800a100:	bd80      	pop	{r7, pc}
 800a102:	bf00      	nop
 800a104:	08016e0c 	.word	0x08016e0c

0800a108 <_ZN6tflite16MicroInterpreter20ResetVariableTensorsEv>:

TfLiteStatus MicroInterpreter::ResetVariableTensors() {
 800a108:	b580      	push	{r7, lr}
 800a10a:	b082      	sub	sp, #8
 800a10c:	af00      	add	r7, sp, #0
 800a10e:	6078      	str	r0, [r7, #4]
  return graph_.ResetVariableTensors();
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	336c      	adds	r3, #108	; 0x6c
 800a114:	4618      	mov	r0, r3
 800a116:	f7ff fa2b 	bl	8009570 <_ZN6tflite10MicroGraph20ResetVariableTensorsEv>
 800a11a:	4603      	mov	r3, r0
}
 800a11c:	4618      	mov	r0, r3
 800a11e:	3708      	adds	r7, #8
 800a120:	46bd      	mov	sp, r7
 800a122:	bd80      	pop	{r7, pc}

0800a124 <_ZN6tflite16MicroInterpreter24AllocatePersistentBufferEP13TfLiteContextj>:

void* MicroInterpreter::AllocatePersistentBuffer(TfLiteContext* ctx,
                                                 size_t bytes) {
 800a124:	b580      	push	{r7, lr}
 800a126:	b082      	sub	sp, #8
 800a128:	af00      	add	r7, sp, #0
 800a12a:	6078      	str	r0, [r7, #4]
 800a12c:	6039      	str	r1, [r7, #0]
  return reinterpret_cast<MicroInterpreter*>(ctx->impl_)
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	68db      	ldr	r3, [r3, #12]
      ->allocator_.AllocatePersistentBuffer(bytes);
 800a132:	6e9a      	ldr	r2, [r3, #104]	; 0x68
  return reinterpret_cast<MicroInterpreter*>(ctx->impl_)
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	68db      	ldr	r3, [r3, #12]
      ->allocator_.AllocatePersistentBuffer(bytes);
 800a138:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a13a:	681b      	ldr	r3, [r3, #0]
 800a13c:	330c      	adds	r3, #12
 800a13e:	681b      	ldr	r3, [r3, #0]
 800a140:	6839      	ldr	r1, [r7, #0]
 800a142:	4610      	mov	r0, r2
 800a144:	4798      	blx	r3
 800a146:	4603      	mov	r3, r0
}
 800a148:	4618      	mov	r0, r3
 800a14a:	3708      	adds	r7, #8
 800a14c:	46bd      	mov	sp, r7
 800a14e:	bd80      	pop	{r7, pc}

0800a150 <_ZN6tflite16MicroInterpreter27RequestScratchBufferInArenaEP13TfLiteContextjPi>:

TfLiteStatus MicroInterpreter::RequestScratchBufferInArena(TfLiteContext* ctx,
                                                           size_t bytes,
                                                           int* buffer_idx) {
 800a150:	b590      	push	{r4, r7, lr}
 800a152:	b087      	sub	sp, #28
 800a154:	af00      	add	r7, sp, #0
 800a156:	60f8      	str	r0, [r7, #12]
 800a158:	60b9      	str	r1, [r7, #8]
 800a15a:	607a      	str	r2, [r7, #4]
  MicroInterpreter* interpreter =
 800a15c:	68fb      	ldr	r3, [r7, #12]
 800a15e:	68db      	ldr	r3, [r3, #12]
 800a160:	617b      	str	r3, [r7, #20]
      reinterpret_cast<MicroInterpreter*>(ctx->impl_);
  return interpreter->allocator_.RequestScratchBufferInArena(
 800a162:	697b      	ldr	r3, [r7, #20]
 800a164:	6e9c      	ldr	r4, [r3, #104]	; 0x68
 800a166:	697b      	ldr	r3, [r7, #20]
 800a168:	336c      	adds	r3, #108	; 0x6c
 800a16a:	4618      	mov	r0, r3
 800a16c:	f7ff fb6e 	bl	800984c <_ZN6tflite10MicroGraph23GetCurrentSubgraphIndexEv>
 800a170:	4602      	mov	r2, r0
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	68b9      	ldr	r1, [r7, #8]
 800a176:	4620      	mov	r0, r4
 800a178:	f7fd fe86 	bl	8007e88 <_ZN6tflite14MicroAllocator27RequestScratchBufferInArenaEjiPi>
 800a17c:	4603      	mov	r3, r0
      bytes, interpreter->graph_.GetCurrentSubgraphIndex(), buffer_idx);
}
 800a17e:	4618      	mov	r0, r3
 800a180:	371c      	adds	r7, #28
 800a182:	46bd      	mov	sp, r7
 800a184:	bd90      	pop	{r4, r7, pc}

0800a186 <_ZN6tflite16MicroInterpreter16GetScratchBufferEP13TfLiteContexti>:

void* MicroInterpreter::GetScratchBuffer(TfLiteContext* ctx, int buffer_idx) {
 800a186:	b480      	push	{r7}
 800a188:	b085      	sub	sp, #20
 800a18a:	af00      	add	r7, sp, #0
 800a18c:	6078      	str	r0, [r7, #4]
 800a18e:	6039      	str	r1, [r7, #0]
  MicroInterpreter* interpreter =
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	68db      	ldr	r3, [r3, #12]
 800a194:	60fb      	str	r3, [r7, #12]
      reinterpret_cast<MicroInterpreter*>(ctx->impl_);
  ScratchBufferHandle* handle =
      interpreter->scratch_buffer_handles_ + buffer_idx;
 800a196:	68fb      	ldr	r3, [r7, #12]
 800a198:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 800a19c:	683b      	ldr	r3, [r7, #0]
 800a19e:	009b      	lsls	r3, r3, #2
  ScratchBufferHandle* handle =
 800a1a0:	4413      	add	r3, r2
 800a1a2:	60bb      	str	r3, [r7, #8]
  return handle->data;
 800a1a4:	68bb      	ldr	r3, [r7, #8]
 800a1a6:	681b      	ldr	r3, [r3, #0]
}
 800a1a8:	4618      	mov	r0, r3
 800a1aa:	3714      	adds	r7, #20
 800a1ac:	46bd      	mov	sp, r7
 800a1ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1b2:	4770      	bx	lr

0800a1b4 <_ZN6tflite16MicroInterpreter13ReportOpErrorEP13TfLiteContextPKcz>:

void MicroInterpreter::ReportOpError(struct TfLiteContext* context,
                                     const char* format, ...) {
 800a1b4:	b40e      	push	{r1, r2, r3}
 800a1b6:	b580      	push	{r7, lr}
 800a1b8:	b085      	sub	sp, #20
 800a1ba:	af00      	add	r7, sp, #0
 800a1bc:	6078      	str	r0, [r7, #4]
#ifndef TF_LITE_STRIP_ERROR_STRINGS
  MicroInterpreter* interpreter =
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	68db      	ldr	r3, [r3, #12]
 800a1c2:	60fb      	str	r3, [r7, #12]
      static_cast<MicroInterpreter*>(context->impl_);
  va_list args;
  va_start(args, format);
 800a1c4:	f107 0320 	add.w	r3, r7, #32
 800a1c8:	60bb      	str	r3, [r7, #8]
  TF_LITE_REPORT_ERROR(interpreter->error_reporter_, format, args);
 800a1ca:	68fb      	ldr	r3, [r7, #12]
 800a1cc:	6898      	ldr	r0, [r3, #8]
 800a1ce:	68fb      	ldr	r3, [r7, #12]
 800a1d0:	689b      	ldr	r3, [r3, #8]
 800a1d2:	681b      	ldr	r3, [r3, #0]
 800a1d4:	3308      	adds	r3, #8
 800a1d6:	681b      	ldr	r3, [r3, #0]
 800a1d8:	68ba      	ldr	r2, [r7, #8]
 800a1da:	69f9      	ldr	r1, [r7, #28]
 800a1dc:	4798      	blx	r3
  va_end(args);
#endif
}
 800a1de:	bf00      	nop
 800a1e0:	3714      	adds	r7, #20
 800a1e2:	46bd      	mov	sp, r7
 800a1e4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800a1e8:	b003      	add	sp, #12
 800a1ea:	4770      	bx	lr

0800a1ec <_ZN6tflite16MicroInterpreter9GetTensorEPK13TfLiteContexti>:

TfLiteTensor* MicroInterpreter::GetTensor(const struct TfLiteContext* context,
                                          int tensor_idx) {
 800a1ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a1f0:	b086      	sub	sp, #24
 800a1f2:	af02      	add	r7, sp, #8
 800a1f4:	6078      	str	r0, [r7, #4]
 800a1f6:	6039      	str	r1, [r7, #0]
  MicroInterpreter* interpreter =
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	68db      	ldr	r3, [r3, #12]
 800a1fc:	60fb      	str	r3, [r7, #12]
      static_cast<MicroInterpreter*>(context->impl_);
  return interpreter->allocator_.AllocateTempTfLiteTensor(
 800a1fe:	68fb      	ldr	r3, [r7, #12]
 800a200:	6e9d      	ldr	r5, [r3, #104]	; 0x68
 800a202:	68fb      	ldr	r3, [r7, #12]
 800a204:	6e9b      	ldr	r3, [r3, #104]	; 0x68
      interpreter->model_, interpreter->graph_.GetAllocations(), tensor_idx,
      interpreter->get_subgraph_index());
 800a206:	681b      	ldr	r3, [r3, #0]
 800a208:	3304      	adds	r3, #4
 800a20a:	681c      	ldr	r4, [r3, #0]
  return interpreter->allocator_.AllocateTempTfLiteTensor(
 800a20c:	68fb      	ldr	r3, [r7, #12]
 800a20e:	681e      	ldr	r6, [r3, #0]
      interpreter->model_, interpreter->graph_.GetAllocations(), tensor_idx,
 800a210:	68fb      	ldr	r3, [r7, #12]
 800a212:	336c      	adds	r3, #108	; 0x6c
 800a214:	4618      	mov	r0, r3
 800a216:	f7ff fb25 	bl	8009864 <_ZN6tflite10MicroGraph14GetAllocationsEv>
 800a21a:	4680      	mov	r8, r0
  return interpreter->allocator_.AllocateTempTfLiteTensor(
 800a21c:	68f8      	ldr	r0, [r7, #12]
 800a21e:	f7ff fb91 	bl	8009944 <_ZN6tflite16MicroInterpreter18get_subgraph_indexEv>
 800a222:	4603      	mov	r3, r0
 800a224:	9300      	str	r3, [sp, #0]
 800a226:	683b      	ldr	r3, [r7, #0]
 800a228:	4642      	mov	r2, r8
 800a22a:	4631      	mov	r1, r6
 800a22c:	4628      	mov	r0, r5
 800a22e:	47a0      	blx	r4
 800a230:	4603      	mov	r3, r0
}
 800a232:	4618      	mov	r0, r3
 800a234:	3710      	adds	r7, #16
 800a236:	46bd      	mov	sp, r7
 800a238:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800a23c <_ZN6tflite16MicroInterpreter13GetEvalTensorEPK13TfLiteContexti>:

TfLiteEvalTensor* MicroInterpreter::GetEvalTensor(
    const struct TfLiteContext* context, int tensor_idx) {
 800a23c:	b590      	push	{r4, r7, lr}
 800a23e:	b085      	sub	sp, #20
 800a240:	af00      	add	r7, sp, #0
 800a242:	6078      	str	r0, [r7, #4]
 800a244:	6039      	str	r1, [r7, #0]
  MicroInterpreter* interpreter =
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	68db      	ldr	r3, [r3, #12]
 800a24a:	60fb      	str	r3, [r7, #12]
      reinterpret_cast<MicroInterpreter*>(context->impl_);
  return &interpreter->graph_
              .GetAllocations()[interpreter->get_subgraph_index()]
 800a24c:	68fb      	ldr	r3, [r7, #12]
 800a24e:	336c      	adds	r3, #108	; 0x6c
 800a250:	4618      	mov	r0, r3
 800a252:	f7ff fb07 	bl	8009864 <_ZN6tflite10MicroGraph14GetAllocationsEv>
 800a256:	4604      	mov	r4, r0
 800a258:	68f8      	ldr	r0, [r7, #12]
 800a25a:	f7ff fb73 	bl	8009944 <_ZN6tflite16MicroInterpreter18get_subgraph_indexEv>
 800a25e:	4603      	mov	r3, r0
 800a260:	00db      	lsls	r3, r3, #3
 800a262:	4423      	add	r3, r4
              .tensors[tensor_idx];
 800a264:	6859      	ldr	r1, [r3, #4]
 800a266:	683a      	ldr	r2, [r7, #0]
 800a268:	4613      	mov	r3, r2
 800a26a:	005b      	lsls	r3, r3, #1
 800a26c:	4413      	add	r3, r2
 800a26e:	009b      	lsls	r3, r3, #2
 800a270:	440b      	add	r3, r1
}
 800a272:	4618      	mov	r0, r3
 800a274:	3714      	adds	r7, #20
 800a276:	46bd      	mov	sp, r7
 800a278:	bd90      	pop	{r4, r7, pc}

0800a27a <_ZN6tflite16MicroInterpreter8GetGraphEP13TfLiteContextPP14TfLiteIntArray>:

TfLiteStatus MicroInterpreter::GetGraph(struct TfLiteContext* context,
                                        TfLiteIntArray** args) {
 800a27a:	b480      	push	{r7}
 800a27c:	b085      	sub	sp, #20
 800a27e:	af00      	add	r7, sp, #0
 800a280:	6078      	str	r0, [r7, #4]
 800a282:	6039      	str	r1, [r7, #0]
  MicroInterpreter* interpreter =
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	68db      	ldr	r3, [r3, #12]
 800a288:	60fb      	str	r3, [r7, #12]
      reinterpret_cast<MicroInterpreter*>(context->impl_);
  *args = reinterpret_cast<TfLiteIntArray*>(&interpreter->graph_);
 800a28a:	68fb      	ldr	r3, [r7, #12]
 800a28c:	f103 026c 	add.w	r2, r3, #108	; 0x6c
 800a290:	683b      	ldr	r3, [r7, #0]
 800a292:	601a      	str	r2, [r3, #0]
  return kTfLiteOk;
 800a294:	2300      	movs	r3, #0
}
 800a296:	4618      	mov	r0, r3
 800a298:	3714      	adds	r7, #20
 800a29a:	46bd      	mov	sp, r7
 800a29c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2a0:	4770      	bx	lr

0800a2a2 <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite12OperatorCodeEEEEEEET_t>:
  template<typename P> P GetPointer(voffset_t field) const {
 800a2a2:	b580      	push	{r7, lr}
 800a2a4:	b082      	sub	sp, #8
 800a2a6:	af00      	add	r7, sp, #0
 800a2a8:	6078      	str	r0, [r7, #4]
 800a2aa:	460b      	mov	r3, r1
 800a2ac:	807b      	strh	r3, [r7, #2]
    return const_cast<Table *>(this)->GetPointer<P>(field);
 800a2ae:	887b      	ldrh	r3, [r7, #2]
 800a2b0:	4619      	mov	r1, r3
 800a2b2:	6878      	ldr	r0, [r7, #4]
 800a2b4:	f000 f83a 	bl	800a32c <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite12OperatorCodeEEEEEEET_t>
 800a2b8:	4603      	mov	r3, r0
  }
 800a2ba:	4618      	mov	r0, r3
 800a2bc:	3708      	adds	r7, #8
 800a2be:	46bd      	mov	sp, r7
 800a2c0:	bd80      	pop	{r7, pc}

0800a2c2 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite12OperatorCodeEEEE4sizeEv>:
  uoffset_t size() const { return EndianScalar(length_); }
 800a2c2:	b580      	push	{r7, lr}
 800a2c4:	b082      	sub	sp, #8
 800a2c6:	af00      	add	r7, sp, #0
 800a2c8:	6078      	str	r0, [r7, #4]
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	681b      	ldr	r3, [r3, #0]
 800a2ce:	4618      	mov	r0, r3
 800a2d0:	f7f7 fbad 	bl	8001a2e <_ZN11flatbuffers12EndianScalarImEET_S1_>
 800a2d4:	4603      	mov	r3, r0
 800a2d6:	4618      	mov	r0, r3
 800a2d8:	3708      	adds	r7, #8
 800a2da:	46bd      	mov	sp, r7
 800a2dc:	bd80      	pop	{r7, pc}
	...

0800a2e0 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite12OperatorCodeEEEE3GetEm>:
  return_type Get(uoffset_t i) const {
 800a2e0:	b580      	push	{r7, lr}
 800a2e2:	b082      	sub	sp, #8
 800a2e4:	af00      	add	r7, sp, #0
 800a2e6:	6078      	str	r0, [r7, #4]
 800a2e8:	6039      	str	r1, [r7, #0]
    FLATBUFFERS_ASSERT(i < size());
 800a2ea:	6878      	ldr	r0, [r7, #4]
 800a2ec:	f7ff ffe9 	bl	800a2c2 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite12OperatorCodeEEEE4sizeEv>
 800a2f0:	4602      	mov	r2, r0
 800a2f2:	683b      	ldr	r3, [r7, #0]
 800a2f4:	4293      	cmp	r3, r2
 800a2f6:	d306      	bcc.n	800a306 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite12OperatorCodeEEEE3GetEm+0x26>
 800a2f8:	4b09      	ldr	r3, [pc, #36]	; (800a320 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite12OperatorCodeEEEE3GetEm+0x40>)
 800a2fa:	4a0a      	ldr	r2, [pc, #40]	; (800a324 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite12OperatorCodeEEEE3GetEm+0x44>)
 800a2fc:	f44f 7183 	mov.w	r1, #262	; 0x106
 800a300:	4809      	ldr	r0, [pc, #36]	; (800a328 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite12OperatorCodeEEEE3GetEm+0x48>)
 800a302:	f006 fa53 	bl	80107ac <__assert_func>
    return IndirectHelper<T>::Read(Data(), i);
 800a306:	6878      	ldr	r0, [r7, #4]
 800a308:	f000 f844 	bl	800a394 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite12OperatorCodeEEEE4DataEv>
 800a30c:	4603      	mov	r3, r0
 800a30e:	6839      	ldr	r1, [r7, #0]
 800a310:	4618      	mov	r0, r3
 800a312:	f000 f82b 	bl	800a36c <_ZN11flatbuffers14IndirectHelperINS_6OffsetIN6tflite12OperatorCodeEEEE4ReadEPKhm>
 800a316:	4603      	mov	r3, r0
  }
 800a318:	4618      	mov	r0, r3
 800a31a:	3708      	adds	r7, #8
 800a31c:	46bd      	mov	sp, r7
 800a31e:	bd80      	pop	{r7, pc}
 800a320:	08016e38 	.word	0x08016e38
 800a324:	080170ac 	.word	0x080170ac
 800a328:	08016f14 	.word	0x08016f14

0800a32c <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite12OperatorCodeEEEEEEET_t>:
  template<typename P> P GetPointer(voffset_t field) {
 800a32c:	b580      	push	{r7, lr}
 800a32e:	b084      	sub	sp, #16
 800a330:	af00      	add	r7, sp, #0
 800a332:	6078      	str	r0, [r7, #4]
 800a334:	460b      	mov	r3, r1
 800a336:	807b      	strh	r3, [r7, #2]
    auto field_offset = GetOptionalFieldOffset(field);
 800a338:	887b      	ldrh	r3, [r7, #2]
 800a33a:	4619      	mov	r1, r3
 800a33c:	6878      	ldr	r0, [r7, #4]
 800a33e:	f7f6 fed3 	bl	80010e8 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
 800a342:	4603      	mov	r3, r0
 800a344:	81fb      	strh	r3, [r7, #14]
    auto p = data_ + field_offset;
 800a346:	687a      	ldr	r2, [r7, #4]
 800a348:	89fb      	ldrh	r3, [r7, #14]
 800a34a:	4413      	add	r3, r2
 800a34c:	60bb      	str	r3, [r7, #8]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 800a34e:	89fb      	ldrh	r3, [r7, #14]
 800a350:	2b00      	cmp	r3, #0
 800a352:	d006      	beq.n	800a362 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite12OperatorCodeEEEEEEET_t+0x36>
 800a354:	68b8      	ldr	r0, [r7, #8]
 800a356:	f7f7 fb83 	bl	8001a60 <_ZN11flatbuffers10ReadScalarImEET_PKv>
 800a35a:	4602      	mov	r2, r0
 800a35c:	68bb      	ldr	r3, [r7, #8]
 800a35e:	4413      	add	r3, r2
                        : nullptr;
 800a360:	e000      	b.n	800a364 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite12OperatorCodeEEEEEEET_t+0x38>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 800a362:	2300      	movs	r3, #0
  }
 800a364:	4618      	mov	r0, r3
 800a366:	3710      	adds	r7, #16
 800a368:	46bd      	mov	sp, r7
 800a36a:	bd80      	pop	{r7, pc}

0800a36c <_ZN11flatbuffers14IndirectHelperINS_6OffsetIN6tflite12OperatorCodeEEEE4ReadEPKhm>:
  static return_type Read(const uint8_t *p, uoffset_t i) {
 800a36c:	b580      	push	{r7, lr}
 800a36e:	b082      	sub	sp, #8
 800a370:	af00      	add	r7, sp, #0
 800a372:	6078      	str	r0, [r7, #4]
 800a374:	6039      	str	r1, [r7, #0]
    p += i * sizeof(uoffset_t);
 800a376:	683b      	ldr	r3, [r7, #0]
 800a378:	009b      	lsls	r3, r3, #2
 800a37a:	687a      	ldr	r2, [r7, #4]
 800a37c:	4413      	add	r3, r2
 800a37e:	607b      	str	r3, [r7, #4]
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
 800a380:	6878      	ldr	r0, [r7, #4]
 800a382:	f7f7 fb6d 	bl	8001a60 <_ZN11flatbuffers10ReadScalarImEET_PKv>
 800a386:	4602      	mov	r2, r0
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	4413      	add	r3, r2
  }
 800a38c:	4618      	mov	r0, r3
 800a38e:	3708      	adds	r7, #8
 800a390:	46bd      	mov	sp, r7
 800a392:	bd80      	pop	{r7, pc}

0800a394 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite12OperatorCodeEEEE4DataEv>:
  const uint8_t *Data() const {
 800a394:	b480      	push	{r7}
 800a396:	b083      	sub	sp, #12
 800a398:	af00      	add	r7, sp, #0
 800a39a:	6078      	str	r0, [r7, #4]
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	3304      	adds	r3, #4
  }
 800a3a0:	4618      	mov	r0, r3
 800a3a2:	370c      	adds	r7, #12
 800a3a4:	46bd      	mov	sp, r7
 800a3a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3aa:	4770      	bx	lr

0800a3ac <_ZN12_GLOBAL__N_120ReverseStringInPlaceEPcS0_>:

// All input buffers to the number conversion functions must be this long.
const int kFastToBufferSize = 48;

// Reverses a zero-terminated string in-place.
char* ReverseStringInPlace(char* start, char* end) {
 800a3ac:	b480      	push	{r7}
 800a3ae:	b087      	sub	sp, #28
 800a3b0:	af00      	add	r7, sp, #0
 800a3b2:	6078      	str	r0, [r7, #4]
 800a3b4:	6039      	str	r1, [r7, #0]
  char* p1 = start;
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	617b      	str	r3, [r7, #20]
  char* p2 = end - 1;
 800a3ba:	683b      	ldr	r3, [r7, #0]
 800a3bc:	3b01      	subs	r3, #1
 800a3be:	613b      	str	r3, [r7, #16]
  while (p1 < p2) {
 800a3c0:	697a      	ldr	r2, [r7, #20]
 800a3c2:	693b      	ldr	r3, [r7, #16]
 800a3c4:	429a      	cmp	r2, r3
 800a3c6:	d20e      	bcs.n	800a3e6 <_ZN12_GLOBAL__N_120ReverseStringInPlaceEPcS0_+0x3a>
    char tmp = *p1;
 800a3c8:	697b      	ldr	r3, [r7, #20]
 800a3ca:	781b      	ldrb	r3, [r3, #0]
 800a3cc:	73fb      	strb	r3, [r7, #15]
    *p1++ = *p2;
 800a3ce:	697b      	ldr	r3, [r7, #20]
 800a3d0:	1c5a      	adds	r2, r3, #1
 800a3d2:	617a      	str	r2, [r7, #20]
 800a3d4:	693a      	ldr	r2, [r7, #16]
 800a3d6:	7812      	ldrb	r2, [r2, #0]
 800a3d8:	701a      	strb	r2, [r3, #0]
    *p2-- = tmp;
 800a3da:	693b      	ldr	r3, [r7, #16]
 800a3dc:	1e5a      	subs	r2, r3, #1
 800a3de:	613a      	str	r2, [r7, #16]
 800a3e0:	7bfa      	ldrb	r2, [r7, #15]
 800a3e2:	701a      	strb	r2, [r3, #0]
  while (p1 < p2) {
 800a3e4:	e7ec      	b.n	800a3c0 <_ZN12_GLOBAL__N_120ReverseStringInPlaceEPcS0_+0x14>
  }
  return start;
 800a3e6:	687b      	ldr	r3, [r7, #4]
}
 800a3e8:	4618      	mov	r0, r3
 800a3ea:	371c      	adds	r7, #28
 800a3ec:	46bd      	mov	sp, r7
 800a3ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3f2:	4770      	bx	lr

0800a3f4 <_ZN12_GLOBAL__N_19StrCatStrEPciPKc>:

// Appends a string to a string, in-place. You need to pass in the maximum
// string length as the second argument.
char* StrCatStr(char* main, int main_max_length, const char* to_append) {
 800a3f4:	b480      	push	{r7}
 800a3f6:	b087      	sub	sp, #28
 800a3f8:	af00      	add	r7, sp, #0
 800a3fa:	60f8      	str	r0, [r7, #12]
 800a3fc:	60b9      	str	r1, [r7, #8]
 800a3fe:	607a      	str	r2, [r7, #4]
  char* current = main;
 800a400:	68fb      	ldr	r3, [r7, #12]
 800a402:	617b      	str	r3, [r7, #20]
  while (*current != 0) {
 800a404:	697b      	ldr	r3, [r7, #20]
 800a406:	781b      	ldrb	r3, [r3, #0]
 800a408:	2b00      	cmp	r3, #0
 800a40a:	d003      	beq.n	800a414 <_ZN12_GLOBAL__N_19StrCatStrEPciPKc+0x20>
    ++current;
 800a40c:	697b      	ldr	r3, [r7, #20]
 800a40e:	3301      	adds	r3, #1
 800a410:	617b      	str	r3, [r7, #20]
  while (*current != 0) {
 800a412:	e7f7      	b.n	800a404 <_ZN12_GLOBAL__N_19StrCatStrEPciPKc+0x10>
  }
  char* current_end = main + (main_max_length - 1);
 800a414:	68bb      	ldr	r3, [r7, #8]
 800a416:	3b01      	subs	r3, #1
 800a418:	68fa      	ldr	r2, [r7, #12]
 800a41a:	4413      	add	r3, r2
 800a41c:	613b      	str	r3, [r7, #16]
  while ((*to_append != 0) && (current < current_end)) {
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	781b      	ldrb	r3, [r3, #0]
 800a422:	2b00      	cmp	r3, #0
 800a424:	d00e      	beq.n	800a444 <_ZN12_GLOBAL__N_19StrCatStrEPciPKc+0x50>
 800a426:	697a      	ldr	r2, [r7, #20]
 800a428:	693b      	ldr	r3, [r7, #16]
 800a42a:	429a      	cmp	r2, r3
 800a42c:	d20a      	bcs.n	800a444 <_ZN12_GLOBAL__N_19StrCatStrEPciPKc+0x50>
    *current = *to_append;
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	781a      	ldrb	r2, [r3, #0]
 800a432:	697b      	ldr	r3, [r7, #20]
 800a434:	701a      	strb	r2, [r3, #0]
    ++current;
 800a436:	697b      	ldr	r3, [r7, #20]
 800a438:	3301      	adds	r3, #1
 800a43a:	617b      	str	r3, [r7, #20]
    ++to_append;
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	3301      	adds	r3, #1
 800a440:	607b      	str	r3, [r7, #4]
  while ((*to_append != 0) && (current < current_end)) {
 800a442:	e7ec      	b.n	800a41e <_ZN12_GLOBAL__N_19StrCatStrEPciPKc+0x2a>
  }
  *current = 0;
 800a444:	697b      	ldr	r3, [r7, #20]
 800a446:	2200      	movs	r2, #0
 800a448:	701a      	strb	r2, [r3, #0]
  return current;
 800a44a:	697b      	ldr	r3, [r7, #20]
}
 800a44c:	4618      	mov	r0, r3
 800a44e:	371c      	adds	r7, #28
 800a450:	46bd      	mov	sp, r7
 800a452:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a456:	4770      	bx	lr

0800a458 <_ZN12_GLOBAL__N_122FastUInt32ToBufferLeftEmPci>:

// Populates the provided buffer with an ASCII representation of the number.
char* FastUInt32ToBufferLeft(uint32_t i, char* buffer, int base) {
 800a458:	b580      	push	{r7, lr}
 800a45a:	b088      	sub	sp, #32
 800a45c:	af00      	add	r7, sp, #0
 800a45e:	60f8      	str	r0, [r7, #12]
 800a460:	60b9      	str	r1, [r7, #8]
 800a462:	607a      	str	r2, [r7, #4]
  char* start = buffer;
 800a464:	68bb      	ldr	r3, [r7, #8]
 800a466:	61bb      	str	r3, [r7, #24]
  do {
    int32_t digit = i % base;
 800a468:	687a      	ldr	r2, [r7, #4]
 800a46a:	68fb      	ldr	r3, [r7, #12]
 800a46c:	fbb3 f1f2 	udiv	r1, r3, r2
 800a470:	fb02 f201 	mul.w	r2, r2, r1
 800a474:	1a9b      	subs	r3, r3, r2
 800a476:	617b      	str	r3, [r7, #20]
    char character;
    if (digit < 10) {
 800a478:	697b      	ldr	r3, [r7, #20]
 800a47a:	2b09      	cmp	r3, #9
 800a47c:	dc04      	bgt.n	800a488 <_ZN12_GLOBAL__N_122FastUInt32ToBufferLeftEmPci+0x30>
      character = '0' + digit;
 800a47e:	697b      	ldr	r3, [r7, #20]
 800a480:	b2db      	uxtb	r3, r3
 800a482:	3330      	adds	r3, #48	; 0x30
 800a484:	77fb      	strb	r3, [r7, #31]
 800a486:	e003      	b.n	800a490 <_ZN12_GLOBAL__N_122FastUInt32ToBufferLeftEmPci+0x38>
    } else {
      character = 'a' + (digit - 10);
 800a488:	697b      	ldr	r3, [r7, #20]
 800a48a:	b2db      	uxtb	r3, r3
 800a48c:	3357      	adds	r3, #87	; 0x57
 800a48e:	77fb      	strb	r3, [r7, #31]
    }
    *buffer++ = character;
 800a490:	68bb      	ldr	r3, [r7, #8]
 800a492:	1c5a      	adds	r2, r3, #1
 800a494:	60ba      	str	r2, [r7, #8]
 800a496:	7ffa      	ldrb	r2, [r7, #31]
 800a498:	701a      	strb	r2, [r3, #0]
    i /= base;
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	68fa      	ldr	r2, [r7, #12]
 800a49e:	fbb2 f3f3 	udiv	r3, r2, r3
 800a4a2:	60fb      	str	r3, [r7, #12]
  } while (i > 0);
 800a4a4:	68fb      	ldr	r3, [r7, #12]
 800a4a6:	2b00      	cmp	r3, #0
 800a4a8:	d000      	beq.n	800a4ac <_ZN12_GLOBAL__N_122FastUInt32ToBufferLeftEmPci+0x54>
  do {
 800a4aa:	e7dd      	b.n	800a468 <_ZN12_GLOBAL__N_122FastUInt32ToBufferLeftEmPci+0x10>
  *buffer = 0;
 800a4ac:	68bb      	ldr	r3, [r7, #8]
 800a4ae:	2200      	movs	r2, #0
 800a4b0:	701a      	strb	r2, [r3, #0]
  ReverseStringInPlace(start, buffer);
 800a4b2:	68b9      	ldr	r1, [r7, #8]
 800a4b4:	69b8      	ldr	r0, [r7, #24]
 800a4b6:	f7ff ff79 	bl	800a3ac <_ZN12_GLOBAL__N_120ReverseStringInPlaceEPcS0_>
  return buffer;
 800a4ba:	68bb      	ldr	r3, [r7, #8]
}
 800a4bc:	4618      	mov	r0, r3
 800a4be:	3720      	adds	r7, #32
 800a4c0:	46bd      	mov	sp, r7
 800a4c2:	bd80      	pop	{r7, pc}

0800a4c4 <_ZN12_GLOBAL__N_121FastInt32ToBufferLeftElPc>:

// Populates the provided buffer with an ASCII representation of the number.
char* FastInt32ToBufferLeft(int32_t i, char* buffer) {
 800a4c4:	b580      	push	{r7, lr}
 800a4c6:	b084      	sub	sp, #16
 800a4c8:	af00      	add	r7, sp, #0
 800a4ca:	6078      	str	r0, [r7, #4]
 800a4cc:	6039      	str	r1, [r7, #0]
  uint32_t u = i;
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	60fb      	str	r3, [r7, #12]
  if (i < 0) {
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	2b00      	cmp	r3, #0
 800a4d6:	da07      	bge.n	800a4e8 <_ZN12_GLOBAL__N_121FastInt32ToBufferLeftElPc+0x24>
    *buffer++ = '-';
 800a4d8:	683b      	ldr	r3, [r7, #0]
 800a4da:	1c5a      	adds	r2, r3, #1
 800a4dc:	603a      	str	r2, [r7, #0]
 800a4de:	222d      	movs	r2, #45	; 0x2d
 800a4e0:	701a      	strb	r2, [r3, #0]
    u = -u;
 800a4e2:	68fb      	ldr	r3, [r7, #12]
 800a4e4:	425b      	negs	r3, r3
 800a4e6:	60fb      	str	r3, [r7, #12]
  }
  return FastUInt32ToBufferLeft(u, buffer, 10);
 800a4e8:	220a      	movs	r2, #10
 800a4ea:	6839      	ldr	r1, [r7, #0]
 800a4ec:	68f8      	ldr	r0, [r7, #12]
 800a4ee:	f7ff ffb3 	bl	800a458 <_ZN12_GLOBAL__N_122FastUInt32ToBufferLeftEmPci>
 800a4f2:	4603      	mov	r3, r0
}
 800a4f4:	4618      	mov	r0, r3
 800a4f6:	3710      	adds	r7, #16
 800a4f8:	46bd      	mov	sp, r7
 800a4fa:	bd80      	pop	{r7, pc}

0800a4fc <_ZN12_GLOBAL__N_111StrCatInt32EPcil>:

// Converts a number to a string and appends it to another.
char* StrCatInt32(char* main, int main_max_length, int32_t number) {
 800a4fc:	b580      	push	{r7, lr}
 800a4fe:	b090      	sub	sp, #64	; 0x40
 800a500:	af00      	add	r7, sp, #0
 800a502:	60f8      	str	r0, [r7, #12]
 800a504:	60b9      	str	r1, [r7, #8]
 800a506:	607a      	str	r2, [r7, #4]
  char number_string[kFastToBufferSize];
  FastInt32ToBufferLeft(number, number_string);
 800a508:	f107 0310 	add.w	r3, r7, #16
 800a50c:	4619      	mov	r1, r3
 800a50e:	6878      	ldr	r0, [r7, #4]
 800a510:	f7ff ffd8 	bl	800a4c4 <_ZN12_GLOBAL__N_121FastInt32ToBufferLeftElPc>
  return StrCatStr(main, main_max_length, number_string);
 800a514:	f107 0310 	add.w	r3, r7, #16
 800a518:	461a      	mov	r2, r3
 800a51a:	68b9      	ldr	r1, [r7, #8]
 800a51c:	68f8      	ldr	r0, [r7, #12]
 800a51e:	f7ff ff69 	bl	800a3f4 <_ZN12_GLOBAL__N_19StrCatStrEPciPKc>
 800a522:	4603      	mov	r3, r0
}
 800a524:	4618      	mov	r0, r3
 800a526:	3740      	adds	r7, #64	; 0x40
 800a528:	46bd      	mov	sp, r7
 800a52a:	bd80      	pop	{r7, pc}

0800a52c <_ZN12_GLOBAL__N_112StrCatUInt32EPcimi>:

// Converts a number to a string and appends it to another.
char* StrCatUInt32(char* main, int main_max_length, uint32_t number, int base) {
 800a52c:	b580      	push	{r7, lr}
 800a52e:	b090      	sub	sp, #64	; 0x40
 800a530:	af00      	add	r7, sp, #0
 800a532:	60f8      	str	r0, [r7, #12]
 800a534:	60b9      	str	r1, [r7, #8]
 800a536:	607a      	str	r2, [r7, #4]
 800a538:	603b      	str	r3, [r7, #0]
  char number_string[kFastToBufferSize];
  FastUInt32ToBufferLeft(number, number_string, base);
 800a53a:	f107 0310 	add.w	r3, r7, #16
 800a53e:	683a      	ldr	r2, [r7, #0]
 800a540:	4619      	mov	r1, r3
 800a542:	6878      	ldr	r0, [r7, #4]
 800a544:	f7ff ff88 	bl	800a458 <_ZN12_GLOBAL__N_122FastUInt32ToBufferLeftEmPci>
  return StrCatStr(main, main_max_length, number_string);
 800a548:	f107 0310 	add.w	r3, r7, #16
 800a54c:	461a      	mov	r2, r3
 800a54e:	68b9      	ldr	r1, [r7, #8]
 800a550:	68f8      	ldr	r0, [r7, #12]
 800a552:	f7ff ff4f 	bl	800a3f4 <_ZN12_GLOBAL__N_19StrCatStrEPciPKc>
 800a556:	4603      	mov	r3, r0
}
 800a558:	4618      	mov	r0, r3
 800a55a:	3740      	adds	r7, #64	; 0x40
 800a55c:	46bd      	mov	sp, r7
 800a55e:	bd80      	pop	{r7, pc}

0800a560 <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc>:

// Populates the provided buffer with ASCII representation of the float number.
// Avoids the use of any floating point instructions (since these aren't
// supported on many microcontrollers) and as a consequence prints values with
// power-of-two exponents.
char* FastFloatToBufferLeft(float f, char* buffer) {
 800a560:	b590      	push	{r4, r7, lr}
 800a562:	b09b      	sub	sp, #108	; 0x6c
 800a564:	af00      	add	r7, sp, #0
 800a566:	ed87 0a01 	vstr	s0, [r7, #4]
 800a56a:	6038      	str	r0, [r7, #0]
  char* current = buffer;
 800a56c:	683b      	ldr	r3, [r7, #0]
 800a56e:	667b      	str	r3, [r7, #100]	; 0x64
  char* current_end = buffer + (kFastToBufferSize - 1);
 800a570:	683b      	ldr	r3, [r7, #0]
 800a572:	332f      	adds	r3, #47	; 0x2f
 800a574:	653b      	str	r3, [r7, #80]	; 0x50
  // Access the bit fields of the floating point value to avoid requiring any
  // float instructions. These constants are derived from IEEE 754.
  const uint32_t sign_mask = 0x80000000;
 800a576:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a57a:	64fb      	str	r3, [r7, #76]	; 0x4c
  const uint32_t exponent_mask = 0x7f800000;
 800a57c:	f04f 43ff 	mov.w	r3, #2139095040	; 0x7f800000
 800a580:	64bb      	str	r3, [r7, #72]	; 0x48
  const int32_t exponent_shift = 23;
 800a582:	2317      	movs	r3, #23
 800a584:	647b      	str	r3, [r7, #68]	; 0x44
  const int32_t exponent_bias = 127;
 800a586:	237f      	movs	r3, #127	; 0x7f
 800a588:	643b      	str	r3, [r7, #64]	; 0x40
  const uint32_t fraction_mask = 0x007fffff;
 800a58a:	4b6a      	ldr	r3, [pc, #424]	; (800a734 <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0x1d4>)
 800a58c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a58e:	687b      	ldr	r3, [r7, #4]
  uint32_t u;
  memcpy(&u, &f, sizeof(int32_t));
 800a590:	61fb      	str	r3, [r7, #28]
  const int32_t exponent =
      ((u & exponent_mask) >> exponent_shift) - exponent_bias;
 800a592:	69fb      	ldr	r3, [r7, #28]
 800a594:	0ddb      	lsrs	r3, r3, #23
 800a596:	b2db      	uxtb	r3, r3
 800a598:	3b7f      	subs	r3, #127	; 0x7f
  const int32_t exponent =
 800a59a:	63bb      	str	r3, [r7, #56]	; 0x38
  const uint32_t fraction = (u & fraction_mask);
 800a59c:	69fb      	ldr	r3, [r7, #28]
 800a59e:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800a5a2:	637b      	str	r3, [r7, #52]	; 0x34
  // Expect ~0x2B1B9D3 for fraction.
  if (u & sign_mask) {
 800a5a4:	69fb      	ldr	r3, [r7, #28]
 800a5a6:	2b00      	cmp	r3, #0
 800a5a8:	da05      	bge.n	800a5b6 <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0x56>
    *current = '-';
 800a5aa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a5ac:	222d      	movs	r2, #45	; 0x2d
 800a5ae:	701a      	strb	r2, [r3, #0]
    current += 1;
 800a5b0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a5b2:	3301      	adds	r3, #1
 800a5b4:	667b      	str	r3, [r7, #100]	; 0x64
  }
  *current = 0;
 800a5b6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a5b8:	2200      	movs	r2, #0
 800a5ba:	701a      	strb	r2, [r3, #0]
  // These are special cases for infinities and not-a-numbers.
  if (exponent == 128) {
 800a5bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a5be:	2b80      	cmp	r3, #128	; 0x80
 800a5c0:	d118      	bne.n	800a5f4 <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0x94>
    if (fraction == 0) {
 800a5c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a5c4:	2b00      	cmp	r3, #0
 800a5c6:	d10a      	bne.n	800a5de <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0x7e>
      current = StrCatStr(current, (current_end - current), "Inf");
 800a5c8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800a5ca:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a5cc:	1ad3      	subs	r3, r2, r3
 800a5ce:	4a5a      	ldr	r2, [pc, #360]	; (800a738 <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0x1d8>)
 800a5d0:	4619      	mov	r1, r3
 800a5d2:	6e78      	ldr	r0, [r7, #100]	; 0x64
 800a5d4:	f7ff ff0e 	bl	800a3f4 <_ZN12_GLOBAL__N_19StrCatStrEPciPKc>
 800a5d8:	6678      	str	r0, [r7, #100]	; 0x64
      return current;
 800a5da:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a5dc:	e0a5      	b.n	800a72a <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0x1ca>
    } else {
      current = StrCatStr(current, (current_end - current), "NaN");
 800a5de:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800a5e0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a5e2:	1ad3      	subs	r3, r2, r3
 800a5e4:	4a55      	ldr	r2, [pc, #340]	; (800a73c <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0x1dc>)
 800a5e6:	4619      	mov	r1, r3
 800a5e8:	6e78      	ldr	r0, [r7, #100]	; 0x64
 800a5ea:	f7ff ff03 	bl	800a3f4 <_ZN12_GLOBAL__N_19StrCatStrEPciPKc>
 800a5ee:	6678      	str	r0, [r7, #100]	; 0x64
      return current;
 800a5f0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a5f2:	e09a      	b.n	800a72a <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0x1ca>
  // correct decimal digits we need to scale our value before passing it to the
  // conversion function. This scale should be 10000000/8388608 = 1.1920928955.
  // We can approximate this using multiply-adds and right-shifts using the
  // values in this array. The 1. portion of the number string is printed out
  // in a fixed way before the fraction, below.
  const int32_t scale_shifts_size = 13;
 800a5f4:	230d      	movs	r3, #13
 800a5f6:	633b      	str	r3, [r7, #48]	; 0x30
  const int8_t scale_shifts[13] = {3,  4,  8,  11, 13, 14, 17,
 800a5f8:	4b51      	ldr	r3, [pc, #324]	; (800a740 <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0x1e0>)
 800a5fa:	f107 040c 	add.w	r4, r7, #12
 800a5fe:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800a600:	c407      	stmia	r4!, {r0, r1, r2}
 800a602:	7023      	strb	r3, [r4, #0]
                                   18, 19, 20, 21, 22, 23};
  uint32_t scaled_fraction = fraction;
 800a604:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a606:	663b      	str	r3, [r7, #96]	; 0x60
  for (int i = 0; i < scale_shifts_size; ++i) {
 800a608:	2300      	movs	r3, #0
 800a60a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a60c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a60e:	2b0c      	cmp	r3, #12
 800a610:	dc0f      	bgt.n	800a632 <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0xd2>
    scaled_fraction += (fraction >> scale_shifts[i]);
 800a612:	f107 020c 	add.w	r2, r7, #12
 800a616:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a618:	4413      	add	r3, r2
 800a61a:	f993 3000 	ldrsb.w	r3, [r3]
 800a61e:	461a      	mov	r2, r3
 800a620:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a622:	40d3      	lsrs	r3, r2
 800a624:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800a626:	4413      	add	r3, r2
 800a628:	663b      	str	r3, [r7, #96]	; 0x60
  for (int i = 0; i < scale_shifts_size; ++i) {
 800a62a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a62c:	3301      	adds	r3, #1
 800a62e:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a630:	e7ec      	b.n	800a60c <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0xac>
  }
  *current = '1';
 800a632:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a634:	2231      	movs	r2, #49	; 0x31
 800a636:	701a      	strb	r2, [r3, #0]
  current += 1;
 800a638:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a63a:	3301      	adds	r3, #1
 800a63c:	667b      	str	r3, [r7, #100]	; 0x64
  *current = '.';
 800a63e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a640:	222e      	movs	r2, #46	; 0x2e
 800a642:	701a      	strb	r2, [r3, #0]
  current += 1;
 800a644:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a646:	3301      	adds	r3, #1
 800a648:	667b      	str	r3, [r7, #100]	; 0x64
  *current = 0;
 800a64a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a64c:	2200      	movs	r2, #0
 800a64e:	701a      	strb	r2, [r3, #0]

  // Prepend leading zeros to fill in all 7 bytes of the fraction. Truncate
  // zeros off the end of the fraction. Every fractional value takes 7 bytes.
  // For example, 2500 would be written into the buffer as 0002500 since it
  // represents .00025.
  constexpr int kMaxFractionalDigits = 7;
 800a650:	2307      	movs	r3, #7
 800a652:	62fb      	str	r3, [r7, #44]	; 0x2c

  // Abort early if there is not enough space in the buffer.
  if (current_end - current <= kMaxFractionalDigits) {
 800a654:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800a656:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a658:	1ad3      	subs	r3, r2, r3
 800a65a:	2b07      	cmp	r3, #7
 800a65c:	dc01      	bgt.n	800a662 <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0x102>
    return current;
 800a65e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a660:	e063      	b.n	800a72a <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0x1ca>
  }

  // Pre-fill buffer with zeros to ensure zero-truncation works properly.
  for (int i = 1; i < kMaxFractionalDigits; i++) {
 800a662:	2301      	movs	r3, #1
 800a664:	65bb      	str	r3, [r7, #88]	; 0x58
 800a666:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a668:	2b06      	cmp	r3, #6
 800a66a:	dc08      	bgt.n	800a67e <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0x11e>
    *(current + i) = '0';
 800a66c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a66e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800a670:	4413      	add	r3, r2
 800a672:	2230      	movs	r2, #48	; 0x30
 800a674:	701a      	strb	r2, [r3, #0]
  for (int i = 1; i < kMaxFractionalDigits; i++) {
 800a676:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a678:	3301      	adds	r3, #1
 800a67a:	65bb      	str	r3, [r7, #88]	; 0x58
 800a67c:	e7f3      	b.n	800a666 <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0x106>
  }

  // Track how large the fraction is to add leading zeros.
  char* previous = current;
 800a67e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a680:	62bb      	str	r3, [r7, #40]	; 0x28
  current = StrCatUInt32(current, (current_end - current), scaled_fraction, 10);
 800a682:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800a684:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a686:	1ad1      	subs	r1, r2, r3
 800a688:	230a      	movs	r3, #10
 800a68a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800a68c:	6e78      	ldr	r0, [r7, #100]	; 0x64
 800a68e:	f7ff ff4d 	bl	800a52c <_ZN12_GLOBAL__N_112StrCatUInt32EPcimi>
 800a692:	6678      	str	r0, [r7, #100]	; 0x64
  int fraction_digits = current - previous;
 800a694:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800a696:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a698:	1ad3      	subs	r3, r2, r3
 800a69a:	627b      	str	r3, [r7, #36]	; 0x24
  int leading_zeros = kMaxFractionalDigits - fraction_digits;
 800a69c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a69e:	f1c3 0307 	rsb	r3, r3, #7
 800a6a2:	623b      	str	r3, [r7, #32]

  // Overwrite the null terminator from StrCatUInt32 to ensure zero-trunctaion
  // works properly.
  *current = '0';
 800a6a4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a6a6:	2230      	movs	r2, #48	; 0x30
 800a6a8:	701a      	strb	r2, [r3, #0]

  // Shift fraction values and prepend zeros if necessary.
  if (leading_zeros != 0) {
 800a6aa:	6a3b      	ldr	r3, [r7, #32]
 800a6ac:	2b00      	cmp	r3, #0
 800a6ae:	d018      	beq.n	800a6e2 <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0x182>
    for (int i = 0; i < fraction_digits; i++) {
 800a6b0:	2300      	movs	r3, #0
 800a6b2:	657b      	str	r3, [r7, #84]	; 0x54
 800a6b4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800a6b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6b8:	429a      	cmp	r2, r3
 800a6ba:	da0f      	bge.n	800a6dc <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0x17c>
      current--;
 800a6bc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a6be:	3b01      	subs	r3, #1
 800a6c0:	667b      	str	r3, [r7, #100]	; 0x64
      *(current + leading_zeros) = *current;
 800a6c2:	6a3b      	ldr	r3, [r7, #32]
 800a6c4:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800a6c6:	4413      	add	r3, r2
 800a6c8:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800a6ca:	7812      	ldrb	r2, [r2, #0]
 800a6cc:	701a      	strb	r2, [r3, #0]
      *current = '0';
 800a6ce:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a6d0:	2230      	movs	r2, #48	; 0x30
 800a6d2:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < fraction_digits; i++) {
 800a6d4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a6d6:	3301      	adds	r3, #1
 800a6d8:	657b      	str	r3, [r7, #84]	; 0x54
 800a6da:	e7eb      	b.n	800a6b4 <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0x154>
    }
    current += kMaxFractionalDigits;
 800a6dc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a6de:	3307      	adds	r3, #7
 800a6e0:	667b      	str	r3, [r7, #100]	; 0x64
  }

  // Truncate trailing zeros for cleaner logs. Ensure we leave at least one
  // fractional character for the case when scaled_fraction is 0.
  while (*(current - 1) == '0' && (current - 1) > previous) {
 800a6e2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a6e4:	3b01      	subs	r3, #1
 800a6e6:	781b      	ldrb	r3, [r3, #0]
 800a6e8:	2b30      	cmp	r3, #48	; 0x30
 800a6ea:	d108      	bne.n	800a6fe <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0x19e>
 800a6ec:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a6ee:	3b01      	subs	r3, #1
 800a6f0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a6f2:	429a      	cmp	r2, r3
 800a6f4:	d203      	bcs.n	800a6fe <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0x19e>
    current--;
 800a6f6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a6f8:	3b01      	subs	r3, #1
 800a6fa:	667b      	str	r3, [r7, #100]	; 0x64
  while (*(current - 1) == '0' && (current - 1) > previous) {
 800a6fc:	e7f1      	b.n	800a6e2 <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0x182>
  }
  *current = 0;
 800a6fe:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a700:	2200      	movs	r2, #0
 800a702:	701a      	strb	r2, [r3, #0]
  current = StrCatStr(current, (current_end - current), "*2^");
 800a704:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800a706:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a708:	1ad3      	subs	r3, r2, r3
 800a70a:	4a0e      	ldr	r2, [pc, #56]	; (800a744 <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0x1e4>)
 800a70c:	4619      	mov	r1, r3
 800a70e:	6e78      	ldr	r0, [r7, #100]	; 0x64
 800a710:	f7ff fe70 	bl	800a3f4 <_ZN12_GLOBAL__N_19StrCatStrEPciPKc>
 800a714:	6678      	str	r0, [r7, #100]	; 0x64
  current = StrCatInt32(current, (current_end - current), exponent);
 800a716:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800a718:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a71a:	1ad3      	subs	r3, r2, r3
 800a71c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a71e:	4619      	mov	r1, r3
 800a720:	6e78      	ldr	r0, [r7, #100]	; 0x64
 800a722:	f7ff feeb 	bl	800a4fc <_ZN12_GLOBAL__N_111StrCatInt32EPcil>
 800a726:	6678      	str	r0, [r7, #100]	; 0x64
  return current;
 800a728:	6e7b      	ldr	r3, [r7, #100]	; 0x64
}
 800a72a:	4618      	mov	r0, r3
 800a72c:	376c      	adds	r7, #108	; 0x6c
 800a72e:	46bd      	mov	sp, r7
 800a730:	bd90      	pop	{r4, r7, pc}
 800a732:	bf00      	nop
 800a734:	007fffff 	.word	0x007fffff
 800a738:	080172ac 	.word	0x080172ac
 800a73c:	080172b0 	.word	0x080172b0
 800a740:	080172b8 	.word	0x080172b8
 800a744:	080172b4 	.word	0x080172b4

0800a748 <_ZN12_GLOBAL__N_111FormatInt32EPcl>:

int FormatInt32(char* output, int32_t i) {
 800a748:	b580      	push	{r7, lr}
 800a74a:	b082      	sub	sp, #8
 800a74c:	af00      	add	r7, sp, #0
 800a74e:	6078      	str	r0, [r7, #4]
 800a750:	6039      	str	r1, [r7, #0]
  return static_cast<int>(FastInt32ToBufferLeft(i, output) - output);
 800a752:	6879      	ldr	r1, [r7, #4]
 800a754:	6838      	ldr	r0, [r7, #0]
 800a756:	f7ff feb5 	bl	800a4c4 <_ZN12_GLOBAL__N_121FastInt32ToBufferLeftElPc>
 800a75a:	4602      	mov	r2, r0
 800a75c:	687b      	ldr	r3, [r7, #4]
 800a75e:	1ad3      	subs	r3, r2, r3
}
 800a760:	4618      	mov	r0, r3
 800a762:	3708      	adds	r7, #8
 800a764:	46bd      	mov	sp, r7
 800a766:	bd80      	pop	{r7, pc}

0800a768 <_ZN12_GLOBAL__N_112FormatUInt32EPcm>:

int FormatUInt32(char* output, uint32_t i) {
 800a768:	b580      	push	{r7, lr}
 800a76a:	b082      	sub	sp, #8
 800a76c:	af00      	add	r7, sp, #0
 800a76e:	6078      	str	r0, [r7, #4]
 800a770:	6039      	str	r1, [r7, #0]
  return static_cast<int>(FastUInt32ToBufferLeft(i, output, 10) - output);
 800a772:	220a      	movs	r2, #10
 800a774:	6879      	ldr	r1, [r7, #4]
 800a776:	6838      	ldr	r0, [r7, #0]
 800a778:	f7ff fe6e 	bl	800a458 <_ZN12_GLOBAL__N_122FastUInt32ToBufferLeftEmPci>
 800a77c:	4602      	mov	r2, r0
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	1ad3      	subs	r3, r2, r3
}
 800a782:	4618      	mov	r0, r3
 800a784:	3708      	adds	r7, #8
 800a786:	46bd      	mov	sp, r7
 800a788:	bd80      	pop	{r7, pc}

0800a78a <_ZN12_GLOBAL__N_19FormatHexEPcm>:

int FormatHex(char* output, uint32_t i) {
 800a78a:	b580      	push	{r7, lr}
 800a78c:	b082      	sub	sp, #8
 800a78e:	af00      	add	r7, sp, #0
 800a790:	6078      	str	r0, [r7, #4]
 800a792:	6039      	str	r1, [r7, #0]
  return static_cast<int>(FastUInt32ToBufferLeft(i, output, 16) - output);
 800a794:	2210      	movs	r2, #16
 800a796:	6879      	ldr	r1, [r7, #4]
 800a798:	6838      	ldr	r0, [r7, #0]
 800a79a:	f7ff fe5d 	bl	800a458 <_ZN12_GLOBAL__N_122FastUInt32ToBufferLeftEmPci>
 800a79e:	4602      	mov	r2, r0
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	1ad3      	subs	r3, r2, r3
}
 800a7a4:	4618      	mov	r0, r3
 800a7a6:	3708      	adds	r7, #8
 800a7a8:	46bd      	mov	sp, r7
 800a7aa:	bd80      	pop	{r7, pc}

0800a7ac <_ZN12_GLOBAL__N_111FormatFloatEPcf>:

int FormatFloat(char* output, float i) {
 800a7ac:	b580      	push	{r7, lr}
 800a7ae:	b082      	sub	sp, #8
 800a7b0:	af00      	add	r7, sp, #0
 800a7b2:	6078      	str	r0, [r7, #4]
 800a7b4:	ed87 0a00 	vstr	s0, [r7]
  return static_cast<int>(FastFloatToBufferLeft(i, output) - output);
 800a7b8:	6878      	ldr	r0, [r7, #4]
 800a7ba:	ed97 0a00 	vldr	s0, [r7]
 800a7be:	f7ff fecf 	bl	800a560 <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc>
 800a7c2:	4602      	mov	r2, r0
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	1ad3      	subs	r3, r2, r3
}
 800a7c8:	4618      	mov	r0, r3
 800a7ca:	3708      	adds	r7, #8
 800a7cc:	46bd      	mov	sp, r7
 800a7ce:	bd80      	pop	{r7, pc}

0800a7d0 <MicroVsnprintf>:

}  // namespace

extern "C" int MicroVsnprintf(char* output, int len, const char* format,
                              va_list args) {
 800a7d0:	b590      	push	{r4, r7, lr}
 800a7d2:	b08b      	sub	sp, #44	; 0x2c
 800a7d4:	af00      	add	r7, sp, #0
 800a7d6:	60f8      	str	r0, [r7, #12]
 800a7d8:	60b9      	str	r1, [r7, #8]
 800a7da:	607a      	str	r2, [r7, #4]
 800a7dc:	603b      	str	r3, [r7, #0]
  int output_index = 0;
 800a7de:	2300      	movs	r3, #0
 800a7e0:	627b      	str	r3, [r7, #36]	; 0x24
  const char* current = format;
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	623b      	str	r3, [r7, #32]
  // One extra character must be left for the null terminator.
  const int usable_length = len - 1;
 800a7e6:	68bb      	ldr	r3, [r7, #8]
 800a7e8:	3b01      	subs	r3, #1
 800a7ea:	61bb      	str	r3, [r7, #24]
  while (*current != '\0' && output_index < usable_length) {
 800a7ec:	6a3b      	ldr	r3, [r7, #32]
 800a7ee:	781b      	ldrb	r3, [r3, #0]
 800a7f0:	2b00      	cmp	r3, #0
 800a7f2:	f000 8151 	beq.w	800aa98 <MicroVsnprintf+0x2c8>
 800a7f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a7f8:	69bb      	ldr	r3, [r7, #24]
 800a7fa:	429a      	cmp	r2, r3
 800a7fc:	f280 814c 	bge.w	800aa98 <MicroVsnprintf+0x2c8>
    if (*current == '%') {
 800a800:	6a3b      	ldr	r3, [r7, #32]
 800a802:	781b      	ldrb	r3, [r3, #0]
 800a804:	2b25      	cmp	r3, #37	; 0x25
 800a806:	f040 813b 	bne.w	800aa80 <MicroVsnprintf+0x2b0>
      current++;
 800a80a:	6a3b      	ldr	r3, [r7, #32]
 800a80c:	3301      	adds	r3, #1
 800a80e:	623b      	str	r3, [r7, #32]
      switch (*current) {
 800a810:	6a3b      	ldr	r3, [r7, #32]
 800a812:	781b      	ldrb	r3, [r3, #0]
 800a814:	2b25      	cmp	r3, #37	; 0x25
 800a816:	f000 80e2 	beq.w	800a9de <MicroVsnprintf+0x20e>
 800a81a:	2b25      	cmp	r3, #37	; 0x25
 800a81c:	dbe6      	blt.n	800a7ec <MicroVsnprintf+0x1c>
 800a81e:	2b78      	cmp	r3, #120	; 0x78
 800a820:	dce4      	bgt.n	800a7ec <MicroVsnprintf+0x1c>
 800a822:	2b63      	cmp	r3, #99	; 0x63
 800a824:	dbe2      	blt.n	800a7ec <MicroVsnprintf+0x1c>
 800a826:	3b63      	subs	r3, #99	; 0x63
 800a828:	2b15      	cmp	r3, #21
 800a82a:	d8df      	bhi.n	800a7ec <MicroVsnprintf+0x1c>
 800a82c:	a201      	add	r2, pc, #4	; (adr r2, 800a834 <MicroVsnprintf+0x64>)
 800a82e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a832:	bf00      	nop
 800a834:	0800a9f7 	.word	0x0800a9f7
 800a838:	0800a88d 	.word	0x0800a88d
 800a83c:	0800a7ed 	.word	0x0800a7ed
 800a840:	0800a973 	.word	0x0800a973
 800a844:	0800a7ed 	.word	0x0800a7ed
 800a848:	0800a7ed 	.word	0x0800a7ed
 800a84c:	0800a7ed 	.word	0x0800a7ed
 800a850:	0800a7ed 	.word	0x0800a7ed
 800a854:	0800a7ed 	.word	0x0800a7ed
 800a858:	0800a7ed 	.word	0x0800a7ed
 800a85c:	0800a7ed 	.word	0x0800a7ed
 800a860:	0800a7ed 	.word	0x0800a7ed
 800a864:	0800a7ed 	.word	0x0800a7ed
 800a868:	0800a7ed 	.word	0x0800a7ed
 800a86c:	0800a7ed 	.word	0x0800a7ed
 800a870:	0800a7ed 	.word	0x0800a7ed
 800a874:	0800aa35 	.word	0x0800aa35
 800a878:	0800a7ed 	.word	0x0800a7ed
 800a87c:	0800a8cf 	.word	0x0800a8cf
 800a880:	0800a7ed 	.word	0x0800a7ed
 800a884:	0800a7ed 	.word	0x0800a7ed
 800a888:	0800a911 	.word	0x0800a911
        case 'd':
          // Cut off log message if format could exceed log buffer length.
          if (usable_length - output_index < kMaxIntCharsNeeded) {
 800a88c:	69ba      	ldr	r2, [r7, #24]
 800a88e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a890:	1ad3      	subs	r3, r2, r3
 800a892:	2b0a      	cmp	r3, #10
 800a894:	dc09      	bgt.n	800a8aa <MicroVsnprintf+0xda>
            output[output_index++] = '\0';
 800a896:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a898:	1c5a      	adds	r2, r3, #1
 800a89a:	627a      	str	r2, [r7, #36]	; 0x24
 800a89c:	461a      	mov	r2, r3
 800a89e:	68fb      	ldr	r3, [r7, #12]
 800a8a0:	4413      	add	r3, r2
 800a8a2:	2200      	movs	r2, #0
 800a8a4:	701a      	strb	r2, [r3, #0]
            return output_index;
 800a8a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8a8:	e0ff      	b.n	800aaaa <MicroVsnprintf+0x2da>
          }
          output_index +=
              FormatInt32(&output[output_index], va_arg(args, int32_t));
 800a8aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8ac:	68fa      	ldr	r2, [r7, #12]
 800a8ae:	18d0      	adds	r0, r2, r3
 800a8b0:	683b      	ldr	r3, [r7, #0]
 800a8b2:	1d1a      	adds	r2, r3, #4
 800a8b4:	603a      	str	r2, [r7, #0]
 800a8b6:	681b      	ldr	r3, [r3, #0]
 800a8b8:	4619      	mov	r1, r3
 800a8ba:	f7ff ff45 	bl	800a748 <_ZN12_GLOBAL__N_111FormatInt32EPcl>
 800a8be:	4602      	mov	r2, r0
          output_index +=
 800a8c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8c2:	4413      	add	r3, r2
 800a8c4:	627b      	str	r3, [r7, #36]	; 0x24
          current++;
 800a8c6:	6a3b      	ldr	r3, [r7, #32]
 800a8c8:	3301      	adds	r3, #1
 800a8ca:	623b      	str	r3, [r7, #32]
          break;
 800a8cc:	e0e3      	b.n	800aa96 <MicroVsnprintf+0x2c6>
        case 'u':
          if (usable_length - output_index < kMaxIntCharsNeeded) {
 800a8ce:	69ba      	ldr	r2, [r7, #24]
 800a8d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8d2:	1ad3      	subs	r3, r2, r3
 800a8d4:	2b0a      	cmp	r3, #10
 800a8d6:	dc09      	bgt.n	800a8ec <MicroVsnprintf+0x11c>
            output[output_index++] = '\0';
 800a8d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8da:	1c5a      	adds	r2, r3, #1
 800a8dc:	627a      	str	r2, [r7, #36]	; 0x24
 800a8de:	461a      	mov	r2, r3
 800a8e0:	68fb      	ldr	r3, [r7, #12]
 800a8e2:	4413      	add	r3, r2
 800a8e4:	2200      	movs	r2, #0
 800a8e6:	701a      	strb	r2, [r3, #0]
            return output_index;
 800a8e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8ea:	e0de      	b.n	800aaaa <MicroVsnprintf+0x2da>
          }
          output_index +=
              FormatUInt32(&output[output_index], va_arg(args, uint32_t));
 800a8ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8ee:	68fa      	ldr	r2, [r7, #12]
 800a8f0:	18d0      	adds	r0, r2, r3
 800a8f2:	683b      	ldr	r3, [r7, #0]
 800a8f4:	1d1a      	adds	r2, r3, #4
 800a8f6:	603a      	str	r2, [r7, #0]
 800a8f8:	681b      	ldr	r3, [r3, #0]
 800a8fa:	4619      	mov	r1, r3
 800a8fc:	f7ff ff34 	bl	800a768 <_ZN12_GLOBAL__N_112FormatUInt32EPcm>
 800a900:	4602      	mov	r2, r0
          output_index +=
 800a902:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a904:	4413      	add	r3, r2
 800a906:	627b      	str	r3, [r7, #36]	; 0x24
          current++;
 800a908:	6a3b      	ldr	r3, [r7, #32]
 800a90a:	3301      	adds	r3, #1
 800a90c:	623b      	str	r3, [r7, #32]
          break;
 800a90e:	e0c2      	b.n	800aa96 <MicroVsnprintf+0x2c6>
        case 'x':
          if (usable_length - output_index < kMaxHexCharsNeeded) {
 800a910:	69ba      	ldr	r2, [r7, #24]
 800a912:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a914:	1ad3      	subs	r3, r2, r3
 800a916:	2b09      	cmp	r3, #9
 800a918:	dc09      	bgt.n	800a92e <MicroVsnprintf+0x15e>
            output[output_index++] = '\0';
 800a91a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a91c:	1c5a      	adds	r2, r3, #1
 800a91e:	627a      	str	r2, [r7, #36]	; 0x24
 800a920:	461a      	mov	r2, r3
 800a922:	68fb      	ldr	r3, [r7, #12]
 800a924:	4413      	add	r3, r2
 800a926:	2200      	movs	r2, #0
 800a928:	701a      	strb	r2, [r3, #0]
            return output_index;
 800a92a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a92c:	e0bd      	b.n	800aaaa <MicroVsnprintf+0x2da>
          }
          output[output_index++] = '0';
 800a92e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a930:	1c5a      	adds	r2, r3, #1
 800a932:	627a      	str	r2, [r7, #36]	; 0x24
 800a934:	461a      	mov	r2, r3
 800a936:	68fb      	ldr	r3, [r7, #12]
 800a938:	4413      	add	r3, r2
 800a93a:	2230      	movs	r2, #48	; 0x30
 800a93c:	701a      	strb	r2, [r3, #0]
          output[output_index++] = 'x';
 800a93e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a940:	1c5a      	adds	r2, r3, #1
 800a942:	627a      	str	r2, [r7, #36]	; 0x24
 800a944:	461a      	mov	r2, r3
 800a946:	68fb      	ldr	r3, [r7, #12]
 800a948:	4413      	add	r3, r2
 800a94a:	2278      	movs	r2, #120	; 0x78
 800a94c:	701a      	strb	r2, [r3, #0]
          output_index +=
              FormatHex(&output[output_index], va_arg(args, uint32_t));
 800a94e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a950:	68fa      	ldr	r2, [r7, #12]
 800a952:	18d0      	adds	r0, r2, r3
 800a954:	683b      	ldr	r3, [r7, #0]
 800a956:	1d1a      	adds	r2, r3, #4
 800a958:	603a      	str	r2, [r7, #0]
 800a95a:	681b      	ldr	r3, [r3, #0]
 800a95c:	4619      	mov	r1, r3
 800a95e:	f7ff ff14 	bl	800a78a <_ZN12_GLOBAL__N_19FormatHexEPcm>
 800a962:	4602      	mov	r2, r0
          output_index +=
 800a964:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a966:	4413      	add	r3, r2
 800a968:	627b      	str	r3, [r7, #36]	; 0x24
          current++;
 800a96a:	6a3b      	ldr	r3, [r7, #32]
 800a96c:	3301      	adds	r3, #1
 800a96e:	623b      	str	r3, [r7, #32]
          break;
 800a970:	e091      	b.n	800aa96 <MicroVsnprintf+0x2c6>
        case 'f':
          if (usable_length - output_index < kMaxFloatCharsNeeded) {
 800a972:	69ba      	ldr	r2, [r7, #24]
 800a974:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a976:	1ad3      	subs	r3, r2, r3
 800a978:	ee07 3a90 	vmov	s15, r3
 800a97c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a980:	eeb2 7a0c 	vmov.f32	s14, #44	; 0x41600000  14.0
 800a984:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a988:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a98c:	d509      	bpl.n	800a9a2 <MicroVsnprintf+0x1d2>
            output[output_index++] = '\0';
 800a98e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a990:	1c5a      	adds	r2, r3, #1
 800a992:	627a      	str	r2, [r7, #36]	; 0x24
 800a994:	461a      	mov	r2, r3
 800a996:	68fb      	ldr	r3, [r7, #12]
 800a998:	4413      	add	r3, r2
 800a99a:	2200      	movs	r2, #0
 800a99c:	701a      	strb	r2, [r3, #0]
            return output_index;
 800a99e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9a0:	e083      	b.n	800aaaa <MicroVsnprintf+0x2da>
          }
          output_index +=
              FormatFloat(&output[output_index], va_arg(args, double));
 800a9a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9a4:	68fa      	ldr	r2, [r7, #12]
 800a9a6:	18d4      	adds	r4, r2, r3
 800a9a8:	683b      	ldr	r3, [r7, #0]
 800a9aa:	3307      	adds	r3, #7
 800a9ac:	f023 0307 	bic.w	r3, r3, #7
 800a9b0:	f103 0208 	add.w	r2, r3, #8
 800a9b4:	603a      	str	r2, [r7, #0]
 800a9b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9ba:	4610      	mov	r0, r2
 800a9bc:	4619      	mov	r1, r3
 800a9be:	f7f6 f905 	bl	8000bcc <__aeabi_d2f>
 800a9c2:	4603      	mov	r3, r0
 800a9c4:	ee00 3a10 	vmov	s0, r3
 800a9c8:	4620      	mov	r0, r4
 800a9ca:	f7ff feef 	bl	800a7ac <_ZN12_GLOBAL__N_111FormatFloatEPcf>
 800a9ce:	4602      	mov	r2, r0
          output_index +=
 800a9d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9d2:	4413      	add	r3, r2
 800a9d4:	627b      	str	r3, [r7, #36]	; 0x24
          current++;
 800a9d6:	6a3b      	ldr	r3, [r7, #32]
 800a9d8:	3301      	adds	r3, #1
 800a9da:	623b      	str	r3, [r7, #32]
          break;
 800a9dc:	e05b      	b.n	800aa96 <MicroVsnprintf+0x2c6>
        case '%':
          output[output_index++] = *current++;
 800a9de:	6a3b      	ldr	r3, [r7, #32]
 800a9e0:	1c5a      	adds	r2, r3, #1
 800a9e2:	623a      	str	r2, [r7, #32]
 800a9e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a9e6:	1c51      	adds	r1, r2, #1
 800a9e8:	6279      	str	r1, [r7, #36]	; 0x24
 800a9ea:	4611      	mov	r1, r2
 800a9ec:	68fa      	ldr	r2, [r7, #12]
 800a9ee:	440a      	add	r2, r1
 800a9f0:	781b      	ldrb	r3, [r3, #0]
 800a9f2:	7013      	strb	r3, [r2, #0]
          break;
 800a9f4:	e04f      	b.n	800aa96 <MicroVsnprintf+0x2c6>
        case 'c':
          if (usable_length - output_index < 1) {
 800a9f6:	69ba      	ldr	r2, [r7, #24]
 800a9f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9fa:	1ad3      	subs	r3, r2, r3
 800a9fc:	2b00      	cmp	r3, #0
 800a9fe:	dc09      	bgt.n	800aa14 <MicroVsnprintf+0x244>
            output[output_index++] = '\0';
 800aa00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa02:	1c5a      	adds	r2, r3, #1
 800aa04:	627a      	str	r2, [r7, #36]	; 0x24
 800aa06:	461a      	mov	r2, r3
 800aa08:	68fb      	ldr	r3, [r7, #12]
 800aa0a:	4413      	add	r3, r2
 800aa0c:	2200      	movs	r2, #0
 800aa0e:	701a      	strb	r2, [r3, #0]
            return output_index;
 800aa10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa12:	e04a      	b.n	800aaaa <MicroVsnprintf+0x2da>
          }
          output[output_index++] = va_arg(args, int32_t);
 800aa14:	683b      	ldr	r3, [r7, #0]
 800aa16:	1d1a      	adds	r2, r3, #4
 800aa18:	603a      	str	r2, [r7, #0]
 800aa1a:	6819      	ldr	r1, [r3, #0]
 800aa1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa1e:	1c5a      	adds	r2, r3, #1
 800aa20:	627a      	str	r2, [r7, #36]	; 0x24
 800aa22:	461a      	mov	r2, r3
 800aa24:	68fb      	ldr	r3, [r7, #12]
 800aa26:	4413      	add	r3, r2
 800aa28:	b2ca      	uxtb	r2, r1
 800aa2a:	701a      	strb	r2, [r3, #0]
          current++;
 800aa2c:	6a3b      	ldr	r3, [r7, #32]
 800aa2e:	3301      	adds	r3, #1
 800aa30:	623b      	str	r3, [r7, #32]
          break;
 800aa32:	e030      	b.n	800aa96 <MicroVsnprintf+0x2c6>
        case 's':
          char* string = va_arg(args, char*);
 800aa34:	683b      	ldr	r3, [r7, #0]
 800aa36:	1d1a      	adds	r2, r3, #4
 800aa38:	603a      	str	r2, [r7, #0]
 800aa3a:	681b      	ldr	r3, [r3, #0]
 800aa3c:	617b      	str	r3, [r7, #20]
          int string_idx = 0;
 800aa3e:	2300      	movs	r3, #0
 800aa40:	61fb      	str	r3, [r7, #28]
          while (string_idx + output_index < usable_length &&
 800aa42:	69fa      	ldr	r2, [r7, #28]
 800aa44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa46:	4413      	add	r3, r2
 800aa48:	69ba      	ldr	r2, [r7, #24]
 800aa4a:	429a      	cmp	r2, r3
 800aa4c:	dd14      	ble.n	800aa78 <MicroVsnprintf+0x2a8>
                 string[string_idx] != '\0') {
 800aa4e:	69fb      	ldr	r3, [r7, #28]
 800aa50:	697a      	ldr	r2, [r7, #20]
 800aa52:	4413      	add	r3, r2
 800aa54:	781b      	ldrb	r3, [r3, #0]
          while (string_idx + output_index < usable_length &&
 800aa56:	2b00      	cmp	r3, #0
 800aa58:	d00e      	beq.n	800aa78 <MicroVsnprintf+0x2a8>
            output[output_index++] = string[string_idx++];
 800aa5a:	69fb      	ldr	r3, [r7, #28]
 800aa5c:	1c5a      	adds	r2, r3, #1
 800aa5e:	61fa      	str	r2, [r7, #28]
 800aa60:	461a      	mov	r2, r3
 800aa62:	697b      	ldr	r3, [r7, #20]
 800aa64:	441a      	add	r2, r3
 800aa66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa68:	1c59      	adds	r1, r3, #1
 800aa6a:	6279      	str	r1, [r7, #36]	; 0x24
 800aa6c:	4619      	mov	r1, r3
 800aa6e:	68fb      	ldr	r3, [r7, #12]
 800aa70:	440b      	add	r3, r1
 800aa72:	7812      	ldrb	r2, [r2, #0]
 800aa74:	701a      	strb	r2, [r3, #0]
          while (string_idx + output_index < usable_length &&
 800aa76:	e7e4      	b.n	800aa42 <MicroVsnprintf+0x272>
          }
          current++;
 800aa78:	6a3b      	ldr	r3, [r7, #32]
 800aa7a:	3301      	adds	r3, #1
 800aa7c:	623b      	str	r3, [r7, #32]
 800aa7e:	e6b5      	b.n	800a7ec <MicroVsnprintf+0x1c>
      }
    } else {
      output[output_index++] = *current++;
 800aa80:	6a3b      	ldr	r3, [r7, #32]
 800aa82:	1c5a      	adds	r2, r3, #1
 800aa84:	623a      	str	r2, [r7, #32]
 800aa86:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800aa88:	1c51      	adds	r1, r2, #1
 800aa8a:	6279      	str	r1, [r7, #36]	; 0x24
 800aa8c:	4611      	mov	r1, r2
 800aa8e:	68fa      	ldr	r2, [r7, #12]
 800aa90:	440a      	add	r2, r1
 800aa92:	781b      	ldrb	r3, [r3, #0]
 800aa94:	7013      	strb	r3, [r2, #0]
  while (*current != '\0' && output_index < usable_length) {
 800aa96:	e6a9      	b.n	800a7ec <MicroVsnprintf+0x1c>
    }
  }
  output[output_index++] = '\0';
 800aa98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa9a:	1c5a      	adds	r2, r3, #1
 800aa9c:	627a      	str	r2, [r7, #36]	; 0x24
 800aa9e:	461a      	mov	r2, r3
 800aaa0:	68fb      	ldr	r3, [r7, #12]
 800aaa2:	4413      	add	r3, r2
 800aaa4:	2200      	movs	r2, #0
 800aaa6:	701a      	strb	r2, [r3, #0]
  return output_index;
 800aaa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800aaaa:	4618      	mov	r0, r3
 800aaac:	372c      	adds	r7, #44	; 0x2c
 800aaae:	46bd      	mov	sp, r7
 800aab0:	bd90      	pop	{r4, r7, pc}
 800aab2:	bf00      	nop

0800aab4 <_ZN6tflite12ElementCountERK14TfLiteIntArray>:
#include "tensorflow/lite/kernels/op_macros.h"
#include "tensorflow/lite/micro/micro_error_reporter.h"

namespace tflite {

int ElementCount(const TfLiteIntArray& dims) {
 800aab4:	b480      	push	{r7}
 800aab6:	b085      	sub	sp, #20
 800aab8:	af00      	add	r7, sp, #0
 800aaba:	6078      	str	r0, [r7, #4]
  int result = 1;
 800aabc:	2301      	movs	r3, #1
 800aabe:	60fb      	str	r3, [r7, #12]
  for (int i = 0; i < dims.size; ++i) {
 800aac0:	2300      	movs	r3, #0
 800aac2:	60bb      	str	r3, [r7, #8]
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	681b      	ldr	r3, [r3, #0]
 800aac8:	68ba      	ldr	r2, [r7, #8]
 800aaca:	429a      	cmp	r2, r3
 800aacc:	da0c      	bge.n	800aae8 <_ZN6tflite12ElementCountERK14TfLiteIntArray+0x34>
    result *= dims.data[i];
 800aace:	687a      	ldr	r2, [r7, #4]
 800aad0:	68bb      	ldr	r3, [r7, #8]
 800aad2:	009b      	lsls	r3, r3, #2
 800aad4:	4413      	add	r3, r2
 800aad6:	685a      	ldr	r2, [r3, #4]
 800aad8:	68fb      	ldr	r3, [r7, #12]
 800aada:	fb02 f303 	mul.w	r3, r2, r3
 800aade:	60fb      	str	r3, [r7, #12]
  for (int i = 0; i < dims.size; ++i) {
 800aae0:	68bb      	ldr	r3, [r7, #8]
 800aae2:	3301      	adds	r3, #1
 800aae4:	60bb      	str	r3, [r7, #8]
 800aae6:	e7ed      	b.n	800aac4 <_ZN6tflite12ElementCountERK14TfLiteIntArray+0x10>
  }
  return result;
 800aae8:	68fb      	ldr	r3, [r7, #12]
}
 800aaea:	4618      	mov	r0, r3
 800aaec:	3714      	adds	r7, #20
 800aaee:	46bd      	mov	sp, r7
 800aaf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaf4:	4770      	bx	lr
	...

0800aaf8 <_ZN6tflite21SimpleMemoryAllocatorC1ERKS0_>:
namespace tflite {

// TODO(petewarden): This allocator never frees up or reuses  any memory, even
// though we have enough information about lifetimes of the tensors to do so.
// This makes it pretty wasteful, so we should use a more intelligent method.
class SimpleMemoryAllocator {
 800aaf8:	b480      	push	{r7}
 800aafa:	b083      	sub	sp, #12
 800aafc:	af00      	add	r7, sp, #0
 800aafe:	6078      	str	r0, [r7, #4]
 800ab00:	6039      	str	r1, [r7, #0]
 800ab02:	4a11      	ldr	r2, [pc, #68]	; (800ab48 <_ZN6tflite21SimpleMemoryAllocatorC1ERKS0_+0x50>)
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	601a      	str	r2, [r3, #0]
 800ab08:	683b      	ldr	r3, [r7, #0]
 800ab0a:	685a      	ldr	r2, [r3, #4]
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	605a      	str	r2, [r3, #4]
 800ab10:	683b      	ldr	r3, [r7, #0]
 800ab12:	689a      	ldr	r2, [r3, #8]
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	609a      	str	r2, [r3, #8]
 800ab18:	683b      	ldr	r3, [r7, #0]
 800ab1a:	68da      	ldr	r2, [r3, #12]
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	60da      	str	r2, [r3, #12]
 800ab20:	683b      	ldr	r3, [r7, #0]
 800ab22:	691a      	ldr	r2, [r3, #16]
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	611a      	str	r2, [r3, #16]
 800ab28:	683b      	ldr	r3, [r7, #0]
 800ab2a:	695a      	ldr	r2, [r3, #20]
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	615a      	str	r2, [r3, #20]
 800ab30:	683b      	ldr	r3, [r7, #0]
 800ab32:	699a      	ldr	r2, [r3, #24]
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	619a      	str	r2, [r3, #24]
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	4618      	mov	r0, r3
 800ab3c:	370c      	adds	r7, #12
 800ab3e:	46bd      	mov	sp, r7
 800ab40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab44:	4770      	bx	lr
 800ab46:	bf00      	nop
 800ab48:	0801cf98 	.word	0x0801cf98

0800ab4c <_ZN6tflite21SimpleMemoryAllocatorC1EPNS_13ErrorReporterEPhS3_>:
#include "tensorflow/lite/kernels/internal/compatibility.h"
#include "tensorflow/lite/micro/memory_helpers.h"

namespace tflite {

SimpleMemoryAllocator::SimpleMemoryAllocator(ErrorReporter* error_reporter,
 800ab4c:	b480      	push	{r7}
 800ab4e:	b085      	sub	sp, #20
 800ab50:	af00      	add	r7, sp, #0
 800ab52:	60f8      	str	r0, [r7, #12]
 800ab54:	60b9      	str	r1, [r7, #8]
 800ab56:	607a      	str	r2, [r7, #4]
 800ab58:	603b      	str	r3, [r7, #0]
    : error_reporter_(error_reporter),
      buffer_head_(buffer_head),
      buffer_tail_(buffer_tail),
      head_(buffer_head),
      tail_(buffer_tail),
      temp_(buffer_head_) {}
 800ab5a:	4a0e      	ldr	r2, [pc, #56]	; (800ab94 <_ZN6tflite21SimpleMemoryAllocatorC1EPNS_13ErrorReporterEPhS3_+0x48>)
 800ab5c:	68fb      	ldr	r3, [r7, #12]
 800ab5e:	601a      	str	r2, [r3, #0]
 800ab60:	68fb      	ldr	r3, [r7, #12]
 800ab62:	68ba      	ldr	r2, [r7, #8]
 800ab64:	605a      	str	r2, [r3, #4]
 800ab66:	68fb      	ldr	r3, [r7, #12]
 800ab68:	687a      	ldr	r2, [r7, #4]
 800ab6a:	609a      	str	r2, [r3, #8]
 800ab6c:	68fb      	ldr	r3, [r7, #12]
 800ab6e:	683a      	ldr	r2, [r7, #0]
 800ab70:	60da      	str	r2, [r3, #12]
 800ab72:	68fb      	ldr	r3, [r7, #12]
 800ab74:	687a      	ldr	r2, [r7, #4]
 800ab76:	611a      	str	r2, [r3, #16]
 800ab78:	68fb      	ldr	r3, [r7, #12]
 800ab7a:	683a      	ldr	r2, [r7, #0]
 800ab7c:	615a      	str	r2, [r3, #20]
 800ab7e:	68fb      	ldr	r3, [r7, #12]
 800ab80:	689a      	ldr	r2, [r3, #8]
 800ab82:	68fb      	ldr	r3, [r7, #12]
 800ab84:	619a      	str	r2, [r3, #24]
 800ab86:	68fb      	ldr	r3, [r7, #12]
 800ab88:	4618      	mov	r0, r3
 800ab8a:	3714      	adds	r7, #20
 800ab8c:	46bd      	mov	sp, r7
 800ab8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab92:	4770      	bx	lr
 800ab94:	0801cf98 	.word	0x0801cf98

0800ab98 <_ZN6tflite21SimpleMemoryAllocatorC1EPNS_13ErrorReporterEPhj>:

SimpleMemoryAllocator::SimpleMemoryAllocator(ErrorReporter* error_reporter,
 800ab98:	b580      	push	{r7, lr}
 800ab9a:	b084      	sub	sp, #16
 800ab9c:	af00      	add	r7, sp, #0
 800ab9e:	60f8      	str	r0, [r7, #12]
 800aba0:	60b9      	str	r1, [r7, #8]
 800aba2:	607a      	str	r2, [r7, #4]
 800aba4:	603b      	str	r3, [r7, #0]
                                             uint8_t* buffer,
                                             size_t buffer_size)
    : SimpleMemoryAllocator(error_reporter, buffer, buffer + buffer_size) {}
 800aba6:	687a      	ldr	r2, [r7, #4]
 800aba8:	683b      	ldr	r3, [r7, #0]
 800abaa:	4413      	add	r3, r2
 800abac:	687a      	ldr	r2, [r7, #4]
 800abae:	68b9      	ldr	r1, [r7, #8]
 800abb0:	68f8      	ldr	r0, [r7, #12]
 800abb2:	f7ff ffcb 	bl	800ab4c <_ZN6tflite21SimpleMemoryAllocatorC1EPNS_13ErrorReporterEPhS3_>
 800abb6:	68fb      	ldr	r3, [r7, #12]
 800abb8:	4618      	mov	r0, r3
 800abba:	3710      	adds	r7, #16
 800abbc:	46bd      	mov	sp, r7
 800abbe:	bd80      	pop	{r7, pc}

0800abc0 <_ZN6tflite21SimpleMemoryAllocator6CreateEPNS_13ErrorReporterEPhj>:

/* static */
SimpleMemoryAllocator* SimpleMemoryAllocator::Create(
    ErrorReporter* error_reporter, uint8_t* buffer_head, size_t buffer_size) {
 800abc0:	b590      	push	{r4, r7, lr}
 800abc2:	b08d      	sub	sp, #52	; 0x34
 800abc4:	af00      	add	r7, sp, #0
 800abc6:	60f8      	str	r0, [r7, #12]
 800abc8:	60b9      	str	r1, [r7, #8]
 800abca:	607a      	str	r2, [r7, #4]
  TFLITE_DCHECK(error_reporter != nullptr);
 800abcc:	68fb      	ldr	r3, [r7, #12]
 800abce:	2b00      	cmp	r3, #0
 800abd0:	d101      	bne.n	800abd6 <_ZN6tflite21SimpleMemoryAllocator6CreateEPNS_13ErrorReporterEPhj+0x16>
 800abd2:	f005 fde4 	bl	801079e <abort>
  TFLITE_DCHECK(buffer_head != nullptr);
 800abd6:	68bb      	ldr	r3, [r7, #8]
 800abd8:	2b00      	cmp	r3, #0
 800abda:	d101      	bne.n	800abe0 <_ZN6tflite21SimpleMemoryAllocator6CreateEPNS_13ErrorReporterEPhj+0x20>
 800abdc:	f005 fddf 	bl	801079e <abort>
  SimpleMemoryAllocator tmp =
      SimpleMemoryAllocator(error_reporter, buffer_head, buffer_size);
 800abe0:	f107 0010 	add.w	r0, r7, #16
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	68ba      	ldr	r2, [r7, #8]
 800abe8:	68f9      	ldr	r1, [r7, #12]
 800abea:	f7ff ffd5 	bl	800ab98 <_ZN6tflite21SimpleMemoryAllocatorC1EPNS_13ErrorReporterEPhj>

  // Allocate enough bytes from the buffer to create a SimpleMemoryAllocator.
  // The new instance will use the current adjusted tail buffer from the tmp
  // allocator instance.
  uint8_t* allocator_buffer = tmp.AllocateFromTail(
 800abee:	f107 0310 	add.w	r3, r7, #16
 800abf2:	2204      	movs	r2, #4
 800abf4:	211c      	movs	r1, #28
 800abf6:	4618      	mov	r0, r3
 800abf8:	f000 f87c 	bl	800acf4 <_ZN6tflite21SimpleMemoryAllocator16AllocateFromTailEjj>
 800abfc:	62f8      	str	r0, [r7, #44]	; 0x2c
      sizeof(SimpleMemoryAllocator), alignof(SimpleMemoryAllocator));
  // Use the default copy constructor to populate internal states.
  return new (allocator_buffer) SimpleMemoryAllocator(tmp);
 800abfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac00:	4619      	mov	r1, r3
 800ac02:	201c      	movs	r0, #28
 800ac04:	f7f9 f83b 	bl	8003c7e <_ZnwjPv>
 800ac08:	4604      	mov	r4, r0
 800ac0a:	f107 0310 	add.w	r3, r7, #16
 800ac0e:	4619      	mov	r1, r3
 800ac10:	4620      	mov	r0, r4
 800ac12:	f7ff ff71 	bl	800aaf8 <_ZN6tflite21SimpleMemoryAllocatorC1ERKS0_>
      SimpleMemoryAllocator(error_reporter, buffer_head, buffer_size);
 800ac16:	f107 0310 	add.w	r3, r7, #16
 800ac1a:	4618      	mov	r0, r3
 800ac1c:	f000 f806 	bl	800ac2c <_ZN6tflite21SimpleMemoryAllocatorD1Ev>
  return new (allocator_buffer) SimpleMemoryAllocator(tmp);
 800ac20:	4623      	mov	r3, r4
}
 800ac22:	4618      	mov	r0, r3
 800ac24:	3734      	adds	r7, #52	; 0x34
 800ac26:	46bd      	mov	sp, r7
 800ac28:	bd90      	pop	{r4, r7, pc}
	...

0800ac2c <_ZN6tflite21SimpleMemoryAllocatorD1Ev>:

SimpleMemoryAllocator::~SimpleMemoryAllocator() {}
 800ac2c:	b480      	push	{r7}
 800ac2e:	b083      	sub	sp, #12
 800ac30:	af00      	add	r7, sp, #0
 800ac32:	6078      	str	r0, [r7, #4]
 800ac34:	4a04      	ldr	r2, [pc, #16]	; (800ac48 <_ZN6tflite21SimpleMemoryAllocatorD1Ev+0x1c>)
 800ac36:	687b      	ldr	r3, [r7, #4]
 800ac38:	601a      	str	r2, [r3, #0]
 800ac3a:	687b      	ldr	r3, [r7, #4]
 800ac3c:	4618      	mov	r0, r3
 800ac3e:	370c      	adds	r7, #12
 800ac40:	46bd      	mov	sp, r7
 800ac42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac46:	4770      	bx	lr
 800ac48:	0801cf98 	.word	0x0801cf98

0800ac4c <_ZN6tflite21SimpleMemoryAllocatorD0Ev>:
 800ac4c:	b580      	push	{r7, lr}
 800ac4e:	b082      	sub	sp, #8
 800ac50:	af00      	add	r7, sp, #0
 800ac52:	6078      	str	r0, [r7, #4]
 800ac54:	6878      	ldr	r0, [r7, #4]
 800ac56:	f7ff ffe9 	bl	800ac2c <_ZN6tflite21SimpleMemoryAllocatorD1Ev>
 800ac5a:	211c      	movs	r1, #28
 800ac5c:	6878      	ldr	r0, [r7, #4]
 800ac5e:	f005 fb18 	bl	8010292 <_ZdlPvj>
 800ac62:	687b      	ldr	r3, [r7, #4]
 800ac64:	4618      	mov	r0, r3
 800ac66:	3708      	adds	r7, #8
 800ac68:	46bd      	mov	sp, r7
 800ac6a:	bd80      	pop	{r7, pc}

0800ac6c <_ZN6tflite21SimpleMemoryAllocator17SetHeadBufferSizeEjj>:

TfLiteStatus SimpleMemoryAllocator::SetHeadBufferSize(size_t size,
                                                      size_t alignment) {
 800ac6c:	b580      	push	{r7, lr}
 800ac6e:	b088      	sub	sp, #32
 800ac70:	af02      	add	r7, sp, #8
 800ac72:	60f8      	str	r0, [r7, #12]
 800ac74:	60b9      	str	r1, [r7, #8]
 800ac76:	607a      	str	r2, [r7, #4]
  if (head_ != temp_) {
 800ac78:	68fb      	ldr	r3, [r7, #12]
 800ac7a:	691a      	ldr	r2, [r3, #16]
 800ac7c:	68fb      	ldr	r3, [r7, #12]
 800ac7e:	699b      	ldr	r3, [r3, #24]
 800ac80:	429a      	cmp	r2, r3
 800ac82:	d007      	beq.n	800ac94 <_ZN6tflite21SimpleMemoryAllocator17SetHeadBufferSizeEjj+0x28>
    TF_LITE_REPORT_ERROR(
 800ac84:	68fb      	ldr	r3, [r7, #12]
 800ac86:	685b      	ldr	r3, [r3, #4]
 800ac88:	4918      	ldr	r1, [pc, #96]	; (800acec <_ZN6tflite21SimpleMemoryAllocator17SetHeadBufferSizeEjj+0x80>)
 800ac8a:	4618      	mov	r0, r3
 800ac8c:	f7f8 ffc4 	bl	8003c18 <_ZN6tflite13ErrorReporter6ReportEPKcz>
        error_reporter_,
        "Internal error: SetHeadBufferSize() needs to be called "
        "after ResetTempAllocations().");
    return kTfLiteError;
 800ac90:	2301      	movs	r3, #1
 800ac92:	e026      	b.n	800ace2 <_ZN6tflite21SimpleMemoryAllocator17SetHeadBufferSizeEjj+0x76>
  }

  uint8_t* const aligned_result = AlignPointerUp(buffer_head_, alignment);
 800ac94:	68fb      	ldr	r3, [r7, #12]
 800ac96:	689b      	ldr	r3, [r3, #8]
 800ac98:	6879      	ldr	r1, [r7, #4]
 800ac9a:	4618      	mov	r0, r3
 800ac9c:	f7fb fff5 	bl	8006c8a <_ZN6tflite14AlignPointerUpEPhj>
 800aca0:	6178      	str	r0, [r7, #20]
  const size_t available_memory = tail_ - aligned_result;
 800aca2:	68fb      	ldr	r3, [r7, #12]
 800aca4:	695a      	ldr	r2, [r3, #20]
 800aca6:	697b      	ldr	r3, [r7, #20]
 800aca8:	1ad3      	subs	r3, r2, r3
 800acaa:	613b      	str	r3, [r7, #16]
  if (available_memory < size) {
 800acac:	693a      	ldr	r2, [r7, #16]
 800acae:	68bb      	ldr	r3, [r7, #8]
 800acb0:	429a      	cmp	r2, r3
 800acb2:	d20c      	bcs.n	800acce <_ZN6tflite21SimpleMemoryAllocator17SetHeadBufferSizeEjj+0x62>
    TF_LITE_REPORT_ERROR(
 800acb4:	68fb      	ldr	r3, [r7, #12]
 800acb6:	6858      	ldr	r0, [r3, #4]
 800acb8:	68ba      	ldr	r2, [r7, #8]
 800acba:	693b      	ldr	r3, [r7, #16]
 800acbc:	1ad3      	subs	r3, r2, r3
 800acbe:	9300      	str	r3, [sp, #0]
 800acc0:	693b      	ldr	r3, [r7, #16]
 800acc2:	68ba      	ldr	r2, [r7, #8]
 800acc4:	490a      	ldr	r1, [pc, #40]	; (800acf0 <_ZN6tflite21SimpleMemoryAllocator17SetHeadBufferSizeEjj+0x84>)
 800acc6:	f7f8 ffa7 	bl	8003c18 <_ZN6tflite13ErrorReporter6ReportEPKcz>
        error_reporter_,
        "Failed to set head size. Requested: %u, available %u, missing: %u",
        size, available_memory, size - available_memory);
    return kTfLiteError;
 800acca:	2301      	movs	r3, #1
 800accc:	e009      	b.n	800ace2 <_ZN6tflite21SimpleMemoryAllocator17SetHeadBufferSizeEjj+0x76>
  }
  head_ = aligned_result + size;
 800acce:	697a      	ldr	r2, [r7, #20]
 800acd0:	68bb      	ldr	r3, [r7, #8]
 800acd2:	441a      	add	r2, r3
 800acd4:	68fb      	ldr	r3, [r7, #12]
 800acd6:	611a      	str	r2, [r3, #16]
  temp_ = head_;
 800acd8:	68fb      	ldr	r3, [r7, #12]
 800acda:	691a      	ldr	r2, [r3, #16]
 800acdc:	68fb      	ldr	r3, [r7, #12]
 800acde:	619a      	str	r2, [r3, #24]

  return kTfLiteOk;
 800ace0:	2300      	movs	r3, #0
}
 800ace2:	4618      	mov	r0, r3
 800ace4:	3718      	adds	r7, #24
 800ace6:	46bd      	mov	sp, r7
 800ace8:	bd80      	pop	{r7, pc}
 800acea:	bf00      	nop
 800acec:	080172dc 	.word	0x080172dc
 800acf0:	08017334 	.word	0x08017334

0800acf4 <_ZN6tflite21SimpleMemoryAllocator16AllocateFromTailEjj>:

uint8_t* SimpleMemoryAllocator::AllocateFromTail(size_t size,
                                                 size_t alignment) {
 800acf4:	b580      	push	{r7, lr}
 800acf6:	b088      	sub	sp, #32
 800acf8:	af02      	add	r7, sp, #8
 800acfa:	60f8      	str	r0, [r7, #12]
 800acfc:	60b9      	str	r1, [r7, #8]
 800acfe:	607a      	str	r2, [r7, #4]
  uint8_t* const aligned_result = AlignPointerDown(tail_ - size, alignment);
 800ad00:	68fb      	ldr	r3, [r7, #12]
 800ad02:	695a      	ldr	r2, [r3, #20]
 800ad04:	68bb      	ldr	r3, [r7, #8]
 800ad06:	425b      	negs	r3, r3
 800ad08:	4413      	add	r3, r2
 800ad0a:	6879      	ldr	r1, [r7, #4]
 800ad0c:	4618      	mov	r0, r3
 800ad0e:	f7fb ffd5 	bl	8006cbc <_ZN6tflite16AlignPointerDownEPhj>
 800ad12:	6178      	str	r0, [r7, #20]
  if (aligned_result < head_) {
 800ad14:	68fb      	ldr	r3, [r7, #12]
 800ad16:	691b      	ldr	r3, [r3, #16]
 800ad18:	697a      	ldr	r2, [r7, #20]
 800ad1a:	429a      	cmp	r2, r3
 800ad1c:	d212      	bcs.n	800ad44 <_ZN6tflite21SimpleMemoryAllocator16AllocateFromTailEjj+0x50>
#ifndef TF_LITE_STRIP_ERROR_STRINGS
    const size_t missing_memory = head_ - aligned_result;
 800ad1e:	68fb      	ldr	r3, [r7, #12]
 800ad20:	691a      	ldr	r2, [r3, #16]
 800ad22:	697b      	ldr	r3, [r7, #20]
 800ad24:	1ad3      	subs	r3, r2, r3
 800ad26:	613b      	str	r3, [r7, #16]
    TF_LITE_REPORT_ERROR(error_reporter_,
 800ad28:	68fb      	ldr	r3, [r7, #12]
 800ad2a:	6858      	ldr	r0, [r3, #4]
 800ad2c:	68ba      	ldr	r2, [r7, #8]
 800ad2e:	693b      	ldr	r3, [r7, #16]
 800ad30:	1ad2      	subs	r2, r2, r3
 800ad32:	693b      	ldr	r3, [r7, #16]
 800ad34:	9300      	str	r3, [sp, #0]
 800ad36:	4613      	mov	r3, r2
 800ad38:	68ba      	ldr	r2, [r7, #8]
 800ad3a:	4906      	ldr	r1, [pc, #24]	; (800ad54 <_ZN6tflite21SimpleMemoryAllocator16AllocateFromTailEjj+0x60>)
 800ad3c:	f7f8 ff6c 	bl	8003c18 <_ZN6tflite13ErrorReporter6ReportEPKcz>
                         "Failed to allocate tail memory. Requested: %u, "
                         "available %u, missing: %u",
                         size, size - missing_memory, missing_memory);
#endif
    return nullptr;
 800ad40:	2300      	movs	r3, #0
 800ad42:	e003      	b.n	800ad4c <_ZN6tflite21SimpleMemoryAllocator16AllocateFromTailEjj+0x58>
  }
  tail_ = aligned_result;
 800ad44:	68fb      	ldr	r3, [r7, #12]
 800ad46:	697a      	ldr	r2, [r7, #20]
 800ad48:	615a      	str	r2, [r3, #20]
  return aligned_result;
 800ad4a:	697b      	ldr	r3, [r7, #20]
}
 800ad4c:	4618      	mov	r0, r3
 800ad4e:	3718      	adds	r7, #24
 800ad50:	46bd      	mov	sp, r7
 800ad52:	bd80      	pop	{r7, pc}
 800ad54:	08017378 	.word	0x08017378

0800ad58 <_ZN6tflite21SimpleMemoryAllocator12AllocateTempEjj>:

uint8_t* SimpleMemoryAllocator::AllocateTemp(size_t size, size_t alignment) {
 800ad58:	b580      	push	{r7, lr}
 800ad5a:	b088      	sub	sp, #32
 800ad5c:	af02      	add	r7, sp, #8
 800ad5e:	60f8      	str	r0, [r7, #12]
 800ad60:	60b9      	str	r1, [r7, #8]
 800ad62:	607a      	str	r2, [r7, #4]
  uint8_t* const aligned_result = AlignPointerUp(temp_, alignment);
 800ad64:	68fb      	ldr	r3, [r7, #12]
 800ad66:	699b      	ldr	r3, [r3, #24]
 800ad68:	6879      	ldr	r1, [r7, #4]
 800ad6a:	4618      	mov	r0, r3
 800ad6c:	f7fb ff8d 	bl	8006c8a <_ZN6tflite14AlignPointerUpEPhj>
 800ad70:	6178      	str	r0, [r7, #20]
  const size_t available_memory = tail_ - aligned_result;
 800ad72:	68fb      	ldr	r3, [r7, #12]
 800ad74:	695a      	ldr	r2, [r3, #20]
 800ad76:	697b      	ldr	r3, [r7, #20]
 800ad78:	1ad3      	subs	r3, r2, r3
 800ad7a:	613b      	str	r3, [r7, #16]
  if (available_memory < size) {
 800ad7c:	693a      	ldr	r2, [r7, #16]
 800ad7e:	68bb      	ldr	r3, [r7, #8]
 800ad80:	429a      	cmp	r2, r3
 800ad82:	d20c      	bcs.n	800ad9e <_ZN6tflite21SimpleMemoryAllocator12AllocateTempEjj+0x46>
    TF_LITE_REPORT_ERROR(error_reporter_,
 800ad84:	68fb      	ldr	r3, [r7, #12]
 800ad86:	6858      	ldr	r0, [r3, #4]
 800ad88:	68ba      	ldr	r2, [r7, #8]
 800ad8a:	693b      	ldr	r3, [r7, #16]
 800ad8c:	1ad3      	subs	r3, r2, r3
 800ad8e:	9300      	str	r3, [sp, #0]
 800ad90:	693b      	ldr	r3, [r7, #16]
 800ad92:	68ba      	ldr	r2, [r7, #8]
 800ad94:	4907      	ldr	r1, [pc, #28]	; (800adb4 <_ZN6tflite21SimpleMemoryAllocator12AllocateTempEjj+0x5c>)
 800ad96:	f7f8 ff3f 	bl	8003c18 <_ZN6tflite13ErrorReporter6ReportEPKcz>
                         "Failed to allocate temp memory. Requested: %u, "
                         "available %u, missing: %u",
                         size, available_memory, size - available_memory);
    return nullptr;
 800ad9a:	2300      	movs	r3, #0
 800ad9c:	e005      	b.n	800adaa <_ZN6tflite21SimpleMemoryAllocator12AllocateTempEjj+0x52>
  }
  temp_ = aligned_result + size;
 800ad9e:	697a      	ldr	r2, [r7, #20]
 800ada0:	68bb      	ldr	r3, [r7, #8]
 800ada2:	441a      	add	r2, r3
 800ada4:	68fb      	ldr	r3, [r7, #12]
 800ada6:	619a      	str	r2, [r3, #24]
  return aligned_result;
 800ada8:	697b      	ldr	r3, [r7, #20]
}
 800adaa:	4618      	mov	r0, r3
 800adac:	3718      	adds	r7, #24
 800adae:	46bd      	mov	sp, r7
 800adb0:	bd80      	pop	{r7, pc}
 800adb2:	bf00      	nop
 800adb4:	080173c4 	.word	0x080173c4

0800adb8 <_ZN6tflite21SimpleMemoryAllocator20ResetTempAllocationsEv>:

void SimpleMemoryAllocator::ResetTempAllocations() { temp_ = head_; }
 800adb8:	b480      	push	{r7}
 800adba:	b083      	sub	sp, #12
 800adbc:	af00      	add	r7, sp, #0
 800adbe:	6078      	str	r0, [r7, #4]
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	691a      	ldr	r2, [r3, #16]
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	619a      	str	r2, [r3, #24]
 800adc8:	bf00      	nop
 800adca:	370c      	adds	r7, #12
 800adcc:	46bd      	mov	sp, r7
 800adce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800add2:	4770      	bx	lr

0800add4 <_ZNK6tflite21SimpleMemoryAllocator13GetHeadBufferEv>:

uint8_t* SimpleMemoryAllocator::GetHeadBuffer() const { return buffer_head_; }
 800add4:	b480      	push	{r7}
 800add6:	b083      	sub	sp, #12
 800add8:	af00      	add	r7, sp, #0
 800adda:	6078      	str	r0, [r7, #4]
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	689b      	ldr	r3, [r3, #8]
 800ade0:	4618      	mov	r0, r3
 800ade2:	370c      	adds	r7, #12
 800ade4:	46bd      	mov	sp, r7
 800ade6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adea:	4770      	bx	lr

0800adec <_ZNK6tflite21SimpleMemoryAllocator18GetAvailableMemoryEj>:

size_t SimpleMemoryAllocator::GetTailUsedBytes() const {
  return buffer_tail_ - tail_;
}

size_t SimpleMemoryAllocator::GetAvailableMemory(size_t alignment) const {
 800adec:	b580      	push	{r7, lr}
 800adee:	b084      	sub	sp, #16
 800adf0:	af00      	add	r7, sp, #0
 800adf2:	6078      	str	r0, [r7, #4]
 800adf4:	6039      	str	r1, [r7, #0]
  uint8_t* const aligned_temp = AlignPointerUp(temp_, alignment);
 800adf6:	687b      	ldr	r3, [r7, #4]
 800adf8:	699b      	ldr	r3, [r3, #24]
 800adfa:	6839      	ldr	r1, [r7, #0]
 800adfc:	4618      	mov	r0, r3
 800adfe:	f7fb ff44 	bl	8006c8a <_ZN6tflite14AlignPointerUpEPhj>
 800ae02:	60f8      	str	r0, [r7, #12]
  uint8_t* const aligned_tail = AlignPointerDown(tail_, alignment);
 800ae04:	687b      	ldr	r3, [r7, #4]
 800ae06:	695b      	ldr	r3, [r3, #20]
 800ae08:	6839      	ldr	r1, [r7, #0]
 800ae0a:	4618      	mov	r0, r3
 800ae0c:	f7fb ff56 	bl	8006cbc <_ZN6tflite16AlignPointerDownEPhj>
 800ae10:	60b8      	str	r0, [r7, #8]
  return aligned_tail - aligned_temp;
 800ae12:	68ba      	ldr	r2, [r7, #8]
 800ae14:	68fb      	ldr	r3, [r7, #12]
 800ae16:	1ad3      	subs	r3, r2, r3
}
 800ae18:	4618      	mov	r0, r3
 800ae1a:	3710      	adds	r7, #16
 800ae1c:	46bd      	mov	sp, r7
 800ae1e:	bd80      	pop	{r7, pc}

0800ae20 <_ZN6tflite11NumElementsEPK14TfLiteIntArray>:
inline int NumIntermediates(const TfLiteNode* node) {
  return node->intermediates->size;
}
#endif  // TF_LITE_STATIC_MEMORY

inline int64_t NumElements(const TfLiteIntArray* dims) {
 800ae20:	b480      	push	{r7}
 800ae22:	b087      	sub	sp, #28
 800ae24:	af00      	add	r7, sp, #0
 800ae26:	6078      	str	r0, [r7, #4]
  int64_t count = 1;
 800ae28:	f04f 0201 	mov.w	r2, #1
 800ae2c:	f04f 0300 	mov.w	r3, #0
 800ae30:	e9c7 2304 	strd	r2, r3, [r7, #16]
  for (int i = 0; i < dims->size; ++i) {
 800ae34:	2300      	movs	r3, #0
 800ae36:	60fb      	str	r3, [r7, #12]
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	681b      	ldr	r3, [r3, #0]
 800ae3c:	68fa      	ldr	r2, [r7, #12]
 800ae3e:	429a      	cmp	r2, r3
 800ae40:	da1b      	bge.n	800ae7a <_ZN6tflite11NumElementsEPK14TfLiteIntArray+0x5a>
    count *= dims->data[i];
 800ae42:	687a      	ldr	r2, [r7, #4]
 800ae44:	68fb      	ldr	r3, [r7, #12]
 800ae46:	009b      	lsls	r3, r3, #2
 800ae48:	4413      	add	r3, r2
 800ae4a:	685b      	ldr	r3, [r3, #4]
 800ae4c:	461a      	mov	r2, r3
 800ae4e:	ea4f 73e2 	mov.w	r3, r2, asr #31
 800ae52:	6979      	ldr	r1, [r7, #20]
 800ae54:	fb02 f001 	mul.w	r0, r2, r1
 800ae58:	6939      	ldr	r1, [r7, #16]
 800ae5a:	fb03 f101 	mul.w	r1, r3, r1
 800ae5e:	4401      	add	r1, r0
 800ae60:	6938      	ldr	r0, [r7, #16]
 800ae62:	fba0 2302 	umull	r2, r3, r0, r2
 800ae66:	4419      	add	r1, r3
 800ae68:	460b      	mov	r3, r1
 800ae6a:	e9c7 2304 	strd	r2, r3, [r7, #16]
 800ae6e:	e9c7 2304 	strd	r2, r3, [r7, #16]
  for (int i = 0; i < dims->size; ++i) {
 800ae72:	68fb      	ldr	r3, [r7, #12]
 800ae74:	3301      	adds	r3, #1
 800ae76:	60fb      	str	r3, [r7, #12]
 800ae78:	e7de      	b.n	800ae38 <_ZN6tflite11NumElementsEPK14TfLiteIntArray+0x18>
  }
  return count;
 800ae7a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
}
 800ae7e:	4610      	mov	r0, r2
 800ae80:	4619      	mov	r1, r3
 800ae82:	371c      	adds	r7, #28
 800ae84:	46bd      	mov	sp, r7
 800ae86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae8a:	4770      	bx	lr

0800ae8c <_ZN6tflite5micro19GetMutableEvalInputEPK13TfLiteContextPK10TfLiteNodei>:

// Returns a mutable tensor for a given input index. is_variable must be checked
// during prepare when the full TfLiteTensor is available.
inline TfLiteEvalTensor* GetMutableEvalInput(const TfLiteContext* context,
                                             const TfLiteNode* node,
                                             int index) {
 800ae8c:	b580      	push	{r7, lr}
 800ae8e:	b084      	sub	sp, #16
 800ae90:	af00      	add	r7, sp, #0
 800ae92:	60f8      	str	r0, [r7, #12]
 800ae94:	60b9      	str	r1, [r7, #8]
 800ae96:	607a      	str	r2, [r7, #4]
  TFLITE_DCHECK(context != nullptr);
 800ae98:	68fb      	ldr	r3, [r7, #12]
 800ae9a:	2b00      	cmp	r3, #0
 800ae9c:	d101      	bne.n	800aea2 <_ZN6tflite5micro19GetMutableEvalInputEPK13TfLiteContextPK10TfLiteNodei+0x16>
 800ae9e:	f005 fc7e 	bl	801079e <abort>
  TFLITE_DCHECK(node != nullptr);
 800aea2:	68bb      	ldr	r3, [r7, #8]
 800aea4:	2b00      	cmp	r3, #0
 800aea6:	d101      	bne.n	800aeac <_ZN6tflite5micro19GetMutableEvalInputEPK13TfLiteContextPK10TfLiteNodei+0x20>
 800aea8:	f005 fc79 	bl	801079e <abort>
  return context->GetEvalTensor(context, node->inputs->data[index]);
 800aeac:	68fb      	ldr	r3, [r7, #12]
 800aeae:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800aeb0:	68bb      	ldr	r3, [r7, #8]
 800aeb2:	6819      	ldr	r1, [r3, #0]
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	009b      	lsls	r3, r3, #2
 800aeb8:	440b      	add	r3, r1
 800aeba:	685b      	ldr	r3, [r3, #4]
 800aebc:	4619      	mov	r1, r3
 800aebe:	68f8      	ldr	r0, [r7, #12]
 800aec0:	4790      	blx	r2
 800aec2:	4603      	mov	r3, r0
}
 800aec4:	4618      	mov	r0, r3
 800aec6:	3710      	adds	r7, #16
 800aec8:	46bd      	mov	sp, r7
 800aeca:	bd80      	pop	{r7, pc}

0800aecc <_ZN6tflite5micro12GetEvalInputEPK13TfLiteContextPK10TfLiteNodei>:

// Returns the TfLiteEvalTensor struct for a given input index in a node.
inline const TfLiteEvalTensor* GetEvalInput(const TfLiteContext* context,
                                            const TfLiteNode* node, int index) {
 800aecc:	b580      	push	{r7, lr}
 800aece:	b084      	sub	sp, #16
 800aed0:	af00      	add	r7, sp, #0
 800aed2:	60f8      	str	r0, [r7, #12]
 800aed4:	60b9      	str	r1, [r7, #8]
 800aed6:	607a      	str	r2, [r7, #4]
  return GetMutableEvalInput(context, node, index);
 800aed8:	687a      	ldr	r2, [r7, #4]
 800aeda:	68b9      	ldr	r1, [r7, #8]
 800aedc:	68f8      	ldr	r0, [r7, #12]
 800aede:	f7ff ffd5 	bl	800ae8c <_ZN6tflite5micro19GetMutableEvalInputEPK13TfLiteContextPK10TfLiteNodei>
 800aee2:	4603      	mov	r3, r0
}
 800aee4:	4618      	mov	r0, r3
 800aee6:	3710      	adds	r7, #16
 800aee8:	46bd      	mov	sp, r7
 800aeea:	bd80      	pop	{r7, pc}

0800aeec <_ZN6tflite5micro13GetEvalOutputEPK13TfLiteContextPK10TfLiteNodei>:

// Returns the TfLiteEvalTensor struct for a given output index in a node.
inline TfLiteEvalTensor* GetEvalOutput(const TfLiteContext* context,
                                       const TfLiteNode* node, int index) {
 800aeec:	b580      	push	{r7, lr}
 800aeee:	b084      	sub	sp, #16
 800aef0:	af00      	add	r7, sp, #0
 800aef2:	60f8      	str	r0, [r7, #12]
 800aef4:	60b9      	str	r1, [r7, #8]
 800aef6:	607a      	str	r2, [r7, #4]
  TFLITE_DCHECK(context != nullptr);
 800aef8:	68fb      	ldr	r3, [r7, #12]
 800aefa:	2b00      	cmp	r3, #0
 800aefc:	d101      	bne.n	800af02 <_ZN6tflite5micro13GetEvalOutputEPK13TfLiteContextPK10TfLiteNodei+0x16>
 800aefe:	f005 fc4e 	bl	801079e <abort>
  TFLITE_DCHECK(node != nullptr);
 800af02:	68bb      	ldr	r3, [r7, #8]
 800af04:	2b00      	cmp	r3, #0
 800af06:	d101      	bne.n	800af0c <_ZN6tflite5micro13GetEvalOutputEPK13TfLiteContextPK10TfLiteNodei+0x20>
 800af08:	f005 fc49 	bl	801079e <abort>
  return context->GetEvalTensor(context, node->outputs->data[index]);
 800af0c:	68fb      	ldr	r3, [r7, #12]
 800af0e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800af10:	68bb      	ldr	r3, [r7, #8]
 800af12:	6859      	ldr	r1, [r3, #4]
 800af14:	687b      	ldr	r3, [r7, #4]
 800af16:	009b      	lsls	r3, r3, #2
 800af18:	440b      	add	r3, r1
 800af1a:	685b      	ldr	r3, [r3, #4]
 800af1c:	4619      	mov	r1, r3
 800af1e:	68f8      	ldr	r0, [r7, #12]
 800af20:	4790      	blx	r2
 800af22:	4603      	mov	r3, r0
}
 800af24:	4618      	mov	r0, r3
 800af26:	3710      	adds	r7, #16
 800af28:	46bd      	mov	sp, r7
 800af2a:	bd80      	pop	{r7, pc}

0800af2c <_ZN6tflite5micro13GetTensorDataIfEEPKT_PK16TfLiteEvalTensor>:
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
}

// Returns const data for a TfLiteEvalTensor struct.
template <typename T>
const T* GetTensorData(const TfLiteEvalTensor* tensor) {
 800af2c:	b580      	push	{r7, lr}
 800af2e:	b082      	sub	sp, #8
 800af30:	af00      	add	r7, sp, #0
 800af32:	6078      	str	r0, [r7, #4]
  TFLITE_DCHECK(tensor != nullptr);
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	2b00      	cmp	r3, #0
 800af38:	d101      	bne.n	800af3e <_ZN6tflite5micro13GetTensorDataIfEEPKT_PK16TfLiteEvalTensor+0x12>
 800af3a:	f005 fc30 	bl	801079e <abort>
  return reinterpret_cast<const T*>(tensor->data.raw);
 800af3e:	687b      	ldr	r3, [r7, #4]
 800af40:	681b      	ldr	r3, [r3, #0]
}
 800af42:	4618      	mov	r0, r3
 800af44:	3708      	adds	r7, #8
 800af46:	46bd      	mov	sp, r7
 800af48:	bd80      	pop	{r7, pc}

0800af4a <_ZN6tflite5micro13GetTensorDataIfEEPT_P16TfLiteEvalTensor>:
T* GetTensorData(TfLiteEvalTensor* tensor) {
 800af4a:	b480      	push	{r7}
 800af4c:	b083      	sub	sp, #12
 800af4e:	af00      	add	r7, sp, #0
 800af50:	6078      	str	r0, [r7, #4]
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
 800af52:	687b      	ldr	r3, [r7, #4]
 800af54:	2b00      	cmp	r3, #0
 800af56:	d002      	beq.n	800af5e <_ZN6tflite5micro13GetTensorDataIfEEPT_P16TfLiteEvalTensor+0x14>
 800af58:	687b      	ldr	r3, [r7, #4]
 800af5a:	681b      	ldr	r3, [r3, #0]
 800af5c:	e000      	b.n	800af60 <_ZN6tflite5micro13GetTensorDataIfEEPT_P16TfLiteEvalTensor+0x16>
 800af5e:	2300      	movs	r3, #0
}
 800af60:	4618      	mov	r0, r3
 800af62:	370c      	adds	r7, #12
 800af64:	46bd      	mov	sp, r7
 800af66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af6a:	4770      	bx	lr

0800af6c <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor>:
const T* GetTensorData(const TfLiteEvalTensor* tensor) {
 800af6c:	b580      	push	{r7, lr}
 800af6e:	b082      	sub	sp, #8
 800af70:	af00      	add	r7, sp, #0
 800af72:	6078      	str	r0, [r7, #4]
  TFLITE_DCHECK(tensor != nullptr);
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	2b00      	cmp	r3, #0
 800af78:	d101      	bne.n	800af7e <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor+0x12>
 800af7a:	f005 fc10 	bl	801079e <abort>
  return reinterpret_cast<const T*>(tensor->data.raw);
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	681b      	ldr	r3, [r3, #0]
}
 800af82:	4618      	mov	r0, r3
 800af84:	3708      	adds	r7, #8
 800af86:	46bd      	mov	sp, r7
 800af88:	bd80      	pop	{r7, pc}

0800af8a <_ZN6tflite5micro13GetTensorDataIaEEPT_P16TfLiteEvalTensor>:
T* GetTensorData(TfLiteEvalTensor* tensor) {
 800af8a:	b480      	push	{r7}
 800af8c:	b083      	sub	sp, #12
 800af8e:	af00      	add	r7, sp, #0
 800af90:	6078      	str	r0, [r7, #4]
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
 800af92:	687b      	ldr	r3, [r7, #4]
 800af94:	2b00      	cmp	r3, #0
 800af96:	d002      	beq.n	800af9e <_ZN6tflite5micro13GetTensorDataIaEEPT_P16TfLiteEvalTensor+0x14>
 800af98:	687b      	ldr	r3, [r7, #4]
 800af9a:	681b      	ldr	r3, [r3, #0]
 800af9c:	e000      	b.n	800afa0 <_ZN6tflite5micro13GetTensorDataIaEEPT_P16TfLiteEvalTensor+0x16>
 800af9e:	2300      	movs	r3, #0
}
 800afa0:	4618      	mov	r0, r3
 800afa2:	370c      	adds	r7, #12
 800afa4:	46bd      	mov	sp, r7
 800afa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afaa:	4770      	bx	lr

0800afac <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_>:

// This function implements the same computation as the ARMv7 NEON VQRDMULH
// instruction.
template <>
inline std::int32_t SaturatingRoundingDoublingHighMul(std::int32_t a,
                                                      std::int32_t b) {
 800afac:	b5b0      	push	{r4, r5, r7, lr}
 800afae:	b08c      	sub	sp, #48	; 0x30
 800afb0:	af00      	add	r7, sp, #0
 800afb2:	6078      	str	r0, [r7, #4]
 800afb4:	6039      	str	r1, [r7, #0]
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
 800afb6:	687a      	ldr	r2, [r7, #4]
 800afb8:	683b      	ldr	r3, [r7, #0]
 800afba:	429a      	cmp	r2, r3
 800afbc:	d107      	bne.n	800afce <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_+0x22>
 800afbe:	f7f6 ffc3 	bl	8001f48 <_ZNSt14numeric_limitsIlE3minEv>
 800afc2:	4602      	mov	r2, r0
 800afc4:	687b      	ldr	r3, [r7, #4]
 800afc6:	4293      	cmp	r3, r2
 800afc8:	d101      	bne.n	800afce <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_+0x22>
 800afca:	2301      	movs	r3, #1
 800afcc:	e000      	b.n	800afd0 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_+0x24>
 800afce:	2300      	movs	r3, #0
 800afd0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  std::int64_t a_64(a);
 800afd4:	687b      	ldr	r3, [r7, #4]
 800afd6:	461a      	mov	r2, r3
 800afd8:	ea4f 73e2 	mov.w	r3, r2, asr #31
 800afdc:	e9c7 2308 	strd	r2, r3, [r7, #32]
  std::int64_t b_64(b);
 800afe0:	683b      	ldr	r3, [r7, #0]
 800afe2:	461a      	mov	r2, r3
 800afe4:	ea4f 73e2 	mov.w	r3, r2, asr #31
 800afe8:	e9c7 2306 	strd	r2, r3, [r7, #24]
  std::int64_t ab_64 = a_64 * b_64;
 800afec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800afee:	69ba      	ldr	r2, [r7, #24]
 800aff0:	fb02 f203 	mul.w	r2, r2, r3
 800aff4:	69fb      	ldr	r3, [r7, #28]
 800aff6:	6a39      	ldr	r1, [r7, #32]
 800aff8:	fb01 f303 	mul.w	r3, r1, r3
 800affc:	18d1      	adds	r1, r2, r3
 800affe:	6a3a      	ldr	r2, [r7, #32]
 800b000:	69bb      	ldr	r3, [r7, #24]
 800b002:	fba2 2303 	umull	r2, r3, r2, r3
 800b006:	4419      	add	r1, r3
 800b008:	460b      	mov	r3, r1
 800b00a:	e9c7 2304 	strd	r2, r3, [r7, #16]
 800b00e:	e9c7 2304 	strd	r2, r3, [r7, #16]
  std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
 800b012:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800b016:	2a00      	cmp	r2, #0
 800b018:	f173 0300 	sbcs.w	r3, r3, #0
 800b01c:	db02      	blt.n	800b024 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_+0x78>
 800b01e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800b022:	e000      	b.n	800b026 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_+0x7a>
 800b024:	4b18      	ldr	r3, [pc, #96]	; (800b088 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_+0xdc>)
 800b026:	60fb      	str	r3, [r7, #12]
  std::int32_t ab_x2_high32 =
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
 800b028:	68fb      	ldr	r3, [r7, #12]
 800b02a:	4618      	mov	r0, r3
 800b02c:	ea4f 71e0 	mov.w	r1, r0, asr #31
 800b030:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800b034:	1884      	adds	r4, r0, r2
 800b036:	eb41 0503 	adc.w	r5, r1, r3
 800b03a:	4622      	mov	r2, r4
 800b03c:	462b      	mov	r3, r5
 800b03e:	2a00      	cmp	r2, #0
 800b040:	f173 0100 	sbcs.w	r1, r3, #0
 800b044:	da06      	bge.n	800b054 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_+0xa8>
 800b046:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 800b04a:	f04f 0100 	mov.w	r1, #0
 800b04e:	1812      	adds	r2, r2, r0
 800b050:	eb41 0303 	adc.w	r3, r1, r3
 800b054:	f04f 0000 	mov.w	r0, #0
 800b058:	f04f 0100 	mov.w	r1, #0
 800b05c:	0fd0      	lsrs	r0, r2, #31
 800b05e:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 800b062:	17d9      	asrs	r1, r3, #31
 800b064:	4602      	mov	r2, r0
 800b066:	460b      	mov	r3, r1
  std::int32_t ab_x2_high32 =
 800b068:	4613      	mov	r3, r2
 800b06a:	60bb      	str	r3, [r7, #8]
  return overflow ? std::numeric_limits<std::int32_t>::max() : ab_x2_high32;
 800b06c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b070:	2b00      	cmp	r3, #0
 800b072:	d003      	beq.n	800b07c <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_+0xd0>
 800b074:	f7f6 ff71 	bl	8001f5a <_ZNSt14numeric_limitsIlE3maxEv>
 800b078:	4603      	mov	r3, r0
 800b07a:	e000      	b.n	800b07e <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_+0xd2>
 800b07c:	68bb      	ldr	r3, [r7, #8]
}
 800b07e:	4618      	mov	r0, r3
 800b080:	3730      	adds	r7, #48	; 0x30
 800b082:	46bd      	mov	sp, r7
 800b084:	bdb0      	pop	{r4, r5, r7, pc}
 800b086:	bf00      	nop
 800b088:	c0000001 	.word	0xc0000001

0800b08c <_ZNK6tflite12RuntimeShape4DimsEi>:
  inline int32_t Dims(int i) const {
 800b08c:	b580      	push	{r7, lr}
 800b08e:	b082      	sub	sp, #8
 800b090:	af00      	add	r7, sp, #0
 800b092:	6078      	str	r0, [r7, #4]
 800b094:	6039      	str	r1, [r7, #0]
    TFLITE_DCHECK_GE(i, 0);
 800b096:	683b      	ldr	r3, [r7, #0]
 800b098:	2b00      	cmp	r3, #0
 800b09a:	da01      	bge.n	800b0a0 <_ZNK6tflite12RuntimeShape4DimsEi+0x14>
 800b09c:	f005 fb7f 	bl	801079e <abort>
    TFLITE_DCHECK_LT(i, size_);
 800b0a0:	687b      	ldr	r3, [r7, #4]
 800b0a2:	681b      	ldr	r3, [r3, #0]
 800b0a4:	683a      	ldr	r2, [r7, #0]
 800b0a6:	429a      	cmp	r2, r3
 800b0a8:	db01      	blt.n	800b0ae <_ZNK6tflite12RuntimeShape4DimsEi+0x22>
 800b0aa:	f005 fb78 	bl	801079e <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
 800b0ae:	687b      	ldr	r3, [r7, #4]
 800b0b0:	681b      	ldr	r3, [r3, #0]
 800b0b2:	2b05      	cmp	r3, #5
 800b0b4:	dd06      	ble.n	800b0c4 <_ZNK6tflite12RuntimeShape4DimsEi+0x38>
 800b0b6:	687b      	ldr	r3, [r7, #4]
 800b0b8:	685a      	ldr	r2, [r3, #4]
 800b0ba:	683b      	ldr	r3, [r7, #0]
 800b0bc:	009b      	lsls	r3, r3, #2
 800b0be:	4413      	add	r3, r2
 800b0c0:	681b      	ldr	r3, [r3, #0]
 800b0c2:	e004      	b.n	800b0ce <_ZNK6tflite12RuntimeShape4DimsEi+0x42>
 800b0c4:	687a      	ldr	r2, [r7, #4]
 800b0c6:	683b      	ldr	r3, [r7, #0]
 800b0c8:	009b      	lsls	r3, r3, #2
 800b0ca:	4413      	add	r3, r2
 800b0cc:	685b      	ldr	r3, [r3, #4]
  }
 800b0ce:	4618      	mov	r0, r3
 800b0d0:	3708      	adds	r7, #8
 800b0d2:	46bd      	mov	sp, r7
 800b0d4:	bd80      	pop	{r7, pc}

0800b0d6 <_ZNK6tflite12RuntimeShape8DimsDataEv>:
  inline const int32_t* DimsData() const {
 800b0d6:	b480      	push	{r7}
 800b0d8:	b083      	sub	sp, #12
 800b0da:	af00      	add	r7, sp, #0
 800b0dc:	6078      	str	r0, [r7, #4]
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
 800b0de:	687b      	ldr	r3, [r7, #4]
 800b0e0:	681b      	ldr	r3, [r3, #0]
 800b0e2:	2b05      	cmp	r3, #5
 800b0e4:	dd02      	ble.n	800b0ec <_ZNK6tflite12RuntimeShape8DimsDataEv+0x16>
 800b0e6:	687b      	ldr	r3, [r7, #4]
 800b0e8:	685b      	ldr	r3, [r3, #4]
 800b0ea:	e001      	b.n	800b0f0 <_ZNK6tflite12RuntimeShape8DimsDataEv+0x1a>
 800b0ec:	687b      	ldr	r3, [r7, #4]
 800b0ee:	3304      	adds	r3, #4
  }
 800b0f0:	4618      	mov	r0, r3
 800b0f2:	370c      	adds	r7, #12
 800b0f4:	46bd      	mov	sp, r7
 800b0f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0fa:	4770      	bx	lr

0800b0fc <_ZNK6tflite12RuntimeShape8FlatSizeEv>:
    BuildFrom<const std::initializer_list<int>>(init_list);
  }

  // Returns the total count of elements, that is the size when flattened into a
  // vector.
  inline int FlatSize() const {
 800b0fc:	b580      	push	{r7, lr}
 800b0fe:	b086      	sub	sp, #24
 800b100:	af00      	add	r7, sp, #0
 800b102:	6078      	str	r0, [r7, #4]
    int buffer_size = 1;
 800b104:	2301      	movs	r3, #1
 800b106:	617b      	str	r3, [r7, #20]
    const int* dims_data = reinterpret_cast<const int*>(DimsData());
 800b108:	6878      	ldr	r0, [r7, #4]
 800b10a:	f7ff ffe4 	bl	800b0d6 <_ZNK6tflite12RuntimeShape8DimsDataEv>
 800b10e:	60f8      	str	r0, [r7, #12]
    for (int i = 0; i < size_; i++) {
 800b110:	2300      	movs	r3, #0
 800b112:	613b      	str	r3, [r7, #16]
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	681b      	ldr	r3, [r3, #0]
 800b118:	693a      	ldr	r2, [r7, #16]
 800b11a:	429a      	cmp	r2, r3
 800b11c:	da0c      	bge.n	800b138 <_ZNK6tflite12RuntimeShape8FlatSizeEv+0x3c>
      buffer_size *= dims_data[i];
 800b11e:	693b      	ldr	r3, [r7, #16]
 800b120:	009b      	lsls	r3, r3, #2
 800b122:	68fa      	ldr	r2, [r7, #12]
 800b124:	4413      	add	r3, r2
 800b126:	681a      	ldr	r2, [r3, #0]
 800b128:	697b      	ldr	r3, [r7, #20]
 800b12a:	fb02 f303 	mul.w	r3, r2, r3
 800b12e:	617b      	str	r3, [r7, #20]
    for (int i = 0; i < size_; i++) {
 800b130:	693b      	ldr	r3, [r7, #16]
 800b132:	3301      	adds	r3, #1
 800b134:	613b      	str	r3, [r7, #16]
 800b136:	e7ed      	b.n	800b114 <_ZNK6tflite12RuntimeShape8FlatSizeEv+0x18>
    }
    return buffer_size;
 800b138:	697b      	ldr	r3, [r7, #20]
  }
 800b13a:	4618      	mov	r0, r3
 800b13c:	3718      	adds	r7, #24
 800b13e:	46bd      	mov	sp, r7
 800b140:	bd80      	pop	{r7, pc}

0800b142 <_ZN6tflite29MultiplyByQuantizedMultiplierElli>:
                                           quantized_multiplier);
}

inline int32_t MultiplyByQuantizedMultiplier(int32_t x,
                                             int32_t quantized_multiplier,
                                             int shift) {
 800b142:	b580      	push	{r7, lr}
 800b144:	b086      	sub	sp, #24
 800b146:	af00      	add	r7, sp, #0
 800b148:	60f8      	str	r0, [r7, #12]
 800b14a:	60b9      	str	r1, [r7, #8]
 800b14c:	607a      	str	r2, [r7, #4]
  using gemmlowp::RoundingDivideByPOT;
  using gemmlowp::SaturatingRoundingDoublingHighMul;
  int left_shift = shift > 0 ? shift : 0;
 800b14e:	687b      	ldr	r3, [r7, #4]
 800b150:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800b154:	617b      	str	r3, [r7, #20]
  int right_shift = shift > 0 ? 0 : -shift;
 800b156:	687b      	ldr	r3, [r7, #4]
 800b158:	2b00      	cmp	r3, #0
 800b15a:	dc02      	bgt.n	800b162 <_ZN6tflite29MultiplyByQuantizedMultiplierElli+0x20>
 800b15c:	687b      	ldr	r3, [r7, #4]
 800b15e:	425b      	negs	r3, r3
 800b160:	e000      	b.n	800b164 <_ZN6tflite29MultiplyByQuantizedMultiplierElli+0x22>
 800b162:	2300      	movs	r3, #0
 800b164:	613b      	str	r3, [r7, #16]
  return RoundingDivideByPOT(SaturatingRoundingDoublingHighMul(
 800b166:	68fa      	ldr	r2, [r7, #12]
 800b168:	697b      	ldr	r3, [r7, #20]
 800b16a:	fa02 f303 	lsl.w	r3, r2, r3
 800b16e:	68b9      	ldr	r1, [r7, #8]
 800b170:	4618      	mov	r0, r3
 800b172:	f7ff ff1b 	bl	800afac <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_>
 800b176:	4603      	mov	r3, r0
 800b178:	6939      	ldr	r1, [r7, #16]
 800b17a:	4618      	mov	r0, r3
 800b17c:	f000 f806 	bl	800b18c <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i>
 800b180:	4603      	mov	r3, r0
                                 x * (1 << left_shift), quantized_multiplier),
                             right_shift);
}
 800b182:	4618      	mov	r0, r3
 800b184:	3718      	adds	r7, #24
 800b186:	46bd      	mov	sp, r7
 800b188:	bd80      	pop	{r7, pc}
	...

0800b18c <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i>:
}

// Correctly-rounded-to-nearest division by a power-of-two.
// Also known as a rounding arithmetic right shift.
template <typename IntegerType>
inline IntegerType RoundingDivideByPOT(IntegerType x, int exponent) {
 800b18c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b18e:	b089      	sub	sp, #36	; 0x24
 800b190:	af00      	add	r7, sp, #0
 800b192:	6078      	str	r0, [r7, #4]
 800b194:	6039      	str	r1, [r7, #0]
  assert(exponent >= 0);
 800b196:	6839      	ldr	r1, [r7, #0]
 800b198:	2900      	cmp	r1, #0
 800b19a:	da06      	bge.n	800b1aa <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i+0x1e>
 800b19c:	4b31      	ldr	r3, [pc, #196]	; (800b264 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i+0xd8>)
 800b19e:	4a32      	ldr	r2, [pc, #200]	; (800b268 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i+0xdc>)
 800b1a0:	f44f 71b3 	mov.w	r1, #358	; 0x166
 800b1a4:	4831      	ldr	r0, [pc, #196]	; (800b26c <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i+0xe0>)
 800b1a6:	f005 fb01 	bl	80107ac <__assert_func>
  assert(exponent <= 31);
 800b1aa:	6839      	ldr	r1, [r7, #0]
 800b1ac:	291f      	cmp	r1, #31
 800b1ae:	dd06      	ble.n	800b1be <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i+0x32>
 800b1b0:	4b2f      	ldr	r3, [pc, #188]	; (800b270 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i+0xe4>)
 800b1b2:	4a2d      	ldr	r2, [pc, #180]	; (800b268 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i+0xdc>)
 800b1b4:	f240 1167 	movw	r1, #359	; 0x167
 800b1b8:	482c      	ldr	r0, [pc, #176]	; (800b26c <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i+0xe0>)
 800b1ba:	f005 faf7 	bl	80107ac <__assert_func>
  const IntegerType mask = Dup<IntegerType>((1ll << exponent) - 1);
 800b1be:	f04f 0001 	mov.w	r0, #1
 800b1c2:	f04f 0100 	mov.w	r1, #0
 800b1c6:	683c      	ldr	r4, [r7, #0]
 800b1c8:	f1a4 0620 	sub.w	r6, r4, #32
 800b1cc:	f1c4 0520 	rsb	r5, r4, #32
 800b1d0:	fa01 f304 	lsl.w	r3, r1, r4
 800b1d4:	fa00 f606 	lsl.w	r6, r0, r6
 800b1d8:	4333      	orrs	r3, r6
 800b1da:	fa20 f505 	lsr.w	r5, r0, r5
 800b1de:	432b      	orrs	r3, r5
 800b1e0:	fa00 f204 	lsl.w	r2, r0, r4
 800b1e4:	4613      	mov	r3, r2
 800b1e6:	3b01      	subs	r3, #1
 800b1e8:	4618      	mov	r0, r3
 800b1ea:	f000 f843 	bl	800b274 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 800b1ee:	61f8      	str	r0, [r7, #28]
  const IntegerType zero = Dup<IntegerType>(0);
 800b1f0:	2000      	movs	r0, #0
 800b1f2:	f000 f83f 	bl	800b274 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 800b1f6:	61b8      	str	r0, [r7, #24]
  const IntegerType one = Dup<IntegerType>(1);
 800b1f8:	2001      	movs	r0, #1
 800b1fa:	f000 f83b 	bl	800b274 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 800b1fe:	6178      	str	r0, [r7, #20]
  const IntegerType remainder = BitAnd(x, mask);
 800b200:	69f9      	ldr	r1, [r7, #28]
 800b202:	6878      	ldr	r0, [r7, #4]
 800b204:	f000 f841 	bl	800b28a <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 800b208:	6138      	str	r0, [r7, #16]
  const IntegerType threshold =
      Add(ShiftRight(mask, 1), BitAnd(MaskIfLessThan(x, zero), one));
 800b20a:	2101      	movs	r1, #1
 800b20c:	69f8      	ldr	r0, [r7, #28]
 800b20e:	f000 f84a 	bl	800b2a6 <_ZN8gemmlowp10ShiftRightIlEET_S1_i>
 800b212:	4604      	mov	r4, r0
 800b214:	69b9      	ldr	r1, [r7, #24]
 800b216:	6878      	ldr	r0, [r7, #4]
 800b218:	f000 f854 	bl	800b2c4 <_ZN8gemmlowp14MaskIfLessThanIlEET_S1_S1_>
 800b21c:	4603      	mov	r3, r0
 800b21e:	6979      	ldr	r1, [r7, #20]
 800b220:	4618      	mov	r0, r3
 800b222:	f000 f832 	bl	800b28a <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 800b226:	4603      	mov	r3, r0
 800b228:	4619      	mov	r1, r3
 800b22a:	4620      	mov	r0, r4
 800b22c:	f000 f85e 	bl	800b2ec <_ZN8gemmlowp3AddIlEET_S1_S1_>
 800b230:	60f8      	str	r0, [r7, #12]
  return Add(ShiftRight(x, exponent),
 800b232:	6839      	ldr	r1, [r7, #0]
 800b234:	6878      	ldr	r0, [r7, #4]
 800b236:	f000 f836 	bl	800b2a6 <_ZN8gemmlowp10ShiftRightIlEET_S1_i>
 800b23a:	4604      	mov	r4, r0
 800b23c:	68f9      	ldr	r1, [r7, #12]
 800b23e:	6938      	ldr	r0, [r7, #16]
 800b240:	f000 f862 	bl	800b308 <_ZN8gemmlowp17MaskIfGreaterThanIlEET_S1_S1_>
 800b244:	4603      	mov	r3, r0
 800b246:	6979      	ldr	r1, [r7, #20]
 800b248:	4618      	mov	r0, r3
 800b24a:	f000 f81e 	bl	800b28a <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 800b24e:	4603      	mov	r3, r0
 800b250:	4619      	mov	r1, r3
 800b252:	4620      	mov	r0, r4
 800b254:	f000 f84a 	bl	800b2ec <_ZN8gemmlowp3AddIlEET_S1_S1_>
 800b258:	4603      	mov	r3, r0
             BitAnd(MaskIfGreaterThan(remainder, threshold), one));
}
 800b25a:	4618      	mov	r0, r3
 800b25c:	3724      	adds	r7, #36	; 0x24
 800b25e:	46bd      	mov	sp, r7
 800b260:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b262:	bf00      	nop
 800b264:	08017498 	.word	0x08017498
 800b268:	080174a8 	.word	0x080174a8
 800b26c:	08017504 	.word	0x08017504
 800b270:	08017594 	.word	0x08017594

0800b274 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>:
tRawType Dup(typename FixedPointRawTypeTraits<tRawType>::ScalarRawType x) {
 800b274:	b480      	push	{r7}
 800b276:	b083      	sub	sp, #12
 800b278:	af00      	add	r7, sp, #0
 800b27a:	6078      	str	r0, [r7, #4]
  return x;
 800b27c:	687b      	ldr	r3, [r7, #4]
}
 800b27e:	4618      	mov	r0, r3
 800b280:	370c      	adds	r7, #12
 800b282:	46bd      	mov	sp, r7
 800b284:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b288:	4770      	bx	lr

0800b28a <_ZN8gemmlowp6BitAndIlEET_S1_S1_>:
tIntegerType BitAnd(tIntegerType a, tIntegerType b) {
 800b28a:	b480      	push	{r7}
 800b28c:	b083      	sub	sp, #12
 800b28e:	af00      	add	r7, sp, #0
 800b290:	6078      	str	r0, [r7, #4]
 800b292:	6039      	str	r1, [r7, #0]
  return a & b;
 800b294:	687a      	ldr	r2, [r7, #4]
 800b296:	683b      	ldr	r3, [r7, #0]
 800b298:	4013      	ands	r3, r2
}
 800b29a:	4618      	mov	r0, r3
 800b29c:	370c      	adds	r7, #12
 800b29e:	46bd      	mov	sp, r7
 800b2a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2a4:	4770      	bx	lr

0800b2a6 <_ZN8gemmlowp10ShiftRightIlEET_S1_i>:
tIntegerType ShiftRight(tIntegerType a, int offset) {
 800b2a6:	b480      	push	{r7}
 800b2a8:	b083      	sub	sp, #12
 800b2aa:	af00      	add	r7, sp, #0
 800b2ac:	6078      	str	r0, [r7, #4]
 800b2ae:	6039      	str	r1, [r7, #0]
  return a >> offset;
 800b2b0:	687a      	ldr	r2, [r7, #4]
 800b2b2:	683b      	ldr	r3, [r7, #0]
 800b2b4:	fa42 f303 	asr.w	r3, r2, r3
}
 800b2b8:	4618      	mov	r0, r3
 800b2ba:	370c      	adds	r7, #12
 800b2bc:	46bd      	mov	sp, r7
 800b2be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2c2:	4770      	bx	lr

0800b2c4 <_ZN8gemmlowp14MaskIfLessThanIlEET_S1_S1_>:
tIntegerType MaskIfLessThan(tIntegerType a, tIntegerType b) {
 800b2c4:	b580      	push	{r7, lr}
 800b2c6:	b082      	sub	sp, #8
 800b2c8:	af00      	add	r7, sp, #0
 800b2ca:	6078      	str	r0, [r7, #4]
 800b2cc:	6039      	str	r1, [r7, #0]
  return MaskIfNonZero<tIntegerType>(a < b);
 800b2ce:	687a      	ldr	r2, [r7, #4]
 800b2d0:	683b      	ldr	r3, [r7, #0]
 800b2d2:	429a      	cmp	r2, r3
 800b2d4:	bfb4      	ite	lt
 800b2d6:	2301      	movlt	r3, #1
 800b2d8:	2300      	movge	r3, #0
 800b2da:	b2db      	uxtb	r3, r3
 800b2dc:	4618      	mov	r0, r3
 800b2de:	f000 f827 	bl	800b330 <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_>
 800b2e2:	4603      	mov	r3, r0
}
 800b2e4:	4618      	mov	r0, r3
 800b2e6:	3708      	adds	r7, #8
 800b2e8:	46bd      	mov	sp, r7
 800b2ea:	bd80      	pop	{r7, pc}

0800b2ec <_ZN8gemmlowp3AddIlEET_S1_S1_>:
tIntegerType Add(tIntegerType a, tIntegerType b) {
 800b2ec:	b480      	push	{r7}
 800b2ee:	b083      	sub	sp, #12
 800b2f0:	af00      	add	r7, sp, #0
 800b2f2:	6078      	str	r0, [r7, #4]
 800b2f4:	6039      	str	r1, [r7, #0]
  return a + b;
 800b2f6:	687a      	ldr	r2, [r7, #4]
 800b2f8:	683b      	ldr	r3, [r7, #0]
 800b2fa:	4413      	add	r3, r2
}
 800b2fc:	4618      	mov	r0, r3
 800b2fe:	370c      	adds	r7, #12
 800b300:	46bd      	mov	sp, r7
 800b302:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b306:	4770      	bx	lr

0800b308 <_ZN8gemmlowp17MaskIfGreaterThanIlEET_S1_S1_>:
tIntegerType MaskIfGreaterThan(tIntegerType a, tIntegerType b) {
 800b308:	b580      	push	{r7, lr}
 800b30a:	b082      	sub	sp, #8
 800b30c:	af00      	add	r7, sp, #0
 800b30e:	6078      	str	r0, [r7, #4]
 800b310:	6039      	str	r1, [r7, #0]
  return MaskIfNonZero<tIntegerType>(a > b);
 800b312:	687a      	ldr	r2, [r7, #4]
 800b314:	683b      	ldr	r3, [r7, #0]
 800b316:	429a      	cmp	r2, r3
 800b318:	bfcc      	ite	gt
 800b31a:	2301      	movgt	r3, #1
 800b31c:	2300      	movle	r3, #0
 800b31e:	b2db      	uxtb	r3, r3
 800b320:	4618      	mov	r0, r3
 800b322:	f000 f805 	bl	800b330 <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_>
 800b326:	4603      	mov	r3, r0
}
 800b328:	4618      	mov	r0, r3
 800b32a:	3708      	adds	r7, #8
 800b32c:	46bd      	mov	sp, r7
 800b32e:	bd80      	pop	{r7, pc}

0800b330 <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_>:
tIntegerType MaskIfNonZero(tIntegerType a) {
 800b330:	b580      	push	{r7, lr}
 800b332:	b082      	sub	sp, #8
 800b334:	af00      	add	r7, sp, #0
 800b336:	6078      	str	r0, [r7, #4]
  return a ? BitNot(zero) : zero;
 800b338:	687b      	ldr	r3, [r7, #4]
 800b33a:	2b00      	cmp	r3, #0
 800b33c:	d004      	beq.n	800b348 <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_+0x18>
 800b33e:	2000      	movs	r0, #0
 800b340:	f000 f807 	bl	800b352 <_ZN8gemmlowp6BitNotIlEET_S1_>
 800b344:	4603      	mov	r3, r0
 800b346:	e000      	b.n	800b34a <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_+0x1a>
 800b348:	2300      	movs	r3, #0
}
 800b34a:	4618      	mov	r0, r3
 800b34c:	3708      	adds	r7, #8
 800b34e:	46bd      	mov	sp, r7
 800b350:	bd80      	pop	{r7, pc}

0800b352 <_ZN8gemmlowp6BitNotIlEET_S1_>:
tIntegerType BitNot(tIntegerType a) {
 800b352:	b480      	push	{r7}
 800b354:	b083      	sub	sp, #12
 800b356:	af00      	add	r7, sp, #0
 800b358:	6078      	str	r0, [r7, #4]
  return ~a;
 800b35a:	687b      	ldr	r3, [r7, #4]
 800b35c:	43db      	mvns	r3, r3
}
 800b35e:	4618      	mov	r0, r3
 800b360:	370c      	adds	r7, #12
 800b362:	46bd      	mov	sp, r7
 800b364:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b368:	4770      	bx	lr
	...

0800b36c <_ZNSt14numeric_limitsIfE3maxEv>:

      static _GLIBCXX_CONSTEXPR float
      min() _GLIBCXX_USE_NOEXCEPT { return __FLT_MIN__; }

      static _GLIBCXX_CONSTEXPR float
      max() _GLIBCXX_USE_NOEXCEPT { return __FLT_MAX__; }
 800b36c:	b480      	push	{r7}
 800b36e:	af00      	add	r7, sp, #0
 800b370:	4b04      	ldr	r3, [pc, #16]	; (800b384 <_ZNSt14numeric_limitsIfE3maxEv+0x18>)
 800b372:	ee07 3a90 	vmov	s15, r3
 800b376:	eeb0 0a67 	vmov.f32	s0, s15
 800b37a:	46bd      	mov	sp, r7
 800b37c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b380:	4770      	bx	lr
 800b382:	bf00      	nop
 800b384:	7f7fffff 	.word	0x7f7fffff

0800b388 <_ZNSt14numeric_limitsIfE6lowestEv>:

#if __cplusplus >= 201103L
      static constexpr float
      lowest() noexcept { return -__FLT_MAX__; }
 800b388:	b480      	push	{r7}
 800b38a:	af00      	add	r7, sp, #0
 800b38c:	f46f 0300 	mvn.w	r3, #8388608	; 0x800000
 800b390:	ee07 3a90 	vmov	s15, r3
 800b394:	eeb0 0a67 	vmov.f32	s0, s15
 800b398:	46bd      	mov	sp, r7
 800b39a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b39e:	4770      	bx	lr

0800b3a0 <_ZNK6tflite12RuntimeShape14DimsDataUpTo5DEv>:
  inline const int32_t* DimsDataUpTo5D() const { return dims_; }
 800b3a0:	b480      	push	{r7}
 800b3a2:	b083      	sub	sp, #12
 800b3a4:	af00      	add	r7, sp, #0
 800b3a6:	6078      	str	r0, [r7, #4]
 800b3a8:	687b      	ldr	r3, [r7, #4]
 800b3aa:	3304      	adds	r3, #4
 800b3ac:	4618      	mov	r0, r3
 800b3ae:	370c      	adds	r7, #12
 800b3b0:	46bd      	mov	sp, r7
 800b3b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3b6:	4770      	bx	lr

0800b3b8 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>:
    }
  }
  return offset;
}

inline int Offset(const RuntimeShape& shape, int i0, int i1, int i2, int i3) {
 800b3b8:	b580      	push	{r7, lr}
 800b3ba:	b086      	sub	sp, #24
 800b3bc:	af00      	add	r7, sp, #0
 800b3be:	60f8      	str	r0, [r7, #12]
 800b3c0:	60b9      	str	r1, [r7, #8]
 800b3c2:	607a      	str	r2, [r7, #4]
 800b3c4:	603b      	str	r3, [r7, #0]
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), 4);
 800b3c6:	68f8      	ldr	r0, [r7, #12]
 800b3c8:	f7fb fbfb 	bl	8006bc2 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 800b3cc:	4603      	mov	r3, r0
 800b3ce:	2b04      	cmp	r3, #4
 800b3d0:	d001      	beq.n	800b3d6 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii+0x1e>
 800b3d2:	f005 f9e4 	bl	801079e <abort>
  const int* dims_data = reinterpret_cast<const int*>(shape.DimsDataUpTo5D());
 800b3d6:	68f8      	ldr	r0, [r7, #12]
 800b3d8:	f7ff ffe2 	bl	800b3a0 <_ZNK6tflite12RuntimeShape14DimsDataUpTo5DEv>
 800b3dc:	6178      	str	r0, [r7, #20]
  TFLITE_DCHECK(i0 >= 0 && i0 < dims_data[0]);
 800b3de:	68bb      	ldr	r3, [r7, #8]
 800b3e0:	2b00      	cmp	r3, #0
 800b3e2:	db04      	blt.n	800b3ee <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii+0x36>
 800b3e4:	697b      	ldr	r3, [r7, #20]
 800b3e6:	681b      	ldr	r3, [r3, #0]
 800b3e8:	68ba      	ldr	r2, [r7, #8]
 800b3ea:	429a      	cmp	r2, r3
 800b3ec:	db01      	blt.n	800b3f2 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii+0x3a>
 800b3ee:	f005 f9d6 	bl	801079e <abort>
  TFLITE_DCHECK(i1 >= 0 && i1 < dims_data[1]);
 800b3f2:	687b      	ldr	r3, [r7, #4]
 800b3f4:	2b00      	cmp	r3, #0
 800b3f6:	db05      	blt.n	800b404 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii+0x4c>
 800b3f8:	697b      	ldr	r3, [r7, #20]
 800b3fa:	3304      	adds	r3, #4
 800b3fc:	681b      	ldr	r3, [r3, #0]
 800b3fe:	687a      	ldr	r2, [r7, #4]
 800b400:	429a      	cmp	r2, r3
 800b402:	db01      	blt.n	800b408 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii+0x50>
 800b404:	f005 f9cb 	bl	801079e <abort>
  TFLITE_DCHECK(i2 >= 0 && i2 < dims_data[2]);
 800b408:	683b      	ldr	r3, [r7, #0]
 800b40a:	2b00      	cmp	r3, #0
 800b40c:	db05      	blt.n	800b41a <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii+0x62>
 800b40e:	697b      	ldr	r3, [r7, #20]
 800b410:	3308      	adds	r3, #8
 800b412:	681b      	ldr	r3, [r3, #0]
 800b414:	683a      	ldr	r2, [r7, #0]
 800b416:	429a      	cmp	r2, r3
 800b418:	db01      	blt.n	800b41e <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii+0x66>
 800b41a:	f005 f9c0 	bl	801079e <abort>
  TFLITE_DCHECK(i3 >= 0 && i3 < dims_data[3]);
 800b41e:	6a3b      	ldr	r3, [r7, #32]
 800b420:	2b00      	cmp	r3, #0
 800b422:	db05      	blt.n	800b430 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii+0x78>
 800b424:	697b      	ldr	r3, [r7, #20]
 800b426:	330c      	adds	r3, #12
 800b428:	681b      	ldr	r3, [r3, #0]
 800b42a:	6a3a      	ldr	r2, [r7, #32]
 800b42c:	429a      	cmp	r2, r3
 800b42e:	db01      	blt.n	800b434 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii+0x7c>
 800b430:	f005 f9b5 	bl	801079e <abort>
  return ((i0 * dims_data[1] + i1) * dims_data[2] + i2) * dims_data[3] + i3;
 800b434:	697b      	ldr	r3, [r7, #20]
 800b436:	3304      	adds	r3, #4
 800b438:	681b      	ldr	r3, [r3, #0]
 800b43a:	68ba      	ldr	r2, [r7, #8]
 800b43c:	fb02 f203 	mul.w	r2, r2, r3
 800b440:	687b      	ldr	r3, [r7, #4]
 800b442:	4413      	add	r3, r2
 800b444:	697a      	ldr	r2, [r7, #20]
 800b446:	3208      	adds	r2, #8
 800b448:	6812      	ldr	r2, [r2, #0]
 800b44a:	fb02 f203 	mul.w	r2, r2, r3
 800b44e:	683b      	ldr	r3, [r7, #0]
 800b450:	4413      	add	r3, r2
 800b452:	697a      	ldr	r2, [r7, #20]
 800b454:	320c      	adds	r2, #12
 800b456:	6812      	ldr	r2, [r2, #0]
 800b458:	fb02 f203 	mul.w	r2, r2, r3
 800b45c:	6a3b      	ldr	r3, [r7, #32]
 800b45e:	4413      	add	r3, r2
}
 800b460:	4618      	mov	r0, r3
 800b462:	3718      	adds	r7, #24
 800b464:	46bd      	mov	sp, r7
 800b466:	bd80      	pop	{r7, pc}

0800b468 <_ZSt3maxIsERKT_S2_S2_>:
    max(const _Tp& __a, const _Tp& __b)
 800b468:	b480      	push	{r7}
 800b46a:	b083      	sub	sp, #12
 800b46c:	af00      	add	r7, sp, #0
 800b46e:	6078      	str	r0, [r7, #4]
 800b470:	6039      	str	r1, [r7, #0]
      if (__a < __b)
 800b472:	687b      	ldr	r3, [r7, #4]
 800b474:	f9b3 2000 	ldrsh.w	r2, [r3]
 800b478:	683b      	ldr	r3, [r7, #0]
 800b47a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800b47e:	429a      	cmp	r2, r3
 800b480:	da01      	bge.n	800b486 <_ZSt3maxIsERKT_S2_S2_+0x1e>
	return __b;
 800b482:	683b      	ldr	r3, [r7, #0]
 800b484:	e000      	b.n	800b488 <_ZSt3maxIsERKT_S2_S2_+0x20>
      return __a;
 800b486:	687b      	ldr	r3, [r7, #4]
    }
 800b488:	4618      	mov	r0, r3
 800b48a:	370c      	adds	r7, #12
 800b48c:	46bd      	mov	sp, r7
 800b48e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b492:	4770      	bx	lr

0800b494 <_ZN6tflite28ActivationFunctionWithMinMaxIfEET_S1_S1_S1_>:
inline T ActivationFunctionWithMinMax(T x, T output_activation_min,
 800b494:	b580      	push	{r7, lr}
 800b496:	b084      	sub	sp, #16
 800b498:	af00      	add	r7, sp, #0
 800b49a:	ed87 0a03 	vstr	s0, [r7, #12]
 800b49e:	edc7 0a02 	vstr	s1, [r7, #8]
 800b4a2:	ed87 1a01 	vstr	s2, [r7, #4]
  return min(max(x, output_activation_min), output_activation_max);
 800b4a6:	f107 0208 	add.w	r2, r7, #8
 800b4aa:	f107 030c 	add.w	r3, r7, #12
 800b4ae:	4611      	mov	r1, r2
 800b4b0:	4618      	mov	r0, r3
 800b4b2:	f7fa fcc5 	bl	8005e40 <_ZSt3maxIfERKT_S2_S2_>
 800b4b6:	4602      	mov	r2, r0
 800b4b8:	1d3b      	adds	r3, r7, #4
 800b4ba:	4619      	mov	r1, r3
 800b4bc:	4610      	mov	r0, r2
 800b4be:	f7fa fca6 	bl	8005e0e <_ZSt3minIfERKT_S2_S2_>
 800b4c2:	4603      	mov	r3, r0
 800b4c4:	681b      	ldr	r3, [r3, #0]
 800b4c6:	ee07 3a90 	vmov	s15, r3
}
 800b4ca:	eeb0 0a67 	vmov.f32	s0, s15
 800b4ce:	3710      	adds	r7, #16
 800b4d0:	46bd      	mov	sp, r7
 800b4d2:	bd80      	pop	{r7, pc}

0800b4d4 <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_>:
                                               int32_t* act_max);

// Calculates the useful range of an activation layer given its activation
// tensor.a
template <typename T>
void CalculateActivationRange(TfLiteFusedActivation activation,
 800b4d4:	b580      	push	{r7, lr}
 800b4d6:	b084      	sub	sp, #16
 800b4d8:	af00      	add	r7, sp, #0
 800b4da:	4603      	mov	r3, r0
 800b4dc:	60b9      	str	r1, [r7, #8]
 800b4de:	607a      	str	r2, [r7, #4]
 800b4e0:	73fb      	strb	r3, [r7, #15]
                              T* activation_min, T* activation_max) {
  if (activation == kTfLiteActRelu) {
 800b4e2:	7bfb      	ldrb	r3, [r7, #15]
 800b4e4:	2b01      	cmp	r3, #1
 800b4e6:	d10b      	bne.n	800b500 <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_+0x2c>
    *activation_min = 0;
 800b4e8:	68bb      	ldr	r3, [r7, #8]
 800b4ea:	f04f 0200 	mov.w	r2, #0
 800b4ee:	601a      	str	r2, [r3, #0]
    *activation_max = std::numeric_limits<T>::max();
 800b4f0:	f7ff ff3c 	bl	800b36c <_ZNSt14numeric_limitsIfE3maxEv>
 800b4f4:	eef0 7a40 	vmov.f32	s15, s0
 800b4f8:	687b      	ldr	r3, [r7, #4]
 800b4fa:	edc3 7a00 	vstr	s15, [r3]
    *activation_max = 1;
  } else {
    *activation_min = std::numeric_limits<T>::lowest();
    *activation_max = std::numeric_limits<T>::max();
  }
}
 800b4fe:	e023      	b.n	800b548 <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_+0x74>
  } else if (activation == kTfLiteActRelu6) {
 800b500:	7bfb      	ldrb	r3, [r7, #15]
 800b502:	2b03      	cmp	r3, #3
 800b504:	d107      	bne.n	800b516 <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_+0x42>
    *activation_min = 0;
 800b506:	68bb      	ldr	r3, [r7, #8]
 800b508:	f04f 0200 	mov.w	r2, #0
 800b50c:	601a      	str	r2, [r3, #0]
    *activation_max = 6;
 800b50e:	687b      	ldr	r3, [r7, #4]
 800b510:	4a0f      	ldr	r2, [pc, #60]	; (800b550 <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_+0x7c>)
 800b512:	601a      	str	r2, [r3, #0]
}
 800b514:	e018      	b.n	800b548 <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_+0x74>
  } else if (activation == kTfLiteActReluN1To1) {
 800b516:	7bfb      	ldrb	r3, [r7, #15]
 800b518:	2b02      	cmp	r3, #2
 800b51a:	d107      	bne.n	800b52c <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_+0x58>
    *activation_min = -1;
 800b51c:	68bb      	ldr	r3, [r7, #8]
 800b51e:	4a0d      	ldr	r2, [pc, #52]	; (800b554 <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_+0x80>)
 800b520:	601a      	str	r2, [r3, #0]
    *activation_max = 1;
 800b522:	687b      	ldr	r3, [r7, #4]
 800b524:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800b528:	601a      	str	r2, [r3, #0]
}
 800b52a:	e00d      	b.n	800b548 <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_+0x74>
    *activation_min = std::numeric_limits<T>::lowest();
 800b52c:	f7ff ff2c 	bl	800b388 <_ZNSt14numeric_limitsIfE6lowestEv>
 800b530:	eef0 7a40 	vmov.f32	s15, s0
 800b534:	68bb      	ldr	r3, [r7, #8]
 800b536:	edc3 7a00 	vstr	s15, [r3]
    *activation_max = std::numeric_limits<T>::max();
 800b53a:	f7ff ff17 	bl	800b36c <_ZNSt14numeric_limitsIfE3maxEv>
 800b53e:	eef0 7a40 	vmov.f32	s15, s0
 800b542:	687b      	ldr	r3, [r7, #4]
 800b544:	edc3 7a00 	vstr	s15, [r3]
}
 800b548:	bf00      	nop
 800b54a:	3710      	adds	r7, #16
 800b54c:	46bd      	mov	sp, r7
 800b54e:	bd80      	pop	{r7, pc}
 800b550:	40c00000 	.word	0x40c00000
 800b554:	bf800000 	.word	0xbf800000

0800b558 <_ZN6tflite5micro13GetTensorDataIsEEPKT_PK16TfLiteEvalTensor>:
const T* GetTensorData(const TfLiteEvalTensor* tensor) {
 800b558:	b580      	push	{r7, lr}
 800b55a:	b082      	sub	sp, #8
 800b55c:	af00      	add	r7, sp, #0
 800b55e:	6078      	str	r0, [r7, #4]
  TFLITE_DCHECK(tensor != nullptr);
 800b560:	687b      	ldr	r3, [r7, #4]
 800b562:	2b00      	cmp	r3, #0
 800b564:	d101      	bne.n	800b56a <_ZN6tflite5micro13GetTensorDataIsEEPKT_PK16TfLiteEvalTensor+0x12>
 800b566:	f005 f91a 	bl	801079e <abort>
  return reinterpret_cast<const T*>(tensor->data.raw);
 800b56a:	687b      	ldr	r3, [r7, #4]
 800b56c:	681b      	ldr	r3, [r3, #0]
}
 800b56e:	4618      	mov	r0, r3
 800b570:	3708      	adds	r7, #8
 800b572:	46bd      	mov	sp, r7
 800b574:	bd80      	pop	{r7, pc}

0800b576 <_ZN6tflite5micro13GetTensorDataIsEEPT_P16TfLiteEvalTensor>:
T* GetTensorData(TfLiteEvalTensor* tensor) {
 800b576:	b480      	push	{r7}
 800b578:	b083      	sub	sp, #12
 800b57a:	af00      	add	r7, sp, #0
 800b57c:	6078      	str	r0, [r7, #4]
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
 800b57e:	687b      	ldr	r3, [r7, #4]
 800b580:	2b00      	cmp	r3, #0
 800b582:	d002      	beq.n	800b58a <_ZN6tflite5micro13GetTensorDataIsEEPT_P16TfLiteEvalTensor+0x14>
 800b584:	687b      	ldr	r3, [r7, #4]
 800b586:	681b      	ldr	r3, [r3, #0]
 800b588:	e000      	b.n	800b58c <_ZN6tflite5micro13GetTensorDataIsEEPT_P16TfLiteEvalTensor+0x16>
 800b58a:	2300      	movs	r3, #0
}
 800b58c:	4618      	mov	r0, r3
 800b58e:	370c      	adds	r7, #12
 800b590:	46bd      	mov	sp, r7
 800b592:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b596:	4770      	bx	lr

0800b598 <_ZN6tflite9NumInputsEPK10TfLiteNode>:
inline int NumInputs(const TfLiteNode* node) { return node->inputs->size; }
 800b598:	b480      	push	{r7}
 800b59a:	b083      	sub	sp, #12
 800b59c:	af00      	add	r7, sp, #0
 800b59e:	6078      	str	r0, [r7, #4]
 800b5a0:	687b      	ldr	r3, [r7, #4]
 800b5a2:	681b      	ldr	r3, [r3, #0]
 800b5a4:	681b      	ldr	r3, [r3, #0]
 800b5a6:	4618      	mov	r0, r3
 800b5a8:	370c      	adds	r7, #12
 800b5aa:	46bd      	mov	sp, r7
 800b5ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5b0:	4770      	bx	lr

0800b5b2 <_ZN6tflite10NumOutputsEPK10TfLiteNode>:
inline int NumOutputs(const TfLiteNode* node) { return node->outputs->size; }
 800b5b2:	b480      	push	{r7}
 800b5b4:	b083      	sub	sp, #12
 800b5b6:	af00      	add	r7, sp, #0
 800b5b8:	6078      	str	r0, [r7, #4]
 800b5ba:	687b      	ldr	r3, [r7, #4]
 800b5bc:	685b      	ldr	r3, [r3, #4]
 800b5be:	681b      	ldr	r3, [r3, #0]
 800b5c0:	4618      	mov	r0, r3
 800b5c2:	370c      	adds	r7, #12
 800b5c4:	46bd      	mov	sp, r7
 800b5c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5ca:	4770      	bx	lr

0800b5cc <_ZN6tflite5micro13GetTensorDataIlEEPKT_PK16TfLiteEvalTensor>:
const T* GetTensorData(const TfLiteEvalTensor* tensor) {
 800b5cc:	b580      	push	{r7, lr}
 800b5ce:	b082      	sub	sp, #8
 800b5d0:	af00      	add	r7, sp, #0
 800b5d2:	6078      	str	r0, [r7, #4]
  TFLITE_DCHECK(tensor != nullptr);
 800b5d4:	687b      	ldr	r3, [r7, #4]
 800b5d6:	2b00      	cmp	r3, #0
 800b5d8:	d101      	bne.n	800b5de <_ZN6tflite5micro13GetTensorDataIlEEPKT_PK16TfLiteEvalTensor+0x12>
 800b5da:	f005 f8e0 	bl	801079e <abort>
  return reinterpret_cast<const T*>(tensor->data.raw);
 800b5de:	687b      	ldr	r3, [r7, #4]
 800b5e0:	681b      	ldr	r3, [r3, #0]
}
 800b5e2:	4618      	mov	r0, r3
 800b5e4:	3708      	adds	r7, #8
 800b5e6:	46bd      	mov	sp, r7
 800b5e8:	bd80      	pop	{r7, pc}

0800b5ea <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>:
  return MatchingArraySize(array1, index1, args...);
}

// Get common shape dim, DCHECKing that they all agree.
inline int MatchingDim(const RuntimeShape& shape1, int index1,
                       const RuntimeShape& shape2, int index2) {
 800b5ea:	b590      	push	{r4, r7, lr}
 800b5ec:	b087      	sub	sp, #28
 800b5ee:	af00      	add	r7, sp, #0
 800b5f0:	60f8      	str	r0, [r7, #12]
 800b5f2:	60b9      	str	r1, [r7, #8]
 800b5f4:	607a      	str	r2, [r7, #4]
 800b5f6:	603b      	str	r3, [r7, #0]
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
 800b5f8:	68b9      	ldr	r1, [r7, #8]
 800b5fa:	68f8      	ldr	r0, [r7, #12]
 800b5fc:	f7ff fd46 	bl	800b08c <_ZNK6tflite12RuntimeShape4DimsEi>
 800b600:	4604      	mov	r4, r0
 800b602:	6839      	ldr	r1, [r7, #0]
 800b604:	6878      	ldr	r0, [r7, #4]
 800b606:	f7ff fd41 	bl	800b08c <_ZNK6tflite12RuntimeShape4DimsEi>
 800b60a:	4603      	mov	r3, r0
 800b60c:	429c      	cmp	r4, r3
 800b60e:	d001      	beq.n	800b614 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i+0x2a>
 800b610:	f005 f8c5 	bl	801079e <abort>
  return std::min(shape1.Dims(index1), shape2.Dims(index2));
 800b614:	68b9      	ldr	r1, [r7, #8]
 800b616:	68f8      	ldr	r0, [r7, #12]
 800b618:	f7ff fd38 	bl	800b08c <_ZNK6tflite12RuntimeShape4DimsEi>
 800b61c:	4603      	mov	r3, r0
 800b61e:	613b      	str	r3, [r7, #16]
 800b620:	6839      	ldr	r1, [r7, #0]
 800b622:	6878      	ldr	r0, [r7, #4]
 800b624:	f7ff fd32 	bl	800b08c <_ZNK6tflite12RuntimeShape4DimsEi>
 800b628:	4603      	mov	r3, r0
 800b62a:	617b      	str	r3, [r7, #20]
 800b62c:	f107 0214 	add.w	r2, r7, #20
 800b630:	f107 0310 	add.w	r3, r7, #16
 800b634:	4611      	mov	r1, r2
 800b636:	4618      	mov	r0, r3
 800b638:	f7fb f914 	bl	8006864 <_ZSt3minIlERKT_S2_S2_>
 800b63c:	4603      	mov	r3, r0
 800b63e:	681b      	ldr	r3, [r3, #0]
}
 800b640:	4618      	mov	r0, r3
 800b642:	371c      	adds	r7, #28
 800b644:	46bd      	mov	sp, r7
 800b646:	bd90      	pop	{r4, r7, pc}

0800b648 <_ZN6tflite24ComputePaddingWithOffsetEiiiiiPi>:

// It's not guaranteed that padding is symmetric. It's important to keep
// offset for algorithms need all paddings.
inline int ComputePaddingWithOffset(int stride, int dilation_rate, int in_size,
                                    int filter_size, int out_size,
                                    int* offset) {
 800b648:	b480      	push	{r7}
 800b64a:	b087      	sub	sp, #28
 800b64c:	af00      	add	r7, sp, #0
 800b64e:	60f8      	str	r0, [r7, #12]
 800b650:	60b9      	str	r1, [r7, #8]
 800b652:	607a      	str	r2, [r7, #4]
 800b654:	603b      	str	r3, [r7, #0]
  int effective_filter_size = (filter_size - 1) * dilation_rate + 1;
 800b656:	683b      	ldr	r3, [r7, #0]
 800b658:	3b01      	subs	r3, #1
 800b65a:	68ba      	ldr	r2, [r7, #8]
 800b65c:	fb02 f303 	mul.w	r3, r2, r3
 800b660:	3301      	adds	r3, #1
 800b662:	617b      	str	r3, [r7, #20]
  int total_padding =
      ((out_size - 1) * stride + effective_filter_size - in_size);
 800b664:	6a3b      	ldr	r3, [r7, #32]
 800b666:	3b01      	subs	r3, #1
 800b668:	68fa      	ldr	r2, [r7, #12]
 800b66a:	fb02 f203 	mul.w	r2, r2, r3
 800b66e:	697b      	ldr	r3, [r7, #20]
 800b670:	441a      	add	r2, r3
  int total_padding =
 800b672:	687b      	ldr	r3, [r7, #4]
 800b674:	1ad3      	subs	r3, r2, r3
 800b676:	613b      	str	r3, [r7, #16]
  total_padding = total_padding > 0 ? total_padding : 0;
 800b678:	693b      	ldr	r3, [r7, #16]
 800b67a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800b67e:	613b      	str	r3, [r7, #16]
  *offset = total_padding % 2;
 800b680:	693b      	ldr	r3, [r7, #16]
 800b682:	2b00      	cmp	r3, #0
 800b684:	f003 0301 	and.w	r3, r3, #1
 800b688:	bfb8      	it	lt
 800b68a:	425b      	neglt	r3, r3
 800b68c:	461a      	mov	r2, r3
 800b68e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b690:	601a      	str	r2, [r3, #0]
  return total_padding / 2;
 800b692:	693b      	ldr	r3, [r7, #16]
 800b694:	0fda      	lsrs	r2, r3, #31
 800b696:	4413      	add	r3, r2
 800b698:	105b      	asrs	r3, r3, #1
}
 800b69a:	4618      	mov	r0, r3
 800b69c:	371c      	adds	r7, #28
 800b69e:	46bd      	mov	sp, r7
 800b6a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6a4:	4770      	bx	lr

0800b6a6 <_ZN6tflite14ComputeOutSizeE13TfLitePaddingiiii>:

// Matching GetWindowedOutputSize in TensorFlow.
inline int ComputeOutSize(TfLitePadding padding, int image_size,
                          int filter_size, int stride, int dilation_rate = 1) {
 800b6a6:	b480      	push	{r7}
 800b6a8:	b087      	sub	sp, #28
 800b6aa:	af00      	add	r7, sp, #0
 800b6ac:	60b9      	str	r1, [r7, #8]
 800b6ae:	607a      	str	r2, [r7, #4]
 800b6b0:	603b      	str	r3, [r7, #0]
 800b6b2:	4603      	mov	r3, r0
 800b6b4:	73fb      	strb	r3, [r7, #15]
  int effective_filter_size = (filter_size - 1) * dilation_rate + 1;
 800b6b6:	687b      	ldr	r3, [r7, #4]
 800b6b8:	3b01      	subs	r3, #1
 800b6ba:	6a3a      	ldr	r2, [r7, #32]
 800b6bc:	fb02 f303 	mul.w	r3, r2, r3
 800b6c0:	3301      	adds	r3, #1
 800b6c2:	617b      	str	r3, [r7, #20]

  // TODO(b/186448822): This uses 0 since the function has no other way to
  // report error case
  if (stride == 0) return 0;
 800b6c4:	683b      	ldr	r3, [r7, #0]
 800b6c6:	2b00      	cmp	r3, #0
 800b6c8:	d101      	bne.n	800b6ce <_ZN6tflite14ComputeOutSizeE13TfLitePaddingiiii+0x28>
 800b6ca:	2300      	movs	r3, #0
 800b6cc:	e017      	b.n	800b6fe <_ZN6tflite14ComputeOutSizeE13TfLitePaddingiiii+0x58>

  switch (padding) {
 800b6ce:	7bfb      	ldrb	r3, [r7, #15]
 800b6d0:	2b01      	cmp	r3, #1
 800b6d2:	d002      	beq.n	800b6da <_ZN6tflite14ComputeOutSizeE13TfLitePaddingiiii+0x34>
 800b6d4:	2b02      	cmp	r3, #2
 800b6d6:	d008      	beq.n	800b6ea <_ZN6tflite14ComputeOutSizeE13TfLitePaddingiiii+0x44>
 800b6d8:	e010      	b.n	800b6fc <_ZN6tflite14ComputeOutSizeE13TfLitePaddingiiii+0x56>
    case kTfLitePaddingSame:
      return (image_size + stride - 1) / stride;
 800b6da:	68ba      	ldr	r2, [r7, #8]
 800b6dc:	683b      	ldr	r3, [r7, #0]
 800b6de:	4413      	add	r3, r2
 800b6e0:	1e5a      	subs	r2, r3, #1
 800b6e2:	683b      	ldr	r3, [r7, #0]
 800b6e4:	fb92 f3f3 	sdiv	r3, r2, r3
 800b6e8:	e009      	b.n	800b6fe <_ZN6tflite14ComputeOutSizeE13TfLitePaddingiiii+0x58>
    case kTfLitePaddingValid:
      return (image_size + stride - effective_filter_size) / stride;
 800b6ea:	68ba      	ldr	r2, [r7, #8]
 800b6ec:	683b      	ldr	r3, [r7, #0]
 800b6ee:	441a      	add	r2, r3
 800b6f0:	697b      	ldr	r3, [r7, #20]
 800b6f2:	1ad2      	subs	r2, r2, r3
 800b6f4:	683b      	ldr	r3, [r7, #0]
 800b6f6:	fb92 f3f3 	sdiv	r3, r2, r3
 800b6fa:	e000      	b.n	800b6fe <_ZN6tflite14ComputeOutSizeE13TfLitePaddingiiii+0x58>
    default:
      return 0;
 800b6fc:	2300      	movs	r3, #0
  }
}
 800b6fe:	4618      	mov	r0, r3
 800b700:	371c      	adds	r7, #28
 800b702:	46bd      	mov	sp, r7
 800b704:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b708:	4770      	bx	lr

0800b70a <_ZN6tflite25ComputePaddingHeightWidthEiiiiiiii13TfLitePaddingPiS1_>:

inline TfLitePaddingValues ComputePaddingHeightWidth(
    int stride_height, int stride_width, int dilation_rate_height,
    int dilation_rate_width, int in_height, int in_width, int filter_height,
    int filter_width, TfLitePadding padding, int* out_height, int* out_width) {
 800b70a:	b580      	push	{r7, lr}
 800b70c:	b088      	sub	sp, #32
 800b70e:	af02      	add	r7, sp, #8
 800b710:	60f8      	str	r0, [r7, #12]
 800b712:	60b9      	str	r1, [r7, #8]
 800b714:	607a      	str	r2, [r7, #4]
 800b716:	603b      	str	r3, [r7, #0]
  *out_width = ComputeOutSize(padding, in_width, filter_width, stride_width,
 800b718:	f897 0034 	ldrb.w	r0, [r7, #52]	; 0x34
 800b71c:	6a3b      	ldr	r3, [r7, #32]
 800b71e:	9300      	str	r3, [sp, #0]
 800b720:	687b      	ldr	r3, [r7, #4]
 800b722:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b724:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b726:	f7ff ffbe 	bl	800b6a6 <_ZN6tflite14ComputeOutSizeE13TfLitePaddingiiii>
 800b72a:	4602      	mov	r2, r0
 800b72c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b72e:	601a      	str	r2, [r3, #0]
                              dilation_rate_width);
  *out_height = ComputeOutSize(padding, in_height, filter_height, stride_height,
 800b730:	f897 0034 	ldrb.w	r0, [r7, #52]	; 0x34
 800b734:	683b      	ldr	r3, [r7, #0]
 800b736:	9300      	str	r3, [sp, #0]
 800b738:	68bb      	ldr	r3, [r7, #8]
 800b73a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b73c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b73e:	f7ff ffb2 	bl	800b6a6 <_ZN6tflite14ComputeOutSizeE13TfLitePaddingiiii>
 800b742:	4602      	mov	r2, r0
 800b744:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b746:	601a      	str	r2, [r3, #0]
                               dilation_rate_height);

  TfLitePaddingValues padding_values;
  int offset = 0;
 800b748:	2300      	movs	r3, #0
 800b74a:	617b      	str	r3, [r7, #20]
  padding_values.height =
      ComputePaddingWithOffset(stride_height, dilation_rate_height, in_height,
 800b74c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b74e:	681b      	ldr	r3, [r3, #0]
 800b750:	f107 0214 	add.w	r2, r7, #20
 800b754:	9201      	str	r2, [sp, #4]
 800b756:	9300      	str	r3, [sp, #0]
 800b758:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b75a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b75c:	6839      	ldr	r1, [r7, #0]
 800b75e:	68b8      	ldr	r0, [r7, #8]
 800b760:	f7ff ff72 	bl	800b648 <_ZN6tflite24ComputePaddingWithOffsetEiiiiiPi>
 800b764:	4602      	mov	r2, r0
  padding_values.height =
 800b766:	68fb      	ldr	r3, [r7, #12]
 800b768:	605a      	str	r2, [r3, #4]
                               filter_height, *out_height, &offset);
  padding_values.height_offset = offset;
 800b76a:	697a      	ldr	r2, [r7, #20]
 800b76c:	68fb      	ldr	r3, [r7, #12]
 800b76e:	60da      	str	r2, [r3, #12]
  padding_values.width =
      ComputePaddingWithOffset(stride_width, dilation_rate_width, in_width,
 800b770:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b772:	681b      	ldr	r3, [r3, #0]
 800b774:	f107 0214 	add.w	r2, r7, #20
 800b778:	9201      	str	r2, [sp, #4]
 800b77a:	9300      	str	r3, [sp, #0]
 800b77c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b77e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b780:	6a39      	ldr	r1, [r7, #32]
 800b782:	6878      	ldr	r0, [r7, #4]
 800b784:	f7ff ff60 	bl	800b648 <_ZN6tflite24ComputePaddingWithOffsetEiiiiiPi>
 800b788:	4602      	mov	r2, r0
  padding_values.width =
 800b78a:	68fb      	ldr	r3, [r7, #12]
 800b78c:	601a      	str	r2, [r3, #0]
                               filter_width, *out_width, &offset);
  padding_values.width_offset = offset;
 800b78e:	697a      	ldr	r2, [r7, #20]
 800b790:	68fb      	ldr	r3, [r7, #12]
 800b792:	609a      	str	r2, [r3, #8]
  return padding_values;
 800b794:	bf00      	nop
}
 800b796:	68f8      	ldr	r0, [r7, #12]
 800b798:	3718      	adds	r7, #24
 800b79a:	46bd      	mov	sp, r7
 800b79c:	bd80      	pop	{r7, pc}

0800b79e <_ZN6tflite11NumElementsEPK12TfLiteTensor>:
inline int64_t NumElements(const TfLiteTensor* t) {
 800b79e:	b580      	push	{r7, lr}
 800b7a0:	b082      	sub	sp, #8
 800b7a2:	af00      	add	r7, sp, #0
 800b7a4:	6078      	str	r0, [r7, #4]
  return NumElements(t->dims);
 800b7a6:	687b      	ldr	r3, [r7, #4]
 800b7a8:	689b      	ldr	r3, [r3, #8]
 800b7aa:	4618      	mov	r0, r3
 800b7ac:	f7ff fb38 	bl	800ae20 <_ZN6tflite11NumElementsEPK14TfLiteIntArray>
 800b7b0:	4602      	mov	r2, r0
 800b7b2:	460b      	mov	r3, r1
}
 800b7b4:	4610      	mov	r0, r2
 800b7b6:	4619      	mov	r1, r3
 800b7b8:	3708      	adds	r7, #8
 800b7ba:	46bd      	mov	sp, r7
 800b7bc:	bd80      	pop	{r7, pc}

0800b7be <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf>:
inline void DepthwiseConv(
    const DepthwiseParams& params, const RuntimeShape& input_shape,
    const float* input_data, const RuntimeShape& filter_shape,
    const float* filter_data, const RuntimeShape& bias_shape,
    const float* bias_data, const RuntimeShape& output_shape,
    float* output_data) {
 800b7be:	b590      	push	{r4, r7, lr}
 800b7c0:	ed2d 8b02 	vpush	{d8}
 800b7c4:	b0a9      	sub	sp, #164	; 0xa4
 800b7c6:	af02      	add	r7, sp, #8
 800b7c8:	60f8      	str	r0, [r7, #12]
 800b7ca:	60b9      	str	r1, [r7, #8]
 800b7cc:	607a      	str	r2, [r7, #4]
 800b7ce:	603b      	str	r3, [r7, #0]
  const int stride_width = params.stride_width;
 800b7d0:	68fb      	ldr	r3, [r7, #12]
 800b7d2:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800b7d6:	673b      	str	r3, [r7, #112]	; 0x70
  const int stride_height = params.stride_height;
 800b7d8:	68fb      	ldr	r3, [r7, #12]
 800b7da:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 800b7de:	66fb      	str	r3, [r7, #108]	; 0x6c
  const int dilation_width_factor = params.dilation_width_factor;
 800b7e0:	68fb      	ldr	r3, [r7, #12]
 800b7e2:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800b7e6:	66bb      	str	r3, [r7, #104]	; 0x68
  const int dilation_height_factor = params.dilation_height_factor;
 800b7e8:	68fb      	ldr	r3, [r7, #12]
 800b7ea:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 800b7ee:	667b      	str	r3, [r7, #100]	; 0x64
  const int pad_width = params.padding_values.width;
 800b7f0:	68fb      	ldr	r3, [r7, #12]
 800b7f2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800b7f6:	663b      	str	r3, [r7, #96]	; 0x60
  const int pad_height = params.padding_values.height;
 800b7f8:	68fb      	ldr	r3, [r7, #12]
 800b7fa:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800b7fe:	65fb      	str	r3, [r7, #92]	; 0x5c
  const int depth_multiplier = params.depth_multiplier;
 800b800:	68fb      	ldr	r3, [r7, #12]
 800b802:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 800b806:	65bb      	str	r3, [r7, #88]	; 0x58
  const float output_activation_min = params.float_activation_min;
 800b808:	68fb      	ldr	r3, [r7, #12]
 800b80a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b80c:	657b      	str	r3, [r7, #84]	; 0x54
  const float output_activation_max = params.float_activation_max;
 800b80e:	68fb      	ldr	r3, [r7, #12]
 800b810:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b812:	653b      	str	r3, [r7, #80]	; 0x50
  TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
 800b814:	68b8      	ldr	r0, [r7, #8]
 800b816:	f7fb f9d4 	bl	8006bc2 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 800b81a:	4603      	mov	r3, r0
 800b81c:	2b04      	cmp	r3, #4
 800b81e:	d001      	beq.n	800b824 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x66>
 800b820:	f004 ffbd 	bl	801079e <abort>
  TFLITE_DCHECK_EQ(filter_shape.DimensionsCount(), 4);
 800b824:	6838      	ldr	r0, [r7, #0]
 800b826:	f7fb f9cc 	bl	8006bc2 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 800b82a:	4603      	mov	r3, r0
 800b82c:	2b04      	cmp	r3, #4
 800b82e:	d001      	beq.n	800b834 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x76>
 800b830:	f004 ffb5 	bl	801079e <abort>
  TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 4);
 800b834:	f8d7 00bc 	ldr.w	r0, [r7, #188]	; 0xbc
 800b838:	f7fb f9c3 	bl	8006bc2 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 800b83c:	4603      	mov	r3, r0
 800b83e:	2b04      	cmp	r3, #4
 800b840:	d001      	beq.n	800b846 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x88>
 800b842:	f004 ffac 	bl	801079e <abort>

  const int batches = MatchingDim(input_shape, 0, output_shape, 0);
 800b846:	2300      	movs	r3, #0
 800b848:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800b84c:	2100      	movs	r1, #0
 800b84e:	68b8      	ldr	r0, [r7, #8]
 800b850:	f7ff fecb 	bl	800b5ea <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 800b854:	64f8      	str	r0, [r7, #76]	; 0x4c
  const int output_depth = MatchingDim(filter_shape, 3, output_shape, 3);
 800b856:	2303      	movs	r3, #3
 800b858:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800b85c:	2103      	movs	r1, #3
 800b85e:	6838      	ldr	r0, [r7, #0]
 800b860:	f7ff fec3 	bl	800b5ea <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 800b864:	64b8      	str	r0, [r7, #72]	; 0x48
  const int input_height = input_shape.Dims(1);
 800b866:	2101      	movs	r1, #1
 800b868:	68b8      	ldr	r0, [r7, #8]
 800b86a:	f7ff fc0f 	bl	800b08c <_ZNK6tflite12RuntimeShape4DimsEi>
 800b86e:	6478      	str	r0, [r7, #68]	; 0x44
  const int input_width = input_shape.Dims(2);
 800b870:	2102      	movs	r1, #2
 800b872:	68b8      	ldr	r0, [r7, #8]
 800b874:	f7ff fc0a 	bl	800b08c <_ZNK6tflite12RuntimeShape4DimsEi>
 800b878:	6438      	str	r0, [r7, #64]	; 0x40
  const int input_depth = input_shape.Dims(3);
 800b87a:	2103      	movs	r1, #3
 800b87c:	68b8      	ldr	r0, [r7, #8]
 800b87e:	f7ff fc05 	bl	800b08c <_ZNK6tflite12RuntimeShape4DimsEi>
 800b882:	63f8      	str	r0, [r7, #60]	; 0x3c
  const int filter_height = filter_shape.Dims(1);
 800b884:	2101      	movs	r1, #1
 800b886:	6838      	ldr	r0, [r7, #0]
 800b888:	f7ff fc00 	bl	800b08c <_ZNK6tflite12RuntimeShape4DimsEi>
 800b88c:	63b8      	str	r0, [r7, #56]	; 0x38
  const int filter_width = filter_shape.Dims(2);
 800b88e:	2102      	movs	r1, #2
 800b890:	6838      	ldr	r0, [r7, #0]
 800b892:	f7ff fbfb 	bl	800b08c <_ZNK6tflite12RuntimeShape4DimsEi>
 800b896:	6378      	str	r0, [r7, #52]	; 0x34
  const int output_height = output_shape.Dims(1);
 800b898:	2101      	movs	r1, #1
 800b89a:	f8d7 00bc 	ldr.w	r0, [r7, #188]	; 0xbc
 800b89e:	f7ff fbf5 	bl	800b08c <_ZNK6tflite12RuntimeShape4DimsEi>
 800b8a2:	6338      	str	r0, [r7, #48]	; 0x30
  const int output_width = output_shape.Dims(2);
 800b8a4:	2102      	movs	r1, #2
 800b8a6:	f8d7 00bc 	ldr.w	r0, [r7, #188]	; 0xbc
 800b8aa:	f7ff fbef 	bl	800b08c <_ZNK6tflite12RuntimeShape4DimsEi>
 800b8ae:	62f8      	str	r0, [r7, #44]	; 0x2c
  TFLITE_DCHECK_EQ(output_depth, input_depth * depth_multiplier);
 800b8b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b8b2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800b8b4:	fb02 f303 	mul.w	r3, r2, r3
 800b8b8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b8ba:	429a      	cmp	r2, r3
 800b8bc:	d001      	beq.n	800b8c2 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x104>
 800b8be:	f004 ff6e 	bl	801079e <abort>
  TFLITE_DCHECK_EQ(bias_shape.FlatSize(), output_depth);
 800b8c2:	f8d7 00b4 	ldr.w	r0, [r7, #180]	; 0xb4
 800b8c6:	f7ff fc19 	bl	800b0fc <_ZNK6tflite12RuntimeShape8FlatSizeEv>
 800b8ca:	4602      	mov	r2, r0
 800b8cc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b8ce:	4293      	cmp	r3, r2
 800b8d0:	d001      	beq.n	800b8d6 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x118>
 800b8d2:	f004 ff64 	bl	801079e <abort>

  for (int b = 0; b < batches; ++b) {
 800b8d6:	2300      	movs	r3, #0
 800b8d8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800b8dc:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800b8e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b8e2:	429a      	cmp	r2, r3
 800b8e4:	f280 80eb 	bge.w	800babe <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x300>
    for (int out_y = 0; out_y < output_height; ++out_y) {
 800b8e8:	2300      	movs	r3, #0
 800b8ea:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800b8ee:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 800b8f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b8f4:	429a      	cmp	r2, r3
 800b8f6:	f280 80dc 	bge.w	800bab2 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x2f4>
      for (int out_x = 0; out_x < output_width; ++out_x) {
 800b8fa:	2300      	movs	r3, #0
 800b8fc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800b900:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800b904:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b906:	429a      	cmp	r2, r3
 800b908:	f280 80cd 	bge.w	800baa6 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x2e8>
        for (int ic = 0; ic < input_depth; ++ic) {
 800b90c:	2300      	movs	r3, #0
 800b90e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800b912:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800b916:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b918:	429a      	cmp	r2, r3
 800b91a:	f280 80be 	bge.w	800ba9a <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x2dc>
          for (int m = 0; m < depth_multiplier; m++) {
 800b91e:	2300      	movs	r3, #0
 800b920:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800b924:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800b928:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b92a:	429a      	cmp	r2, r3
 800b92c:	f280 80af 	bge.w	800ba8e <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x2d0>
            const int oc = m + ic * depth_multiplier;
 800b930:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800b934:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800b936:	fb02 f303 	mul.w	r3, r2, r3
 800b93a:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800b93e:	4413      	add	r3, r2
 800b940:	62bb      	str	r3, [r7, #40]	; 0x28
            const int in_x_origin = (out_x * stride_width) - pad_width;
 800b942:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b946:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800b948:	fb02 f203 	mul.w	r2, r2, r3
 800b94c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b94e:	1ad3      	subs	r3, r2, r3
 800b950:	627b      	str	r3, [r7, #36]	; 0x24
            const int in_y_origin = (out_y * stride_height) - pad_height;
 800b952:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800b956:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800b958:	fb02 f203 	mul.w	r2, r2, r3
 800b95c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b95e:	1ad3      	subs	r3, r2, r3
 800b960:	623b      	str	r3, [r7, #32]
            float total = 0.f;
 800b962:	f04f 0300 	mov.w	r3, #0
 800b966:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
            for (int filter_y = 0; filter_y < filter_height; ++filter_y) {
 800b96a:	2300      	movs	r3, #0
 800b96c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800b96e:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800b970:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b972:	429a      	cmp	r2, r3
 800b974:	da54      	bge.n	800ba20 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x262>
              for (int filter_x = 0; filter_x < filter_width; ++filter_x) {
 800b976:	2300      	movs	r3, #0
 800b978:	67bb      	str	r3, [r7, #120]	; 0x78
 800b97a:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800b97c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b97e:	429a      	cmp	r2, r3
 800b980:	da4a      	bge.n	800ba18 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x25a>
                const int in_x = in_x_origin + dilation_width_factor * filter_x;
 800b982:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800b984:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800b986:	fb02 f303 	mul.w	r3, r2, r3
 800b98a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b98c:	4413      	add	r3, r2
 800b98e:	61fb      	str	r3, [r7, #28]
                const int in_y =
                    in_y_origin + dilation_height_factor * filter_y;
 800b990:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b992:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800b994:	fb02 f303 	mul.w	r3, r2, r3
                const int in_y =
 800b998:	6a3a      	ldr	r2, [r7, #32]
 800b99a:	4413      	add	r3, r2
 800b99c:	61bb      	str	r3, [r7, #24]
                // If the location is outside the bounds of the input image,
                // use zero as a default value.
                if ((in_x >= 0) && (in_x < input_width) && (in_y >= 0) &&
 800b99e:	69fb      	ldr	r3, [r7, #28]
 800b9a0:	2b00      	cmp	r3, #0
 800b9a2:	db35      	blt.n	800ba10 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x252>
 800b9a4:	69fa      	ldr	r2, [r7, #28]
 800b9a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b9a8:	429a      	cmp	r2, r3
 800b9aa:	da31      	bge.n	800ba10 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x252>
 800b9ac:	69bb      	ldr	r3, [r7, #24]
 800b9ae:	2b00      	cmp	r3, #0
 800b9b0:	db2e      	blt.n	800ba10 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x252>
 800b9b2:	69ba      	ldr	r2, [r7, #24]
 800b9b4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b9b6:	429a      	cmp	r2, r3
 800b9b8:	da2a      	bge.n	800ba10 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x252>
                    (in_y < input_height)) {
                  float input_value =
                      input_data[Offset(input_shape, b, in_y, in_x, ic)];
 800b9ba:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800b9be:	9300      	str	r3, [sp, #0]
 800b9c0:	69fb      	ldr	r3, [r7, #28]
 800b9c2:	69ba      	ldr	r2, [r7, #24]
 800b9c4:	f8d7 1094 	ldr.w	r1, [r7, #148]	; 0x94
 800b9c8:	68b8      	ldr	r0, [r7, #8]
 800b9ca:	f7ff fcf5 	bl	800b3b8 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
 800b9ce:	4603      	mov	r3, r0
 800b9d0:	009b      	lsls	r3, r3, #2
 800b9d2:	687a      	ldr	r2, [r7, #4]
 800b9d4:	4413      	add	r3, r2
 800b9d6:	681b      	ldr	r3, [r3, #0]
 800b9d8:	617b      	str	r3, [r7, #20]
                  float filter_value = filter_data[Offset(
 800b9da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b9dc:	9300      	str	r3, [sp, #0]
 800b9de:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b9e0:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800b9e2:	2100      	movs	r1, #0
 800b9e4:	6838      	ldr	r0, [r7, #0]
 800b9e6:	f7ff fce7 	bl	800b3b8 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
 800b9ea:	4603      	mov	r3, r0
                      filter_shape, 0, filter_y, filter_x, oc)];
 800b9ec:	009b      	lsls	r3, r3, #2
 800b9ee:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800b9f2:	4413      	add	r3, r2
 800b9f4:	681b      	ldr	r3, [r3, #0]
 800b9f6:	613b      	str	r3, [r7, #16]
                  total += (input_value * filter_value);
 800b9f8:	ed97 7a05 	vldr	s14, [r7, #20]
 800b9fc:	edd7 7a04 	vldr	s15, [r7, #16]
 800ba00:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ba04:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 800ba08:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ba0c:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
              for (int filter_x = 0; filter_x < filter_width; ++filter_x) {
 800ba10:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ba12:	3301      	adds	r3, #1
 800ba14:	67bb      	str	r3, [r7, #120]	; 0x78
 800ba16:	e7b0      	b.n	800b97a <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x1bc>
            for (int filter_y = 0; filter_y < filter_height; ++filter_y) {
 800ba18:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800ba1a:	3301      	adds	r3, #1
 800ba1c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800ba1e:	e7a6      	b.n	800b96e <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x1b0>
                }
              }
            }
            float bias_value = 0.0f;
 800ba20:	f04f 0300 	mov.w	r3, #0
 800ba24:	677b      	str	r3, [r7, #116]	; 0x74
            if (bias_data) {
 800ba26:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800ba2a:	2b00      	cmp	r3, #0
 800ba2c:	d006      	beq.n	800ba3c <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x27e>
              bias_value = bias_data[oc];
 800ba2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba30:	009b      	lsls	r3, r3, #2
 800ba32:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800ba36:	4413      	add	r3, r2
 800ba38:	681b      	ldr	r3, [r3, #0]
 800ba3a:	677b      	str	r3, [r7, #116]	; 0x74
            }
            output_data[Offset(output_shape, b, out_y, out_x, oc)] =
                ActivationFunctionWithMinMax(total + bias_value,
 800ba3c:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 800ba40:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 800ba44:	ee37 8a27 	vadd.f32	s16, s14, s15
            output_data[Offset(output_shape, b, out_y, out_x, oc)] =
 800ba48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba4a:	9300      	str	r3, [sp, #0]
 800ba4c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800ba50:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 800ba54:	f8d7 1094 	ldr.w	r1, [r7, #148]	; 0x94
 800ba58:	f8d7 00bc 	ldr.w	r0, [r7, #188]	; 0xbc
 800ba5c:	f7ff fcac 	bl	800b3b8 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
 800ba60:	4603      	mov	r3, r0
 800ba62:	009b      	lsls	r3, r3, #2
 800ba64:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800ba68:	18d4      	adds	r4, r2, r3
                ActivationFunctionWithMinMax(total + bias_value,
 800ba6a:	ed97 1a14 	vldr	s2, [r7, #80]	; 0x50
 800ba6e:	edd7 0a15 	vldr	s1, [r7, #84]	; 0x54
 800ba72:	eeb0 0a48 	vmov.f32	s0, s16
 800ba76:	f7ff fd0d 	bl	800b494 <_ZN6tflite28ActivationFunctionWithMinMaxIfEET_S1_S1_S1_>
 800ba7a:	eef0 7a40 	vmov.f32	s15, s0
            output_data[Offset(output_shape, b, out_y, out_x, oc)] =
 800ba7e:	edc4 7a00 	vstr	s15, [r4]
          for (int m = 0; m < depth_multiplier; m++) {
 800ba82:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800ba86:	3301      	adds	r3, #1
 800ba88:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800ba8c:	e74a      	b.n	800b924 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x166>
        for (int ic = 0; ic < input_depth; ++ic) {
 800ba8e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800ba92:	3301      	adds	r3, #1
 800ba94:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800ba98:	e73b      	b.n	800b912 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x154>
      for (int out_x = 0; out_x < output_width; ++out_x) {
 800ba9a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800ba9e:	3301      	adds	r3, #1
 800baa0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800baa4:	e72c      	b.n	800b900 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x142>
    for (int out_y = 0; out_y < output_height; ++out_y) {
 800baa6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800baaa:	3301      	adds	r3, #1
 800baac:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800bab0:	e71d      	b.n	800b8ee <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x130>
  for (int b = 0; b < batches; ++b) {
 800bab2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800bab6:	3301      	adds	r3, #1
 800bab8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800babc:	e70e      	b.n	800b8dc <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x11e>
          }
        }
      }
    }
  }
}
 800babe:	bf00      	nop
 800bac0:	379c      	adds	r7, #156	; 0x9c
 800bac2:	46bd      	mov	sp, r7
 800bac4:	ecbd 8b02 	vpop	{d8}
 800bac8:	bd90      	pop	{r4, r7, pc}

0800baca <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa>:
    const DepthwiseParams& params, const int32_t* output_multiplier,
    const int32_t* output_shift, const RuntimeShape& input_shape,
    const int8_t* input_data, const RuntimeShape& filter_shape,
    const int8_t* filter_data, const RuntimeShape& bias_shape,
    const int32_t* bias_data, const RuntimeShape& output_shape,
    int8_t* output_data) {
 800baca:	b590      	push	{r4, r7, lr}
 800bacc:	b0ab      	sub	sp, #172	; 0xac
 800bace:	af02      	add	r7, sp, #8
 800bad0:	60f8      	str	r0, [r7, #12]
 800bad2:	60b9      	str	r1, [r7, #8]
 800bad4:	607a      	str	r2, [r7, #4]
 800bad6:	603b      	str	r3, [r7, #0]
  // Get parameters.
  // TODO(b/141565753): Re-introduce ScopedProfilingLabel on Micro.
  const int stride_width = params.stride_width;
 800bad8:	68fb      	ldr	r3, [r7, #12]
 800bada:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800bade:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  const int stride_height = params.stride_height;
 800bae2:	68fb      	ldr	r3, [r7, #12]
 800bae4:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 800bae8:	67fb      	str	r3, [r7, #124]	; 0x7c
  const int dilation_width_factor = params.dilation_width_factor;
 800baea:	68fb      	ldr	r3, [r7, #12]
 800baec:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800baf0:	67bb      	str	r3, [r7, #120]	; 0x78
  const int dilation_height_factor = params.dilation_height_factor;
 800baf2:	68fb      	ldr	r3, [r7, #12]
 800baf4:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 800baf8:	677b      	str	r3, [r7, #116]	; 0x74
  const int pad_width = params.padding_values.width;
 800bafa:	68fb      	ldr	r3, [r7, #12]
 800bafc:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800bb00:	673b      	str	r3, [r7, #112]	; 0x70
  const int pad_height = params.padding_values.height;
 800bb02:	68fb      	ldr	r3, [r7, #12]
 800bb04:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800bb08:	66fb      	str	r3, [r7, #108]	; 0x6c
  const int depth_multiplier = params.depth_multiplier;
 800bb0a:	68fb      	ldr	r3, [r7, #12]
 800bb0c:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 800bb10:	66bb      	str	r3, [r7, #104]	; 0x68
  const int32_t input_offset = params.input_offset;
 800bb12:	68fb      	ldr	r3, [r7, #12]
 800bb14:	695b      	ldr	r3, [r3, #20]
 800bb16:	667b      	str	r3, [r7, #100]	; 0x64
  const int32_t output_offset = params.output_offset;
 800bb18:	68fb      	ldr	r3, [r7, #12]
 800bb1a:	69db      	ldr	r3, [r3, #28]
 800bb1c:	663b      	str	r3, [r7, #96]	; 0x60
  const int32_t output_activation_min = params.quantized_activation_min;
 800bb1e:	68fb      	ldr	r3, [r7, #12]
 800bb20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bb22:	61bb      	str	r3, [r7, #24]
  const int32_t output_activation_max = params.quantized_activation_max;
 800bb24:	68fb      	ldr	r3, [r7, #12]
 800bb26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb28:	617b      	str	r3, [r7, #20]

  // Check dimensions of the tensors.
  TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
 800bb2a:	6838      	ldr	r0, [r7, #0]
 800bb2c:	f7fb f849 	bl	8006bc2 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 800bb30:	4603      	mov	r3, r0
 800bb32:	2b04      	cmp	r3, #4
 800bb34:	d001      	beq.n	800bb3a <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x70>
 800bb36:	f004 fe32 	bl	801079e <abort>
  TFLITE_DCHECK_EQ(filter_shape.DimensionsCount(), 4);
 800bb3a:	f8d7 00b4 	ldr.w	r0, [r7, #180]	; 0xb4
 800bb3e:	f7fb f840 	bl	8006bc2 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 800bb42:	4603      	mov	r3, r0
 800bb44:	2b04      	cmp	r3, #4
 800bb46:	d001      	beq.n	800bb4c <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x82>
 800bb48:	f004 fe29 	bl	801079e <abort>
  TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 4);
 800bb4c:	f8d7 00c4 	ldr.w	r0, [r7, #196]	; 0xc4
 800bb50:	f7fb f837 	bl	8006bc2 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 800bb54:	4603      	mov	r3, r0
 800bb56:	2b04      	cmp	r3, #4
 800bb58:	d001      	beq.n	800bb5e <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x94>
 800bb5a:	f004 fe20 	bl	801079e <abort>

  TFLITE_DCHECK_LE(output_activation_min, output_activation_max);
 800bb5e:	69ba      	ldr	r2, [r7, #24]
 800bb60:	697b      	ldr	r3, [r7, #20]
 800bb62:	429a      	cmp	r2, r3
 800bb64:	dd01      	ble.n	800bb6a <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0xa0>
 800bb66:	f004 fe1a 	bl	801079e <abort>
  const int batches = MatchingDim(input_shape, 0, output_shape, 0);
 800bb6a:	2300      	movs	r3, #0
 800bb6c:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800bb70:	2100      	movs	r1, #0
 800bb72:	6838      	ldr	r0, [r7, #0]
 800bb74:	f7ff fd39 	bl	800b5ea <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 800bb78:	65f8      	str	r0, [r7, #92]	; 0x5c
  const int output_depth = MatchingDim(filter_shape, 3, output_shape, 3);
 800bb7a:	2303      	movs	r3, #3
 800bb7c:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800bb80:	2103      	movs	r1, #3
 800bb82:	f8d7 00b4 	ldr.w	r0, [r7, #180]	; 0xb4
 800bb86:	f7ff fd30 	bl	800b5ea <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 800bb8a:	65b8      	str	r0, [r7, #88]	; 0x58
  const int input_height = input_shape.Dims(1);
 800bb8c:	2101      	movs	r1, #1
 800bb8e:	6838      	ldr	r0, [r7, #0]
 800bb90:	f7ff fa7c 	bl	800b08c <_ZNK6tflite12RuntimeShape4DimsEi>
 800bb94:	6578      	str	r0, [r7, #84]	; 0x54
  const int input_width = input_shape.Dims(2);
 800bb96:	2102      	movs	r1, #2
 800bb98:	6838      	ldr	r0, [r7, #0]
 800bb9a:	f7ff fa77 	bl	800b08c <_ZNK6tflite12RuntimeShape4DimsEi>
 800bb9e:	6538      	str	r0, [r7, #80]	; 0x50
  const int input_depth = input_shape.Dims(3);
 800bba0:	2103      	movs	r1, #3
 800bba2:	6838      	ldr	r0, [r7, #0]
 800bba4:	f7ff fa72 	bl	800b08c <_ZNK6tflite12RuntimeShape4DimsEi>
 800bba8:	64f8      	str	r0, [r7, #76]	; 0x4c
  const int filter_height = filter_shape.Dims(1);
 800bbaa:	2101      	movs	r1, #1
 800bbac:	f8d7 00b4 	ldr.w	r0, [r7, #180]	; 0xb4
 800bbb0:	f7ff fa6c 	bl	800b08c <_ZNK6tflite12RuntimeShape4DimsEi>
 800bbb4:	64b8      	str	r0, [r7, #72]	; 0x48
  const int filter_width = filter_shape.Dims(2);
 800bbb6:	2102      	movs	r1, #2
 800bbb8:	f8d7 00b4 	ldr.w	r0, [r7, #180]	; 0xb4
 800bbbc:	f7ff fa66 	bl	800b08c <_ZNK6tflite12RuntimeShape4DimsEi>
 800bbc0:	6478      	str	r0, [r7, #68]	; 0x44
  const int output_height = output_shape.Dims(1);
 800bbc2:	2101      	movs	r1, #1
 800bbc4:	f8d7 00c4 	ldr.w	r0, [r7, #196]	; 0xc4
 800bbc8:	f7ff fa60 	bl	800b08c <_ZNK6tflite12RuntimeShape4DimsEi>
 800bbcc:	6438      	str	r0, [r7, #64]	; 0x40
  const int output_width = output_shape.Dims(2);
 800bbce:	2102      	movs	r1, #2
 800bbd0:	f8d7 00c4 	ldr.w	r0, [r7, #196]	; 0xc4
 800bbd4:	f7ff fa5a 	bl	800b08c <_ZNK6tflite12RuntimeShape4DimsEi>
 800bbd8:	63f8      	str	r0, [r7, #60]	; 0x3c
  TFLITE_DCHECK_EQ(output_depth, input_depth * depth_multiplier);
 800bbda:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bbdc:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800bbde:	fb02 f303 	mul.w	r3, r2, r3
 800bbe2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800bbe4:	429a      	cmp	r2, r3
 800bbe6:	d001      	beq.n	800bbec <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x122>
 800bbe8:	f004 fdd9 	bl	801079e <abort>
  TFLITE_DCHECK_EQ(bias_shape.FlatSize(), output_depth);
 800bbec:	f8d7 00bc 	ldr.w	r0, [r7, #188]	; 0xbc
 800bbf0:	f7ff fa84 	bl	800b0fc <_ZNK6tflite12RuntimeShape8FlatSizeEv>
 800bbf4:	4602      	mov	r2, r0
 800bbf6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800bbf8:	4293      	cmp	r3, r2
 800bbfa:	d001      	beq.n	800bc00 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x136>
 800bbfc:	f004 fdcf 	bl	801079e <abort>

  for (int batch = 0; batch < batches; ++batch) {
 800bc00:	2300      	movs	r3, #0
 800bc02:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800bc06:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 800bc0a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bc0c:	429a      	cmp	r2, r3
 800bc0e:	f280 811a 	bge.w	800be46 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x37c>
    for (int out_y = 0; out_y < output_height; ++out_y) {
 800bc12:	2300      	movs	r3, #0
 800bc14:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800bc18:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800bc1c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bc1e:	429a      	cmp	r2, r3
 800bc20:	f280 810b 	bge.w	800be3a <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x370>
      for (int out_x = 0; out_x < output_width; ++out_x) {
 800bc24:	2300      	movs	r3, #0
 800bc26:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800bc2a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800bc2e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bc30:	429a      	cmp	r2, r3
 800bc32:	f280 80fc 	bge.w	800be2e <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x364>
        for (int in_channel = 0; in_channel < input_depth; ++in_channel) {
 800bc36:	2300      	movs	r3, #0
 800bc38:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800bc3c:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 800bc40:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bc42:	429a      	cmp	r2, r3
 800bc44:	f280 80ed 	bge.w	800be22 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x358>
          for (int m = 0; m < depth_multiplier; ++m) {
 800bc48:	2300      	movs	r3, #0
 800bc4a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800bc4e:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800bc52:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800bc54:	429a      	cmp	r2, r3
 800bc56:	f280 80de 	bge.w	800be16 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x34c>
            const int output_channel = m + in_channel * depth_multiplier;
 800bc5a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800bc5e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800bc60:	fb02 f303 	mul.w	r3, r2, r3
 800bc64:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800bc68:	4413      	add	r3, r2
 800bc6a:	63bb      	str	r3, [r7, #56]	; 0x38
            const int in_x_origin = (out_x * stride_width) - pad_width;
 800bc6c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800bc70:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800bc74:	fb02 f203 	mul.w	r2, r2, r3
 800bc78:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800bc7a:	1ad3      	subs	r3, r2, r3
 800bc7c:	637b      	str	r3, [r7, #52]	; 0x34
            const int in_y_origin = (out_y * stride_height) - pad_height;
 800bc7e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800bc82:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800bc84:	fb02 f203 	mul.w	r2, r2, r3
 800bc88:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bc8a:	1ad3      	subs	r3, r2, r3
 800bc8c:	633b      	str	r3, [r7, #48]	; 0x30
            int32_t acc = 0;
 800bc8e:	2300      	movs	r3, #0
 800bc90:	613b      	str	r3, [r7, #16]
            for (int filter_y = 0; filter_y < filter_height; ++filter_y) {
 800bc92:	2300      	movs	r3, #0
 800bc94:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800bc98:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800bc9c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bc9e:	429a      	cmp	r2, r3
 800bca0:	da68      	bge.n	800bd74 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x2aa>
              for (int filter_x = 0; filter_x < filter_width; ++filter_x) {
 800bca2:	2300      	movs	r3, #0
 800bca4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800bca8:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800bcac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bcae:	429a      	cmp	r2, r3
 800bcb0:	da5a      	bge.n	800bd68 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x29e>
                const int in_x = in_x_origin + dilation_width_factor * filter_x;
 800bcb2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800bcb4:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800bcb8:	fb02 f303 	mul.w	r3, r2, r3
 800bcbc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800bcbe:	4413      	add	r3, r2
 800bcc0:	62fb      	str	r3, [r7, #44]	; 0x2c
                const int in_y =
                    in_y_origin + dilation_height_factor * filter_y;
 800bcc2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800bcc4:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800bcc8:	fb02 f303 	mul.w	r3, r2, r3
                const int in_y =
 800bccc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bcce:	4413      	add	r3, r2
 800bcd0:	62bb      	str	r3, [r7, #40]	; 0x28
                // Zero padding by omitting the areas outside the image.
                const bool is_point_inside_image =
                    (in_x >= 0) && (in_x < input_width) && (in_y >= 0) &&
 800bcd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bcd4:	2b00      	cmp	r3, #0
 800bcd6:	db0c      	blt.n	800bcf2 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x228>
 800bcd8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bcda:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bcdc:	429a      	cmp	r2, r3
 800bcde:	da08      	bge.n	800bcf2 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x228>
 800bce0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bce2:	2b00      	cmp	r3, #0
 800bce4:	db05      	blt.n	800bcf2 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x228>
 800bce6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bce8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bcea:	429a      	cmp	r2, r3
 800bcec:	da01      	bge.n	800bcf2 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x228>
 800bcee:	2301      	movs	r3, #1
 800bcf0:	e000      	b.n	800bcf4 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x22a>
 800bcf2:	2300      	movs	r3, #0
                const bool is_point_inside_image =
 800bcf4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                    (in_y < input_height);
                if (is_point_inside_image) {
 800bcf8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bcfc:	2b00      	cmp	r3, #0
 800bcfe:	d02d      	beq.n	800bd5c <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x292>
                  int32_t input_val = input_data[Offset(
 800bd00:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800bd04:	9300      	str	r3, [sp, #0]
 800bd06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd08:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bd0a:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
 800bd0e:	6838      	ldr	r0, [r7, #0]
 800bd10:	f7ff fb52 	bl	800b3b8 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
 800bd14:	4603      	mov	r3, r0
 800bd16:	461a      	mov	r2, r3
                      input_shape, batch, in_y, in_x, in_channel)];
 800bd18:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800bd1c:	4413      	add	r3, r2
 800bd1e:	f993 3000 	ldrsb.w	r3, [r3]
 800bd22:	623b      	str	r3, [r7, #32]
                  int32_t filter_val = filter_data[Offset(
 800bd24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd26:	9300      	str	r3, [sp, #0]
 800bd28:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800bd2c:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800bd30:	2100      	movs	r1, #0
 800bd32:	f8d7 00b4 	ldr.w	r0, [r7, #180]	; 0xb4
 800bd36:	f7ff fb3f 	bl	800b3b8 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
 800bd3a:	4603      	mov	r3, r0
 800bd3c:	461a      	mov	r2, r3
                      filter_shape, 0, filter_y, filter_x, output_channel)];
 800bd3e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800bd42:	4413      	add	r3, r2
 800bd44:	f993 3000 	ldrsb.w	r3, [r3]
 800bd48:	61fb      	str	r3, [r7, #28]
                  // long as the filter size (filter_y * filter_x * in_channel)
                  // does not exceed 2^16, which is the case in all the models
                  // we have seen so far.
                  // TODO(b/174275578): Add a check to make sure the
                  // accumulator depth is smaller than 2^16.
                  acc += filter_val * (input_val + input_offset);
 800bd4a:	6a3a      	ldr	r2, [r7, #32]
 800bd4c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800bd4e:	4413      	add	r3, r2
 800bd50:	69fa      	ldr	r2, [r7, #28]
 800bd52:	fb02 f203 	mul.w	r2, r2, r3
 800bd56:	693b      	ldr	r3, [r7, #16]
 800bd58:	4413      	add	r3, r2
 800bd5a:	613b      	str	r3, [r7, #16]
              for (int filter_x = 0; filter_x < filter_width; ++filter_x) {
 800bd5c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800bd60:	3301      	adds	r3, #1
 800bd62:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800bd66:	e79f      	b.n	800bca8 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x1de>
            for (int filter_y = 0; filter_y < filter_height; ++filter_y) {
 800bd68:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800bd6c:	3301      	adds	r3, #1
 800bd6e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800bd72:	e791      	b.n	800bc98 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x1ce>
                }
              }
            }
            if (bias_data) {
 800bd74:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800bd78:	2b00      	cmp	r3, #0
 800bd7a:	d008      	beq.n	800bd8e <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x2c4>
              acc += bias_data[output_channel];
 800bd7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd7e:	009b      	lsls	r3, r3, #2
 800bd80:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800bd84:	4413      	add	r3, r2
 800bd86:	681a      	ldr	r2, [r3, #0]
 800bd88:	693b      	ldr	r3, [r7, #16]
 800bd8a:	4413      	add	r3, r2
 800bd8c:	613b      	str	r3, [r7, #16]
            }
            acc = MultiplyByQuantizedMultiplier(
 800bd8e:	6938      	ldr	r0, [r7, #16]
                acc, output_multiplier[output_channel],
 800bd90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd92:	009b      	lsls	r3, r3, #2
 800bd94:	68ba      	ldr	r2, [r7, #8]
 800bd96:	4413      	add	r3, r2
            acc = MultiplyByQuantizedMultiplier(
 800bd98:	6819      	ldr	r1, [r3, #0]
                output_shift[output_channel]);
 800bd9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd9c:	009b      	lsls	r3, r3, #2
 800bd9e:	687a      	ldr	r2, [r7, #4]
 800bda0:	4413      	add	r3, r2
            acc = MultiplyByQuantizedMultiplier(
 800bda2:	681b      	ldr	r3, [r3, #0]
 800bda4:	461a      	mov	r2, r3
 800bda6:	f7ff f9cc 	bl	800b142 <_ZN6tflite29MultiplyByQuantizedMultiplierElli>
 800bdaa:	4603      	mov	r3, r0
 800bdac:	613b      	str	r3, [r7, #16]
            acc += output_offset;
 800bdae:	693a      	ldr	r2, [r7, #16]
 800bdb0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800bdb2:	4413      	add	r3, r2
 800bdb4:	613b      	str	r3, [r7, #16]
            acc = std::max(acc, output_activation_min);
 800bdb6:	f107 0218 	add.w	r2, r7, #24
 800bdba:	f107 0310 	add.w	r3, r7, #16
 800bdbe:	4611      	mov	r1, r2
 800bdc0:	4618      	mov	r0, r3
 800bdc2:	f7fa fd63 	bl	800688c <_ZSt3maxIlERKT_S2_S2_>
 800bdc6:	4603      	mov	r3, r0
 800bdc8:	681b      	ldr	r3, [r3, #0]
 800bdca:	613b      	str	r3, [r7, #16]
            acc = std::min(acc, output_activation_max);
 800bdcc:	f107 0214 	add.w	r2, r7, #20
 800bdd0:	f107 0310 	add.w	r3, r7, #16
 800bdd4:	4611      	mov	r1, r2
 800bdd6:	4618      	mov	r0, r3
 800bdd8:	f7fa fd44 	bl	8006864 <_ZSt3minIlERKT_S2_S2_>
 800bddc:	4603      	mov	r3, r0
 800bdde:	681b      	ldr	r3, [r3, #0]
 800bde0:	613b      	str	r3, [r7, #16]
            output_data[Offset(output_shape, batch, out_y, out_x,
                               output_channel)] = static_cast<int8_t>(acc);
 800bde2:	693c      	ldr	r4, [r7, #16]
            output_data[Offset(output_shape, batch, out_y, out_x,
 800bde4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bde6:	9300      	str	r3, [sp, #0]
 800bde8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800bdec:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800bdf0:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
 800bdf4:	f8d7 00c4 	ldr.w	r0, [r7, #196]	; 0xc4
 800bdf8:	f7ff fade 	bl	800b3b8 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
 800bdfc:	4603      	mov	r3, r0
 800bdfe:	461a      	mov	r2, r3
                               output_channel)] = static_cast<int8_t>(acc);
 800be00:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800be04:	4413      	add	r3, r2
 800be06:	b262      	sxtb	r2, r4
 800be08:	701a      	strb	r2, [r3, #0]
          for (int m = 0; m < depth_multiplier; ++m) {
 800be0a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800be0e:	3301      	adds	r3, #1
 800be10:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800be14:	e71b      	b.n	800bc4e <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x184>
        for (int in_channel = 0; in_channel < input_depth; ++in_channel) {
 800be16:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800be1a:	3301      	adds	r3, #1
 800be1c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800be20:	e70c      	b.n	800bc3c <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x172>
      for (int out_x = 0; out_x < output_width; ++out_x) {
 800be22:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800be26:	3301      	adds	r3, #1
 800be28:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800be2c:	e6fd      	b.n	800bc2a <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x160>
    for (int out_y = 0; out_y < output_height; ++out_y) {
 800be2e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800be32:	3301      	adds	r3, #1
 800be34:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800be38:	e6ee      	b.n	800bc18 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x14e>
  for (int batch = 0; batch < batches; ++batch) {
 800be3a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800be3e:	3301      	adds	r3, #1
 800be40:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800be44:	e6df      	b.n	800bc06 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x13c>
          }
        }
      }
    }
  }
}
 800be46:	bf00      	nop
 800be48:	37a4      	adds	r7, #164	; 0xa4
 800be4a:	46bd      	mov	sp, r7
 800be4c:	bd90      	pop	{r4, r7, pc}

0800be4e <_ZN6tflite12_GLOBAL__N_14InitEP13TfLiteContextPKcj>:
#include "tensorflow/lite/micro/kernels/kernel_util.h"

namespace tflite {
namespace {

void* Init(TfLiteContext* context, const char* buffer, size_t length) {
 800be4e:	b580      	push	{r7, lr}
 800be50:	b084      	sub	sp, #16
 800be52:	af00      	add	r7, sp, #0
 800be54:	60f8      	str	r0, [r7, #12]
 800be56:	60b9      	str	r1, [r7, #8]
 800be58:	607a      	str	r2, [r7, #4]
  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);
 800be5a:	68fb      	ldr	r3, [r7, #12]
 800be5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800be5e:	2b00      	cmp	r3, #0
 800be60:	d101      	bne.n	800be66 <_ZN6tflite12_GLOBAL__N_14InitEP13TfLiteContextPKcj+0x18>
 800be62:	f004 fc9c 	bl	801079e <abort>
  return context->AllocatePersistentBuffer(context, sizeof(OpDataConv));
 800be66:	68fb      	ldr	r3, [r7, #12]
 800be68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800be6a:	2134      	movs	r1, #52	; 0x34
 800be6c:	68f8      	ldr	r0, [r7, #12]
 800be6e:	4798      	blx	r3
 800be70:	4603      	mov	r3, r0
}
 800be72:	4618      	mov	r0, r3
 800be74:	3710      	adds	r7, #16
 800be76:	46bd      	mov	sp, r7
 800be78:	bd80      	pop	{r7, pc}
	...

0800be7c <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
 800be7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800be7e:	b0e3      	sub	sp, #396	; 0x18c
 800be80:	af08      	add	r7, sp, #32
 800be82:	f107 030c 	add.w	r3, r7, #12
 800be86:	6018      	str	r0, [r3, #0]
 800be88:	f107 0308 	add.w	r3, r7, #8
 800be8c:	6019      	str	r1, [r3, #0]
  TFLITE_DCHECK(node->user_data != nullptr);
 800be8e:	f107 0308 	add.w	r3, r7, #8
 800be92:	681b      	ldr	r3, [r3, #0]
 800be94:	691b      	ldr	r3, [r3, #16]
 800be96:	2b00      	cmp	r3, #0
 800be98:	d101      	bne.n	800be9e <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x22>
 800be9a:	f004 fc80 	bl	801079e <abort>
  TFLITE_DCHECK(node->builtin_data != nullptr);
 800be9e:	f107 0308 	add.w	r3, r7, #8
 800bea2:	681b      	ldr	r3, [r3, #0]
 800bea4:	695b      	ldr	r3, [r3, #20]
 800bea6:	2b00      	cmp	r3, #0
 800bea8:	d101      	bne.n	800beae <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x32>
 800beaa:	f004 fc78 	bl	801079e <abort>

  auto& params =
 800beae:	f107 0308 	add.w	r3, r7, #8
 800beb2:	681b      	ldr	r3, [r3, #0]
 800beb4:	695b      	ldr	r3, [r3, #20]
 800beb6:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
      *(reinterpret_cast<TfLiteDepthwiseConvParams*>(node->builtin_data));
  const OpDataConv& data = *(static_cast<const OpDataConv*>(node->user_data));
 800beba:	f107 0308 	add.w	r3, r7, #8
 800bebe:	681b      	ldr	r3, [r3, #0]
 800bec0:	691b      	ldr	r3, [r3, #16]
 800bec2:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160

  TfLiteEvalTensor* output =
      tflite::micro::GetEvalOutput(context, node, kDepthwiseConvOutputTensor);
 800bec6:	4b95      	ldr	r3, [pc, #596]	; (800c11c <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x2a0>)
 800bec8:	681a      	ldr	r2, [r3, #0]
 800beca:	f107 0108 	add.w	r1, r7, #8
 800bece:	f107 030c 	add.w	r3, r7, #12
 800bed2:	6809      	ldr	r1, [r1, #0]
 800bed4:	6818      	ldr	r0, [r3, #0]
 800bed6:	f7ff f809 	bl	800aeec <_ZN6tflite5micro13GetEvalOutputEPK13TfLiteContextPK10TfLiteNodei>
 800beda:	f8c7 015c 	str.w	r0, [r7, #348]	; 0x15c
  const TfLiteEvalTensor* input =
      tflite::micro::GetEvalInput(context, node, kDepthwiseConvInputTensor);
 800bede:	4b90      	ldr	r3, [pc, #576]	; (800c120 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x2a4>)
 800bee0:	681a      	ldr	r2, [r3, #0]
 800bee2:	f107 0108 	add.w	r1, r7, #8
 800bee6:	f107 030c 	add.w	r3, r7, #12
 800beea:	6809      	ldr	r1, [r1, #0]
 800beec:	6818      	ldr	r0, [r3, #0]
 800beee:	f7fe ffed 	bl	800aecc <_ZN6tflite5micro12GetEvalInputEPK13TfLiteContextPK10TfLiteNodei>
 800bef2:	f8c7 0158 	str.w	r0, [r7, #344]	; 0x158
  const TfLiteEvalTensor* filter =
      tflite::micro::GetEvalInput(context, node, kDepthwiseConvWeightsTensor);
 800bef6:	4b8b      	ldr	r3, [pc, #556]	; (800c124 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x2a8>)
 800bef8:	681a      	ldr	r2, [r3, #0]
 800befa:	f107 0108 	add.w	r1, r7, #8
 800befe:	f107 030c 	add.w	r3, r7, #12
 800bf02:	6809      	ldr	r1, [r1, #0]
 800bf04:	6818      	ldr	r0, [r3, #0]
 800bf06:	f7fe ffe1 	bl	800aecc <_ZN6tflite5micro12GetEvalInputEPK13TfLiteContextPK10TfLiteNodei>
 800bf0a:	f8c7 0154 	str.w	r0, [r7, #340]	; 0x154
  const TfLiteEvalTensor* bias =
      (NumInputs(node) == 3)
 800bf0e:	f107 0308 	add.w	r3, r7, #8
 800bf12:	6818      	ldr	r0, [r3, #0]
 800bf14:	f7ff fb40 	bl	800b598 <_ZN6tflite9NumInputsEPK10TfLiteNode>
 800bf18:	4603      	mov	r3, r0
          ? tflite::micro::GetEvalInput(context, node, kDepthwiseConvBiasTensor)
 800bf1a:	2b03      	cmp	r3, #3
 800bf1c:	d10b      	bne.n	800bf36 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xba>
 800bf1e:	4b82      	ldr	r3, [pc, #520]	; (800c128 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x2ac>)
 800bf20:	681a      	ldr	r2, [r3, #0]
 800bf22:	f107 0108 	add.w	r1, r7, #8
 800bf26:	f107 030c 	add.w	r3, r7, #12
 800bf2a:	6809      	ldr	r1, [r1, #0]
 800bf2c:	6818      	ldr	r0, [r3, #0]
 800bf2e:	f7fe ffcd 	bl	800aecc <_ZN6tflite5micro12GetEvalInputEPK13TfLiteContextPK10TfLiteNodei>
 800bf32:	4603      	mov	r3, r0
 800bf34:	e000      	b.n	800bf38 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xbc>
 800bf36:	2300      	movs	r3, #0
          : nullptr;
 800bf38:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150

  switch (input->type) {  // Already know in/out types are same.
 800bf3c:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800bf40:	7a1b      	ldrb	r3, [r3, #8]
 800bf42:	2b01      	cmp	r3, #1
 800bf44:	d002      	beq.n	800bf4c <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xd0>
 800bf46:	2b09      	cmp	r3, #9
 800bf48:	d061      	beq.n	800c00e <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x192>
 800bf4a:	e0cc      	b.n	800c0e6 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x26a>
    case kTfLiteFloat32: {
      tflite::reference_ops::DepthwiseConv(
          DepthwiseConvParamsFloat(params, data),
 800bf4c:	f107 0310 	add.w	r3, r7, #16
 800bf50:	f8d7 2160 	ldr.w	r2, [r7, #352]	; 0x160
 800bf54:	f8d7 1164 	ldr.w	r1, [r7, #356]	; 0x164
 800bf58:	4618      	mov	r0, r3
 800bf5a:	f000 f8ff 	bl	800c15c <_ZN6tflite24DepthwiseConvParamsFloatERK25TfLiteDepthwiseConvParamsRKNS_10OpDataConvE>
          tflite::micro::GetTensorShape(input),
 800bf5e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800bf62:	f8d7 1158 	ldr.w	r1, [r7, #344]	; 0x158
 800bf66:	4618      	mov	r0, r3
 800bf68:	f001 f825 	bl	800cfb6 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      tflite::reference_ops::DepthwiseConv(
 800bf6c:	f8d7 0158 	ldr.w	r0, [r7, #344]	; 0x158
 800bf70:	f7fe ffdc 	bl	800af2c <_ZN6tflite5micro13GetTensorDataIfEEPKT_PK16TfLiteEvalTensor>
 800bf74:	4606      	mov	r6, r0
          tflite::micro::GetTensorData<float>(input),
          tflite::micro::GetTensorShape(filter),
 800bf76:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800bf7a:	f8d7 1154 	ldr.w	r1, [r7, #340]	; 0x154
 800bf7e:	4618      	mov	r0, r3
 800bf80:	f001 f819 	bl	800cfb6 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      tflite::reference_ops::DepthwiseConv(
 800bf84:	f8d7 0154 	ldr.w	r0, [r7, #340]	; 0x154
 800bf88:	f7fe ffd0 	bl	800af2c <_ZN6tflite5micro13GetTensorDataIfEEPKT_PK16TfLiteEvalTensor>
 800bf8c:	4604      	mov	r4, r0
          tflite::micro::GetTensorData<float>(filter),
          tflite::micro::GetTensorShape(bias),
 800bf8e:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800bf92:	f8d7 1150 	ldr.w	r1, [r7, #336]	; 0x150
 800bf96:	4618      	mov	r0, r3
 800bf98:	f001 f80d 	bl	800cfb6 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      tflite::reference_ops::DepthwiseConv(
 800bf9c:	f8d7 0150 	ldr.w	r0, [r7, #336]	; 0x150
 800bfa0:	f7fe ffc4 	bl	800af2c <_ZN6tflite5micro13GetTensorDataIfEEPKT_PK16TfLiteEvalTensor>
 800bfa4:	4605      	mov	r5, r0
          tflite::micro::GetTensorData<float>(bias),
          tflite::micro::GetTensorShape(output),
 800bfa6:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800bfaa:	f8d7 115c 	ldr.w	r1, [r7, #348]	; 0x15c
 800bfae:	4618      	mov	r0, r3
 800bfb0:	f001 f801 	bl	800cfb6 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      tflite::reference_ops::DepthwiseConv(
 800bfb4:	f8d7 015c 	ldr.w	r0, [r7, #348]	; 0x15c
 800bfb8:	f7fe ffc7 	bl	800af4a <_ZN6tflite5micro13GetTensorDataIfEEPT_P16TfLiteEvalTensor>
 800bfbc:	4603      	mov	r3, r0
 800bfbe:	f107 0268 	add.w	r2, r7, #104	; 0x68
 800bfc2:	f107 0150 	add.w	r1, r7, #80	; 0x50
 800bfc6:	f107 0010 	add.w	r0, r7, #16
 800bfca:	9304      	str	r3, [sp, #16]
 800bfcc:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800bfd0:	9303      	str	r3, [sp, #12]
 800bfd2:	9502      	str	r5, [sp, #8]
 800bfd4:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800bfd8:	9301      	str	r3, [sp, #4]
 800bfda:	9400      	str	r4, [sp, #0]
 800bfdc:	4613      	mov	r3, r2
 800bfde:	4632      	mov	r2, r6
 800bfe0:	f7ff fbed 	bl	800b7be <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf>
          tflite::micro::GetTensorShape(output),
 800bfe4:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800bfe8:	4618      	mov	r0, r3
 800bfea:	f7fa fdd4 	bl	8006b96 <_ZN6tflite12RuntimeShapeD1Ev>
          tflite::micro::GetTensorShape(bias),
 800bfee:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800bff2:	4618      	mov	r0, r3
 800bff4:	f7fa fdcf 	bl	8006b96 <_ZN6tflite12RuntimeShapeD1Ev>
          tflite::micro::GetTensorShape(filter),
 800bff8:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800bffc:	4618      	mov	r0, r3
 800bffe:	f7fa fdca 	bl	8006b96 <_ZN6tflite12RuntimeShapeD1Ev>
          tflite::micro::GetTensorShape(input),
 800c002:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800c006:	4618      	mov	r0, r3
 800c008:	f7fa fdc5 	bl	8006b96 <_ZN6tflite12RuntimeShapeD1Ev>
          tflite::micro::GetTensorData<float>(output));
      break;
 800c00c:	e080      	b.n	800c110 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x294>
    }
    case kTfLiteInt8: {
      reference_integer_ops::DepthwiseConvPerChannel(
          DepthwiseConvParamsQuantized(params, data),
 800c00e:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 800c012:	f8d7 2160 	ldr.w	r2, [r7, #352]	; 0x160
 800c016:	f8d7 1164 	ldr.w	r1, [r7, #356]	; 0x164
 800c01a:	4618      	mov	r0, r3
 800c01c:	f000 f8df 	bl	800c1de <_ZN6tflite28DepthwiseConvParamsQuantizedERK25TfLiteDepthwiseConvParamsRKNS_10OpDataConvE>
          data.per_channel_output_multiplier, data.per_channel_output_shift,
 800c020:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 800c024:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800c026:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 800c02a:	6a9d      	ldr	r5, [r3, #40]	; 0x28
          tflite::micro::GetTensorShape(input),
 800c02c:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 800c030:	f8d7 1158 	ldr.w	r1, [r7, #344]	; 0x158
 800c034:	4618      	mov	r0, r3
 800c036:	f000 ffbe 	bl	800cfb6 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      reference_integer_ops::DepthwiseConvPerChannel(
 800c03a:	f8d7 0158 	ldr.w	r0, [r7, #344]	; 0x158
 800c03e:	f7fe ff95 	bl	800af6c <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor>
 800c042:	4606      	mov	r6, r0
          tflite::micro::GetTensorData<int8_t>(input),
          tflite::micro::GetTensorShape(filter),
 800c044:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c048:	f8d7 1154 	ldr.w	r1, [r7, #340]	; 0x154
 800c04c:	4618      	mov	r0, r3
 800c04e:	f000 ffb2 	bl	800cfb6 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      reference_integer_ops::DepthwiseConvPerChannel(
 800c052:	f8d7 0154 	ldr.w	r0, [r7, #340]	; 0x154
 800c056:	f7fe ff89 	bl	800af6c <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor>
 800c05a:	6078      	str	r0, [r7, #4]
          tflite::micro::GetTensorData<int8_t>(filter),
          tflite::micro::GetTensorShape(bias),
 800c05c:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800c060:	f8d7 1150 	ldr.w	r1, [r7, #336]	; 0x150
 800c064:	4618      	mov	r0, r3
 800c066:	f000 ffa6 	bl	800cfb6 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      reference_integer_ops::DepthwiseConvPerChannel(
 800c06a:	f8d7 0150 	ldr.w	r0, [r7, #336]	; 0x150
 800c06e:	f7ff faad 	bl	800b5cc <_ZN6tflite5micro13GetTensorDataIlEEPKT_PK16TfLiteEvalTensor>
 800c072:	6038      	str	r0, [r7, #0]
          tflite::micro::GetTensorData<int32_t>(bias),
          tflite::micro::GetTensorShape(output),
 800c074:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800c078:	f8d7 115c 	ldr.w	r1, [r7, #348]	; 0x15c
 800c07c:	4618      	mov	r0, r3
 800c07e:	f000 ff9a 	bl	800cfb6 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      reference_integer_ops::DepthwiseConvPerChannel(
 800c082:	f8d7 015c 	ldr.w	r0, [r7, #348]	; 0x15c
 800c086:	f7fe ff80 	bl	800af8a <_ZN6tflite5micro13GetTensorDataIaEEPT_P16TfLiteEvalTensor>
 800c08a:	4603      	mov	r3, r0
 800c08c:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 800c090:	f107 00b0 	add.w	r0, r7, #176	; 0xb0
 800c094:	9306      	str	r3, [sp, #24]
 800c096:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800c09a:	9305      	str	r3, [sp, #20]
 800c09c:	683b      	ldr	r3, [r7, #0]
 800c09e:	9304      	str	r3, [sp, #16]
 800c0a0:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800c0a4:	9303      	str	r3, [sp, #12]
 800c0a6:	687b      	ldr	r3, [r7, #4]
 800c0a8:	9302      	str	r3, [sp, #8]
 800c0aa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c0ae:	9301      	str	r3, [sp, #4]
 800c0b0:	9600      	str	r6, [sp, #0]
 800c0b2:	4613      	mov	r3, r2
 800c0b4:	462a      	mov	r2, r5
 800c0b6:	4621      	mov	r1, r4
 800c0b8:	f7ff fd07 	bl	800baca <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa>
          tflite::micro::GetTensorShape(output),
 800c0bc:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800c0c0:	4618      	mov	r0, r3
 800c0c2:	f7fa fd68 	bl	8006b96 <_ZN6tflite12RuntimeShapeD1Ev>
          tflite::micro::GetTensorShape(bias),
 800c0c6:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800c0ca:	4618      	mov	r0, r3
 800c0cc:	f7fa fd63 	bl	8006b96 <_ZN6tflite12RuntimeShapeD1Ev>
          tflite::micro::GetTensorShape(filter),
 800c0d0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c0d4:	4618      	mov	r0, r3
 800c0d6:	f7fa fd5e 	bl	8006b96 <_ZN6tflite12RuntimeShapeD1Ev>
          tflite::micro::GetTensorShape(input),
 800c0da:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 800c0de:	4618      	mov	r0, r3
 800c0e0:	f7fa fd59 	bl	8006b96 <_ZN6tflite12RuntimeShapeD1Ev>
          tflite::micro::GetTensorData<int8_t>(output));
      break;
 800c0e4:	e014      	b.n	800c110 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x294>
    }
    default:
      TF_LITE_KERNEL_LOG(context, "Type %s (%d) not supported.",
 800c0e6:	f107 030c 	add.w	r3, r7, #12
 800c0ea:	681b      	ldr	r3, [r3, #0]
 800c0ec:	695c      	ldr	r4, [r3, #20]
 800c0ee:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800c0f2:	7a1b      	ldrb	r3, [r3, #8]
 800c0f4:	4618      	mov	r0, r3
 800c0f6:	f7f7 fd13 	bl	8003b20 <TfLiteTypeGetName>
 800c0fa:	4602      	mov	r2, r0
 800c0fc:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800c100:	7a1b      	ldrb	r3, [r3, #8]
 800c102:	f107 000c 	add.w	r0, r7, #12
 800c106:	4909      	ldr	r1, [pc, #36]	; (800c12c <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x2b0>)
 800c108:	6800      	ldr	r0, [r0, #0]
 800c10a:	47a0      	blx	r4
                         TfLiteTypeGetName(input->type), input->type);
      return kTfLiteError;
 800c10c:	2301      	movs	r3, #1
 800c10e:	e000      	b.n	800c112 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x296>
  }
  return kTfLiteOk;
 800c110:	2300      	movs	r3, #0
}
 800c112:	4618      	mov	r0, r3
 800c114:	f507 77b6 	add.w	r7, r7, #364	; 0x16c
 800c118:	46bd      	mov	sp, r7
 800c11a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c11c:	0801cfcc 	.word	0x0801cfcc
 800c120:	0801cfc0 	.word	0x0801cfc0
 800c124:	0801cfc4 	.word	0x0801cfc4
 800c128:	0801cfc8 	.word	0x0801cfc8
 800c12c:	080175a4 	.word	0x080175a4

0800c130 <_ZN6tflite26Register_DEPTHWISE_CONV_2DEv>:

}  // namespace

TfLiteRegistration Register_DEPTHWISE_CONV_2D() {
 800c130:	b4b0      	push	{r4, r5, r7}
 800c132:	b083      	sub	sp, #12
 800c134:	af00      	add	r7, sp, #0
 800c136:	6078      	str	r0, [r7, #4]
          /*prepare=*/DepthwiseConvPrepare,
          /*invoke=*/Eval,
          /*profiling_string=*/nullptr,
          /*builtin_code=*/0,
          /*custom_name=*/nullptr,
          /*version=*/0};
 800c138:	687b      	ldr	r3, [r7, #4]
 800c13a:	4a07      	ldr	r2, [pc, #28]	; (800c158 <_ZN6tflite26Register_DEPTHWISE_CONV_2DEv+0x28>)
 800c13c:	461c      	mov	r4, r3
 800c13e:	4615      	mov	r5, r2
 800c140:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800c142:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800c144:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800c148:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 800c14c:	6878      	ldr	r0, [r7, #4]
 800c14e:	370c      	adds	r7, #12
 800c150:	46bd      	mov	sp, r7
 800c152:	bcb0      	pop	{r4, r5, r7}
 800c154:	4770      	bx	lr
 800c156:	bf00      	nop
 800c158:	080175c0 	.word	0x080175c0

0800c15c <_ZN6tflite24DepthwiseConvParamsFloatERK25TfLiteDepthwiseConvParamsRKNS_10OpDataConvE>:
const int kDepthwiseConvQuantizedDimension = 3;

// Returns a DepthwiseParams struct with all the parameters needed for a
// float computation.
DepthwiseParams DepthwiseConvParamsFloat(
    const TfLiteDepthwiseConvParams& params, const OpDataConv& data) {
 800c15c:	b580      	push	{r7, lr}
 800c15e:	b084      	sub	sp, #16
 800c160:	af00      	add	r7, sp, #0
 800c162:	60f8      	str	r0, [r7, #12]
 800c164:	60b9      	str	r1, [r7, #8]
 800c166:	607a      	str	r2, [r7, #4]
  DepthwiseParams op_params;
  CalculateActivationRange(params.activation, &op_params.float_activation_min,
 800c168:	68bb      	ldr	r3, [r7, #8]
 800c16a:	7c18      	ldrb	r0, [r3, #16]
 800c16c:	68fb      	ldr	r3, [r7, #12]
 800c16e:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800c172:	68fb      	ldr	r3, [r7, #12]
 800c174:	3330      	adds	r3, #48	; 0x30
 800c176:	4619      	mov	r1, r3
 800c178:	f7ff f9ac 	bl	800b4d4 <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_>
                           &op_params.float_activation_max);
  op_params.padding_type = tflite::micro::RuntimePaddingType(params.padding);
 800c17c:	68bb      	ldr	r3, [r7, #8]
 800c17e:	781b      	ldrb	r3, [r3, #0]
 800c180:	4618      	mov	r0, r3
 800c182:	f000 ff3a 	bl	800cffa <_ZN6tflite5micro18RuntimePaddingTypeE13TfLitePadding>
 800c186:	4603      	mov	r3, r0
 800c188:	461a      	mov	r2, r3
 800c18a:	68fb      	ldr	r3, [r7, #12]
 800c18c:	701a      	strb	r2, [r3, #0]
  op_params.padding_values.width = data.padding.width;
 800c18e:	687b      	ldr	r3, [r7, #4]
 800c190:	681b      	ldr	r3, [r3, #0]
 800c192:	b21a      	sxth	r2, r3
 800c194:	68fb      	ldr	r3, [r7, #12]
 800c196:	805a      	strh	r2, [r3, #2]
  op_params.padding_values.height = data.padding.height;
 800c198:	687b      	ldr	r3, [r7, #4]
 800c19a:	685b      	ldr	r3, [r3, #4]
 800c19c:	b21a      	sxth	r2, r3
 800c19e:	68fb      	ldr	r3, [r7, #12]
 800c1a0:	809a      	strh	r2, [r3, #4]
  op_params.stride_width = params.stride_width;
 800c1a2:	68bb      	ldr	r3, [r7, #8]
 800c1a4:	685b      	ldr	r3, [r3, #4]
 800c1a6:	b21a      	sxth	r2, r3
 800c1a8:	68fb      	ldr	r3, [r7, #12]
 800c1aa:	815a      	strh	r2, [r3, #10]
  op_params.stride_height = params.stride_height;
 800c1ac:	68bb      	ldr	r3, [r7, #8]
 800c1ae:	689b      	ldr	r3, [r3, #8]
 800c1b0:	b21a      	sxth	r2, r3
 800c1b2:	68fb      	ldr	r3, [r7, #12]
 800c1b4:	819a      	strh	r2, [r3, #12]
  op_params.dilation_width_factor = params.dilation_width_factor;
 800c1b6:	68bb      	ldr	r3, [r7, #8]
 800c1b8:	695b      	ldr	r3, [r3, #20]
 800c1ba:	b21a      	sxth	r2, r3
 800c1bc:	68fb      	ldr	r3, [r7, #12]
 800c1be:	81da      	strh	r2, [r3, #14]
  op_params.dilation_height_factor = params.dilation_height_factor;
 800c1c0:	68bb      	ldr	r3, [r7, #8]
 800c1c2:	699b      	ldr	r3, [r3, #24]
 800c1c4:	b21a      	sxth	r2, r3
 800c1c6:	68fb      	ldr	r3, [r7, #12]
 800c1c8:	821a      	strh	r2, [r3, #16]
  op_params.depth_multiplier = params.depth_multiplier;
 800c1ca:	68bb      	ldr	r3, [r7, #8]
 800c1cc:	68db      	ldr	r3, [r3, #12]
 800c1ce:	b21a      	sxth	r2, r3
 800c1d0:	68fb      	ldr	r3, [r7, #12]
 800c1d2:	825a      	strh	r2, [r3, #18]
  return op_params;
 800c1d4:	bf00      	nop
}
 800c1d6:	68f8      	ldr	r0, [r7, #12]
 800c1d8:	3710      	adds	r7, #16
 800c1da:	46bd      	mov	sp, r7
 800c1dc:	bd80      	pop	{r7, pc}

0800c1de <_ZN6tflite28DepthwiseConvParamsQuantizedERK25TfLiteDepthwiseConvParamsRKNS_10OpDataConvE>:

// Returns a DepthwiseParams struct with all the parameters needed for a
// quantized computation.
DepthwiseParams DepthwiseConvParamsQuantized(
    const TfLiteDepthwiseConvParams& params, const OpDataConv& data) {
 800c1de:	b580      	push	{r7, lr}
 800c1e0:	b084      	sub	sp, #16
 800c1e2:	af00      	add	r7, sp, #0
 800c1e4:	60f8      	str	r0, [r7, #12]
 800c1e6:	60b9      	str	r1, [r7, #8]
 800c1e8:	607a      	str	r2, [r7, #4]
  DepthwiseParams op_params;
  op_params.input_offset = -data.input_zero_point;
 800c1ea:	687b      	ldr	r3, [r7, #4]
 800c1ec:	691b      	ldr	r3, [r3, #16]
 800c1ee:	425a      	negs	r2, r3
 800c1f0:	68fb      	ldr	r3, [r7, #12]
 800c1f2:	615a      	str	r2, [r3, #20]
  op_params.weights_offset = -data.filter_zero_point;
 800c1f4:	687b      	ldr	r3, [r7, #4]
 800c1f6:	695b      	ldr	r3, [r3, #20]
 800c1f8:	425a      	negs	r2, r3
 800c1fa:	68fb      	ldr	r3, [r7, #12]
 800c1fc:	619a      	str	r2, [r3, #24]
  op_params.output_offset = data.output_zero_point;
 800c1fe:	687b      	ldr	r3, [r7, #4]
 800c200:	699a      	ldr	r2, [r3, #24]
 800c202:	68fb      	ldr	r3, [r7, #12]
 800c204:	61da      	str	r2, [r3, #28]
  op_params.output_multiplier = data.output_multiplier;
 800c206:	687b      	ldr	r3, [r7, #4]
 800c208:	69da      	ldr	r2, [r3, #28]
 800c20a:	68fb      	ldr	r3, [r7, #12]
 800c20c:	621a      	str	r2, [r3, #32]
  op_params.output_shift = -data.output_shift;
 800c20e:	687b      	ldr	r3, [r7, #4]
 800c210:	6a1b      	ldr	r3, [r3, #32]
 800c212:	425a      	negs	r2, r3
 800c214:	68fb      	ldr	r3, [r7, #12]
 800c216:	625a      	str	r2, [r3, #36]	; 0x24
  op_params.padding_type = tflite::micro::RuntimePaddingType(params.padding);
 800c218:	68bb      	ldr	r3, [r7, #8]
 800c21a:	781b      	ldrb	r3, [r3, #0]
 800c21c:	4618      	mov	r0, r3
 800c21e:	f000 feec 	bl	800cffa <_ZN6tflite5micro18RuntimePaddingTypeE13TfLitePadding>
 800c222:	4603      	mov	r3, r0
 800c224:	461a      	mov	r2, r3
 800c226:	68fb      	ldr	r3, [r7, #12]
 800c228:	701a      	strb	r2, [r3, #0]
  op_params.padding_values.height = data.padding.height;
 800c22a:	687b      	ldr	r3, [r7, #4]
 800c22c:	685b      	ldr	r3, [r3, #4]
 800c22e:	b21a      	sxth	r2, r3
 800c230:	68fb      	ldr	r3, [r7, #12]
 800c232:	809a      	strh	r2, [r3, #4]
  op_params.padding_values.width = data.padding.width;
 800c234:	687b      	ldr	r3, [r7, #4]
 800c236:	681b      	ldr	r3, [r3, #0]
 800c238:	b21a      	sxth	r2, r3
 800c23a:	68fb      	ldr	r3, [r7, #12]
 800c23c:	805a      	strh	r2, [r3, #2]
  op_params.stride_height = params.stride_height;
 800c23e:	68bb      	ldr	r3, [r7, #8]
 800c240:	689b      	ldr	r3, [r3, #8]
 800c242:	b21a      	sxth	r2, r3
 800c244:	68fb      	ldr	r3, [r7, #12]
 800c246:	819a      	strh	r2, [r3, #12]
  op_params.stride_width = params.stride_width;
 800c248:	68bb      	ldr	r3, [r7, #8]
 800c24a:	685b      	ldr	r3, [r3, #4]
 800c24c:	b21a      	sxth	r2, r3
 800c24e:	68fb      	ldr	r3, [r7, #12]
 800c250:	815a      	strh	r2, [r3, #10]
  op_params.dilation_height_factor = params.dilation_height_factor;
 800c252:	68bb      	ldr	r3, [r7, #8]
 800c254:	699b      	ldr	r3, [r3, #24]
 800c256:	b21a      	sxth	r2, r3
 800c258:	68fb      	ldr	r3, [r7, #12]
 800c25a:	821a      	strh	r2, [r3, #16]
  op_params.dilation_width_factor = params.dilation_width_factor;
 800c25c:	68bb      	ldr	r3, [r7, #8]
 800c25e:	695b      	ldr	r3, [r3, #20]
 800c260:	b21a      	sxth	r2, r3
 800c262:	68fb      	ldr	r3, [r7, #12]
 800c264:	81da      	strh	r2, [r3, #14]
  op_params.depth_multiplier = params.depth_multiplier;
 800c266:	68bb      	ldr	r3, [r7, #8]
 800c268:	68db      	ldr	r3, [r3, #12]
 800c26a:	b21a      	sxth	r2, r3
 800c26c:	68fb      	ldr	r3, [r7, #12]
 800c26e:	825a      	strh	r2, [r3, #18]
  op_params.quantized_activation_min = data.output_activation_min;
 800c270:	687b      	ldr	r3, [r7, #4]
 800c272:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c274:	68fb      	ldr	r3, [r7, #12]
 800c276:	629a      	str	r2, [r3, #40]	; 0x28
  op_params.quantized_activation_max = data.output_activation_max;
 800c278:	687b      	ldr	r3, [r7, #4]
 800c27a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c27c:	68fb      	ldr	r3, [r7, #12]
 800c27e:	62da      	str	r2, [r3, #44]	; 0x2c
  return op_params;
 800c280:	bf00      	nop
}
 800c282:	68f8      	ldr	r0, [r7, #12]
 800c284:	3710      	adds	r7, #16
 800c286:	46bd      	mov	sp, r7
 800c288:	bd80      	pop	{r7, pc}
	...

0800c28c <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE>:

TfLiteStatus CalculateOpDataDepthwiseConv(
    TfLiteContext* context, TfLiteNode* node,
    const TfLiteDepthwiseConvParams& params, int width, int height,
    int filter_width, int filter_height, int out_width, int out_height,
    const TfLiteType data_type, OpDataConv* data) {
 800c28c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c28e:	b09d      	sub	sp, #116	; 0x74
 800c290:	af0a      	add	r7, sp, #40	; 0x28
 800c292:	6278      	str	r0, [r7, #36]	; 0x24
 800c294:	6239      	str	r1, [r7, #32]
 800c296:	61fa      	str	r2, [r7, #28]
 800c298:	61bb      	str	r3, [r7, #24]
  bool has_bias = node->inputs->size == 3;
 800c29a:	6a3b      	ldr	r3, [r7, #32]
 800c29c:	681b      	ldr	r3, [r3, #0]
 800c29e:	681b      	ldr	r3, [r3, #0]
 800c2a0:	2b03      	cmp	r3, #3
 800c2a2:	bf0c      	ite	eq
 800c2a4:	2301      	moveq	r3, #1
 800c2a6:	2300      	movne	r3, #0
 800c2a8:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  // Check number of inputs/outputs
  TF_LITE_ENSURE(context, has_bias || node->inputs->size == 2);
 800c2ac:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800c2b0:	f083 0301 	eor.w	r3, r3, #1
 800c2b4:	b2db      	uxtb	r3, r3
 800c2b6:	2b00      	cmp	r3, #0
 800c2b8:	d00f      	beq.n	800c2da <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x4e>
 800c2ba:	6a3b      	ldr	r3, [r7, #32]
 800c2bc:	681b      	ldr	r3, [r3, #0]
 800c2be:	681b      	ldr	r3, [r3, #0]
 800c2c0:	2b02      	cmp	r3, #2
 800c2c2:	d00a      	beq.n	800c2da <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x4e>
 800c2c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c2c6:	695c      	ldr	r4, [r3, #20]
 800c2c8:	4b6c      	ldr	r3, [pc, #432]	; (800c47c <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1f0>)
 800c2ca:	9300      	str	r3, [sp, #0]
 800c2cc:	2357      	movs	r3, #87	; 0x57
 800c2ce:	4a6c      	ldr	r2, [pc, #432]	; (800c480 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1f4>)
 800c2d0:	496c      	ldr	r1, [pc, #432]	; (800c484 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1f8>)
 800c2d2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c2d4:	47a0      	blx	r4
 800c2d6:	2301      	movs	r3, #1
 800c2d8:	e0cc      	b.n	800c474 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1e8>
  TF_LITE_ENSURE_EQ(context, node->outputs->size, 1);
 800c2da:	6a3b      	ldr	r3, [r7, #32]
 800c2dc:	685b      	ldr	r3, [r3, #4]
 800c2de:	681b      	ldr	r3, [r3, #0]
 800c2e0:	2b01      	cmp	r3, #1
 800c2e2:	d012      	beq.n	800c30a <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x7e>
 800c2e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c2e6:	695c      	ldr	r4, [r3, #20]
 800c2e8:	6a3b      	ldr	r3, [r7, #32]
 800c2ea:	685b      	ldr	r3, [r3, #4]
 800c2ec:	681b      	ldr	r3, [r3, #0]
 800c2ee:	2201      	movs	r2, #1
 800c2f0:	9203      	str	r2, [sp, #12]
 800c2f2:	9302      	str	r3, [sp, #8]
 800c2f4:	4b64      	ldr	r3, [pc, #400]	; (800c488 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1fc>)
 800c2f6:	9301      	str	r3, [sp, #4]
 800c2f8:	4b64      	ldr	r3, [pc, #400]	; (800c48c <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x200>)
 800c2fa:	9300      	str	r3, [sp, #0]
 800c2fc:	2358      	movs	r3, #88	; 0x58
 800c2fe:	4a60      	ldr	r2, [pc, #384]	; (800c480 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1f4>)
 800c300:	4963      	ldr	r1, [pc, #396]	; (800c490 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x204>)
 800c302:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c304:	47a0      	blx	r4
 800c306:	2301      	movs	r3, #1
 800c308:	e0b4      	b.n	800c474 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1e8>

  // Matching GetWindowedOutputSize in TensorFlow.
  auto padding = params.padding;
 800c30a:	69fb      	ldr	r3, [r7, #28]
 800c30c:	781b      	ldrb	r3, [r3, #0]
 800c30e:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
  data->padding = ComputePaddingHeightWidth(
      params.stride_height, params.stride_width, params.dilation_height_factor,
 800c312:	69fb      	ldr	r3, [r7, #28]
 800c314:	6899      	ldr	r1, [r3, #8]
 800c316:	69fb      	ldr	r3, [r7, #28]
 800c318:	685c      	ldr	r4, [r3, #4]
 800c31a:	69fb      	ldr	r3, [r7, #28]
 800c31c:	699d      	ldr	r5, [r3, #24]
      params.dilation_width_factor, height, width, filter_height, filter_width,
 800c31e:	69fb      	ldr	r3, [r7, #28]
 800c320:	695b      	ldr	r3, [r3, #20]
      padding, &out_height, &out_width);
 800c322:	6fbe      	ldr	r6, [r7, #120]	; 0x78
 800c324:	f107 0008 	add.w	r0, r7, #8
 800c328:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 800c32c:	9207      	str	r2, [sp, #28]
 800c32e:	f107 0270 	add.w	r2, r7, #112	; 0x70
 800c332:	9206      	str	r2, [sp, #24]
 800c334:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
 800c338:	9205      	str	r2, [sp, #20]
 800c33a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800c33c:	9204      	str	r2, [sp, #16]
 800c33e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800c340:	9203      	str	r2, [sp, #12]
 800c342:	69ba      	ldr	r2, [r7, #24]
 800c344:	9202      	str	r2, [sp, #8]
 800c346:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800c348:	9201      	str	r2, [sp, #4]
 800c34a:	9300      	str	r3, [sp, #0]
 800c34c:	462b      	mov	r3, r5
 800c34e:	4622      	mov	r2, r4
 800c350:	f7ff f9db 	bl	800b70a <_ZN6tflite25ComputePaddingHeightWidthEiiiiiiii13TfLitePaddingPiS1_>
 800c354:	4634      	mov	r4, r6
 800c356:	f107 0308 	add.w	r3, r7, #8
 800c35a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800c35c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

  const TfLiteTensor* input = GetInput(context, node, kConvInputTensor);
 800c360:	4b4c      	ldr	r3, [pc, #304]	; (800c494 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x208>)
 800c362:	681b      	ldr	r3, [r3, #0]
 800c364:	461a      	mov	r2, r3
 800c366:	6a39      	ldr	r1, [r7, #32]
 800c368:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c36a:	f7f9 fe57 	bl	800601c <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
 800c36e:	6438      	str	r0, [r7, #64]	; 0x40
  TF_LITE_ENSURE(context, input != nullptr);
 800c370:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c372:	2b00      	cmp	r3, #0
 800c374:	d10a      	bne.n	800c38c <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x100>
 800c376:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c378:	695c      	ldr	r4, [r3, #20]
 800c37a:	4b47      	ldr	r3, [pc, #284]	; (800c498 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x20c>)
 800c37c:	9300      	str	r3, [sp, #0]
 800c37e:	2362      	movs	r3, #98	; 0x62
 800c380:	4a3f      	ldr	r2, [pc, #252]	; (800c480 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1f4>)
 800c382:	4940      	ldr	r1, [pc, #256]	; (800c484 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1f8>)
 800c384:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c386:	47a0      	blx	r4
 800c388:	2301      	movs	r3, #1
 800c38a:	e073      	b.n	800c474 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1e8>
  const TfLiteTensor* filter = GetInput(context, node, kConvWeightsTensor);
 800c38c:	4b43      	ldr	r3, [pc, #268]	; (800c49c <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x210>)
 800c38e:	681b      	ldr	r3, [r3, #0]
 800c390:	461a      	mov	r2, r3
 800c392:	6a39      	ldr	r1, [r7, #32]
 800c394:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c396:	f7f9 fe41 	bl	800601c <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
 800c39a:	63f8      	str	r0, [r7, #60]	; 0x3c
  TF_LITE_ENSURE(context, filter != nullptr);
 800c39c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c39e:	2b00      	cmp	r3, #0
 800c3a0:	d10a      	bne.n	800c3b8 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x12c>
 800c3a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c3a4:	695c      	ldr	r4, [r3, #20]
 800c3a6:	4b3e      	ldr	r3, [pc, #248]	; (800c4a0 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x214>)
 800c3a8:	9300      	str	r3, [sp, #0]
 800c3aa:	2364      	movs	r3, #100	; 0x64
 800c3ac:	4a34      	ldr	r2, [pc, #208]	; (800c480 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1f4>)
 800c3ae:	4935      	ldr	r1, [pc, #212]	; (800c484 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1f8>)
 800c3b0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c3b2:	47a0      	blx	r4
 800c3b4:	2301      	movs	r3, #1
 800c3b6:	e05d      	b.n	800c474 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1e8>
  const TfLiteTensor* bias =
      GetOptionalInputTensor(context, node, kConvBiasTensor);
 800c3b8:	4b3a      	ldr	r3, [pc, #232]	; (800c4a4 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x218>)
 800c3ba:	681b      	ldr	r3, [r3, #0]
 800c3bc:	461a      	mov	r2, r3
 800c3be:	6a39      	ldr	r1, [r7, #32]
 800c3c0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c3c2:	f7f9 fe5b 	bl	800607c <_ZN6tflite22GetOptionalInputTensorEPK13TfLiteContextPK10TfLiteNodei>
 800c3c6:	63b8      	str	r0, [r7, #56]	; 0x38
  TfLiteTensor* output = GetOutput(context, node, kConvOutputTensor);
 800c3c8:	4b37      	ldr	r3, [pc, #220]	; (800c4a8 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x21c>)
 800c3ca:	681b      	ldr	r3, [r3, #0]
 800c3cc:	461a      	mov	r2, r3
 800c3ce:	6a39      	ldr	r1, [r7, #32]
 800c3d0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c3d2:	f7f9 fe33 	bl	800603c <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei>
 800c3d6:	6378      	str	r0, [r7, #52]	; 0x34
  TF_LITE_ENSURE(context, output != nullptr);
 800c3d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c3da:	2b00      	cmp	r3, #0
 800c3dc:	d10a      	bne.n	800c3f4 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x168>
 800c3de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c3e0:	695c      	ldr	r4, [r3, #20]
 800c3e2:	4b32      	ldr	r3, [pc, #200]	; (800c4ac <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x220>)
 800c3e4:	9300      	str	r3, [sp, #0]
 800c3e6:	2368      	movs	r3, #104	; 0x68
 800c3e8:	4a25      	ldr	r2, [pc, #148]	; (800c480 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1f4>)
 800c3ea:	4926      	ldr	r1, [pc, #152]	; (800c484 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1f8>)
 800c3ec:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c3ee:	47a0      	blx	r4
 800c3f0:	2301      	movs	r3, #1
 800c3f2:	e03f      	b.n	800c474 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1e8>

  // Note that quantized inference requires that all tensors have their
  // parameters set. This is usually done during quantized training.
  if (data_type != kTfLiteFloat32) {
 800c3f4:	f897 3074 	ldrb.w	r3, [r7, #116]	; 0x74
 800c3f8:	2b01      	cmp	r3, #1
 800c3fa:	d02e      	beq.n	800c45a <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1ce>
    int output_channels = filter->dims->data[kDepthwiseConvQuantizedDimension];
 800c3fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c3fe:	689b      	ldr	r3, [r3, #8]
 800c400:	691b      	ldr	r3, [r3, #16]
 800c402:	633b      	str	r3, [r7, #48]	; 0x30

    TF_LITE_ENSURE_STATUS(tflite::PopulateConvolutionQuantizationParams(
 800c404:	69fb      	ldr	r3, [r7, #28]
 800c406:	3310      	adds	r3, #16
 800c408:	607b      	str	r3, [r7, #4]
 800c40a:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800c40c:	321c      	adds	r2, #28
 800c40e:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 800c410:	3120      	adds	r1, #32
 800c412:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 800c414:	302c      	adds	r0, #44	; 0x2c
 800c416:	6fbc      	ldr	r4, [r7, #120]	; 0x78
 800c418:	3430      	adds	r4, #48	; 0x30
 800c41a:	6fbd      	ldr	r5, [r7, #120]	; 0x78
 800c41c:	6a6d      	ldr	r5, [r5, #36]	; 0x24
 800c41e:	6fbe      	ldr	r6, [r7, #120]	; 0x78
 800c420:	6ab6      	ldr	r6, [r6, #40]	; 0x28
 800c422:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c424:	9308      	str	r3, [sp, #32]
 800c426:	9607      	str	r6, [sp, #28]
 800c428:	9506      	str	r5, [sp, #24]
 800c42a:	9405      	str	r4, [sp, #20]
 800c42c:	9004      	str	r0, [sp, #16]
 800c42e:	9103      	str	r1, [sp, #12]
 800c430:	9202      	str	r2, [sp, #8]
 800c432:	687b      	ldr	r3, [r7, #4]
 800c434:	9301      	str	r3, [sp, #4]
 800c436:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c438:	9300      	str	r3, [sp, #0]
 800c43a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c43c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800c43e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800c440:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c442:	f7f9 fe2b 	bl	800609c <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i>
 800c446:	4603      	mov	r3, r0
 800c448:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800c44c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c450:	2b00      	cmp	r3, #0
 800c452:	d002      	beq.n	800c45a <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1ce>
 800c454:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c458:	e00c      	b.n	800c474 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1e8>
        &data->output_activation_min, &data->output_activation_max,
        data->per_channel_output_multiplier, data->per_channel_output_shift,
        output_channels));
  }

  data->input_zero_point = input->params.zero_point;
 800c45a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c45c:	691a      	ldr	r2, [r3, #16]
 800c45e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c460:	611a      	str	r2, [r3, #16]
  data->filter_zero_point = filter->params.zero_point;
 800c462:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c464:	691a      	ldr	r2, [r3, #16]
 800c466:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c468:	615a      	str	r2, [r3, #20]
  data->output_zero_point = output->params.zero_point;
 800c46a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c46c:	691a      	ldr	r2, [r3, #16]
 800c46e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c470:	619a      	str	r2, [r3, #24]

  return kTfLiteOk;
 800c472:	2300      	movs	r3, #0
}
 800c474:	4618      	mov	r0, r3
 800c476:	374c      	adds	r7, #76	; 0x4c
 800c478:	46bd      	mov	sp, r7
 800c47a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c47c:	08017750 	.word	0x08017750
 800c480:	080176ec 	.word	0x080176ec
 800c484:	08017738 	.word	0x08017738
 800c488:	08017790 	.word	0x08017790
 800c48c:	08017794 	.word	0x08017794
 800c490:	08017774 	.word	0x08017774
 800c494:	0801cfb0 	.word	0x0801cfb0
 800c498:	080177a8 	.word	0x080177a8
 800c49c:	0801cfb4 	.word	0x0801cfb4
 800c4a0:	080177bc 	.word	0x080177bc
 800c4a4:	0801cfb8 	.word	0x0801cfb8
 800c4a8:	0801cfbc 	.word	0x0801cfbc
 800c4ac:	080177d0 	.word	0x080177d0

0800c4b0 <_ZN6tflite20DepthwiseConvPrepareEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus DepthwiseConvPrepare(TfLiteContext* context, TfLiteNode* node) {
 800c4b0:	b590      	push	{r4, r7, lr}
 800c4b2:	b099      	sub	sp, #100	; 0x64
 800c4b4:	af08      	add	r7, sp, #32
 800c4b6:	6078      	str	r0, [r7, #4]
 800c4b8:	6039      	str	r1, [r7, #0]
  TFLITE_DCHECK(node->user_data != nullptr);
 800c4ba:	683b      	ldr	r3, [r7, #0]
 800c4bc:	691b      	ldr	r3, [r3, #16]
 800c4be:	2b00      	cmp	r3, #0
 800c4c0:	d101      	bne.n	800c4c6 <_ZN6tflite20DepthwiseConvPrepareEP13TfLiteContextP10TfLiteNode+0x16>
 800c4c2:	f004 f96c 	bl	801079e <abort>
  TFLITE_DCHECK(node->builtin_data != nullptr);
 800c4c6:	683b      	ldr	r3, [r7, #0]
 800c4c8:	695b      	ldr	r3, [r3, #20]
 800c4ca:	2b00      	cmp	r3, #0
 800c4cc:	d101      	bne.n	800c4d2 <_ZN6tflite20DepthwiseConvPrepareEP13TfLiteContextP10TfLiteNode+0x22>
 800c4ce:	f004 f966 	bl	801079e <abort>

  OpDataConv* data = static_cast<OpDataConv*>(node->user_data);
 800c4d2:	683b      	ldr	r3, [r7, #0]
 800c4d4:	691b      	ldr	r3, [r3, #16]
 800c4d6:	63fb      	str	r3, [r7, #60]	; 0x3c
  const auto& params =
 800c4d8:	683b      	ldr	r3, [r7, #0]
 800c4da:	695b      	ldr	r3, [r3, #20]
 800c4dc:	63bb      	str	r3, [r7, #56]	; 0x38
      *(static_cast<const TfLiteDepthwiseConvParams*>(node->builtin_data));

  TfLiteTensor* output = GetOutput(context, node, kDepthwiseConvOutputTensor);
 800c4de:	2200      	movs	r2, #0
 800c4e0:	6839      	ldr	r1, [r7, #0]
 800c4e2:	6878      	ldr	r0, [r7, #4]
 800c4e4:	f7f9 fdaa 	bl	800603c <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei>
 800c4e8:	6378      	str	r0, [r7, #52]	; 0x34
  TF_LITE_ENSURE(context, output != nullptr);
 800c4ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c4ec:	2b00      	cmp	r3, #0
 800c4ee:	d10a      	bne.n	800c506 <_ZN6tflite20DepthwiseConvPrepareEP13TfLiteContextP10TfLiteNode+0x56>
 800c4f0:	687b      	ldr	r3, [r7, #4]
 800c4f2:	695c      	ldr	r4, [r3, #20]
 800c4f4:	4b73      	ldr	r3, [pc, #460]	; (800c6c4 <_ZN6tflite20DepthwiseConvPrepareEP13TfLiteContextP10TfLiteNode+0x214>)
 800c4f6:	9300      	str	r3, [sp, #0]
 800c4f8:	2387      	movs	r3, #135	; 0x87
 800c4fa:	4a73      	ldr	r2, [pc, #460]	; (800c6c8 <_ZN6tflite20DepthwiseConvPrepareEP13TfLiteContextP10TfLiteNode+0x218>)
 800c4fc:	4973      	ldr	r1, [pc, #460]	; (800c6cc <_ZN6tflite20DepthwiseConvPrepareEP13TfLiteContextP10TfLiteNode+0x21c>)
 800c4fe:	6878      	ldr	r0, [r7, #4]
 800c500:	47a0      	blx	r4
 800c502:	2301      	movs	r3, #1
 800c504:	e0da      	b.n	800c6bc <_ZN6tflite20DepthwiseConvPrepareEP13TfLiteContextP10TfLiteNode+0x20c>
  const TfLiteTensor* input =
      GetInput(context, node, kDepthwiseConvInputTensor);
 800c506:	2200      	movs	r2, #0
 800c508:	6839      	ldr	r1, [r7, #0]
 800c50a:	6878      	ldr	r0, [r7, #4]
 800c50c:	f7f9 fd86 	bl	800601c <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
 800c510:	6338      	str	r0, [r7, #48]	; 0x30
  TF_LITE_ENSURE(context, input != nullptr);
 800c512:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c514:	2b00      	cmp	r3, #0
 800c516:	d10a      	bne.n	800c52e <_ZN6tflite20DepthwiseConvPrepareEP13TfLiteContextP10TfLiteNode+0x7e>
 800c518:	687b      	ldr	r3, [r7, #4]
 800c51a:	695c      	ldr	r4, [r3, #20]
 800c51c:	4b6c      	ldr	r3, [pc, #432]	; (800c6d0 <_ZN6tflite20DepthwiseConvPrepareEP13TfLiteContextP10TfLiteNode+0x220>)
 800c51e:	9300      	str	r3, [sp, #0]
 800c520:	238a      	movs	r3, #138	; 0x8a
 800c522:	4a69      	ldr	r2, [pc, #420]	; (800c6c8 <_ZN6tflite20DepthwiseConvPrepareEP13TfLiteContextP10TfLiteNode+0x218>)
 800c524:	4969      	ldr	r1, [pc, #420]	; (800c6cc <_ZN6tflite20DepthwiseConvPrepareEP13TfLiteContextP10TfLiteNode+0x21c>)
 800c526:	6878      	ldr	r0, [r7, #4]
 800c528:	47a0      	blx	r4
 800c52a:	2301      	movs	r3, #1
 800c52c:	e0c6      	b.n	800c6bc <_ZN6tflite20DepthwiseConvPrepareEP13TfLiteContextP10TfLiteNode+0x20c>
  const TfLiteTensor* filter =
      GetInput(context, node, kDepthwiseConvWeightsTensor);
 800c52e:	2201      	movs	r2, #1
 800c530:	6839      	ldr	r1, [r7, #0]
 800c532:	6878      	ldr	r0, [r7, #4]
 800c534:	f7f9 fd72 	bl	800601c <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
 800c538:	62f8      	str	r0, [r7, #44]	; 0x2c
  TF_LITE_ENSURE(context, filter != nullptr);
 800c53a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c53c:	2b00      	cmp	r3, #0
 800c53e:	d10a      	bne.n	800c556 <_ZN6tflite20DepthwiseConvPrepareEP13TfLiteContextP10TfLiteNode+0xa6>
 800c540:	687b      	ldr	r3, [r7, #4]
 800c542:	695c      	ldr	r4, [r3, #20]
 800c544:	4b63      	ldr	r3, [pc, #396]	; (800c6d4 <_ZN6tflite20DepthwiseConvPrepareEP13TfLiteContextP10TfLiteNode+0x224>)
 800c546:	9300      	str	r3, [sp, #0]
 800c548:	238d      	movs	r3, #141	; 0x8d
 800c54a:	4a5f      	ldr	r2, [pc, #380]	; (800c6c8 <_ZN6tflite20DepthwiseConvPrepareEP13TfLiteContextP10TfLiteNode+0x218>)
 800c54c:	495f      	ldr	r1, [pc, #380]	; (800c6cc <_ZN6tflite20DepthwiseConvPrepareEP13TfLiteContextP10TfLiteNode+0x21c>)
 800c54e:	6878      	ldr	r0, [r7, #4]
 800c550:	47a0      	blx	r4
 800c552:	2301      	movs	r3, #1
 800c554:	e0b2      	b.n	800c6bc <_ZN6tflite20DepthwiseConvPrepareEP13TfLiteContextP10TfLiteNode+0x20c>

  const int input_width = input->dims->data[2];
 800c556:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c558:	689b      	ldr	r3, [r3, #8]
 800c55a:	68db      	ldr	r3, [r3, #12]
 800c55c:	62bb      	str	r3, [r7, #40]	; 0x28
  const int input_height = input->dims->data[1];
 800c55e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c560:	689b      	ldr	r3, [r3, #8]
 800c562:	689b      	ldr	r3, [r3, #8]
 800c564:	627b      	str	r3, [r7, #36]	; 0x24
  const int filter_width = filter->dims->data[2];
 800c566:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c568:	689b      	ldr	r3, [r3, #8]
 800c56a:	68db      	ldr	r3, [r3, #12]
 800c56c:	623b      	str	r3, [r7, #32]
  const int filter_height = filter->dims->data[1];
 800c56e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c570:	689b      	ldr	r3, [r3, #8]
 800c572:	689b      	ldr	r3, [r3, #8]
 800c574:	61fb      	str	r3, [r7, #28]
  const int output_width = output->dims->data[2];
 800c576:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c578:	689b      	ldr	r3, [r3, #8]
 800c57a:	68db      	ldr	r3, [r3, #12]
 800c57c:	61bb      	str	r3, [r7, #24]
  const int output_height = output->dims->data[1];
 800c57e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c580:	689b      	ldr	r3, [r3, #8]
 800c582:	689b      	ldr	r3, [r3, #8]
 800c584:	617b      	str	r3, [r7, #20]

  // Dynamically allocate per-channel quantization parameters.
  const int num_channels = filter->dims->data[kDepthwiseConvQuantizedDimension];
 800c586:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c588:	689b      	ldr	r3, [r3, #8]
 800c58a:	691b      	ldr	r3, [r3, #16]
 800c58c:	613b      	str	r3, [r7, #16]
  data->per_channel_output_multiplier =
      static_cast<int32_t*>(context->AllocatePersistentBuffer(
 800c58e:	687b      	ldr	r3, [r7, #4]
 800c590:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          context, num_channels * sizeof(int32_t)));
 800c592:	693a      	ldr	r2, [r7, #16]
      static_cast<int32_t*>(context->AllocatePersistentBuffer(
 800c594:	0092      	lsls	r2, r2, #2
 800c596:	4611      	mov	r1, r2
 800c598:	6878      	ldr	r0, [r7, #4]
 800c59a:	4798      	blx	r3
 800c59c:	4602      	mov	r2, r0
  data->per_channel_output_multiplier =
 800c59e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c5a0:	625a      	str	r2, [r3, #36]	; 0x24
  data->per_channel_output_shift =
      static_cast<int32_t*>(context->AllocatePersistentBuffer(
 800c5a2:	687b      	ldr	r3, [r7, #4]
 800c5a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          context, num_channels * sizeof(int32_t)));
 800c5a6:	693a      	ldr	r2, [r7, #16]
      static_cast<int32_t*>(context->AllocatePersistentBuffer(
 800c5a8:	0092      	lsls	r2, r2, #2
 800c5aa:	4611      	mov	r1, r2
 800c5ac:	6878      	ldr	r0, [r7, #4]
 800c5ae:	4798      	blx	r3
 800c5b0:	4602      	mov	r2, r0
  data->per_channel_output_shift =
 800c5b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c5b4:	629a      	str	r2, [r3, #40]	; 0x28

  // All per-channel quantized tensors need valid zero point and scale arrays.
  if (input->type == kTfLiteInt8) {
 800c5b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c5b8:	781b      	ldrb	r3, [r3, #0]
 800c5ba:	2b09      	cmp	r3, #9
 800c5bc:	d161      	bne.n	800c682 <_ZN6tflite20DepthwiseConvPrepareEP13TfLiteContextP10TfLiteNode+0x1d2>
    TF_LITE_ENSURE_EQ(context, filter->quantization.type,
 800c5be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c5c0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800c5c4:	2b01      	cmp	r3, #1
 800c5c6:	d013      	beq.n	800c5f0 <_ZN6tflite20DepthwiseConvPrepareEP13TfLiteContextP10TfLiteNode+0x140>
 800c5c8:	687b      	ldr	r3, [r7, #4]
 800c5ca:	695c      	ldr	r4, [r3, #20]
 800c5cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c5ce:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800c5d2:	461a      	mov	r2, r3
 800c5d4:	2301      	movs	r3, #1
 800c5d6:	9303      	str	r3, [sp, #12]
 800c5d8:	9202      	str	r2, [sp, #8]
 800c5da:	4b3f      	ldr	r3, [pc, #252]	; (800c6d8 <_ZN6tflite20DepthwiseConvPrepareEP13TfLiteContextP10TfLiteNode+0x228>)
 800c5dc:	9301      	str	r3, [sp, #4]
 800c5de:	4b3f      	ldr	r3, [pc, #252]	; (800c6dc <_ZN6tflite20DepthwiseConvPrepareEP13TfLiteContextP10TfLiteNode+0x22c>)
 800c5e0:	9300      	str	r3, [sp, #0]
 800c5e2:	23a1      	movs	r3, #161	; 0xa1
 800c5e4:	4a38      	ldr	r2, [pc, #224]	; (800c6c8 <_ZN6tflite20DepthwiseConvPrepareEP13TfLiteContextP10TfLiteNode+0x218>)
 800c5e6:	493e      	ldr	r1, [pc, #248]	; (800c6e0 <_ZN6tflite20DepthwiseConvPrepareEP13TfLiteContextP10TfLiteNode+0x230>)
 800c5e8:	6878      	ldr	r0, [r7, #4]
 800c5ea:	47a0      	blx	r4
 800c5ec:	2301      	movs	r3, #1
 800c5ee:	e065      	b.n	800c6bc <_ZN6tflite20DepthwiseConvPrepareEP13TfLiteContextP10TfLiteNode+0x20c>
                      kTfLiteAffineQuantization);

    const auto* affine_quantization =
 800c5f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c5f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c5f4:	60fb      	str	r3, [r7, #12]
        static_cast<TfLiteAffineQuantization*>(filter->quantization.params);
    TFLITE_DCHECK(affine_quantization != nullptr);
 800c5f6:	68fb      	ldr	r3, [r7, #12]
 800c5f8:	2b00      	cmp	r3, #0
 800c5fa:	d101      	bne.n	800c600 <_ZN6tflite20DepthwiseConvPrepareEP13TfLiteContextP10TfLiteNode+0x150>
 800c5fc:	f004 f8cf 	bl	801079e <abort>
    TFLITE_DCHECK(affine_quantization->scale != nullptr);
 800c600:	68fb      	ldr	r3, [r7, #12]
 800c602:	681b      	ldr	r3, [r3, #0]
 800c604:	2b00      	cmp	r3, #0
 800c606:	d101      	bne.n	800c60c <_ZN6tflite20DepthwiseConvPrepareEP13TfLiteContextP10TfLiteNode+0x15c>
 800c608:	f004 f8c9 	bl	801079e <abort>
    TFLITE_DCHECK(affine_quantization->zero_point != nullptr);
 800c60c:	68fb      	ldr	r3, [r7, #12]
 800c60e:	685b      	ldr	r3, [r3, #4]
 800c610:	2b00      	cmp	r3, #0
 800c612:	d101      	bne.n	800c618 <_ZN6tflite20DepthwiseConvPrepareEP13TfLiteContextP10TfLiteNode+0x168>
 800c614:	f004 f8c3 	bl	801079e <abort>

    TF_LITE_ENSURE(
 800c618:	68fb      	ldr	r3, [r7, #12]
 800c61a:	681b      	ldr	r3, [r3, #0]
 800c61c:	681b      	ldr	r3, [r3, #0]
 800c61e:	2b01      	cmp	r3, #1
 800c620:	d012      	beq.n	800c648 <_ZN6tflite20DepthwiseConvPrepareEP13TfLiteContextP10TfLiteNode+0x198>
 800c622:	68fb      	ldr	r3, [r7, #12]
 800c624:	681b      	ldr	r3, [r3, #0]
 800c626:	681a      	ldr	r2, [r3, #0]
 800c628:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c62a:	689b      	ldr	r3, [r3, #8]
 800c62c:	691b      	ldr	r3, [r3, #16]
 800c62e:	429a      	cmp	r2, r3
 800c630:	d00a      	beq.n	800c648 <_ZN6tflite20DepthwiseConvPrepareEP13TfLiteContextP10TfLiteNode+0x198>
 800c632:	687b      	ldr	r3, [r7, #4]
 800c634:	695c      	ldr	r4, [r3, #20]
 800c636:	4b2b      	ldr	r3, [pc, #172]	; (800c6e4 <_ZN6tflite20DepthwiseConvPrepareEP13TfLiteContextP10TfLiteNode+0x234>)
 800c638:	9300      	str	r3, [sp, #0]
 800c63a:	23aa      	movs	r3, #170	; 0xaa
 800c63c:	4a22      	ldr	r2, [pc, #136]	; (800c6c8 <_ZN6tflite20DepthwiseConvPrepareEP13TfLiteContextP10TfLiteNode+0x218>)
 800c63e:	4923      	ldr	r1, [pc, #140]	; (800c6cc <_ZN6tflite20DepthwiseConvPrepareEP13TfLiteContextP10TfLiteNode+0x21c>)
 800c640:	6878      	ldr	r0, [r7, #4]
 800c642:	47a0      	blx	r4
 800c644:	2301      	movs	r3, #1
 800c646:	e039      	b.n	800c6bc <_ZN6tflite20DepthwiseConvPrepareEP13TfLiteContextP10TfLiteNode+0x20c>
        context, affine_quantization->scale->size == 1 ||
                     affine_quantization->scale->size ==
                         filter->dims->data[kDepthwiseConvQuantizedDimension]);

    TF_LITE_ENSURE_EQ(context, affine_quantization->scale->size,
 800c648:	68fb      	ldr	r3, [r7, #12]
 800c64a:	681b      	ldr	r3, [r3, #0]
 800c64c:	681a      	ldr	r2, [r3, #0]
 800c64e:	68fb      	ldr	r3, [r7, #12]
 800c650:	685b      	ldr	r3, [r3, #4]
 800c652:	681b      	ldr	r3, [r3, #0]
 800c654:	429a      	cmp	r2, r3
 800c656:	d014      	beq.n	800c682 <_ZN6tflite20DepthwiseConvPrepareEP13TfLiteContextP10TfLiteNode+0x1d2>
 800c658:	687b      	ldr	r3, [r7, #4]
 800c65a:	695c      	ldr	r4, [r3, #20]
 800c65c:	68fb      	ldr	r3, [r7, #12]
 800c65e:	681b      	ldr	r3, [r3, #0]
 800c660:	681b      	ldr	r3, [r3, #0]
 800c662:	68fa      	ldr	r2, [r7, #12]
 800c664:	6852      	ldr	r2, [r2, #4]
 800c666:	6812      	ldr	r2, [r2, #0]
 800c668:	9203      	str	r2, [sp, #12]
 800c66a:	9302      	str	r3, [sp, #8]
 800c66c:	4b1e      	ldr	r3, [pc, #120]	; (800c6e8 <_ZN6tflite20DepthwiseConvPrepareEP13TfLiteContextP10TfLiteNode+0x238>)
 800c66e:	9301      	str	r3, [sp, #4]
 800c670:	4b1e      	ldr	r3, [pc, #120]	; (800c6ec <_ZN6tflite20DepthwiseConvPrepareEP13TfLiteContextP10TfLiteNode+0x23c>)
 800c672:	9300      	str	r3, [sp, #0]
 800c674:	23af      	movs	r3, #175	; 0xaf
 800c676:	4a14      	ldr	r2, [pc, #80]	; (800c6c8 <_ZN6tflite20DepthwiseConvPrepareEP13TfLiteContextP10TfLiteNode+0x218>)
 800c678:	4919      	ldr	r1, [pc, #100]	; (800c6e0 <_ZN6tflite20DepthwiseConvPrepareEP13TfLiteContextP10TfLiteNode+0x230>)
 800c67a:	6878      	ldr	r0, [r7, #4]
 800c67c:	47a0      	blx	r4
 800c67e:	2301      	movs	r3, #1
 800c680:	e01c      	b.n	800c6bc <_ZN6tflite20DepthwiseConvPrepareEP13TfLiteContextP10TfLiteNode+0x20c>
                      affine_quantization->zero_point->size);
  }

  TF_LITE_ENSURE_STATUS(CalculateOpDataDepthwiseConv(
 800c682:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c684:	781b      	ldrb	r3, [r3, #0]
 800c686:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800c688:	9206      	str	r2, [sp, #24]
 800c68a:	9305      	str	r3, [sp, #20]
 800c68c:	697b      	ldr	r3, [r7, #20]
 800c68e:	9304      	str	r3, [sp, #16]
 800c690:	69bb      	ldr	r3, [r7, #24]
 800c692:	9303      	str	r3, [sp, #12]
 800c694:	69fb      	ldr	r3, [r7, #28]
 800c696:	9302      	str	r3, [sp, #8]
 800c698:	6a3b      	ldr	r3, [r7, #32]
 800c69a:	9301      	str	r3, [sp, #4]
 800c69c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c69e:	9300      	str	r3, [sp, #0]
 800c6a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c6a2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c6a4:	6839      	ldr	r1, [r7, #0]
 800c6a6:	6878      	ldr	r0, [r7, #4]
 800c6a8:	f7ff fdf0 	bl	800c28c <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE>
 800c6ac:	4603      	mov	r3, r0
 800c6ae:	72fb      	strb	r3, [r7, #11]
 800c6b0:	7afb      	ldrb	r3, [r7, #11]
 800c6b2:	2b00      	cmp	r3, #0
 800c6b4:	d001      	beq.n	800c6ba <_ZN6tflite20DepthwiseConvPrepareEP13TfLiteContextP10TfLiteNode+0x20a>
 800c6b6:	7afb      	ldrb	r3, [r7, #11]
 800c6b8:	e000      	b.n	800c6bc <_ZN6tflite20DepthwiseConvPrepareEP13TfLiteContextP10TfLiteNode+0x20c>
      context, node, params, input_width, input_height, filter_width,
      filter_height, output_width, output_height, input->type, data));

  return kTfLiteOk;
 800c6ba:	2300      	movs	r3, #0
}
 800c6bc:	4618      	mov	r0, r3
 800c6be:	3744      	adds	r7, #68	; 0x44
 800c6c0:	46bd      	mov	sp, r7
 800c6c2:	bd90      	pop	{r4, r7, pc}
 800c6c4:	080177d0 	.word	0x080177d0
 800c6c8:	080176ec 	.word	0x080176ec
 800c6cc:	08017738 	.word	0x08017738
 800c6d0:	080177a8 	.word	0x080177a8
 800c6d4:	080177bc 	.word	0x080177bc
 800c6d8:	080177e4 	.word	0x080177e4
 800c6dc:	08017800 	.word	0x08017800
 800c6e0:	08017774 	.word	0x08017774
 800c6e4:	0801781c 	.word	0x0801781c
 800c6e8:	080178a0 	.word	0x080178a0
 800c6ec:	080178c8 	.word	0x080178c8

0800c6f0 <_ZSt3expf>:
  { return __builtin_expf(__x); }
 800c6f0:	b580      	push	{r7, lr}
 800c6f2:	b082      	sub	sp, #8
 800c6f4:	af00      	add	r7, sp, #0
 800c6f6:	ed87 0a01 	vstr	s0, [r7, #4]
 800c6fa:	ed97 0a01 	vldr	s0, [r7, #4]
 800c6fe:	f003 ff2f 	bl	8010560 <expf>
 800c702:	eef0 7a40 	vmov.f32	s15, s0
 800c706:	eeb0 0a67 	vmov.f32	s0, s15
 800c70a:	3708      	adds	r7, #8
 800c70c:	46bd      	mov	sp, r7
 800c70e:	bd80      	pop	{r7, pc}

0800c710 <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi>:
}

// Data is required to be contiguous, and so many operators can use either the
// full array flat size or the flat size with one dimension skipped (commonly
// the depth).
inline int FlatSizeSkipDim(const RuntimeShape& shape, int skip_dim) {
 800c710:	b580      	push	{r7, lr}
 800c712:	b086      	sub	sp, #24
 800c714:	af00      	add	r7, sp, #0
 800c716:	6078      	str	r0, [r7, #4]
 800c718:	6039      	str	r1, [r7, #0]
  const int dims_count = shape.DimensionsCount();
 800c71a:	6878      	ldr	r0, [r7, #4]
 800c71c:	f7fa fa51 	bl	8006bc2 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 800c720:	60f8      	str	r0, [r7, #12]
  TFLITE_DCHECK(skip_dim >= 0 && skip_dim < dims_count);
 800c722:	683b      	ldr	r3, [r7, #0]
 800c724:	2b00      	cmp	r3, #0
 800c726:	db03      	blt.n	800c730 <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi+0x20>
 800c728:	683a      	ldr	r2, [r7, #0]
 800c72a:	68fb      	ldr	r3, [r7, #12]
 800c72c:	429a      	cmp	r2, r3
 800c72e:	db01      	blt.n	800c734 <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi+0x24>
 800c730:	f004 f835 	bl	801079e <abort>
  const auto* dims_data = shape.DimsData();
 800c734:	6878      	ldr	r0, [r7, #4]
 800c736:	f7fe fcce 	bl	800b0d6 <_ZNK6tflite12RuntimeShape8DimsDataEv>
 800c73a:	60b8      	str	r0, [r7, #8]
  int flat_size = 1;
 800c73c:	2301      	movs	r3, #1
 800c73e:	617b      	str	r3, [r7, #20]
  for (int i = 0; i < dims_count; ++i) {
 800c740:	2300      	movs	r3, #0
 800c742:	613b      	str	r3, [r7, #16]
 800c744:	693a      	ldr	r2, [r7, #16]
 800c746:	68fb      	ldr	r3, [r7, #12]
 800c748:	429a      	cmp	r2, r3
 800c74a:	da12      	bge.n	800c772 <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi+0x62>
    flat_size *= (i == skip_dim) ? 1 : dims_data[i];
 800c74c:	693a      	ldr	r2, [r7, #16]
 800c74e:	683b      	ldr	r3, [r7, #0]
 800c750:	429a      	cmp	r2, r3
 800c752:	d005      	beq.n	800c760 <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi+0x50>
 800c754:	693b      	ldr	r3, [r7, #16]
 800c756:	009b      	lsls	r3, r3, #2
 800c758:	68ba      	ldr	r2, [r7, #8]
 800c75a:	4413      	add	r3, r2
 800c75c:	681b      	ldr	r3, [r3, #0]
 800c75e:	e000      	b.n	800c762 <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi+0x52>
 800c760:	2301      	movs	r3, #1
 800c762:	697a      	ldr	r2, [r7, #20]
 800c764:	fb03 f302 	mul.w	r3, r3, r2
 800c768:	617b      	str	r3, [r7, #20]
  for (int i = 0; i < dims_count; ++i) {
 800c76a:	693b      	ldr	r3, [r7, #16]
 800c76c:	3301      	adds	r3, #1
 800c76e:	613b      	str	r3, [r7, #16]
 800c770:	e7e8      	b.n	800c744 <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi+0x34>
  }
  return flat_size;
 800c772:	697b      	ldr	r3, [r7, #20]
}
 800c774:	4618      	mov	r0, r3
 800c776:	3718      	adds	r7, #24
 800c778:	46bd      	mov	sp, r7
 800c77a:	bd80      	pop	{r7, pc}

0800c77c <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf>:
inline void FullyConnected(
    const FullyConnectedParams& params, const RuntimeShape& input_shape,
    const float* input_data, const RuntimeShape& weights_shape,
    const float* weights_data, const RuntimeShape& bias_shape,
    const float* bias_data, const RuntimeShape& output_shape,
    float* output_data) {
 800c77c:	b590      	push	{r4, r7, lr}
 800c77e:	b091      	sub	sp, #68	; 0x44
 800c780:	af00      	add	r7, sp, #0
 800c782:	60f8      	str	r0, [r7, #12]
 800c784:	60b9      	str	r1, [r7, #8]
 800c786:	607a      	str	r2, [r7, #4]
 800c788:	603b      	str	r3, [r7, #0]
  const float output_activation_min = params.float_activation_min;
 800c78a:	68fb      	ldr	r3, [r7, #12]
 800c78c:	69db      	ldr	r3, [r3, #28]
 800c78e:	62bb      	str	r3, [r7, #40]	; 0x28
  const float output_activation_max = params.float_activation_max;
 800c790:	68fb      	ldr	r3, [r7, #12]
 800c792:	6a1b      	ldr	r3, [r3, #32]
 800c794:	627b      	str	r3, [r7, #36]	; 0x24
  // TODO(b/62193649): This really should be:
  //     const int batches = ArraySize(output_dims, 1);
  // but the current --variable_batch hack consists in overwriting the 3rd
  // dimension with the runtime batch size, as we don't keep track for each
  // array of which dimension is the batch dimension in it.
  const int output_dims_count = output_shape.DimensionsCount();
 800c796:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800c798:	f7fa fa13 	bl	8006bc2 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 800c79c:	6238      	str	r0, [r7, #32]
  const int weights_dims_count = weights_shape.DimensionsCount();
 800c79e:	6838      	ldr	r0, [r7, #0]
 800c7a0:	f7fa fa0f 	bl	8006bc2 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 800c7a4:	61f8      	str	r0, [r7, #28]
  const int batches = FlatSizeSkipDim(output_shape, output_dims_count - 1);
 800c7a6:	6a3b      	ldr	r3, [r7, #32]
 800c7a8:	3b01      	subs	r3, #1
 800c7aa:	4619      	mov	r1, r3
 800c7ac:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800c7ae:	f7ff ffaf 	bl	800c710 <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi>
 800c7b2:	61b8      	str	r0, [r7, #24]
  const int output_depth = MatchingDim(weights_shape, weights_dims_count - 2,
 800c7b4:	69fb      	ldr	r3, [r7, #28]
 800c7b6:	1e99      	subs	r1, r3, #2
 800c7b8:	6a3b      	ldr	r3, [r7, #32]
 800c7ba:	3b01      	subs	r3, #1
 800c7bc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800c7be:	6838      	ldr	r0, [r7, #0]
 800c7c0:	f7fe ff13 	bl	800b5ea <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 800c7c4:	6178      	str	r0, [r7, #20]
                                       output_shape, output_dims_count - 1);
  const int accum_depth = weights_shape.Dims(weights_dims_count - 1);
 800c7c6:	69fb      	ldr	r3, [r7, #28]
 800c7c8:	3b01      	subs	r3, #1
 800c7ca:	4619      	mov	r1, r3
 800c7cc:	6838      	ldr	r0, [r7, #0]
 800c7ce:	f7fe fc5d 	bl	800b08c <_ZNK6tflite12RuntimeShape4DimsEi>
 800c7d2:	6138      	str	r0, [r7, #16]
  for (int b = 0; b < batches; ++b) {
 800c7d4:	2300      	movs	r3, #0
 800c7d6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c7d8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800c7da:	69bb      	ldr	r3, [r7, #24]
 800c7dc:	429a      	cmp	r2, r3
 800c7de:	da5f      	bge.n	800c8a0 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x124>
    for (int out_c = 0; out_c < output_depth; ++out_c) {
 800c7e0:	2300      	movs	r3, #0
 800c7e2:	63bb      	str	r3, [r7, #56]	; 0x38
 800c7e4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c7e6:	697b      	ldr	r3, [r7, #20]
 800c7e8:	429a      	cmp	r2, r3
 800c7ea:	da55      	bge.n	800c898 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x11c>
      float total = 0.f;
 800c7ec:	f04f 0300 	mov.w	r3, #0
 800c7f0:	637b      	str	r3, [r7, #52]	; 0x34
      for (int d = 0; d < accum_depth; ++d) {
 800c7f2:	2300      	movs	r3, #0
 800c7f4:	633b      	str	r3, [r7, #48]	; 0x30
 800c7f6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c7f8:	693b      	ldr	r3, [r7, #16]
 800c7fa:	429a      	cmp	r2, r3
 800c7fc:	da21      	bge.n	800c842 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0xc6>
        total += input_data[b * accum_depth + d] *
 800c7fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c800:	693a      	ldr	r2, [r7, #16]
 800c802:	fb02 f203 	mul.w	r2, r2, r3
 800c806:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c808:	4413      	add	r3, r2
 800c80a:	009b      	lsls	r3, r3, #2
 800c80c:	687a      	ldr	r2, [r7, #4]
 800c80e:	4413      	add	r3, r2
 800c810:	ed93 7a00 	vldr	s14, [r3]
                 weights_data[out_c * accum_depth + d];
 800c814:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c816:	693a      	ldr	r2, [r7, #16]
 800c818:	fb02 f203 	mul.w	r2, r2, r3
 800c81c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c81e:	4413      	add	r3, r2
 800c820:	009b      	lsls	r3, r3, #2
 800c822:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800c824:	4413      	add	r3, r2
 800c826:	edd3 7a00 	vldr	s15, [r3]
        total += input_data[b * accum_depth + d] *
 800c82a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c82e:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800c832:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c836:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
      for (int d = 0; d < accum_depth; ++d) {
 800c83a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c83c:	3301      	adds	r3, #1
 800c83e:	633b      	str	r3, [r7, #48]	; 0x30
 800c840:	e7d9      	b.n	800c7f6 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x7a>
      }
      float bias_value = 0.0f;
 800c842:	f04f 0300 	mov.w	r3, #0
 800c846:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (bias_data) {
 800c848:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c84a:	2b00      	cmp	r3, #0
 800c84c:	d005      	beq.n	800c85a <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0xde>
        bias_value = bias_data[out_c];
 800c84e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c850:	009b      	lsls	r3, r3, #2
 800c852:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800c854:	4413      	add	r3, r2
 800c856:	681b      	ldr	r3, [r3, #0]
 800c858:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      output_data[out_c + output_depth * b] = ActivationFunctionWithMinMax(
 800c85a:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800c85e:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800c862:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c866:	697b      	ldr	r3, [r7, #20]
 800c868:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800c86a:	fb02 f203 	mul.w	r2, r2, r3
 800c86e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c870:	4413      	add	r3, r2
 800c872:	009b      	lsls	r3, r3, #2
 800c874:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800c876:	18d4      	adds	r4, r2, r3
 800c878:	ed97 1a09 	vldr	s2, [r7, #36]	; 0x24
 800c87c:	edd7 0a0a 	vldr	s1, [r7, #40]	; 0x28
 800c880:	eeb0 0a67 	vmov.f32	s0, s15
 800c884:	f7fe fe06 	bl	800b494 <_ZN6tflite28ActivationFunctionWithMinMaxIfEET_S1_S1_S1_>
 800c888:	eef0 7a40 	vmov.f32	s15, s0
 800c88c:	edc4 7a00 	vstr	s15, [r4]
    for (int out_c = 0; out_c < output_depth; ++out_c) {
 800c890:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c892:	3301      	adds	r3, #1
 800c894:	63bb      	str	r3, [r7, #56]	; 0x38
 800c896:	e7a5      	b.n	800c7e4 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x68>
  for (int b = 0; b < batches; ++b) {
 800c898:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c89a:	3301      	adds	r3, #1
 800c89c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c89e:	e79b      	b.n	800c7d8 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x5c>
          total + bias_value, output_activation_min, output_activation_max);
    }
  }
}
 800c8a0:	bf00      	nop
 800c8a2:	3744      	adds	r7, #68	; 0x44
 800c8a4:	46bd      	mov	sp, r7
 800c8a6:	bd90      	pop	{r4, r7, pc}

0800c8a8 <_ZN6tflite21reference_integer_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_PKlS6_Pa>:
inline void FullyConnected(
    const FullyConnectedParams& params, const RuntimeShape& input_shape,
    const int8_t* input_data, const RuntimeShape& filter_shape,
    const int8_t* filter_data, const RuntimeShape& bias_shape,
    const int32_t* bias_data, const RuntimeShape& output_shape,
    int8_t* output_data) {
 800c8a8:	b580      	push	{r7, lr}
 800c8aa:	b096      	sub	sp, #88	; 0x58
 800c8ac:	af00      	add	r7, sp, #0
 800c8ae:	60f8      	str	r0, [r7, #12]
 800c8b0:	60b9      	str	r1, [r7, #8]
 800c8b2:	607a      	str	r2, [r7, #4]
 800c8b4:	603b      	str	r3, [r7, #0]
  const int32_t input_offset = params.input_offset;
 800c8b6:	68fb      	ldr	r3, [r7, #12]
 800c8b8:	681b      	ldr	r3, [r3, #0]
 800c8ba:	64bb      	str	r3, [r7, #72]	; 0x48
  const int32_t filter_offset = params.weights_offset;
 800c8bc:	68fb      	ldr	r3, [r7, #12]
 800c8be:	685b      	ldr	r3, [r3, #4]
 800c8c0:	647b      	str	r3, [r7, #68]	; 0x44
  const int32_t output_offset = params.output_offset;
 800c8c2:	68fb      	ldr	r3, [r7, #12]
 800c8c4:	689b      	ldr	r3, [r3, #8]
 800c8c6:	643b      	str	r3, [r7, #64]	; 0x40
  const int32_t output_multiplier = params.output_multiplier;
 800c8c8:	68fb      	ldr	r3, [r7, #12]
 800c8ca:	68db      	ldr	r3, [r3, #12]
 800c8cc:	63fb      	str	r3, [r7, #60]	; 0x3c
  const int output_shift = params.output_shift;
 800c8ce:	68fb      	ldr	r3, [r7, #12]
 800c8d0:	691b      	ldr	r3, [r3, #16]
 800c8d2:	63bb      	str	r3, [r7, #56]	; 0x38
  const int32_t output_activation_min = params.quantized_activation_min;
 800c8d4:	68fb      	ldr	r3, [r7, #12]
 800c8d6:	695b      	ldr	r3, [r3, #20]
 800c8d8:	61fb      	str	r3, [r7, #28]
  const int32_t output_activation_max = params.quantized_activation_max;
 800c8da:	68fb      	ldr	r3, [r7, #12]
 800c8dc:	699b      	ldr	r3, [r3, #24]
 800c8de:	61bb      	str	r3, [r7, #24]
  TFLITE_DCHECK_GE(filter_shape.DimensionsCount(), 2);
 800c8e0:	6838      	ldr	r0, [r7, #0]
 800c8e2:	f7fa f96e 	bl	8006bc2 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 800c8e6:	4603      	mov	r3, r0
 800c8e8:	2b01      	cmp	r3, #1
 800c8ea:	dc01      	bgt.n	800c8f0 <_ZN6tflite21reference_integer_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_PKlS6_Pa+0x48>
 800c8ec:	f003 ff57 	bl	801079e <abort>
  TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 2);
 800c8f0:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800c8f2:	f7fa f966 	bl	8006bc2 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 800c8f6:	4603      	mov	r3, r0
 800c8f8:	2b02      	cmp	r3, #2
 800c8fa:	d001      	beq.n	800c900 <_ZN6tflite21reference_integer_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_PKlS6_Pa+0x58>
 800c8fc:	f003 ff4f 	bl	801079e <abort>

  TFLITE_DCHECK_LE(output_activation_min, output_activation_max);
 800c900:	69fa      	ldr	r2, [r7, #28]
 800c902:	69bb      	ldr	r3, [r7, #24]
 800c904:	429a      	cmp	r2, r3
 800c906:	dd01      	ble.n	800c90c <_ZN6tflite21reference_integer_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_PKlS6_Pa+0x64>
 800c908:	f003 ff49 	bl	801079e <abort>
  const int filter_dim_count = filter_shape.DimensionsCount();
 800c90c:	6838      	ldr	r0, [r7, #0]
 800c90e:	f7fa f958 	bl	8006bc2 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 800c912:	6378      	str	r0, [r7, #52]	; 0x34
  const int batches = output_shape.Dims(0);
 800c914:	2100      	movs	r1, #0
 800c916:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800c918:	f7fe fbb8 	bl	800b08c <_ZNK6tflite12RuntimeShape4DimsEi>
 800c91c:	6338      	str	r0, [r7, #48]	; 0x30
  const int output_depth = output_shape.Dims(1);
 800c91e:	2101      	movs	r1, #1
 800c920:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800c922:	f7fe fbb3 	bl	800b08c <_ZNK6tflite12RuntimeShape4DimsEi>
 800c926:	62f8      	str	r0, [r7, #44]	; 0x2c
  TFLITE_DCHECK_LE(output_depth, filter_shape.Dims(filter_dim_count - 2));
 800c928:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c92a:	3b02      	subs	r3, #2
 800c92c:	4619      	mov	r1, r3
 800c92e:	6838      	ldr	r0, [r7, #0]
 800c930:	f7fe fbac 	bl	800b08c <_ZNK6tflite12RuntimeShape4DimsEi>
 800c934:	4602      	mov	r2, r0
 800c936:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c938:	4293      	cmp	r3, r2
 800c93a:	dd01      	ble.n	800c940 <_ZN6tflite21reference_integer_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_PKlS6_Pa+0x98>
 800c93c:	f003 ff2f 	bl	801079e <abort>
  const int accum_depth = filter_shape.Dims(filter_dim_count - 1);
 800c940:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c942:	3b01      	subs	r3, #1
 800c944:	4619      	mov	r1, r3
 800c946:	6838      	ldr	r0, [r7, #0]
 800c948:	f7fe fba0 	bl	800b08c <_ZNK6tflite12RuntimeShape4DimsEi>
 800c94c:	62b8      	str	r0, [r7, #40]	; 0x28
  for (int b = 0; b < batches; ++b) {
 800c94e:	2300      	movs	r3, #0
 800c950:	657b      	str	r3, [r7, #84]	; 0x54
 800c952:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800c954:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c956:	429a      	cmp	r2, r3
 800c958:	da75      	bge.n	800ca46 <_ZN6tflite21reference_integer_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_PKlS6_Pa+0x19e>
    for (int out_c = 0; out_c < output_depth; ++out_c) {
 800c95a:	2300      	movs	r3, #0
 800c95c:	653b      	str	r3, [r7, #80]	; 0x50
 800c95e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800c960:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c962:	429a      	cmp	r2, r3
 800c964:	da6b      	bge.n	800ca3e <_ZN6tflite21reference_integer_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_PKlS6_Pa+0x196>
      int32_t acc = 0;
 800c966:	2300      	movs	r3, #0
 800c968:	617b      	str	r3, [r7, #20]
      for (int d = 0; d < accum_depth; ++d) {
 800c96a:	2300      	movs	r3, #0
 800c96c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c96e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800c970:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c972:	429a      	cmp	r2, r3
 800c974:	da26      	bge.n	800c9c4 <_ZN6tflite21reference_integer_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_PKlS6_Pa+0x11c>
        int32_t input_val = input_data[b * accum_depth + d];
 800c976:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c978:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c97a:	fb02 f203 	mul.w	r2, r2, r3
 800c97e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c980:	4413      	add	r3, r2
 800c982:	461a      	mov	r2, r3
 800c984:	687b      	ldr	r3, [r7, #4]
 800c986:	4413      	add	r3, r2
 800c988:	f993 3000 	ldrsb.w	r3, [r3]
 800c98c:	627b      	str	r3, [r7, #36]	; 0x24
        int32_t filter_val = filter_data[out_c * accum_depth + d];
 800c98e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c990:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c992:	fb02 f203 	mul.w	r2, r2, r3
 800c996:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c998:	4413      	add	r3, r2
 800c99a:	461a      	mov	r2, r3
 800c99c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c99e:	4413      	add	r3, r2
 800c9a0:	f993 3000 	ldrsb.w	r3, [r3]
 800c9a4:	623b      	str	r3, [r7, #32]
        acc += (filter_val + filter_offset) * (input_val + input_offset);
 800c9a6:	6a3a      	ldr	r2, [r7, #32]
 800c9a8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c9aa:	4413      	add	r3, r2
 800c9ac:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c9ae:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c9b0:	440a      	add	r2, r1
 800c9b2:	fb02 f203 	mul.w	r2, r2, r3
 800c9b6:	697b      	ldr	r3, [r7, #20]
 800c9b8:	4413      	add	r3, r2
 800c9ba:	617b      	str	r3, [r7, #20]
      for (int d = 0; d < accum_depth; ++d) {
 800c9bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c9be:	3301      	adds	r3, #1
 800c9c0:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c9c2:	e7d4      	b.n	800c96e <_ZN6tflite21reference_integer_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_PKlS6_Pa+0xc6>
      }
      if (bias_data) {
 800c9c4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800c9c6:	2b00      	cmp	r3, #0
 800c9c8:	d007      	beq.n	800c9da <_ZN6tflite21reference_integer_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_PKlS6_Pa+0x132>
        acc += bias_data[out_c];
 800c9ca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c9cc:	009b      	lsls	r3, r3, #2
 800c9ce:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800c9d0:	4413      	add	r3, r2
 800c9d2:	681a      	ldr	r2, [r3, #0]
 800c9d4:	697b      	ldr	r3, [r7, #20]
 800c9d6:	4413      	add	r3, r2
 800c9d8:	617b      	str	r3, [r7, #20]
      }
      acc = MultiplyByQuantizedMultiplier(acc, output_multiplier, output_shift);
 800c9da:	697b      	ldr	r3, [r7, #20]
 800c9dc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c9de:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800c9e0:	4618      	mov	r0, r3
 800c9e2:	f7fe fbae 	bl	800b142 <_ZN6tflite29MultiplyByQuantizedMultiplierElli>
 800c9e6:	4603      	mov	r3, r0
 800c9e8:	617b      	str	r3, [r7, #20]
      acc += output_offset;
 800c9ea:	697a      	ldr	r2, [r7, #20]
 800c9ec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c9ee:	4413      	add	r3, r2
 800c9f0:	617b      	str	r3, [r7, #20]
      acc = std::max(acc, output_activation_min);
 800c9f2:	f107 021c 	add.w	r2, r7, #28
 800c9f6:	f107 0314 	add.w	r3, r7, #20
 800c9fa:	4611      	mov	r1, r2
 800c9fc:	4618      	mov	r0, r3
 800c9fe:	f7f9 ff45 	bl	800688c <_ZSt3maxIlERKT_S2_S2_>
 800ca02:	4603      	mov	r3, r0
 800ca04:	681b      	ldr	r3, [r3, #0]
 800ca06:	617b      	str	r3, [r7, #20]
      acc = std::min(acc, output_activation_max);
 800ca08:	f107 0218 	add.w	r2, r7, #24
 800ca0c:	f107 0314 	add.w	r3, r7, #20
 800ca10:	4611      	mov	r1, r2
 800ca12:	4618      	mov	r0, r3
 800ca14:	f7f9 ff26 	bl	8006864 <_ZSt3minIlERKT_S2_S2_>
 800ca18:	4603      	mov	r3, r0
 800ca1a:	681b      	ldr	r3, [r3, #0]
 800ca1c:	617b      	str	r3, [r7, #20]
      output_data[out_c + output_depth * b] = static_cast<int8_t>(acc);
 800ca1e:	6979      	ldr	r1, [r7, #20]
 800ca20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca22:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800ca24:	fb02 f203 	mul.w	r2, r2, r3
 800ca28:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ca2a:	4413      	add	r3, r2
 800ca2c:	461a      	mov	r2, r3
 800ca2e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800ca30:	4413      	add	r3, r2
 800ca32:	b24a      	sxtb	r2, r1
 800ca34:	701a      	strb	r2, [r3, #0]
    for (int out_c = 0; out_c < output_depth; ++out_c) {
 800ca36:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ca38:	3301      	adds	r3, #1
 800ca3a:	653b      	str	r3, [r7, #80]	; 0x50
 800ca3c:	e78f      	b.n	800c95e <_ZN6tflite21reference_integer_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_PKlS6_Pa+0xb6>
  for (int b = 0; b < batches; ++b) {
 800ca3e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ca40:	3301      	adds	r3, #1
 800ca42:	657b      	str	r3, [r7, #84]	; 0x54
 800ca44:	e785      	b.n	800c952 <_ZN6tflite21reference_integer_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_PKlS6_Pa+0xaa>
    }
  }
}
 800ca46:	bf00      	nop
 800ca48:	3758      	adds	r7, #88	; 0x58
 800ca4a:	46bd      	mov	sp, r7
 800ca4c:	bd80      	pop	{r7, pc}

0800ca4e <_ZN6tflite12_GLOBAL__N_14InitEP13TfLiteContextPKcj>:
#include "tensorflow/lite/micro/kernels/kernel_util.h"

namespace tflite {
namespace {

void* Init(TfLiteContext* context, const char* buffer, size_t length) {
 800ca4e:	b580      	push	{r7, lr}
 800ca50:	b084      	sub	sp, #16
 800ca52:	af00      	add	r7, sp, #0
 800ca54:	60f8      	str	r0, [r7, #12]
 800ca56:	60b9      	str	r1, [r7, #8]
 800ca58:	607a      	str	r2, [r7, #4]
  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);
 800ca5a:	68fb      	ldr	r3, [r7, #12]
 800ca5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ca5e:	2b00      	cmp	r3, #0
 800ca60:	d101      	bne.n	800ca66 <_ZN6tflite12_GLOBAL__N_14InitEP13TfLiteContextPKcj+0x18>
 800ca62:	f003 fe9c 	bl	801079e <abort>
  return context->AllocatePersistentBuffer(context,
 800ca66:	68fb      	ldr	r3, [r7, #12]
 800ca68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ca6a:	2120      	movs	r1, #32
 800ca6c:	68f8      	ldr	r0, [r7, #12]
 800ca6e:	4798      	blx	r3
 800ca70:	4603      	mov	r3, r0
                                           sizeof(OpDataFullyConnected));
}
 800ca72:	4618      	mov	r0, r3
 800ca74:	3710      	adds	r7, #16
 800ca76:	46bd      	mov	sp, r7
 800ca78:	bd80      	pop	{r7, pc}
	...

0800ca7c <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {
 800ca7c:	b5b0      	push	{r4, r5, r7, lr}
 800ca7e:	b08c      	sub	sp, #48	; 0x30
 800ca80:	af04      	add	r7, sp, #16
 800ca82:	6078      	str	r0, [r7, #4]
 800ca84:	6039      	str	r1, [r7, #0]
  TFLITE_DCHECK(node->user_data != nullptr);
 800ca86:	683b      	ldr	r3, [r7, #0]
 800ca88:	691b      	ldr	r3, [r3, #16]
 800ca8a:	2b00      	cmp	r3, #0
 800ca8c:	d101      	bne.n	800ca92 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x16>
 800ca8e:	f003 fe86 	bl	801079e <abort>
  TFLITE_DCHECK(node->builtin_data != nullptr);
 800ca92:	683b      	ldr	r3, [r7, #0]
 800ca94:	695b      	ldr	r3, [r3, #20]
 800ca96:	2b00      	cmp	r3, #0
 800ca98:	d101      	bne.n	800ca9e <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x22>
 800ca9a:	f003 fe80 	bl	801079e <abort>

  auto* data = static_cast<OpDataFullyConnected*>(node->user_data);
 800ca9e:	683b      	ldr	r3, [r7, #0]
 800caa0:	691b      	ldr	r3, [r3, #16]
 800caa2:	61fb      	str	r3, [r7, #28]
  const auto params =
 800caa4:	683b      	ldr	r3, [r7, #0]
 800caa6:	695b      	ldr	r3, [r3, #20]
 800caa8:	61bb      	str	r3, [r7, #24]
      static_cast<const TfLiteFullyConnectedParams*>(node->builtin_data);

  const TfLiteTensor* input =
      GetInput(context, node, kFullyConnectedInputTensor);
 800caaa:	4b47      	ldr	r3, [pc, #284]	; (800cbc8 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x14c>)
 800caac:	681b      	ldr	r3, [r3, #0]
 800caae:	461a      	mov	r2, r3
 800cab0:	6839      	ldr	r1, [r7, #0]
 800cab2:	6878      	ldr	r0, [r7, #4]
 800cab4:	f7f9 fab2 	bl	800601c <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
 800cab8:	6178      	str	r0, [r7, #20]
  TF_LITE_ENSURE(context, input != nullptr);
 800caba:	697b      	ldr	r3, [r7, #20]
 800cabc:	2b00      	cmp	r3, #0
 800cabe:	d10a      	bne.n	800cad6 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x5a>
 800cac0:	687b      	ldr	r3, [r7, #4]
 800cac2:	695c      	ldr	r4, [r3, #20]
 800cac4:	4b41      	ldr	r3, [pc, #260]	; (800cbcc <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x150>)
 800cac6:	9300      	str	r3, [sp, #0]
 800cac8:	232f      	movs	r3, #47	; 0x2f
 800caca:	4a41      	ldr	r2, [pc, #260]	; (800cbd0 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x154>)
 800cacc:	4941      	ldr	r1, [pc, #260]	; (800cbd4 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x158>)
 800cace:	6878      	ldr	r0, [r7, #4]
 800cad0:	47a0      	blx	r4
 800cad2:	2301      	movs	r3, #1
 800cad4:	e073      	b.n	800cbbe <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x142>
  const TfLiteTensor* filter =
      GetInput(context, node, kFullyConnectedWeightsTensor);
 800cad6:	4b40      	ldr	r3, [pc, #256]	; (800cbd8 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x15c>)
 800cad8:	681b      	ldr	r3, [r3, #0]
 800cada:	461a      	mov	r2, r3
 800cadc:	6839      	ldr	r1, [r7, #0]
 800cade:	6878      	ldr	r0, [r7, #4]
 800cae0:	f7f9 fa9c 	bl	800601c <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
 800cae4:	6138      	str	r0, [r7, #16]
  TF_LITE_ENSURE(context, filter != nullptr);
 800cae6:	693b      	ldr	r3, [r7, #16]
 800cae8:	2b00      	cmp	r3, #0
 800caea:	d10a      	bne.n	800cb02 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x86>
 800caec:	687b      	ldr	r3, [r7, #4]
 800caee:	695c      	ldr	r4, [r3, #20]
 800caf0:	4b3a      	ldr	r3, [pc, #232]	; (800cbdc <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x160>)
 800caf2:	9300      	str	r3, [sp, #0]
 800caf4:	2332      	movs	r3, #50	; 0x32
 800caf6:	4a36      	ldr	r2, [pc, #216]	; (800cbd0 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x154>)
 800caf8:	4936      	ldr	r1, [pc, #216]	; (800cbd4 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x158>)
 800cafa:	6878      	ldr	r0, [r7, #4]
 800cafc:	47a0      	blx	r4
 800cafe:	2301      	movs	r3, #1
 800cb00:	e05d      	b.n	800cbbe <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x142>
  const TfLiteTensor* bias =
      GetOptionalInputTensor(context, node, kFullyConnectedBiasTensor);
 800cb02:	4b37      	ldr	r3, [pc, #220]	; (800cbe0 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x164>)
 800cb04:	681b      	ldr	r3, [r3, #0]
 800cb06:	461a      	mov	r2, r3
 800cb08:	6839      	ldr	r1, [r7, #0]
 800cb0a:	6878      	ldr	r0, [r7, #4]
 800cb0c:	f7f9 fab6 	bl	800607c <_ZN6tflite22GetOptionalInputTensorEPK13TfLiteContextPK10TfLiteNodei>
 800cb10:	60f8      	str	r0, [r7, #12]
  TfLiteTensor* output = GetOutput(context, node, kFullyConnectedOutputTensor);
 800cb12:	4b34      	ldr	r3, [pc, #208]	; (800cbe4 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x168>)
 800cb14:	681b      	ldr	r3, [r3, #0]
 800cb16:	461a      	mov	r2, r3
 800cb18:	6839      	ldr	r1, [r7, #0]
 800cb1a:	6878      	ldr	r0, [r7, #4]
 800cb1c:	f7f9 fa8e 	bl	800603c <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei>
 800cb20:	60b8      	str	r0, [r7, #8]
  TF_LITE_ENSURE(context, output != nullptr);
 800cb22:	68bb      	ldr	r3, [r7, #8]
 800cb24:	2b00      	cmp	r3, #0
 800cb26:	d10a      	bne.n	800cb3e <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0xc2>
 800cb28:	687b      	ldr	r3, [r7, #4]
 800cb2a:	695c      	ldr	r4, [r3, #20]
 800cb2c:	4b2e      	ldr	r3, [pc, #184]	; (800cbe8 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x16c>)
 800cb2e:	9300      	str	r3, [sp, #0]
 800cb30:	2336      	movs	r3, #54	; 0x36
 800cb32:	4a27      	ldr	r2, [pc, #156]	; (800cbd0 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x154>)
 800cb34:	4927      	ldr	r1, [pc, #156]	; (800cbd4 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x158>)
 800cb36:	6878      	ldr	r0, [r7, #4]
 800cb38:	47a0      	blx	r4
 800cb3a:	2301      	movs	r3, #1
 800cb3c:	e03f      	b.n	800cbbe <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x142>

  TF_LITE_ENSURE_TYPES_EQ(context, input->type, output->type);
 800cb3e:	697b      	ldr	r3, [r7, #20]
 800cb40:	781a      	ldrb	r2, [r3, #0]
 800cb42:	68bb      	ldr	r3, [r7, #8]
 800cb44:	781b      	ldrb	r3, [r3, #0]
 800cb46:	429a      	cmp	r2, r3
 800cb48:	d01a      	beq.n	800cb80 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x104>
 800cb4a:	687b      	ldr	r3, [r7, #4]
 800cb4c:	695c      	ldr	r4, [r3, #20]
 800cb4e:	697b      	ldr	r3, [r7, #20]
 800cb50:	781b      	ldrb	r3, [r3, #0]
 800cb52:	4618      	mov	r0, r3
 800cb54:	f7f6 ffe4 	bl	8003b20 <TfLiteTypeGetName>
 800cb58:	4605      	mov	r5, r0
 800cb5a:	68bb      	ldr	r3, [r7, #8]
 800cb5c:	781b      	ldrb	r3, [r3, #0]
 800cb5e:	4618      	mov	r0, r3
 800cb60:	f7f6 ffde 	bl	8003b20 <TfLiteTypeGetName>
 800cb64:	4603      	mov	r3, r0
 800cb66:	9303      	str	r3, [sp, #12]
 800cb68:	9502      	str	r5, [sp, #8]
 800cb6a:	4b20      	ldr	r3, [pc, #128]	; (800cbec <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x170>)
 800cb6c:	9301      	str	r3, [sp, #4]
 800cb6e:	4b20      	ldr	r3, [pc, #128]	; (800cbf0 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x174>)
 800cb70:	9300      	str	r3, [sp, #0]
 800cb72:	2338      	movs	r3, #56	; 0x38
 800cb74:	4a16      	ldr	r2, [pc, #88]	; (800cbd0 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x154>)
 800cb76:	491f      	ldr	r1, [pc, #124]	; (800cbf4 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x178>)
 800cb78:	6878      	ldr	r0, [r7, #4]
 800cb7a:	47a0      	blx	r4
 800cb7c:	2301      	movs	r3, #1
 800cb7e:	e01e      	b.n	800cbbe <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x142>
  TF_LITE_ENSURE_MSG(context, input->type == filter->type,
 800cb80:	697b      	ldr	r3, [r7, #20]
 800cb82:	781a      	ldrb	r2, [r3, #0]
 800cb84:	693b      	ldr	r3, [r7, #16]
 800cb86:	781b      	ldrb	r3, [r3, #0]
 800cb88:	429a      	cmp	r2, r3
 800cb8a:	d006      	beq.n	800cb9a <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x11e>
 800cb8c:	687b      	ldr	r3, [r7, #4]
 800cb8e:	695b      	ldr	r3, [r3, #20]
 800cb90:	4919      	ldr	r1, [pc, #100]	; (800cbf8 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x17c>)
 800cb92:	6878      	ldr	r0, [r7, #4]
 800cb94:	4798      	blx	r3
 800cb96:	2301      	movs	r3, #1
 800cb98:	e011      	b.n	800cbbe <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x142>
                     "Hybrid models are not supported on TFLite Micro.");

  return CalculateOpDataFullyConnected(context, params->activation, input->type,
 800cb9a:	69bb      	ldr	r3, [r7, #24]
 800cb9c:	7819      	ldrb	r1, [r3, #0]
 800cb9e:	697b      	ldr	r3, [r7, #20]
 800cba0:	781a      	ldrb	r2, [r3, #0]
 800cba2:	69fb      	ldr	r3, [r7, #28]
 800cba4:	9303      	str	r3, [sp, #12]
 800cba6:	68bb      	ldr	r3, [r7, #8]
 800cba8:	9302      	str	r3, [sp, #8]
 800cbaa:	68fb      	ldr	r3, [r7, #12]
 800cbac:	9301      	str	r3, [sp, #4]
 800cbae:	693b      	ldr	r3, [r7, #16]
 800cbb0:	9300      	str	r3, [sp, #0]
 800cbb2:	697b      	ldr	r3, [r7, #20]
 800cbb4:	6878      	ldr	r0, [r7, #4]
 800cbb6:	f000 f9a8 	bl	800cf0a <_ZN6tflite29CalculateOpDataFullyConnectedEP13TfLiteContext21TfLiteFusedActivation10TfLiteTypePK12TfLiteTensorS6_S6_PS4_PNS_20OpDataFullyConnectedE>
 800cbba:	4603      	mov	r3, r0
                                       input, filter, bias, output, data);
 800cbbc:	bf00      	nop
}
 800cbbe:	4618      	mov	r0, r3
 800cbc0:	3720      	adds	r7, #32
 800cbc2:	46bd      	mov	sp, r7
 800cbc4:	bdb0      	pop	{r4, r5, r7, pc}
 800cbc6:	bf00      	nop
 800cbc8:	0801cfd0 	.word	0x0801cfd0
 800cbcc:	08017948 	.word	0x08017948
 800cbd0:	080178ec 	.word	0x080178ec
 800cbd4:	08017930 	.word	0x08017930
 800cbd8:	0801cfd4 	.word	0x0801cfd4
 800cbdc:	0801795c 	.word	0x0801795c
 800cbe0:	0801cfd8 	.word	0x0801cfd8
 800cbe4:	0801cfdc 	.word	0x0801cfdc
 800cbe8:	08017970 	.word	0x08017970
 800cbec:	080179a0 	.word	0x080179a0
 800cbf0:	080179b0 	.word	0x080179b0
 800cbf4:	08017984 	.word	0x08017984
 800cbf8:	080179bc 	.word	0x080179bc

0800cbfc <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
 800cbfc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cbfe:	b0d3      	sub	sp, #332	; 0x14c
 800cc00:	af06      	add	r7, sp, #24
 800cc02:	1d3b      	adds	r3, r7, #4
 800cc04:	6018      	str	r0, [r3, #0]
 800cc06:	463b      	mov	r3, r7
 800cc08:	6019      	str	r1, [r3, #0]
  TFLITE_DCHECK(node->builtin_data != nullptr);
 800cc0a:	463b      	mov	r3, r7
 800cc0c:	681b      	ldr	r3, [r3, #0]
 800cc0e:	695b      	ldr	r3, [r3, #20]
 800cc10:	2b00      	cmp	r3, #0
 800cc12:	d101      	bne.n	800cc18 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1c>
 800cc14:	f003 fdc3 	bl	801079e <abort>
  const auto* params =
 800cc18:	463b      	mov	r3, r7
 800cc1a:	681b      	ldr	r3, [r3, #0]
 800cc1c:	695b      	ldr	r3, [r3, #20]
 800cc1e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
      static_cast<const TfLiteFullyConnectedParams*>(node->builtin_data);

  const TfLiteEvalTensor* input =
      tflite::micro::GetEvalInput(context, node, kFullyConnectedInputTensor);
 800cc22:	4b8a      	ldr	r3, [pc, #552]	; (800ce4c <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x250>)
 800cc24:	681a      	ldr	r2, [r3, #0]
 800cc26:	4639      	mov	r1, r7
 800cc28:	1d3b      	adds	r3, r7, #4
 800cc2a:	6809      	ldr	r1, [r1, #0]
 800cc2c:	6818      	ldr	r0, [r3, #0]
 800cc2e:	f7fe f94d 	bl	800aecc <_ZN6tflite5micro12GetEvalInputEPK13TfLiteContextPK10TfLiteNodei>
 800cc32:	f8c7 0128 	str.w	r0, [r7, #296]	; 0x128
  const TfLiteEvalTensor* filter =
      tflite::micro::GetEvalInput(context, node, kFullyConnectedWeightsTensor);
 800cc36:	4b86      	ldr	r3, [pc, #536]	; (800ce50 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x254>)
 800cc38:	681a      	ldr	r2, [r3, #0]
 800cc3a:	4639      	mov	r1, r7
 800cc3c:	1d3b      	adds	r3, r7, #4
 800cc3e:	6809      	ldr	r1, [r1, #0]
 800cc40:	6818      	ldr	r0, [r3, #0]
 800cc42:	f7fe f943 	bl	800aecc <_ZN6tflite5micro12GetEvalInputEPK13TfLiteContextPK10TfLiteNodei>
 800cc46:	f8c7 0124 	str.w	r0, [r7, #292]	; 0x124
  const TfLiteEvalTensor* bias =
      tflite::micro::GetEvalInput(context, node, kFullyConnectedBiasTensor);
 800cc4a:	4b82      	ldr	r3, [pc, #520]	; (800ce54 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x258>)
 800cc4c:	681a      	ldr	r2, [r3, #0]
 800cc4e:	4639      	mov	r1, r7
 800cc50:	1d3b      	adds	r3, r7, #4
 800cc52:	6809      	ldr	r1, [r1, #0]
 800cc54:	6818      	ldr	r0, [r3, #0]
 800cc56:	f7fe f939 	bl	800aecc <_ZN6tflite5micro12GetEvalInputEPK13TfLiteContextPK10TfLiteNodei>
 800cc5a:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120
  TfLiteEvalTensor* output =
      tflite::micro::GetEvalOutput(context, node, kFullyConnectedOutputTensor);
 800cc5e:	4b7e      	ldr	r3, [pc, #504]	; (800ce58 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x25c>)
 800cc60:	681a      	ldr	r2, [r3, #0]
 800cc62:	4639      	mov	r1, r7
 800cc64:	1d3b      	adds	r3, r7, #4
 800cc66:	6809      	ldr	r1, [r1, #0]
 800cc68:	6818      	ldr	r0, [r3, #0]
 800cc6a:	f7fe f93f 	bl	800aeec <_ZN6tflite5micro13GetEvalOutputEPK13TfLiteContextPK10TfLiteNodei>
 800cc6e:	f8c7 011c 	str.w	r0, [r7, #284]	; 0x11c

  TFLITE_DCHECK(node->user_data != nullptr);
 800cc72:	463b      	mov	r3, r7
 800cc74:	681b      	ldr	r3, [r3, #0]
 800cc76:	691b      	ldr	r3, [r3, #16]
 800cc78:	2b00      	cmp	r3, #0
 800cc7a:	d101      	bne.n	800cc80 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x84>
 800cc7c:	f003 fd8f 	bl	801079e <abort>
  const auto& data =
 800cc80:	463b      	mov	r3, r7
 800cc82:	681b      	ldr	r3, [r3, #0]
 800cc84:	691b      	ldr	r3, [r3, #16]
 800cc86:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
      *(static_cast<const OpDataFullyConnected*>(node->user_data));

  // Checks in Prepare ensure input, output and filter types are all the same.
  switch (input->type) {
 800cc8a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800cc8e:	7a1b      	ldrb	r3, [r3, #8]
 800cc90:	2b01      	cmp	r3, #1
 800cc92:	d002      	beq.n	800cc9a <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x9e>
 800cc94:	2b09      	cmp	r3, #9
 800cc96:	d061      	beq.n	800cd5c <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x160>
 800cc98:	e0bf      	b.n	800ce1a <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x21e>
    case kTfLiteFloat32: {
      tflite::reference_ops::FullyConnected(
          FullyConnectedParamsFloat(params->activation),
 800cc9a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800cc9e:	781a      	ldrb	r2, [r3, #0]
 800cca0:	f107 0308 	add.w	r3, r7, #8
 800cca4:	4611      	mov	r1, r2
 800cca6:	4618      	mov	r0, r3
 800cca8:	f000 f91a 	bl	800cee0 <_ZN6tflite25FullyConnectedParamsFloatE21TfLiteFusedActivation>
          tflite::micro::GetTensorShape(input),
 800ccac:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800ccb0:	f8d7 1128 	ldr.w	r1, [r7, #296]	; 0x128
 800ccb4:	4618      	mov	r0, r3
 800ccb6:	f000 f97e 	bl	800cfb6 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      tflite::reference_ops::FullyConnected(
 800ccba:	f8d7 0128 	ldr.w	r0, [r7, #296]	; 0x128
 800ccbe:	f7fe f935 	bl	800af2c <_ZN6tflite5micro13GetTensorDataIfEEPKT_PK16TfLiteEvalTensor>
 800ccc2:	4606      	mov	r6, r0
          tflite::micro::GetTensorData<float>(input),
          tflite::micro::GetTensorShape(filter),
 800ccc4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800ccc8:	f8d7 1124 	ldr.w	r1, [r7, #292]	; 0x124
 800cccc:	4618      	mov	r0, r3
 800ccce:	f000 f972 	bl	800cfb6 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      tflite::reference_ops::FullyConnected(
 800ccd2:	f8d7 0124 	ldr.w	r0, [r7, #292]	; 0x124
 800ccd6:	f7fe f929 	bl	800af2c <_ZN6tflite5micro13GetTensorDataIfEEPKT_PK16TfLiteEvalTensor>
 800ccda:	4604      	mov	r4, r0
          tflite::micro::GetTensorData<float>(filter),
          tflite::micro::GetTensorShape(bias),
 800ccdc:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800cce0:	f8d7 1120 	ldr.w	r1, [r7, #288]	; 0x120
 800cce4:	4618      	mov	r0, r3
 800cce6:	f000 f966 	bl	800cfb6 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      tflite::reference_ops::FullyConnected(
 800ccea:	f8d7 0120 	ldr.w	r0, [r7, #288]	; 0x120
 800ccee:	f7fe f91d 	bl	800af2c <_ZN6tflite5micro13GetTensorDataIfEEPKT_PK16TfLiteEvalTensor>
 800ccf2:	4605      	mov	r5, r0
          tflite::micro::GetTensorData<float>(bias),
          tflite::micro::GetTensorShape(output),
 800ccf4:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800ccf8:	f8d7 111c 	ldr.w	r1, [r7, #284]	; 0x11c
 800ccfc:	4618      	mov	r0, r3
 800ccfe:	f000 f95a 	bl	800cfb6 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      tflite::reference_ops::FullyConnected(
 800cd02:	f8d7 011c 	ldr.w	r0, [r7, #284]	; 0x11c
 800cd06:	f7fe f920 	bl	800af4a <_ZN6tflite5micro13GetTensorDataIfEEPT_P16TfLiteEvalTensor>
 800cd0a:	4603      	mov	r3, r0
 800cd0c:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800cd10:	f107 0130 	add.w	r1, r7, #48	; 0x30
 800cd14:	f107 0008 	add.w	r0, r7, #8
 800cd18:	9304      	str	r3, [sp, #16]
 800cd1a:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800cd1e:	9303      	str	r3, [sp, #12]
 800cd20:	9502      	str	r5, [sp, #8]
 800cd22:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800cd26:	9301      	str	r3, [sp, #4]
 800cd28:	9400      	str	r4, [sp, #0]
 800cd2a:	4613      	mov	r3, r2
 800cd2c:	4632      	mov	r2, r6
 800cd2e:	f7ff fd25 	bl	800c77c <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf>
          tflite::micro::GetTensorShape(output),
 800cd32:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800cd36:	4618      	mov	r0, r3
 800cd38:	f7f9 ff2d 	bl	8006b96 <_ZN6tflite12RuntimeShapeD1Ev>
          tflite::micro::GetTensorShape(bias),
 800cd3c:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800cd40:	4618      	mov	r0, r3
 800cd42:	f7f9 ff28 	bl	8006b96 <_ZN6tflite12RuntimeShapeD1Ev>
          tflite::micro::GetTensorShape(filter),
 800cd46:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800cd4a:	4618      	mov	r0, r3
 800cd4c:	f7f9 ff23 	bl	8006b96 <_ZN6tflite12RuntimeShapeD1Ev>
          tflite::micro::GetTensorShape(input),
 800cd50:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800cd54:	4618      	mov	r0, r3
 800cd56:	f7f9 ff1e 	bl	8006b96 <_ZN6tflite12RuntimeShapeD1Ev>
          tflite::micro::GetTensorData<float>(output));
      break;
 800cd5a:	e071      	b.n	800ce40 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x244>
    }

    case kTfLiteInt8: {
      tflite::reference_integer_ops::FullyConnected(
          FullyConnectedParamsQuantized(data),
 800cd5c:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800cd60:	f8d7 1118 	ldr.w	r1, [r7, #280]	; 0x118
 800cd64:	4618      	mov	r0, r3
 800cd66:	f000 f891 	bl	800ce8c <_ZN6tflite29FullyConnectedParamsQuantizedERKNS_20OpDataFullyConnectedE>
          tflite::micro::GetTensorShape(input),
 800cd6a:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 800cd6e:	f8d7 1128 	ldr.w	r1, [r7, #296]	; 0x128
 800cd72:	4618      	mov	r0, r3
 800cd74:	f000 f91f 	bl	800cfb6 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      tflite::reference_integer_ops::FullyConnected(
 800cd78:	f8d7 0128 	ldr.w	r0, [r7, #296]	; 0x128
 800cd7c:	f7fe f8f6 	bl	800af6c <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor>
 800cd80:	4606      	mov	r6, r0
          tflite::micro::GetTensorData<int8_t>(input),
          tflite::micro::GetTensorShape(filter),
 800cd82:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 800cd86:	f8d7 1124 	ldr.w	r1, [r7, #292]	; 0x124
 800cd8a:	4618      	mov	r0, r3
 800cd8c:	f000 f913 	bl	800cfb6 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      tflite::reference_integer_ops::FullyConnected(
 800cd90:	f8d7 0124 	ldr.w	r0, [r7, #292]	; 0x124
 800cd94:	f7fe f8ea 	bl	800af6c <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor>
 800cd98:	4604      	mov	r4, r0
          tflite::micro::GetTensorData<int8_t>(filter),
          tflite::micro::GetTensorShape(bias),
 800cd9a:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 800cd9e:	f8d7 1120 	ldr.w	r1, [r7, #288]	; 0x120
 800cda2:	4618      	mov	r0, r3
 800cda4:	f000 f907 	bl	800cfb6 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      tflite::reference_integer_ops::FullyConnected(
 800cda8:	f8d7 0120 	ldr.w	r0, [r7, #288]	; 0x120
 800cdac:	f7fe fc0e 	bl	800b5cc <_ZN6tflite5micro13GetTensorDataIlEEPKT_PK16TfLiteEvalTensor>
 800cdb0:	4605      	mov	r5, r0
          tflite::micro::GetTensorData<int32_t>(bias),
          tflite::micro::GetTensorShape(output),
 800cdb2:	f507 7380 	add.w	r3, r7, #256	; 0x100
 800cdb6:	f8d7 111c 	ldr.w	r1, [r7, #284]	; 0x11c
 800cdba:	4618      	mov	r0, r3
 800cdbc:	f000 f8fb 	bl	800cfb6 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      tflite::reference_integer_ops::FullyConnected(
 800cdc0:	f8d7 011c 	ldr.w	r0, [r7, #284]	; 0x11c
 800cdc4:	f7fe f8e1 	bl	800af8a <_ZN6tflite5micro13GetTensorDataIaEEPT_P16TfLiteEvalTensor>
 800cdc8:	4603      	mov	r3, r0
 800cdca:	f107 02d0 	add.w	r2, r7, #208	; 0xd0
 800cdce:	f107 01b8 	add.w	r1, r7, #184	; 0xb8
 800cdd2:	f107 0090 	add.w	r0, r7, #144	; 0x90
 800cdd6:	9304      	str	r3, [sp, #16]
 800cdd8:	f507 7380 	add.w	r3, r7, #256	; 0x100
 800cddc:	9303      	str	r3, [sp, #12]
 800cdde:	9502      	str	r5, [sp, #8]
 800cde0:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 800cde4:	9301      	str	r3, [sp, #4]
 800cde6:	9400      	str	r4, [sp, #0]
 800cde8:	4613      	mov	r3, r2
 800cdea:	4632      	mov	r2, r6
 800cdec:	f7ff fd5c 	bl	800c8a8 <_ZN6tflite21reference_integer_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_PKlS6_Pa>
          tflite::micro::GetTensorShape(output),
 800cdf0:	f507 7380 	add.w	r3, r7, #256	; 0x100
 800cdf4:	4618      	mov	r0, r3
 800cdf6:	f7f9 fece 	bl	8006b96 <_ZN6tflite12RuntimeShapeD1Ev>
          tflite::micro::GetTensorShape(bias),
 800cdfa:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 800cdfe:	4618      	mov	r0, r3
 800ce00:	f7f9 fec9 	bl	8006b96 <_ZN6tflite12RuntimeShapeD1Ev>
          tflite::micro::GetTensorShape(filter),
 800ce04:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 800ce08:	4618      	mov	r0, r3
 800ce0a:	f7f9 fec4 	bl	8006b96 <_ZN6tflite12RuntimeShapeD1Ev>
          tflite::micro::GetTensorShape(input),
 800ce0e:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 800ce12:	4618      	mov	r0, r3
 800ce14:	f7f9 febf 	bl	8006b96 <_ZN6tflite12RuntimeShapeD1Ev>
          tflite::micro::GetTensorData<int8_t>(output));
      break;
 800ce18:	e012      	b.n	800ce40 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x244>
    }

    default: {
      TF_LITE_KERNEL_LOG(context, "Type %s (%d) not supported.",
 800ce1a:	1d3b      	adds	r3, r7, #4
 800ce1c:	681b      	ldr	r3, [r3, #0]
 800ce1e:	695c      	ldr	r4, [r3, #20]
 800ce20:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800ce24:	7a1b      	ldrb	r3, [r3, #8]
 800ce26:	4618      	mov	r0, r3
 800ce28:	f7f6 fe7a 	bl	8003b20 <TfLiteTypeGetName>
 800ce2c:	4602      	mov	r2, r0
 800ce2e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800ce32:	7a1b      	ldrb	r3, [r3, #8]
 800ce34:	1d38      	adds	r0, r7, #4
 800ce36:	4909      	ldr	r1, [pc, #36]	; (800ce5c <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x260>)
 800ce38:	6800      	ldr	r0, [r0, #0]
 800ce3a:	47a0      	blx	r4
                         TfLiteTypeGetName(input->type), input->type);
      return kTfLiteError;
 800ce3c:	2301      	movs	r3, #1
 800ce3e:	e000      	b.n	800ce42 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x246>
    }
  }
  return kTfLiteOk;
 800ce40:	2300      	movs	r3, #0
}
 800ce42:	4618      	mov	r0, r3
 800ce44:	f507 779a 	add.w	r7, r7, #308	; 0x134
 800ce48:	46bd      	mov	sp, r7
 800ce4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ce4c:	0801cfd0 	.word	0x0801cfd0
 800ce50:	0801cfd4 	.word	0x0801cfd4
 800ce54:	0801cfd8 	.word	0x0801cfd8
 800ce58:	0801cfdc 	.word	0x0801cfdc
 800ce5c:	08017a34 	.word	0x08017a34

0800ce60 <_ZN6tflite24Register_FULLY_CONNECTEDEv>:

}  // namespace

TfLiteRegistration Register_FULLY_CONNECTED() {
 800ce60:	b4b0      	push	{r4, r5, r7}
 800ce62:	b083      	sub	sp, #12
 800ce64:	af00      	add	r7, sp, #0
 800ce66:	6078      	str	r0, [r7, #4]
          /*prepare=*/Prepare,
          /*invoke=*/Eval,
          /*profiling_string=*/nullptr,
          /*builtin_code=*/0,
          /*custom_name=*/nullptr,
          /*version=*/0};
 800ce68:	687b      	ldr	r3, [r7, #4]
 800ce6a:	4a07      	ldr	r2, [pc, #28]	; (800ce88 <_ZN6tflite24Register_FULLY_CONNECTEDEv+0x28>)
 800ce6c:	461c      	mov	r4, r3
 800ce6e:	4615      	mov	r5, r2
 800ce70:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ce72:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ce74:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800ce78:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 800ce7c:	6878      	ldr	r0, [r7, #4]
 800ce7e:	370c      	adds	r7, #12
 800ce80:	46bd      	mov	sp, r7
 800ce82:	bcb0      	pop	{r4, r5, r7}
 800ce84:	4770      	bx	lr
 800ce86:	bf00      	nop
 800ce88:	08017a50 	.word	0x08017a50

0800ce8c <_ZN6tflite29FullyConnectedParamsQuantizedERKNS_20OpDataFullyConnectedE>:
const int kFullyConnectedWeightsTensor = 1;
const int kFullyConnectedBiasTensor = 2;
const int kFullyConnectedOutputTensor = 0;

FullyConnectedParams FullyConnectedParamsQuantized(
    const OpDataFullyConnected& op_data) {
 800ce8c:	b480      	push	{r7}
 800ce8e:	b083      	sub	sp, #12
 800ce90:	af00      	add	r7, sp, #0
 800ce92:	6078      	str	r0, [r7, #4]
 800ce94:	6039      	str	r1, [r7, #0]
  FullyConnectedParams op_params;
  op_params.input_offset = -op_data.input_zero_point;
 800ce96:	683b      	ldr	r3, [r7, #0]
 800ce98:	695b      	ldr	r3, [r3, #20]
 800ce9a:	425a      	negs	r2, r3
 800ce9c:	687b      	ldr	r3, [r7, #4]
 800ce9e:	601a      	str	r2, [r3, #0]
  op_params.weights_offset = -op_data.filter_zero_point;
 800cea0:	683b      	ldr	r3, [r7, #0]
 800cea2:	699b      	ldr	r3, [r3, #24]
 800cea4:	425a      	negs	r2, r3
 800cea6:	687b      	ldr	r3, [r7, #4]
 800cea8:	605a      	str	r2, [r3, #4]
  op_params.output_offset = op_data.output_zero_point;
 800ceaa:	683b      	ldr	r3, [r7, #0]
 800ceac:	69da      	ldr	r2, [r3, #28]
 800ceae:	687b      	ldr	r3, [r7, #4]
 800ceb0:	609a      	str	r2, [r3, #8]
  op_params.output_multiplier = op_data.output_multiplier;
 800ceb2:	683b      	ldr	r3, [r7, #0]
 800ceb4:	681a      	ldr	r2, [r3, #0]
 800ceb6:	687b      	ldr	r3, [r7, #4]
 800ceb8:	60da      	str	r2, [r3, #12]
  op_params.output_shift = op_data.output_shift;
 800ceba:	683b      	ldr	r3, [r7, #0]
 800cebc:	685a      	ldr	r2, [r3, #4]
 800cebe:	687b      	ldr	r3, [r7, #4]
 800cec0:	611a      	str	r2, [r3, #16]
  op_params.quantized_activation_min = op_data.output_activation_min;
 800cec2:	683b      	ldr	r3, [r7, #0]
 800cec4:	689a      	ldr	r2, [r3, #8]
 800cec6:	687b      	ldr	r3, [r7, #4]
 800cec8:	615a      	str	r2, [r3, #20]
  op_params.quantized_activation_max = op_data.output_activation_max;
 800ceca:	683b      	ldr	r3, [r7, #0]
 800cecc:	68da      	ldr	r2, [r3, #12]
 800cece:	687b      	ldr	r3, [r7, #4]
 800ced0:	619a      	str	r2, [r3, #24]
  return op_params;
 800ced2:	bf00      	nop
}
 800ced4:	6878      	ldr	r0, [r7, #4]
 800ced6:	370c      	adds	r7, #12
 800ced8:	46bd      	mov	sp, r7
 800ceda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cede:	4770      	bx	lr

0800cee0 <_ZN6tflite25FullyConnectedParamsFloatE21TfLiteFusedActivation>:

FullyConnectedParams FullyConnectedParamsFloat(
    TfLiteFusedActivation activation) {
 800cee0:	b580      	push	{r7, lr}
 800cee2:	b082      	sub	sp, #8
 800cee4:	af00      	add	r7, sp, #0
 800cee6:	6078      	str	r0, [r7, #4]
 800cee8:	460b      	mov	r3, r1
 800ceea:	70fb      	strb	r3, [r7, #3]
  FullyConnectedParams op_params;
  CalculateActivationRange(activation, &op_params.float_activation_min,
 800ceec:	687b      	ldr	r3, [r7, #4]
 800ceee:	f103 0220 	add.w	r2, r3, #32
 800cef2:	687b      	ldr	r3, [r7, #4]
 800cef4:	f103 011c 	add.w	r1, r3, #28
 800cef8:	78fb      	ldrb	r3, [r7, #3]
 800cefa:	4618      	mov	r0, r3
 800cefc:	f7fe faea 	bl	800b4d4 <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_>
                           &op_params.float_activation_max);
  return op_params;
 800cf00:	bf00      	nop
}
 800cf02:	6878      	ldr	r0, [r7, #4]
 800cf04:	3708      	adds	r7, #8
 800cf06:	46bd      	mov	sp, r7
 800cf08:	bd80      	pop	{r7, pc}

0800cf0a <_ZN6tflite29CalculateOpDataFullyConnectedEP13TfLiteContext21TfLiteFusedActivation10TfLiteTypePK12TfLiteTensorS6_S6_PS4_PNS_20OpDataFullyConnectedE>:

TfLiteStatus CalculateOpDataFullyConnected(
    TfLiteContext* context, TfLiteFusedActivation activation,
    TfLiteType data_type, const TfLiteTensor* input, const TfLiteTensor* filter,
    const TfLiteTensor* bias, TfLiteTensor* output,
    OpDataFullyConnected* data) {
 800cf0a:	b580      	push	{r7, lr}
 800cf0c:	b08a      	sub	sp, #40	; 0x28
 800cf0e:	af02      	add	r7, sp, #8
 800cf10:	60f8      	str	r0, [r7, #12]
 800cf12:	607b      	str	r3, [r7, #4]
 800cf14:	460b      	mov	r3, r1
 800cf16:	72fb      	strb	r3, [r7, #11]
 800cf18:	4613      	mov	r3, r2
 800cf1a:	72bb      	strb	r3, [r7, #10]
  if (data_type != kTfLiteFloat32) {
 800cf1c:	7abb      	ldrb	r3, [r7, #10]
 800cf1e:	2b01      	cmp	r3, #1
 800cf20:	d044      	beq.n	800cfac <_ZN6tflite29CalculateOpDataFullyConnectedEP13TfLiteContext21TfLiteFusedActivation10TfLiteTypePK12TfLiteTensorS6_S6_PS4_PNS_20OpDataFullyConnectedE+0xa2>
    double real_multiplier = 0.0;
 800cf22:	f04f 0200 	mov.w	r2, #0
 800cf26:	f04f 0300 	mov.w	r3, #0
 800cf2a:	e9c7 2304 	strd	r2, r3, [r7, #16]
    TF_LITE_ENSURE_STATUS(GetQuantizedConvolutionMultipler(
 800cf2e:	f107 0310 	add.w	r3, r7, #16
 800cf32:	9301      	str	r3, [sp, #4]
 800cf34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf36:	9300      	str	r3, [sp, #0]
 800cf38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf3a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cf3c:	6879      	ldr	r1, [r7, #4]
 800cf3e:	68f8      	ldr	r0, [r7, #12]
 800cf40:	f7f9 fa46 	bl	80063d0 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd>
 800cf44:	4603      	mov	r3, r0
 800cf46:	77fb      	strb	r3, [r7, #31]
 800cf48:	7ffb      	ldrb	r3, [r7, #31]
 800cf4a:	2b00      	cmp	r3, #0
 800cf4c:	d001      	beq.n	800cf52 <_ZN6tflite29CalculateOpDataFullyConnectedEP13TfLiteContext21TfLiteFusedActivation10TfLiteTypePK12TfLiteTensorS6_S6_PS4_PNS_20OpDataFullyConnectedE+0x48>
 800cf4e:	7ffb      	ldrb	r3, [r7, #31]
 800cf50:	e02d      	b.n	800cfae <_ZN6tflite29CalculateOpDataFullyConnectedEP13TfLiteContext21TfLiteFusedActivation10TfLiteTypePK12TfLiteTensorS6_S6_PS4_PNS_20OpDataFullyConnectedE+0xa4>
        context, input, filter, bias, output, &real_multiplier));
    QuantizeMultiplier(real_multiplier, &data->output_multiplier,
 800cf52:	ed97 7b04 	vldr	d7, [r7, #16]
 800cf56:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800cf58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cf5a:	3304      	adds	r3, #4
 800cf5c:	4619      	mov	r1, r3
 800cf5e:	4610      	mov	r0, r2
 800cf60:	eeb0 0a47 	vmov.f32	s0, s14
 800cf64:	eef0 0a67 	vmov.f32	s1, s15
 800cf68:	f7f8 fdda 	bl	8005b20 <_ZN6tflite18QuantizeMultiplierEdPlPi>
                       &data->output_shift);

    data->input_zero_point = input->params.zero_point;
 800cf6c:	687b      	ldr	r3, [r7, #4]
 800cf6e:	691a      	ldr	r2, [r3, #16]
 800cf70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cf72:	615a      	str	r2, [r3, #20]
    // Filter weights will always be symmetric quantized since we only support
    // int8 quantization. See
    // https://github.com/tensorflow/tensorflow/issues/44912 for additional
    // context.
    TFLITE_DCHECK(filter->params.zero_point == 0);
 800cf74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf76:	691b      	ldr	r3, [r3, #16]
 800cf78:	2b00      	cmp	r3, #0
 800cf7a:	d001      	beq.n	800cf80 <_ZN6tflite29CalculateOpDataFullyConnectedEP13TfLiteContext21TfLiteFusedActivation10TfLiteTypePK12TfLiteTensorS6_S6_PS4_PNS_20OpDataFullyConnectedE+0x76>
 800cf7c:	f003 fc0f 	bl	801079e <abort>
    data->filter_zero_point = filter->params.zero_point;
 800cf80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf82:	691a      	ldr	r2, [r3, #16]
 800cf84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cf86:	619a      	str	r2, [r3, #24]
    data->output_zero_point = output->params.zero_point;
 800cf88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf8a:	691a      	ldr	r2, [r3, #16]
 800cf8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cf8e:	61da      	str	r2, [r3, #28]

    return CalculateActivationRangeQuantized(context, activation, output,
 800cf90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cf92:	f103 0208 	add.w	r2, r3, #8
 800cf96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cf98:	330c      	adds	r3, #12
 800cf9a:	7af9      	ldrb	r1, [r7, #11]
 800cf9c:	9300      	str	r3, [sp, #0]
 800cf9e:	4613      	mov	r3, r2
 800cfa0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cfa2:	68f8      	ldr	r0, [r7, #12]
 800cfa4:	f7f9 fc06 	bl	80067b4 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_>
 800cfa8:	4603      	mov	r3, r0
                                             &data->output_activation_min,
                                             &data->output_activation_max);
 800cfaa:	e000      	b.n	800cfae <_ZN6tflite29CalculateOpDataFullyConnectedEP13TfLiteContext21TfLiteFusedActivation10TfLiteTypePK12TfLiteTensorS6_S6_PS4_PNS_20OpDataFullyConnectedE+0xa4>
  }
  return kTfLiteOk;
 800cfac:	2300      	movs	r3, #0
}
 800cfae:	4618      	mov	r0, r3
 800cfb0:	3720      	adds	r7, #32
 800cfb2:	46bd      	mov	sp, r7
 800cfb4:	bd80      	pop	{r7, pc}

0800cfb6 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>:
  TFLITE_DCHECK(input1 != nullptr);
  TFLITE_DCHECK(input2 != nullptr);
  return TfLiteIntArrayEqual(input1->dims, input2->dims);
}

const RuntimeShape GetTensorShape(const TfLiteEvalTensor* tensor) {
 800cfb6:	b580      	push	{r7, lr}
 800cfb8:	b086      	sub	sp, #24
 800cfba:	af00      	add	r7, sp, #0
 800cfbc:	6078      	str	r0, [r7, #4]
 800cfbe:	6039      	str	r1, [r7, #0]
  if (tensor == nullptr || tensor->dims == nullptr) {
 800cfc0:	683b      	ldr	r3, [r7, #0]
 800cfc2:	2b00      	cmp	r3, #0
 800cfc4:	d003      	beq.n	800cfce <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor+0x18>
 800cfc6:	683b      	ldr	r3, [r7, #0]
 800cfc8:	685b      	ldr	r3, [r3, #4]
 800cfca:	2b00      	cmp	r3, #0
 800cfcc:	d103      	bne.n	800cfd6 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor+0x20>
    return RuntimeShape();
 800cfce:	6878      	ldr	r0, [r7, #4]
 800cfd0:	f7f9 fdc0 	bl	8006b54 <_ZN6tflite12RuntimeShapeC1Ev>
 800cfd4:	e00d      	b.n	800cff2 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor+0x3c>
  }
  TfLiteIntArray* dims = tensor->dims;
 800cfd6:	683b      	ldr	r3, [r7, #0]
 800cfd8:	685b      	ldr	r3, [r3, #4]
 800cfda:	617b      	str	r3, [r7, #20]
  const int dims_size = dims->size;
 800cfdc:	697b      	ldr	r3, [r7, #20]
 800cfde:	681b      	ldr	r3, [r3, #0]
 800cfe0:	613b      	str	r3, [r7, #16]
  const int32_t* dims_data = reinterpret_cast<const int32_t*>(dims->data);
 800cfe2:	697b      	ldr	r3, [r7, #20]
 800cfe4:	3304      	adds	r3, #4
 800cfe6:	60fb      	str	r3, [r7, #12]
  return RuntimeShape(dims_size, dims_data);
 800cfe8:	68fa      	ldr	r2, [r7, #12]
 800cfea:	6939      	ldr	r1, [r7, #16]
 800cfec:	6878      	ldr	r0, [r7, #4]
 800cfee:	f7f9 fdbf 	bl	8006b70 <_ZN6tflite12RuntimeShapeC1EiPKl>
}
 800cff2:	6878      	ldr	r0, [r7, #4]
 800cff4:	3718      	adds	r7, #24
 800cff6:	46bd      	mov	sp, r7
 800cff8:	bd80      	pop	{r7, pc}

0800cffa <_ZN6tflite5micro18RuntimePaddingTypeE13TfLitePadding>:

PaddingType RuntimePaddingType(TfLitePadding padding) {
 800cffa:	b480      	push	{r7}
 800cffc:	b083      	sub	sp, #12
 800cffe:	af00      	add	r7, sp, #0
 800d000:	4603      	mov	r3, r0
 800d002:	71fb      	strb	r3, [r7, #7]
  switch (padding) {
 800d004:	79fb      	ldrb	r3, [r7, #7]
 800d006:	2b01      	cmp	r3, #1
 800d008:	d002      	beq.n	800d010 <_ZN6tflite5micro18RuntimePaddingTypeE13TfLitePadding+0x16>
 800d00a:	2b02      	cmp	r3, #2
 800d00c:	d002      	beq.n	800d014 <_ZN6tflite5micro18RuntimePaddingTypeE13TfLitePadding+0x1a>
 800d00e:	e003      	b.n	800d018 <_ZN6tflite5micro18RuntimePaddingTypeE13TfLitePadding+0x1e>
    case TfLitePadding::kTfLitePaddingSame:
      return PaddingType::kSame;
 800d010:	2301      	movs	r3, #1
 800d012:	e002      	b.n	800d01a <_ZN6tflite5micro18RuntimePaddingTypeE13TfLitePadding+0x20>
    case TfLitePadding::kTfLitePaddingValid:
      return PaddingType::kValid;
 800d014:	2302      	movs	r3, #2
 800d016:	e000      	b.n	800d01a <_ZN6tflite5micro18RuntimePaddingTypeE13TfLitePadding+0x20>
    case TfLitePadding::kTfLitePaddingUnknown:
    default:
      return PaddingType::kNone;
 800d018:	2300      	movs	r3, #0
  }
}
 800d01a:	4618      	mov	r0, r3
 800d01c:	370c      	adds	r7, #12
 800d01e:	46bd      	mov	sp, r7
 800d020:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d024:	4770      	bx	lr

0800d026 <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_>:

// A combination of MatchingFlatSize() and FlatSizeSkipDim().
inline int MatchingFlatSizeSkipDim(const RuntimeShape& shape, int skip_dim,
                                   const RuntimeShape& check_shape_0) {
 800d026:	b590      	push	{r4, r7, lr}
 800d028:	b087      	sub	sp, #28
 800d02a:	af00      	add	r7, sp, #0
 800d02c:	60f8      	str	r0, [r7, #12]
 800d02e:	60b9      	str	r1, [r7, #8]
 800d030:	607a      	str	r2, [r7, #4]
  const int dims_count = shape.DimensionsCount();
 800d032:	68f8      	ldr	r0, [r7, #12]
 800d034:	f7f9 fdc5 	bl	8006bc2 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 800d038:	6138      	str	r0, [r7, #16]
  for (int i = 0; i < dims_count; ++i) {
 800d03a:	2300      	movs	r3, #0
 800d03c:	617b      	str	r3, [r7, #20]
 800d03e:	697a      	ldr	r2, [r7, #20]
 800d040:	693b      	ldr	r3, [r7, #16]
 800d042:	429a      	cmp	r2, r3
 800d044:	da15      	bge.n	800d072 <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_+0x4c>
    if (i != skip_dim) {
 800d046:	697a      	ldr	r2, [r7, #20]
 800d048:	68bb      	ldr	r3, [r7, #8]
 800d04a:	429a      	cmp	r2, r3
 800d04c:	d00d      	beq.n	800d06a <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_+0x44>
      TFLITE_DCHECK_EQ(shape.Dims(i), check_shape_0.Dims(i));
 800d04e:	6979      	ldr	r1, [r7, #20]
 800d050:	68f8      	ldr	r0, [r7, #12]
 800d052:	f7fe f81b 	bl	800b08c <_ZNK6tflite12RuntimeShape4DimsEi>
 800d056:	4604      	mov	r4, r0
 800d058:	6979      	ldr	r1, [r7, #20]
 800d05a:	6878      	ldr	r0, [r7, #4]
 800d05c:	f7fe f816 	bl	800b08c <_ZNK6tflite12RuntimeShape4DimsEi>
 800d060:	4603      	mov	r3, r0
 800d062:	429c      	cmp	r4, r3
 800d064:	d001      	beq.n	800d06a <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_+0x44>
 800d066:	f003 fb9a 	bl	801079e <abort>
  for (int i = 0; i < dims_count; ++i) {
 800d06a:	697b      	ldr	r3, [r7, #20]
 800d06c:	3301      	adds	r3, #1
 800d06e:	617b      	str	r3, [r7, #20]
 800d070:	e7e5      	b.n	800d03e <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_+0x18>
    }
  }
  return FlatSizeSkipDim(shape, skip_dim);
 800d072:	68b9      	ldr	r1, [r7, #8]
 800d074:	68f8      	ldr	r0, [r7, #12]
 800d076:	f7ff fb4b 	bl	800c710 <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi>
 800d07a:	4603      	mov	r3, r0
}
 800d07c:	4618      	mov	r0, r3
 800d07e:	371c      	adds	r7, #28
 800d080:	46bd      	mov	sp, r7
 800d082:	bd90      	pop	{r4, r7, pc}

0800d084 <_ZN6tflite17CountLeadingZerosImEEiT_>:
  return result;
}
#endif

template <typename T>
int CountLeadingZeros(T integer_input) {
 800d084:	b480      	push	{r7}
 800d086:	b083      	sub	sp, #12
 800d088:	af00      	add	r7, sp, #0
 800d08a:	6078      	str	r0, [r7, #4]
  static_assert(std::is_unsigned<T>::value,
                "Only unsigned integer types handled.");
#if defined(__GNUC__)
  return integer_input ? __builtin_clz(integer_input)
 800d08c:	687b      	ldr	r3, [r7, #4]
 800d08e:	2b00      	cmp	r3, #0
 800d090:	d003      	beq.n	800d09a <_ZN6tflite17CountLeadingZerosImEEiT_+0x16>
 800d092:	687b      	ldr	r3, [r7, #4]
 800d094:	fab3 f383 	clz	r3, r3
                       : std::numeric_limits<T>::digits;
 800d098:	e000      	b.n	800d09c <_ZN6tflite17CountLeadingZerosImEEiT_+0x18>
  return integer_input ? __builtin_clz(integer_input)
 800d09a:	2320      	movs	r3, #32
    integer_input <<= 1;
    ++leading_zeros;
  }
  return leading_zeros;
#endif
}
 800d09c:	4618      	mov	r0, r3
 800d09e:	370c      	adds	r7, #12
 800d0a0:	46bd      	mov	sp, r7
 800d0a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0a6:	4770      	bx	lr

0800d0a8 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>:
                 min_bound),
        max_bound)));
  }

  RawType raw() const { return i_; }
  RawType& raw() { return i_; }
 800d0a8:	b480      	push	{r7}
 800d0aa:	b083      	sub	sp, #12
 800d0ac:	af00      	add	r7, sp, #0
 800d0ae:	6078      	str	r0, [r7, #4]
 800d0b0:	687b      	ldr	r3, [r7, #4]
 800d0b2:	4618      	mov	r0, r3
 800d0b4:	370c      	adds	r7, #12
 800d0b6:	46bd      	mov	sp, r7
 800d0b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0bc:	4770      	bx	lr

0800d0be <_ZN8gemmlowp10FixedPointIlLi0EE13FromScalarRawEl>:
  static FixedPoint FromScalarRaw(ScalarRawType x) {
 800d0be:	b590      	push	{r4, r7, lr}
 800d0c0:	b085      	sub	sp, #20
 800d0c2:	af00      	add	r7, sp, #0
 800d0c4:	6078      	str	r0, [r7, #4]
    retval.raw() = Dup<RawType>(x);
 800d0c6:	f107 030c 	add.w	r3, r7, #12
 800d0ca:	4618      	mov	r0, r3
 800d0cc:	f7ff ffec 	bl	800d0a8 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 800d0d0:	4604      	mov	r4, r0
 800d0d2:	6878      	ldr	r0, [r7, #4]
 800d0d4:	f7fe f8ce 	bl	800b274 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 800d0d8:	4603      	mov	r3, r0
 800d0da:	6023      	str	r3, [r4, #0]
    return retval;
 800d0dc:	68fb      	ldr	r3, [r7, #12]
  }
 800d0de:	4618      	mov	r0, r3
 800d0e0:	3714      	adds	r7, #20
 800d0e2:	46bd      	mov	sp, r7
 800d0e4:	bd90      	pop	{r4, r7, pc}

0800d0e6 <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi0EEEEENT_13ScalarRawTypeEl>:
// fixed-point value, regardless of the actual Scalar type. This allows
// writing generic code that applies just as well to the 32-bit and 16-bit
// cases. In the 16-bit case, the raw integer value is internally
// rounding-shifted by 16 bits to the right.
template <typename FixedPointType>
inline typename FixedPointType::ScalarRawType RescaleConstantInitializer(
 800d0e6:	b580      	push	{r7, lr}
 800d0e8:	b082      	sub	sp, #8
 800d0ea:	af00      	add	r7, sp, #0
 800d0ec:	6078      	str	r0, [r7, #4]
    std::int32_t int32_value) {
  typedef typename FixedPointType::ScalarRawType ScalarRawType;
  static constexpr int ScalarTypeBits = 8 * sizeof(ScalarRawType);
  return static_cast<ScalarRawType>(
      RoundingDivideByPOT<std::int32_t>(int32_value, 32 - ScalarTypeBits));
 800d0ee:	2100      	movs	r1, #0
 800d0f0:	6878      	ldr	r0, [r7, #4]
 800d0f2:	f7fe f84b 	bl	800b18c <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i>
 800d0f6:	4603      	mov	r3, r0
}
 800d0f8:	4618      	mov	r0, r3
 800d0fa:	3708      	adds	r7, #8
 800d0fc:	46bd      	mov	sp, r7
 800d0fe:	bd80      	pop	{r7, pc}

0800d100 <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILin1ElEET0_S1_>:
IntegerType SaturatingRoundingMultiplyByPOT(IntegerType x) {
 800d100:	b580      	push	{r7, lr}
 800d102:	b082      	sub	sp, #8
 800d104:	af00      	add	r7, sp, #0
 800d106:	6078      	str	r0, [r7, #4]
  return ImplSaturatingRoundingMultiplyByPOT<Exponent, IntegerType>::eval(x);
 800d108:	6878      	ldr	r0, [r7, #4]
 800d10a:	f000 f813 	bl	800d134 <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILin1ElLin1EE4evalEl>
 800d10e:	4603      	mov	r3, r0
}
 800d110:	4618      	mov	r0, r3
 800d112:	3708      	adds	r7, #8
 800d114:	46bd      	mov	sp, r7
 800d116:	bd80      	pop	{r7, pc}

0800d118 <_ZN8gemmlowp3SubIlEET_S1_S1_>:
tIntegerType Sub(tIntegerType a, tIntegerType b) {
 800d118:	b480      	push	{r7}
 800d11a:	b083      	sub	sp, #12
 800d11c:	af00      	add	r7, sp, #0
 800d11e:	6078      	str	r0, [r7, #4]
 800d120:	6039      	str	r1, [r7, #0]
  return a - b;
 800d122:	687a      	ldr	r2, [r7, #4]
 800d124:	683b      	ldr	r3, [r7, #0]
 800d126:	1ad3      	subs	r3, r2, r3
}
 800d128:	4618      	mov	r0, r3
 800d12a:	370c      	adds	r7, #12
 800d12c:	46bd      	mov	sp, r7
 800d12e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d132:	4770      	bx	lr

0800d134 <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILin1ElLin1EE4evalEl>:
  static IntegerType eval(IntegerType x) {
 800d134:	b580      	push	{r7, lr}
 800d136:	b082      	sub	sp, #8
 800d138:	af00      	add	r7, sp, #0
 800d13a:	6078      	str	r0, [r7, #4]
    return RoundingDivideByPOT<IntegerType>(x, -Exponent);
 800d13c:	2101      	movs	r1, #1
 800d13e:	6878      	ldr	r0, [r7, #4]
 800d140:	f7fe f824 	bl	800b18c <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i>
 800d144:	4603      	mov	r3, r0
  }
 800d146:	4618      	mov	r0, r3
 800d148:	3708      	adds	r7, #8
 800d14a:	46bd      	mov	sp, r7
 800d14c:	bd80      	pop	{r7, pc}

0800d14e <_ZN8gemmlowp9ShiftLeftIlEET_S1_i>:
tIntegerType ShiftLeft(tIntegerType a, int offset) {
 800d14e:	b480      	push	{r7}
 800d150:	b089      	sub	sp, #36	; 0x24
 800d152:	af00      	add	r7, sp, #0
 800d154:	6078      	str	r0, [r7, #4]
 800d156:	6039      	str	r1, [r7, #0]
  const std::int64_t wide_a = static_cast<std::int64_t>(a);
 800d158:	687b      	ldr	r3, [r7, #4]
 800d15a:	461a      	mov	r2, r3
 800d15c:	ea4f 73e2 	mov.w	r3, r2, asr #31
 800d160:	e9c7 2306 	strd	r2, r3, [r7, #24]
  const std::int64_t wide_shifted = wide_a * (1 << offset);
 800d164:	2201      	movs	r2, #1
 800d166:	683b      	ldr	r3, [r7, #0]
 800d168:	fa02 f303 	lsl.w	r3, r2, r3
 800d16c:	461a      	mov	r2, r3
 800d16e:	ea4f 73e2 	mov.w	r3, r2, asr #31
 800d172:	69f9      	ldr	r1, [r7, #28]
 800d174:	fb02 f001 	mul.w	r0, r2, r1
 800d178:	69b9      	ldr	r1, [r7, #24]
 800d17a:	fb03 f101 	mul.w	r1, r3, r1
 800d17e:	4401      	add	r1, r0
 800d180:	69b8      	ldr	r0, [r7, #24]
 800d182:	fba0 2302 	umull	r2, r3, r0, r2
 800d186:	4419      	add	r1, r3
 800d188:	460b      	mov	r3, r1
 800d18a:	e9c7 2304 	strd	r2, r3, [r7, #16]
 800d18e:	e9c7 2304 	strd	r2, r3, [r7, #16]
  const auto min = std::numeric_limits<tIntegerType>::min();
 800d192:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800d196:	60fb      	str	r3, [r7, #12]
  const auto max = std::numeric_limits<tIntegerType>::max();
 800d198:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800d19c:	60bb      	str	r3, [r7, #8]
             ? min
 800d19e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800d1a2:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 800d1a6:	f173 33ff 	sbcs.w	r3, r3, #4294967295
 800d1aa:	db0e      	blt.n	800d1ca <_ZN8gemmlowp9ShiftLeftIlEET_S1_i+0x7c>
             : wide_shifted > max ? max
 800d1ac:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800d1b0:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 800d1b4:	f04f 0100 	mov.w	r1, #0
 800d1b8:	4290      	cmp	r0, r2
 800d1ba:	eb71 0303 	sbcs.w	r3, r1, r3
 800d1be:	db01      	blt.n	800d1c4 <_ZN8gemmlowp9ShiftLeftIlEET_S1_i+0x76>
 800d1c0:	693b      	ldr	r3, [r7, #16]
                                  : static_cast<tIntegerType>(wide_shifted);
 800d1c2:	e004      	b.n	800d1ce <_ZN8gemmlowp9ShiftLeftIlEET_S1_i+0x80>
             : wide_shifted > max ? max
 800d1c4:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
                                  : static_cast<tIntegerType>(wide_shifted);
 800d1c8:	e001      	b.n	800d1ce <_ZN8gemmlowp9ShiftLeftIlEET_S1_i+0x80>
             ? min
 800d1ca:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
}
 800d1ce:	4618      	mov	r0, r3
 800d1d0:	3724      	adds	r7, #36	; 0x24
 800d1d2:	46bd      	mov	sp, r7
 800d1d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1d8:	4770      	bx	lr

0800d1da <_ZN8gemmlowp15SelectUsingMaskIlEET_S1_S1_S1_>:
tIntegerType SelectUsingMask(tIntegerType if_mask, tIntegerType then_val,
 800d1da:	b590      	push	{r4, r7, lr}
 800d1dc:	b085      	sub	sp, #20
 800d1de:	af00      	add	r7, sp, #0
 800d1e0:	60f8      	str	r0, [r7, #12]
 800d1e2:	60b9      	str	r1, [r7, #8]
 800d1e4:	607a      	str	r2, [r7, #4]
  return BitXor(BitAnd(if_mask, then_val), BitAnd(BitNot(if_mask), else_val));
 800d1e6:	68b9      	ldr	r1, [r7, #8]
 800d1e8:	68f8      	ldr	r0, [r7, #12]
 800d1ea:	f7fe f84e 	bl	800b28a <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 800d1ee:	4604      	mov	r4, r0
 800d1f0:	68f8      	ldr	r0, [r7, #12]
 800d1f2:	f7fe f8ae 	bl	800b352 <_ZN8gemmlowp6BitNotIlEET_S1_>
 800d1f6:	4603      	mov	r3, r0
 800d1f8:	6879      	ldr	r1, [r7, #4]
 800d1fa:	4618      	mov	r0, r3
 800d1fc:	f7fe f845 	bl	800b28a <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 800d200:	4603      	mov	r3, r0
 800d202:	4619      	mov	r1, r3
 800d204:	4620      	mov	r0, r4
 800d206:	f000 f805 	bl	800d214 <_ZN8gemmlowp6BitXorIlEET_S1_S1_>
 800d20a:	4603      	mov	r3, r0
}
 800d20c:	4618      	mov	r0, r3
 800d20e:	3714      	adds	r7, #20
 800d210:	46bd      	mov	sp, r7
 800d212:	bd90      	pop	{r4, r7, pc}

0800d214 <_ZN8gemmlowp6BitXorIlEET_S1_S1_>:
tIntegerType BitXor(tIntegerType a, tIntegerType b) {
 800d214:	b480      	push	{r7}
 800d216:	b083      	sub	sp, #12
 800d218:	af00      	add	r7, sp, #0
 800d21a:	6078      	str	r0, [r7, #4]
 800d21c:	6039      	str	r1, [r7, #0]
  return a ^ b;
 800d21e:	687a      	ldr	r2, [r7, #4]
 800d220:	683b      	ldr	r3, [r7, #0]
 800d222:	4053      	eors	r3, r2
}
 800d224:	4618      	mov	r0, r3
 800d226:	370c      	adds	r7, #12
 800d228:	46bd      	mov	sp, r7
 800d22a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d22e:	4770      	bx	lr

0800d230 <_ZN8gemmlowp15RoundingHalfSumIlEET_S1_S1_>:
inline std::int32_t RoundingHalfSum(std::int32_t a, std::int32_t b) {
 800d230:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 800d234:	b08b      	sub	sp, #44	; 0x2c
 800d236:	af00      	add	r7, sp, #0
 800d238:	6078      	str	r0, [r7, #4]
 800d23a:	6039      	str	r1, [r7, #0]
  std::int64_t a64 = a;
 800d23c:	6879      	ldr	r1, [r7, #4]
 800d23e:	4608      	mov	r0, r1
 800d240:	ea4f 71e0 	mov.w	r1, r0, asr #31
 800d244:	e9c7 0108 	strd	r0, r1, [r7, #32]
  std::int64_t b64 = b;
 800d248:	6839      	ldr	r1, [r7, #0]
 800d24a:	4608      	mov	r0, r1
 800d24c:	ea4f 71e0 	mov.w	r1, r0, asr #31
 800d250:	e9c7 0106 	strd	r0, r1, [r7, #24]
  std::int64_t sum = a64 + b64;
 800d254:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800d258:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800d25c:	eb18 0a00 	adds.w	sl, r8, r0
 800d260:	eb49 0b01 	adc.w	fp, r9, r1
 800d264:	e9c7 ab04 	strd	sl, fp, [r7, #16]
  std::int64_t sign = sum >= 0 ? 1 : -1;
 800d268:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800d26c:	2800      	cmp	r0, #0
 800d26e:	f171 0100 	sbcs.w	r1, r1, #0
 800d272:	db04      	blt.n	800d27e <_ZN8gemmlowp15RoundingHalfSumIlEET_S1_S1_+0x4e>
 800d274:	f04f 0001 	mov.w	r0, #1
 800d278:	f04f 0100 	mov.w	r1, #0
 800d27c:	e003      	b.n	800d286 <_ZN8gemmlowp15RoundingHalfSumIlEET_S1_S1_+0x56>
 800d27e:	f04f 30ff 	mov.w	r0, #4294967295
 800d282:	f04f 31ff 	mov.w	r1, #4294967295
 800d286:	e9c7 0102 	strd	r0, r1, [r7, #8]
  return static_cast<std::int32_t>((sum + sign) / 2);
 800d28a:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 800d28e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800d292:	eb18 0400 	adds.w	r4, r8, r0
 800d296:	eb49 0501 	adc.w	r5, r9, r1
 800d29a:	0fe9      	lsrs	r1, r5, #31
 800d29c:	4608      	mov	r0, r1
 800d29e:	f04f 0100 	mov.w	r1, #0
 800d2a2:	1902      	adds	r2, r0, r4
 800d2a4:	eb41 0305 	adc.w	r3, r1, r5
 800d2a8:	f04f 0000 	mov.w	r0, #0
 800d2ac:	f04f 0100 	mov.w	r1, #0
 800d2b0:	0850      	lsrs	r0, r2, #1
 800d2b2:	ea40 70c3 	orr.w	r0, r0, r3, lsl #31
 800d2b6:	1059      	asrs	r1, r3, #1
 800d2b8:	4602      	mov	r2, r0
 800d2ba:	460b      	mov	r3, r1
 800d2bc:	4613      	mov	r3, r2
}
 800d2be:	4618      	mov	r0, r3
 800d2c0:	372c      	adds	r7, #44	; 0x2c
 800d2c2:	46bd      	mov	sp, r7
 800d2c4:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 800d2c8:	4770      	bx	lr

0800d2ca <_ZN8gemmlowp10FixedPointIlLi0EE7FromRawEl>:
  static FixedPoint FromRaw(RawType x) {
 800d2ca:	b580      	push	{r7, lr}
 800d2cc:	b084      	sub	sp, #16
 800d2ce:	af00      	add	r7, sp, #0
 800d2d0:	6078      	str	r0, [r7, #4]
    retval.raw() = x;
 800d2d2:	f107 030c 	add.w	r3, r7, #12
 800d2d6:	4618      	mov	r0, r3
 800d2d8:	f7ff fee6 	bl	800d0a8 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 800d2dc:	4602      	mov	r2, r0
 800d2de:	687b      	ldr	r3, [r7, #4]
 800d2e0:	6013      	str	r3, [r2, #0]
    return retval;
 800d2e2:	68fb      	ldr	r3, [r7, #12]
  }
 800d2e4:	4618      	mov	r0, r3
 800d2e6:	3710      	adds	r7, #16
 800d2e8:	46bd      	mov	sp, r7
 800d2ea:	bd80      	pop	{r7, pc}

0800d2ec <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IlEENS_10FixedPointIT_Li0EEES3_>:

// Implementation of logistic function.

// Returns 1 / (1 + x) for x in (0, 1).
template <typename tRawType>
FixedPoint<tRawType, 0> one_over_one_plus_x_for_x_in_0_1(
 800d2ec:	b580      	push	{r7, lr}
 800d2ee:	b08a      	sub	sp, #40	; 0x28
 800d2f0:	af00      	add	r7, sp, #0
 800d2f2:	6078      	str	r0, [r7, #4]
    FixedPoint<tRawType, 0> a) {
  typedef FixedPoint<tRawType, 0> F0;
  typedef FixedPoint<tRawType, 2> F2;
  F0 half_denominator = RoundingHalfSum(a, F0::One());
 800d2f4:	f000 f9f7 	bl	800d6e6 <_ZN8gemmlowp10FixedPointIlLi0EE3OneEv>
 800d2f8:	4603      	mov	r3, r0
 800d2fa:	4619      	mov	r1, r3
 800d2fc:	6878      	ldr	r0, [r7, #4]
 800d2fe:	f000 f9fd 	bl	800d6fc <_ZN8gemmlowp15RoundingHalfSumIlLi0EEENS_10FixedPointIT_XT0_EEES3_S3_>
 800d302:	4603      	mov	r3, r0
 800d304:	623b      	str	r3, [r7, #32]
  // Newton-Raphson division
  // https://en.wikipedia.org/wiki/Division_algorithm#Newton.E2.80.93Raphson_division
  // Refer to that page for the logic behind the 48/17 and 32/17 constants.
  const F2 constant_48_over_17 =
      GEMMLOWP_CHECKED_FIXEDPOINT_CONSTANT(F2, 1515870810, 48.0 / 17.0);
 800d306:	f04f 305a 	mov.w	r0, #1515870810	; 0x5a5a5a5a
 800d30a:	f000 fa29 	bl	800d760 <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi2EEEEENT_13ScalarRawTypeEl>
 800d30e:	4603      	mov	r3, r0
 800d310:	4618      	mov	r0, r3
 800d312:	f000 fa11 	bl	800d738 <_ZN8gemmlowp10FixedPointIlLi2EE13FromScalarRawEl>
 800d316:	4603      	mov	r3, r0
 800d318:	61fb      	str	r3, [r7, #28]
  const F2 constant_neg_32_over_17 =
      GEMMLOWP_CHECKED_FIXEDPOINT_CONSTANT(F2, -1010580540, -32.0 / 17.0);
 800d31a:	4823      	ldr	r0, [pc, #140]	; (800d3a8 <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IlEENS_10FixedPointIT_Li0EEES3_+0xbc>)
 800d31c:	f000 fa20 	bl	800d760 <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi2EEEEENT_13ScalarRawTypeEl>
 800d320:	4603      	mov	r3, r0
 800d322:	4618      	mov	r0, r3
 800d324:	f000 fa08 	bl	800d738 <_ZN8gemmlowp10FixedPointIlLi2EE13FromScalarRawEl>
 800d328:	4603      	mov	r3, r0
 800d32a:	61bb      	str	r3, [r7, #24]
  F2 x = constant_48_over_17 + half_denominator * constant_neg_32_over_17;
 800d32c:	69b9      	ldr	r1, [r7, #24]
 800d32e:	6a38      	ldr	r0, [r7, #32]
 800d330:	f000 fa23 	bl	800d77a <_ZN8gemmlowpmlIlLi0ELi2EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 800d334:	4603      	mov	r3, r0
 800d336:	4619      	mov	r1, r3
 800d338:	69f8      	ldr	r0, [r7, #28]
 800d33a:	f000 fa40 	bl	800d7be <_ZN8gemmlowpplIlLi2EEENS_10FixedPointIT_XT0_EEES3_S3_>
 800d33e:	4603      	mov	r3, r0
 800d340:	617b      	str	r3, [r7, #20]
  for (int i = 0; i < 3; i++) {
 800d342:	2300      	movs	r3, #0
 800d344:	627b      	str	r3, [r7, #36]	; 0x24
 800d346:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d348:	2b02      	cmp	r3, #2
 800d34a:	dc21      	bgt.n	800d390 <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IlEENS_10FixedPointIT_Li0EEES3_+0xa4>
    F2 half_denominator_times_x = half_denominator * x;
 800d34c:	6979      	ldr	r1, [r7, #20]
 800d34e:	6a38      	ldr	r0, [r7, #32]
 800d350:	f000 fa13 	bl	800d77a <_ZN8gemmlowpmlIlLi0ELi2EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 800d354:	4603      	mov	r3, r0
 800d356:	613b      	str	r3, [r7, #16]
    F2 one_minus_half_denominator_times_x =
        F2::One() - half_denominator_times_x;
 800d358:	f000 fa4f 	bl	800d7fa <_ZN8gemmlowp10FixedPointIlLi2EE3OneEv>
 800d35c:	4603      	mov	r3, r0
 800d35e:	6939      	ldr	r1, [r7, #16]
 800d360:	4618      	mov	r0, r3
 800d362:	f000 fa53 	bl	800d80c <_ZN8gemmlowpmiIlLi2EEENS_10FixedPointIT_XT0_EEES3_S3_>
 800d366:	4603      	mov	r3, r0
 800d368:	60fb      	str	r3, [r7, #12]
    x = x + Rescale<2>(x * one_minus_half_denominator_times_x);
 800d36a:	68f9      	ldr	r1, [r7, #12]
 800d36c:	6978      	ldr	r0, [r7, #20]
 800d36e:	f000 fa6b 	bl	800d848 <_ZN8gemmlowpmlIlLi2ELi2EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 800d372:	4603      	mov	r3, r0
 800d374:	4618      	mov	r0, r3
 800d376:	f000 fa89 	bl	800d88c <_ZN8gemmlowp7RescaleILi2ElLi4EEENS_10FixedPointIT0_XT_EEENS1_IS2_XT1_EEE>
 800d37a:	4603      	mov	r3, r0
 800d37c:	4619      	mov	r1, r3
 800d37e:	6978      	ldr	r0, [r7, #20]
 800d380:	f000 fa1d 	bl	800d7be <_ZN8gemmlowpplIlLi2EEENS_10FixedPointIT_XT0_EEES3_S3_>
 800d384:	4603      	mov	r3, r0
 800d386:	617b      	str	r3, [r7, #20]
  for (int i = 0; i < 3; i++) {
 800d388:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d38a:	3301      	adds	r3, #1
 800d38c:	627b      	str	r3, [r7, #36]	; 0x24
 800d38e:	e7da      	b.n	800d346 <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IlEENS_10FixedPointIT_Li0EEES3_+0x5a>
  }
  return Rescale<0>(ExactMulByPot<-1>(x));
 800d390:	6978      	ldr	r0, [r7, #20]
 800d392:	f000 fa95 	bl	800d8c0 <_ZN8gemmlowp13ExactMulByPotILin1ElLi2EEENS_10FixedPointIT0_XplT_T1_EEENS1_IS2_XT1_EEE>
 800d396:	4603      	mov	r3, r0
 800d398:	4618      	mov	r0, r3
 800d39a:	f000 faa7 	bl	800d8ec <_ZN8gemmlowp7RescaleILi0ElLi1EEENS_10FixedPointIT0_XT_EEENS1_IS2_XT1_EEE>
 800d39e:	4603      	mov	r3, r0
}
 800d3a0:	4618      	mov	r0, r3
 800d3a2:	3728      	adds	r7, #40	; 0x28
 800d3a4:	46bd      	mov	sp, r7
 800d3a6:	bd80      	pop	{r7, pc}
 800d3a8:	c3c3c3c4 	.word	0xc3c3c3c4

0800d3ac <_ZN8gemmlowp10FixedPointIlLi5EE7FromRawEl>:
  static FixedPoint FromRaw(RawType x) {
 800d3ac:	b580      	push	{r7, lr}
 800d3ae:	b084      	sub	sp, #16
 800d3b0:	af00      	add	r7, sp, #0
 800d3b2:	6078      	str	r0, [r7, #4]
    retval.raw() = x;
 800d3b4:	f107 030c 	add.w	r3, r7, #12
 800d3b8:	4618      	mov	r0, r3
 800d3ba:	f000 f989 	bl	800d6d0 <_ZN8gemmlowp10FixedPointIlLi5EE3rawEv>
 800d3be:	4602      	mov	r2, r0
 800d3c0:	687b      	ldr	r3, [r7, #4]
 800d3c2:	6013      	str	r3, [r2, #0]
    return retval;
 800d3c4:	68fb      	ldr	r3, [r7, #12]
  }
 800d3c6:	4618      	mov	r0, r3
 800d3c8:	3710      	adds	r7, #16
 800d3ca:	46bd      	mov	sp, r7
 800d3cc:	bd80      	pop	{r7, pc}
	...

0800d3d0 <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE>:
FixedPoint<tRawType, 0> exp_on_negative_values(
 800d3d0:	b590      	push	{r4, r7, lr}
 800d3d2:	b091      	sub	sp, #68	; 0x44
 800d3d4:	af00      	add	r7, sp, #0
 800d3d6:	6078      	str	r0, [r7, #4]
  const InputF kOneQuarter = InputF::template ConstantPOT<-2>();
 800d3d8:	f000 faa2 	bl	800d920 <_ZN8gemmlowp10FixedPointIlLi5EE11ConstantPOTILin2EEES1_v>
 800d3dc:	4603      	mov	r3, r0
 800d3de:	637b      	str	r3, [r7, #52]	; 0x34
  InputF mask = kOneQuarter - InputF::FromScalarRaw(1);
 800d3e0:	2001      	movs	r0, #1
 800d3e2:	f000 faa6 	bl	800d932 <_ZN8gemmlowp10FixedPointIlLi5EE13FromScalarRawEl>
 800d3e6:	4603      	mov	r3, r0
 800d3e8:	4619      	mov	r1, r3
 800d3ea:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800d3ec:	f000 fab5 	bl	800d95a <_ZN8gemmlowpmiIlLi5EEENS_10FixedPointIT_XT0_EEES3_S3_>
 800d3f0:	4603      	mov	r3, r0
 800d3f2:	633b      	str	r3, [r7, #48]	; 0x30
  InputF a_mod_quarter_minus_one_quarter = (a & mask) - kOneQuarter;
 800d3f4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800d3f6:	6878      	ldr	r0, [r7, #4]
 800d3f8:	f000 facd 	bl	800d996 <_ZN8gemmlowpanIlLi5EEENS_10FixedPointIT_XT0_EEES3_S3_>
 800d3fc:	4603      	mov	r3, r0
 800d3fe:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800d400:	4618      	mov	r0, r3
 800d402:	f000 faaa 	bl	800d95a <_ZN8gemmlowpmiIlLi5EEENS_10FixedPointIT_XT0_EEES3_S3_>
 800d406:	4603      	mov	r3, r0
 800d408:	62fb      	str	r3, [r7, #44]	; 0x2c
  ResultF result = exp_on_interval_between_negative_one_quarter_and_0_excl(
 800d40a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d40c:	f000 fae1 	bl	800d9d2 <_ZN8gemmlowp7RescaleILi0ElLi5EEENS_10FixedPointIT0_XT_EEENS1_IS2_XT1_EEE>
 800d410:	4603      	mov	r3, r0
 800d412:	4618      	mov	r0, r3
 800d414:	f000 faf8 	bl	800da08 <_ZN8gemmlowp55exp_on_interval_between_negative_one_quarter_and_0_exclIlEENS_10FixedPointIT_Li0EEES3_>
 800d418:	4603      	mov	r3, r0
 800d41a:	62bb      	str	r3, [r7, #40]	; 0x28
  tRawType remainder = (a_mod_quarter_minus_one_quarter - a).raw();
 800d41c:	6879      	ldr	r1, [r7, #4]
 800d41e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d420:	f000 fa9b 	bl	800d95a <_ZN8gemmlowpmiIlLi5EEENS_10FixedPointIT_XT0_EEES3_S3_>
 800d424:	4603      	mov	r3, r0
 800d426:	63bb      	str	r3, [r7, #56]	; 0x38
 800d428:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800d42c:	4618      	mov	r0, r3
 800d42e:	f000 f94f 	bl	800d6d0 <_ZN8gemmlowp10FixedPointIlLi5EE3rawEv>
 800d432:	4603      	mov	r3, r0
 800d434:	681b      	ldr	r3, [r3, #0]
 800d436:	63fb      	str	r3, [r7, #60]	; 0x3c
  GEMMLOWP_EXP_BARREL_SHIFTER(-2, 1672461947);
 800d438:	4883      	ldr	r0, [pc, #524]	; (800d648 <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE+0x278>)
 800d43a:	f7ff fe54 	bl	800d0e6 <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi0EEEEENT_13ScalarRawTypeEl>
 800d43e:	4603      	mov	r3, r0
 800d440:	4618      	mov	r0, r3
 800d442:	f7ff fe3c 	bl	800d0be <_ZN8gemmlowp10FixedPointIlLi0EE13FromScalarRawEl>
 800d446:	4603      	mov	r3, r0
 800d448:	627b      	str	r3, [r7, #36]	; 0x24
 800d44a:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
 800d44e:	f7fd ff11 	bl	800b274 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 800d452:	4603      	mov	r3, r0
 800d454:	4619      	mov	r1, r3
 800d456:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800d458:	f7fd ff17 	bl	800b28a <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 800d45c:	4603      	mov	r3, r0
 800d45e:	4618      	mov	r0, r3
 800d460:	f7fd ff66 	bl	800b330 <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_>
 800d464:	4604      	mov	r4, r0
 800d466:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800d468:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d46a:	f000 fb2f 	bl	800dacc <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 800d46e:	4603      	mov	r3, r0
 800d470:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d472:	4619      	mov	r1, r3
 800d474:	4620      	mov	r0, r4
 800d476:	f000 fb4b 	bl	800db10 <_ZN8gemmlowp15SelectUsingMaskIlLi0EEENS_10FixedPointIT_XT0_EEES2_S3_S3_>
 800d47a:	4603      	mov	r3, r0
 800d47c:	62bb      	str	r3, [r7, #40]	; 0x28
  GEMMLOWP_EXP_BARREL_SHIFTER(-1, 1302514674);
 800d47e:	4873      	ldr	r0, [pc, #460]	; (800d64c <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE+0x27c>)
 800d480:	f7ff fe31 	bl	800d0e6 <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi0EEEEENT_13ScalarRawTypeEl>
 800d484:	4603      	mov	r3, r0
 800d486:	4618      	mov	r0, r3
 800d488:	f7ff fe19 	bl	800d0be <_ZN8gemmlowp10FixedPointIlLi0EE13FromScalarRawEl>
 800d48c:	4603      	mov	r3, r0
 800d48e:	623b      	str	r3, [r7, #32]
 800d490:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
 800d494:	f7fd feee 	bl	800b274 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 800d498:	4603      	mov	r3, r0
 800d49a:	4619      	mov	r1, r3
 800d49c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800d49e:	f7fd fef4 	bl	800b28a <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 800d4a2:	4603      	mov	r3, r0
 800d4a4:	4618      	mov	r0, r3
 800d4a6:	f7fd ff43 	bl	800b330 <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_>
 800d4aa:	4604      	mov	r4, r0
 800d4ac:	6a39      	ldr	r1, [r7, #32]
 800d4ae:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d4b0:	f000 fb0c 	bl	800dacc <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 800d4b4:	4603      	mov	r3, r0
 800d4b6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d4b8:	4619      	mov	r1, r3
 800d4ba:	4620      	mov	r0, r4
 800d4bc:	f000 fb28 	bl	800db10 <_ZN8gemmlowp15SelectUsingMaskIlLi0EEENS_10FixedPointIT_XT0_EEES2_S3_S3_>
 800d4c0:	4603      	mov	r3, r0
 800d4c2:	62bb      	str	r3, [r7, #40]	; 0x28
  GEMMLOWP_EXP_BARREL_SHIFTER(+0, 790015084);
 800d4c4:	4862      	ldr	r0, [pc, #392]	; (800d650 <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE+0x280>)
 800d4c6:	f7ff fe0e 	bl	800d0e6 <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi0EEEEENT_13ScalarRawTypeEl>
 800d4ca:	4603      	mov	r3, r0
 800d4cc:	4618      	mov	r0, r3
 800d4ce:	f7ff fdf6 	bl	800d0be <_ZN8gemmlowp10FixedPointIlLi0EE13FromScalarRawEl>
 800d4d2:	4603      	mov	r3, r0
 800d4d4:	61fb      	str	r3, [r7, #28]
 800d4d6:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 800d4da:	f7fd fecb 	bl	800b274 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 800d4de:	4603      	mov	r3, r0
 800d4e0:	4619      	mov	r1, r3
 800d4e2:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800d4e4:	f7fd fed1 	bl	800b28a <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 800d4e8:	4603      	mov	r3, r0
 800d4ea:	4618      	mov	r0, r3
 800d4ec:	f7fd ff20 	bl	800b330 <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_>
 800d4f0:	4604      	mov	r4, r0
 800d4f2:	69f9      	ldr	r1, [r7, #28]
 800d4f4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d4f6:	f000 fae9 	bl	800dacc <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 800d4fa:	4603      	mov	r3, r0
 800d4fc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d4fe:	4619      	mov	r1, r3
 800d500:	4620      	mov	r0, r4
 800d502:	f000 fb05 	bl	800db10 <_ZN8gemmlowp15SelectUsingMaskIlLi0EEENS_10FixedPointIT_XT0_EEES2_S3_S3_>
 800d506:	4603      	mov	r3, r0
 800d508:	62bb      	str	r3, [r7, #40]	; 0x28
  GEMMLOWP_EXP_BARREL_SHIFTER(+1, 290630308);
 800d50a:	4852      	ldr	r0, [pc, #328]	; (800d654 <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE+0x284>)
 800d50c:	f7ff fdeb 	bl	800d0e6 <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi0EEEEENT_13ScalarRawTypeEl>
 800d510:	4603      	mov	r3, r0
 800d512:	4618      	mov	r0, r3
 800d514:	f7ff fdd3 	bl	800d0be <_ZN8gemmlowp10FixedPointIlLi0EE13FromScalarRawEl>
 800d518:	4603      	mov	r3, r0
 800d51a:	61bb      	str	r3, [r7, #24]
 800d51c:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 800d520:	f7fd fea8 	bl	800b274 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 800d524:	4603      	mov	r3, r0
 800d526:	4619      	mov	r1, r3
 800d528:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800d52a:	f7fd feae 	bl	800b28a <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 800d52e:	4603      	mov	r3, r0
 800d530:	4618      	mov	r0, r3
 800d532:	f7fd fefd 	bl	800b330 <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_>
 800d536:	4604      	mov	r4, r0
 800d538:	69b9      	ldr	r1, [r7, #24]
 800d53a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d53c:	f000 fac6 	bl	800dacc <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 800d540:	4603      	mov	r3, r0
 800d542:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d544:	4619      	mov	r1, r3
 800d546:	4620      	mov	r0, r4
 800d548:	f000 fae2 	bl	800db10 <_ZN8gemmlowp15SelectUsingMaskIlLi0EEENS_10FixedPointIT_XT0_EEES2_S3_S3_>
 800d54c:	4603      	mov	r3, r0
 800d54e:	62bb      	str	r3, [r7, #40]	; 0x28
  GEMMLOWP_EXP_BARREL_SHIFTER(+2, 39332535);
 800d550:	4841      	ldr	r0, [pc, #260]	; (800d658 <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE+0x288>)
 800d552:	f7ff fdc8 	bl	800d0e6 <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi0EEEEENT_13ScalarRawTypeEl>
 800d556:	4603      	mov	r3, r0
 800d558:	4618      	mov	r0, r3
 800d55a:	f7ff fdb0 	bl	800d0be <_ZN8gemmlowp10FixedPointIlLi0EE13FromScalarRawEl>
 800d55e:	4603      	mov	r3, r0
 800d560:	617b      	str	r3, [r7, #20]
 800d562:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 800d566:	f7fd fe85 	bl	800b274 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 800d56a:	4603      	mov	r3, r0
 800d56c:	4619      	mov	r1, r3
 800d56e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800d570:	f7fd fe8b 	bl	800b28a <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 800d574:	4603      	mov	r3, r0
 800d576:	4618      	mov	r0, r3
 800d578:	f7fd feda 	bl	800b330 <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_>
 800d57c:	4604      	mov	r4, r0
 800d57e:	6979      	ldr	r1, [r7, #20]
 800d580:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d582:	f000 faa3 	bl	800dacc <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 800d586:	4603      	mov	r3, r0
 800d588:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d58a:	4619      	mov	r1, r3
 800d58c:	4620      	mov	r0, r4
 800d58e:	f000 fabf 	bl	800db10 <_ZN8gemmlowp15SelectUsingMaskIlLi0EEENS_10FixedPointIT_XT0_EEES2_S3_S3_>
 800d592:	4603      	mov	r3, r0
 800d594:	62bb      	str	r3, [r7, #40]	; 0x28
  GEMMLOWP_EXP_BARREL_SHIFTER(+3, 720401);
 800d596:	4831      	ldr	r0, [pc, #196]	; (800d65c <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE+0x28c>)
 800d598:	f7ff fda5 	bl	800d0e6 <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi0EEEEENT_13ScalarRawTypeEl>
 800d59c:	4603      	mov	r3, r0
 800d59e:	4618      	mov	r0, r3
 800d5a0:	f7ff fd8d 	bl	800d0be <_ZN8gemmlowp10FixedPointIlLi0EE13FromScalarRawEl>
 800d5a4:	4603      	mov	r3, r0
 800d5a6:	613b      	str	r3, [r7, #16]
 800d5a8:	f04f 5000 	mov.w	r0, #536870912	; 0x20000000
 800d5ac:	f7fd fe62 	bl	800b274 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 800d5b0:	4603      	mov	r3, r0
 800d5b2:	4619      	mov	r1, r3
 800d5b4:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800d5b6:	f7fd fe68 	bl	800b28a <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 800d5ba:	4603      	mov	r3, r0
 800d5bc:	4618      	mov	r0, r3
 800d5be:	f7fd feb7 	bl	800b330 <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_>
 800d5c2:	4604      	mov	r4, r0
 800d5c4:	6939      	ldr	r1, [r7, #16]
 800d5c6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d5c8:	f000 fa80 	bl	800dacc <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 800d5cc:	4603      	mov	r3, r0
 800d5ce:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d5d0:	4619      	mov	r1, r3
 800d5d2:	4620      	mov	r0, r4
 800d5d4:	f000 fa9c 	bl	800db10 <_ZN8gemmlowp15SelectUsingMaskIlLi0EEENS_10FixedPointIT_XT0_EEES2_S3_S3_>
 800d5d8:	4603      	mov	r3, r0
 800d5da:	62bb      	str	r3, [r7, #40]	; 0x28
  GEMMLOWP_EXP_BARREL_SHIFTER(+4, 242);
 800d5dc:	20f2      	movs	r0, #242	; 0xf2
 800d5de:	f7ff fd82 	bl	800d0e6 <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi0EEEEENT_13ScalarRawTypeEl>
 800d5e2:	4603      	mov	r3, r0
 800d5e4:	4618      	mov	r0, r3
 800d5e6:	f7ff fd6a 	bl	800d0be <_ZN8gemmlowp10FixedPointIlLi0EE13FromScalarRawEl>
 800d5ea:	4603      	mov	r3, r0
 800d5ec:	60fb      	str	r3, [r7, #12]
 800d5ee:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800d5f2:	f7fd fe3f 	bl	800b274 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 800d5f6:	4603      	mov	r3, r0
 800d5f8:	4619      	mov	r1, r3
 800d5fa:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800d5fc:	f7fd fe45 	bl	800b28a <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 800d600:	4603      	mov	r3, r0
 800d602:	4618      	mov	r0, r3
 800d604:	f7fd fe94 	bl	800b330 <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_>
 800d608:	4604      	mov	r4, r0
 800d60a:	68f9      	ldr	r1, [r7, #12]
 800d60c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d60e:	f000 fa5d 	bl	800dacc <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 800d612:	4603      	mov	r3, r0
 800d614:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d616:	4619      	mov	r1, r3
 800d618:	4620      	mov	r0, r4
 800d61a:	f000 fa79 	bl	800db10 <_ZN8gemmlowp15SelectUsingMaskIlLi0EEENS_10FixedPointIT_XT0_EEES2_S3_S3_>
 800d61e:	4603      	mov	r3, r0
 800d620:	62bb      	str	r3, [r7, #40]	; 0x28
  result = SelectUsingMask(MaskIfZero(a), ResultF::One(), result);
 800d622:	6878      	ldr	r0, [r7, #4]
 800d624:	f000 fa95 	bl	800db52 <_ZN8gemmlowp10MaskIfZeroIlLi5EEET_NS_10FixedPointIS1_XT0_EEE>
 800d628:	4604      	mov	r4, r0
 800d62a:	f000 f85c 	bl	800d6e6 <_ZN8gemmlowp10FixedPointIlLi0EE3OneEv>
 800d62e:	4603      	mov	r3, r0
 800d630:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d632:	4619      	mov	r1, r3
 800d634:	4620      	mov	r0, r4
 800d636:	f000 fa6b 	bl	800db10 <_ZN8gemmlowp15SelectUsingMaskIlLi0EEENS_10FixedPointIT_XT0_EEES2_S3_S3_>
 800d63a:	4603      	mov	r3, r0
 800d63c:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 800d63e:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 800d640:	4618      	mov	r0, r3
 800d642:	3744      	adds	r7, #68	; 0x44
 800d644:	46bd      	mov	sp, r7
 800d646:	bd90      	pop	{r4, r7, pc}
 800d648:	63afbe7b 	.word	0x63afbe7b
 800d64c:	4da2cbf2 	.word	0x4da2cbf2
 800d650:	2f16ac6c 	.word	0x2f16ac6c
 800d654:	1152aaa4 	.word	0x1152aaa4
 800d658:	02582ab7 	.word	0x02582ab7
 800d65c:	000afe11 	.word	0x000afe11

0800d660 <_ZN8gemmlowp7RescaleILi12ElLi0EEENS_10FixedPointIT0_XT_EEENS1_IS2_XT1_EEE>:
FixedPoint<tRawType, tIntegerBitsDst> Rescale(
 800d660:	b5b0      	push	{r4, r5, r7, lr}
 800d662:	b084      	sub	sp, #16
 800d664:	af00      	add	r7, sp, #0
 800d666:	6078      	str	r0, [r7, #4]
  result.raw() = SaturatingRoundingMultiplyByPOT<kExponent>(x.raw());
 800d668:	1d3b      	adds	r3, r7, #4
 800d66a:	4618      	mov	r0, r3
 800d66c:	f7ff fd1c 	bl	800d0a8 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 800d670:	4603      	mov	r3, r0
 800d672:	681d      	ldr	r5, [r3, #0]
 800d674:	f107 030c 	add.w	r3, r7, #12
 800d678:	4618      	mov	r0, r3
 800d67a:	f000 fa7c 	bl	800db76 <_ZN8gemmlowp10FixedPointIlLi12EE3rawEv>
 800d67e:	4604      	mov	r4, r0
 800d680:	4628      	mov	r0, r5
 800d682:	f000 fa83 	bl	800db8c <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILin12ElEET0_S1_>
 800d686:	4603      	mov	r3, r0
 800d688:	6023      	str	r3, [r4, #0]
  return result;
 800d68a:	68fb      	ldr	r3, [r7, #12]
}
 800d68c:	4618      	mov	r0, r3
 800d68e:	3710      	adds	r7, #16
 800d690:	46bd      	mov	sp, r7
 800d692:	bdb0      	pop	{r4, r5, r7, pc}

0800d694 <_ZN8gemmlowpplIlLi12EEENS_10FixedPointIT_XT0_EEES3_S3_>:
MAKE_FIXEDPOINT_BINARY_FUNC(operator+, Add)
 800d694:	b590      	push	{r4, r7, lr}
 800d696:	b083      	sub	sp, #12
 800d698:	af00      	add	r7, sp, #0
 800d69a:	6078      	str	r0, [r7, #4]
 800d69c:	6039      	str	r1, [r7, #0]
 800d69e:	1d3b      	adds	r3, r7, #4
 800d6a0:	4618      	mov	r0, r3
 800d6a2:	f000 fa68 	bl	800db76 <_ZN8gemmlowp10FixedPointIlLi12EE3rawEv>
 800d6a6:	4603      	mov	r3, r0
 800d6a8:	681c      	ldr	r4, [r3, #0]
 800d6aa:	463b      	mov	r3, r7
 800d6ac:	4618      	mov	r0, r3
 800d6ae:	f000 fa62 	bl	800db76 <_ZN8gemmlowp10FixedPointIlLi12EE3rawEv>
 800d6b2:	4603      	mov	r3, r0
 800d6b4:	681b      	ldr	r3, [r3, #0]
 800d6b6:	4619      	mov	r1, r3
 800d6b8:	4620      	mov	r0, r4
 800d6ba:	f7fd fe17 	bl	800b2ec <_ZN8gemmlowp3AddIlEET_S1_S1_>
 800d6be:	4603      	mov	r3, r0
 800d6c0:	4618      	mov	r0, r3
 800d6c2:	f000 fa6f 	bl	800dba4 <_ZN8gemmlowp10FixedPointIlLi12EE7FromRawEl>
 800d6c6:	4603      	mov	r3, r0
 800d6c8:	4618      	mov	r0, r3
 800d6ca:	370c      	adds	r7, #12
 800d6cc:	46bd      	mov	sp, r7
 800d6ce:	bd90      	pop	{r4, r7, pc}

0800d6d0 <_ZN8gemmlowp10FixedPointIlLi5EE3rawEv>:
  RawType& raw() { return i_; }
 800d6d0:	b480      	push	{r7}
 800d6d2:	b083      	sub	sp, #12
 800d6d4:	af00      	add	r7, sp, #0
 800d6d6:	6078      	str	r0, [r7, #4]
 800d6d8:	687b      	ldr	r3, [r7, #4]
 800d6da:	4618      	mov	r0, r3
 800d6dc:	370c      	adds	r7, #12
 800d6de:	46bd      	mov	sp, r7
 800d6e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6e4:	4770      	bx	lr

0800d6e6 <_ZN8gemmlowp10FixedPointIlLi0EE3OneEv>:
  static FixedPoint One() {
 800d6e6:	b580      	push	{r7, lr}
 800d6e8:	af00      	add	r7, sp, #0
    return FromScalarRaw(
 800d6ea:	f000 fa82 	bl	800dbf2 <_ZN8gemmlowp10FixedPointIlLi0EE12ScalarRawMaxEv>
 800d6ee:	4603      	mov	r3, r0
 800d6f0:	4618      	mov	r0, r3
 800d6f2:	f7ff fce4 	bl	800d0be <_ZN8gemmlowp10FixedPointIlLi0EE13FromScalarRawEl>
 800d6f6:	4603      	mov	r3, r0
  }
 800d6f8:	4618      	mov	r0, r3
 800d6fa:	bd80      	pop	{r7, pc}

0800d6fc <_ZN8gemmlowp15RoundingHalfSumIlLi0EEENS_10FixedPointIT_XT0_EEES3_S3_>:
MAKE_FIXEDPOINT_BINARY_FUNC(RoundingHalfSum, RoundingHalfSum)
 800d6fc:	b590      	push	{r4, r7, lr}
 800d6fe:	b083      	sub	sp, #12
 800d700:	af00      	add	r7, sp, #0
 800d702:	6078      	str	r0, [r7, #4]
 800d704:	6039      	str	r1, [r7, #0]
 800d706:	1d3b      	adds	r3, r7, #4
 800d708:	4618      	mov	r0, r3
 800d70a:	f7ff fccd 	bl	800d0a8 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 800d70e:	4603      	mov	r3, r0
 800d710:	681c      	ldr	r4, [r3, #0]
 800d712:	463b      	mov	r3, r7
 800d714:	4618      	mov	r0, r3
 800d716:	f7ff fcc7 	bl	800d0a8 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 800d71a:	4603      	mov	r3, r0
 800d71c:	681b      	ldr	r3, [r3, #0]
 800d71e:	4619      	mov	r1, r3
 800d720:	4620      	mov	r0, r4
 800d722:	f7ff fd85 	bl	800d230 <_ZN8gemmlowp15RoundingHalfSumIlEET_S1_S1_>
 800d726:	4603      	mov	r3, r0
 800d728:	4618      	mov	r0, r3
 800d72a:	f7ff fdce 	bl	800d2ca <_ZN8gemmlowp10FixedPointIlLi0EE7FromRawEl>
 800d72e:	4603      	mov	r3, r0
 800d730:	4618      	mov	r0, r3
 800d732:	370c      	adds	r7, #12
 800d734:	46bd      	mov	sp, r7
 800d736:	bd90      	pop	{r4, r7, pc}

0800d738 <_ZN8gemmlowp10FixedPointIlLi2EE13FromScalarRawEl>:
  static FixedPoint FromScalarRaw(ScalarRawType x) {
 800d738:	b590      	push	{r4, r7, lr}
 800d73a:	b085      	sub	sp, #20
 800d73c:	af00      	add	r7, sp, #0
 800d73e:	6078      	str	r0, [r7, #4]
    retval.raw() = Dup<RawType>(x);
 800d740:	f107 030c 	add.w	r3, r7, #12
 800d744:	4618      	mov	r0, r3
 800d746:	f000 fa5b 	bl	800dc00 <_ZN8gemmlowp10FixedPointIlLi2EE3rawEv>
 800d74a:	4604      	mov	r4, r0
 800d74c:	6878      	ldr	r0, [r7, #4]
 800d74e:	f7fd fd91 	bl	800b274 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 800d752:	4603      	mov	r3, r0
 800d754:	6023      	str	r3, [r4, #0]
    return retval;
 800d756:	68fb      	ldr	r3, [r7, #12]
  }
 800d758:	4618      	mov	r0, r3
 800d75a:	3714      	adds	r7, #20
 800d75c:	46bd      	mov	sp, r7
 800d75e:	bd90      	pop	{r4, r7, pc}

0800d760 <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi2EEEEENT_13ScalarRawTypeEl>:
inline typename FixedPointType::ScalarRawType RescaleConstantInitializer(
 800d760:	b580      	push	{r7, lr}
 800d762:	b082      	sub	sp, #8
 800d764:	af00      	add	r7, sp, #0
 800d766:	6078      	str	r0, [r7, #4]
      RoundingDivideByPOT<std::int32_t>(int32_value, 32 - ScalarTypeBits));
 800d768:	2100      	movs	r1, #0
 800d76a:	6878      	ldr	r0, [r7, #4]
 800d76c:	f7fd fd0e 	bl	800b18c <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i>
 800d770:	4603      	mov	r3, r0
}
 800d772:	4618      	mov	r0, r3
 800d774:	3708      	adds	r7, #8
 800d776:	46bd      	mov	sp, r7
 800d778:	bd80      	pop	{r7, pc}

0800d77a <_ZN8gemmlowpmlIlLi0ELi2EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>:
FixedPoint<tRawType, tIntegerBits_a + tIntegerBits_b> operator*(
 800d77a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d77c:	b085      	sub	sp, #20
 800d77e:	af00      	add	r7, sp, #0
 800d780:	6078      	str	r0, [r7, #4]
 800d782:	6039      	str	r1, [r7, #0]
  c.raw() = SaturatingRoundingDoublingHighMul(a.raw(), b.raw());
 800d784:	1d3b      	adds	r3, r7, #4
 800d786:	4618      	mov	r0, r3
 800d788:	f7ff fc8e 	bl	800d0a8 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 800d78c:	4603      	mov	r3, r0
 800d78e:	681d      	ldr	r5, [r3, #0]
 800d790:	463b      	mov	r3, r7
 800d792:	4618      	mov	r0, r3
 800d794:	f000 fa34 	bl	800dc00 <_ZN8gemmlowp10FixedPointIlLi2EE3rawEv>
 800d798:	4603      	mov	r3, r0
 800d79a:	681e      	ldr	r6, [r3, #0]
 800d79c:	f107 030c 	add.w	r3, r7, #12
 800d7a0:	4618      	mov	r0, r3
 800d7a2:	f000 fa2d 	bl	800dc00 <_ZN8gemmlowp10FixedPointIlLi2EE3rawEv>
 800d7a6:	4604      	mov	r4, r0
 800d7a8:	4631      	mov	r1, r6
 800d7aa:	4628      	mov	r0, r5
 800d7ac:	f7fd fbfe 	bl	800afac <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_>
 800d7b0:	4603      	mov	r3, r0
 800d7b2:	6023      	str	r3, [r4, #0]
  return c;
 800d7b4:	68fb      	ldr	r3, [r7, #12]
}
 800d7b6:	4618      	mov	r0, r3
 800d7b8:	3714      	adds	r7, #20
 800d7ba:	46bd      	mov	sp, r7
 800d7bc:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800d7be <_ZN8gemmlowpplIlLi2EEENS_10FixedPointIT_XT0_EEES3_S3_>:
MAKE_FIXEDPOINT_BINARY_FUNC(operator+, Add)
 800d7be:	b590      	push	{r4, r7, lr}
 800d7c0:	b083      	sub	sp, #12
 800d7c2:	af00      	add	r7, sp, #0
 800d7c4:	6078      	str	r0, [r7, #4]
 800d7c6:	6039      	str	r1, [r7, #0]
 800d7c8:	1d3b      	adds	r3, r7, #4
 800d7ca:	4618      	mov	r0, r3
 800d7cc:	f000 fa18 	bl	800dc00 <_ZN8gemmlowp10FixedPointIlLi2EE3rawEv>
 800d7d0:	4603      	mov	r3, r0
 800d7d2:	681c      	ldr	r4, [r3, #0]
 800d7d4:	463b      	mov	r3, r7
 800d7d6:	4618      	mov	r0, r3
 800d7d8:	f000 fa12 	bl	800dc00 <_ZN8gemmlowp10FixedPointIlLi2EE3rawEv>
 800d7dc:	4603      	mov	r3, r0
 800d7de:	681b      	ldr	r3, [r3, #0]
 800d7e0:	4619      	mov	r1, r3
 800d7e2:	4620      	mov	r0, r4
 800d7e4:	f7fd fd82 	bl	800b2ec <_ZN8gemmlowp3AddIlEET_S1_S1_>
 800d7e8:	4603      	mov	r3, r0
 800d7ea:	4618      	mov	r0, r3
 800d7ec:	f000 fa13 	bl	800dc16 <_ZN8gemmlowp10FixedPointIlLi2EE7FromRawEl>
 800d7f0:	4603      	mov	r3, r0
 800d7f2:	4618      	mov	r0, r3
 800d7f4:	370c      	adds	r7, #12
 800d7f6:	46bd      	mov	sp, r7
 800d7f8:	bd90      	pop	{r4, r7, pc}

0800d7fa <_ZN8gemmlowp10FixedPointIlLi2EE3OneEv>:
  static FixedPoint One() {
 800d7fa:	b580      	push	{r7, lr}
 800d7fc:	af00      	add	r7, sp, #0
    return FromScalarRaw(
 800d7fe:	f04f 5000 	mov.w	r0, #536870912	; 0x20000000
 800d802:	f7ff ff99 	bl	800d738 <_ZN8gemmlowp10FixedPointIlLi2EE13FromScalarRawEl>
 800d806:	4603      	mov	r3, r0
  }
 800d808:	4618      	mov	r0, r3
 800d80a:	bd80      	pop	{r7, pc}

0800d80c <_ZN8gemmlowpmiIlLi2EEENS_10FixedPointIT_XT0_EEES3_S3_>:
MAKE_FIXEDPOINT_BINARY_FUNC(operator-, Sub)
 800d80c:	b590      	push	{r4, r7, lr}
 800d80e:	b083      	sub	sp, #12
 800d810:	af00      	add	r7, sp, #0
 800d812:	6078      	str	r0, [r7, #4]
 800d814:	6039      	str	r1, [r7, #0]
 800d816:	1d3b      	adds	r3, r7, #4
 800d818:	4618      	mov	r0, r3
 800d81a:	f000 f9f1 	bl	800dc00 <_ZN8gemmlowp10FixedPointIlLi2EE3rawEv>
 800d81e:	4603      	mov	r3, r0
 800d820:	681c      	ldr	r4, [r3, #0]
 800d822:	463b      	mov	r3, r7
 800d824:	4618      	mov	r0, r3
 800d826:	f000 f9eb 	bl	800dc00 <_ZN8gemmlowp10FixedPointIlLi2EE3rawEv>
 800d82a:	4603      	mov	r3, r0
 800d82c:	681b      	ldr	r3, [r3, #0]
 800d82e:	4619      	mov	r1, r3
 800d830:	4620      	mov	r0, r4
 800d832:	f7ff fc71 	bl	800d118 <_ZN8gemmlowp3SubIlEET_S1_S1_>
 800d836:	4603      	mov	r3, r0
 800d838:	4618      	mov	r0, r3
 800d83a:	f000 f9ec 	bl	800dc16 <_ZN8gemmlowp10FixedPointIlLi2EE7FromRawEl>
 800d83e:	4603      	mov	r3, r0
 800d840:	4618      	mov	r0, r3
 800d842:	370c      	adds	r7, #12
 800d844:	46bd      	mov	sp, r7
 800d846:	bd90      	pop	{r4, r7, pc}

0800d848 <_ZN8gemmlowpmlIlLi2ELi2EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>:
FixedPoint<tRawType, tIntegerBits_a + tIntegerBits_b> operator*(
 800d848:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d84a:	b085      	sub	sp, #20
 800d84c:	af00      	add	r7, sp, #0
 800d84e:	6078      	str	r0, [r7, #4]
 800d850:	6039      	str	r1, [r7, #0]
  c.raw() = SaturatingRoundingDoublingHighMul(a.raw(), b.raw());
 800d852:	1d3b      	adds	r3, r7, #4
 800d854:	4618      	mov	r0, r3
 800d856:	f000 f9d3 	bl	800dc00 <_ZN8gemmlowp10FixedPointIlLi2EE3rawEv>
 800d85a:	4603      	mov	r3, r0
 800d85c:	681d      	ldr	r5, [r3, #0]
 800d85e:	463b      	mov	r3, r7
 800d860:	4618      	mov	r0, r3
 800d862:	f000 f9cd 	bl	800dc00 <_ZN8gemmlowp10FixedPointIlLi2EE3rawEv>
 800d866:	4603      	mov	r3, r0
 800d868:	681e      	ldr	r6, [r3, #0]
 800d86a:	f107 030c 	add.w	r3, r7, #12
 800d86e:	4618      	mov	r0, r3
 800d870:	f000 f9e2 	bl	800dc38 <_ZN8gemmlowp10FixedPointIlLi4EE3rawEv>
 800d874:	4604      	mov	r4, r0
 800d876:	4631      	mov	r1, r6
 800d878:	4628      	mov	r0, r5
 800d87a:	f7fd fb97 	bl	800afac <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_>
 800d87e:	4603      	mov	r3, r0
 800d880:	6023      	str	r3, [r4, #0]
  return c;
 800d882:	68fb      	ldr	r3, [r7, #12]
}
 800d884:	4618      	mov	r0, r3
 800d886:	3714      	adds	r7, #20
 800d888:	46bd      	mov	sp, r7
 800d88a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800d88c <_ZN8gemmlowp7RescaleILi2ElLi4EEENS_10FixedPointIT0_XT_EEENS1_IS2_XT1_EEE>:
FixedPoint<tRawType, tIntegerBitsDst> Rescale(
 800d88c:	b5b0      	push	{r4, r5, r7, lr}
 800d88e:	b084      	sub	sp, #16
 800d890:	af00      	add	r7, sp, #0
 800d892:	6078      	str	r0, [r7, #4]
  result.raw() = SaturatingRoundingMultiplyByPOT<kExponent>(x.raw());
 800d894:	1d3b      	adds	r3, r7, #4
 800d896:	4618      	mov	r0, r3
 800d898:	f000 f9ce 	bl	800dc38 <_ZN8gemmlowp10FixedPointIlLi4EE3rawEv>
 800d89c:	4603      	mov	r3, r0
 800d89e:	681d      	ldr	r5, [r3, #0]
 800d8a0:	f107 030c 	add.w	r3, r7, #12
 800d8a4:	4618      	mov	r0, r3
 800d8a6:	f000 f9ab 	bl	800dc00 <_ZN8gemmlowp10FixedPointIlLi2EE3rawEv>
 800d8aa:	4604      	mov	r4, r0
 800d8ac:	4628      	mov	r0, r5
 800d8ae:	f000 f9ce 	bl	800dc4e <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILi2ElEET0_S1_>
 800d8b2:	4603      	mov	r3, r0
 800d8b4:	6023      	str	r3, [r4, #0]
  return result;
 800d8b6:	68fb      	ldr	r3, [r7, #12]
}
 800d8b8:	4618      	mov	r0, r3
 800d8ba:	3710      	adds	r7, #16
 800d8bc:	46bd      	mov	sp, r7
 800d8be:	bdb0      	pop	{r4, r5, r7, pc}

0800d8c0 <_ZN8gemmlowp13ExactMulByPotILin1ElLi2EEENS_10FixedPointIT0_XplT_T1_EEENS1_IS2_XT1_EEE>:
FixedPoint<tRawType, tExponent + tIntegerBits> ExactMulByPot(
 800d8c0:	b590      	push	{r4, r7, lr}
 800d8c2:	b085      	sub	sp, #20
 800d8c4:	af00      	add	r7, sp, #0
 800d8c6:	6078      	str	r0, [r7, #4]
  c.raw() = a.raw();
 800d8c8:	1d3b      	adds	r3, r7, #4
 800d8ca:	4618      	mov	r0, r3
 800d8cc:	f000 f998 	bl	800dc00 <_ZN8gemmlowp10FixedPointIlLi2EE3rawEv>
 800d8d0:	4604      	mov	r4, r0
 800d8d2:	f107 030c 	add.w	r3, r7, #12
 800d8d6:	4618      	mov	r0, r3
 800d8d8:	f000 f9c5 	bl	800dc66 <_ZN8gemmlowp10FixedPointIlLi1EE3rawEv>
 800d8dc:	4602      	mov	r2, r0
 800d8de:	6823      	ldr	r3, [r4, #0]
 800d8e0:	6013      	str	r3, [r2, #0]
  return c;
 800d8e2:	68fb      	ldr	r3, [r7, #12]
}
 800d8e4:	4618      	mov	r0, r3
 800d8e6:	3714      	adds	r7, #20
 800d8e8:	46bd      	mov	sp, r7
 800d8ea:	bd90      	pop	{r4, r7, pc}

0800d8ec <_ZN8gemmlowp7RescaleILi0ElLi1EEENS_10FixedPointIT0_XT_EEENS1_IS2_XT1_EEE>:
FixedPoint<tRawType, tIntegerBitsDst> Rescale(
 800d8ec:	b5b0      	push	{r4, r5, r7, lr}
 800d8ee:	b084      	sub	sp, #16
 800d8f0:	af00      	add	r7, sp, #0
 800d8f2:	6078      	str	r0, [r7, #4]
  result.raw() = SaturatingRoundingMultiplyByPOT<kExponent>(x.raw());
 800d8f4:	1d3b      	adds	r3, r7, #4
 800d8f6:	4618      	mov	r0, r3
 800d8f8:	f000 f9b5 	bl	800dc66 <_ZN8gemmlowp10FixedPointIlLi1EE3rawEv>
 800d8fc:	4603      	mov	r3, r0
 800d8fe:	681d      	ldr	r5, [r3, #0]
 800d900:	f107 030c 	add.w	r3, r7, #12
 800d904:	4618      	mov	r0, r3
 800d906:	f7ff fbcf 	bl	800d0a8 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 800d90a:	4604      	mov	r4, r0
 800d90c:	4628      	mov	r0, r5
 800d90e:	f000 f9b5 	bl	800dc7c <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILi1ElEET0_S1_>
 800d912:	4603      	mov	r3, r0
 800d914:	6023      	str	r3, [r4, #0]
  return result;
 800d916:	68fb      	ldr	r3, [r7, #12]
}
 800d918:	4618      	mov	r0, r3
 800d91a:	3710      	adds	r7, #16
 800d91c:	46bd      	mov	sp, r7
 800d91e:	bdb0      	pop	{r4, r5, r7, pc}

0800d920 <_ZN8gemmlowp10FixedPointIlLi5EE11ConstantPOTILin2EEES1_v>:
  static FixedPoint ConstantPOT() {
 800d920:	b580      	push	{r7, lr}
 800d922:	af00      	add	r7, sp, #0
    return FromScalarRaw(ScalarRawType(1) << kOffset);
 800d924:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
 800d928:	f000 f803 	bl	800d932 <_ZN8gemmlowp10FixedPointIlLi5EE13FromScalarRawEl>
 800d92c:	4603      	mov	r3, r0
  }
 800d92e:	4618      	mov	r0, r3
 800d930:	bd80      	pop	{r7, pc}

0800d932 <_ZN8gemmlowp10FixedPointIlLi5EE13FromScalarRawEl>:
  static FixedPoint FromScalarRaw(ScalarRawType x) {
 800d932:	b590      	push	{r4, r7, lr}
 800d934:	b085      	sub	sp, #20
 800d936:	af00      	add	r7, sp, #0
 800d938:	6078      	str	r0, [r7, #4]
    retval.raw() = Dup<RawType>(x);
 800d93a:	f107 030c 	add.w	r3, r7, #12
 800d93e:	4618      	mov	r0, r3
 800d940:	f7ff fec6 	bl	800d6d0 <_ZN8gemmlowp10FixedPointIlLi5EE3rawEv>
 800d944:	4604      	mov	r4, r0
 800d946:	6878      	ldr	r0, [r7, #4]
 800d948:	f7fd fc94 	bl	800b274 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 800d94c:	4603      	mov	r3, r0
 800d94e:	6023      	str	r3, [r4, #0]
    return retval;
 800d950:	68fb      	ldr	r3, [r7, #12]
  }
 800d952:	4618      	mov	r0, r3
 800d954:	3714      	adds	r7, #20
 800d956:	46bd      	mov	sp, r7
 800d958:	bd90      	pop	{r4, r7, pc}

0800d95a <_ZN8gemmlowpmiIlLi5EEENS_10FixedPointIT_XT0_EEES3_S3_>:
MAKE_FIXEDPOINT_BINARY_FUNC(operator-, Sub)
 800d95a:	b590      	push	{r4, r7, lr}
 800d95c:	b083      	sub	sp, #12
 800d95e:	af00      	add	r7, sp, #0
 800d960:	6078      	str	r0, [r7, #4]
 800d962:	6039      	str	r1, [r7, #0]
 800d964:	1d3b      	adds	r3, r7, #4
 800d966:	4618      	mov	r0, r3
 800d968:	f7ff feb2 	bl	800d6d0 <_ZN8gemmlowp10FixedPointIlLi5EE3rawEv>
 800d96c:	4603      	mov	r3, r0
 800d96e:	681c      	ldr	r4, [r3, #0]
 800d970:	463b      	mov	r3, r7
 800d972:	4618      	mov	r0, r3
 800d974:	f7ff feac 	bl	800d6d0 <_ZN8gemmlowp10FixedPointIlLi5EE3rawEv>
 800d978:	4603      	mov	r3, r0
 800d97a:	681b      	ldr	r3, [r3, #0]
 800d97c:	4619      	mov	r1, r3
 800d97e:	4620      	mov	r0, r4
 800d980:	f7ff fbca 	bl	800d118 <_ZN8gemmlowp3SubIlEET_S1_S1_>
 800d984:	4603      	mov	r3, r0
 800d986:	4618      	mov	r0, r3
 800d988:	f7ff fd10 	bl	800d3ac <_ZN8gemmlowp10FixedPointIlLi5EE7FromRawEl>
 800d98c:	4603      	mov	r3, r0
 800d98e:	4618      	mov	r0, r3
 800d990:	370c      	adds	r7, #12
 800d992:	46bd      	mov	sp, r7
 800d994:	bd90      	pop	{r4, r7, pc}

0800d996 <_ZN8gemmlowpanIlLi5EEENS_10FixedPointIT_XT0_EEES3_S3_>:
MAKE_FIXEDPOINT_BINARY_FUNC(operator&, BitAnd)
 800d996:	b590      	push	{r4, r7, lr}
 800d998:	b083      	sub	sp, #12
 800d99a:	af00      	add	r7, sp, #0
 800d99c:	6078      	str	r0, [r7, #4]
 800d99e:	6039      	str	r1, [r7, #0]
 800d9a0:	1d3b      	adds	r3, r7, #4
 800d9a2:	4618      	mov	r0, r3
 800d9a4:	f7ff fe94 	bl	800d6d0 <_ZN8gemmlowp10FixedPointIlLi5EE3rawEv>
 800d9a8:	4603      	mov	r3, r0
 800d9aa:	681c      	ldr	r4, [r3, #0]
 800d9ac:	463b      	mov	r3, r7
 800d9ae:	4618      	mov	r0, r3
 800d9b0:	f7ff fe8e 	bl	800d6d0 <_ZN8gemmlowp10FixedPointIlLi5EE3rawEv>
 800d9b4:	4603      	mov	r3, r0
 800d9b6:	681b      	ldr	r3, [r3, #0]
 800d9b8:	4619      	mov	r1, r3
 800d9ba:	4620      	mov	r0, r4
 800d9bc:	f7fd fc65 	bl	800b28a <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 800d9c0:	4603      	mov	r3, r0
 800d9c2:	4618      	mov	r0, r3
 800d9c4:	f7ff fcf2 	bl	800d3ac <_ZN8gemmlowp10FixedPointIlLi5EE7FromRawEl>
 800d9c8:	4603      	mov	r3, r0
 800d9ca:	4618      	mov	r0, r3
 800d9cc:	370c      	adds	r7, #12
 800d9ce:	46bd      	mov	sp, r7
 800d9d0:	bd90      	pop	{r4, r7, pc}

0800d9d2 <_ZN8gemmlowp7RescaleILi0ElLi5EEENS_10FixedPointIT0_XT_EEENS1_IS2_XT1_EEE>:
FixedPoint<tRawType, tIntegerBitsDst> Rescale(
 800d9d2:	b5b0      	push	{r4, r5, r7, lr}
 800d9d4:	b084      	sub	sp, #16
 800d9d6:	af00      	add	r7, sp, #0
 800d9d8:	6078      	str	r0, [r7, #4]
  result.raw() = SaturatingRoundingMultiplyByPOT<kExponent>(x.raw());
 800d9da:	1d3b      	adds	r3, r7, #4
 800d9dc:	4618      	mov	r0, r3
 800d9de:	f7ff fe77 	bl	800d6d0 <_ZN8gemmlowp10FixedPointIlLi5EE3rawEv>
 800d9e2:	4603      	mov	r3, r0
 800d9e4:	681d      	ldr	r5, [r3, #0]
 800d9e6:	f107 030c 	add.w	r3, r7, #12
 800d9ea:	4618      	mov	r0, r3
 800d9ec:	f7ff fb5c 	bl	800d0a8 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 800d9f0:	4604      	mov	r4, r0
 800d9f2:	4628      	mov	r0, r5
 800d9f4:	f000 f94e 	bl	800dc94 <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILi5ElEET0_S1_>
 800d9f8:	4603      	mov	r3, r0
 800d9fa:	6023      	str	r3, [r4, #0]
  return result;
 800d9fc:	68fb      	ldr	r3, [r7, #12]
}
 800d9fe:	4618      	mov	r0, r3
 800da00:	3710      	adds	r7, #16
 800da02:	46bd      	mov	sp, r7
 800da04:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800da08 <_ZN8gemmlowp55exp_on_interval_between_negative_one_quarter_and_0_exclIlEENS_10FixedPointIT_Li0EEES3_>:
FixedPoint<tRawType, 0> exp_on_interval_between_negative_one_quarter_and_0_excl(
 800da08:	b580      	push	{r7, lr}
 800da0a:	b08a      	sub	sp, #40	; 0x28
 800da0c:	af00      	add	r7, sp, #0
 800da0e:	6078      	str	r0, [r7, #4]
      GEMMLOWP_CHECKED_FIXEDPOINT_CONSTANT(F, 1895147668, std::exp(-1.0 / 8.0));
 800da10:	482c      	ldr	r0, [pc, #176]	; (800dac4 <_ZN8gemmlowp55exp_on_interval_between_negative_one_quarter_and_0_exclIlEENS_10FixedPointIT_Li0EEES3_+0xbc>)
 800da12:	f7ff fb68 	bl	800d0e6 <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi0EEEEENT_13ScalarRawTypeEl>
 800da16:	4603      	mov	r3, r0
 800da18:	4618      	mov	r0, r3
 800da1a:	f7ff fb50 	bl	800d0be <_ZN8gemmlowp10FixedPointIlLi0EE13FromScalarRawEl>
 800da1e:	4603      	mov	r3, r0
 800da20:	627b      	str	r3, [r7, #36]	; 0x24
      GEMMLOWP_CHECKED_FIXEDPOINT_CONSTANT(F, 715827883, 1.0 / 3.0);
 800da22:	4829      	ldr	r0, [pc, #164]	; (800dac8 <_ZN8gemmlowp55exp_on_interval_between_negative_one_quarter_and_0_exclIlEENS_10FixedPointIT_Li0EEES3_+0xc0>)
 800da24:	f7ff fb5f 	bl	800d0e6 <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi0EEEEENT_13ScalarRawTypeEl>
 800da28:	4603      	mov	r3, r0
 800da2a:	4618      	mov	r0, r3
 800da2c:	f7ff fb47 	bl	800d0be <_ZN8gemmlowp10FixedPointIlLi0EE13FromScalarRawEl>
 800da30:	4603      	mov	r3, r0
 800da32:	623b      	str	r3, [r7, #32]
  F x = a + F::template ConstantPOT<-3>();
 800da34:	f000 f93a 	bl	800dcac <_ZN8gemmlowp10FixedPointIlLi0EE11ConstantPOTILin3EEES1_v>
 800da38:	4603      	mov	r3, r0
 800da3a:	4619      	mov	r1, r3
 800da3c:	6878      	ldr	r0, [r7, #4]
 800da3e:	f000 f93e 	bl	800dcbe <_ZN8gemmlowpplIlLi0EEENS_10FixedPointIT_XT0_EEES3_S3_>
 800da42:	4603      	mov	r3, r0
 800da44:	61fb      	str	r3, [r7, #28]
  F x2 = x * x;
 800da46:	69f9      	ldr	r1, [r7, #28]
 800da48:	69f8      	ldr	r0, [r7, #28]
 800da4a:	f000 f83f 	bl	800dacc <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 800da4e:	4603      	mov	r3, r0
 800da50:	61bb      	str	r3, [r7, #24]
  F x3 = x2 * x;
 800da52:	69f9      	ldr	r1, [r7, #28]
 800da54:	69b8      	ldr	r0, [r7, #24]
 800da56:	f000 f839 	bl	800dacc <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 800da5a:	4603      	mov	r3, r0
 800da5c:	617b      	str	r3, [r7, #20]
  F x4 = x2 * x2;
 800da5e:	69b9      	ldr	r1, [r7, #24]
 800da60:	69b8      	ldr	r0, [r7, #24]
 800da62:	f000 f833 	bl	800dacc <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 800da66:	4603      	mov	r3, r0
 800da68:	613b      	str	r3, [r7, #16]
  F x4_over_4 = SaturatingRoundingMultiplyByPOT<-2>(x4);
 800da6a:	6938      	ldr	r0, [r7, #16]
 800da6c:	f000 f945 	bl	800dcfa <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILin2ElLi0EEENS_10FixedPointIT0_XT1_EEES3_>
 800da70:	4603      	mov	r3, r0
 800da72:	60fb      	str	r3, [r7, #12]
      SaturatingRoundingMultiplyByPOT<-1>(
 800da74:	6979      	ldr	r1, [r7, #20]
 800da76:	68f8      	ldr	r0, [r7, #12]
 800da78:	f000 f921 	bl	800dcbe <_ZN8gemmlowpplIlLi0EEENS_10FixedPointIT_XT0_EEES3_S3_>
 800da7c:	4603      	mov	r3, r0
 800da7e:	6a39      	ldr	r1, [r7, #32]
 800da80:	4618      	mov	r0, r3
 800da82:	f000 f823 	bl	800dacc <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 800da86:	4603      	mov	r3, r0
 800da88:	69b9      	ldr	r1, [r7, #24]
 800da8a:	4618      	mov	r0, r3
 800da8c:	f000 f917 	bl	800dcbe <_ZN8gemmlowpplIlLi0EEENS_10FixedPointIT_XT0_EEES3_S3_>
 800da90:	4603      	mov	r3, r0
 800da92:	4618      	mov	r0, r3
 800da94:	f000 f947 	bl	800dd26 <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILin1ElLi0EEENS_10FixedPointIT0_XT1_EEES3_>
 800da98:	4603      	mov	r3, r0
 800da9a:	60bb      	str	r3, [r7, #8]
  return AddSaturatingIf16Bit(
 800da9c:	68b9      	ldr	r1, [r7, #8]
 800da9e:	69f8      	ldr	r0, [r7, #28]
 800daa0:	f000 f90d 	bl	800dcbe <_ZN8gemmlowpplIlLi0EEENS_10FixedPointIT_XT0_EEES3_S3_>
 800daa4:	4603      	mov	r3, r0
 800daa6:	4619      	mov	r1, r3
 800daa8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800daaa:	f000 f80f 	bl	800dacc <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 800daae:	4603      	mov	r3, r0
 800dab0:	4619      	mov	r1, r3
 800dab2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800dab4:	f000 f94d 	bl	800dd52 <_ZN8gemmlowp20AddSaturatingIf16BitIlLi0EEENS_10FixedPointIT_XT0_EEES3_S3_>
 800dab8:	4603      	mov	r3, r0
}
 800daba:	4618      	mov	r0, r3
 800dabc:	3728      	adds	r7, #40	; 0x28
 800dabe:	46bd      	mov	sp, r7
 800dac0:	bd80      	pop	{r7, pc}
 800dac2:	bf00      	nop
 800dac4:	70f5a894 	.word	0x70f5a894
 800dac8:	2aaaaaab 	.word	0x2aaaaaab

0800dacc <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>:
FixedPoint<tRawType, tIntegerBits_a + tIntegerBits_b> operator*(
 800dacc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800dace:	b085      	sub	sp, #20
 800dad0:	af00      	add	r7, sp, #0
 800dad2:	6078      	str	r0, [r7, #4]
 800dad4:	6039      	str	r1, [r7, #0]
  c.raw() = SaturatingRoundingDoublingHighMul(a.raw(), b.raw());
 800dad6:	1d3b      	adds	r3, r7, #4
 800dad8:	4618      	mov	r0, r3
 800dada:	f7ff fae5 	bl	800d0a8 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 800dade:	4603      	mov	r3, r0
 800dae0:	681d      	ldr	r5, [r3, #0]
 800dae2:	463b      	mov	r3, r7
 800dae4:	4618      	mov	r0, r3
 800dae6:	f7ff fadf 	bl	800d0a8 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 800daea:	4603      	mov	r3, r0
 800daec:	681e      	ldr	r6, [r3, #0]
 800daee:	f107 030c 	add.w	r3, r7, #12
 800daf2:	4618      	mov	r0, r3
 800daf4:	f7ff fad8 	bl	800d0a8 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 800daf8:	4604      	mov	r4, r0
 800dafa:	4631      	mov	r1, r6
 800dafc:	4628      	mov	r0, r5
 800dafe:	f7fd fa55 	bl	800afac <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_>
 800db02:	4603      	mov	r3, r0
 800db04:	6023      	str	r3, [r4, #0]
  return c;
 800db06:	68fb      	ldr	r3, [r7, #12]
}
 800db08:	4618      	mov	r0, r3
 800db0a:	3714      	adds	r7, #20
 800db0c:	46bd      	mov	sp, r7
 800db0e:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800db10 <_ZN8gemmlowp15SelectUsingMaskIlLi0EEENS_10FixedPointIT_XT0_EEES2_S3_S3_>:
FixedPoint<tRawType, tIntegerBits> SelectUsingMask(
 800db10:	b590      	push	{r4, r7, lr}
 800db12:	b085      	sub	sp, #20
 800db14:	af00      	add	r7, sp, #0
 800db16:	60f8      	str	r0, [r7, #12]
 800db18:	60b9      	str	r1, [r7, #8]
 800db1a:	607a      	str	r2, [r7, #4]
      SelectUsingMask(if_mask, then_val.raw(), else_val.raw()));
 800db1c:	f107 0308 	add.w	r3, r7, #8
 800db20:	4618      	mov	r0, r3
 800db22:	f7ff fac1 	bl	800d0a8 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 800db26:	4603      	mov	r3, r0
  return FixedPoint<tRawType, tIntegerBits>::FromRaw(
 800db28:	681c      	ldr	r4, [r3, #0]
      SelectUsingMask(if_mask, then_val.raw(), else_val.raw()));
 800db2a:	1d3b      	adds	r3, r7, #4
 800db2c:	4618      	mov	r0, r3
 800db2e:	f7ff fabb 	bl	800d0a8 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 800db32:	4603      	mov	r3, r0
  return FixedPoint<tRawType, tIntegerBits>::FromRaw(
 800db34:	681b      	ldr	r3, [r3, #0]
 800db36:	461a      	mov	r2, r3
 800db38:	4621      	mov	r1, r4
 800db3a:	68f8      	ldr	r0, [r7, #12]
 800db3c:	f7ff fb4d 	bl	800d1da <_ZN8gemmlowp15SelectUsingMaskIlEET_S1_S1_S1_>
 800db40:	4603      	mov	r3, r0
 800db42:	4618      	mov	r0, r3
 800db44:	f7ff fbc1 	bl	800d2ca <_ZN8gemmlowp10FixedPointIlLi0EE7FromRawEl>
 800db48:	4603      	mov	r3, r0
}
 800db4a:	4618      	mov	r0, r3
 800db4c:	3714      	adds	r7, #20
 800db4e:	46bd      	mov	sp, r7
 800db50:	bd90      	pop	{r4, r7, pc}

0800db52 <_ZN8gemmlowp10MaskIfZeroIlLi5EEET_NS_10FixedPointIS1_XT0_EEE>:
MAKE_FIXEDPOINT_UNARY_FUNC_RETURNING_RAW(MaskIfZero)
 800db52:	b580      	push	{r7, lr}
 800db54:	b082      	sub	sp, #8
 800db56:	af00      	add	r7, sp, #0
 800db58:	6078      	str	r0, [r7, #4]
 800db5a:	1d3b      	adds	r3, r7, #4
 800db5c:	4618      	mov	r0, r3
 800db5e:	f7ff fdb7 	bl	800d6d0 <_ZN8gemmlowp10FixedPointIlLi5EE3rawEv>
 800db62:	4603      	mov	r3, r0
 800db64:	681b      	ldr	r3, [r3, #0]
 800db66:	4618      	mov	r0, r3
 800db68:	f000 f911 	bl	800dd8e <_ZN8gemmlowp10MaskIfZeroIlEET_S1_>
 800db6c:	4603      	mov	r3, r0
 800db6e:	4618      	mov	r0, r3
 800db70:	3708      	adds	r7, #8
 800db72:	46bd      	mov	sp, r7
 800db74:	bd80      	pop	{r7, pc}

0800db76 <_ZN8gemmlowp10FixedPointIlLi12EE3rawEv>:
  RawType& raw() { return i_; }
 800db76:	b480      	push	{r7}
 800db78:	b083      	sub	sp, #12
 800db7a:	af00      	add	r7, sp, #0
 800db7c:	6078      	str	r0, [r7, #4]
 800db7e:	687b      	ldr	r3, [r7, #4]
 800db80:	4618      	mov	r0, r3
 800db82:	370c      	adds	r7, #12
 800db84:	46bd      	mov	sp, r7
 800db86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db8a:	4770      	bx	lr

0800db8c <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILin12ElEET0_S1_>:
IntegerType SaturatingRoundingMultiplyByPOT(IntegerType x) {
 800db8c:	b580      	push	{r7, lr}
 800db8e:	b082      	sub	sp, #8
 800db90:	af00      	add	r7, sp, #0
 800db92:	6078      	str	r0, [r7, #4]
  return ImplSaturatingRoundingMultiplyByPOT<Exponent, IntegerType>::eval(x);
 800db94:	6878      	ldr	r0, [r7, #4]
 800db96:	f000 f90c 	bl	800ddb2 <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILin12ElLin1EE4evalEl>
 800db9a:	4603      	mov	r3, r0
}
 800db9c:	4618      	mov	r0, r3
 800db9e:	3708      	adds	r7, #8
 800dba0:	46bd      	mov	sp, r7
 800dba2:	bd80      	pop	{r7, pc}

0800dba4 <_ZN8gemmlowp10FixedPointIlLi12EE7FromRawEl>:
  static FixedPoint FromRaw(RawType x) {
 800dba4:	b580      	push	{r7, lr}
 800dba6:	b084      	sub	sp, #16
 800dba8:	af00      	add	r7, sp, #0
 800dbaa:	6078      	str	r0, [r7, #4]
    retval.raw() = x;
 800dbac:	f107 030c 	add.w	r3, r7, #12
 800dbb0:	4618      	mov	r0, r3
 800dbb2:	f7ff ffe0 	bl	800db76 <_ZN8gemmlowp10FixedPointIlLi12EE3rawEv>
 800dbb6:	4602      	mov	r2, r0
 800dbb8:	687b      	ldr	r3, [r7, #4]
 800dbba:	6013      	str	r3, [r2, #0]
    return retval;
 800dbbc:	68fb      	ldr	r3, [r7, #12]
  }
 800dbbe:	4618      	mov	r0, r3
 800dbc0:	3710      	adds	r7, #16
 800dbc2:	46bd      	mov	sp, r7
 800dbc4:	bd80      	pop	{r7, pc}

0800dbc6 <_ZSt3maxIaERKT_S2_S2_>:
    max(const _Tp& __a, const _Tp& __b)
 800dbc6:	b480      	push	{r7}
 800dbc8:	b083      	sub	sp, #12
 800dbca:	af00      	add	r7, sp, #0
 800dbcc:	6078      	str	r0, [r7, #4]
 800dbce:	6039      	str	r1, [r7, #0]
      if (__a < __b)
 800dbd0:	687b      	ldr	r3, [r7, #4]
 800dbd2:	f993 2000 	ldrsb.w	r2, [r3]
 800dbd6:	683b      	ldr	r3, [r7, #0]
 800dbd8:	f993 3000 	ldrsb.w	r3, [r3]
 800dbdc:	429a      	cmp	r2, r3
 800dbde:	da01      	bge.n	800dbe4 <_ZSt3maxIaERKT_S2_S2_+0x1e>
	return __b;
 800dbe0:	683b      	ldr	r3, [r7, #0]
 800dbe2:	e000      	b.n	800dbe6 <_ZSt3maxIaERKT_S2_S2_+0x20>
      return __a;
 800dbe4:	687b      	ldr	r3, [r7, #4]
    }
 800dbe6:	4618      	mov	r0, r3
 800dbe8:	370c      	adds	r7, #12
 800dbea:	46bd      	mov	sp, r7
 800dbec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbf0:	4770      	bx	lr

0800dbf2 <_ZN8gemmlowp10FixedPointIlLi0EE12ScalarRawMaxEv>:
  static const ScalarRawType ScalarRawMax() {
 800dbf2:	b580      	push	{r7, lr}
 800dbf4:	af00      	add	r7, sp, #0
    return std::numeric_limits<ScalarRawType>::max();
 800dbf6:	f7f4 f9b0 	bl	8001f5a <_ZNSt14numeric_limitsIlE3maxEv>
 800dbfa:	4603      	mov	r3, r0
  }
 800dbfc:	4618      	mov	r0, r3
 800dbfe:	bd80      	pop	{r7, pc}

0800dc00 <_ZN8gemmlowp10FixedPointIlLi2EE3rawEv>:
  RawType& raw() { return i_; }
 800dc00:	b480      	push	{r7}
 800dc02:	b083      	sub	sp, #12
 800dc04:	af00      	add	r7, sp, #0
 800dc06:	6078      	str	r0, [r7, #4]
 800dc08:	687b      	ldr	r3, [r7, #4]
 800dc0a:	4618      	mov	r0, r3
 800dc0c:	370c      	adds	r7, #12
 800dc0e:	46bd      	mov	sp, r7
 800dc10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc14:	4770      	bx	lr

0800dc16 <_ZN8gemmlowp10FixedPointIlLi2EE7FromRawEl>:
  static FixedPoint FromRaw(RawType x) {
 800dc16:	b580      	push	{r7, lr}
 800dc18:	b084      	sub	sp, #16
 800dc1a:	af00      	add	r7, sp, #0
 800dc1c:	6078      	str	r0, [r7, #4]
    retval.raw() = x;
 800dc1e:	f107 030c 	add.w	r3, r7, #12
 800dc22:	4618      	mov	r0, r3
 800dc24:	f7ff ffec 	bl	800dc00 <_ZN8gemmlowp10FixedPointIlLi2EE3rawEv>
 800dc28:	4602      	mov	r2, r0
 800dc2a:	687b      	ldr	r3, [r7, #4]
 800dc2c:	6013      	str	r3, [r2, #0]
    return retval;
 800dc2e:	68fb      	ldr	r3, [r7, #12]
  }
 800dc30:	4618      	mov	r0, r3
 800dc32:	3710      	adds	r7, #16
 800dc34:	46bd      	mov	sp, r7
 800dc36:	bd80      	pop	{r7, pc}

0800dc38 <_ZN8gemmlowp10FixedPointIlLi4EE3rawEv>:
  RawType& raw() { return i_; }
 800dc38:	b480      	push	{r7}
 800dc3a:	b083      	sub	sp, #12
 800dc3c:	af00      	add	r7, sp, #0
 800dc3e:	6078      	str	r0, [r7, #4]
 800dc40:	687b      	ldr	r3, [r7, #4]
 800dc42:	4618      	mov	r0, r3
 800dc44:	370c      	adds	r7, #12
 800dc46:	46bd      	mov	sp, r7
 800dc48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc4c:	4770      	bx	lr

0800dc4e <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILi2ElEET0_S1_>:
IntegerType SaturatingRoundingMultiplyByPOT(IntegerType x) {
 800dc4e:	b580      	push	{r7, lr}
 800dc50:	b082      	sub	sp, #8
 800dc52:	af00      	add	r7, sp, #0
 800dc54:	6078      	str	r0, [r7, #4]
  return ImplSaturatingRoundingMultiplyByPOT<Exponent, IntegerType>::eval(x);
 800dc56:	6878      	ldr	r0, [r7, #4]
 800dc58:	f000 f8b8 	bl	800ddcc <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILi2ElLi1EE4evalEl>
 800dc5c:	4603      	mov	r3, r0
}
 800dc5e:	4618      	mov	r0, r3
 800dc60:	3708      	adds	r7, #8
 800dc62:	46bd      	mov	sp, r7
 800dc64:	bd80      	pop	{r7, pc}

0800dc66 <_ZN8gemmlowp10FixedPointIlLi1EE3rawEv>:
  RawType& raw() { return i_; }
 800dc66:	b480      	push	{r7}
 800dc68:	b083      	sub	sp, #12
 800dc6a:	af00      	add	r7, sp, #0
 800dc6c:	6078      	str	r0, [r7, #4]
 800dc6e:	687b      	ldr	r3, [r7, #4]
 800dc70:	4618      	mov	r0, r3
 800dc72:	370c      	adds	r7, #12
 800dc74:	46bd      	mov	sp, r7
 800dc76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc7a:	4770      	bx	lr

0800dc7c <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILi1ElEET0_S1_>:
IntegerType SaturatingRoundingMultiplyByPOT(IntegerType x) {
 800dc7c:	b580      	push	{r7, lr}
 800dc7e:	b082      	sub	sp, #8
 800dc80:	af00      	add	r7, sp, #0
 800dc82:	6078      	str	r0, [r7, #4]
  return ImplSaturatingRoundingMultiplyByPOT<Exponent, IntegerType>::eval(x);
 800dc84:	6878      	ldr	r0, [r7, #4]
 800dc86:	f000 f8e3 	bl	800de50 <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILi1ElLi1EE4evalEl>
 800dc8a:	4603      	mov	r3, r0
}
 800dc8c:	4618      	mov	r0, r3
 800dc8e:	3708      	adds	r7, #8
 800dc90:	46bd      	mov	sp, r7
 800dc92:	bd80      	pop	{r7, pc}

0800dc94 <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILi5ElEET0_S1_>:
IntegerType SaturatingRoundingMultiplyByPOT(IntegerType x) {
 800dc94:	b580      	push	{r7, lr}
 800dc96:	b082      	sub	sp, #8
 800dc98:	af00      	add	r7, sp, #0
 800dc9a:	6078      	str	r0, [r7, #4]
  return ImplSaturatingRoundingMultiplyByPOT<Exponent, IntegerType>::eval(x);
 800dc9c:	6878      	ldr	r0, [r7, #4]
 800dc9e:	f000 f919 	bl	800ded4 <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILi5ElLi1EE4evalEl>
 800dca2:	4603      	mov	r3, r0
}
 800dca4:	4618      	mov	r0, r3
 800dca6:	3708      	adds	r7, #8
 800dca8:	46bd      	mov	sp, r7
 800dcaa:	bd80      	pop	{r7, pc}

0800dcac <_ZN8gemmlowp10FixedPointIlLi0EE11ConstantPOTILin3EEES1_v>:
  static FixedPoint ConstantPOT() {
 800dcac:	b580      	push	{r7, lr}
 800dcae:	af00      	add	r7, sp, #0
    return FromScalarRaw(ScalarRawType(1) << kOffset);
 800dcb0:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 800dcb4:	f7ff fa03 	bl	800d0be <_ZN8gemmlowp10FixedPointIlLi0EE13FromScalarRawEl>
 800dcb8:	4603      	mov	r3, r0
  }
 800dcba:	4618      	mov	r0, r3
 800dcbc:	bd80      	pop	{r7, pc}

0800dcbe <_ZN8gemmlowpplIlLi0EEENS_10FixedPointIT_XT0_EEES3_S3_>:
MAKE_FIXEDPOINT_BINARY_FUNC(operator+, Add)
 800dcbe:	b590      	push	{r4, r7, lr}
 800dcc0:	b083      	sub	sp, #12
 800dcc2:	af00      	add	r7, sp, #0
 800dcc4:	6078      	str	r0, [r7, #4]
 800dcc6:	6039      	str	r1, [r7, #0]
 800dcc8:	1d3b      	adds	r3, r7, #4
 800dcca:	4618      	mov	r0, r3
 800dccc:	f7ff f9ec 	bl	800d0a8 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 800dcd0:	4603      	mov	r3, r0
 800dcd2:	681c      	ldr	r4, [r3, #0]
 800dcd4:	463b      	mov	r3, r7
 800dcd6:	4618      	mov	r0, r3
 800dcd8:	f7ff f9e6 	bl	800d0a8 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 800dcdc:	4603      	mov	r3, r0
 800dcde:	681b      	ldr	r3, [r3, #0]
 800dce0:	4619      	mov	r1, r3
 800dce2:	4620      	mov	r0, r4
 800dce4:	f7fd fb02 	bl	800b2ec <_ZN8gemmlowp3AddIlEET_S1_S1_>
 800dce8:	4603      	mov	r3, r0
 800dcea:	4618      	mov	r0, r3
 800dcec:	f7ff faed 	bl	800d2ca <_ZN8gemmlowp10FixedPointIlLi0EE7FromRawEl>
 800dcf0:	4603      	mov	r3, r0
 800dcf2:	4618      	mov	r0, r3
 800dcf4:	370c      	adds	r7, #12
 800dcf6:	46bd      	mov	sp, r7
 800dcf8:	bd90      	pop	{r4, r7, pc}

0800dcfa <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILin2ElLi0EEENS_10FixedPointIT0_XT1_EEES3_>:
FixedPoint<tRawType, tIntegerBits> SaturatingRoundingMultiplyByPOT(
 800dcfa:	b580      	push	{r7, lr}
 800dcfc:	b082      	sub	sp, #8
 800dcfe:	af00      	add	r7, sp, #0
 800dd00:	6078      	str	r0, [r7, #4]
      SaturatingRoundingMultiplyByPOT<tExponent>(a.raw()));
 800dd02:	1d3b      	adds	r3, r7, #4
 800dd04:	4618      	mov	r0, r3
 800dd06:	f7ff f9cf 	bl	800d0a8 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 800dd0a:	4603      	mov	r3, r0
  return FixedPoint<tRawType, tIntegerBits>::FromRaw(
 800dd0c:	681b      	ldr	r3, [r3, #0]
 800dd0e:	4618      	mov	r0, r3
 800dd10:	f000 f922 	bl	800df58 <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILin2ElEET0_S1_>
 800dd14:	4603      	mov	r3, r0
 800dd16:	4618      	mov	r0, r3
 800dd18:	f7ff fad7 	bl	800d2ca <_ZN8gemmlowp10FixedPointIlLi0EE7FromRawEl>
 800dd1c:	4603      	mov	r3, r0
}
 800dd1e:	4618      	mov	r0, r3
 800dd20:	3708      	adds	r7, #8
 800dd22:	46bd      	mov	sp, r7
 800dd24:	bd80      	pop	{r7, pc}

0800dd26 <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILin1ElLi0EEENS_10FixedPointIT0_XT1_EEES3_>:
FixedPoint<tRawType, tIntegerBits> SaturatingRoundingMultiplyByPOT(
 800dd26:	b580      	push	{r7, lr}
 800dd28:	b082      	sub	sp, #8
 800dd2a:	af00      	add	r7, sp, #0
 800dd2c:	6078      	str	r0, [r7, #4]
      SaturatingRoundingMultiplyByPOT<tExponent>(a.raw()));
 800dd2e:	1d3b      	adds	r3, r7, #4
 800dd30:	4618      	mov	r0, r3
 800dd32:	f7ff f9b9 	bl	800d0a8 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 800dd36:	4603      	mov	r3, r0
  return FixedPoint<tRawType, tIntegerBits>::FromRaw(
 800dd38:	681b      	ldr	r3, [r3, #0]
 800dd3a:	4618      	mov	r0, r3
 800dd3c:	f7ff f9e0 	bl	800d100 <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILin1ElEET0_S1_>
 800dd40:	4603      	mov	r3, r0
 800dd42:	4618      	mov	r0, r3
 800dd44:	f7ff fac1 	bl	800d2ca <_ZN8gemmlowp10FixedPointIlLi0EE7FromRawEl>
 800dd48:	4603      	mov	r3, r0
}
 800dd4a:	4618      	mov	r0, r3
 800dd4c:	3708      	adds	r7, #8
 800dd4e:	46bd      	mov	sp, r7
 800dd50:	bd80      	pop	{r7, pc}

0800dd52 <_ZN8gemmlowp20AddSaturatingIf16BitIlLi0EEENS_10FixedPointIT_XT0_EEES3_S3_>:
FixedPoint<tRawType, tIntegerBits> AddSaturatingIf16Bit(
 800dd52:	b590      	push	{r4, r7, lr}
 800dd54:	b083      	sub	sp, #12
 800dd56:	af00      	add	r7, sp, #0
 800dd58:	6078      	str	r0, [r7, #4]
 800dd5a:	6039      	str	r1, [r7, #0]
      AddSaturatingIf16Bit(a.raw(), b.raw()));
 800dd5c:	1d3b      	adds	r3, r7, #4
 800dd5e:	4618      	mov	r0, r3
 800dd60:	f7ff f9a2 	bl	800d0a8 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 800dd64:	4603      	mov	r3, r0
  return FixedPoint<tRawType, tIntegerBits>::FromRaw(
 800dd66:	681c      	ldr	r4, [r3, #0]
      AddSaturatingIf16Bit(a.raw(), b.raw()));
 800dd68:	463b      	mov	r3, r7
 800dd6a:	4618      	mov	r0, r3
 800dd6c:	f7ff f99c 	bl	800d0a8 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 800dd70:	4603      	mov	r3, r0
  return FixedPoint<tRawType, tIntegerBits>::FromRaw(
 800dd72:	681b      	ldr	r3, [r3, #0]
 800dd74:	4619      	mov	r1, r3
 800dd76:	4620      	mov	r0, r4
 800dd78:	f000 f8fa 	bl	800df70 <_ZN8gemmlowp20AddSaturatingIf16BitIlEET_S1_S1_>
 800dd7c:	4603      	mov	r3, r0
 800dd7e:	4618      	mov	r0, r3
 800dd80:	f7ff faa3 	bl	800d2ca <_ZN8gemmlowp10FixedPointIlLi0EE7FromRawEl>
 800dd84:	4603      	mov	r3, r0
}
 800dd86:	4618      	mov	r0, r3
 800dd88:	370c      	adds	r7, #12
 800dd8a:	46bd      	mov	sp, r7
 800dd8c:	bd90      	pop	{r4, r7, pc}

0800dd8e <_ZN8gemmlowp10MaskIfZeroIlEET_S1_>:
tIntegerType MaskIfZero(tIntegerType a) {
 800dd8e:	b580      	push	{r7, lr}
 800dd90:	b082      	sub	sp, #8
 800dd92:	af00      	add	r7, sp, #0
 800dd94:	6078      	str	r0, [r7, #4]
  return MaskIfNonZero<tIntegerType>(!a);
 800dd96:	687b      	ldr	r3, [r7, #4]
 800dd98:	2b00      	cmp	r3, #0
 800dd9a:	bf0c      	ite	eq
 800dd9c:	2301      	moveq	r3, #1
 800dd9e:	2300      	movne	r3, #0
 800dda0:	b2db      	uxtb	r3, r3
 800dda2:	4618      	mov	r0, r3
 800dda4:	f7fd fac4 	bl	800b330 <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_>
 800dda8:	4603      	mov	r3, r0
}
 800ddaa:	4618      	mov	r0, r3
 800ddac:	3708      	adds	r7, #8
 800ddae:	46bd      	mov	sp, r7
 800ddb0:	bd80      	pop	{r7, pc}

0800ddb2 <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILin12ElLin1EE4evalEl>:
  static IntegerType eval(IntegerType x) {
 800ddb2:	b580      	push	{r7, lr}
 800ddb4:	b082      	sub	sp, #8
 800ddb6:	af00      	add	r7, sp, #0
 800ddb8:	6078      	str	r0, [r7, #4]
    return RoundingDivideByPOT<IntegerType>(x, -Exponent);
 800ddba:	210c      	movs	r1, #12
 800ddbc:	6878      	ldr	r0, [r7, #4]
 800ddbe:	f7fd f9e5 	bl	800b18c <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i>
 800ddc2:	4603      	mov	r3, r0
  }
 800ddc4:	4618      	mov	r0, r3
 800ddc6:	3708      	adds	r7, #8
 800ddc8:	46bd      	mov	sp, r7
 800ddca:	bd80      	pop	{r7, pc}

0800ddcc <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILi2ElLi1EE4evalEl>:
  static IntegerType eval(IntegerType x) {
 800ddcc:	b580      	push	{r7, lr}
 800ddce:	b08a      	sub	sp, #40	; 0x28
 800ddd0:	af00      	add	r7, sp, #0
 800ddd2:	6078      	str	r0, [r7, #4]
        Dup<IntegerType>(std::numeric_limits<ScalarIntegerType>::min());
 800ddd4:	f7f4 f8b8 	bl	8001f48 <_ZNSt14numeric_limitsIlE3minEv>
 800ddd8:	4603      	mov	r3, r0
 800ddda:	4618      	mov	r0, r3
 800dddc:	f7fd fa4a 	bl	800b274 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 800dde0:	6278      	str	r0, [r7, #36]	; 0x24
        Dup<IntegerType>(std::numeric_limits<ScalarIntegerType>::max());
 800dde2:	f7f4 f8ba 	bl	8001f5a <_ZNSt14numeric_limitsIlE3maxEv>
 800dde6:	4603      	mov	r3, r0
 800dde8:	4618      	mov	r0, r3
 800ddea:	f7fd fa43 	bl	800b274 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 800ddee:	6238      	str	r0, [r7, #32]
    const int ScalarIntegerTypeBits = 8 * sizeof(ScalarIntegerType);
 800ddf0:	2320      	movs	r3, #32
 800ddf2:	61fb      	str	r3, [r7, #28]
    const std::int32_t threshold =
 800ddf4:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 800ddf8:	61bb      	str	r3, [r7, #24]
        MaskIfGreaterThan(x, Dup<IntegerType>(threshold));
 800ddfa:	f06f 4060 	mvn.w	r0, #3758096384	; 0xe0000000
 800ddfe:	f7fd fa39 	bl	800b274 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 800de02:	4603      	mov	r3, r0
 800de04:	4619      	mov	r1, r3
 800de06:	6878      	ldr	r0, [r7, #4]
 800de08:	f7fd fa7e 	bl	800b308 <_ZN8gemmlowp17MaskIfGreaterThanIlEET_S1_S1_>
 800de0c:	6178      	str	r0, [r7, #20]
        MaskIfLessThan(x, Dup<IntegerType>(-threshold));
 800de0e:	480f      	ldr	r0, [pc, #60]	; (800de4c <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILi2ElLi1EE4evalEl+0x80>)
 800de10:	f7fd fa30 	bl	800b274 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 800de14:	4603      	mov	r3, r0
 800de16:	4619      	mov	r1, r3
 800de18:	6878      	ldr	r0, [r7, #4]
 800de1a:	f7fd fa53 	bl	800b2c4 <_ZN8gemmlowp14MaskIfLessThanIlEET_S1_S1_>
 800de1e:	6138      	str	r0, [r7, #16]
    IntegerType result = ShiftLeft(x, Exponent);
 800de20:	2102      	movs	r1, #2
 800de22:	6878      	ldr	r0, [r7, #4]
 800de24:	f7ff f993 	bl	800d14e <_ZN8gemmlowp9ShiftLeftIlEET_S1_i>
 800de28:	60f8      	str	r0, [r7, #12]
    result = SelectUsingMask(positive_mask, max, result);
 800de2a:	68fa      	ldr	r2, [r7, #12]
 800de2c:	6a39      	ldr	r1, [r7, #32]
 800de2e:	6978      	ldr	r0, [r7, #20]
 800de30:	f7ff f9d3 	bl	800d1da <_ZN8gemmlowp15SelectUsingMaskIlEET_S1_S1_S1_>
 800de34:	60f8      	str	r0, [r7, #12]
    result = SelectUsingMask(negative_mask, min, result);
 800de36:	68fa      	ldr	r2, [r7, #12]
 800de38:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800de3a:	6938      	ldr	r0, [r7, #16]
 800de3c:	f7ff f9cd 	bl	800d1da <_ZN8gemmlowp15SelectUsingMaskIlEET_S1_S1_S1_>
 800de40:	60f8      	str	r0, [r7, #12]
    return result;
 800de42:	68fb      	ldr	r3, [r7, #12]
  }
 800de44:	4618      	mov	r0, r3
 800de46:	3728      	adds	r7, #40	; 0x28
 800de48:	46bd      	mov	sp, r7
 800de4a:	bd80      	pop	{r7, pc}
 800de4c:	e0000001 	.word	0xe0000001

0800de50 <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILi1ElLi1EE4evalEl>:
  static IntegerType eval(IntegerType x) {
 800de50:	b580      	push	{r7, lr}
 800de52:	b08a      	sub	sp, #40	; 0x28
 800de54:	af00      	add	r7, sp, #0
 800de56:	6078      	str	r0, [r7, #4]
        Dup<IntegerType>(std::numeric_limits<ScalarIntegerType>::min());
 800de58:	f7f4 f876 	bl	8001f48 <_ZNSt14numeric_limitsIlE3minEv>
 800de5c:	4603      	mov	r3, r0
 800de5e:	4618      	mov	r0, r3
 800de60:	f7fd fa08 	bl	800b274 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 800de64:	6278      	str	r0, [r7, #36]	; 0x24
        Dup<IntegerType>(std::numeric_limits<ScalarIntegerType>::max());
 800de66:	f7f4 f878 	bl	8001f5a <_ZNSt14numeric_limitsIlE3maxEv>
 800de6a:	4603      	mov	r3, r0
 800de6c:	4618      	mov	r0, r3
 800de6e:	f7fd fa01 	bl	800b274 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 800de72:	6238      	str	r0, [r7, #32]
    const int ScalarIntegerTypeBits = 8 * sizeof(ScalarIntegerType);
 800de74:	2320      	movs	r3, #32
 800de76:	61fb      	str	r3, [r7, #28]
    const std::int32_t threshold =
 800de78:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800de7c:	61bb      	str	r3, [r7, #24]
        MaskIfGreaterThan(x, Dup<IntegerType>(threshold));
 800de7e:	f06f 4040 	mvn.w	r0, #3221225472	; 0xc0000000
 800de82:	f7fd f9f7 	bl	800b274 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 800de86:	4603      	mov	r3, r0
 800de88:	4619      	mov	r1, r3
 800de8a:	6878      	ldr	r0, [r7, #4]
 800de8c:	f7fd fa3c 	bl	800b308 <_ZN8gemmlowp17MaskIfGreaterThanIlEET_S1_S1_>
 800de90:	6178      	str	r0, [r7, #20]
        MaskIfLessThan(x, Dup<IntegerType>(-threshold));
 800de92:	480f      	ldr	r0, [pc, #60]	; (800ded0 <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILi1ElLi1EE4evalEl+0x80>)
 800de94:	f7fd f9ee 	bl	800b274 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 800de98:	4603      	mov	r3, r0
 800de9a:	4619      	mov	r1, r3
 800de9c:	6878      	ldr	r0, [r7, #4]
 800de9e:	f7fd fa11 	bl	800b2c4 <_ZN8gemmlowp14MaskIfLessThanIlEET_S1_S1_>
 800dea2:	6138      	str	r0, [r7, #16]
    IntegerType result = ShiftLeft(x, Exponent);
 800dea4:	2101      	movs	r1, #1
 800dea6:	6878      	ldr	r0, [r7, #4]
 800dea8:	f7ff f951 	bl	800d14e <_ZN8gemmlowp9ShiftLeftIlEET_S1_i>
 800deac:	60f8      	str	r0, [r7, #12]
    result = SelectUsingMask(positive_mask, max, result);
 800deae:	68fa      	ldr	r2, [r7, #12]
 800deb0:	6a39      	ldr	r1, [r7, #32]
 800deb2:	6978      	ldr	r0, [r7, #20]
 800deb4:	f7ff f991 	bl	800d1da <_ZN8gemmlowp15SelectUsingMaskIlEET_S1_S1_S1_>
 800deb8:	60f8      	str	r0, [r7, #12]
    result = SelectUsingMask(negative_mask, min, result);
 800deba:	68fa      	ldr	r2, [r7, #12]
 800debc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800debe:	6938      	ldr	r0, [r7, #16]
 800dec0:	f7ff f98b 	bl	800d1da <_ZN8gemmlowp15SelectUsingMaskIlEET_S1_S1_S1_>
 800dec4:	60f8      	str	r0, [r7, #12]
    return result;
 800dec6:	68fb      	ldr	r3, [r7, #12]
  }
 800dec8:	4618      	mov	r0, r3
 800deca:	3728      	adds	r7, #40	; 0x28
 800decc:	46bd      	mov	sp, r7
 800dece:	bd80      	pop	{r7, pc}
 800ded0:	c0000001 	.word	0xc0000001

0800ded4 <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILi5ElLi1EE4evalEl>:
  static IntegerType eval(IntegerType x) {
 800ded4:	b580      	push	{r7, lr}
 800ded6:	b08a      	sub	sp, #40	; 0x28
 800ded8:	af00      	add	r7, sp, #0
 800deda:	6078      	str	r0, [r7, #4]
        Dup<IntegerType>(std::numeric_limits<ScalarIntegerType>::min());
 800dedc:	f7f4 f834 	bl	8001f48 <_ZNSt14numeric_limitsIlE3minEv>
 800dee0:	4603      	mov	r3, r0
 800dee2:	4618      	mov	r0, r3
 800dee4:	f7fd f9c6 	bl	800b274 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 800dee8:	6278      	str	r0, [r7, #36]	; 0x24
        Dup<IntegerType>(std::numeric_limits<ScalarIntegerType>::max());
 800deea:	f7f4 f836 	bl	8001f5a <_ZNSt14numeric_limitsIlE3maxEv>
 800deee:	4603      	mov	r3, r0
 800def0:	4618      	mov	r0, r3
 800def2:	f7fd f9bf 	bl	800b274 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 800def6:	6238      	str	r0, [r7, #32]
    const int ScalarIntegerTypeBits = 8 * sizeof(ScalarIntegerType);
 800def8:	2320      	movs	r3, #32
 800defa:	61fb      	str	r3, [r7, #28]
    const std::int32_t threshold =
 800defc:	f06f 437c 	mvn.w	r3, #4227858432	; 0xfc000000
 800df00:	61bb      	str	r3, [r7, #24]
        MaskIfGreaterThan(x, Dup<IntegerType>(threshold));
 800df02:	f06f 407c 	mvn.w	r0, #4227858432	; 0xfc000000
 800df06:	f7fd f9b5 	bl	800b274 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 800df0a:	4603      	mov	r3, r0
 800df0c:	4619      	mov	r1, r3
 800df0e:	6878      	ldr	r0, [r7, #4]
 800df10:	f7fd f9fa 	bl	800b308 <_ZN8gemmlowp17MaskIfGreaterThanIlEET_S1_S1_>
 800df14:	6178      	str	r0, [r7, #20]
        MaskIfLessThan(x, Dup<IntegerType>(-threshold));
 800df16:	480f      	ldr	r0, [pc, #60]	; (800df54 <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILi5ElLi1EE4evalEl+0x80>)
 800df18:	f7fd f9ac 	bl	800b274 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 800df1c:	4603      	mov	r3, r0
 800df1e:	4619      	mov	r1, r3
 800df20:	6878      	ldr	r0, [r7, #4]
 800df22:	f7fd f9cf 	bl	800b2c4 <_ZN8gemmlowp14MaskIfLessThanIlEET_S1_S1_>
 800df26:	6138      	str	r0, [r7, #16]
    IntegerType result = ShiftLeft(x, Exponent);
 800df28:	2105      	movs	r1, #5
 800df2a:	6878      	ldr	r0, [r7, #4]
 800df2c:	f7ff f90f 	bl	800d14e <_ZN8gemmlowp9ShiftLeftIlEET_S1_i>
 800df30:	60f8      	str	r0, [r7, #12]
    result = SelectUsingMask(positive_mask, max, result);
 800df32:	68fa      	ldr	r2, [r7, #12]
 800df34:	6a39      	ldr	r1, [r7, #32]
 800df36:	6978      	ldr	r0, [r7, #20]
 800df38:	f7ff f94f 	bl	800d1da <_ZN8gemmlowp15SelectUsingMaskIlEET_S1_S1_S1_>
 800df3c:	60f8      	str	r0, [r7, #12]
    result = SelectUsingMask(negative_mask, min, result);
 800df3e:	68fa      	ldr	r2, [r7, #12]
 800df40:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800df42:	6938      	ldr	r0, [r7, #16]
 800df44:	f7ff f949 	bl	800d1da <_ZN8gemmlowp15SelectUsingMaskIlEET_S1_S1_S1_>
 800df48:	60f8      	str	r0, [r7, #12]
    return result;
 800df4a:	68fb      	ldr	r3, [r7, #12]
  }
 800df4c:	4618      	mov	r0, r3
 800df4e:	3728      	adds	r7, #40	; 0x28
 800df50:	46bd      	mov	sp, r7
 800df52:	bd80      	pop	{r7, pc}
 800df54:	fc000001 	.word	0xfc000001

0800df58 <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILin2ElEET0_S1_>:
IntegerType SaturatingRoundingMultiplyByPOT(IntegerType x) {
 800df58:	b580      	push	{r7, lr}
 800df5a:	b082      	sub	sp, #8
 800df5c:	af00      	add	r7, sp, #0
 800df5e:	6078      	str	r0, [r7, #4]
  return ImplSaturatingRoundingMultiplyByPOT<Exponent, IntegerType>::eval(x);
 800df60:	6878      	ldr	r0, [r7, #4]
 800df62:	f000 f813 	bl	800df8c <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILin2ElLin1EE4evalEl>
 800df66:	4603      	mov	r3, r0
}
 800df68:	4618      	mov	r0, r3
 800df6a:	3708      	adds	r7, #8
 800df6c:	46bd      	mov	sp, r7
 800df6e:	bd80      	pop	{r7, pc}

0800df70 <_ZN8gemmlowp20AddSaturatingIf16BitIlEET_S1_S1_>:
IntegerType AddSaturatingIf16Bit(IntegerType a, IntegerType b) {
 800df70:	b580      	push	{r7, lr}
 800df72:	b082      	sub	sp, #8
 800df74:	af00      	add	r7, sp, #0
 800df76:	6078      	str	r0, [r7, #4]
 800df78:	6039      	str	r1, [r7, #0]
  return AddSaturatingIf16BitImpl<IntegerType, sizeof(ScalarType) == 2>::Run(a,
 800df7a:	6839      	ldr	r1, [r7, #0]
 800df7c:	6878      	ldr	r0, [r7, #4]
 800df7e:	f000 f812 	bl	800dfa6 <_ZN8gemmlowp24AddSaturatingIf16BitImplIlLb0EE3RunEll>
 800df82:	4603      	mov	r3, r0
}
 800df84:	4618      	mov	r0, r3
 800df86:	3708      	adds	r7, #8
 800df88:	46bd      	mov	sp, r7
 800df8a:	bd80      	pop	{r7, pc}

0800df8c <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILin2ElLin1EE4evalEl>:
  static IntegerType eval(IntegerType x) {
 800df8c:	b580      	push	{r7, lr}
 800df8e:	b082      	sub	sp, #8
 800df90:	af00      	add	r7, sp, #0
 800df92:	6078      	str	r0, [r7, #4]
    return RoundingDivideByPOT<IntegerType>(x, -Exponent);
 800df94:	2102      	movs	r1, #2
 800df96:	6878      	ldr	r0, [r7, #4]
 800df98:	f7fd f8f8 	bl	800b18c <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i>
 800df9c:	4603      	mov	r3, r0
  }
 800df9e:	4618      	mov	r0, r3
 800dfa0:	3708      	adds	r7, #8
 800dfa2:	46bd      	mov	sp, r7
 800dfa4:	bd80      	pop	{r7, pc}

0800dfa6 <_ZN8gemmlowp24AddSaturatingIf16BitImplIlLb0EE3RunEll>:
  static IntegerType Run(IntegerType a, IntegerType b) { return Add(a, b); }
 800dfa6:	b580      	push	{r7, lr}
 800dfa8:	b082      	sub	sp, #8
 800dfaa:	af00      	add	r7, sp, #0
 800dfac:	6078      	str	r0, [r7, #4]
 800dfae:	6039      	str	r1, [r7, #0]
 800dfb0:	6839      	ldr	r1, [r7, #0]
 800dfb2:	6878      	ldr	r0, [r7, #4]
 800dfb4:	f7fd f99a 	bl	800b2ec <_ZN8gemmlowp3AddIlEET_S1_S1_>
 800dfb8:	4603      	mov	r3, r0
 800dfba:	4618      	mov	r0, r3
 800dfbc:	3708      	adds	r7, #8
 800dfbe:	46bd      	mov	sp, r7
 800dfc0:	bd80      	pop	{r7, pc}
	...

0800dfc4 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode>:
namespace reshape {

constexpr int kInputTensor = 0;
constexpr int kOutputTensor = 0;

TfLiteStatus ReshapeOutput(TfLiteContext* context, TfLiteNode* node) {
 800dfc4:	b5b0      	push	{r4, r5, r7, lr}
 800dfc6:	b08e      	sub	sp, #56	; 0x38
 800dfc8:	af04      	add	r7, sp, #16
 800dfca:	6078      	str	r0, [r7, #4]
 800dfcc:	6039      	str	r1, [r7, #0]
  const TfLiteTensor* input = GetInput(context, node, kInputTensor);
 800dfce:	2200      	movs	r2, #0
 800dfd0:	6839      	ldr	r1, [r7, #0]
 800dfd2:	6878      	ldr	r0, [r7, #4]
 800dfd4:	f7f8 f822 	bl	800601c <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
 800dfd8:	61b8      	str	r0, [r7, #24]
  TF_LITE_ENSURE(context, input != nullptr);
 800dfda:	69bb      	ldr	r3, [r7, #24]
 800dfdc:	2b00      	cmp	r3, #0
 800dfde:	d10a      	bne.n	800dff6 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x32>
 800dfe0:	687b      	ldr	r3, [r7, #4]
 800dfe2:	695c      	ldr	r4, [r3, #20]
 800dfe4:	4b62      	ldr	r3, [pc, #392]	; (800e170 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x1ac>)
 800dfe6:	9300      	str	r3, [sp, #0]
 800dfe8:	2323      	movs	r3, #35	; 0x23
 800dfea:	4a62      	ldr	r2, [pc, #392]	; (800e174 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x1b0>)
 800dfec:	4962      	ldr	r1, [pc, #392]	; (800e178 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x1b4>)
 800dfee:	6878      	ldr	r0, [r7, #4]
 800dff0:	47a0      	blx	r4
 800dff2:	2301      	movs	r3, #1
 800dff4:	e0b8      	b.n	800e168 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x1a4>
  TfLiteTensor* output = GetOutput(context, node, kOutputTensor);
 800dff6:	2200      	movs	r2, #0
 800dff8:	6839      	ldr	r1, [r7, #0]
 800dffa:	6878      	ldr	r0, [r7, #4]
 800dffc:	f7f8 f81e 	bl	800603c <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei>
 800e000:	6178      	str	r0, [r7, #20]
  TF_LITE_ENSURE(context, output != nullptr);
 800e002:	697b      	ldr	r3, [r7, #20]
 800e004:	2b00      	cmp	r3, #0
 800e006:	d10a      	bne.n	800e01e <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x5a>
 800e008:	687b      	ldr	r3, [r7, #4]
 800e00a:	695c      	ldr	r4, [r3, #20]
 800e00c:	4b5b      	ldr	r3, [pc, #364]	; (800e17c <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x1b8>)
 800e00e:	9300      	str	r3, [sp, #0]
 800e010:	2325      	movs	r3, #37	; 0x25
 800e012:	4a58      	ldr	r2, [pc, #352]	; (800e174 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x1b0>)
 800e014:	4958      	ldr	r1, [pc, #352]	; (800e178 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x1b4>)
 800e016:	6878      	ldr	r0, [r7, #4]
 800e018:	47a0      	blx	r4
 800e01a:	2301      	movs	r3, #1
 800e01c:	e0a4      	b.n	800e168 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x1a4>
  // Tensorflow's Reshape allows one of the shape components to have the
  // special -1 value, meaning it will be calculated automatically based on the
  // input. Here we calculate what that dimension should be so that the number
  // of output elements in the same as the number of input elements.
  int num_input_elements = NumElements(input);
 800e01e:	69b8      	ldr	r0, [r7, #24]
 800e020:	f7fd fbbd 	bl	800b79e <_ZN6tflite11NumElementsEPK12TfLiteTensor>
 800e024:	4602      	mov	r2, r0
 800e026:	460b      	mov	r3, r1
 800e028:	4613      	mov	r3, r2
 800e02a:	613b      	str	r3, [r7, #16]
  TfLiteIntArray* output_shape = output->dims;
 800e02c:	697b      	ldr	r3, [r7, #20]
 800e02e:	689b      	ldr	r3, [r3, #8]
 800e030:	60fb      	str	r3, [r7, #12]

  if (NumInputs(node) == 1 &&  // Legacy scalar supported with params.
 800e032:	6838      	ldr	r0, [r7, #0]
 800e034:	f7fd fab0 	bl	800b598 <_ZN6tflite9NumInputsEPK10TfLiteNode>
 800e038:	4603      	mov	r3, r0
      output_shape->size == 1 && output_shape->data[0] == 0) {
 800e03a:	2b01      	cmp	r3, #1
 800e03c:	d109      	bne.n	800e052 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x8e>
 800e03e:	68fb      	ldr	r3, [r7, #12]
 800e040:	681b      	ldr	r3, [r3, #0]
  if (NumInputs(node) == 1 &&  // Legacy scalar supported with params.
 800e042:	2b01      	cmp	r3, #1
 800e044:	d105      	bne.n	800e052 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x8e>
      output_shape->size == 1 && output_shape->data[0] == 0) {
 800e046:	68fb      	ldr	r3, [r7, #12]
 800e048:	685b      	ldr	r3, [r3, #4]
 800e04a:	2b00      	cmp	r3, #0
 800e04c:	d101      	bne.n	800e052 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x8e>
 800e04e:	2301      	movs	r3, #1
 800e050:	e000      	b.n	800e054 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x90>
 800e052:	2300      	movs	r3, #0
  if (NumInputs(node) == 1 &&  // Legacy scalar supported with params.
 800e054:	2b00      	cmp	r3, #0
 800e056:	d002      	beq.n	800e05e <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x9a>
    // Legacy tflite models use a shape parameter of [0] to indicate scalars,
    // so adjust accordingly. TODO(b/111614235): Allow zero-sized buffers during
    // toco conversion.
    output_shape->size = 0;
 800e058:	68fb      	ldr	r3, [r7, #12]
 800e05a:	2200      	movs	r2, #0
 800e05c:	601a      	str	r2, [r3, #0]
  }

  int num_output_elements = 1;
 800e05e:	2301      	movs	r3, #1
 800e060:	627b      	str	r3, [r7, #36]	; 0x24
  int stretch_dim = -1;
 800e062:	f04f 33ff 	mov.w	r3, #4294967295
 800e066:	623b      	str	r3, [r7, #32]
  for (int i = 0; i < output_shape->size; ++i) {
 800e068:	2300      	movs	r3, #0
 800e06a:	61fb      	str	r3, [r7, #28]
 800e06c:	68fb      	ldr	r3, [r7, #12]
 800e06e:	681b      	ldr	r3, [r3, #0]
 800e070:	69fa      	ldr	r2, [r7, #28]
 800e072:	429a      	cmp	r2, r3
 800e074:	da2b      	bge.n	800e0ce <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x10a>
    int value = output_shape->data[i];
 800e076:	68fa      	ldr	r2, [r7, #12]
 800e078:	69fb      	ldr	r3, [r7, #28]
 800e07a:	009b      	lsls	r3, r3, #2
 800e07c:	4413      	add	r3, r2
 800e07e:	685b      	ldr	r3, [r3, #4]
 800e080:	60bb      	str	r3, [r7, #8]
    if (value == -1) {
 800e082:	68bb      	ldr	r3, [r7, #8]
 800e084:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e088:	d118      	bne.n	800e0bc <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0xf8>
      TF_LITE_ENSURE_EQ(context, stretch_dim, -1);
 800e08a:	6a3b      	ldr	r3, [r7, #32]
 800e08c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e090:	d011      	beq.n	800e0b6 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0xf2>
 800e092:	687b      	ldr	r3, [r7, #4]
 800e094:	695c      	ldr	r4, [r3, #20]
 800e096:	f04f 33ff 	mov.w	r3, #4294967295
 800e09a:	9303      	str	r3, [sp, #12]
 800e09c:	6a3b      	ldr	r3, [r7, #32]
 800e09e:	9302      	str	r3, [sp, #8]
 800e0a0:	4b37      	ldr	r3, [pc, #220]	; (800e180 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x1bc>)
 800e0a2:	9301      	str	r3, [sp, #4]
 800e0a4:	4b37      	ldr	r3, [pc, #220]	; (800e184 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x1c0>)
 800e0a6:	9300      	str	r3, [sp, #0]
 800e0a8:	233a      	movs	r3, #58	; 0x3a
 800e0aa:	4a32      	ldr	r2, [pc, #200]	; (800e174 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x1b0>)
 800e0ac:	4936      	ldr	r1, [pc, #216]	; (800e188 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x1c4>)
 800e0ae:	6878      	ldr	r0, [r7, #4]
 800e0b0:	47a0      	blx	r4
 800e0b2:	2301      	movs	r3, #1
 800e0b4:	e058      	b.n	800e168 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x1a4>
      stretch_dim = i;
 800e0b6:	69fb      	ldr	r3, [r7, #28]
 800e0b8:	623b      	str	r3, [r7, #32]
 800e0ba:	e004      	b.n	800e0c6 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x102>
    } else {
      num_output_elements *= value;
 800e0bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e0be:	68ba      	ldr	r2, [r7, #8]
 800e0c0:	fb02 f303 	mul.w	r3, r2, r3
 800e0c4:	627b      	str	r3, [r7, #36]	; 0x24
  for (int i = 0; i < output_shape->size; ++i) {
 800e0c6:	69fb      	ldr	r3, [r7, #28]
 800e0c8:	3301      	adds	r3, #1
 800e0ca:	61fb      	str	r3, [r7, #28]
 800e0cc:	e7ce      	b.n	800e06c <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0xa8>
    }
  }
  if (stretch_dim != -1) {
 800e0ce:	6a3b      	ldr	r3, [r7, #32]
 800e0d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e0d4:	d011      	beq.n	800e0fa <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x136>
    output_shape->data[stretch_dim] = num_input_elements / num_output_elements;
 800e0d6:	693a      	ldr	r2, [r7, #16]
 800e0d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e0da:	fb92 f2f3 	sdiv	r2, r2, r3
 800e0de:	68f9      	ldr	r1, [r7, #12]
 800e0e0:	6a3b      	ldr	r3, [r7, #32]
 800e0e2:	009b      	lsls	r3, r3, #2
 800e0e4:	440b      	add	r3, r1
 800e0e6:	605a      	str	r2, [r3, #4]
    num_output_elements *= output_shape->data[stretch_dim];
 800e0e8:	68fa      	ldr	r2, [r7, #12]
 800e0ea:	6a3b      	ldr	r3, [r7, #32]
 800e0ec:	009b      	lsls	r3, r3, #2
 800e0ee:	4413      	add	r3, r2
 800e0f0:	685a      	ldr	r2, [r3, #4]
 800e0f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e0f4:	fb02 f303 	mul.w	r3, r2, r3
 800e0f8:	627b      	str	r3, [r7, #36]	; 0x24
  }

  TF_LITE_ENSURE_TYPES_EQ(context, input->type, output->type);
 800e0fa:	69bb      	ldr	r3, [r7, #24]
 800e0fc:	781a      	ldrb	r2, [r3, #0]
 800e0fe:	697b      	ldr	r3, [r7, #20]
 800e100:	781b      	ldrb	r3, [r3, #0]
 800e102:	429a      	cmp	r2, r3
 800e104:	d01a      	beq.n	800e13c <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x178>
 800e106:	687b      	ldr	r3, [r7, #4]
 800e108:	695c      	ldr	r4, [r3, #20]
 800e10a:	69bb      	ldr	r3, [r7, #24]
 800e10c:	781b      	ldrb	r3, [r3, #0]
 800e10e:	4618      	mov	r0, r3
 800e110:	f7f5 fd06 	bl	8003b20 <TfLiteTypeGetName>
 800e114:	4605      	mov	r5, r0
 800e116:	697b      	ldr	r3, [r7, #20]
 800e118:	781b      	ldrb	r3, [r3, #0]
 800e11a:	4618      	mov	r0, r3
 800e11c:	f7f5 fd00 	bl	8003b20 <TfLiteTypeGetName>
 800e120:	4603      	mov	r3, r0
 800e122:	9303      	str	r3, [sp, #12]
 800e124:	9502      	str	r5, [sp, #8]
 800e126:	4b19      	ldr	r3, [pc, #100]	; (800e18c <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x1c8>)
 800e128:	9301      	str	r3, [sp, #4]
 800e12a:	4b19      	ldr	r3, [pc, #100]	; (800e190 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x1cc>)
 800e12c:	9300      	str	r3, [sp, #0]
 800e12e:	2345      	movs	r3, #69	; 0x45
 800e130:	4a10      	ldr	r2, [pc, #64]	; (800e174 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x1b0>)
 800e132:	4918      	ldr	r1, [pc, #96]	; (800e194 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x1d0>)
 800e134:	6878      	ldr	r0, [r7, #4]
 800e136:	47a0      	blx	r4
 800e138:	2301      	movs	r3, #1
 800e13a:	e015      	b.n	800e168 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x1a4>
  TF_LITE_ENSURE_EQ(context, num_input_elements, num_output_elements);
 800e13c:	693a      	ldr	r2, [r7, #16]
 800e13e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e140:	429a      	cmp	r2, r3
 800e142:	d010      	beq.n	800e166 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x1a2>
 800e144:	687b      	ldr	r3, [r7, #4]
 800e146:	695c      	ldr	r4, [r3, #20]
 800e148:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e14a:	9303      	str	r3, [sp, #12]
 800e14c:	693b      	ldr	r3, [r7, #16]
 800e14e:	9302      	str	r3, [sp, #8]
 800e150:	4b11      	ldr	r3, [pc, #68]	; (800e198 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x1d4>)
 800e152:	9301      	str	r3, [sp, #4]
 800e154:	4b11      	ldr	r3, [pc, #68]	; (800e19c <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x1d8>)
 800e156:	9300      	str	r3, [sp, #0]
 800e158:	2346      	movs	r3, #70	; 0x46
 800e15a:	4a06      	ldr	r2, [pc, #24]	; (800e174 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x1b0>)
 800e15c:	490a      	ldr	r1, [pc, #40]	; (800e188 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x1c4>)
 800e15e:	6878      	ldr	r0, [r7, #4]
 800e160:	47a0      	blx	r4
 800e162:	2301      	movs	r3, #1
 800e164:	e000      	b.n	800e168 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x1a4>
  return kTfLiteOk;
 800e166:	2300      	movs	r3, #0
}
 800e168:	4618      	mov	r0, r3
 800e16a:	3728      	adds	r7, #40	; 0x28
 800e16c:	46bd      	mov	sp, r7
 800e16e:	bdb0      	pop	{r4, r5, r7, pc}
 800e170:	08017be4 	.word	0x08017be4
 800e174:	08017b90 	.word	0x08017b90
 800e178:	08017bcc 	.word	0x08017bcc
 800e17c:	08017bf8 	.word	0x08017bf8
 800e180:	08017c28 	.word	0x08017c28
 800e184:	08017c2c 	.word	0x08017c2c
 800e188:	08017c0c 	.word	0x08017c0c
 800e18c:	08017c54 	.word	0x08017c54
 800e190:	08017c64 	.word	0x08017c64
 800e194:	08017c38 	.word	0x08017c38
 800e198:	08017c70 	.word	0x08017c70
 800e19c:	08017c84 	.word	0x08017c84

0800e1a0 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {
 800e1a0:	b590      	push	{r4, r7, lr}
 800e1a2:	b087      	sub	sp, #28
 800e1a4:	af04      	add	r7, sp, #16
 800e1a6:	6078      	str	r0, [r7, #4]
 800e1a8:	6039      	str	r1, [r7, #0]
  TF_LITE_ENSURE(context, NumInputs(node) == 1 || NumInputs(node) == 2);
 800e1aa:	6838      	ldr	r0, [r7, #0]
 800e1ac:	f7fd f9f4 	bl	800b598 <_ZN6tflite9NumInputsEPK10TfLiteNode>
 800e1b0:	4603      	mov	r3, r0
 800e1b2:	2b01      	cmp	r3, #1
 800e1b4:	d007      	beq.n	800e1c6 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0x26>
 800e1b6:	6838      	ldr	r0, [r7, #0]
 800e1b8:	f7fd f9ee 	bl	800b598 <_ZN6tflite9NumInputsEPK10TfLiteNode>
 800e1bc:	4603      	mov	r3, r0
 800e1be:	2b02      	cmp	r3, #2
 800e1c0:	d001      	beq.n	800e1c6 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0x26>
 800e1c2:	2301      	movs	r3, #1
 800e1c4:	e000      	b.n	800e1c8 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0x28>
 800e1c6:	2300      	movs	r3, #0
 800e1c8:	2b00      	cmp	r3, #0
 800e1ca:	d00a      	beq.n	800e1e2 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0x42>
 800e1cc:	687b      	ldr	r3, [r7, #4]
 800e1ce:	695c      	ldr	r4, [r3, #20]
 800e1d0:	4b27      	ldr	r3, [pc, #156]	; (800e270 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0xd0>)
 800e1d2:	9300      	str	r3, [sp, #0]
 800e1d4:	234b      	movs	r3, #75	; 0x4b
 800e1d6:	4a27      	ldr	r2, [pc, #156]	; (800e274 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0xd4>)
 800e1d8:	4927      	ldr	r1, [pc, #156]	; (800e278 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0xd8>)
 800e1da:	6878      	ldr	r0, [r7, #4]
 800e1dc:	47a0      	blx	r4
 800e1de:	2301      	movs	r3, #1
 800e1e0:	e041      	b.n	800e266 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0xc6>
  TF_LITE_ENSURE_EQ(context, NumOutputs(node), 1);
 800e1e2:	6838      	ldr	r0, [r7, #0]
 800e1e4:	f7fd f9e5 	bl	800b5b2 <_ZN6tflite10NumOutputsEPK10TfLiteNode>
 800e1e8:	4603      	mov	r3, r0
 800e1ea:	2b01      	cmp	r3, #1
 800e1ec:	bf14      	ite	ne
 800e1ee:	2301      	movne	r3, #1
 800e1f0:	2300      	moveq	r3, #0
 800e1f2:	b2db      	uxtb	r3, r3
 800e1f4:	2b00      	cmp	r3, #0
 800e1f6:	d013      	beq.n	800e220 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0x80>
 800e1f8:	687b      	ldr	r3, [r7, #4]
 800e1fa:	695c      	ldr	r4, [r3, #20]
 800e1fc:	6838      	ldr	r0, [r7, #0]
 800e1fe:	f7fd f9d8 	bl	800b5b2 <_ZN6tflite10NumOutputsEPK10TfLiteNode>
 800e202:	4603      	mov	r3, r0
 800e204:	2201      	movs	r2, #1
 800e206:	9203      	str	r2, [sp, #12]
 800e208:	9302      	str	r3, [sp, #8]
 800e20a:	4b1c      	ldr	r3, [pc, #112]	; (800e27c <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0xdc>)
 800e20c:	9301      	str	r3, [sp, #4]
 800e20e:	4b1c      	ldr	r3, [pc, #112]	; (800e280 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0xe0>)
 800e210:	9300      	str	r3, [sp, #0]
 800e212:	234c      	movs	r3, #76	; 0x4c
 800e214:	4a17      	ldr	r2, [pc, #92]	; (800e274 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0xd4>)
 800e216:	491b      	ldr	r1, [pc, #108]	; (800e284 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0xe4>)
 800e218:	6878      	ldr	r0, [r7, #4]
 800e21a:	47a0      	blx	r4
 800e21c:	2301      	movs	r3, #1
 800e21e:	e022      	b.n	800e266 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0xc6>
  TF_LITE_ENSURE_EQ(context, ReshapeOutput(context, node), kTfLiteOk);
 800e220:	6839      	ldr	r1, [r7, #0]
 800e222:	6878      	ldr	r0, [r7, #4]
 800e224:	f7ff fece 	bl	800dfc4 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode>
 800e228:	4603      	mov	r3, r0
 800e22a:	2b00      	cmp	r3, #0
 800e22c:	bf14      	ite	ne
 800e22e:	2301      	movne	r3, #1
 800e230:	2300      	moveq	r3, #0
 800e232:	b2db      	uxtb	r3, r3
 800e234:	2b00      	cmp	r3, #0
 800e236:	d015      	beq.n	800e264 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0xc4>
 800e238:	687b      	ldr	r3, [r7, #4]
 800e23a:	695c      	ldr	r4, [r3, #20]
 800e23c:	6839      	ldr	r1, [r7, #0]
 800e23e:	6878      	ldr	r0, [r7, #4]
 800e240:	f7ff fec0 	bl	800dfc4 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode>
 800e244:	4603      	mov	r3, r0
 800e246:	461a      	mov	r2, r3
 800e248:	2300      	movs	r3, #0
 800e24a:	9303      	str	r3, [sp, #12]
 800e24c:	9202      	str	r2, [sp, #8]
 800e24e:	4b0e      	ldr	r3, [pc, #56]	; (800e288 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0xe8>)
 800e250:	9301      	str	r3, [sp, #4]
 800e252:	4b0e      	ldr	r3, [pc, #56]	; (800e28c <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0xec>)
 800e254:	9300      	str	r3, [sp, #0]
 800e256:	234d      	movs	r3, #77	; 0x4d
 800e258:	4a06      	ldr	r2, [pc, #24]	; (800e274 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0xd4>)
 800e25a:	490a      	ldr	r1, [pc, #40]	; (800e284 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0xe4>)
 800e25c:	6878      	ldr	r0, [r7, #4]
 800e25e:	47a0      	blx	r4
 800e260:	2301      	movs	r3, #1
 800e262:	e000      	b.n	800e266 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0xc6>
  return kTfLiteOk;
 800e264:	2300      	movs	r3, #0
}
 800e266:	4618      	mov	r0, r3
 800e268:	370c      	adds	r7, #12
 800e26a:	46bd      	mov	sp, r7
 800e26c:	bd90      	pop	{r4, r7, pc}
 800e26e:	bf00      	nop
 800e270:	08017c98 	.word	0x08017c98
 800e274:	08017b90 	.word	0x08017b90
 800e278:	08017bcc 	.word	0x08017bcc
 800e27c:	08017cc8 	.word	0x08017cc8
 800e280:	08017ccc 	.word	0x08017ccc
 800e284:	08017c0c 	.word	0x08017c0c
 800e288:	08017ce0 	.word	0x08017ce0
 800e28c:	08017cec 	.word	0x08017cec

0800e290 <_ZN6tflite3ops5micro7reshape4EvalEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
 800e290:	b580      	push	{r7, lr}
 800e292:	b088      	sub	sp, #32
 800e294:	af00      	add	r7, sp, #0
 800e296:	6078      	str	r0, [r7, #4]
 800e298:	6039      	str	r1, [r7, #0]
  const TfLiteEvalTensor* input =
      tflite::micro::GetEvalInput(context, node, kInputTensor);
 800e29a:	2200      	movs	r2, #0
 800e29c:	6839      	ldr	r1, [r7, #0]
 800e29e:	6878      	ldr	r0, [r7, #4]
 800e2a0:	f7fc fe14 	bl	800aecc <_ZN6tflite5micro12GetEvalInputEPK13TfLiteContextPK10TfLiteNodei>
 800e2a4:	61b8      	str	r0, [r7, #24]
  TfLiteEvalTensor* output =
      tflite::micro::GetEvalOutput(context, node, kOutputTensor);
 800e2a6:	2200      	movs	r2, #0
 800e2a8:	6839      	ldr	r1, [r7, #0]
 800e2aa:	6878      	ldr	r0, [r7, #4]
 800e2ac:	f7fc fe1e 	bl	800aeec <_ZN6tflite5micro13GetEvalOutputEPK13TfLiteContextPK10TfLiteNodei>
 800e2b0:	6178      	str	r0, [r7, #20]

  // TODO(b/162522304): storing input bytes in OpData increases some models
  // significantly, possibly due to alignment issues.
  size_t input_bytes;
  TF_LITE_ENSURE_STATUS(TfLiteTypeSizeOf(input->type, &input_bytes));
 800e2b2:	69bb      	ldr	r3, [r7, #24]
 800e2b4:	7a1b      	ldrb	r3, [r3, #8]
 800e2b6:	f107 020c 	add.w	r2, r7, #12
 800e2ba:	4611      	mov	r1, r2
 800e2bc:	4618      	mov	r0, r3
 800e2be:	f7f8 fd2b 	bl	8006d18 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj>
 800e2c2:	4603      	mov	r3, r0
 800e2c4:	74fb      	strb	r3, [r7, #19]
 800e2c6:	7cfb      	ldrb	r3, [r7, #19]
 800e2c8:	2b00      	cmp	r3, #0
 800e2ca:	d001      	beq.n	800e2d0 <_ZN6tflite3ops5micro7reshape4EvalEP13TfLiteContextP10TfLiteNode+0x40>
 800e2cc:	7cfb      	ldrb	r3, [r7, #19]
 800e2ce:	e024      	b.n	800e31a <_ZN6tflite3ops5micro7reshape4EvalEP13TfLiteContextP10TfLiteNode+0x8a>
  input_bytes *= ElementCount(*input->dims);
 800e2d0:	69bb      	ldr	r3, [r7, #24]
 800e2d2:	685b      	ldr	r3, [r3, #4]
 800e2d4:	4618      	mov	r0, r3
 800e2d6:	f7fc fbed 	bl	800aab4 <_ZN6tflite12ElementCountERK14TfLiteIntArray>
 800e2da:	4602      	mov	r2, r0
 800e2dc:	68fb      	ldr	r3, [r7, #12]
 800e2de:	fb02 f303 	mul.w	r3, r2, r3
 800e2e2:	60fb      	str	r3, [r7, #12]

  // Do nothing for in-place reshape.
  if (input->data.raw != output->data.raw) {
 800e2e4:	69bb      	ldr	r3, [r7, #24]
 800e2e6:	681a      	ldr	r2, [r3, #0]
 800e2e8:	697b      	ldr	r3, [r7, #20]
 800e2ea:	681b      	ldr	r3, [r3, #0]
 800e2ec:	429a      	cmp	r2, r3
 800e2ee:	d013      	beq.n	800e318 <_ZN6tflite3ops5micro7reshape4EvalEP13TfLiteContextP10TfLiteNode+0x88>
    // Otherwise perform reshape with copy.
    for (size_t i = 0; i < input_bytes; ++i) {
 800e2f0:	2300      	movs	r3, #0
 800e2f2:	61fb      	str	r3, [r7, #28]
 800e2f4:	68fb      	ldr	r3, [r7, #12]
 800e2f6:	69fa      	ldr	r2, [r7, #28]
 800e2f8:	429a      	cmp	r2, r3
 800e2fa:	d20d      	bcs.n	800e318 <_ZN6tflite3ops5micro7reshape4EvalEP13TfLiteContextP10TfLiteNode+0x88>
      output->data.raw[i] = input->data.raw[i];
 800e2fc:	69bb      	ldr	r3, [r7, #24]
 800e2fe:	681a      	ldr	r2, [r3, #0]
 800e300:	69fb      	ldr	r3, [r7, #28]
 800e302:	441a      	add	r2, r3
 800e304:	697b      	ldr	r3, [r7, #20]
 800e306:	6819      	ldr	r1, [r3, #0]
 800e308:	69fb      	ldr	r3, [r7, #28]
 800e30a:	440b      	add	r3, r1
 800e30c:	7812      	ldrb	r2, [r2, #0]
 800e30e:	701a      	strb	r2, [r3, #0]
    for (size_t i = 0; i < input_bytes; ++i) {
 800e310:	69fb      	ldr	r3, [r7, #28]
 800e312:	3301      	adds	r3, #1
 800e314:	61fb      	str	r3, [r7, #28]
 800e316:	e7ed      	b.n	800e2f4 <_ZN6tflite3ops5micro7reshape4EvalEP13TfLiteContextP10TfLiteNode+0x64>
    }
  }
  return kTfLiteOk;
 800e318:	2300      	movs	r3, #0
}
 800e31a:	4618      	mov	r0, r3
 800e31c:	3720      	adds	r7, #32
 800e31e:	46bd      	mov	sp, r7
 800e320:	bd80      	pop	{r7, pc}
	...

0800e324 <_ZN6tflite3ops5micro16Register_RESHAPEEv>:

}  // namespace reshape

TfLiteRegistration Register_RESHAPE() {
 800e324:	b4b0      	push	{r4, r5, r7}
 800e326:	b083      	sub	sp, #12
 800e328:	af00      	add	r7, sp, #0
 800e32a:	6078      	str	r0, [r7, #4]
          /*prepare=*/reshape::Prepare,
          /*invoke=*/reshape::Eval,
          /*profiling_string=*/nullptr,
          /*builtin_code=*/0,
          /*custom_name=*/nullptr,
          /*version=*/0};
 800e32c:	687b      	ldr	r3, [r7, #4]
 800e32e:	4a07      	ldr	r2, [pc, #28]	; (800e34c <_ZN6tflite3ops5micro16Register_RESHAPEEv+0x28>)
 800e330:	461c      	mov	r4, r3
 800e332:	4615      	mov	r5, r2
 800e334:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800e336:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800e338:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800e33c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 800e340:	6878      	ldr	r0, [r7, #4]
 800e342:	370c      	adds	r7, #12
 800e344:	46bd      	mov	sp, r7
 800e346:	bcb0      	pop	{r4, r5, r7}
 800e348:	4770      	bx	lr
 800e34a:	bf00      	nop
 800e34c:	08017d0c 	.word	0x08017d0c

0800e350 <_ZN6tflite43MultiplyByQuantizedMultiplierGreaterThanOneElli>:
    int32_t x, int32_t quantized_multiplier, int left_shift) {
 800e350:	b580      	push	{r7, lr}
 800e352:	b084      	sub	sp, #16
 800e354:	af00      	add	r7, sp, #0
 800e356:	60f8      	str	r0, [r7, #12]
 800e358:	60b9      	str	r1, [r7, #8]
 800e35a:	607a      	str	r2, [r7, #4]
  return SaturatingRoundingDoublingHighMul(x * (1 << left_shift),
 800e35c:	68fa      	ldr	r2, [r7, #12]
 800e35e:	687b      	ldr	r3, [r7, #4]
 800e360:	fa02 f303 	lsl.w	r3, r2, r3
 800e364:	68b9      	ldr	r1, [r7, #8]
 800e366:	4618      	mov	r0, r3
 800e368:	f7fc fe20 	bl	800afac <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_>
 800e36c:	4603      	mov	r3, r0
}
 800e36e:	4618      	mov	r0, r3
 800e370:	3710      	adds	r7, #16
 800e372:	46bd      	mov	sp, r7
 800e374:	bd80      	pop	{r7, pc}
	...

0800e378 <_ZN6tflite26generic_int16_table_lookupEsPKs>:
  table[num - 1] = std::min<float>(
      std::max<float>(TfLiteRound(func(max) * 32768.0f), -32768.0f), 32767.0f);
}

// int16_t func table lookup, e.g., lookup exp() and 1/(1+x) used in softmax
inline int16_t generic_int16_table_lookup(int16_t value, const int16_t* lut) {
 800e378:	b580      	push	{r7, lr}
 800e37a:	b086      	sub	sp, #24
 800e37c:	af00      	add	r7, sp, #0
 800e37e:	4603      	mov	r3, r0
 800e380:	6039      	str	r1, [r7, #0]
 800e382:	80fb      	strh	r3, [r7, #6]
  // 512 base value, lut[513] only for calculate slope
  uint16_t index = static_cast<uint16_t>(256 + (value >> 7));
 800e384:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800e388:	11db      	asrs	r3, r3, #7
 800e38a:	b29b      	uxth	r3, r3
 800e38c:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800e390:	82fb      	strh	r3, [r7, #22]
  assert(index < 512 && "LUT index out of range.");
 800e392:	8afb      	ldrh	r3, [r7, #22]
 800e394:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e398:	d306      	bcc.n	800e3a8 <_ZN6tflite26generic_int16_table_lookupEsPKs+0x30>
 800e39a:	4b1b      	ldr	r3, [pc, #108]	; (800e408 <_ZN6tflite26generic_int16_table_lookupEsPKs+0x90>)
 800e39c:	4a1b      	ldr	r2, [pc, #108]	; (800e40c <_ZN6tflite26generic_int16_table_lookupEsPKs+0x94>)
 800e39e:	f44f 71ac 	mov.w	r1, #344	; 0x158
 800e3a2:	481b      	ldr	r0, [pc, #108]	; (800e410 <_ZN6tflite26generic_int16_table_lookupEsPKs+0x98>)
 800e3a4:	f002 fa02 	bl	80107ac <__assert_func>
  int16_t offset = value & 0x7f;
 800e3a8:	88fb      	ldrh	r3, [r7, #6]
 800e3aa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e3ae:	82bb      	strh	r3, [r7, #20]

  // base and slope are Q0.15
  int16_t base = lut[index];
 800e3b0:	8afb      	ldrh	r3, [r7, #22]
 800e3b2:	005b      	lsls	r3, r3, #1
 800e3b4:	683a      	ldr	r2, [r7, #0]
 800e3b6:	4413      	add	r3, r2
 800e3b8:	881b      	ldrh	r3, [r3, #0]
 800e3ba:	827b      	strh	r3, [r7, #18]
  int16_t slope = lut[index + 1] - lut[index];
 800e3bc:	8afb      	ldrh	r3, [r7, #22]
 800e3be:	3301      	adds	r3, #1
 800e3c0:	005b      	lsls	r3, r3, #1
 800e3c2:	683a      	ldr	r2, [r7, #0]
 800e3c4:	4413      	add	r3, r2
 800e3c6:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e3ca:	b29a      	uxth	r2, r3
 800e3cc:	8afb      	ldrh	r3, [r7, #22]
 800e3ce:	005b      	lsls	r3, r3, #1
 800e3d0:	6839      	ldr	r1, [r7, #0]
 800e3d2:	440b      	add	r3, r1
 800e3d4:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e3d8:	b29b      	uxth	r3, r3
 800e3da:	1ad3      	subs	r3, r2, r3
 800e3dc:	b29b      	uxth	r3, r3
 800e3de:	823b      	strh	r3, [r7, #16]

  // Q0.15 * Q0.7 = Q0.22
  // Round and convert from Q0.22 to Q0.15
  int32_t delta = (static_cast<int32_t>(slope) * offset + 64) >> 7;
 800e3e0:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800e3e4:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 800e3e8:	fb02 f303 	mul.w	r3, r2, r3
 800e3ec:	3340      	adds	r3, #64	; 0x40
 800e3ee:	11db      	asrs	r3, r3, #7
 800e3f0:	60fb      	str	r3, [r7, #12]

  // Q0.15 + Q0.15
  return base + delta;
 800e3f2:	68fb      	ldr	r3, [r7, #12]
 800e3f4:	b29a      	uxth	r2, r3
 800e3f6:	8a7b      	ldrh	r3, [r7, #18]
 800e3f8:	4413      	add	r3, r2
 800e3fa:	b29b      	uxth	r3, r3
 800e3fc:	b21b      	sxth	r3, r3
}
 800e3fe:	4618      	mov	r0, r3
 800e400:	3718      	adds	r7, #24
 800e402:	46bd      	mov	sp, r7
 800e404:	bd80      	pop	{r7, pc}
 800e406:	bf00      	nop
 800e408:	08017d2c 	.word	0x08017d2c
 800e40c:	08017d58 	.word	0x08017d58
 800e410:	08017d9c 	.word	0x08017d9c

0800e414 <_ZN6tflite13GetReciprocalEliPi>:
                                                     InputIntegerBits>(
      input_val);
}

inline int32_t GetReciprocal(int32_t x, int x_integer_digits,
                             int* num_bits_over_unit) {
 800e414:	b580      	push	{r7, lr}
 800e416:	b088      	sub	sp, #32
 800e418:	af00      	add	r7, sp, #0
 800e41a:	60f8      	str	r0, [r7, #12]
 800e41c:	60b9      	str	r1, [r7, #8]
 800e41e:	607a      	str	r2, [r7, #4]
  int headroom_plus_one = CountLeadingZeros(static_cast<uint32_t>(x));
 800e420:	68fb      	ldr	r3, [r7, #12]
 800e422:	4618      	mov	r0, r3
 800e424:	f7fe fe2e 	bl	800d084 <_ZN6tflite17CountLeadingZerosImEEiT_>
 800e428:	61f8      	str	r0, [r7, #28]
  // This is the number of bits to the left of the binary point above 1.0.
  // Consider x=1.25.  In that case shifted_scale=0.8 and
  // no later adjustment will be needed.
  *num_bits_over_unit = x_integer_digits - headroom_plus_one;
 800e42a:	68ba      	ldr	r2, [r7, #8]
 800e42c:	69fb      	ldr	r3, [r7, #28]
 800e42e:	1ad2      	subs	r2, r2, r3
 800e430:	687b      	ldr	r3, [r7, #4]
 800e432:	601a      	str	r2, [r3, #0]
  const int32_t shifted_sum_minus_one =
      static_cast<int32_t>((static_cast<uint32_t>(x) << headroom_plus_one) -
 800e434:	68fa      	ldr	r2, [r7, #12]
 800e436:	69fb      	ldr	r3, [r7, #28]
 800e438:	fa02 f303 	lsl.w	r3, r2, r3
 800e43c:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
  const int32_t shifted_sum_minus_one =
 800e440:	61bb      	str	r3, [r7, #24]
                           (static_cast<uint32_t>(1) << 31));

  gemmlowp::FixedPoint<int32_t, 0> shifted_scale =
      gemmlowp::one_over_one_plus_x_for_x_in_0_1(
          gemmlowp::FixedPoint<int32_t, 0>::FromRaw(shifted_sum_minus_one));
 800e442:	69b8      	ldr	r0, [r7, #24]
 800e444:	f7fe ff41 	bl	800d2ca <_ZN8gemmlowp10FixedPointIlLi0EE7FromRawEl>
 800e448:	4603      	mov	r3, r0
 800e44a:	4618      	mov	r0, r3
 800e44c:	f7fe ff4e 	bl	800d2ec <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IlEENS_10FixedPointIT_Li0EEES3_>
 800e450:	4603      	mov	r3, r0
 800e452:	617b      	str	r3, [r7, #20]
  return shifted_scale.raw();
 800e454:	f107 0314 	add.w	r3, r7, #20
 800e458:	4618      	mov	r0, r3
 800e45a:	f7fe fe25 	bl	800d0a8 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 800e45e:	4603      	mov	r3, r0
 800e460:	681b      	ldr	r3, [r3, #0]
}
 800e462:	4618      	mov	r0, r3
 800e464:	3720      	adds	r7, #32
 800e466:	46bd      	mov	sp, r7
 800e468:	bd80      	pop	{r7, pc}

0800e46a <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKfS6_Pf>:
namespace tflite {
namespace reference_ops {

inline void Softmax(const SoftmaxParams& params,
                    const RuntimeShape& input_shape, const float* input_data,
                    const RuntimeShape& output_shape, float* output_data) {
 800e46a:	b580      	push	{r7, lr}
 800e46c:	ed2d 8b02 	vpush	{d8}
 800e470:	b08e      	sub	sp, #56	; 0x38
 800e472:	af00      	add	r7, sp, #0
 800e474:	60f8      	str	r0, [r7, #12]
 800e476:	60b9      	str	r1, [r7, #8]
 800e478:	607a      	str	r2, [r7, #4]
 800e47a:	603b      	str	r3, [r7, #0]
  const int trailing_dim = input_shape.DimensionsCount() - 1;
 800e47c:	68b8      	ldr	r0, [r7, #8]
 800e47e:	f7f8 fba0 	bl	8006bc2 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 800e482:	4603      	mov	r3, r0
 800e484:	3b01      	subs	r3, #1
 800e486:	623b      	str	r3, [r7, #32]
  const int outer_size =
      MatchingFlatSizeSkipDim(input_shape, trailing_dim, output_shape);
 800e488:	683a      	ldr	r2, [r7, #0]
 800e48a:	6a39      	ldr	r1, [r7, #32]
 800e48c:	68b8      	ldr	r0, [r7, #8]
 800e48e:	f7fe fdca 	bl	800d026 <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_>
 800e492:	61f8      	str	r0, [r7, #28]
  const int depth =
      MatchingDim(input_shape, trailing_dim, output_shape, trailing_dim);
 800e494:	6a3b      	ldr	r3, [r7, #32]
 800e496:	683a      	ldr	r2, [r7, #0]
 800e498:	6a39      	ldr	r1, [r7, #32]
 800e49a:	68b8      	ldr	r0, [r7, #8]
 800e49c:	f7fd f8a5 	bl	800b5ea <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 800e4a0:	61b8      	str	r0, [r7, #24]

  for (int i = 0; i < outer_size; ++i) {
 800e4a2:	2300      	movs	r3, #0
 800e4a4:	637b      	str	r3, [r7, #52]	; 0x34
 800e4a6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e4a8:	69fb      	ldr	r3, [r7, #28]
 800e4aa:	429a      	cmp	r2, r3
 800e4ac:	f280 8087 	bge.w	800e5be <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x154>
    // Find max element value which we'll use to ensure numerical stability
    // taking advantage of the following equality:
    // exp(x[i])/sum(exp(x[i])) == exp(x[i]+C)/sum(exp(x[i]+C))
    float max = std::numeric_limits<float>::lowest();
 800e4b0:	f46f 0300 	mvn.w	r3, #8388608	; 0x800000
 800e4b4:	613b      	str	r3, [r7, #16]
    for (int c = 0; c < depth; ++c) {
 800e4b6:	2300      	movs	r3, #0
 800e4b8:	633b      	str	r3, [r7, #48]	; 0x30
 800e4ba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e4bc:	69bb      	ldr	r3, [r7, #24]
 800e4be:	429a      	cmp	r2, r3
 800e4c0:	da15      	bge.n	800e4ee <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x84>
      max = std::max(max, input_data[i * depth + c]);
 800e4c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e4c4:	69ba      	ldr	r2, [r7, #24]
 800e4c6:	fb02 f203 	mul.w	r2, r2, r3
 800e4ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e4cc:	4413      	add	r3, r2
 800e4ce:	009b      	lsls	r3, r3, #2
 800e4d0:	687a      	ldr	r2, [r7, #4]
 800e4d2:	441a      	add	r2, r3
 800e4d4:	f107 0310 	add.w	r3, r7, #16
 800e4d8:	4611      	mov	r1, r2
 800e4da:	4618      	mov	r0, r3
 800e4dc:	f7f7 fcb0 	bl	8005e40 <_ZSt3maxIfERKT_S2_S2_>
 800e4e0:	4603      	mov	r3, r0
 800e4e2:	681b      	ldr	r3, [r3, #0]
 800e4e4:	613b      	str	r3, [r7, #16]
    for (int c = 0; c < depth; ++c) {
 800e4e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e4e8:	3301      	adds	r3, #1
 800e4ea:	633b      	str	r3, [r7, #48]	; 0x30
 800e4ec:	e7e5      	b.n	800e4ba <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x50>
    }

    // Compute sum.
    float sum = 0.f;
 800e4ee:	f04f 0300 	mov.w	r3, #0
 800e4f2:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (int c = 0; c < depth; ++c) {
 800e4f4:	2300      	movs	r3, #0
 800e4f6:	62bb      	str	r3, [r7, #40]	; 0x28
 800e4f8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e4fa:	69bb      	ldr	r3, [r7, #24]
 800e4fc:	429a      	cmp	r2, r3
 800e4fe:	da36      	bge.n	800e56e <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x104>
      const float exp_c = std::exp((input_data[i * depth + c] - max) *
 800e500:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e502:	69ba      	ldr	r2, [r7, #24]
 800e504:	fb02 f203 	mul.w	r2, r2, r3
 800e508:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e50a:	4413      	add	r3, r2
 800e50c:	009b      	lsls	r3, r3, #2
 800e50e:	687a      	ldr	r2, [r7, #4]
 800e510:	4413      	add	r3, r2
 800e512:	ed93 7a00 	vldr	s14, [r3]
 800e516:	edd7 7a04 	vldr	s15, [r7, #16]
 800e51a:	ee37 8a67 	vsub.f32	s16, s14, s15
                                   static_cast<float>(params.beta));
 800e51e:	68fb      	ldr	r3, [r7, #12]
 800e520:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e524:	4610      	mov	r0, r2
 800e526:	4619      	mov	r1, r3
 800e528:	f7f2 fb50 	bl	8000bcc <__aeabi_d2f>
 800e52c:	ee07 0a90 	vmov	s15, r0
      const float exp_c = std::exp((input_data[i * depth + c] - max) *
 800e530:	ee68 7a27 	vmul.f32	s15, s16, s15
 800e534:	eeb0 0a67 	vmov.f32	s0, s15
 800e538:	f7fe f8da 	bl	800c6f0 <_ZSt3expf>
 800e53c:	ed87 0a05 	vstr	s0, [r7, #20]
      output_data[i * depth + c] = exp_c;
 800e540:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e542:	69ba      	ldr	r2, [r7, #24]
 800e544:	fb02 f203 	mul.w	r2, r2, r3
 800e548:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e54a:	4413      	add	r3, r2
 800e54c:	009b      	lsls	r3, r3, #2
 800e54e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e550:	4413      	add	r3, r2
 800e552:	697a      	ldr	r2, [r7, #20]
 800e554:	601a      	str	r2, [r3, #0]
      sum += exp_c;
 800e556:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 800e55a:	edd7 7a05 	vldr	s15, [r7, #20]
 800e55e:	ee77 7a27 	vadd.f32	s15, s14, s15
 800e562:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
    for (int c = 0; c < depth; ++c) {
 800e566:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e568:	3301      	adds	r3, #1
 800e56a:	62bb      	str	r3, [r7, #40]	; 0x28
 800e56c:	e7c4      	b.n	800e4f8 <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x8e>
    }

    // Compute result.
    for (int c = 0; c < depth; ++c) {
 800e56e:	2300      	movs	r3, #0
 800e570:	627b      	str	r3, [r7, #36]	; 0x24
 800e572:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e574:	69bb      	ldr	r3, [r7, #24]
 800e576:	429a      	cmp	r2, r3
 800e578:	da1d      	bge.n	800e5b6 <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x14c>
      output_data[i * depth + c] = output_data[i * depth + c] / sum;
 800e57a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e57c:	69ba      	ldr	r2, [r7, #24]
 800e57e:	fb02 f203 	mul.w	r2, r2, r3
 800e582:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e584:	4413      	add	r3, r2
 800e586:	009b      	lsls	r3, r3, #2
 800e588:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e58a:	4413      	add	r3, r2
 800e58c:	edd3 6a00 	vldr	s13, [r3]
 800e590:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e592:	69ba      	ldr	r2, [r7, #24]
 800e594:	fb02 f203 	mul.w	r2, r2, r3
 800e598:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e59a:	4413      	add	r3, r2
 800e59c:	009b      	lsls	r3, r3, #2
 800e59e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e5a0:	4413      	add	r3, r2
 800e5a2:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 800e5a6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800e5aa:	edc3 7a00 	vstr	s15, [r3]
    for (int c = 0; c < depth; ++c) {
 800e5ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e5b0:	3301      	adds	r3, #1
 800e5b2:	627b      	str	r3, [r7, #36]	; 0x24
 800e5b4:	e7dd      	b.n	800e572 <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x108>
  for (int i = 0; i < outer_size; ++i) {
 800e5b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e5b8:	3301      	adds	r3, #1
 800e5ba:	637b      	str	r3, [r7, #52]	; 0x34
 800e5bc:	e773      	b.n	800e4a6 <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x3c>
    }
  }
}
 800e5be:	bf00      	nop
 800e5c0:	3738      	adds	r7, #56	; 0x38
 800e5c2:	46bd      	mov	sp, r7
 800e5c4:	ecbd 8b02 	vpop	{d8}
 800e5c8:	bd80      	pop	{r7, pc}
	...

0800e5cc <_ZN6tflite13reference_ops19SoftMaxCalculateExpERKNS_13SoftmaxParamsEPKsisii>:
}

// Computes exp(input - max_input)
inline int16_t SoftMaxCalculateExp(const SoftmaxParams& params,
                                   const int16_t* input_data, const int depth,
                                   int16_t max_in_row, int i, int c) {
 800e5cc:	b580      	push	{r7, lr}
 800e5ce:	b08a      	sub	sp, #40	; 0x28
 800e5d0:	af00      	add	r7, sp, #0
 800e5d2:	60f8      	str	r0, [r7, #12]
 800e5d4:	60b9      	str	r1, [r7, #8]
 800e5d6:	607a      	str	r2, [r7, #4]
 800e5d8:	807b      	strh	r3, [r7, #2]
  int32_t input_diff = input_data[i * depth + c] - max_in_row;
 800e5da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e5dc:	687a      	ldr	r2, [r7, #4]
 800e5de:	fb02 f203 	mul.w	r2, r2, r3
 800e5e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e5e4:	4413      	add	r3, r2
 800e5e6:	005b      	lsls	r3, r3, #1
 800e5e8:	68ba      	ldr	r2, [r7, #8]
 800e5ea:	4413      	add	r3, r2
 800e5ec:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e5f0:	461a      	mov	r2, r3
 800e5f2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800e5f6:	1ad3      	subs	r3, r2, r3
 800e5f8:	627b      	str	r3, [r7, #36]	; 0x24
  // scale the input_diff such that [-65535, 0] correspond to [-10.0, 0.0]
  // exp lut generated with range [-10, 0], as exp(-10) is negligible.
  int32_t scaled_diff = MultiplyByQuantizedMultiplier(
      input_diff, params.input_multiplier, params.input_left_shift);
 800e5fa:	68fb      	ldr	r3, [r7, #12]
 800e5fc:	6899      	ldr	r1, [r3, #8]
 800e5fe:	68fb      	ldr	r3, [r7, #12]
 800e600:	68db      	ldr	r3, [r3, #12]
  int32_t scaled_diff = MultiplyByQuantizedMultiplier(
 800e602:	461a      	mov	r2, r3
 800e604:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e606:	f7fc fd9c 	bl	800b142 <_ZN6tflite29MultiplyByQuantizedMultiplierElli>
 800e60a:	6238      	str	r0, [r7, #32]
  // recenter to [-32768, 32767]
  int32_t sym_scaled_diff = scaled_diff + 32767;
 800e60c:	6a3b      	ldr	r3, [r7, #32]
 800e60e:	f503 43ff 	add.w	r3, r3, #32640	; 0x7f80
 800e612:	337f      	adds	r3, #127	; 0x7f
 800e614:	613b      	str	r3, [r7, #16]
  int16_t sat_sym_scaled_diff =
      std::min(std::max(sym_scaled_diff, static_cast<int32_t>(-32768)),
 800e616:	4b12      	ldr	r3, [pc, #72]	; (800e660 <_ZN6tflite13reference_ops19SoftMaxCalculateExpERKNS_13SoftmaxParamsEPKsisii+0x94>)
 800e618:	617b      	str	r3, [r7, #20]
               static_cast<int32_t>(32767));
 800e61a:	f107 0214 	add.w	r2, r7, #20
 800e61e:	f107 0310 	add.w	r3, r7, #16
 800e622:	4611      	mov	r1, r2
 800e624:	4618      	mov	r0, r3
 800e626:	f7f8 f931 	bl	800688c <_ZSt3maxIlERKT_S2_S2_>
 800e62a:	4602      	mov	r2, r0
 800e62c:	f647 73ff 	movw	r3, #32767	; 0x7fff
 800e630:	61bb      	str	r3, [r7, #24]
 800e632:	f107 0318 	add.w	r3, r7, #24
 800e636:	4619      	mov	r1, r3
 800e638:	4610      	mov	r0, r2
 800e63a:	f7f8 f913 	bl	8006864 <_ZSt3minIlERKT_S2_S2_>
 800e63e:	4603      	mov	r3, r0
      std::min(std::max(sym_scaled_diff, static_cast<int32_t>(-32768)),
 800e640:	681b      	ldr	r3, [r3, #0]
               static_cast<int32_t>(32767));
 800e642:	83fb      	strh	r3, [r7, #30]
  // apply the exp() LUT activation function
  return generic_int16_table_lookup(sat_sym_scaled_diff, params.exp_lut);
 800e644:	68fb      	ldr	r3, [r7, #12]
 800e646:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800e648:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800e64c:	4611      	mov	r1, r2
 800e64e:	4618      	mov	r0, r3
 800e650:	f7ff fe92 	bl	800e378 <_ZN6tflite26generic_int16_table_lookupEsPKs>
 800e654:	4603      	mov	r3, r0
}
 800e656:	4618      	mov	r0, r3
 800e658:	3728      	adds	r7, #40	; 0x28
 800e65a:	46bd      	mov	sp, r7
 800e65c:	bd80      	pop	{r7, pc}
 800e65e:	bf00      	nop
 800e660:	ffff8000 	.word	0xffff8000

0800e664 <_ZN6tflite13reference_ops12SoftmaxInt16ERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKsS6_Ps>:
// Quantized softmax with int16_t input and int16_t output.
inline void SoftmaxInt16(const SoftmaxParams& params,
                         const RuntimeShape& input_shape,
                         const int16_t* input_data,
                         const RuntimeShape& output_shape,
                         int16_t* output_data) {
 800e664:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e668:	b0a1      	sub	sp, #132	; 0x84
 800e66a:	af02      	add	r7, sp, #8
 800e66c:	6178      	str	r0, [r7, #20]
 800e66e:	6139      	str	r1, [r7, #16]
 800e670:	60fa      	str	r2, [r7, #12]
 800e672:	60bb      	str	r3, [r7, #8]
  const int trailing_dim = input_shape.DimensionsCount() - 1;
 800e674:	6938      	ldr	r0, [r7, #16]
 800e676:	f7f8 faa4 	bl	8006bc2 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 800e67a:	4603      	mov	r3, r0
 800e67c:	3b01      	subs	r3, #1
 800e67e:	663b      	str	r3, [r7, #96]	; 0x60
  const int outer_size =
      MatchingFlatSizeSkipDim(input_shape, trailing_dim, output_shape);
 800e680:	68ba      	ldr	r2, [r7, #8]
 800e682:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800e684:	6938      	ldr	r0, [r7, #16]
 800e686:	f7fe fcce 	bl	800d026 <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_>
 800e68a:	65f8      	str	r0, [r7, #92]	; 0x5c
  const int depth =
      MatchingDim(input_shape, trailing_dim, output_shape, trailing_dim);
 800e68c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e68e:	68ba      	ldr	r2, [r7, #8]
 800e690:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800e692:	6938      	ldr	r0, [r7, #16]
 800e694:	f7fc ffa9 	bl	800b5ea <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 800e698:	65b8      	str	r0, [r7, #88]	; 0x58

  for (int i = 0; i < outer_size; ++i) {
 800e69a:	2300      	movs	r3, #0
 800e69c:	677b      	str	r3, [r7, #116]	; 0x74
 800e69e:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800e6a0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e6a2:	429a      	cmp	r2, r3
 800e6a4:	f280 8119 	bge.w	800e8da <_ZN6tflite13reference_ops12SoftmaxInt16ERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKsS6_Ps+0x276>
    // Find the largest element
    int16_t max_in_row = std::numeric_limits<int16_t>::min();
 800e6a8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e6ac:	84fb      	strh	r3, [r7, #38]	; 0x26
    for (int c = 0; c < depth; ++c) {
 800e6ae:	2300      	movs	r3, #0
 800e6b0:	673b      	str	r3, [r7, #112]	; 0x70
 800e6b2:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800e6b4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e6b6:	429a      	cmp	r2, r3
 800e6b8:	da16      	bge.n	800e6e8 <_ZN6tflite13reference_ops12SoftmaxInt16ERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKsS6_Ps+0x84>
      max_in_row = std::max(max_in_row, input_data[i * depth + c]);
 800e6ba:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800e6bc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800e6be:	fb02 f203 	mul.w	r2, r2, r3
 800e6c2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800e6c4:	4413      	add	r3, r2
 800e6c6:	005b      	lsls	r3, r3, #1
 800e6c8:	68fa      	ldr	r2, [r7, #12]
 800e6ca:	441a      	add	r2, r3
 800e6cc:	f107 0326 	add.w	r3, r7, #38	; 0x26
 800e6d0:	4611      	mov	r1, r2
 800e6d2:	4618      	mov	r0, r3
 800e6d4:	f7fc fec8 	bl	800b468 <_ZSt3maxIsERKT_S2_S2_>
 800e6d8:	4603      	mov	r3, r0
 800e6da:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e6de:	84fb      	strh	r3, [r7, #38]	; 0x26
    for (int c = 0; c < depth; ++c) {
 800e6e0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800e6e2:	3301      	adds	r3, #1
 800e6e4:	673b      	str	r3, [r7, #112]	; 0x70
 800e6e6:	e7e4      	b.n	800e6b2 <_ZN6tflite13reference_ops12SoftmaxInt16ERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKsS6_Ps+0x4e>

    // This loops computes the exp values and their sum. We will need the exp
    // values later on in the function so we cache them in the output_data
    // buffer. This is an optimization done to avoid calculating the exp values
    // twice making use of the output_data buffer as scratch memory.
    int32_t sum_of_exps = 0;  // Q16.15 fixed point format.
 800e6e8:	2300      	movs	r3, #0
 800e6ea:	66fb      	str	r3, [r7, #108]	; 0x6c
    int16_t* exp_results_Q015 = output_data + i * depth;
 800e6ec:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800e6ee:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800e6f0:	fb02 f303 	mul.w	r3, r2, r3
 800e6f4:	005b      	lsls	r3, r3, #1
 800e6f6:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 800e6fa:	4413      	add	r3, r2
 800e6fc:	657b      	str	r3, [r7, #84]	; 0x54
    for (int c = 0; c < depth; ++c) {
 800e6fe:	2300      	movs	r3, #0
 800e700:	66bb      	str	r3, [r7, #104]	; 0x68
 800e702:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800e704:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e706:	429a      	cmp	r2, r3
 800e708:	da1f      	bge.n	800e74a <_ZN6tflite13reference_ops12SoftmaxInt16ERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKsS6_Ps+0xe6>
      exp_results_Q015[c] =
          SoftMaxCalculateExp(params, input_data, depth, max_in_row, i, c);
 800e70a:	f9b7 1026 	ldrsh.w	r1, [r7, #38]	; 0x26
      exp_results_Q015[c] =
 800e70e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800e710:	005b      	lsls	r3, r3, #1
 800e712:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800e714:	18d6      	adds	r6, r2, r3
          SoftMaxCalculateExp(params, input_data, depth, max_in_row, i, c);
 800e716:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800e718:	9301      	str	r3, [sp, #4]
 800e71a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800e71c:	9300      	str	r3, [sp, #0]
 800e71e:	460b      	mov	r3, r1
 800e720:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800e722:	68f9      	ldr	r1, [r7, #12]
 800e724:	6978      	ldr	r0, [r7, #20]
 800e726:	f7ff ff51 	bl	800e5cc <_ZN6tflite13reference_ops19SoftMaxCalculateExpERKNS_13SoftmaxParamsEPKsisii>
 800e72a:	4603      	mov	r3, r0
      exp_results_Q015[c] =
 800e72c:	8033      	strh	r3, [r6, #0]
      sum_of_exps += exp_results_Q015[c];
 800e72e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800e730:	005b      	lsls	r3, r3, #1
 800e732:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800e734:	4413      	add	r3, r2
 800e736:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e73a:	461a      	mov	r2, r3
 800e73c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e73e:	4413      	add	r3, r2
 800e740:	66fb      	str	r3, [r7, #108]	; 0x6c
    for (int c = 0; c < depth; ++c) {
 800e742:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800e744:	3301      	adds	r3, #1
 800e746:	66bb      	str	r3, [r7, #104]	; 0x68
 800e748:	e7db      	b.n	800e702 <_ZN6tflite13reference_ops12SoftmaxInt16ERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKsS6_Ps+0x9e>
    }

    // Compute the reciprocal 1/sum_of_exps
    uint8_t headroom_plus_one =
        CountLeadingZeros(static_cast<uint32_t>(sum_of_exps));
 800e74a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e74c:	4618      	mov	r0, r3
 800e74e:	f7fe fc99 	bl	800d084 <_ZN6tflite17CountLeadingZerosImEEiT_>
 800e752:	4603      	mov	r3, r0
 800e754:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
    int32_t shifted_sum =
        ((static_cast<int64_t>(sum_of_exps) << (headroom_plus_one - 1)) +
 800e758:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e75a:	461a      	mov	r2, r3
 800e75c:	ea4f 73e2 	mov.w	r3, r2, asr #31
 800e760:	f897 1053 	ldrb.w	r1, [r7, #83]	; 0x53
 800e764:	3901      	subs	r1, #1
 800e766:	f1a1 0620 	sub.w	r6, r1, #32
 800e76a:	f1c1 0020 	rsb	r0, r1, #32
 800e76e:	fa03 f501 	lsl.w	r5, r3, r1
 800e772:	fa02 f606 	lsl.w	r6, r2, r6
 800e776:	4335      	orrs	r5, r6
 800e778:	fa22 f000 	lsr.w	r0, r2, r0
 800e77c:	4305      	orrs	r5, r0
 800e77e:	fa02 f401 	lsl.w	r4, r2, r1
 800e782:	f514 5300 	adds.w	r3, r4, #8192	; 0x2000
 800e786:	603b      	str	r3, [r7, #0]
 800e788:	f145 0300 	adc.w	r3, r5, #0
 800e78c:	607b      	str	r3, [r7, #4]
         (1 << 13)) >>
 800e78e:	f04f 0200 	mov.w	r2, #0
 800e792:	f04f 0300 	mov.w	r3, #0
 800e796:	6839      	ldr	r1, [r7, #0]
 800e798:	0b8a      	lsrs	r2, r1, #14
 800e79a:	6879      	ldr	r1, [r7, #4]
 800e79c:	ea42 4281 	orr.w	r2, r2, r1, lsl #18
 800e7a0:	6879      	ldr	r1, [r7, #4]
 800e7a2:	138b      	asrs	r3, r1, #14
    int32_t shifted_sum =
 800e7a4:	4613      	mov	r3, r2
 800e7a6:	64fb      	str	r3, [r7, #76]	; 0x4c
        14;
    // since the LUT computes 1/(1 + x) we need to first compute x = (sum - 1).
    // also, the LUT expects a symmetrical input, so we must also recenter x
    // from [0, 65535] to [-32768, 32767].
    int32_t sym_shifted_sum = shifted_sum + (-((1 << 15) + (1 << 16)));
 800e7a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e7aa:	f5a3 33c0 	sub.w	r3, r3, #98304	; 0x18000
 800e7ae:	623b      	str	r3, [r7, #32]
    int16_t sat_sym_shifted_sum = static_cast<int16_t>(
        std::min(std::max(sym_shifted_sum, static_cast<int32_t>(-32768)),
 800e7b0:	4b4c      	ldr	r3, [pc, #304]	; (800e8e4 <_ZN6tflite13reference_ops12SoftmaxInt16ERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKsS6_Ps+0x280>)
 800e7b2:	62bb      	str	r3, [r7, #40]	; 0x28
                 static_cast<int32_t>(32767)));
 800e7b4:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800e7b8:	f107 0320 	add.w	r3, r7, #32
 800e7bc:	4611      	mov	r1, r2
 800e7be:	4618      	mov	r0, r3
 800e7c0:	f7f8 f864 	bl	800688c <_ZSt3maxIlERKT_S2_S2_>
 800e7c4:	4602      	mov	r2, r0
 800e7c6:	f647 73ff 	movw	r3, #32767	; 0x7fff
 800e7ca:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e7cc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800e7d0:	4619      	mov	r1, r3
 800e7d2:	4610      	mov	r0, r2
 800e7d4:	f7f8 f846 	bl	8006864 <_ZSt3minIlERKT_S2_S2_>
 800e7d8:	4603      	mov	r3, r0
        std::min(std::max(sym_shifted_sum, static_cast<int32_t>(-32768)),
 800e7da:	681b      	ldr	r3, [r3, #0]
                 static_cast<int32_t>(32767)));
 800e7dc:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
    // apply 1/(1 + x) LUT activation function
    int16_t reciprocal_scale_Q015 = generic_int16_table_lookup(
        sat_sym_shifted_sum, params.one_over_one_plus_x_lut);
 800e7e0:	697b      	ldr	r3, [r7, #20]
 800e7e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    int16_t reciprocal_scale_Q015 = generic_int16_table_lookup(
 800e7e4:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 800e7e8:	4611      	mov	r1, r2
 800e7ea:	4618      	mov	r0, r3
 800e7ec:	f7ff fdc4 	bl	800e378 <_ZN6tflite26generic_int16_table_lookupEsPKs>
 800e7f0:	4603      	mov	r3, r0
 800e7f2:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

    // Rescale the exp_result with reciprocal
    // range of output is [0, 32767] correspond to [0.0, 1.0]
    for (int c = 0; c < depth; ++c) {
 800e7f6:	2300      	movs	r3, #0
 800e7f8:	667b      	str	r3, [r7, #100]	; 0x64
 800e7fa:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800e7fc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e7fe:	429a      	cmp	r2, r3
 800e800:	da67      	bge.n	800e8d2 <_ZN6tflite13reference_ops12SoftmaxInt16ERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKsS6_Ps+0x26e>
      uint8_t right_shift = 31 - headroom_plus_one;
 800e802:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 800e806:	f1c3 031f 	rsb	r3, r3, #31
 800e80a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      int64_t round = 1 << (right_shift - 1);
 800e80e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800e812:	3b01      	subs	r3, #1
 800e814:	2201      	movs	r2, #1
 800e816:	fa02 f303 	lsl.w	r3, r2, r3
 800e81a:	461a      	mov	r2, r3
 800e81c:	ea4f 73e2 	mov.w	r3, r2, asr #31
 800e820:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
      int32_t result = (static_cast<int64_t>(exp_results_Q015[c]) *
 800e824:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e826:	005b      	lsls	r3, r3, #1
 800e828:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800e82a:	4413      	add	r3, r2
 800e82c:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e830:	b218      	sxth	r0, r3
 800e832:	ea4f 71e0 	mov.w	r1, r0, asr #31
                            static_cast<int64_t>(reciprocal_scale_Q015) +
 800e836:	f9b7 2048 	ldrsh.w	r2, [r7, #72]	; 0x48
 800e83a:	ea4f 73e2 	mov.w	r3, r2, asr #31
      int32_t result = (static_cast<int64_t>(exp_results_Q015[c]) *
 800e83e:	fb02 fc01 	mul.w	ip, r2, r1
 800e842:	fb00 f603 	mul.w	r6, r0, r3
 800e846:	4466      	add	r6, ip
 800e848:	fba0 2302 	umull	r2, r3, r0, r2
 800e84c:	18f1      	adds	r1, r6, r3
 800e84e:	460b      	mov	r3, r1
                            static_cast<int64_t>(reciprocal_scale_Q015) +
 800e850:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800e854:	eb12 0a00 	adds.w	sl, r2, r0
 800e858:	eb43 0b01 	adc.w	fp, r3, r1
                        round) >>
                       right_shift;
 800e85c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
                        round) >>
 800e860:	f1c3 0120 	rsb	r1, r3, #32
 800e864:	f1b3 0220 	subs.w	r2, r3, #32
 800e868:	fa2a f803 	lsr.w	r8, sl, r3
 800e86c:	fa0b f101 	lsl.w	r1, fp, r1
 800e870:	ea48 0801 	orr.w	r8, r8, r1
 800e874:	d403      	bmi.n	800e87e <_ZN6tflite13reference_ops12SoftmaxInt16ERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKsS6_Ps+0x21a>
 800e876:	fa4b f202 	asr.w	r2, fp, r2
 800e87a:	ea48 0802 	orr.w	r8, r8, r2
 800e87e:	fa4b f903 	asr.w	r9, fp, r3
      int32_t result = (static_cast<int64_t>(exp_results_Q015[c]) *
 800e882:	4643      	mov	r3, r8
 800e884:	61fb      	str	r3, [r7, #28]
      output_data[i * depth + c] = static_cast<int16_t>(
          std::min(std::max(result, static_cast<int32_t>(0)),
 800e886:	2300      	movs	r3, #0
 800e888:	633b      	str	r3, [r7, #48]	; 0x30
                   static_cast<int32_t>(32767)));
 800e88a:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800e88e:	f107 031c 	add.w	r3, r7, #28
 800e892:	4611      	mov	r1, r2
 800e894:	4618      	mov	r0, r3
 800e896:	f7f7 fff9 	bl	800688c <_ZSt3maxIlERKT_S2_S2_>
 800e89a:	4602      	mov	r2, r0
 800e89c:	f647 73ff 	movw	r3, #32767	; 0x7fff
 800e8a0:	637b      	str	r3, [r7, #52]	; 0x34
 800e8a2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800e8a6:	4619      	mov	r1, r3
 800e8a8:	4610      	mov	r0, r2
 800e8aa:	f7f7 ffdb 	bl	8006864 <_ZSt3minIlERKT_S2_S2_>
 800e8ae:	4603      	mov	r3, r0
          std::min(std::max(result, static_cast<int32_t>(0)),
 800e8b0:	6819      	ldr	r1, [r3, #0]
      output_data[i * depth + c] = static_cast<int16_t>(
 800e8b2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800e8b4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800e8b6:	fb02 f203 	mul.w	r2, r2, r3
 800e8ba:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e8bc:	4413      	add	r3, r2
 800e8be:	005b      	lsls	r3, r3, #1
 800e8c0:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 800e8c4:	4413      	add	r3, r2
 800e8c6:	b20a      	sxth	r2, r1
 800e8c8:	801a      	strh	r2, [r3, #0]
    for (int c = 0; c < depth; ++c) {
 800e8ca:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e8cc:	3301      	adds	r3, #1
 800e8ce:	667b      	str	r3, [r7, #100]	; 0x64
 800e8d0:	e793      	b.n	800e7fa <_ZN6tflite13reference_ops12SoftmaxInt16ERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKsS6_Ps+0x196>
  for (int i = 0; i < outer_size; ++i) {
 800e8d2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800e8d4:	3301      	adds	r3, #1
 800e8d6:	677b      	str	r3, [r7, #116]	; 0x74
 800e8d8:	e6e1      	b.n	800e69e <_ZN6tflite13reference_ops12SoftmaxInt16ERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKsS6_Ps+0x3a>
    }
  }
}
 800e8da:	bf00      	nop
 800e8dc:	377c      	adds	r7, #124	; 0x7c
 800e8de:	46bd      	mov	sp, r7
 800e8e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e8e4:	ffff8000 	.word	0xffff8000

0800e8e8 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE>:

namespace tflite {
namespace {

void SoftmaxQuantized(const TfLiteEvalTensor* input, TfLiteEvalTensor* output,
                      const SoftmaxParams& op_data) {
 800e8e8:	b590      	push	{r4, r7, lr}
 800e8ea:	b0ab      	sub	sp, #172	; 0xac
 800e8ec:	af02      	add	r7, sp, #8
 800e8ee:	60f8      	str	r0, [r7, #12]
 800e8f0:	60b9      	str	r1, [r7, #8]
 800e8f2:	607a      	str	r2, [r7, #4]
  if (input->type == kTfLiteInt8) {
 800e8f4:	68fb      	ldr	r3, [r7, #12]
 800e8f6:	7a1b      	ldrb	r3, [r3, #8]
 800e8f8:	2b09      	cmp	r3, #9
 800e8fa:	d153      	bne.n	800e9a4 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0xbc>
    if (output->type == kTfLiteInt16) {
 800e8fc:	68bb      	ldr	r3, [r7, #8]
 800e8fe:	7a1b      	ldrb	r3, [r3, #8]
 800e900:	2b07      	cmp	r3, #7
 800e902:	d127      	bne.n	800e954 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x6c>
      tflite::reference_ops::Softmax(
          op_data, tflite::micro::GetTensorShape(input),
 800e904:	f107 0310 	add.w	r3, r7, #16
 800e908:	68f9      	ldr	r1, [r7, #12]
 800e90a:	4618      	mov	r0, r3
 800e90c:	f7fe fb53 	bl	800cfb6 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      tflite::reference_ops::Softmax(
 800e910:	68f8      	ldr	r0, [r7, #12]
 800e912:	f7fc fb2b 	bl	800af6c <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor>
 800e916:	4604      	mov	r4, r0
          tflite::micro::GetTensorData<int8_t>(input),
          tflite::micro::GetTensorShape(output),
 800e918:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800e91c:	68b9      	ldr	r1, [r7, #8]
 800e91e:	4618      	mov	r0, r3
 800e920:	f7fe fb49 	bl	800cfb6 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      tflite::reference_ops::Softmax(
 800e924:	68b8      	ldr	r0, [r7, #8]
 800e926:	f7fc fe26 	bl	800b576 <_ZN6tflite5micro13GetTensorDataIsEEPT_P16TfLiteEvalTensor>
 800e92a:	4602      	mov	r2, r0
 800e92c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800e930:	f107 0110 	add.w	r1, r7, #16
 800e934:	9200      	str	r2, [sp, #0]
 800e936:	4622      	mov	r2, r4
 800e938:	6878      	ldr	r0, [r7, #4]
 800e93a:	f000 f8ed 	bl	800eb18 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_>
          tflite::micro::GetTensorShape(output),
 800e93e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800e942:	4618      	mov	r0, r3
 800e944:	f7f8 f927 	bl	8006b96 <_ZN6tflite12RuntimeShapeD1Ev>
          op_data, tflite::micro::GetTensorShape(input),
 800e948:	f107 0310 	add.w	r3, r7, #16
 800e94c:	4618      	mov	r0, r3
 800e94e:	f7f8 f922 	bl	8006b96 <_ZN6tflite12RuntimeShapeD1Ev>
        op_data, tflite::micro::GetTensorShape(input),
        tflite::micro::GetTensorData<int16_t>(input),
        tflite::micro::GetTensorShape(output),
        tflite::micro::GetTensorData<int16_t>(output));
  }
}
 800e952:	e04e      	b.n	800e9f2 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x10a>
          op_data, tflite::micro::GetTensorShape(input),
 800e954:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800e958:	68f9      	ldr	r1, [r7, #12]
 800e95a:	4618      	mov	r0, r3
 800e95c:	f7fe fb2b 	bl	800cfb6 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      tflite::reference_ops::Softmax(
 800e960:	68f8      	ldr	r0, [r7, #12]
 800e962:	f7fc fb03 	bl	800af6c <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor>
 800e966:	4604      	mov	r4, r0
          tflite::micro::GetTensorShape(output),
 800e968:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800e96c:	68b9      	ldr	r1, [r7, #8]
 800e96e:	4618      	mov	r0, r3
 800e970:	f7fe fb21 	bl	800cfb6 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      tflite::reference_ops::Softmax(
 800e974:	68b8      	ldr	r0, [r7, #8]
 800e976:	f7fc fb08 	bl	800af8a <_ZN6tflite5micro13GetTensorDataIaEEPT_P16TfLiteEvalTensor>
 800e97a:	4602      	mov	r2, r0
 800e97c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800e980:	f107 0140 	add.w	r1, r7, #64	; 0x40
 800e984:	9200      	str	r2, [sp, #0]
 800e986:	4622      	mov	r2, r4
 800e988:	6878      	ldr	r0, [r7, #4]
 800e98a:	f000 f9e3 	bl	800ed54 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_>
          tflite::micro::GetTensorShape(output),
 800e98e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800e992:	4618      	mov	r0, r3
 800e994:	f7f8 f8ff 	bl	8006b96 <_ZN6tflite12RuntimeShapeD1Ev>
          op_data, tflite::micro::GetTensorShape(input),
 800e998:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800e99c:	4618      	mov	r0, r3
 800e99e:	f7f8 f8fa 	bl	8006b96 <_ZN6tflite12RuntimeShapeD1Ev>
}
 800e9a2:	e026      	b.n	800e9f2 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x10a>
        op_data, tflite::micro::GetTensorShape(input),
 800e9a4:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800e9a8:	68f9      	ldr	r1, [r7, #12]
 800e9aa:	4618      	mov	r0, r3
 800e9ac:	f7fe fb03 	bl	800cfb6 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
    tflite::reference_ops::SoftmaxInt16(
 800e9b0:	68f8      	ldr	r0, [r7, #12]
 800e9b2:	f7fc fdd1 	bl	800b558 <_ZN6tflite5micro13GetTensorDataIsEEPKT_PK16TfLiteEvalTensor>
 800e9b6:	4604      	mov	r4, r0
        tflite::micro::GetTensorShape(output),
 800e9b8:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800e9bc:	68b9      	ldr	r1, [r7, #8]
 800e9be:	4618      	mov	r0, r3
 800e9c0:	f7fe faf9 	bl	800cfb6 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
    tflite::reference_ops::SoftmaxInt16(
 800e9c4:	68b8      	ldr	r0, [r7, #8]
 800e9c6:	f7fc fdd6 	bl	800b576 <_ZN6tflite5micro13GetTensorDataIsEEPT_P16TfLiteEvalTensor>
 800e9ca:	4602      	mov	r2, r0
 800e9cc:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800e9d0:	f107 0170 	add.w	r1, r7, #112	; 0x70
 800e9d4:	9200      	str	r2, [sp, #0]
 800e9d6:	4622      	mov	r2, r4
 800e9d8:	6878      	ldr	r0, [r7, #4]
 800e9da:	f7ff fe43 	bl	800e664 <_ZN6tflite13reference_ops12SoftmaxInt16ERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKsS6_Ps>
        tflite::micro::GetTensorShape(output),
 800e9de:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800e9e2:	4618      	mov	r0, r3
 800e9e4:	f7f8 f8d7 	bl	8006b96 <_ZN6tflite12RuntimeShapeD1Ev>
        op_data, tflite::micro::GetTensorShape(input),
 800e9e8:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800e9ec:	4618      	mov	r0, r3
 800e9ee:	f7f8 f8d2 	bl	8006b96 <_ZN6tflite12RuntimeShapeD1Ev>
}
 800e9f2:	bf00      	nop
 800e9f4:	37a4      	adds	r7, #164	; 0xa4
 800e9f6:	46bd      	mov	sp, r7
 800e9f8:	bd90      	pop	{r4, r7, pc}
	...

0800e9fc <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus SoftmaxEval(TfLiteContext* context, TfLiteNode* node) {
 800e9fc:	b5b0      	push	{r4, r5, r7, lr}
 800e9fe:	b0a0      	sub	sp, #128	; 0x80
 800ea00:	af02      	add	r7, sp, #8
 800ea02:	6078      	str	r0, [r7, #4]
 800ea04:	6039      	str	r1, [r7, #0]
  const TfLiteEvalTensor* input = tflite::micro::GetEvalInput(context, node, 0);
 800ea06:	2200      	movs	r2, #0
 800ea08:	6839      	ldr	r1, [r7, #0]
 800ea0a:	6878      	ldr	r0, [r7, #4]
 800ea0c:	f7fc fa5e 	bl	800aecc <_ZN6tflite5micro12GetEvalInputEPK13TfLiteContextPK10TfLiteNodei>
 800ea10:	6778      	str	r0, [r7, #116]	; 0x74
  TfLiteEvalTensor* output = tflite::micro::GetEvalOutput(context, node, 0);
 800ea12:	2200      	movs	r2, #0
 800ea14:	6839      	ldr	r1, [r7, #0]
 800ea16:	6878      	ldr	r0, [r7, #4]
 800ea18:	f7fc fa68 	bl	800aeec <_ZN6tflite5micro13GetEvalOutputEPK13TfLiteContextPK10TfLiteNodei>
 800ea1c:	6738      	str	r0, [r7, #112]	; 0x70

  TFLITE_DCHECK(node->user_data != nullptr);
 800ea1e:	683b      	ldr	r3, [r7, #0]
 800ea20:	691b      	ldr	r3, [r3, #16]
 800ea22:	2b00      	cmp	r3, #0
 800ea24:	d101      	bne.n	800ea2a <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x2e>
 800ea26:	f001 feba 	bl	801079e <abort>
  SoftmaxParams op_data = *static_cast<SoftmaxParams*>(node->user_data);
 800ea2a:	683b      	ldr	r3, [r7, #0]
 800ea2c:	691b      	ldr	r3, [r3, #16]
 800ea2e:	f107 0408 	add.w	r4, r7, #8
 800ea32:	461d      	mov	r5, r3
 800ea34:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ea36:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ea38:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ea3a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ea3c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ea3e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ea40:	e895 0003 	ldmia.w	r5, {r0, r1}
 800ea44:	e884 0003 	stmia.w	r4, {r0, r1}

  switch (input->type) {
 800ea48:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800ea4a:	7a1b      	ldrb	r3, [r3, #8]
 800ea4c:	2b09      	cmp	r3, #9
 800ea4e:	d030      	beq.n	800eab2 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0xb6>
 800ea50:	2b09      	cmp	r3, #9
 800ea52:	dc37      	bgt.n	800eac4 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0xc8>
 800ea54:	2b01      	cmp	r3, #1
 800ea56:	d002      	beq.n	800ea5e <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x62>
 800ea58:	2b07      	cmp	r3, #7
 800ea5a:	d02a      	beq.n	800eab2 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0xb6>
 800ea5c:	e032      	b.n	800eac4 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0xc8>
    case kTfLiteFloat32: {
      tflite::reference_ops::Softmax(
          op_data, tflite::micro::GetTensorShape(input),
 800ea5e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800ea62:	6f79      	ldr	r1, [r7, #116]	; 0x74
 800ea64:	4618      	mov	r0, r3
 800ea66:	f7fe faa6 	bl	800cfb6 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      tflite::reference_ops::Softmax(
 800ea6a:	6f78      	ldr	r0, [r7, #116]	; 0x74
 800ea6c:	f7fc fa5e 	bl	800af2c <_ZN6tflite5micro13GetTensorDataIfEEPKT_PK16TfLiteEvalTensor>
 800ea70:	4604      	mov	r4, r0
          tflite::micro::GetTensorData<float>(input),
          tflite::micro::GetTensorShape(output),
 800ea72:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800ea76:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800ea78:	4618      	mov	r0, r3
 800ea7a:	f7fe fa9c 	bl	800cfb6 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      tflite::reference_ops::Softmax(
 800ea7e:	6f38      	ldr	r0, [r7, #112]	; 0x70
 800ea80:	f7fc fa63 	bl	800af4a <_ZN6tflite5micro13GetTensorDataIfEEPT_P16TfLiteEvalTensor>
 800ea84:	4602      	mov	r2, r0
 800ea86:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800ea8a:	f107 0140 	add.w	r1, r7, #64	; 0x40
 800ea8e:	f107 0008 	add.w	r0, r7, #8
 800ea92:	9200      	str	r2, [sp, #0]
 800ea94:	4622      	mov	r2, r4
 800ea96:	f7ff fce8 	bl	800e46a <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKfS6_Pf>
          tflite::micro::GetTensorShape(output),
 800ea9a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800ea9e:	4618      	mov	r0, r3
 800eaa0:	f7f8 f879 	bl	8006b96 <_ZN6tflite12RuntimeShapeD1Ev>
          op_data, tflite::micro::GetTensorShape(input),
 800eaa4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800eaa8:	4618      	mov	r0, r3
 800eaaa:	f7f8 f874 	bl	8006b96 <_ZN6tflite12RuntimeShapeD1Ev>
          tflite::micro::GetTensorData<float>(output));
      return kTfLiteOk;
 800eaae:	2300      	movs	r3, #0
 800eab0:	e016      	b.n	800eae0 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0xe4>
    }
    case kTfLiteInt8:
    case kTfLiteInt16: {
      SoftmaxQuantized(input, output, op_data);
 800eab2:	f107 0308 	add.w	r3, r7, #8
 800eab6:	461a      	mov	r2, r3
 800eab8:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800eaba:	6f78      	ldr	r0, [r7, #116]	; 0x74
 800eabc:	f7ff ff14 	bl	800e8e8 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE>
      return kTfLiteOk;
 800eac0:	2300      	movs	r3, #0
 800eac2:	e00d      	b.n	800eae0 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0xe4>
    }
    default:
      TF_LITE_KERNEL_LOG(context, "Type %s (%d) not supported.",
 800eac4:	687b      	ldr	r3, [r7, #4]
 800eac6:	695c      	ldr	r4, [r3, #20]
 800eac8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800eaca:	7a1b      	ldrb	r3, [r3, #8]
 800eacc:	4618      	mov	r0, r3
 800eace:	f7f5 f827 	bl	8003b20 <TfLiteTypeGetName>
 800ead2:	4602      	mov	r2, r0
 800ead4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800ead6:	7a1b      	ldrb	r3, [r3, #8]
 800ead8:	4903      	ldr	r1, [pc, #12]	; (800eae8 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0xec>)
 800eada:	6878      	ldr	r0, [r7, #4]
 800eadc:	47a0      	blx	r4
                         TfLiteTypeGetName(input->type), input->type);
      return kTfLiteError;
 800eade:	2301      	movs	r3, #1
  }
}
 800eae0:	4618      	mov	r0, r3
 800eae2:	3778      	adds	r7, #120	; 0x78
 800eae4:	46bd      	mov	sp, r7
 800eae6:	bdb0      	pop	{r4, r5, r7, pc}
 800eae8:	08017e28 	.word	0x08017e28

0800eaec <_ZN6tflite16Register_SOFTMAXEv>:
}  // namespace

TfLiteRegistration Register_SOFTMAX() {
 800eaec:	b4b0      	push	{r4, r5, r7}
 800eaee:	b083      	sub	sp, #12
 800eaf0:	af00      	add	r7, sp, #0
 800eaf2:	6078      	str	r0, [r7, #4]
          /*prepare=*/SoftmaxPrepare,
          /*invoke=*/SoftmaxEval,
          /*profiling_string=*/nullptr,
          /*builtin_code=*/0,
          /*custom_name=*/nullptr,
          /*version=*/0};
 800eaf4:	687b      	ldr	r3, [r7, #4]
 800eaf6:	4a07      	ldr	r2, [pc, #28]	; (800eb14 <_ZN6tflite16Register_SOFTMAXEv+0x28>)
 800eaf8:	461c      	mov	r4, r3
 800eafa:	4615      	mov	r5, r2
 800eafc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800eafe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800eb00:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800eb04:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 800eb08:	6878      	ldr	r0, [r7, #4]
 800eb0a:	370c      	adds	r7, #12
 800eb0c:	46bd      	mov	sp, r7
 800eb0e:	bcb0      	pop	{r4, r5, r7}
 800eb10:	4770      	bx	lr
 800eb12:	bf00      	nop
 800eb14:	08017e44 	.word	0x08017e44

0800eb18 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_>:
inline void Softmax(const SoftmaxParams& params,
 800eb18:	b590      	push	{r4, r7, lr}
 800eb1a:	b09f      	sub	sp, #124	; 0x7c
 800eb1c:	af00      	add	r7, sp, #0
 800eb1e:	60f8      	str	r0, [r7, #12]
 800eb20:	60b9      	str	r1, [r7, #8]
 800eb22:	607a      	str	r2, [r7, #4]
 800eb24:	603b      	str	r3, [r7, #0]
  const int32_t input_beta_multiplier = params.input_multiplier;
 800eb26:	68fb      	ldr	r3, [r7, #12]
 800eb28:	689b      	ldr	r3, [r3, #8]
 800eb2a:	667b      	str	r3, [r7, #100]	; 0x64
  const int32_t input_beta_left_shift = params.input_left_shift;
 800eb2c:	68fb      	ldr	r3, [r7, #12]
 800eb2e:	68db      	ldr	r3, [r3, #12]
 800eb30:	663b      	str	r3, [r7, #96]	; 0x60
  const int diff_min = params.diff_min;
 800eb32:	68fb      	ldr	r3, [r7, #12]
 800eb34:	699b      	ldr	r3, [r3, #24]
 800eb36:	65fb      	str	r3, [r7, #92]	; 0x5c
  const int trailing_dim = input_shape.DimensionsCount() - 1;
 800eb38:	68b8      	ldr	r0, [r7, #8]
 800eb3a:	f7f8 f842 	bl	8006bc2 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 800eb3e:	4603      	mov	r3, r0
 800eb40:	3b01      	subs	r3, #1
 800eb42:	65bb      	str	r3, [r7, #88]	; 0x58
      MatchingFlatSizeSkipDim(input_shape, trailing_dim, output_shape);
 800eb44:	683a      	ldr	r2, [r7, #0]
 800eb46:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800eb48:	68b8      	ldr	r0, [r7, #8]
 800eb4a:	f7fe fa6c 	bl	800d026 <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_>
 800eb4e:	6578      	str	r0, [r7, #84]	; 0x54
      MatchingDim(input_shape, trailing_dim, output_shape, trailing_dim);
 800eb50:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800eb52:	683a      	ldr	r2, [r7, #0]
 800eb54:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800eb56:	68b8      	ldr	r0, [r7, #8]
 800eb58:	f7fc fd47 	bl	800b5ea <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 800eb5c:	6538      	str	r0, [r7, #80]	; 0x50
  for (int i = 0; i < outer_size; ++i) {
 800eb5e:	2300      	movs	r3, #0
 800eb60:	677b      	str	r3, [r7, #116]	; 0x74
 800eb62:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800eb64:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800eb66:	429a      	cmp	r2, r3
 800eb68:	f280 80f0 	bge.w	800ed4c <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x234>
    InputT max_in_row = std::numeric_limits<InputT>::min();
 800eb6c:	2380      	movs	r3, #128	; 0x80
 800eb6e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    for (int c = 0; c < depth; ++c) {
 800eb72:	2300      	movs	r3, #0
 800eb74:	673b      	str	r3, [r7, #112]	; 0x70
 800eb76:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800eb78:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800eb7a:	429a      	cmp	r2, r3
 800eb7c:	da17      	bge.n	800ebae <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x96>
      max_in_row = std::max(max_in_row, input_data[i * depth + c]);
 800eb7e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800eb80:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800eb82:	fb02 f203 	mul.w	r2, r2, r3
 800eb86:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800eb88:	4413      	add	r3, r2
 800eb8a:	461a      	mov	r2, r3
 800eb8c:	687b      	ldr	r3, [r7, #4]
 800eb8e:	441a      	add	r2, r3
 800eb90:	f107 032f 	add.w	r3, r7, #47	; 0x2f
 800eb94:	4611      	mov	r1, r2
 800eb96:	4618      	mov	r0, r3
 800eb98:	f7ff f815 	bl	800dbc6 <_ZSt3maxIaERKT_S2_S2_>
 800eb9c:	4603      	mov	r3, r0
 800eb9e:	f993 3000 	ldrsb.w	r3, [r3]
 800eba2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    for (int c = 0; c < depth; ++c) {
 800eba6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800eba8:	3301      	adds	r3, #1
 800ebaa:	673b      	str	r3, [r7, #112]	; 0x70
 800ebac:	e7e3      	b.n	800eb76 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x5e>
    FixedPointAccum sum_of_exps = FixedPointAccum::Zero();
 800ebae:	f000 f9ef 	bl	800ef90 <_ZN8gemmlowp10FixedPointIlLi12EE4ZeroEv>
 800ebb2:	4603      	mov	r3, r0
 800ebb4:	62bb      	str	r3, [r7, #40]	; 0x28
    for (int c = 0; c < depth; ++c) {
 800ebb6:	2300      	movs	r3, #0
 800ebb8:	66fb      	str	r3, [r7, #108]	; 0x6c
 800ebba:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800ebbc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ebbe:	429a      	cmp	r2, r3
 800ebc0:	da30      	bge.n	800ec24 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x10c>
          static_cast<int32_t>(input_data[i * depth + c]) - max_in_row;
 800ebc2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800ebc4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800ebc6:	fb02 f203 	mul.w	r2, r2, r3
 800ebca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ebcc:	4413      	add	r3, r2
 800ebce:	461a      	mov	r2, r3
 800ebd0:	687b      	ldr	r3, [r7, #4]
 800ebd2:	4413      	add	r3, r2
 800ebd4:	f993 3000 	ldrsb.w	r3, [r3]
 800ebd8:	461a      	mov	r2, r3
 800ebda:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
      int32_t input_diff =
 800ebde:	1ad3      	subs	r3, r2, r3
 800ebe0:	64fb      	str	r3, [r7, #76]	; 0x4c
      if (input_diff >= diff_min) {
 800ebe2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800ebe4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ebe6:	429a      	cmp	r2, r3
 800ebe8:	db18      	blt.n	800ec1c <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x104>
            MultiplyByQuantizedMultiplierGreaterThanOne(
 800ebea:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800ebec:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800ebee:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800ebf0:	f7ff fbae 	bl	800e350 <_ZN6tflite43MultiplyByQuantizedMultiplierGreaterThanOneElli>
 800ebf4:	64b8      	str	r0, [r7, #72]	; 0x48
            FixedPointScaledDiff::FromRaw(input_diff_rescaled);
 800ebf6:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800ebf8:	f7fe fbd8 	bl	800d3ac <_ZN8gemmlowp10FixedPointIlLi5EE7FromRawEl>
 800ebfc:	4603      	mov	r3, r0
 800ebfe:	61fb      	str	r3, [r7, #28]
        sum_of_exps = sum_of_exps + gemmlowp::Rescale<kAccumulationIntegerBits>(
 800ec00:	69f8      	ldr	r0, [r7, #28]
 800ec02:	f7fe fbe5 	bl	800d3d0 <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE>
 800ec06:	4603      	mov	r3, r0
 800ec08:	4618      	mov	r0, r3
 800ec0a:	f7fe fd29 	bl	800d660 <_ZN8gemmlowp7RescaleILi12ElLi0EEENS_10FixedPointIT0_XT_EEENS1_IS2_XT1_EEE>
 800ec0e:	4603      	mov	r3, r0
 800ec10:	4619      	mov	r1, r3
 800ec12:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ec14:	f7fe fd3e 	bl	800d694 <_ZN8gemmlowpplIlLi12EEENS_10FixedPointIT_XT0_EEES3_S3_>
 800ec18:	4603      	mov	r3, r0
 800ec1a:	62bb      	str	r3, [r7, #40]	; 0x28
    for (int c = 0; c < depth; ++c) {
 800ec1c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ec1e:	3301      	adds	r3, #1
 800ec20:	66fb      	str	r3, [r7, #108]	; 0x6c
 800ec22:	e7ca      	b.n	800ebba <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0xa2>
        sum_of_exps.raw(), kAccumulationIntegerBits, &num_bits_over_unit));
 800ec24:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800ec28:	4618      	mov	r0, r3
 800ec2a:	f7fe ffa4 	bl	800db76 <_ZN8gemmlowp10FixedPointIlLi12EE3rawEv>
 800ec2e:	4603      	mov	r3, r0
    FixedPoint0 shifted_scale = FixedPoint0::FromRaw(GetReciprocal(
 800ec30:	681b      	ldr	r3, [r3, #0]
 800ec32:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800ec36:	210c      	movs	r1, #12
 800ec38:	4618      	mov	r0, r3
 800ec3a:	f7ff fbeb 	bl	800e414 <_ZN6tflite13GetReciprocalEliPi>
 800ec3e:	4603      	mov	r3, r0
 800ec40:	4618      	mov	r0, r3
 800ec42:	f7fe fb42 	bl	800d2ca <_ZN8gemmlowp10FixedPointIlLi0EE7FromRawEl>
 800ec46:	4603      	mov	r3, r0
 800ec48:	623b      	str	r3, [r7, #32]
    for (int c = 0; c < depth; ++c) {
 800ec4a:	2300      	movs	r3, #0
 800ec4c:	66bb      	str	r3, [r7, #104]	; 0x68
 800ec4e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800ec50:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ec52:	429a      	cmp	r2, r3
 800ec54:	da76      	bge.n	800ed44 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x22c>
          static_cast<int32_t>(input_data[i * depth + c]) - max_in_row;
 800ec56:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800ec58:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800ec5a:	fb02 f203 	mul.w	r2, r2, r3
 800ec5e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800ec60:	4413      	add	r3, r2
 800ec62:	461a      	mov	r2, r3
 800ec64:	687b      	ldr	r3, [r7, #4]
 800ec66:	4413      	add	r3, r2
 800ec68:	f993 3000 	ldrsb.w	r3, [r3]
 800ec6c:	461a      	mov	r2, r3
 800ec6e:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
      int32_t input_diff =
 800ec72:	1ad3      	subs	r3, r2, r3
 800ec74:	647b      	str	r3, [r7, #68]	; 0x44
      if (input_diff >= diff_min) {
 800ec76:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ec78:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ec7a:	429a      	cmp	r2, r3
 800ec7c:	db50      	blt.n	800ed20 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x208>
            MultiplyByQuantizedMultiplierGreaterThanOne(
 800ec7e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800ec80:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800ec82:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800ec84:	f7ff fb64 	bl	800e350 <_ZN6tflite43MultiplyByQuantizedMultiplierGreaterThanOneElli>
 800ec88:	6438      	str	r0, [r7, #64]	; 0x40
            FixedPointScaledDiff::FromRaw(input_diff_rescaled);
 800ec8a:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800ec8c:	f7fe fb8e 	bl	800d3ac <_ZN8gemmlowp10FixedPointIlLi5EE7FromRawEl>
 800ec90:	4603      	mov	r3, r0
 800ec92:	61bb      	str	r3, [r7, #24]
        FixedPoint0 exp_in_0 = exp_on_negative_values(scaled_diff_f8);
 800ec94:	69b8      	ldr	r0, [r7, #24]
 800ec96:	f7fe fb9b 	bl	800d3d0 <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE>
 800ec9a:	4603      	mov	r3, r0
 800ec9c:	617b      	str	r3, [r7, #20]
            (shifted_scale * exp_in_0).raw(),
 800ec9e:	6979      	ldr	r1, [r7, #20]
 800eca0:	6a38      	ldr	r0, [r7, #32]
 800eca2:	f7fe ff13 	bl	800dacc <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 800eca6:	4603      	mov	r3, r0
 800eca8:	633b      	str	r3, [r7, #48]	; 0x30
 800ecaa:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800ecae:	4618      	mov	r0, r3
 800ecb0:	f7fe f9fa 	bl	800d0a8 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 800ecb4:	4603      	mov	r3, r0
        int32_t unsat_output = gemmlowp::RoundingDivideByPOT(
 800ecb6:	681b      	ldr	r3, [r3, #0]
            num_bits_over_unit + 31 - (sizeof(OutputT) * 8));
 800ecb8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ecba:	320f      	adds	r2, #15
        int32_t unsat_output = gemmlowp::RoundingDivideByPOT(
 800ecbc:	4611      	mov	r1, r2
 800ecbe:	4618      	mov	r0, r3
 800ecc0:	f7fc fa64 	bl	800b18c <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i>
 800ecc4:	63f8      	str	r0, [r7, #60]	; 0x3c
            static_cast<int32_t>(std::numeric_limits<OutputT>::min());
 800ecc6:	f7f7 f919 	bl	8005efc <_ZNSt14numeric_limitsIsE3minEv>
 800ecca:	4603      	mov	r3, r0
 800eccc:	461a      	mov	r2, r3
            unsat_output +
 800ecce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ecd0:	4413      	add	r3, r2
        const int32_t shifted_output =
 800ecd2:	613b      	str	r3, [r7, #16]
                     static_cast<int32_t>(std::numeric_limits<OutputT>::max())),
 800ecd4:	f7f7 f91c 	bl	8005f10 <_ZNSt14numeric_limitsIsE3maxEv>
 800ecd8:	4603      	mov	r3, r0
 800ecda:	637b      	str	r3, [r7, #52]	; 0x34
            static_cast<int32_t>(std::numeric_limits<OutputT>::min())));
 800ecdc:	f107 0234 	add.w	r2, r7, #52	; 0x34
 800ece0:	f107 0310 	add.w	r3, r7, #16
 800ece4:	4611      	mov	r1, r2
 800ece6:	4618      	mov	r0, r3
 800ece8:	f7f7 fdbc 	bl	8006864 <_ZSt3minIlERKT_S2_S2_>
 800ecec:	4604      	mov	r4, r0
 800ecee:	f7f7 f905 	bl	8005efc <_ZNSt14numeric_limitsIsE3minEv>
 800ecf2:	4603      	mov	r3, r0
 800ecf4:	63bb      	str	r3, [r7, #56]	; 0x38
 800ecf6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800ecfa:	4619      	mov	r1, r3
 800ecfc:	4620      	mov	r0, r4
 800ecfe:	f7f7 fdc5 	bl	800688c <_ZSt3maxIlERKT_S2_S2_>
 800ed02:	4603      	mov	r3, r0
        output_data[i * depth + c] = static_cast<OutputT>(std::max(
 800ed04:	6819      	ldr	r1, [r3, #0]
 800ed06:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800ed08:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800ed0a:	fb02 f203 	mul.w	r2, r2, r3
 800ed0e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800ed10:	4413      	add	r3, r2
 800ed12:	005b      	lsls	r3, r3, #1
 800ed14:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800ed18:	4413      	add	r3, r2
 800ed1a:	b20a      	sxth	r2, r1
 800ed1c:	801a      	strh	r2, [r3, #0]
 800ed1e:	e00d      	b.n	800ed3c <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x224>
        output_data[i * depth + c] = std::numeric_limits<OutputT>::min();
 800ed20:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800ed22:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800ed24:	fb02 f203 	mul.w	r2, r2, r3
 800ed28:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800ed2a:	4413      	add	r3, r2
 800ed2c:	005b      	lsls	r3, r3, #1
 800ed2e:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800ed32:	18d4      	adds	r4, r2, r3
 800ed34:	f7f7 f8e2 	bl	8005efc <_ZNSt14numeric_limitsIsE3minEv>
 800ed38:	4603      	mov	r3, r0
 800ed3a:	8023      	strh	r3, [r4, #0]
    for (int c = 0; c < depth; ++c) {
 800ed3c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800ed3e:	3301      	adds	r3, #1
 800ed40:	66bb      	str	r3, [r7, #104]	; 0x68
 800ed42:	e784      	b.n	800ec4e <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x136>
  for (int i = 0; i < outer_size; ++i) {
 800ed44:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800ed46:	3301      	adds	r3, #1
 800ed48:	677b      	str	r3, [r7, #116]	; 0x74
 800ed4a:	e70a      	b.n	800eb62 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x4a>
}
 800ed4c:	bf00      	nop
 800ed4e:	377c      	adds	r7, #124	; 0x7c
 800ed50:	46bd      	mov	sp, r7
 800ed52:	bd90      	pop	{r4, r7, pc}

0800ed54 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_>:
inline void Softmax(const SoftmaxParams& params,
 800ed54:	b590      	push	{r4, r7, lr}
 800ed56:	b09f      	sub	sp, #124	; 0x7c
 800ed58:	af00      	add	r7, sp, #0
 800ed5a:	60f8      	str	r0, [r7, #12]
 800ed5c:	60b9      	str	r1, [r7, #8]
 800ed5e:	607a      	str	r2, [r7, #4]
 800ed60:	603b      	str	r3, [r7, #0]
  const int32_t input_beta_multiplier = params.input_multiplier;
 800ed62:	68fb      	ldr	r3, [r7, #12]
 800ed64:	689b      	ldr	r3, [r3, #8]
 800ed66:	667b      	str	r3, [r7, #100]	; 0x64
  const int32_t input_beta_left_shift = params.input_left_shift;
 800ed68:	68fb      	ldr	r3, [r7, #12]
 800ed6a:	68db      	ldr	r3, [r3, #12]
 800ed6c:	663b      	str	r3, [r7, #96]	; 0x60
  const int diff_min = params.diff_min;
 800ed6e:	68fb      	ldr	r3, [r7, #12]
 800ed70:	699b      	ldr	r3, [r3, #24]
 800ed72:	65fb      	str	r3, [r7, #92]	; 0x5c
  const int trailing_dim = input_shape.DimensionsCount() - 1;
 800ed74:	68b8      	ldr	r0, [r7, #8]
 800ed76:	f7f7 ff24 	bl	8006bc2 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 800ed7a:	4603      	mov	r3, r0
 800ed7c:	3b01      	subs	r3, #1
 800ed7e:	65bb      	str	r3, [r7, #88]	; 0x58
      MatchingFlatSizeSkipDim(input_shape, trailing_dim, output_shape);
 800ed80:	683a      	ldr	r2, [r7, #0]
 800ed82:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800ed84:	68b8      	ldr	r0, [r7, #8]
 800ed86:	f7fe f94e 	bl	800d026 <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_>
 800ed8a:	6578      	str	r0, [r7, #84]	; 0x54
      MatchingDim(input_shape, trailing_dim, output_shape, trailing_dim);
 800ed8c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ed8e:	683a      	ldr	r2, [r7, #0]
 800ed90:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800ed92:	68b8      	ldr	r0, [r7, #8]
 800ed94:	f7fc fc29 	bl	800b5ea <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 800ed98:	6538      	str	r0, [r7, #80]	; 0x50
  for (int i = 0; i < outer_size; ++i) {
 800ed9a:	2300      	movs	r3, #0
 800ed9c:	677b      	str	r3, [r7, #116]	; 0x74
 800ed9e:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800eda0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800eda2:	429a      	cmp	r2, r3
 800eda4:	f280 80f0 	bge.w	800ef88 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x234>
    InputT max_in_row = std::numeric_limits<InputT>::min();
 800eda8:	2380      	movs	r3, #128	; 0x80
 800edaa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    for (int c = 0; c < depth; ++c) {
 800edae:	2300      	movs	r3, #0
 800edb0:	673b      	str	r3, [r7, #112]	; 0x70
 800edb2:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800edb4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800edb6:	429a      	cmp	r2, r3
 800edb8:	da17      	bge.n	800edea <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x96>
      max_in_row = std::max(max_in_row, input_data[i * depth + c]);
 800edba:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800edbc:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800edbe:	fb02 f203 	mul.w	r2, r2, r3
 800edc2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800edc4:	4413      	add	r3, r2
 800edc6:	461a      	mov	r2, r3
 800edc8:	687b      	ldr	r3, [r7, #4]
 800edca:	441a      	add	r2, r3
 800edcc:	f107 032f 	add.w	r3, r7, #47	; 0x2f
 800edd0:	4611      	mov	r1, r2
 800edd2:	4618      	mov	r0, r3
 800edd4:	f7fe fef7 	bl	800dbc6 <_ZSt3maxIaERKT_S2_S2_>
 800edd8:	4603      	mov	r3, r0
 800edda:	f993 3000 	ldrsb.w	r3, [r3]
 800edde:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    for (int c = 0; c < depth; ++c) {
 800ede2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800ede4:	3301      	adds	r3, #1
 800ede6:	673b      	str	r3, [r7, #112]	; 0x70
 800ede8:	e7e3      	b.n	800edb2 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x5e>
    FixedPointAccum sum_of_exps = FixedPointAccum::Zero();
 800edea:	f000 f8d1 	bl	800ef90 <_ZN8gemmlowp10FixedPointIlLi12EE4ZeroEv>
 800edee:	4603      	mov	r3, r0
 800edf0:	62bb      	str	r3, [r7, #40]	; 0x28
    for (int c = 0; c < depth; ++c) {
 800edf2:	2300      	movs	r3, #0
 800edf4:	66fb      	str	r3, [r7, #108]	; 0x6c
 800edf6:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800edf8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800edfa:	429a      	cmp	r2, r3
 800edfc:	da30      	bge.n	800ee60 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x10c>
          static_cast<int32_t>(input_data[i * depth + c]) - max_in_row;
 800edfe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800ee00:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800ee02:	fb02 f203 	mul.w	r2, r2, r3
 800ee06:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ee08:	4413      	add	r3, r2
 800ee0a:	461a      	mov	r2, r3
 800ee0c:	687b      	ldr	r3, [r7, #4]
 800ee0e:	4413      	add	r3, r2
 800ee10:	f993 3000 	ldrsb.w	r3, [r3]
 800ee14:	461a      	mov	r2, r3
 800ee16:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
      int32_t input_diff =
 800ee1a:	1ad3      	subs	r3, r2, r3
 800ee1c:	64fb      	str	r3, [r7, #76]	; 0x4c
      if (input_diff >= diff_min) {
 800ee1e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800ee20:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ee22:	429a      	cmp	r2, r3
 800ee24:	db18      	blt.n	800ee58 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x104>
            MultiplyByQuantizedMultiplierGreaterThanOne(
 800ee26:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800ee28:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800ee2a:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800ee2c:	f7ff fa90 	bl	800e350 <_ZN6tflite43MultiplyByQuantizedMultiplierGreaterThanOneElli>
 800ee30:	64b8      	str	r0, [r7, #72]	; 0x48
            FixedPointScaledDiff::FromRaw(input_diff_rescaled);
 800ee32:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800ee34:	f7fe faba 	bl	800d3ac <_ZN8gemmlowp10FixedPointIlLi5EE7FromRawEl>
 800ee38:	4603      	mov	r3, r0
 800ee3a:	61fb      	str	r3, [r7, #28]
        sum_of_exps = sum_of_exps + gemmlowp::Rescale<kAccumulationIntegerBits>(
 800ee3c:	69f8      	ldr	r0, [r7, #28]
 800ee3e:	f7fe fac7 	bl	800d3d0 <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE>
 800ee42:	4603      	mov	r3, r0
 800ee44:	4618      	mov	r0, r3
 800ee46:	f7fe fc0b 	bl	800d660 <_ZN8gemmlowp7RescaleILi12ElLi0EEENS_10FixedPointIT0_XT_EEENS1_IS2_XT1_EEE>
 800ee4a:	4603      	mov	r3, r0
 800ee4c:	4619      	mov	r1, r3
 800ee4e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ee50:	f7fe fc20 	bl	800d694 <_ZN8gemmlowpplIlLi12EEENS_10FixedPointIT_XT0_EEES3_S3_>
 800ee54:	4603      	mov	r3, r0
 800ee56:	62bb      	str	r3, [r7, #40]	; 0x28
    for (int c = 0; c < depth; ++c) {
 800ee58:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ee5a:	3301      	adds	r3, #1
 800ee5c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800ee5e:	e7ca      	b.n	800edf6 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0xa2>
        sum_of_exps.raw(), kAccumulationIntegerBits, &num_bits_over_unit));
 800ee60:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800ee64:	4618      	mov	r0, r3
 800ee66:	f7fe fe86 	bl	800db76 <_ZN8gemmlowp10FixedPointIlLi12EE3rawEv>
 800ee6a:	4603      	mov	r3, r0
    FixedPoint0 shifted_scale = FixedPoint0::FromRaw(GetReciprocal(
 800ee6c:	681b      	ldr	r3, [r3, #0]
 800ee6e:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800ee72:	210c      	movs	r1, #12
 800ee74:	4618      	mov	r0, r3
 800ee76:	f7ff facd 	bl	800e414 <_ZN6tflite13GetReciprocalEliPi>
 800ee7a:	4603      	mov	r3, r0
 800ee7c:	4618      	mov	r0, r3
 800ee7e:	f7fe fa24 	bl	800d2ca <_ZN8gemmlowp10FixedPointIlLi0EE7FromRawEl>
 800ee82:	4603      	mov	r3, r0
 800ee84:	623b      	str	r3, [r7, #32]
    for (int c = 0; c < depth; ++c) {
 800ee86:	2300      	movs	r3, #0
 800ee88:	66bb      	str	r3, [r7, #104]	; 0x68
 800ee8a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800ee8c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ee8e:	429a      	cmp	r2, r3
 800ee90:	da76      	bge.n	800ef80 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x22c>
          static_cast<int32_t>(input_data[i * depth + c]) - max_in_row;
 800ee92:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800ee94:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800ee96:	fb02 f203 	mul.w	r2, r2, r3
 800ee9a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800ee9c:	4413      	add	r3, r2
 800ee9e:	461a      	mov	r2, r3
 800eea0:	687b      	ldr	r3, [r7, #4]
 800eea2:	4413      	add	r3, r2
 800eea4:	f993 3000 	ldrsb.w	r3, [r3]
 800eea8:	461a      	mov	r2, r3
 800eeaa:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
      int32_t input_diff =
 800eeae:	1ad3      	subs	r3, r2, r3
 800eeb0:	647b      	str	r3, [r7, #68]	; 0x44
      if (input_diff >= diff_min) {
 800eeb2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800eeb4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800eeb6:	429a      	cmp	r2, r3
 800eeb8:	db50      	blt.n	800ef5c <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x208>
            MultiplyByQuantizedMultiplierGreaterThanOne(
 800eeba:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800eebc:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800eebe:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800eec0:	f7ff fa46 	bl	800e350 <_ZN6tflite43MultiplyByQuantizedMultiplierGreaterThanOneElli>
 800eec4:	6438      	str	r0, [r7, #64]	; 0x40
            FixedPointScaledDiff::FromRaw(input_diff_rescaled);
 800eec6:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800eec8:	f7fe fa70 	bl	800d3ac <_ZN8gemmlowp10FixedPointIlLi5EE7FromRawEl>
 800eecc:	4603      	mov	r3, r0
 800eece:	61bb      	str	r3, [r7, #24]
        FixedPoint0 exp_in_0 = exp_on_negative_values(scaled_diff_f8);
 800eed0:	69b8      	ldr	r0, [r7, #24]
 800eed2:	f7fe fa7d 	bl	800d3d0 <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE>
 800eed6:	4603      	mov	r3, r0
 800eed8:	617b      	str	r3, [r7, #20]
            (shifted_scale * exp_in_0).raw(),
 800eeda:	6979      	ldr	r1, [r7, #20]
 800eedc:	6a38      	ldr	r0, [r7, #32]
 800eede:	f7fe fdf5 	bl	800dacc <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 800eee2:	4603      	mov	r3, r0
 800eee4:	633b      	str	r3, [r7, #48]	; 0x30
 800eee6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800eeea:	4618      	mov	r0, r3
 800eeec:	f7fe f8dc 	bl	800d0a8 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 800eef0:	4603      	mov	r3, r0
        int32_t unsat_output = gemmlowp::RoundingDivideByPOT(
 800eef2:	681b      	ldr	r3, [r3, #0]
            num_bits_over_unit + 31 - (sizeof(OutputT) * 8));
 800eef4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800eef6:	3217      	adds	r2, #23
        int32_t unsat_output = gemmlowp::RoundingDivideByPOT(
 800eef8:	4611      	mov	r1, r2
 800eefa:	4618      	mov	r0, r3
 800eefc:	f7fc f946 	bl	800b18c <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i>
 800ef00:	63f8      	str	r0, [r7, #60]	; 0x3c
            static_cast<int32_t>(std::numeric_limits<OutputT>::min());
 800ef02:	f7f6 ffda 	bl	8005eba <_ZNSt14numeric_limitsIaE3minEv>
 800ef06:	4603      	mov	r3, r0
 800ef08:	461a      	mov	r2, r3
            unsat_output +
 800ef0a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ef0c:	4413      	add	r3, r2
        const int32_t shifted_output =
 800ef0e:	613b      	str	r3, [r7, #16]
                     static_cast<int32_t>(std::numeric_limits<OutputT>::max())),
 800ef10:	f7f6 ffdc 	bl	8005ecc <_ZNSt14numeric_limitsIaE3maxEv>
 800ef14:	4603      	mov	r3, r0
 800ef16:	637b      	str	r3, [r7, #52]	; 0x34
            static_cast<int32_t>(std::numeric_limits<OutputT>::min())));
 800ef18:	f107 0234 	add.w	r2, r7, #52	; 0x34
 800ef1c:	f107 0310 	add.w	r3, r7, #16
 800ef20:	4611      	mov	r1, r2
 800ef22:	4618      	mov	r0, r3
 800ef24:	f7f7 fc9e 	bl	8006864 <_ZSt3minIlERKT_S2_S2_>
 800ef28:	4604      	mov	r4, r0
 800ef2a:	f7f6 ffc6 	bl	8005eba <_ZNSt14numeric_limitsIaE3minEv>
 800ef2e:	4603      	mov	r3, r0
 800ef30:	63bb      	str	r3, [r7, #56]	; 0x38
 800ef32:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800ef36:	4619      	mov	r1, r3
 800ef38:	4620      	mov	r0, r4
 800ef3a:	f7f7 fca7 	bl	800688c <_ZSt3maxIlERKT_S2_S2_>
 800ef3e:	4603      	mov	r3, r0
        output_data[i * depth + c] = static_cast<OutputT>(std::max(
 800ef40:	6819      	ldr	r1, [r3, #0]
 800ef42:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800ef44:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800ef46:	fb02 f203 	mul.w	r2, r2, r3
 800ef4a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800ef4c:	4413      	add	r3, r2
 800ef4e:	461a      	mov	r2, r3
 800ef50:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800ef54:	4413      	add	r3, r2
 800ef56:	b24a      	sxtb	r2, r1
 800ef58:	701a      	strb	r2, [r3, #0]
 800ef5a:	e00d      	b.n	800ef78 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x224>
        output_data[i * depth + c] = std::numeric_limits<OutputT>::min();
 800ef5c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800ef5e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800ef60:	fb02 f203 	mul.w	r2, r2, r3
 800ef64:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800ef66:	4413      	add	r3, r2
 800ef68:	461a      	mov	r2, r3
 800ef6a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800ef6e:	189c      	adds	r4, r3, r2
 800ef70:	f7f6 ffa3 	bl	8005eba <_ZNSt14numeric_limitsIaE3minEv>
 800ef74:	4603      	mov	r3, r0
 800ef76:	7023      	strb	r3, [r4, #0]
    for (int c = 0; c < depth; ++c) {
 800ef78:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800ef7a:	3301      	adds	r3, #1
 800ef7c:	66bb      	str	r3, [r7, #104]	; 0x68
 800ef7e:	e784      	b.n	800ee8a <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x136>
  for (int i = 0; i < outer_size; ++i) {
 800ef80:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800ef82:	3301      	adds	r3, #1
 800ef84:	677b      	str	r3, [r7, #116]	; 0x74
 800ef86:	e70a      	b.n	800ed9e <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x4a>
}
 800ef88:	bf00      	nop
 800ef8a:	377c      	adds	r7, #124	; 0x7c
 800ef8c:	46bd      	mov	sp, r7
 800ef8e:	bd90      	pop	{r4, r7, pc}

0800ef90 <_ZN8gemmlowp10FixedPointIlLi12EE4ZeroEv>:
  static FixedPoint Zero() { return FromScalarRaw(0); }
 800ef90:	b580      	push	{r7, lr}
 800ef92:	af00      	add	r7, sp, #0
 800ef94:	2000      	movs	r0, #0
 800ef96:	f000 f803 	bl	800efa0 <_ZN8gemmlowp10FixedPointIlLi12EE13FromScalarRawEl>
 800ef9a:	4603      	mov	r3, r0
 800ef9c:	4618      	mov	r0, r3
 800ef9e:	bd80      	pop	{r7, pc}

0800efa0 <_ZN8gemmlowp10FixedPointIlLi12EE13FromScalarRawEl>:
  static FixedPoint FromScalarRaw(ScalarRawType x) {
 800efa0:	b590      	push	{r4, r7, lr}
 800efa2:	b085      	sub	sp, #20
 800efa4:	af00      	add	r7, sp, #0
 800efa6:	6078      	str	r0, [r7, #4]
    retval.raw() = Dup<RawType>(x);
 800efa8:	f107 030c 	add.w	r3, r7, #12
 800efac:	4618      	mov	r0, r3
 800efae:	f7fe fde2 	bl	800db76 <_ZN8gemmlowp10FixedPointIlLi12EE3rawEv>
 800efb2:	4604      	mov	r4, r0
 800efb4:	6878      	ldr	r0, [r7, #4]
 800efb6:	f7fc f95d 	bl	800b274 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 800efba:	4603      	mov	r3, r0
 800efbc:	6023      	str	r3, [r4, #0]
    return retval;
 800efbe:	68fb      	ldr	r3, [r7, #12]
  }
 800efc0:	4618      	mov	r0, r3
 800efc2:	3714      	adds	r7, #20
 800efc4:	46bd      	mov	sp, r7
 800efc6:	bd90      	pop	{r4, r7, pc}

0800efc8 <_ZN6tflite7gen_lutEPFffEffPsi>:
                    const int num) {
 800efc8:	b580      	push	{r7, lr}
 800efca:	ed2d 8b02 	vpush	{d8}
 800efce:	b094      	sub	sp, #80	; 0x50
 800efd0:	af00      	add	r7, sp, #0
 800efd2:	6178      	str	r0, [r7, #20]
 800efd4:	ed87 0a04 	vstr	s0, [r7, #16]
 800efd8:	edc7 0a03 	vstr	s1, [r7, #12]
 800efdc:	60b9      	str	r1, [r7, #8]
 800efde:	607a      	str	r2, [r7, #4]
  float step = (max - min) / (num - 1);
 800efe0:	ed97 7a03 	vldr	s14, [r7, #12]
 800efe4:	edd7 7a04 	vldr	s15, [r7, #16]
 800efe8:	ee77 6a67 	vsub.f32	s13, s14, s15
 800efec:	687b      	ldr	r3, [r7, #4]
 800efee:	3b01      	subs	r3, #1
 800eff0:	ee07 3a90 	vmov	s15, r3
 800eff4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800eff8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800effc:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
  float half_step = step / 2.0f;
 800f000:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 800f004:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800f008:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800f00c:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
  for (int i = 0; i < num - 1; i++) {
 800f010:	2300      	movs	r3, #0
 800f012:	64fb      	str	r3, [r7, #76]	; 0x4c
 800f014:	687b      	ldr	r3, [r7, #4]
 800f016:	3b01      	subs	r3, #1
 800f018:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800f01a:	429a      	cmp	r2, r3
 800f01c:	f280 80c0 	bge.w	800f1a0 <_ZN6tflite7gen_lutEPFffEffPsi+0x1d8>
    float sample_val = TfLiteRound(func(min + i * step) * 32768.0f);
 800f020:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f022:	ee07 3a90 	vmov	s15, r3
 800f026:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800f02a:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 800f02e:	ee27 7a27 	vmul.f32	s14, s14, s15
 800f032:	edd7 7a04 	vldr	s15, [r7, #16]
 800f036:	ee77 7a27 	vadd.f32	s15, s14, s15
 800f03a:	697b      	ldr	r3, [r7, #20]
 800f03c:	eeb0 0a67 	vmov.f32	s0, s15
 800f040:	4798      	blx	r3
 800f042:	eef0 7a40 	vmov.f32	s15, s0
 800f046:	ed9f 7a74 	vldr	s14, [pc, #464]	; 800f218 <_ZN6tflite7gen_lutEPFffEffPsi+0x250>
 800f04a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800f04e:	eeb0 0a67 	vmov.f32	s0, s15
 800f052:	f7f6 ff22 	bl	8005e9a <_ZN6tflite11TfLiteRoundIfEET_S1_>
 800f056:	ed87 0a10 	vstr	s0, [r7, #64]	; 0x40
        TfLiteRound((func(min + (i + 1) * step) * 32768.0f +
 800f05a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f05c:	3301      	adds	r3, #1
 800f05e:	ee07 3a90 	vmov	s15, r3
 800f062:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800f066:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 800f06a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800f06e:	edd7 7a04 	vldr	s15, [r7, #16]
 800f072:	ee77 7a27 	vadd.f32	s15, s14, s15
 800f076:	697b      	ldr	r3, [r7, #20]
 800f078:	eeb0 0a67 	vmov.f32	s0, s15
 800f07c:	4798      	blx	r3
 800f07e:	eef0 7a40 	vmov.f32	s15, s0
 800f082:	ed9f 7a65 	vldr	s14, [pc, #404]	; 800f218 <_ZN6tflite7gen_lutEPFffEffPsi+0x250>
 800f086:	ee27 8a87 	vmul.f32	s16, s15, s14
                     TfLiteRound(func(min + i * step) * 32768.0f)) /
 800f08a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f08c:	ee07 3a90 	vmov	s15, r3
 800f090:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800f094:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 800f098:	ee27 7a27 	vmul.f32	s14, s14, s15
 800f09c:	edd7 7a04 	vldr	s15, [r7, #16]
 800f0a0:	ee77 7a27 	vadd.f32	s15, s14, s15
 800f0a4:	697b      	ldr	r3, [r7, #20]
 800f0a6:	eeb0 0a67 	vmov.f32	s0, s15
 800f0aa:	4798      	blx	r3
 800f0ac:	eef0 7a40 	vmov.f32	s15, s0
 800f0b0:	ed9f 7a59 	vldr	s14, [pc, #356]	; 800f218 <_ZN6tflite7gen_lutEPFffEffPsi+0x250>
 800f0b4:	ee67 7a87 	vmul.f32	s15, s15, s14
 800f0b8:	eeb0 0a67 	vmov.f32	s0, s15
 800f0bc:	f7f6 feed 	bl	8005e9a <_ZN6tflite11TfLiteRoundIfEET_S1_>
 800f0c0:	eef0 7a40 	vmov.f32	s15, s0
        TfLiteRound((func(min + (i + 1) * step) * 32768.0f +
 800f0c4:	ee78 7a27 	vadd.f32	s15, s16, s15
 800f0c8:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800f0cc:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800f0d0:	eeb0 0a47 	vmov.f32	s0, s14
 800f0d4:	f7f6 fee1 	bl	8005e9a <_ZN6tflite11TfLiteRoundIfEET_S1_>
 800f0d8:	ed87 0a0f 	vstr	s0, [r7, #60]	; 0x3c
        TfLiteRound(func(min + i * step + half_step) * 32768.0f);
 800f0dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f0de:	ee07 3a90 	vmov	s15, r3
 800f0e2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800f0e6:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 800f0ea:	ee27 7a27 	vmul.f32	s14, s14, s15
 800f0ee:	edd7 7a04 	vldr	s15, [r7, #16]
 800f0f2:	ee37 7a27 	vadd.f32	s14, s14, s15
 800f0f6:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800f0fa:	ee77 7a27 	vadd.f32	s15, s14, s15
 800f0fe:	697b      	ldr	r3, [r7, #20]
 800f100:	eeb0 0a67 	vmov.f32	s0, s15
 800f104:	4798      	blx	r3
 800f106:	eef0 7a40 	vmov.f32	s15, s0
 800f10a:	ed9f 7a43 	vldr	s14, [pc, #268]	; 800f218 <_ZN6tflite7gen_lutEPFffEffPsi+0x250>
 800f10e:	ee67 7a87 	vmul.f32	s15, s15, s14
 800f112:	eeb0 0a67 	vmov.f32	s0, s15
 800f116:	f7f6 fec0 	bl	8005e9a <_ZN6tflite11TfLiteRoundIfEET_S1_>
 800f11a:	ed87 0a0e 	vstr	s0, [r7, #56]	; 0x38
    float midpoint_err = midpoint_interp_val - midpoint_val;
 800f11e:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 800f122:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 800f126:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f12a:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
    float bias = TfLiteRound(midpoint_err / 2.0f);
 800f12e:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800f132:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800f136:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800f13a:	eeb0 0a47 	vmov.f32	s0, s14
 800f13e:	f7f6 feac 	bl	8005e9a <_ZN6tflite11TfLiteRoundIfEET_S1_>
 800f142:	ed87 0a0c 	vstr	s0, [r7, #48]	; 0x30
    table[i] = std::min<float>(std::max<float>(sample_val - bias, -32768.0f),
 800f146:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 800f14a:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800f14e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f152:	edc7 7a06 	vstr	s15, [r7, #24]
 800f156:	f04f 4347 	mov.w	r3, #3338665984	; 0xc7000000
 800f15a:	61fb      	str	r3, [r7, #28]
                               32767.0f);
 800f15c:	f107 021c 	add.w	r2, r7, #28
 800f160:	f107 0318 	add.w	r3, r7, #24
 800f164:	4611      	mov	r1, r2
 800f166:	4618      	mov	r0, r3
 800f168:	f7f6 fe6a 	bl	8005e40 <_ZSt3maxIfERKT_S2_S2_>
 800f16c:	4602      	mov	r2, r0
 800f16e:	4b2b      	ldr	r3, [pc, #172]	; (800f21c <_ZN6tflite7gen_lutEPFffEffPsi+0x254>)
 800f170:	623b      	str	r3, [r7, #32]
 800f172:	f107 0320 	add.w	r3, r7, #32
 800f176:	4619      	mov	r1, r3
 800f178:	4610      	mov	r0, r2
 800f17a:	f7f6 fe48 	bl	8005e0e <_ZSt3minIfERKT_S2_S2_>
 800f17e:	4603      	mov	r3, r0
    table[i] = std::min<float>(std::max<float>(sample_val - bias, -32768.0f),
 800f180:	edd3 7a00 	vldr	s15, [r3]
 800f184:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f186:	005b      	lsls	r3, r3, #1
 800f188:	68ba      	ldr	r2, [r7, #8]
 800f18a:	4413      	add	r3, r2
 800f18c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800f190:	ee17 2a90 	vmov	r2, s15
 800f194:	b212      	sxth	r2, r2
 800f196:	801a      	strh	r2, [r3, #0]
  for (int i = 0; i < num - 1; i++) {
 800f198:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f19a:	3301      	adds	r3, #1
 800f19c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800f19e:	e739      	b.n	800f014 <_ZN6tflite7gen_lutEPFffEffPsi+0x4c>
      std::max<float>(TfLiteRound(func(max) * 32768.0f), -32768.0f), 32767.0f);
 800f1a0:	697b      	ldr	r3, [r7, #20]
 800f1a2:	ed97 0a03 	vldr	s0, [r7, #12]
 800f1a6:	4798      	blx	r3
 800f1a8:	eef0 7a40 	vmov.f32	s15, s0
 800f1ac:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 800f218 <_ZN6tflite7gen_lutEPFffEffPsi+0x250>
 800f1b0:	ee67 7a87 	vmul.f32	s15, s15, s14
 800f1b4:	eeb0 0a67 	vmov.f32	s0, s15
 800f1b8:	f7f6 fe6f 	bl	8005e9a <_ZN6tflite11TfLiteRoundIfEET_S1_>
 800f1bc:	eef0 7a40 	vmov.f32	s15, s0
 800f1c0:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
 800f1c4:	f04f 4347 	mov.w	r3, #3338665984	; 0xc7000000
 800f1c8:	62bb      	str	r3, [r7, #40]	; 0x28
 800f1ca:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800f1ce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f1d2:	4611      	mov	r1, r2
 800f1d4:	4618      	mov	r0, r3
 800f1d6:	f7f6 fe33 	bl	8005e40 <_ZSt3maxIfERKT_S2_S2_>
 800f1da:	4602      	mov	r2, r0
 800f1dc:	4b0f      	ldr	r3, [pc, #60]	; (800f21c <_ZN6tflite7gen_lutEPFffEffPsi+0x254>)
 800f1de:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f1e0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800f1e4:	4619      	mov	r1, r3
 800f1e6:	4610      	mov	r0, r2
 800f1e8:	f7f6 fe11 	bl	8005e0e <_ZSt3minIfERKT_S2_S2_>
 800f1ec:	4603      	mov	r3, r0
  table[num - 1] = std::min<float>(
 800f1ee:	edd3 7a00 	vldr	s15, [r3]
 800f1f2:	687b      	ldr	r3, [r7, #4]
 800f1f4:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800f1f8:	3b01      	subs	r3, #1
 800f1fa:	005b      	lsls	r3, r3, #1
 800f1fc:	68ba      	ldr	r2, [r7, #8]
 800f1fe:	4413      	add	r3, r2
 800f200:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800f204:	ee17 2a90 	vmov	r2, s15
 800f208:	b212      	sxth	r2, r2
 800f20a:	801a      	strh	r2, [r3, #0]
}
 800f20c:	bf00      	nop
 800f20e:	3750      	adds	r7, #80	; 0x50
 800f210:	46bd      	mov	sp, r7
 800f212:	ecbd 8b02 	vpop	{d8}
 800f216:	bd80      	pop	{r7, pc}
 800f218:	47000000 	.word	0x47000000
 800f21c:	46fffe00 	.word	0x46fffe00

0800f220 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE>:

TfLiteStatus CalculateSoftmaxParams(TfLiteContext* context,
                                    const TfLiteTensor* input,
                                    TfLiteTensor* output,
                                    const TfLiteSoftmaxParams* params,
                                    SoftmaxParams* op_data) {
 800f220:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800f224:	b090      	sub	sp, #64	; 0x40
 800f226:	af06      	add	r7, sp, #24
 800f228:	60f8      	str	r0, [r7, #12]
 800f22a:	60b9      	str	r1, [r7, #8]
 800f22c:	607a      	str	r2, [r7, #4]
 800f22e:	603b      	str	r3, [r7, #0]
  if (input->type == kTfLiteInt8 || input->type == kTfLiteInt16) {
 800f230:	68bb      	ldr	r3, [r7, #8]
 800f232:	781b      	ldrb	r3, [r3, #0]
 800f234:	2b09      	cmp	r3, #9
 800f236:	d004      	beq.n	800f242 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x22>
 800f238:	68bb      	ldr	r3, [r7, #8]
 800f23a:	781b      	ldrb	r3, [r3, #0]
 800f23c:	2b07      	cmp	r3, #7
 800f23e:	f040 81b6 	bne.w	800f5ae <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x38e>
    if (input->type == kTfLiteInt16) {
 800f242:	68bb      	ldr	r3, [r7, #8]
 800f244:	781b      	ldrb	r3, [r3, #0]
 800f246:	2b07      	cmp	r3, #7
 800f248:	d156      	bne.n	800f2f8 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0xd8>
      TF_LITE_ENSURE_EQ(context, output->params.zero_point, 0);
 800f24a:	687b      	ldr	r3, [r7, #4]
 800f24c:	691b      	ldr	r3, [r3, #16]
 800f24e:	2b00      	cmp	r3, #0
 800f250:	d011      	beq.n	800f276 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x56>
 800f252:	68fb      	ldr	r3, [r7, #12]
 800f254:	695c      	ldr	r4, [r3, #20]
 800f256:	687b      	ldr	r3, [r7, #4]
 800f258:	691b      	ldr	r3, [r3, #16]
 800f25a:	2200      	movs	r2, #0
 800f25c:	9203      	str	r2, [sp, #12]
 800f25e:	9302      	str	r3, [sp, #8]
 800f260:	4ba1      	ldr	r3, [pc, #644]	; (800f4e8 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2c8>)
 800f262:	9301      	str	r3, [sp, #4]
 800f264:	4ba1      	ldr	r3, [pc, #644]	; (800f4ec <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2cc>)
 800f266:	9300      	str	r3, [sp, #0]
 800f268:	2325      	movs	r3, #37	; 0x25
 800f26a:	4aa1      	ldr	r2, [pc, #644]	; (800f4f0 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2d0>)
 800f26c:	49a1      	ldr	r1, [pc, #644]	; (800f4f4 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2d4>)
 800f26e:	68f8      	ldr	r0, [r7, #12]
 800f270:	47a0      	blx	r4
 800f272:	2301      	movs	r3, #1
 800f274:	e1e0      	b.n	800f638 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x418>
      TF_LITE_ENSURE_NEAR(context, output->params.scale, 1.f / 32768,
 800f276:	687b      	ldr	r3, [r7, #4]
 800f278:	edd3 7a03 	vldr	s15, [r3, #12]
 800f27c:	ed9f 7a9e 	vldr	s14, [pc, #632]	; 800f4f8 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2d8>
 800f280:	eef4 7ac7 	vcmpe.f32	s15, s14
 800f284:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f288:	dd07      	ble.n	800f29a <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x7a>
 800f28a:	687b      	ldr	r3, [r7, #4]
 800f28c:	edd3 7a03 	vldr	s15, [r3, #12]
 800f290:	ed9f 7a99 	vldr	s14, [pc, #612]	; 800f4f8 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2d8>
 800f294:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800f298:	e006      	b.n	800f2a8 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x88>
 800f29a:	687b      	ldr	r3, [r7, #4]
 800f29c:	edd3 7a03 	vldr	s15, [r3, #12]
 800f2a0:	ed9f 7a95 	vldr	s14, [pc, #596]	; 800f4f8 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2d8>
 800f2a4:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f2a8:	edc7 7a08 	vstr	s15, [r7, #32]
 800f2ac:	edd7 7a08 	vldr	s15, [r7, #32]
 800f2b0:	ed9f 7a92 	vldr	s14, [pc, #584]	; 800f4fc <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2dc>
 800f2b4:	eef4 7ac7 	vcmpe.f32	s15, s14
 800f2b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f2bc:	f340 80dd 	ble.w	800f47a <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x25a>
 800f2c0:	68fb      	ldr	r3, [r7, #12]
 800f2c2:	695c      	ldr	r4, [r3, #20]
 800f2c4:	687b      	ldr	r3, [r7, #4]
 800f2c6:	68db      	ldr	r3, [r3, #12]
 800f2c8:	4618      	mov	r0, r3
 800f2ca:	f7f1 f94f 	bl	800056c <__aeabi_f2d>
 800f2ce:	4602      	mov	r2, r0
 800f2d0:	460b      	mov	r3, r1
 800f2d2:	f04f 0000 	mov.w	r0, #0
 800f2d6:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 800f2da:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800f2de:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800f2e2:	4b87      	ldr	r3, [pc, #540]	; (800f500 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2e0>)
 800f2e4:	9301      	str	r3, [sp, #4]
 800f2e6:	4b87      	ldr	r3, [pc, #540]	; (800f504 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2e4>)
 800f2e8:	9300      	str	r3, [sp, #0]
 800f2ea:	2326      	movs	r3, #38	; 0x26
 800f2ec:	4a80      	ldr	r2, [pc, #512]	; (800f4f0 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2d0>)
 800f2ee:	4986      	ldr	r1, [pc, #536]	; (800f508 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2e8>)
 800f2f0:	68f8      	ldr	r0, [r7, #12]
 800f2f2:	47a0      	blx	r4
 800f2f4:	2301      	movs	r3, #1
 800f2f6:	e19f      	b.n	800f638 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x418>
                          (0.001f * 1.f / 32768));
    } else {  // input->type == kTfLiteInt8
      TF_LITE_ENSURE_TYPES_EQ(context, input->type, kTfLiteInt8);
 800f2f8:	68bb      	ldr	r3, [r7, #8]
 800f2fa:	781b      	ldrb	r3, [r3, #0]
 800f2fc:	2b09      	cmp	r3, #9
 800f2fe:	d018      	beq.n	800f332 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x112>
 800f300:	68fb      	ldr	r3, [r7, #12]
 800f302:	695c      	ldr	r4, [r3, #20]
 800f304:	68bb      	ldr	r3, [r7, #8]
 800f306:	781b      	ldrb	r3, [r3, #0]
 800f308:	4618      	mov	r0, r3
 800f30a:	f7f4 fc09 	bl	8003b20 <TfLiteTypeGetName>
 800f30e:	4605      	mov	r5, r0
 800f310:	2009      	movs	r0, #9
 800f312:	f7f4 fc05 	bl	8003b20 <TfLiteTypeGetName>
 800f316:	4603      	mov	r3, r0
 800f318:	9303      	str	r3, [sp, #12]
 800f31a:	9502      	str	r5, [sp, #8]
 800f31c:	4b7b      	ldr	r3, [pc, #492]	; (800f50c <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2ec>)
 800f31e:	9301      	str	r3, [sp, #4]
 800f320:	4b7b      	ldr	r3, [pc, #492]	; (800f510 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2f0>)
 800f322:	9300      	str	r3, [sp, #0]
 800f324:	2329      	movs	r3, #41	; 0x29
 800f326:	4a72      	ldr	r2, [pc, #456]	; (800f4f0 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2d0>)
 800f328:	497a      	ldr	r1, [pc, #488]	; (800f514 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2f4>)
 800f32a:	68f8      	ldr	r0, [r7, #12]
 800f32c:	47a0      	blx	r4
 800f32e:	2301      	movs	r3, #1
 800f330:	e182      	b.n	800f638 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x418>
      if (output->type == kTfLiteInt16) {
 800f332:	687b      	ldr	r3, [r7, #4]
 800f334:	781b      	ldrb	r3, [r3, #0]
 800f336:	2b07      	cmp	r3, #7
 800f338:	d155      	bne.n	800f3e6 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x1c6>
        TF_LITE_ENSURE_EQ(context, output->params.zero_point, -32768);
 800f33a:	687b      	ldr	r3, [r7, #4]
 800f33c:	691b      	ldr	r3, [r3, #16]
 800f33e:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 800f342:	d011      	beq.n	800f368 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x148>
 800f344:	68fb      	ldr	r3, [r7, #12]
 800f346:	695c      	ldr	r4, [r3, #20]
 800f348:	687b      	ldr	r3, [r7, #4]
 800f34a:	691b      	ldr	r3, [r3, #16]
 800f34c:	4a72      	ldr	r2, [pc, #456]	; (800f518 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2f8>)
 800f34e:	9203      	str	r2, [sp, #12]
 800f350:	9302      	str	r3, [sp, #8]
 800f352:	4b72      	ldr	r3, [pc, #456]	; (800f51c <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2fc>)
 800f354:	9301      	str	r3, [sp, #4]
 800f356:	4b65      	ldr	r3, [pc, #404]	; (800f4ec <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2cc>)
 800f358:	9300      	str	r3, [sp, #0]
 800f35a:	232b      	movs	r3, #43	; 0x2b
 800f35c:	4a64      	ldr	r2, [pc, #400]	; (800f4f0 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2d0>)
 800f35e:	4965      	ldr	r1, [pc, #404]	; (800f4f4 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2d4>)
 800f360:	68f8      	ldr	r0, [r7, #12]
 800f362:	47a0      	blx	r4
 800f364:	2301      	movs	r3, #1
 800f366:	e167      	b.n	800f638 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x418>
        TF_LITE_ENSURE_NEAR(context, output->params.scale, 1.f / 65536,
 800f368:	687b      	ldr	r3, [r7, #4]
 800f36a:	edd3 7a03 	vldr	s15, [r3, #12]
 800f36e:	ed9f 7a6c 	vldr	s14, [pc, #432]	; 800f520 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x300>
 800f372:	eef4 7ac7 	vcmpe.f32	s15, s14
 800f376:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f37a:	dd07      	ble.n	800f38c <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x16c>
 800f37c:	687b      	ldr	r3, [r7, #4]
 800f37e:	edd3 7a03 	vldr	s15, [r3, #12]
 800f382:	ed9f 7a67 	vldr	s14, [pc, #412]	; 800f520 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x300>
 800f386:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800f38a:	e006      	b.n	800f39a <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x17a>
 800f38c:	687b      	ldr	r3, [r7, #4]
 800f38e:	edd3 7a03 	vldr	s15, [r3, #12]
 800f392:	ed9f 7a63 	vldr	s14, [pc, #396]	; 800f520 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x300>
 800f396:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f39a:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
 800f39e:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800f3a2:	ed9f 7a60 	vldr	s14, [pc, #384]	; 800f524 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x304>
 800f3a6:	eef4 7ac7 	vcmpe.f32	s15, s14
 800f3aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f3ae:	dd64      	ble.n	800f47a <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x25a>
 800f3b0:	68fb      	ldr	r3, [r7, #12]
 800f3b2:	695c      	ldr	r4, [r3, #20]
 800f3b4:	687b      	ldr	r3, [r7, #4]
 800f3b6:	68db      	ldr	r3, [r3, #12]
 800f3b8:	4618      	mov	r0, r3
 800f3ba:	f7f1 f8d7 	bl	800056c <__aeabi_f2d>
 800f3be:	4602      	mov	r2, r0
 800f3c0:	460b      	mov	r3, r1
 800f3c2:	f04f 0000 	mov.w	r0, #0
 800f3c6:	4958      	ldr	r1, [pc, #352]	; (800f528 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x308>)
 800f3c8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800f3cc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800f3d0:	4b56      	ldr	r3, [pc, #344]	; (800f52c <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x30c>)
 800f3d2:	9301      	str	r3, [sp, #4]
 800f3d4:	4b4b      	ldr	r3, [pc, #300]	; (800f504 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2e4>)
 800f3d6:	9300      	str	r3, [sp, #0]
 800f3d8:	232c      	movs	r3, #44	; 0x2c
 800f3da:	4a45      	ldr	r2, [pc, #276]	; (800f4f0 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2d0>)
 800f3dc:	494a      	ldr	r1, [pc, #296]	; (800f508 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2e8>)
 800f3de:	68f8      	ldr	r0, [r7, #12]
 800f3e0:	47a0      	blx	r4
 800f3e2:	2301      	movs	r3, #1
 800f3e4:	e128      	b.n	800f638 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x418>
                            (0.001f * 1.f / 65536));
      } else {  // output->type == kTfLiteint8
        TF_LITE_ENSURE_TYPES_EQ(context, output->type, kTfLiteInt8);
 800f3e6:	687b      	ldr	r3, [r7, #4]
 800f3e8:	781b      	ldrb	r3, [r3, #0]
 800f3ea:	2b09      	cmp	r3, #9
 800f3ec:	d018      	beq.n	800f420 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x200>
 800f3ee:	68fb      	ldr	r3, [r7, #12]
 800f3f0:	695c      	ldr	r4, [r3, #20]
 800f3f2:	687b      	ldr	r3, [r7, #4]
 800f3f4:	781b      	ldrb	r3, [r3, #0]
 800f3f6:	4618      	mov	r0, r3
 800f3f8:	f7f4 fb92 	bl	8003b20 <TfLiteTypeGetName>
 800f3fc:	4605      	mov	r5, r0
 800f3fe:	2009      	movs	r0, #9
 800f400:	f7f4 fb8e 	bl	8003b20 <TfLiteTypeGetName>
 800f404:	4603      	mov	r3, r0
 800f406:	9303      	str	r3, [sp, #12]
 800f408:	9502      	str	r5, [sp, #8]
 800f40a:	4b40      	ldr	r3, [pc, #256]	; (800f50c <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2ec>)
 800f40c:	9301      	str	r3, [sp, #4]
 800f40e:	4b48      	ldr	r3, [pc, #288]	; (800f530 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x310>)
 800f410:	9300      	str	r3, [sp, #0]
 800f412:	232f      	movs	r3, #47	; 0x2f
 800f414:	4a36      	ldr	r2, [pc, #216]	; (800f4f0 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2d0>)
 800f416:	493f      	ldr	r1, [pc, #252]	; (800f514 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2f4>)
 800f418:	68f8      	ldr	r0, [r7, #12]
 800f41a:	47a0      	blx	r4
 800f41c:	2301      	movs	r3, #1
 800f41e:	e10b      	b.n	800f638 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x418>
        TF_LITE_ENSURE_EQ(context, output->params.zero_point, -128);
 800f420:	687b      	ldr	r3, [r7, #4]
 800f422:	691b      	ldr	r3, [r3, #16]
 800f424:	f113 0f80 	cmn.w	r3, #128	; 0x80
 800f428:	d012      	beq.n	800f450 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x230>
 800f42a:	68fb      	ldr	r3, [r7, #12]
 800f42c:	695c      	ldr	r4, [r3, #20]
 800f42e:	687b      	ldr	r3, [r7, #4]
 800f430:	691b      	ldr	r3, [r3, #16]
 800f432:	f06f 027f 	mvn.w	r2, #127	; 0x7f
 800f436:	9203      	str	r2, [sp, #12]
 800f438:	9302      	str	r3, [sp, #8]
 800f43a:	4b3e      	ldr	r3, [pc, #248]	; (800f534 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x314>)
 800f43c:	9301      	str	r3, [sp, #4]
 800f43e:	4b2b      	ldr	r3, [pc, #172]	; (800f4ec <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2cc>)
 800f440:	9300      	str	r3, [sp, #0]
 800f442:	2330      	movs	r3, #48	; 0x30
 800f444:	4a2a      	ldr	r2, [pc, #168]	; (800f4f0 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2d0>)
 800f446:	492b      	ldr	r1, [pc, #172]	; (800f4f4 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2d4>)
 800f448:	68f8      	ldr	r0, [r7, #12]
 800f44a:	47a0      	blx	r4
 800f44c:	2301      	movs	r3, #1
 800f44e:	e0f3      	b.n	800f638 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x418>
        TF_LITE_ENSURE(context, output->params.scale == 1.f / 256);
 800f450:	687b      	ldr	r3, [r7, #4]
 800f452:	edd3 7a03 	vldr	s15, [r3, #12]
 800f456:	ed9f 7a38 	vldr	s14, [pc, #224]	; 800f538 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x318>
 800f45a:	eef4 7a47 	vcmp.f32	s15, s14
 800f45e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f462:	d00a      	beq.n	800f47a <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x25a>
 800f464:	68fb      	ldr	r3, [r7, #12]
 800f466:	695c      	ldr	r4, [r3, #20]
 800f468:	4b34      	ldr	r3, [pc, #208]	; (800f53c <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x31c>)
 800f46a:	9300      	str	r3, [sp, #0]
 800f46c:	2331      	movs	r3, #49	; 0x31
 800f46e:	4a20      	ldr	r2, [pc, #128]	; (800f4f0 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2d0>)
 800f470:	4933      	ldr	r1, [pc, #204]	; (800f540 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x320>)
 800f472:	68f8      	ldr	r0, [r7, #12]
 800f474:	47a0      	blx	r4
 800f476:	2301      	movs	r3, #1
 800f478:	e0de      	b.n	800f638 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x418>
    }

    static const int kScaledDiffIntegerBits = 5;

    // Calculate input_multiplier and input_left_shift
    if (input->type == kTfLiteInt16) {
 800f47a:	68bb      	ldr	r3, [r7, #8]
 800f47c:	781b      	ldrb	r3, [r3, #0]
 800f47e:	2b07      	cmp	r3, #7
 800f480:	d160      	bne.n	800f544 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x324>
      int input_left_shift;
      double input_scale_beta_rescale =
          static_cast<double>(input->params.scale) *
 800f482:	68bb      	ldr	r3, [r7, #8]
 800f484:	68db      	ldr	r3, [r3, #12]
 800f486:	4618      	mov	r0, r3
 800f488:	f7f1 f870 	bl	800056c <__aeabi_f2d>
 800f48c:	4604      	mov	r4, r0
 800f48e:	460d      	mov	r5, r1
          static_cast<double>(params->beta) /
 800f490:	683b      	ldr	r3, [r7, #0]
 800f492:	681b      	ldr	r3, [r3, #0]
 800f494:	4618      	mov	r0, r3
 800f496:	f7f1 f869 	bl	800056c <__aeabi_f2d>
 800f49a:	4602      	mov	r2, r0
 800f49c:	460b      	mov	r3, r1
          static_cast<double>(input->params.scale) *
 800f49e:	4620      	mov	r0, r4
 800f4a0:	4629      	mov	r1, r5
 800f4a2:	f7f1 f8bb 	bl	800061c <__aeabi_dmul>
 800f4a6:	4602      	mov	r2, r0
 800f4a8:	460b      	mov	r3, r1
 800f4aa:	4610      	mov	r0, r2
 800f4ac:	4619      	mov	r1, r3
      double input_scale_beta_rescale =
 800f4ae:	a30c      	add	r3, pc, #48	; (adr r3, 800f4e0 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2c0>)
 800f4b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f4b4:	f7f1 f9dc 	bl	8000870 <__aeabi_ddiv>
 800f4b8:	4602      	mov	r2, r0
 800f4ba:	460b      	mov	r3, r1
 800f4bc:	e9c7 2306 	strd	r2, r3, [r7, #24]
          (10.0 / 65535.0);  // scale the input_diff such that [-65535, 0]
                             // correspond to [-10.0, 0.0]
      QuantizeMultiplier(input_scale_beta_rescale, &op_data->input_multiplier,
 800f4c0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f4c2:	3308      	adds	r3, #8
 800f4c4:	f107 0214 	add.w	r2, r7, #20
 800f4c8:	4611      	mov	r1, r2
 800f4ca:	4618      	mov	r0, r3
 800f4cc:	ed97 0b06 	vldr	d0, [r7, #24]
 800f4d0:	f7f6 fb26 	bl	8005b20 <_ZN6tflite18QuantizeMultiplierEdPlPi>
                         &input_left_shift);
      op_data->input_left_shift = input_left_shift;
 800f4d4:	697a      	ldr	r2, [r7, #20]
 800f4d6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f4d8:	60da      	str	r2, [r3, #12]
          &op_data->input_multiplier, &input_left_shift);
      op_data->input_left_shift = input_left_shift;
      op_data->diff_min =
          -1.0 * tflite::CalculateInputRadius(kScaledDiffIntegerBits,
                                              op_data->input_left_shift);
    }
 800f4da:	e0ac      	b.n	800f636 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x416>
 800f4dc:	f3af 8000 	nop.w
 800f4e0:	00140014 	.word	0x00140014
 800f4e4:	3f240014 	.word	0x3f240014
 800f4e8:	08017fd0 	.word	0x08017fd0
 800f4ec:	08017fd4 	.word	0x08017fd4
 800f4f0:	08017f70 	.word	0x08017f70
 800f4f4:	08017fb4 	.word	0x08017fb4
 800f4f8:	38000000 	.word	0x38000000
 800f4fc:	3303126f 	.word	0x3303126f
 800f500:	08018010 	.word	0x08018010
 800f504:	0801801c 	.word	0x0801801c
 800f508:	08017ff0 	.word	0x08017ff0
 800f50c:	08018050 	.word	0x08018050
 800f510:	0801805c 	.word	0x0801805c
 800f514:	08018034 	.word	0x08018034
 800f518:	ffff8000 	.word	0xffff8000
 800f51c:	08018068 	.word	0x08018068
 800f520:	37800000 	.word	0x37800000
 800f524:	3283126f 	.word	0x3283126f
 800f528:	3ef00000 	.word	0x3ef00000
 800f52c:	08018070 	.word	0x08018070
 800f530:	0801807c 	.word	0x0801807c
 800f534:	0801808c 	.word	0x0801808c
 800f538:	3b800000 	.word	0x3b800000
 800f53c:	080180ac 	.word	0x080180ac
 800f540:	08018094 	.word	0x08018094
          static_cast<double>(params->beta),
 800f544:	683b      	ldr	r3, [r7, #0]
 800f546:	681b      	ldr	r3, [r3, #0]
      tflite::PreprocessSoftmaxScaling(
 800f548:	4618      	mov	r0, r3
 800f54a:	f7f1 f80f 	bl	800056c <__aeabi_f2d>
 800f54e:	4680      	mov	r8, r0
 800f550:	4689      	mov	r9, r1
          static_cast<double>(input->params.scale), kScaledDiffIntegerBits,
 800f552:	68bb      	ldr	r3, [r7, #8]
 800f554:	68db      	ldr	r3, [r3, #12]
      tflite::PreprocessSoftmaxScaling(
 800f556:	4618      	mov	r0, r3
 800f558:	f7f1 f808 	bl	800056c <__aeabi_f2d>
 800f55c:	4682      	mov	sl, r0
 800f55e:	468b      	mov	fp, r1
 800f560:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f562:	3308      	adds	r3, #8
 800f564:	f107 0210 	add.w	r2, r7, #16
 800f568:	4619      	mov	r1, r3
 800f56a:	2005      	movs	r0, #5
 800f56c:	ec4b ab11 	vmov	d1, sl, fp
 800f570:	ec49 8b10 	vmov	d0, r8, r9
 800f574:	f7f6 fb9c 	bl	8005cb0 <_ZN6tflite24PreprocessSoftmaxScalingEddiPlPi>
      op_data->input_left_shift = input_left_shift;
 800f578:	693a      	ldr	r2, [r7, #16]
 800f57a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f57c:	60da      	str	r2, [r3, #12]
                                              op_data->input_left_shift);
 800f57e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f580:	68db      	ldr	r3, [r3, #12]
          -1.0 * tflite::CalculateInputRadius(kScaledDiffIntegerBits,
 800f582:	221f      	movs	r2, #31
 800f584:	4619      	mov	r1, r3
 800f586:	2005      	movs	r0, #5
 800f588:	f7f6 fbda 	bl	8005d40 <_ZN6tflite20CalculateInputRadiusEiii>
 800f58c:	4603      	mov	r3, r0
 800f58e:	4618      	mov	r0, r3
 800f590:	f7f0 ffda 	bl	8000548 <__aeabi_i2d>
 800f594:	4602      	mov	r2, r0
 800f596:	460b      	mov	r3, r1
 800f598:	4614      	mov	r4, r2
 800f59a:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
      op_data->diff_min =
 800f59e:	4620      	mov	r0, r4
 800f5a0:	4629      	mov	r1, r5
 800f5a2:	f7f1 faeb 	bl	8000b7c <__aeabi_d2iz>
 800f5a6:	4602      	mov	r2, r0
 800f5a8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f5aa:	619a      	str	r2, [r3, #24]
    }
 800f5ac:	e043      	b.n	800f636 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x416>
  } else {
    TF_LITE_ENSURE_TYPES_EQ(context, input->type, kTfLiteFloat32);
 800f5ae:	68bb      	ldr	r3, [r7, #8]
 800f5b0:	781b      	ldrb	r3, [r3, #0]
 800f5b2:	2b01      	cmp	r3, #1
 800f5b4:	d018      	beq.n	800f5e8 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x3c8>
 800f5b6:	68fb      	ldr	r3, [r7, #12]
 800f5b8:	695c      	ldr	r4, [r3, #20]
 800f5ba:	68bb      	ldr	r3, [r7, #8]
 800f5bc:	781b      	ldrb	r3, [r3, #0]
 800f5be:	4618      	mov	r0, r3
 800f5c0:	f7f4 faae 	bl	8003b20 <TfLiteTypeGetName>
 800f5c4:	4605      	mov	r5, r0
 800f5c6:	2001      	movs	r0, #1
 800f5c8:	f7f4 faaa 	bl	8003b20 <TfLiteTypeGetName>
 800f5cc:	4603      	mov	r3, r0
 800f5ce:	9303      	str	r3, [sp, #12]
 800f5d0:	9502      	str	r5, [sp, #8]
 800f5d2:	4b1c      	ldr	r3, [pc, #112]	; (800f644 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x424>)
 800f5d4:	9301      	str	r3, [sp, #4]
 800f5d6:	4b1c      	ldr	r3, [pc, #112]	; (800f648 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x428>)
 800f5d8:	9300      	str	r3, [sp, #0]
 800f5da:	234e      	movs	r3, #78	; 0x4e
 800f5dc:	4a1b      	ldr	r2, [pc, #108]	; (800f64c <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x42c>)
 800f5de:	491c      	ldr	r1, [pc, #112]	; (800f650 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x430>)
 800f5e0:	68f8      	ldr	r0, [r7, #12]
 800f5e2:	47a0      	blx	r4
 800f5e4:	2301      	movs	r3, #1
 800f5e6:	e027      	b.n	800f638 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x418>
    TF_LITE_ENSURE_TYPES_EQ(context, output->type, kTfLiteFloat32);
 800f5e8:	687b      	ldr	r3, [r7, #4]
 800f5ea:	781b      	ldrb	r3, [r3, #0]
 800f5ec:	2b01      	cmp	r3, #1
 800f5ee:	d018      	beq.n	800f622 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x402>
 800f5f0:	68fb      	ldr	r3, [r7, #12]
 800f5f2:	695c      	ldr	r4, [r3, #20]
 800f5f4:	687b      	ldr	r3, [r7, #4]
 800f5f6:	781b      	ldrb	r3, [r3, #0]
 800f5f8:	4618      	mov	r0, r3
 800f5fa:	f7f4 fa91 	bl	8003b20 <TfLiteTypeGetName>
 800f5fe:	4605      	mov	r5, r0
 800f600:	2001      	movs	r0, #1
 800f602:	f7f4 fa8d 	bl	8003b20 <TfLiteTypeGetName>
 800f606:	4603      	mov	r3, r0
 800f608:	9303      	str	r3, [sp, #12]
 800f60a:	9502      	str	r5, [sp, #8]
 800f60c:	4b0d      	ldr	r3, [pc, #52]	; (800f644 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x424>)
 800f60e:	9301      	str	r3, [sp, #4]
 800f610:	4b10      	ldr	r3, [pc, #64]	; (800f654 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x434>)
 800f612:	9300      	str	r3, [sp, #0]
 800f614:	234f      	movs	r3, #79	; 0x4f
 800f616:	4a0d      	ldr	r2, [pc, #52]	; (800f64c <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x42c>)
 800f618:	490d      	ldr	r1, [pc, #52]	; (800f650 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x430>)
 800f61a:	68f8      	ldr	r0, [r7, #12]
 800f61c:	47a0      	blx	r4
 800f61e:	2301      	movs	r3, #1
 800f620:	e00a      	b.n	800f638 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x418>
    op_data->beta = static_cast<double>(params->beta);
 800f622:	683b      	ldr	r3, [r7, #0]
 800f624:	681b      	ldr	r3, [r3, #0]
 800f626:	4618      	mov	r0, r3
 800f628:	f7f0 ffa0 	bl	800056c <__aeabi_f2d>
 800f62c:	4602      	mov	r2, r0
 800f62e:	460b      	mov	r3, r1
 800f630:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800f632:	e9c1 2300 	strd	r2, r3, [r1]
  }
  return kTfLiteOk;
 800f636:	2300      	movs	r3, #0
}
 800f638:	4618      	mov	r0, r3
 800f63a:	3728      	adds	r7, #40	; 0x28
 800f63c:	46bd      	mov	sp, r7
 800f63e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800f642:	bf00      	nop
 800f644:	080180d0 	.word	0x080180d0
 800f648:	0801805c 	.word	0x0801805c
 800f64c:	08017f70 	.word	0x08017f70
 800f650:	08018034 	.word	0x08018034
 800f654:	0801807c 	.word	0x0801807c

0800f658 <_ZN6tflite11SoftmaxInitEP13TfLiteContextPKcj>:

}  // namespace

void* SoftmaxInit(TfLiteContext* context, const char* buffer, size_t length) {
 800f658:	b580      	push	{r7, lr}
 800f65a:	b084      	sub	sp, #16
 800f65c:	af00      	add	r7, sp, #0
 800f65e:	60f8      	str	r0, [r7, #12]
 800f660:	60b9      	str	r1, [r7, #8]
 800f662:	607a      	str	r2, [r7, #4]
  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);
 800f664:	68fb      	ldr	r3, [r7, #12]
 800f666:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f668:	2b00      	cmp	r3, #0
 800f66a:	d101      	bne.n	800f670 <_ZN6tflite11SoftmaxInitEP13TfLiteContextPKcj+0x18>
 800f66c:	f001 f897 	bl	801079e <abort>
  return context->AllocatePersistentBuffer(context, sizeof(SoftmaxParams));
 800f670:	68fb      	ldr	r3, [r7, #12]
 800f672:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f674:	2138      	movs	r1, #56	; 0x38
 800f676:	68f8      	ldr	r0, [r7, #12]
 800f678:	4798      	blx	r3
 800f67a:	4603      	mov	r3, r0
}
 800f67c:	4618      	mov	r0, r3
 800f67e:	3710      	adds	r7, #16
 800f680:	46bd      	mov	sp, r7
 800f682:	bd80      	pop	{r7, pc}

0800f684 <_ZZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNodeENKUlfE_clEf>:
  // Populate LUT if required
  if (input->type == kTfLiteInt16) {
    TF_LITE_ENSURE_EQ(context, output->params.zero_point, 0);
    // exp LUT only used on negative values
    // we consider exp(-10.0) is insignificant to accumulation
    gen_lut([](float value) { return std::exp(value); }, -10.0f, 0.0f,
 800f684:	b580      	push	{r7, lr}
 800f686:	b082      	sub	sp, #8
 800f688:	af00      	add	r7, sp, #0
 800f68a:	6078      	str	r0, [r7, #4]
 800f68c:	ed87 0a00 	vstr	s0, [r7]
 800f690:	ed97 0a00 	vldr	s0, [r7]
 800f694:	f7fd f82c 	bl	800c6f0 <_ZSt3expf>
 800f698:	eef0 7a40 	vmov.f32	s15, s0
 800f69c:	eeb0 0a67 	vmov.f32	s0, s15
 800f6a0:	3708      	adds	r7, #8
 800f6a2:	46bd      	mov	sp, r7
 800f6a4:	bd80      	pop	{r7, pc}

0800f6a6 <_ZZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNodeENUlfE_4_FUNEf>:
 800f6a6:	b580      	push	{r7, lr}
 800f6a8:	b082      	sub	sp, #8
 800f6aa:	af00      	add	r7, sp, #0
 800f6ac:	ed87 0a01 	vstr	s0, [r7, #4]
 800f6b0:	ed97 0a01 	vldr	s0, [r7, #4]
 800f6b4:	2000      	movs	r0, #0
 800f6b6:	f7ff ffe5 	bl	800f684 <_ZZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNodeENKUlfE_clEf>
 800f6ba:	eef0 7a40 	vmov.f32	s15, s0
 800f6be:	eeb0 0a67 	vmov.f32	s0, s15
 800f6c2:	3708      	adds	r7, #8
 800f6c4:	46bd      	mov	sp, r7
 800f6c6:	bd80      	pop	{r7, pc}

0800f6c8 <_ZZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNodeENKUlfE_cvPFffEEv>:
 800f6c8:	b480      	push	{r7}
 800f6ca:	b083      	sub	sp, #12
 800f6cc:	af00      	add	r7, sp, #0
 800f6ce:	6078      	str	r0, [r7, #4]
 800f6d0:	4b03      	ldr	r3, [pc, #12]	; (800f6e0 <_ZZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNodeENKUlfE_cvPFffEEv+0x18>)
 800f6d2:	4618      	mov	r0, r3
 800f6d4:	370c      	adds	r7, #12
 800f6d6:	46bd      	mov	sp, r7
 800f6d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6dc:	4770      	bx	lr
 800f6de:	bf00      	nop
 800f6e0:	0800f6a7 	.word	0x0800f6a7

0800f6e4 <_ZZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNodeENKUlfE0_clEf>:
            op_data->exp_lut, kInt16LUTArraySize);
    gen_lut([](float value) { return 1.0f / (1.0f + value); }, 0.0f, 1.0f,
 800f6e4:	b480      	push	{r7}
 800f6e6:	b083      	sub	sp, #12
 800f6e8:	af00      	add	r7, sp, #0
 800f6ea:	6078      	str	r0, [r7, #4]
 800f6ec:	ed87 0a00 	vstr	s0, [r7]
 800f6f0:	edd7 7a00 	vldr	s15, [r7]
 800f6f4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800f6f8:	ee77 7a87 	vadd.f32	s15, s15, s14
 800f6fc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800f700:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800f704:	eef0 7a66 	vmov.f32	s15, s13
 800f708:	eeb0 0a67 	vmov.f32	s0, s15
 800f70c:	370c      	adds	r7, #12
 800f70e:	46bd      	mov	sp, r7
 800f710:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f714:	4770      	bx	lr

0800f716 <_ZZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNodeENUlfE0_4_FUNEf>:
 800f716:	b580      	push	{r7, lr}
 800f718:	b082      	sub	sp, #8
 800f71a:	af00      	add	r7, sp, #0
 800f71c:	ed87 0a01 	vstr	s0, [r7, #4]
 800f720:	ed97 0a01 	vldr	s0, [r7, #4]
 800f724:	2000      	movs	r0, #0
 800f726:	f7ff ffdd 	bl	800f6e4 <_ZZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNodeENKUlfE0_clEf>
 800f72a:	eef0 7a40 	vmov.f32	s15, s0
 800f72e:	eeb0 0a67 	vmov.f32	s0, s15
 800f732:	3708      	adds	r7, #8
 800f734:	46bd      	mov	sp, r7
 800f736:	bd80      	pop	{r7, pc}

0800f738 <_ZZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNodeENKUlfE0_cvPFffEEv>:
 800f738:	b480      	push	{r7}
 800f73a:	b083      	sub	sp, #12
 800f73c:	af00      	add	r7, sp, #0
 800f73e:	6078      	str	r0, [r7, #4]
 800f740:	4b03      	ldr	r3, [pc, #12]	; (800f750 <_ZZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNodeENKUlfE0_cvPFffEEv+0x18>)
 800f742:	4618      	mov	r0, r3
 800f744:	370c      	adds	r7, #12
 800f746:	46bd      	mov	sp, r7
 800f748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f74c:	4770      	bx	lr
 800f74e:	bf00      	nop
 800f750:	0800f717 	.word	0x0800f717

0800f754 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode>:
TfLiteStatus SoftmaxPrepare(TfLiteContext* context, TfLiteNode* node) {
 800f754:	b590      	push	{r4, r7, lr}
 800f756:	b08f      	sub	sp, #60	; 0x3c
 800f758:	af04      	add	r7, sp, #16
 800f75a:	6078      	str	r0, [r7, #4]
 800f75c:	6039      	str	r1, [r7, #0]
  TF_LITE_ENSURE_EQ(context, NumInputs(node), 1);
 800f75e:	6838      	ldr	r0, [r7, #0]
 800f760:	f7fb ff1a 	bl	800b598 <_ZN6tflite9NumInputsEPK10TfLiteNode>
 800f764:	4603      	mov	r3, r0
 800f766:	2b01      	cmp	r3, #1
 800f768:	bf14      	ite	ne
 800f76a:	2301      	movne	r3, #1
 800f76c:	2300      	moveq	r3, #0
 800f76e:	b2db      	uxtb	r3, r3
 800f770:	2b00      	cmp	r3, #0
 800f772:	d013      	beq.n	800f79c <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x48>
 800f774:	687b      	ldr	r3, [r7, #4]
 800f776:	695c      	ldr	r4, [r3, #20]
 800f778:	6838      	ldr	r0, [r7, #0]
 800f77a:	f7fb ff0d 	bl	800b598 <_ZN6tflite9NumInputsEPK10TfLiteNode>
 800f77e:	4603      	mov	r3, r0
 800f780:	2201      	movs	r2, #1
 800f782:	9203      	str	r2, [sp, #12]
 800f784:	9302      	str	r3, [sp, #8]
 800f786:	4b7c      	ldr	r3, [pc, #496]	; (800f978 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x224>)
 800f788:	9301      	str	r3, [sp, #4]
 800f78a:	4b7c      	ldr	r3, [pc, #496]	; (800f97c <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x228>)
 800f78c:	9300      	str	r3, [sp, #0]
 800f78e:	235d      	movs	r3, #93	; 0x5d
 800f790:	4a7b      	ldr	r2, [pc, #492]	; (800f980 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x22c>)
 800f792:	497c      	ldr	r1, [pc, #496]	; (800f984 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x230>)
 800f794:	6878      	ldr	r0, [r7, #4]
 800f796:	47a0      	blx	r4
 800f798:	2301      	movs	r3, #1
 800f79a:	e146      	b.n	800fa2a <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2d6>
  TF_LITE_ENSURE_EQ(context, NumOutputs(node), 1);
 800f79c:	6838      	ldr	r0, [r7, #0]
 800f79e:	f7fb ff08 	bl	800b5b2 <_ZN6tflite10NumOutputsEPK10TfLiteNode>
 800f7a2:	4603      	mov	r3, r0
 800f7a4:	2b01      	cmp	r3, #1
 800f7a6:	bf14      	ite	ne
 800f7a8:	2301      	movne	r3, #1
 800f7aa:	2300      	moveq	r3, #0
 800f7ac:	b2db      	uxtb	r3, r3
 800f7ae:	2b00      	cmp	r3, #0
 800f7b0:	d013      	beq.n	800f7da <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x86>
 800f7b2:	687b      	ldr	r3, [r7, #4]
 800f7b4:	695c      	ldr	r4, [r3, #20]
 800f7b6:	6838      	ldr	r0, [r7, #0]
 800f7b8:	f7fb fefb 	bl	800b5b2 <_ZN6tflite10NumOutputsEPK10TfLiteNode>
 800f7bc:	4603      	mov	r3, r0
 800f7be:	2201      	movs	r2, #1
 800f7c0:	9203      	str	r2, [sp, #12]
 800f7c2:	9302      	str	r3, [sp, #8]
 800f7c4:	4b6c      	ldr	r3, [pc, #432]	; (800f978 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x224>)
 800f7c6:	9301      	str	r3, [sp, #4]
 800f7c8:	4b6f      	ldr	r3, [pc, #444]	; (800f988 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x234>)
 800f7ca:	9300      	str	r3, [sp, #0]
 800f7cc:	235e      	movs	r3, #94	; 0x5e
 800f7ce:	4a6c      	ldr	r2, [pc, #432]	; (800f980 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x22c>)
 800f7d0:	496c      	ldr	r1, [pc, #432]	; (800f984 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x230>)
 800f7d2:	6878      	ldr	r0, [r7, #4]
 800f7d4:	47a0      	blx	r4
 800f7d6:	2301      	movs	r3, #1
 800f7d8:	e127      	b.n	800fa2a <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2d6>
  const TfLiteTensor* input = GetInput(context, node, 0);
 800f7da:	2200      	movs	r2, #0
 800f7dc:	6839      	ldr	r1, [r7, #0]
 800f7de:	6878      	ldr	r0, [r7, #4]
 800f7e0:	f7f6 fc1c 	bl	800601c <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
 800f7e4:	6278      	str	r0, [r7, #36]	; 0x24
  TF_LITE_ENSURE(context, input != nullptr);
 800f7e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f7e8:	2b00      	cmp	r3, #0
 800f7ea:	d10a      	bne.n	800f802 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0xae>
 800f7ec:	687b      	ldr	r3, [r7, #4]
 800f7ee:	695c      	ldr	r4, [r3, #20]
 800f7f0:	4b66      	ldr	r3, [pc, #408]	; (800f98c <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x238>)
 800f7f2:	9300      	str	r3, [sp, #0]
 800f7f4:	2360      	movs	r3, #96	; 0x60
 800f7f6:	4a62      	ldr	r2, [pc, #392]	; (800f980 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x22c>)
 800f7f8:	4965      	ldr	r1, [pc, #404]	; (800f990 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x23c>)
 800f7fa:	6878      	ldr	r0, [r7, #4]
 800f7fc:	47a0      	blx	r4
 800f7fe:	2301      	movs	r3, #1
 800f800:	e113      	b.n	800fa2a <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2d6>
  TF_LITE_ENSURE(context, NumDimensions(input) >= 1);
 800f802:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f804:	f7f6 fb8d 	bl	8005f22 <_ZN6tflite13NumDimensionsEPK12TfLiteTensor>
 800f808:	4603      	mov	r3, r0
 800f80a:	2b00      	cmp	r3, #0
 800f80c:	bfd4      	ite	le
 800f80e:	2301      	movle	r3, #1
 800f810:	2300      	movgt	r3, #0
 800f812:	b2db      	uxtb	r3, r3
 800f814:	2b00      	cmp	r3, #0
 800f816:	d00a      	beq.n	800f82e <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0xda>
 800f818:	687b      	ldr	r3, [r7, #4]
 800f81a:	695c      	ldr	r4, [r3, #20]
 800f81c:	4b5d      	ldr	r3, [pc, #372]	; (800f994 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x240>)
 800f81e:	9300      	str	r3, [sp, #0]
 800f820:	2361      	movs	r3, #97	; 0x61
 800f822:	4a57      	ldr	r2, [pc, #348]	; (800f980 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x22c>)
 800f824:	495a      	ldr	r1, [pc, #360]	; (800f990 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x23c>)
 800f826:	6878      	ldr	r0, [r7, #4]
 800f828:	47a0      	blx	r4
 800f82a:	2301      	movs	r3, #1
 800f82c:	e0fd      	b.n	800fa2a <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2d6>
  TfLiteTensor* output = GetOutput(context, node, 0);
 800f82e:	2200      	movs	r2, #0
 800f830:	6839      	ldr	r1, [r7, #0]
 800f832:	6878      	ldr	r0, [r7, #4]
 800f834:	f7f6 fc02 	bl	800603c <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei>
 800f838:	6238      	str	r0, [r7, #32]
  TF_LITE_ENSURE(context, output != nullptr);
 800f83a:	6a3b      	ldr	r3, [r7, #32]
 800f83c:	2b00      	cmp	r3, #0
 800f83e:	d10a      	bne.n	800f856 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x102>
 800f840:	687b      	ldr	r3, [r7, #4]
 800f842:	695c      	ldr	r4, [r3, #20]
 800f844:	4b54      	ldr	r3, [pc, #336]	; (800f998 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x244>)
 800f846:	9300      	str	r3, [sp, #0]
 800f848:	2363      	movs	r3, #99	; 0x63
 800f84a:	4a4d      	ldr	r2, [pc, #308]	; (800f980 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x22c>)
 800f84c:	4950      	ldr	r1, [pc, #320]	; (800f990 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x23c>)
 800f84e:	6878      	ldr	r0, [r7, #4]
 800f850:	47a0      	blx	r4
 800f852:	2301      	movs	r3, #1
 800f854:	e0e9      	b.n	800fa2a <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2d6>
  TF_LITE_ENSURE(context, node->user_data != nullptr);
 800f856:	683b      	ldr	r3, [r7, #0]
 800f858:	691b      	ldr	r3, [r3, #16]
 800f85a:	2b00      	cmp	r3, #0
 800f85c:	d10a      	bne.n	800f874 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x120>
 800f85e:	687b      	ldr	r3, [r7, #4]
 800f860:	695c      	ldr	r4, [r3, #20]
 800f862:	4b4e      	ldr	r3, [pc, #312]	; (800f99c <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x248>)
 800f864:	9300      	str	r3, [sp, #0]
 800f866:	2365      	movs	r3, #101	; 0x65
 800f868:	4a45      	ldr	r2, [pc, #276]	; (800f980 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x22c>)
 800f86a:	4949      	ldr	r1, [pc, #292]	; (800f990 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x23c>)
 800f86c:	6878      	ldr	r0, [r7, #4]
 800f86e:	47a0      	blx	r4
 800f870:	2301      	movs	r3, #1
 800f872:	e0da      	b.n	800fa2a <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2d6>
  SoftmaxParams* op_data = static_cast<SoftmaxParams*>(node->user_data);
 800f874:	683b      	ldr	r3, [r7, #0]
 800f876:	691b      	ldr	r3, [r3, #16]
 800f878:	61fb      	str	r3, [r7, #28]
  if (input->type == kTfLiteInt16) {
 800f87a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f87c:	781b      	ldrb	r3, [r3, #0]
 800f87e:	2b07      	cmp	r3, #7
 800f880:	d12f      	bne.n	800f8e2 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x18e>
    void* raw_exp_lut = context->AllocatePersistentBuffer(
 800f882:	687b      	ldr	r3, [r7, #4]
 800f884:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f886:	f240 4102 	movw	r1, #1026	; 0x402
 800f88a:	6878      	ldr	r0, [r7, #4]
 800f88c:	4798      	blx	r3
 800f88e:	61b8      	str	r0, [r7, #24]
    TF_LITE_ENSURE(context, raw_exp_lut != nullptr);
 800f890:	69bb      	ldr	r3, [r7, #24]
 800f892:	2b00      	cmp	r3, #0
 800f894:	d10a      	bne.n	800f8ac <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x158>
 800f896:	687b      	ldr	r3, [r7, #4]
 800f898:	695c      	ldr	r4, [r3, #20]
 800f89a:	4b41      	ldr	r3, [pc, #260]	; (800f9a0 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x24c>)
 800f89c:	9300      	str	r3, [sp, #0]
 800f89e:	236b      	movs	r3, #107	; 0x6b
 800f8a0:	4a37      	ldr	r2, [pc, #220]	; (800f980 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x22c>)
 800f8a2:	493b      	ldr	r1, [pc, #236]	; (800f990 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x23c>)
 800f8a4:	6878      	ldr	r0, [r7, #4]
 800f8a6:	47a0      	blx	r4
 800f8a8:	2301      	movs	r3, #1
 800f8aa:	e0be      	b.n	800fa2a <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2d6>
    op_data->exp_lut = reinterpret_cast<int16_t*>(raw_exp_lut);
 800f8ac:	69fb      	ldr	r3, [r7, #28]
 800f8ae:	69ba      	ldr	r2, [r7, #24]
 800f8b0:	629a      	str	r2, [r3, #40]	; 0x28
    void* one_over_one_plus_x_lut = context->AllocatePersistentBuffer(
 800f8b2:	687b      	ldr	r3, [r7, #4]
 800f8b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f8b6:	f240 4102 	movw	r1, #1026	; 0x402
 800f8ba:	6878      	ldr	r0, [r7, #4]
 800f8bc:	4798      	blx	r3
 800f8be:	6178      	str	r0, [r7, #20]
    TF_LITE_ENSURE(context, one_over_one_plus_x_lut != nullptr);
 800f8c0:	697b      	ldr	r3, [r7, #20]
 800f8c2:	2b00      	cmp	r3, #0
 800f8c4:	d10a      	bne.n	800f8dc <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x188>
 800f8c6:	687b      	ldr	r3, [r7, #4]
 800f8c8:	695c      	ldr	r4, [r3, #20]
 800f8ca:	4b36      	ldr	r3, [pc, #216]	; (800f9a4 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x250>)
 800f8cc:	9300      	str	r3, [sp, #0]
 800f8ce:	236f      	movs	r3, #111	; 0x6f
 800f8d0:	4a2b      	ldr	r2, [pc, #172]	; (800f980 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x22c>)
 800f8d2:	492f      	ldr	r1, [pc, #188]	; (800f990 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x23c>)
 800f8d4:	6878      	ldr	r0, [r7, #4]
 800f8d6:	47a0      	blx	r4
 800f8d8:	2301      	movs	r3, #1
 800f8da:	e0a6      	b.n	800fa2a <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2d6>
    op_data->one_over_one_plus_x_lut =
 800f8dc:	69fb      	ldr	r3, [r7, #28]
 800f8de:	697a      	ldr	r2, [r7, #20]
 800f8e0:	62da      	str	r2, [r3, #44]	; 0x2c
  if (output->type == kTfLiteInt16) {
 800f8e2:	6a3b      	ldr	r3, [r7, #32]
 800f8e4:	781b      	ldrb	r3, [r3, #0]
 800f8e6:	2b07      	cmp	r3, #7
 800f8e8:	d112      	bne.n	800f910 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x1bc>
    TF_LITE_ENSURE(context,
 800f8ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f8ec:	781b      	ldrb	r3, [r3, #0]
 800f8ee:	2b09      	cmp	r3, #9
 800f8f0:	d028      	beq.n	800f944 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x1f0>
 800f8f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f8f4:	781b      	ldrb	r3, [r3, #0]
 800f8f6:	2b07      	cmp	r3, #7
 800f8f8:	d024      	beq.n	800f944 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x1f0>
 800f8fa:	687b      	ldr	r3, [r7, #4]
 800f8fc:	695c      	ldr	r4, [r3, #20]
 800f8fe:	4b2a      	ldr	r3, [pc, #168]	; (800f9a8 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x254>)
 800f900:	9300      	str	r3, [sp, #0]
 800f902:	2375      	movs	r3, #117	; 0x75
 800f904:	4a1e      	ldr	r2, [pc, #120]	; (800f980 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x22c>)
 800f906:	4922      	ldr	r1, [pc, #136]	; (800f990 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x23c>)
 800f908:	6878      	ldr	r0, [r7, #4]
 800f90a:	47a0      	blx	r4
 800f90c:	2301      	movs	r3, #1
 800f90e:	e08c      	b.n	800fa2a <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2d6>
    TF_LITE_ENSURE_EQ(context, input->type, output->type);
 800f910:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f912:	781a      	ldrb	r2, [r3, #0]
 800f914:	6a3b      	ldr	r3, [r7, #32]
 800f916:	781b      	ldrb	r3, [r3, #0]
 800f918:	429a      	cmp	r2, r3
 800f91a:	d013      	beq.n	800f944 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x1f0>
 800f91c:	687b      	ldr	r3, [r7, #4]
 800f91e:	695c      	ldr	r4, [r3, #20]
 800f920:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f922:	781b      	ldrb	r3, [r3, #0]
 800f924:	461a      	mov	r2, r3
 800f926:	6a3b      	ldr	r3, [r7, #32]
 800f928:	781b      	ldrb	r3, [r3, #0]
 800f92a:	9303      	str	r3, [sp, #12]
 800f92c:	9202      	str	r2, [sp, #8]
 800f92e:	4b1f      	ldr	r3, [pc, #124]	; (800f9ac <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x258>)
 800f930:	9301      	str	r3, [sp, #4]
 800f932:	4b1f      	ldr	r3, [pc, #124]	; (800f9b0 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x25c>)
 800f934:	9300      	str	r3, [sp, #0]
 800f936:	2378      	movs	r3, #120	; 0x78
 800f938:	4a11      	ldr	r2, [pc, #68]	; (800f980 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x22c>)
 800f93a:	4912      	ldr	r1, [pc, #72]	; (800f984 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x230>)
 800f93c:	6878      	ldr	r0, [r7, #4]
 800f93e:	47a0      	blx	r4
 800f940:	2301      	movs	r3, #1
 800f942:	e072      	b.n	800fa2a <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2d6>
  if (input->type == kTfLiteInt16) {
 800f944:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f946:	781b      	ldrb	r3, [r3, #0]
 800f948:	2b07      	cmp	r3, #7
 800f94a:	d161      	bne.n	800fa10 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2bc>
    TF_LITE_ENSURE_EQ(context, output->params.zero_point, 0);
 800f94c:	6a3b      	ldr	r3, [r7, #32]
 800f94e:	691b      	ldr	r3, [r3, #16]
 800f950:	2b00      	cmp	r3, #0
 800f952:	d035      	beq.n	800f9c0 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x26c>
 800f954:	687b      	ldr	r3, [r7, #4]
 800f956:	695c      	ldr	r4, [r3, #20]
 800f958:	6a3b      	ldr	r3, [r7, #32]
 800f95a:	691b      	ldr	r3, [r3, #16]
 800f95c:	2200      	movs	r2, #0
 800f95e:	9203      	str	r2, [sp, #12]
 800f960:	9302      	str	r3, [sp, #8]
 800f962:	4b14      	ldr	r3, [pc, #80]	; (800f9b4 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x260>)
 800f964:	9301      	str	r3, [sp, #4]
 800f966:	4b14      	ldr	r3, [pc, #80]	; (800f9b8 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x264>)
 800f968:	9300      	str	r3, [sp, #0]
 800f96a:	237d      	movs	r3, #125	; 0x7d
 800f96c:	4a04      	ldr	r2, [pc, #16]	; (800f980 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x22c>)
 800f96e:	4905      	ldr	r1, [pc, #20]	; (800f984 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x230>)
 800f970:	6878      	ldr	r0, [r7, #4]
 800f972:	47a0      	blx	r4
 800f974:	2301      	movs	r3, #1
 800f976:	e058      	b.n	800fa2a <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2d6>
 800f978:	080180e0 	.word	0x080180e0
 800f97c:	080180e4 	.word	0x080180e4
 800f980:	08017f70 	.word	0x08017f70
 800f984:	08017fb4 	.word	0x08017fb4
 800f988:	080180f4 	.word	0x080180f4
 800f98c:	08018108 	.word	0x08018108
 800f990:	08018094 	.word	0x08018094
 800f994:	0801811c 	.word	0x0801811c
 800f998:	08018138 	.word	0x08018138
 800f99c:	0801814c 	.word	0x0801814c
 800f9a0:	08018168 	.word	0x08018168
 800f9a4:	08018180 	.word	0x08018180
 800f9a8:	080181a4 	.word	0x080181a4
 800f9ac:	0801807c 	.word	0x0801807c
 800f9b0:	0801805c 	.word	0x0801805c
 800f9b4:	08017fd0 	.word	0x08017fd0
 800f9b8:	08017fd4 	.word	0x08017fd4
 800f9bc:	00000000 	.word	0x00000000
    gen_lut([](float value) { return std::exp(value); }, -10.0f, 0.0f,
 800f9c0:	f107 0308 	add.w	r3, r7, #8
 800f9c4:	4618      	mov	r0, r3
 800f9c6:	f7ff fe7f 	bl	800f6c8 <_ZZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNodeENKUlfE_cvPFffEEv>
 800f9ca:	69fb      	ldr	r3, [r7, #28]
 800f9cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f9ce:	f240 2201 	movw	r2, #513	; 0x201
 800f9d2:	4619      	mov	r1, r3
 800f9d4:	ed5f 0a07 	vldr	s1, [pc, #-28]	; 800f9bc <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x268>
 800f9d8:	eeba 0a04 	vmov.f32	s0, #164	; 0xc1200000 -10.0
 800f9dc:	f7ff faf4 	bl	800efc8 <_ZN6tflite7gen_lutEPFffEffPsi>
    gen_lut([](float value) { return 1.0f / (1.0f + value); }, 0.0f, 1.0f,
 800f9e0:	f107 030c 	add.w	r3, r7, #12
 800f9e4:	4618      	mov	r0, r3
 800f9e6:	f7ff fea7 	bl	800f738 <_ZZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNodeENKUlfE0_cvPFffEEv>
 800f9ea:	69fb      	ldr	r3, [r7, #28]
 800f9ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f9ee:	f240 2201 	movw	r2, #513	; 0x201
 800f9f2:	4619      	mov	r1, r3
 800f9f4:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 800f9f8:	ed1f 0a10 	vldr	s0, [pc, #-64]	; 800f9bc <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x268>
 800f9fc:	f7ff fae4 	bl	800efc8 <_ZN6tflite7gen_lutEPFffEffPsi>
            op_data->one_over_one_plus_x_lut, kInt16LUTArraySize);
    op_data->zero_point = output->params.zero_point;
 800fa00:	6a3b      	ldr	r3, [r7, #32]
 800fa02:	691a      	ldr	r2, [r3, #16]
 800fa04:	69fb      	ldr	r3, [r7, #28]
 800fa06:	61da      	str	r2, [r3, #28]
    op_data->scale = output->params.scale;
 800fa08:	6a3b      	ldr	r3, [r7, #32]
 800fa0a:	68da      	ldr	r2, [r3, #12]
 800fa0c:	69fb      	ldr	r3, [r7, #28]
 800fa0e:	621a      	str	r2, [r3, #32]
  }

  auto* params = static_cast<TfLiteSoftmaxParams*>(node->builtin_data);
 800fa10:	683b      	ldr	r3, [r7, #0]
 800fa12:	695b      	ldr	r3, [r3, #20]
 800fa14:	613b      	str	r3, [r7, #16]
  return CalculateSoftmaxParams(context, input, output, params, op_data);
 800fa16:	69fb      	ldr	r3, [r7, #28]
 800fa18:	9300      	str	r3, [sp, #0]
 800fa1a:	693b      	ldr	r3, [r7, #16]
 800fa1c:	6a3a      	ldr	r2, [r7, #32]
 800fa1e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800fa20:	6878      	ldr	r0, [r7, #4]
 800fa22:	f7ff fbfd 	bl	800f220 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE>
 800fa26:	4603      	mov	r3, r0
 800fa28:	bf00      	nop
}
 800fa2a:	4618      	mov	r0, r3
 800fa2c:	372c      	adds	r7, #44	; 0x2c
 800fa2e:	46bd      	mov	sp, r7
 800fa30:	bd90      	pop	{r4, r7, pc}
 800fa32:	bf00      	nop

0800fa34 <_ZN6tflite13MemoryPlannerC1Ev>:
// The goal is for applications to be able to experiment with different layout
// strategies without changing their client code, by swapping out classes that
// implement this interface.=
class MemoryPlanner {
 public:
  MemoryPlanner() {}
 800fa34:	b480      	push	{r7}
 800fa36:	b083      	sub	sp, #12
 800fa38:	af00      	add	r7, sp, #0
 800fa3a:	6078      	str	r0, [r7, #4]
 800fa3c:	4a04      	ldr	r2, [pc, #16]	; (800fa50 <_ZN6tflite13MemoryPlannerC1Ev+0x1c>)
 800fa3e:	687b      	ldr	r3, [r7, #4]
 800fa40:	601a      	str	r2, [r3, #0]
 800fa42:	687b      	ldr	r3, [r7, #4]
 800fa44:	4618      	mov	r0, r3
 800fa46:	370c      	adds	r7, #12
 800fa48:	46bd      	mov	sp, r7
 800fa4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa4e:	4770      	bx	lr
 800fa50:	0801d008 	.word	0x0801d008

0800fa54 <_ZN6tflite13MemoryPlannerD1Ev>:
  virtual ~MemoryPlanner() {}
 800fa54:	b480      	push	{r7}
 800fa56:	b083      	sub	sp, #12
 800fa58:	af00      	add	r7, sp, #0
 800fa5a:	6078      	str	r0, [r7, #4]
 800fa5c:	4a04      	ldr	r2, [pc, #16]	; (800fa70 <_ZN6tflite13MemoryPlannerD1Ev+0x1c>)
 800fa5e:	687b      	ldr	r3, [r7, #4]
 800fa60:	601a      	str	r2, [r3, #0]
 800fa62:	687b      	ldr	r3, [r7, #4]
 800fa64:	4618      	mov	r0, r3
 800fa66:	370c      	adds	r7, #12
 800fa68:	46bd      	mov	sp, r7
 800fa6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa6e:	4770      	bx	lr
 800fa70:	0801d008 	.word	0x0801d008

0800fa74 <_ZN6tflite13MemoryPlannerD0Ev>:
 800fa74:	b580      	push	{r7, lr}
 800fa76:	b082      	sub	sp, #8
 800fa78:	af00      	add	r7, sp, #0
 800fa7a:	6078      	str	r0, [r7, #4]
 800fa7c:	6878      	ldr	r0, [r7, #4]
 800fa7e:	f7ff ffe9 	bl	800fa54 <_ZN6tflite13MemoryPlannerD1Ev>
 800fa82:	2104      	movs	r1, #4
 800fa84:	6878      	ldr	r0, [r7, #4]
 800fa86:	f000 fc04 	bl	8010292 <_ZdlPvj>
 800fa8a:	687b      	ldr	r3, [r7, #4]
 800fa8c:	4618      	mov	r0, r3
 800fa8e:	3708      	adds	r7, #8
 800fa90:	46bd      	mov	sp, r7
 800fa92:	bd80      	pop	{r7, pc}

0800fa94 <_ZN6tflite19GreedyMemoryPlanner15per_buffer_sizeEv>:
    int requirements_index;
    int next_entry_index;
  };

  // Number of bytes required in order to plan a buffer.
  static size_t per_buffer_size() {
 800fa94:	b480      	push	{r7}
 800fa96:	b083      	sub	sp, #12
 800fa98:	af00      	add	r7, sp, #0
    const int per_buffer_size =
 800fa9a:	2328      	movs	r3, #40	; 0x28
 800fa9c:	607b      	str	r3, [r7, #4]
        sizeof(BufferRequirements) +  // requirements_
        sizeof(int) +                 // buffer_sizes_sorted_
        sizeof(int) +                 // buffer_ids_sorted_
        sizeof(ListEntry) +           // buffers_sorted_by_offset_
        sizeof(int);                  // buffer_offsets_;
    return per_buffer_size;
 800fa9e:	2328      	movs	r3, #40	; 0x28
  }
 800faa0:	4618      	mov	r0, r3
 800faa2:	370c      	adds	r7, #12
 800faa4:	46bd      	mov	sp, r7
 800faa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800faaa:	4770      	bx	lr

0800faac <_ZN6tflite18ReverseSortInPlaceEPiS0_i>:
}  // namespace

// Simple stable in-place sort function. Not time-efficient for large arrays.
// Would normally be in an anonymous namespace to keep it private, but we want
// to be able to test it externally.
void ReverseSortInPlace(int* values, int* ids, int size) {
 800faac:	b480      	push	{r7}
 800faae:	b089      	sub	sp, #36	; 0x24
 800fab0:	af00      	add	r7, sp, #0
 800fab2:	60f8      	str	r0, [r7, #12]
 800fab4:	60b9      	str	r1, [r7, #8]
 800fab6:	607a      	str	r2, [r7, #4]
  bool any_swapped;
  do {
    any_swapped = false;
 800fab8:	2300      	movs	r3, #0
 800faba:	77fb      	strb	r3, [r7, #31]
    for (int i = 1; i < size; ++i) {
 800fabc:	2301      	movs	r3, #1
 800fabe:	61bb      	str	r3, [r7, #24]
 800fac0:	69ba      	ldr	r2, [r7, #24]
 800fac2:	687b      	ldr	r3, [r7, #4]
 800fac4:	429a      	cmp	r2, r3
 800fac6:	da4c      	bge.n	800fb62 <_ZN6tflite18ReverseSortInPlaceEPiS0_i+0xb6>
      if (values[i - 1] < values[i]) {
 800fac8:	69bb      	ldr	r3, [r7, #24]
 800faca:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800face:	3b01      	subs	r3, #1
 800fad0:	009b      	lsls	r3, r3, #2
 800fad2:	68fa      	ldr	r2, [r7, #12]
 800fad4:	4413      	add	r3, r2
 800fad6:	681a      	ldr	r2, [r3, #0]
 800fad8:	69bb      	ldr	r3, [r7, #24]
 800fada:	009b      	lsls	r3, r3, #2
 800fadc:	68f9      	ldr	r1, [r7, #12]
 800fade:	440b      	add	r3, r1
 800fae0:	681b      	ldr	r3, [r3, #0]
 800fae2:	429a      	cmp	r2, r3
 800fae4:	da39      	bge.n	800fb5a <_ZN6tflite18ReverseSortInPlaceEPiS0_i+0xae>
        const int value_temp = values[i - 1];
 800fae6:	69bb      	ldr	r3, [r7, #24]
 800fae8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800faec:	3b01      	subs	r3, #1
 800faee:	009b      	lsls	r3, r3, #2
 800faf0:	68fa      	ldr	r2, [r7, #12]
 800faf2:	4413      	add	r3, r2
 800faf4:	681b      	ldr	r3, [r3, #0]
 800faf6:	617b      	str	r3, [r7, #20]
        values[i - 1] = values[i];
 800faf8:	69bb      	ldr	r3, [r7, #24]
 800fafa:	009b      	lsls	r3, r3, #2
 800fafc:	68fa      	ldr	r2, [r7, #12]
 800fafe:	441a      	add	r2, r3
 800fb00:	69bb      	ldr	r3, [r7, #24]
 800fb02:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800fb06:	3b01      	subs	r3, #1
 800fb08:	009b      	lsls	r3, r3, #2
 800fb0a:	68f9      	ldr	r1, [r7, #12]
 800fb0c:	440b      	add	r3, r1
 800fb0e:	6812      	ldr	r2, [r2, #0]
 800fb10:	601a      	str	r2, [r3, #0]
        values[i] = value_temp;
 800fb12:	69bb      	ldr	r3, [r7, #24]
 800fb14:	009b      	lsls	r3, r3, #2
 800fb16:	68fa      	ldr	r2, [r7, #12]
 800fb18:	4413      	add	r3, r2
 800fb1a:	697a      	ldr	r2, [r7, #20]
 800fb1c:	601a      	str	r2, [r3, #0]
        const int id_temp = ids[i - 1];
 800fb1e:	69bb      	ldr	r3, [r7, #24]
 800fb20:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800fb24:	3b01      	subs	r3, #1
 800fb26:	009b      	lsls	r3, r3, #2
 800fb28:	68ba      	ldr	r2, [r7, #8]
 800fb2a:	4413      	add	r3, r2
 800fb2c:	681b      	ldr	r3, [r3, #0]
 800fb2e:	613b      	str	r3, [r7, #16]
        ids[i - 1] = ids[i];
 800fb30:	69bb      	ldr	r3, [r7, #24]
 800fb32:	009b      	lsls	r3, r3, #2
 800fb34:	68ba      	ldr	r2, [r7, #8]
 800fb36:	441a      	add	r2, r3
 800fb38:	69bb      	ldr	r3, [r7, #24]
 800fb3a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800fb3e:	3b01      	subs	r3, #1
 800fb40:	009b      	lsls	r3, r3, #2
 800fb42:	68b9      	ldr	r1, [r7, #8]
 800fb44:	440b      	add	r3, r1
 800fb46:	6812      	ldr	r2, [r2, #0]
 800fb48:	601a      	str	r2, [r3, #0]
        ids[i] = id_temp;
 800fb4a:	69bb      	ldr	r3, [r7, #24]
 800fb4c:	009b      	lsls	r3, r3, #2
 800fb4e:	68ba      	ldr	r2, [r7, #8]
 800fb50:	4413      	add	r3, r2
 800fb52:	693a      	ldr	r2, [r7, #16]
 800fb54:	601a      	str	r2, [r3, #0]
        any_swapped = true;
 800fb56:	2301      	movs	r3, #1
 800fb58:	77fb      	strb	r3, [r7, #31]
    for (int i = 1; i < size; ++i) {
 800fb5a:	69bb      	ldr	r3, [r7, #24]
 800fb5c:	3301      	adds	r3, #1
 800fb5e:	61bb      	str	r3, [r7, #24]
 800fb60:	e7ae      	b.n	800fac0 <_ZN6tflite18ReverseSortInPlaceEPiS0_i+0x14>
  do {
 800fb62:	7ffb      	ldrb	r3, [r7, #31]
 800fb64:	2b00      	cmp	r3, #0
 800fb66:	d000      	beq.n	800fb6a <_ZN6tflite18ReverseSortInPlaceEPiS0_i+0xbe>
 800fb68:	e7a6      	b.n	800fab8 <_ZN6tflite18ReverseSortInPlaceEPiS0_i+0xc>
      }
    }
  } while (any_swapped);
}
 800fb6a:	bf00      	nop
 800fb6c:	3724      	adds	r7, #36	; 0x24
 800fb6e:	46bd      	mov	sp, r7
 800fb70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb74:	4770      	bx	lr
	...

0800fb78 <_ZN6tflite19GreedyMemoryPlannerC1EPhi>:

GreedyMemoryPlanner::GreedyMemoryPlanner(unsigned char* scratch_buffer,
 800fb78:	b590      	push	{r4, r7, lr}
 800fb7a:	b087      	sub	sp, #28
 800fb7c:	af00      	add	r7, sp, #0
 800fb7e:	60f8      	str	r0, [r7, #12]
 800fb80:	60b9      	str	r1, [r7, #8]
 800fb82:	607a      	str	r2, [r7, #4]
                                         int scratch_buffer_size)
    : buffer_count_(0), need_to_calculate_offsets_(true) {
 800fb84:	68fb      	ldr	r3, [r7, #12]
 800fb86:	4618      	mov	r0, r3
 800fb88:	f7ff ff54 	bl	800fa34 <_ZN6tflite13MemoryPlannerC1Ev>
 800fb8c:	4a22      	ldr	r2, [pc, #136]	; (800fc18 <_ZN6tflite19GreedyMemoryPlannerC1EPhi+0xa0>)
 800fb8e:	68fb      	ldr	r3, [r7, #12]
 800fb90:	601a      	str	r2, [r3, #0]
 800fb92:	68fb      	ldr	r3, [r7, #12]
 800fb94:	2200      	movs	r2, #0
 800fb96:	609a      	str	r2, [r3, #8]
 800fb98:	68fb      	ldr	r3, [r7, #12]
 800fb9a:	2201      	movs	r2, #1
 800fb9c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  // Allocate the arrays we need within the scratch buffer arena.
  max_buffer_count_ = scratch_buffer_size / per_buffer_size();
 800fba0:	687c      	ldr	r4, [r7, #4]
 800fba2:	f7ff ff77 	bl	800fa94 <_ZN6tflite19GreedyMemoryPlanner15per_buffer_sizeEv>
 800fba6:	4603      	mov	r3, r0
 800fba8:	fbb4 f3f3 	udiv	r3, r4, r3
 800fbac:	461a      	mov	r2, r3
 800fbae:	68fb      	ldr	r3, [r7, #12]
 800fbb0:	605a      	str	r2, [r3, #4]

  unsigned char* next_free = scratch_buffer;
 800fbb2:	68bb      	ldr	r3, [r7, #8]
 800fbb4:	617b      	str	r3, [r7, #20]
  requirements_ = reinterpret_cast<BufferRequirements*>(next_free);
 800fbb6:	68fb      	ldr	r3, [r7, #12]
 800fbb8:	697a      	ldr	r2, [r7, #20]
 800fbba:	60da      	str	r2, [r3, #12]
  next_free += sizeof(BufferRequirements) * max_buffer_count_;
 800fbbc:	68fb      	ldr	r3, [r7, #12]
 800fbbe:	685b      	ldr	r3, [r3, #4]
 800fbc0:	011b      	lsls	r3, r3, #4
 800fbc2:	697a      	ldr	r2, [r7, #20]
 800fbc4:	4413      	add	r3, r2
 800fbc6:	617b      	str	r3, [r7, #20]

  buffer_sizes_sorted_ = reinterpret_cast<int*>(next_free);
 800fbc8:	68fb      	ldr	r3, [r7, #12]
 800fbca:	697a      	ldr	r2, [r7, #20]
 800fbcc:	611a      	str	r2, [r3, #16]
  next_free += sizeof(int) * max_buffer_count_;
 800fbce:	68fb      	ldr	r3, [r7, #12]
 800fbd0:	685b      	ldr	r3, [r3, #4]
 800fbd2:	009b      	lsls	r3, r3, #2
 800fbd4:	697a      	ldr	r2, [r7, #20]
 800fbd6:	4413      	add	r3, r2
 800fbd8:	617b      	str	r3, [r7, #20]

  buffer_ids_sorted_ = reinterpret_cast<int*>(next_free);
 800fbda:	68fb      	ldr	r3, [r7, #12]
 800fbdc:	697a      	ldr	r2, [r7, #20]
 800fbde:	615a      	str	r2, [r3, #20]
  next_free += sizeof(int) * max_buffer_count_;
 800fbe0:	68fb      	ldr	r3, [r7, #12]
 800fbe2:	685b      	ldr	r3, [r3, #4]
 800fbe4:	009b      	lsls	r3, r3, #2
 800fbe6:	697a      	ldr	r2, [r7, #20]
 800fbe8:	4413      	add	r3, r2
 800fbea:	617b      	str	r3, [r7, #20]

  buffers_sorted_by_offset_ = reinterpret_cast<ListEntry*>(next_free);
 800fbec:	68fb      	ldr	r3, [r7, #12]
 800fbee:	697a      	ldr	r2, [r7, #20]
 800fbf0:	619a      	str	r2, [r3, #24]
  next_free += sizeof(ListEntry) * max_buffer_count_;
 800fbf2:	68fb      	ldr	r3, [r7, #12]
 800fbf4:	685b      	ldr	r3, [r3, #4]
 800fbf6:	461a      	mov	r2, r3
 800fbf8:	4613      	mov	r3, r2
 800fbfa:	005b      	lsls	r3, r3, #1
 800fbfc:	4413      	add	r3, r2
 800fbfe:	009b      	lsls	r3, r3, #2
 800fc00:	461a      	mov	r2, r3
 800fc02:	697b      	ldr	r3, [r7, #20]
 800fc04:	4413      	add	r3, r2
 800fc06:	617b      	str	r3, [r7, #20]

  buffer_offsets_ = reinterpret_cast<int*>(next_free);
 800fc08:	68fb      	ldr	r3, [r7, #12]
 800fc0a:	697a      	ldr	r2, [r7, #20]
 800fc0c:	625a      	str	r2, [r3, #36]	; 0x24
}
 800fc0e:	68fb      	ldr	r3, [r7, #12]
 800fc10:	4618      	mov	r0, r3
 800fc12:	371c      	adds	r7, #28
 800fc14:	46bd      	mov	sp, r7
 800fc16:	bd90      	pop	{r4, r7, pc}
 800fc18:	0801cfe8 	.word	0x0801cfe8

0800fc1c <_ZN6tflite19GreedyMemoryPlannerD1Ev>:

GreedyMemoryPlanner::~GreedyMemoryPlanner() {
 800fc1c:	b580      	push	{r7, lr}
 800fc1e:	b082      	sub	sp, #8
 800fc20:	af00      	add	r7, sp, #0
 800fc22:	6078      	str	r0, [r7, #4]
 800fc24:	4a05      	ldr	r2, [pc, #20]	; (800fc3c <_ZN6tflite19GreedyMemoryPlannerD1Ev+0x20>)
 800fc26:	687b      	ldr	r3, [r7, #4]
 800fc28:	601a      	str	r2, [r3, #0]
 800fc2a:	687b      	ldr	r3, [r7, #4]
 800fc2c:	4618      	mov	r0, r3
 800fc2e:	f7ff ff11 	bl	800fa54 <_ZN6tflite13MemoryPlannerD1Ev>
  // We don't own the scratch buffer, so don't deallocate anything.
}
 800fc32:	687b      	ldr	r3, [r7, #4]
 800fc34:	4618      	mov	r0, r3
 800fc36:	3708      	adds	r7, #8
 800fc38:	46bd      	mov	sp, r7
 800fc3a:	bd80      	pop	{r7, pc}
 800fc3c:	0801cfe8 	.word	0x0801cfe8

0800fc40 <_ZN6tflite19GreedyMemoryPlannerD0Ev>:
GreedyMemoryPlanner::~GreedyMemoryPlanner() {
 800fc40:	b580      	push	{r7, lr}
 800fc42:	b082      	sub	sp, #8
 800fc44:	af00      	add	r7, sp, #0
 800fc46:	6078      	str	r0, [r7, #4]
}
 800fc48:	6878      	ldr	r0, [r7, #4]
 800fc4a:	f7ff ffe7 	bl	800fc1c <_ZN6tflite19GreedyMemoryPlannerD1Ev>
 800fc4e:	212c      	movs	r1, #44	; 0x2c
 800fc50:	6878      	ldr	r0, [r7, #4]
 800fc52:	f000 fb1e 	bl	8010292 <_ZdlPvj>
 800fc56:	687b      	ldr	r3, [r7, #4]
 800fc58:	4618      	mov	r0, r3
 800fc5a:	3708      	adds	r7, #8
 800fc5c:	46bd      	mov	sp, r7
 800fc5e:	bd80      	pop	{r7, pc}

0800fc60 <_ZN6tflite19GreedyMemoryPlanner9AddBufferEPNS_13ErrorReporterEiii>:

TfLiteStatus GreedyMemoryPlanner::AddBuffer(
    tflite::ErrorReporter* error_reporter, int size, int first_time_used,
    int last_time_used) {
 800fc60:	b580      	push	{r7, lr}
 800fc62:	b086      	sub	sp, #24
 800fc64:	af00      	add	r7, sp, #0
 800fc66:	60f8      	str	r0, [r7, #12]
 800fc68:	60b9      	str	r1, [r7, #8]
 800fc6a:	607a      	str	r2, [r7, #4]
 800fc6c:	603b      	str	r3, [r7, #0]
  if (buffer_count_ >= max_buffer_count_) {
 800fc6e:	68fb      	ldr	r3, [r7, #12]
 800fc70:	689a      	ldr	r2, [r3, #8]
 800fc72:	68fb      	ldr	r3, [r7, #12]
 800fc74:	685b      	ldr	r3, [r3, #4]
 800fc76:	429a      	cmp	r2, r3
 800fc78:	db08      	blt.n	800fc8c <_ZN6tflite19GreedyMemoryPlanner9AddBufferEPNS_13ErrorReporterEiii+0x2c>
    TF_LITE_REPORT_ERROR(error_reporter, "Too many buffers (max is %d)",
 800fc7a:	68fb      	ldr	r3, [r7, #12]
 800fc7c:	685b      	ldr	r3, [r3, #4]
 800fc7e:	461a      	mov	r2, r3
 800fc80:	4913      	ldr	r1, [pc, #76]	; (800fcd0 <_ZN6tflite19GreedyMemoryPlanner9AddBufferEPNS_13ErrorReporterEiii+0x70>)
 800fc82:	68b8      	ldr	r0, [r7, #8]
 800fc84:	f7f3 ffc8 	bl	8003c18 <_ZN6tflite13ErrorReporter6ReportEPKcz>
                         max_buffer_count_);
    return kTfLiteError;
 800fc88:	2301      	movs	r3, #1
 800fc8a:	e01d      	b.n	800fcc8 <_ZN6tflite19GreedyMemoryPlanner9AddBufferEPNS_13ErrorReporterEiii+0x68>
  }
  BufferRequirements* current = &requirements_[buffer_count_];
 800fc8c:	68fb      	ldr	r3, [r7, #12]
 800fc8e:	68da      	ldr	r2, [r3, #12]
 800fc90:	68fb      	ldr	r3, [r7, #12]
 800fc92:	689b      	ldr	r3, [r3, #8]
 800fc94:	011b      	lsls	r3, r3, #4
 800fc96:	4413      	add	r3, r2
 800fc98:	617b      	str	r3, [r7, #20]
  current->size = size;
 800fc9a:	697b      	ldr	r3, [r7, #20]
 800fc9c:	687a      	ldr	r2, [r7, #4]
 800fc9e:	601a      	str	r2, [r3, #0]
  current->first_time_used = first_time_used;
 800fca0:	697b      	ldr	r3, [r7, #20]
 800fca2:	683a      	ldr	r2, [r7, #0]
 800fca4:	609a      	str	r2, [r3, #8]
  current->last_time_used = last_time_used;
 800fca6:	697b      	ldr	r3, [r7, #20]
 800fca8:	6a3a      	ldr	r2, [r7, #32]
 800fcaa:	60da      	str	r2, [r3, #12]
  current->offline_offset = kOnlinePlannedBuffer;
 800fcac:	697b      	ldr	r3, [r7, #20]
 800fcae:	f04f 32ff 	mov.w	r2, #4294967295
 800fcb2:	605a      	str	r2, [r3, #4]
  ++buffer_count_;
 800fcb4:	68fb      	ldr	r3, [r7, #12]
 800fcb6:	689b      	ldr	r3, [r3, #8]
 800fcb8:	1c5a      	adds	r2, r3, #1
 800fcba:	68fb      	ldr	r3, [r7, #12]
 800fcbc:	609a      	str	r2, [r3, #8]
  need_to_calculate_offsets_ = true;
 800fcbe:	68fb      	ldr	r3, [r7, #12]
 800fcc0:	2201      	movs	r2, #1
 800fcc2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  return kTfLiteOk;
 800fcc6:	2300      	movs	r3, #0
}
 800fcc8:	4618      	mov	r0, r3
 800fcca:	3718      	adds	r7, #24
 800fccc:	46bd      	mov	sp, r7
 800fcce:	bd80      	pop	{r7, pc}
 800fcd0:	080181e0 	.word	0x080181e0

0800fcd4 <_ZN6tflite19GreedyMemoryPlanner9AddBufferEPNS_13ErrorReporterEiiii>:

TfLiteStatus GreedyMemoryPlanner::AddBuffer(
    tflite::ErrorReporter* error_reporter, int size, int first_time_used,
    int last_time_used, int offline_offset) {
 800fcd4:	b590      	push	{r4, r7, lr}
 800fcd6:	b089      	sub	sp, #36	; 0x24
 800fcd8:	af02      	add	r7, sp, #8
 800fcda:	60f8      	str	r0, [r7, #12]
 800fcdc:	60b9      	str	r1, [r7, #8]
 800fcde:	607a      	str	r2, [r7, #4]
 800fce0:	603b      	str	r3, [r7, #0]
  BufferRequirements* current = &requirements_[buffer_count_];
 800fce2:	68fb      	ldr	r3, [r7, #12]
 800fce4:	68da      	ldr	r2, [r3, #12]
 800fce6:	68fb      	ldr	r3, [r7, #12]
 800fce8:	689b      	ldr	r3, [r3, #8]
 800fcea:	011b      	lsls	r3, r3, #4
 800fcec:	4413      	add	r3, r2
 800fcee:	617b      	str	r3, [r7, #20]
  if (AddBuffer(error_reporter, size, first_time_used, last_time_used) !=
 800fcf0:	68fb      	ldr	r3, [r7, #12]
 800fcf2:	681b      	ldr	r3, [r3, #0]
 800fcf4:	3308      	adds	r3, #8
 800fcf6:	681c      	ldr	r4, [r3, #0]
 800fcf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fcfa:	9300      	str	r3, [sp, #0]
 800fcfc:	683b      	ldr	r3, [r7, #0]
 800fcfe:	687a      	ldr	r2, [r7, #4]
 800fd00:	68b9      	ldr	r1, [r7, #8]
 800fd02:	68f8      	ldr	r0, [r7, #12]
 800fd04:	47a0      	blx	r4
 800fd06:	4603      	mov	r3, r0
 800fd08:	2b00      	cmp	r3, #0
 800fd0a:	bf14      	ite	ne
 800fd0c:	2301      	movne	r3, #1
 800fd0e:	2300      	moveq	r3, #0
 800fd10:	b2db      	uxtb	r3, r3
 800fd12:	2b00      	cmp	r3, #0
 800fd14:	d001      	beq.n	800fd1a <_ZN6tflite19GreedyMemoryPlanner9AddBufferEPNS_13ErrorReporterEiiii+0x46>
      kTfLiteOk) {
    return kTfLiteError;
 800fd16:	2301      	movs	r3, #1
 800fd18:	e003      	b.n	800fd22 <_ZN6tflite19GreedyMemoryPlanner9AddBufferEPNS_13ErrorReporterEiiii+0x4e>
  }
  current->offline_offset = offline_offset;
 800fd1a:	697b      	ldr	r3, [r7, #20]
 800fd1c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800fd1e:	605a      	str	r2, [r3, #4]
  return kTfLiteOk;
 800fd20:	2300      	movs	r3, #0
}
 800fd22:	4618      	mov	r0, r3
 800fd24:	371c      	adds	r7, #28
 800fd26:	46bd      	mov	sp, r7
 800fd28:	bd90      	pop	{r4, r7, pc}

0800fd2a <_ZNK6tflite19GreedyMemoryPlanner22DoesEntryOverlapInTimeEPKNS0_9ListEntryEii>:

bool GreedyMemoryPlanner::DoesEntryOverlapInTime(
    const GreedyMemoryPlanner::ListEntry* entry, const int first_time_used,
    const int last_time_used) const {
 800fd2a:	b480      	push	{r7}
 800fd2c:	b087      	sub	sp, #28
 800fd2e:	af00      	add	r7, sp, #0
 800fd30:	60f8      	str	r0, [r7, #12]
 800fd32:	60b9      	str	r1, [r7, #8]
 800fd34:	607a      	str	r2, [r7, #4]
 800fd36:	603b      	str	r3, [r7, #0]
  const BufferRequirements* entry_requirements =
      &requirements_[entry->requirements_index];
 800fd38:	68fb      	ldr	r3, [r7, #12]
 800fd3a:	68da      	ldr	r2, [r3, #12]
 800fd3c:	68bb      	ldr	r3, [r7, #8]
 800fd3e:	685b      	ldr	r3, [r3, #4]
 800fd40:	011b      	lsls	r3, r3, #4
  const BufferRequirements* entry_requirements =
 800fd42:	4413      	add	r3, r2
 800fd44:	617b      	str	r3, [r7, #20]
  if (entry_requirements->first_time_used > last_time_used) {
 800fd46:	697b      	ldr	r3, [r7, #20]
 800fd48:	689b      	ldr	r3, [r3, #8]
 800fd4a:	683a      	ldr	r2, [r7, #0]
 800fd4c:	429a      	cmp	r2, r3
 800fd4e:	da01      	bge.n	800fd54 <_ZNK6tflite19GreedyMemoryPlanner22DoesEntryOverlapInTimeEPKNS0_9ListEntryEii+0x2a>
    return false;
 800fd50:	2300      	movs	r3, #0
 800fd52:	e007      	b.n	800fd64 <_ZNK6tflite19GreedyMemoryPlanner22DoesEntryOverlapInTimeEPKNS0_9ListEntryEii+0x3a>
  }
  if (first_time_used > entry_requirements->last_time_used) {
 800fd54:	697b      	ldr	r3, [r7, #20]
 800fd56:	68db      	ldr	r3, [r3, #12]
 800fd58:	687a      	ldr	r2, [r7, #4]
 800fd5a:	429a      	cmp	r2, r3
 800fd5c:	dd01      	ble.n	800fd62 <_ZNK6tflite19GreedyMemoryPlanner22DoesEntryOverlapInTimeEPKNS0_9ListEntryEii+0x38>
    return false;
 800fd5e:	2300      	movs	r3, #0
 800fd60:	e000      	b.n	800fd64 <_ZNK6tflite19GreedyMemoryPlanner22DoesEntryOverlapInTimeEPKNS0_9ListEntryEii+0x3a>
  }
  return true;
 800fd62:	2301      	movs	r3, #1
}
 800fd64:	4618      	mov	r0, r3
 800fd66:	371c      	adds	r7, #28
 800fd68:	46bd      	mov	sp, r7
 800fd6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd6e:	4770      	bx	lr

0800fd70 <_ZN6tflite19GreedyMemoryPlanner30NextSimultaneouslyActiveBufferEPKNS0_9ListEntryEii>:

GreedyMemoryPlanner::ListEntry*
GreedyMemoryPlanner::NextSimultaneouslyActiveBuffer(
    const GreedyMemoryPlanner::ListEntry* start, const int first_time_used,
    const int last_time_used) {
 800fd70:	b580      	push	{r7, lr}
 800fd72:	b086      	sub	sp, #24
 800fd74:	af00      	add	r7, sp, #0
 800fd76:	60f8      	str	r0, [r7, #12]
 800fd78:	60b9      	str	r1, [r7, #8]
 800fd7a:	607a      	str	r2, [r7, #4]
 800fd7c:	603b      	str	r3, [r7, #0]
  ListEntry* result = nullptr;
 800fd7e:	2300      	movs	r3, #0
 800fd80:	617b      	str	r3, [r7, #20]
  ListEntry* candidate_next_entry;
  if (start == nullptr) {
 800fd82:	68bb      	ldr	r3, [r7, #8]
 800fd84:	2b00      	cmp	r3, #0
 800fd86:	d10b      	bne.n	800fda0 <_ZN6tflite19GreedyMemoryPlanner30NextSimultaneouslyActiveBufferEPKNS0_9ListEntryEii+0x30>
    candidate_next_entry = &buffers_sorted_by_offset_[first_entry_index_];
 800fd88:	68fb      	ldr	r3, [r7, #12]
 800fd8a:	699a      	ldr	r2, [r3, #24]
 800fd8c:	68fb      	ldr	r3, [r7, #12]
 800fd8e:	6a1b      	ldr	r3, [r3, #32]
 800fd90:	4619      	mov	r1, r3
 800fd92:	460b      	mov	r3, r1
 800fd94:	005b      	lsls	r3, r3, #1
 800fd96:	440b      	add	r3, r1
 800fd98:	009b      	lsls	r3, r3, #2
 800fd9a:	4413      	add	r3, r2
 800fd9c:	613b      	str	r3, [r7, #16]
 800fd9e:	e011      	b.n	800fdc4 <_ZN6tflite19GreedyMemoryPlanner30NextSimultaneouslyActiveBufferEPKNS0_9ListEntryEii+0x54>
  } else {
    if (start->next_entry_index == -1) {
 800fda0:	68bb      	ldr	r3, [r7, #8]
 800fda2:	689b      	ldr	r3, [r3, #8]
 800fda4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fda8:	d101      	bne.n	800fdae <_ZN6tflite19GreedyMemoryPlanner30NextSimultaneouslyActiveBufferEPKNS0_9ListEntryEii+0x3e>
      return nullptr;
 800fdaa:	2300      	movs	r3, #0
 800fdac:	e029      	b.n	800fe02 <_ZN6tflite19GreedyMemoryPlanner30NextSimultaneouslyActiveBufferEPKNS0_9ListEntryEii+0x92>
    }
    candidate_next_entry = &buffers_sorted_by_offset_[start->next_entry_index];
 800fdae:	68fb      	ldr	r3, [r7, #12]
 800fdb0:	699a      	ldr	r2, [r3, #24]
 800fdb2:	68bb      	ldr	r3, [r7, #8]
 800fdb4:	689b      	ldr	r3, [r3, #8]
 800fdb6:	4619      	mov	r1, r3
 800fdb8:	460b      	mov	r3, r1
 800fdba:	005b      	lsls	r3, r3, #1
 800fdbc:	440b      	add	r3, r1
 800fdbe:	009b      	lsls	r3, r3, #2
 800fdc0:	4413      	add	r3, r2
 800fdc2:	613b      	str	r3, [r7, #16]
  }
  do {
    if (DoesEntryOverlapInTime(candidate_next_entry, first_time_used,
 800fdc4:	683b      	ldr	r3, [r7, #0]
 800fdc6:	687a      	ldr	r2, [r7, #4]
 800fdc8:	6939      	ldr	r1, [r7, #16]
 800fdca:	68f8      	ldr	r0, [r7, #12]
 800fdcc:	f7ff ffad 	bl	800fd2a <_ZNK6tflite19GreedyMemoryPlanner22DoesEntryOverlapInTimeEPKNS0_9ListEntryEii>
 800fdd0:	4603      	mov	r3, r0
 800fdd2:	2b00      	cmp	r3, #0
 800fdd4:	d002      	beq.n	800fddc <_ZN6tflite19GreedyMemoryPlanner30NextSimultaneouslyActiveBufferEPKNS0_9ListEntryEii+0x6c>
                               last_time_used)) {
      result = candidate_next_entry;
 800fdd6:	693b      	ldr	r3, [r7, #16]
 800fdd8:	617b      	str	r3, [r7, #20]
      break;
 800fdda:	e011      	b.n	800fe00 <_ZN6tflite19GreedyMemoryPlanner30NextSimultaneouslyActiveBufferEPKNS0_9ListEntryEii+0x90>
    }
    if (candidate_next_entry->next_entry_index == -1) {
 800fddc:	693b      	ldr	r3, [r7, #16]
 800fdde:	689b      	ldr	r3, [r3, #8]
 800fde0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fde4:	d00b      	beq.n	800fdfe <_ZN6tflite19GreedyMemoryPlanner30NextSimultaneouslyActiveBufferEPKNS0_9ListEntryEii+0x8e>
      break;
    }
    candidate_next_entry =
        &buffers_sorted_by_offset_[candidate_next_entry->next_entry_index];
 800fde6:	68fb      	ldr	r3, [r7, #12]
 800fde8:	699a      	ldr	r2, [r3, #24]
 800fdea:	693b      	ldr	r3, [r7, #16]
 800fdec:	689b      	ldr	r3, [r3, #8]
 800fdee:	4619      	mov	r1, r3
 800fdf0:	460b      	mov	r3, r1
 800fdf2:	005b      	lsls	r3, r3, #1
 800fdf4:	440b      	add	r3, r1
 800fdf6:	009b      	lsls	r3, r3, #2
    candidate_next_entry =
 800fdf8:	4413      	add	r3, r2
 800fdfa:	613b      	str	r3, [r7, #16]
    if (DoesEntryOverlapInTime(candidate_next_entry, first_time_used,
 800fdfc:	e7e2      	b.n	800fdc4 <_ZN6tflite19GreedyMemoryPlanner30NextSimultaneouslyActiveBufferEPKNS0_9ListEntryEii+0x54>
      break;
 800fdfe:	bf00      	nop
  } while (true);
  return result;
 800fe00:	697b      	ldr	r3, [r7, #20]
}
 800fe02:	4618      	mov	r0, r3
 800fe04:	3718      	adds	r7, #24
 800fe06:	46bd      	mov	sp, r7
 800fe08:	bd80      	pop	{r7, pc}

0800fe0a <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv>:

void GreedyMemoryPlanner::CalculateOffsetsIfNeeded() {
 800fe0a:	b580      	push	{r7, lr}
 800fe0c:	b098      	sub	sp, #96	; 0x60
 800fe0e:	af00      	add	r7, sp, #0
 800fe10:	6078      	str	r0, [r7, #4]
  if (!need_to_calculate_offsets_ || (buffer_count_ == 0)) {
 800fe12:	687b      	ldr	r3, [r7, #4]
 800fe14:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800fe18:	f083 0301 	eor.w	r3, r3, #1
 800fe1c:	b2db      	uxtb	r3, r3
 800fe1e:	2b00      	cmp	r3, #0
 800fe20:	f040 815f 	bne.w	80100e2 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x2d8>
 800fe24:	687b      	ldr	r3, [r7, #4]
 800fe26:	689b      	ldr	r3, [r3, #8]
 800fe28:	2b00      	cmp	r3, #0
 800fe2a:	f000 815a 	beq.w	80100e2 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x2d8>
    return;
  }
  need_to_calculate_offsets_ = false;
 800fe2e:	687b      	ldr	r3, [r7, #4]
 800fe30:	2200      	movs	r2, #0
 800fe32:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  // This helps find a more compact layout. Intuitively, you can think
  // about putting the large buffers in place first, and then the
  // smaller buffers can fit in the gaps, rather than fragmenting the
  // gaps with small buffers at the beginning. Add offline planned offsets
  // first in the list, since they have a predetermined offset.
  int idx_from_tail = buffer_count_;
 800fe36:	687b      	ldr	r3, [r7, #4]
 800fe38:	689b      	ldr	r3, [r3, #8]
 800fe3a:	65fb      	str	r3, [r7, #92]	; 0x5c
  int idx_from_head = 0;
 800fe3c:	2300      	movs	r3, #0
 800fe3e:	65bb      	str	r3, [r7, #88]	; 0x58
  for (int i = 0; i < buffer_count_; ++i) {
 800fe40:	2300      	movs	r3, #0
 800fe42:	657b      	str	r3, [r7, #84]	; 0x54
 800fe44:	687b      	ldr	r3, [r7, #4]
 800fe46:	689b      	ldr	r3, [r3, #8]
 800fe48:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800fe4a:	429a      	cmp	r2, r3
 800fe4c:	da4d      	bge.n	800feea <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0xe0>
    if (requirements_[i].offline_offset == kOnlinePlannedBuffer) {
 800fe4e:	687b      	ldr	r3, [r7, #4]
 800fe50:	68da      	ldr	r2, [r3, #12]
 800fe52:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800fe54:	011b      	lsls	r3, r3, #4
 800fe56:	4413      	add	r3, r2
 800fe58:	685b      	ldr	r3, [r3, #4]
 800fe5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fe5e:	d11e      	bne.n	800fe9e <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x94>
      idx_from_tail--;
 800fe60:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800fe62:	3b01      	subs	r3, #1
 800fe64:	65fb      	str	r3, [r7, #92]	; 0x5c
      buffer_sizes_sorted_[idx_from_tail] = requirements_[i].size;
 800fe66:	687b      	ldr	r3, [r7, #4]
 800fe68:	68da      	ldr	r2, [r3, #12]
 800fe6a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800fe6c:	011b      	lsls	r3, r3, #4
 800fe6e:	441a      	add	r2, r3
 800fe70:	687b      	ldr	r3, [r7, #4]
 800fe72:	6919      	ldr	r1, [r3, #16]
 800fe74:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800fe76:	009b      	lsls	r3, r3, #2
 800fe78:	440b      	add	r3, r1
 800fe7a:	6812      	ldr	r2, [r2, #0]
 800fe7c:	601a      	str	r2, [r3, #0]
      buffer_ids_sorted_[idx_from_tail] = i;
 800fe7e:	687b      	ldr	r3, [r7, #4]
 800fe80:	695a      	ldr	r2, [r3, #20]
 800fe82:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800fe84:	009b      	lsls	r3, r3, #2
 800fe86:	4413      	add	r3, r2
 800fe88:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800fe8a:	601a      	str	r2, [r3, #0]
      buffer_offsets_[i] = -1;
 800fe8c:	687b      	ldr	r3, [r7, #4]
 800fe8e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800fe90:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800fe92:	009b      	lsls	r3, r3, #2
 800fe94:	4413      	add	r3, r2
 800fe96:	f04f 32ff 	mov.w	r2, #4294967295
 800fe9a:	601a      	str	r2, [r3, #0]
 800fe9c:	e021      	b.n	800fee2 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0xd8>
    } else {
      buffer_sizes_sorted_[idx_from_head] = requirements_[i].size;
 800fe9e:	687b      	ldr	r3, [r7, #4]
 800fea0:	68da      	ldr	r2, [r3, #12]
 800fea2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800fea4:	011b      	lsls	r3, r3, #4
 800fea6:	441a      	add	r2, r3
 800fea8:	687b      	ldr	r3, [r7, #4]
 800feaa:	6919      	ldr	r1, [r3, #16]
 800feac:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800feae:	009b      	lsls	r3, r3, #2
 800feb0:	440b      	add	r3, r1
 800feb2:	6812      	ldr	r2, [r2, #0]
 800feb4:	601a      	str	r2, [r3, #0]
      buffer_ids_sorted_[idx_from_head] = i;
 800feb6:	687b      	ldr	r3, [r7, #4]
 800feb8:	695a      	ldr	r2, [r3, #20]
 800feba:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800febc:	009b      	lsls	r3, r3, #2
 800febe:	4413      	add	r3, r2
 800fec0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800fec2:	601a      	str	r2, [r3, #0]
      buffer_offsets_[i] = requirements_[i].offline_offset;
 800fec4:	687b      	ldr	r3, [r7, #4]
 800fec6:	68da      	ldr	r2, [r3, #12]
 800fec8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800feca:	011b      	lsls	r3, r3, #4
 800fecc:	441a      	add	r2, r3
 800fece:	687b      	ldr	r3, [r7, #4]
 800fed0:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800fed2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800fed4:	009b      	lsls	r3, r3, #2
 800fed6:	440b      	add	r3, r1
 800fed8:	6852      	ldr	r2, [r2, #4]
 800feda:	601a      	str	r2, [r3, #0]
      idx_from_head++;
 800fedc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800fede:	3301      	adds	r3, #1
 800fee0:	65bb      	str	r3, [r7, #88]	; 0x58
  for (int i = 0; i < buffer_count_; ++i) {
 800fee2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800fee4:	3301      	adds	r3, #1
 800fee6:	657b      	str	r3, [r7, #84]	; 0x54
 800fee8:	e7ac      	b.n	800fe44 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x3a>
    }
  }

  // This sorting algorithm is naive, and may end up taking a very long time
  // with hundreds of buffers. Do not sort the offline planned offsets.
  ReverseSortInPlace(&buffer_sizes_sorted_[idx_from_head],
 800feea:	687b      	ldr	r3, [r7, #4]
 800feec:	691a      	ldr	r2, [r3, #16]
 800feee:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800fef0:	009b      	lsls	r3, r3, #2
 800fef2:	18d0      	adds	r0, r2, r3
                     &buffer_ids_sorted_[idx_from_head],
 800fef4:	687b      	ldr	r3, [r7, #4]
 800fef6:	695a      	ldr	r2, [r3, #20]
 800fef8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800fefa:	009b      	lsls	r3, r3, #2
  ReverseSortInPlace(&buffer_sizes_sorted_[idx_from_head],
 800fefc:	18d1      	adds	r1, r2, r3
                     buffer_count_ - idx_from_head);
 800fefe:	687b      	ldr	r3, [r7, #4]
 800ff00:	689a      	ldr	r2, [r3, #8]
  ReverseSortInPlace(&buffer_sizes_sorted_[idx_from_head],
 800ff02:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ff04:	1ad3      	subs	r3, r2, r3
 800ff06:	461a      	mov	r2, r3
 800ff08:	f7ff fdd0 	bl	800faac <_ZN6tflite18ReverseSortInPlaceEPiS0_i>
  // buffer_ids_sorted_.
  //   - If there are no offline planned offsets, the largest buffer will be
  //     first, and the buffers will be handled in size order.
  //   - If offline offsets are present, these will be handled first in order
  //     for the greedy algorithm to utilized gaps in the offline plan.
  first_entry_index_ = 0;
 800ff0c:	687b      	ldr	r3, [r7, #4]
 800ff0e:	2200      	movs	r2, #0
 800ff10:	621a      	str	r2, [r3, #32]
  next_free_entry_ = 1;
 800ff12:	687b      	ldr	r3, [r7, #4]
 800ff14:	2201      	movs	r2, #1
 800ff16:	61da      	str	r2, [r3, #28]
  ListEntry* first_entry = &buffers_sorted_by_offset_[first_entry_index_];
 800ff18:	687b      	ldr	r3, [r7, #4]
 800ff1a:	699a      	ldr	r2, [r3, #24]
 800ff1c:	687b      	ldr	r3, [r7, #4]
 800ff1e:	6a1b      	ldr	r3, [r3, #32]
 800ff20:	4619      	mov	r1, r3
 800ff22:	460b      	mov	r3, r1
 800ff24:	005b      	lsls	r3, r3, #1
 800ff26:	440b      	add	r3, r1
 800ff28:	009b      	lsls	r3, r3, #2
 800ff2a:	4413      	add	r3, r2
 800ff2c:	653b      	str	r3, [r7, #80]	; 0x50
  first_entry->next_entry_index = -1;  // to mark the entry as end of list
 800ff2e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ff30:	f04f 32ff 	mov.w	r2, #4294967295
 800ff34:	609a      	str	r2, [r3, #8]
  int buffer_id = buffer_ids_sorted_[0];
 800ff36:	687b      	ldr	r3, [r7, #4]
 800ff38:	695b      	ldr	r3, [r3, #20]
 800ff3a:	681b      	ldr	r3, [r3, #0]
 800ff3c:	63fb      	str	r3, [r7, #60]	; 0x3c
  first_entry->requirements_index = buffer_id;
 800ff3e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ff40:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800ff42:	605a      	str	r2, [r3, #4]
  if (requirements_[buffer_id].offline_offset == kOnlinePlannedBuffer) {
 800ff44:	687b      	ldr	r3, [r7, #4]
 800ff46:	68da      	ldr	r2, [r3, #12]
 800ff48:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ff4a:	011b      	lsls	r3, r3, #4
 800ff4c:	4413      	add	r3, r2
 800ff4e:	685b      	ldr	r3, [r3, #4]
 800ff50:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ff54:	d106      	bne.n	800ff64 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x15a>
    buffer_offsets_[buffer_id] = 0;
 800ff56:	687b      	ldr	r3, [r7, #4]
 800ff58:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ff5a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ff5c:	009b      	lsls	r3, r3, #2
 800ff5e:	4413      	add	r3, r2
 800ff60:	2200      	movs	r2, #0
 800ff62:	601a      	str	r2, [r3, #0]
  }
  first_entry->offset = buffer_offsets_[buffer_id];
 800ff64:	687b      	ldr	r3, [r7, #4]
 800ff66:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ff68:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ff6a:	009b      	lsls	r3, r3, #2
 800ff6c:	4413      	add	r3, r2
 800ff6e:	681a      	ldr	r2, [r3, #0]
 800ff70:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ff72:	601a      	str	r2, [r3, #0]

  // Work through the rest of the buffers to find a good gap to place each one.
  for (int i = 1; i < buffer_count_; ++i) {
 800ff74:	2301      	movs	r3, #1
 800ff76:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ff78:	687b      	ldr	r3, [r7, #4]
 800ff7a:	689b      	ldr	r3, [r3, #8]
 800ff7c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800ff7e:	429a      	cmp	r2, r3
 800ff80:	f280 80b0 	bge.w	80100e4 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x2da>
    // The id is the order the buffer was originally added by the client.
    buffer_id = buffer_ids_sorted_[i];
 800ff84:	687b      	ldr	r3, [r7, #4]
 800ff86:	695a      	ldr	r2, [r3, #20]
 800ff88:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ff8a:	009b      	lsls	r3, r3, #2
 800ff8c:	4413      	add	r3, r2
 800ff8e:	681b      	ldr	r3, [r3, #0]
 800ff90:	63fb      	str	r3, [r7, #60]	; 0x3c
    // Look at what size and time range the buffer needs to be active.
    BufferRequirements* wanted_requirements = &requirements_[buffer_id];
 800ff92:	687b      	ldr	r3, [r7, #4]
 800ff94:	68da      	ldr	r2, [r3, #12]
 800ff96:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ff98:	011b      	lsls	r3, r3, #4
 800ff9a:	4413      	add	r3, r2
 800ff9c:	63bb      	str	r3, [r7, #56]	; 0x38
    const int wanted_size = wanted_requirements->size;
 800ff9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ffa0:	681b      	ldr	r3, [r3, #0]
 800ffa2:	637b      	str	r3, [r7, #52]	; 0x34
    const int wanted_first_time_used = wanted_requirements->first_time_used;
 800ffa4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ffa6:	689b      	ldr	r3, [r3, #8]
 800ffa8:	633b      	str	r3, [r7, #48]	; 0x30
    const int wanted_last_time_used = wanted_requirements->last_time_used;
 800ffaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ffac:	68db      	ldr	r3, [r3, #12]
 800ffae:	62fb      	str	r3, [r7, #44]	; 0x2c
    // buffers are stored in the order of their starting position in the arena
    // so that it's easy to find the next buffer in memory, and so the gap.
    // The candidate_entry variable holds the buffer that we're considering
    // placing the current buffer after.

    int candidate_offset = 0;
 800ffb0:	2300      	movs	r3, #0
 800ffb2:	64bb      	str	r3, [r7, #72]	; 0x48
    // Loop through the offset-ordered list of buffers, looking for gaps.
    if (wanted_requirements->offline_offset == kOnlinePlannedBuffer) {
 800ffb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ffb6:	685b      	ldr	r3, [r3, #4]
 800ffb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ffbc:	d12d      	bne.n	801001a <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x210>
      ListEntry* prior_entry = nullptr;
 800ffbe:	2300      	movs	r3, #0
 800ffc0:	647b      	str	r3, [r7, #68]	; 0x44
      while (true) {
        // Find out what the next active buffer is.
        ListEntry* next_entry = NextSimultaneouslyActiveBuffer(
 800ffc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ffc4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ffc6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800ffc8:	6878      	ldr	r0, [r7, #4]
 800ffca:	f7ff fed1 	bl	800fd70 <_ZN6tflite19GreedyMemoryPlanner30NextSimultaneouslyActiveBufferEPKNS0_9ListEntryEii>
 800ffce:	62b8      	str	r0, [r7, #40]	; 0x28
            prior_entry, wanted_first_time_used, wanted_last_time_used);

        if (prior_entry) {
 800ffd0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ffd2:	2b00      	cmp	r3, #0
 800ffd4:	d012      	beq.n	800fffc <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x1f2>
          BufferRequirements* candidate_requirements =
              &requirements_[prior_entry->requirements_index];
 800ffd6:	687b      	ldr	r3, [r7, #4]
 800ffd8:	68da      	ldr	r2, [r3, #12]
 800ffda:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ffdc:	685b      	ldr	r3, [r3, #4]
 800ffde:	011b      	lsls	r3, r3, #4
          BufferRequirements* candidate_requirements =
 800ffe0:	4413      	add	r3, r2
 800ffe2:	627b      	str	r3, [r7, #36]	; 0x24
          const int prior_entry_offset =
              prior_entry->offset + candidate_requirements->size;
 800ffe4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ffe6:	681a      	ldr	r2, [r3, #0]
 800ffe8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ffea:	681b      	ldr	r3, [r3, #0]
          const int prior_entry_offset =
 800ffec:	4413      	add	r3, r2
 800ffee:	623b      	str	r3, [r7, #32]
          if (prior_entry_offset > candidate_offset) {
 800fff0:	6a3a      	ldr	r2, [r7, #32]
 800fff2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fff4:	429a      	cmp	r2, r3
 800fff6:	dd01      	ble.n	800fffc <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x1f2>
            candidate_offset = prior_entry_offset;
 800fff8:	6a3b      	ldr	r3, [r7, #32]
 800fffa:	64bb      	str	r3, [r7, #72]	; 0x48
          }
        }
        if (next_entry == nullptr) {
 800fffc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fffe:	2b00      	cmp	r3, #0
 8010000:	d00f      	beq.n	8010022 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x218>
          // We're at the end of the list, so we can always append the buffer
          // here.
          break;
        }
        // Find out how much space there is between us and the next buffer.
        const int gap = next_entry->offset - candidate_offset;
 8010002:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010004:	681a      	ldr	r2, [r3, #0]
 8010006:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010008:	1ad3      	subs	r3, r2, r3
 801000a:	61fb      	str	r3, [r7, #28]
        if (gap >= wanted_size) {
 801000c:	69fa      	ldr	r2, [r7, #28]
 801000e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010010:	429a      	cmp	r2, r3
 8010012:	da08      	bge.n	8010026 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x21c>
          // This entry has a big enough gap between it and the next, so
          // use it!
          break;
        }
        // The gap wasn't big enough, so move on to another candidate.
        prior_entry = next_entry;
 8010014:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010016:	647b      	str	r3, [r7, #68]	; 0x44
      }
 8010018:	e7d3      	b.n	800ffc2 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x1b8>
    } else {
      // Offline planned offset are to be considered constant
      candidate_offset = wanted_requirements->offline_offset;
 801001a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801001c:	685b      	ldr	r3, [r3, #4]
 801001e:	64bb      	str	r3, [r7, #72]	; 0x48
 8010020:	e002      	b.n	8010028 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x21e>
          break;
 8010022:	bf00      	nop
 8010024:	e000      	b.n	8010028 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x21e>
          break;
 8010026:	bf00      	nop
    }
    // At this point, we've either found a gap (possibly at the end of the
    // list) and want to place the buffer there, or there are no other active
    // buffers in this time range and so we can put it at offset zero.
    // Record the buffer's offset in our plan.
    buffer_offsets_[buffer_id] = candidate_offset;
 8010028:	687b      	ldr	r3, [r7, #4]
 801002a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801002c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801002e:	009b      	lsls	r3, r3, #2
 8010030:	4413      	add	r3, r2
 8010032:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8010034:	601a      	str	r2, [r3, #0]
    // Add the newly-placed buffer to our offset-ordered list, so that
    // subsequent passes can fit in their buffers around it.
    ListEntry* new_entry = &buffers_sorted_by_offset_[next_free_entry_];
 8010036:	687b      	ldr	r3, [r7, #4]
 8010038:	699a      	ldr	r2, [r3, #24]
 801003a:	687b      	ldr	r3, [r7, #4]
 801003c:	69db      	ldr	r3, [r3, #28]
 801003e:	4619      	mov	r1, r3
 8010040:	460b      	mov	r3, r1
 8010042:	005b      	lsls	r3, r3, #1
 8010044:	440b      	add	r3, r1
 8010046:	009b      	lsls	r3, r3, #2
 8010048:	4413      	add	r3, r2
 801004a:	61bb      	str	r3, [r7, #24]
    new_entry->offset = candidate_offset;
 801004c:	69bb      	ldr	r3, [r7, #24]
 801004e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8010050:	601a      	str	r2, [r3, #0]
    new_entry->requirements_index = buffer_id;
 8010052:	69bb      	ldr	r3, [r7, #24]
 8010054:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8010056:	605a      	str	r2, [r3, #4]
    const int new_entry_index = next_free_entry_;
 8010058:	687b      	ldr	r3, [r7, #4]
 801005a:	69db      	ldr	r3, [r3, #28]
 801005c:	617b      	str	r3, [r7, #20]
    ++next_free_entry_;
 801005e:	687b      	ldr	r3, [r7, #4]
 8010060:	69db      	ldr	r3, [r3, #28]
 8010062:	1c5a      	adds	r2, r3, #1
 8010064:	687b      	ldr	r3, [r7, #4]
 8010066:	61da      	str	r2, [r3, #28]

    if (first_entry->offset > candidate_offset) {
 8010068:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801006a:	681b      	ldr	r3, [r3, #0]
 801006c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801006e:	429a      	cmp	r2, r3
 8010070:	da09      	bge.n	8010086 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x27c>
      // The new entry offset is smaller than the first entry offset =>
      // replace the first entry
      first_entry = new_entry;
 8010072:	69bb      	ldr	r3, [r7, #24]
 8010074:	653b      	str	r3, [r7, #80]	; 0x50
      first_entry->next_entry_index = first_entry_index_;
 8010076:	687b      	ldr	r3, [r7, #4]
 8010078:	6a1a      	ldr	r2, [r3, #32]
 801007a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801007c:	609a      	str	r2, [r3, #8]
      first_entry_index_ = new_entry_index;
 801007e:	687b      	ldr	r3, [r7, #4]
 8010080:	697a      	ldr	r2, [r7, #20]
 8010082:	621a      	str	r2, [r3, #32]
 8010084:	e029      	b.n	80100da <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x2d0>
    } else {
      ListEntry* current_entry = first_entry;
 8010086:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010088:	643b      	str	r3, [r7, #64]	; 0x40
      // Make sure that we insert the buffer at the correct place in the
      // buffer-offset-ordered list
      while (true) {
        const int next_entry_index = current_entry->next_entry_index;
 801008a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801008c:	689b      	ldr	r3, [r3, #8]
 801008e:	613b      	str	r3, [r7, #16]
        if (next_entry_index == -1) {
 8010090:	693b      	ldr	r3, [r7, #16]
 8010092:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010096:	d107      	bne.n	80100a8 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x29e>
          // We're at the end of the list, so just add the new entry here.
          current_entry->next_entry_index = new_entry_index;
 8010098:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801009a:	697a      	ldr	r2, [r7, #20]
 801009c:	609a      	str	r2, [r3, #8]
          new_entry->next_entry_index = -1;
 801009e:	69bb      	ldr	r3, [r7, #24]
 80100a0:	f04f 32ff 	mov.w	r2, #4294967295
 80100a4:	609a      	str	r2, [r3, #8]
          break;
 80100a6:	e018      	b.n	80100da <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x2d0>
        }
        // not at the end of the list -> take a look at next entry
        ListEntry* next_entry = &buffers_sorted_by_offset_[next_entry_index];
 80100a8:	687b      	ldr	r3, [r7, #4]
 80100aa:	6999      	ldr	r1, [r3, #24]
 80100ac:	693a      	ldr	r2, [r7, #16]
 80100ae:	4613      	mov	r3, r2
 80100b0:	005b      	lsls	r3, r3, #1
 80100b2:	4413      	add	r3, r2
 80100b4:	009b      	lsls	r3, r3, #2
 80100b6:	440b      	add	r3, r1
 80100b8:	60fb      	str	r3, [r7, #12]
        if (next_entry->offset > candidate_offset) {
 80100ba:	68fb      	ldr	r3, [r7, #12]
 80100bc:	681b      	ldr	r3, [r3, #0]
 80100be:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80100c0:	429a      	cmp	r2, r3
 80100c2:	da07      	bge.n	80100d4 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x2ca>
          // We're at the right spot to do an insertion and retain the sorting
          // order, so place the new entry here.
          new_entry->next_entry_index = current_entry->next_entry_index;
 80100c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80100c6:	689a      	ldr	r2, [r3, #8]
 80100c8:	69bb      	ldr	r3, [r7, #24]
 80100ca:	609a      	str	r2, [r3, #8]
          current_entry->next_entry_index = new_entry_index;
 80100cc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80100ce:	697a      	ldr	r2, [r7, #20]
 80100d0:	609a      	str	r2, [r3, #8]
          break;
 80100d2:	e002      	b.n	80100da <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x2d0>
        }
        current_entry = next_entry;
 80100d4:	68fb      	ldr	r3, [r7, #12]
 80100d6:	643b      	str	r3, [r7, #64]	; 0x40
      }
 80100d8:	e7d7      	b.n	801008a <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x280>
  for (int i = 1; i < buffer_count_; ++i) {
 80100da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80100dc:	3301      	adds	r3, #1
 80100de:	64fb      	str	r3, [r7, #76]	; 0x4c
 80100e0:	e74a      	b.n	800ff78 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x16e>
    return;
 80100e2:	bf00      	nop
    }
  }
}
 80100e4:	3760      	adds	r7, #96	; 0x60
 80100e6:	46bd      	mov	sp, r7
 80100e8:	bd80      	pop	{r7, pc}

080100ea <_ZN6tflite19GreedyMemoryPlanner20GetMaximumMemorySizeEv>:

size_t GreedyMemoryPlanner::GetMaximumMemorySize() {
 80100ea:	b580      	push	{r7, lr}
 80100ec:	b086      	sub	sp, #24
 80100ee:	af00      	add	r7, sp, #0
 80100f0:	6078      	str	r0, [r7, #4]
  CalculateOffsetsIfNeeded();
 80100f2:	6878      	ldr	r0, [r7, #4]
 80100f4:	f7ff fe89 	bl	800fe0a <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv>
  if (buffer_count_ == 0) {
 80100f8:	687b      	ldr	r3, [r7, #4]
 80100fa:	689b      	ldr	r3, [r3, #8]
 80100fc:	2b00      	cmp	r3, #0
 80100fe:	d101      	bne.n	8010104 <_ZN6tflite19GreedyMemoryPlanner20GetMaximumMemorySizeEv+0x1a>
    return 0;
 8010100:	2300      	movs	r3, #0
 8010102:	e035      	b.n	8010170 <_ZN6tflite19GreedyMemoryPlanner20GetMaximumMemorySizeEv+0x86>
  }
  ListEntry* entry = &buffers_sorted_by_offset_[first_entry_index_];
 8010104:	687b      	ldr	r3, [r7, #4]
 8010106:	699a      	ldr	r2, [r3, #24]
 8010108:	687b      	ldr	r3, [r7, #4]
 801010a:	6a1b      	ldr	r3, [r3, #32]
 801010c:	4619      	mov	r1, r3
 801010e:	460b      	mov	r3, r1
 8010110:	005b      	lsls	r3, r3, #1
 8010112:	440b      	add	r3, r1
 8010114:	009b      	lsls	r3, r3, #2
 8010116:	4413      	add	r3, r2
 8010118:	617b      	str	r3, [r7, #20]
  size_t max_size = 0;
 801011a:	2300      	movs	r3, #0
 801011c:	613b      	str	r3, [r7, #16]
  while (entry) {
 801011e:	697b      	ldr	r3, [r7, #20]
 8010120:	2b00      	cmp	r3, #0
 8010122:	d024      	beq.n	801016e <_ZN6tflite19GreedyMemoryPlanner20GetMaximumMemorySizeEv+0x84>
    BufferRequirements* requirements =
        &requirements_[entry->requirements_index];
 8010124:	687b      	ldr	r3, [r7, #4]
 8010126:	68da      	ldr	r2, [r3, #12]
 8010128:	697b      	ldr	r3, [r7, #20]
 801012a:	685b      	ldr	r3, [r3, #4]
 801012c:	011b      	lsls	r3, r3, #4
    BufferRequirements* requirements =
 801012e:	4413      	add	r3, r2
 8010130:	60fb      	str	r3, [r7, #12]
    const size_t current_size = entry->offset + requirements->size;
 8010132:	697b      	ldr	r3, [r7, #20]
 8010134:	681a      	ldr	r2, [r3, #0]
 8010136:	68fb      	ldr	r3, [r7, #12]
 8010138:	681b      	ldr	r3, [r3, #0]
 801013a:	4413      	add	r3, r2
 801013c:	60bb      	str	r3, [r7, #8]
    if (current_size > max_size) {
 801013e:	68ba      	ldr	r2, [r7, #8]
 8010140:	693b      	ldr	r3, [r7, #16]
 8010142:	429a      	cmp	r2, r3
 8010144:	d901      	bls.n	801014a <_ZN6tflite19GreedyMemoryPlanner20GetMaximumMemorySizeEv+0x60>
      max_size = current_size;
 8010146:	68bb      	ldr	r3, [r7, #8]
 8010148:	613b      	str	r3, [r7, #16]
    }
    if (entry->next_entry_index == -1) {
 801014a:	697b      	ldr	r3, [r7, #20]
 801014c:	689b      	ldr	r3, [r3, #8]
 801014e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010152:	d00b      	beq.n	801016c <_ZN6tflite19GreedyMemoryPlanner20GetMaximumMemorySizeEv+0x82>
      break;
    }
    entry = &buffers_sorted_by_offset_[entry->next_entry_index];
 8010154:	687b      	ldr	r3, [r7, #4]
 8010156:	699a      	ldr	r2, [r3, #24]
 8010158:	697b      	ldr	r3, [r7, #20]
 801015a:	689b      	ldr	r3, [r3, #8]
 801015c:	4619      	mov	r1, r3
 801015e:	460b      	mov	r3, r1
 8010160:	005b      	lsls	r3, r3, #1
 8010162:	440b      	add	r3, r1
 8010164:	009b      	lsls	r3, r3, #2
 8010166:	4413      	add	r3, r2
 8010168:	617b      	str	r3, [r7, #20]
  while (entry) {
 801016a:	e7d8      	b.n	801011e <_ZN6tflite19GreedyMemoryPlanner20GetMaximumMemorySizeEv+0x34>
      break;
 801016c:	bf00      	nop
  }
  return max_size;
 801016e:	693b      	ldr	r3, [r7, #16]
}
 8010170:	4618      	mov	r0, r3
 8010172:	3718      	adds	r7, #24
 8010174:	46bd      	mov	sp, r7
 8010176:	bd80      	pop	{r7, pc}

08010178 <_ZN6tflite19GreedyMemoryPlanner14GetBufferCountEv>:
    MicroPrintf("%s%d: %s (%dk)", t < 10 ? " " : "", t, (const char*)line,
                (memory_use + 1023) / 1024);
  }
}

int GreedyMemoryPlanner::GetBufferCount() { return buffer_count_; }
 8010178:	b480      	push	{r7}
 801017a:	b083      	sub	sp, #12
 801017c:	af00      	add	r7, sp, #0
 801017e:	6078      	str	r0, [r7, #4]
 8010180:	687b      	ldr	r3, [r7, #4]
 8010182:	689b      	ldr	r3, [r3, #8]
 8010184:	4618      	mov	r0, r3
 8010186:	370c      	adds	r7, #12
 8010188:	46bd      	mov	sp, r7
 801018a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801018e:	4770      	bx	lr

08010190 <_ZN6tflite19GreedyMemoryPlanner18GetOffsetForBufferEPNS_13ErrorReporterEiPi>:

TfLiteStatus GreedyMemoryPlanner::GetOffsetForBuffer(
    tflite::ErrorReporter* error_reporter, int buffer_index, int* offset) {
 8010190:	b580      	push	{r7, lr}
 8010192:	b084      	sub	sp, #16
 8010194:	af00      	add	r7, sp, #0
 8010196:	60f8      	str	r0, [r7, #12]
 8010198:	60b9      	str	r1, [r7, #8]
 801019a:	607a      	str	r2, [r7, #4]
 801019c:	603b      	str	r3, [r7, #0]
  CalculateOffsetsIfNeeded();
 801019e:	68f8      	ldr	r0, [r7, #12]
 80101a0:	f7ff fe33 	bl	800fe0a <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv>
  if ((buffer_index < 0) || (buffer_index >= buffer_count_)) {
 80101a4:	687b      	ldr	r3, [r7, #4]
 80101a6:	2b00      	cmp	r3, #0
 80101a8:	db04      	blt.n	80101b4 <_ZN6tflite19GreedyMemoryPlanner18GetOffsetForBufferEPNS_13ErrorReporterEiPi+0x24>
 80101aa:	68fb      	ldr	r3, [r7, #12]
 80101ac:	689b      	ldr	r3, [r3, #8]
 80101ae:	687a      	ldr	r2, [r7, #4]
 80101b0:	429a      	cmp	r2, r3
 80101b2:	db08      	blt.n	80101c6 <_ZN6tflite19GreedyMemoryPlanner18GetOffsetForBufferEPNS_13ErrorReporterEiPi+0x36>
    TF_LITE_REPORT_ERROR(error_reporter,
 80101b4:	68fb      	ldr	r3, [r7, #12]
 80101b6:	689b      	ldr	r3, [r3, #8]
 80101b8:	687a      	ldr	r2, [r7, #4]
 80101ba:	4909      	ldr	r1, [pc, #36]	; (80101e0 <_ZN6tflite19GreedyMemoryPlanner18GetOffsetForBufferEPNS_13ErrorReporterEiPi+0x50>)
 80101bc:	68b8      	ldr	r0, [r7, #8]
 80101be:	f7f3 fd2b 	bl	8003c18 <_ZN6tflite13ErrorReporter6ReportEPKcz>
                         "buffer index %d is outside range 0 to %d",
                         buffer_index, buffer_count_);
    return kTfLiteError;
 80101c2:	2301      	movs	r3, #1
 80101c4:	e008      	b.n	80101d8 <_ZN6tflite19GreedyMemoryPlanner18GetOffsetForBufferEPNS_13ErrorReporterEiPi+0x48>
  }
  *offset = buffer_offsets_[buffer_index];
 80101c6:	68fb      	ldr	r3, [r7, #12]
 80101c8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80101ca:	687b      	ldr	r3, [r7, #4]
 80101cc:	009b      	lsls	r3, r3, #2
 80101ce:	4413      	add	r3, r2
 80101d0:	681a      	ldr	r2, [r3, #0]
 80101d2:	683b      	ldr	r3, [r7, #0]
 80101d4:	601a      	str	r2, [r3, #0]
  return kTfLiteOk;
 80101d6:	2300      	movs	r3, #0
}
 80101d8:	4618      	mov	r0, r3
 80101da:	3710      	adds	r7, #16
 80101dc:	46bd      	mov	sp, r7
 80101de:	bd80      	pop	{r7, pc}
 80101e0:	08018254 	.word	0x08018254

080101e4 <_ZNK6tflite12OperatorCode23deprecated_builtin_codeEv>:
  int8_t deprecated_builtin_code() const {
 80101e4:	b580      	push	{r7, lr}
 80101e6:	b082      	sub	sp, #8
 80101e8:	af00      	add	r7, sp, #0
 80101ea:	6078      	str	r0, [r7, #4]
    return GetField<int8_t>(VT_DEPRECATED_BUILTIN_CODE, 0);
 80101ec:	687b      	ldr	r3, [r7, #4]
 80101ee:	2200      	movs	r2, #0
 80101f0:	2104      	movs	r1, #4
 80101f2:	4618      	mov	r0, r3
 80101f4:	f7f4 fa9f 	bl	8004736 <_ZNK11flatbuffers5Table8GetFieldIaEET_tS2_>
 80101f8:	4603      	mov	r3, r0
  }
 80101fa:	4618      	mov	r0, r3
 80101fc:	3708      	adds	r7, #8
 80101fe:	46bd      	mov	sp, r7
 8010200:	bd80      	pop	{r7, pc}

08010202 <_ZNK6tflite12OperatorCode12builtin_codeEv>:
  tflite::BuiltinOperator builtin_code() const {
 8010202:	b580      	push	{r7, lr}
 8010204:	b082      	sub	sp, #8
 8010206:	af00      	add	r7, sp, #0
 8010208:	6078      	str	r0, [r7, #4]
    return static_cast<tflite::BuiltinOperator>(GetField<int32_t>(VT_BUILTIN_CODE, 0));
 801020a:	687b      	ldr	r3, [r7, #4]
 801020c:	2200      	movs	r2, #0
 801020e:	210a      	movs	r1, #10
 8010210:	4618      	mov	r0, r3
 8010212:	f7f4 fa62 	bl	80046da <_ZNK11flatbuffers5Table8GetFieldIlEET_tS2_>
 8010216:	4603      	mov	r3, r0
 8010218:	b2db      	uxtb	r3, r3
  }
 801021a:	4618      	mov	r0, r3
 801021c:	3708      	adds	r7, #8
 801021e:	46bd      	mov	sp, r7
 8010220:	bd80      	pop	{r7, pc}

08010222 <_ZN6tflite14GetBuiltinCodeEPKNS_12OperatorCodeE>:
// assigned to the `deprecated_builtin_code` field. In such cases, the
// value of the `builtin_code` field should be used for the builtin operator
// code. In the case, the maximum value of the two fields will be the value of
// the `builtin_code` as the right value.

BuiltinOperator GetBuiltinCode(const OperatorCode* op_code) {
 8010222:	b580      	push	{r7, lr}
 8010224:	b084      	sub	sp, #16
 8010226:	af00      	add	r7, sp, #0
 8010228:	6078      	str	r0, [r7, #4]
  // Caller should guarantee that the given argument value is not a nullptr.
  TFLITE_DCHECK(op_code != nullptr);
 801022a:	687b      	ldr	r3, [r7, #4]
 801022c:	2b00      	cmp	r3, #0
 801022e:	d101      	bne.n	8010234 <_ZN6tflite14GetBuiltinCodeEPKNS_12OperatorCodeE+0x12>
 8010230:	f000 fab5 	bl	801079e <abort>

  return std::max(
      op_code->builtin_code(),
 8010234:	6878      	ldr	r0, [r7, #4]
 8010236:	f7ff ffe4 	bl	8010202 <_ZNK6tflite12OperatorCode12builtin_codeEv>
 801023a:	4603      	mov	r3, r0
 801023c:	73bb      	strb	r3, [r7, #14]
      static_cast<BuiltinOperator>(op_code->deprecated_builtin_code()));
 801023e:	6878      	ldr	r0, [r7, #4]
 8010240:	f7ff ffd0 	bl	80101e4 <_ZNK6tflite12OperatorCode23deprecated_builtin_codeEv>
 8010244:	4603      	mov	r3, r0
 8010246:	b2db      	uxtb	r3, r3
 8010248:	73fb      	strb	r3, [r7, #15]
 801024a:	f107 020f 	add.w	r2, r7, #15
 801024e:	f107 030e 	add.w	r3, r7, #14
 8010252:	4611      	mov	r1, r2
 8010254:	4618      	mov	r0, r3
 8010256:	f000 f806 	bl	8010266 <_ZSt3maxIN6tflite15BuiltinOperatorEERKT_S4_S4_>
 801025a:	4603      	mov	r3, r0
 801025c:	781b      	ldrb	r3, [r3, #0]
}
 801025e:	4618      	mov	r0, r3
 8010260:	3710      	adds	r7, #16
 8010262:	46bd      	mov	sp, r7
 8010264:	bd80      	pop	{r7, pc}

08010266 <_ZSt3maxIN6tflite15BuiltinOperatorEERKT_S4_S4_>:
    max(const _Tp& __a, const _Tp& __b)
 8010266:	b480      	push	{r7}
 8010268:	b083      	sub	sp, #12
 801026a:	af00      	add	r7, sp, #0
 801026c:	6078      	str	r0, [r7, #4]
 801026e:	6039      	str	r1, [r7, #0]
      if (__a < __b)
 8010270:	687b      	ldr	r3, [r7, #4]
 8010272:	781a      	ldrb	r2, [r3, #0]
 8010274:	683b      	ldr	r3, [r7, #0]
 8010276:	781b      	ldrb	r3, [r3, #0]
 8010278:	429a      	cmp	r2, r3
 801027a:	d201      	bcs.n	8010280 <_ZSt3maxIN6tflite15BuiltinOperatorEERKT_S4_S4_+0x1a>
	return __b;
 801027c:	683b      	ldr	r3, [r7, #0]
 801027e:	e000      	b.n	8010282 <_ZSt3maxIN6tflite15BuiltinOperatorEERKT_S4_S4_+0x1c>
      return __a;
 8010280:	687b      	ldr	r3, [r7, #4]
    }
 8010282:	4618      	mov	r0, r3
 8010284:	370c      	adds	r7, #12
 8010286:	46bd      	mov	sp, r7
 8010288:	f85d 7b04 	ldr.w	r7, [sp], #4
 801028c:	4770      	bx	lr

0801028e <_ZdlPv>:
 801028e:	f000 bd83 	b.w	8010d98 <free>

08010292 <_ZdlPvj>:
 8010292:	f7ff bffc 	b.w	801028e <_ZdlPv>

08010296 <_ZdaPv>:
 8010296:	f7ff bffa 	b.w	801028e <_ZdlPv>

0801029a <__cxa_guard_acquire>:
 801029a:	6803      	ldr	r3, [r0, #0]
 801029c:	07db      	lsls	r3, r3, #31
 801029e:	d406      	bmi.n	80102ae <__cxa_guard_acquire+0x14>
 80102a0:	7843      	ldrb	r3, [r0, #1]
 80102a2:	b103      	cbz	r3, 80102a6 <__cxa_guard_acquire+0xc>
 80102a4:	deff      	udf	#255	; 0xff
 80102a6:	2301      	movs	r3, #1
 80102a8:	7043      	strb	r3, [r0, #1]
 80102aa:	4618      	mov	r0, r3
 80102ac:	4770      	bx	lr
 80102ae:	2000      	movs	r0, #0
 80102b0:	4770      	bx	lr

080102b2 <__cxa_guard_release>:
 80102b2:	2301      	movs	r3, #1
 80102b4:	6003      	str	r3, [r0, #0]
 80102b6:	4770      	bx	lr

080102b8 <_Znwj>:
 80102b8:	2801      	cmp	r0, #1
 80102ba:	bf38      	it	cc
 80102bc:	2001      	movcc	r0, #1
 80102be:	b510      	push	{r4, lr}
 80102c0:	4604      	mov	r4, r0
 80102c2:	4620      	mov	r0, r4
 80102c4:	f000 fd60 	bl	8010d88 <malloc>
 80102c8:	b930      	cbnz	r0, 80102d8 <_Znwj+0x20>
 80102ca:	f000 f81d 	bl	8010308 <_ZSt15get_new_handlerv>
 80102ce:	b908      	cbnz	r0, 80102d4 <_Znwj+0x1c>
 80102d0:	f000 fa65 	bl	801079e <abort>
 80102d4:	4780      	blx	r0
 80102d6:	e7f4      	b.n	80102c2 <_Znwj+0xa>
 80102d8:	bd10      	pop	{r4, pc}

080102da <_Znaj>:
 80102da:	f7ff bfed 	b.w	80102b8 <_Znwj>

080102de <__cxa_pure_virtual>:
 80102de:	b508      	push	{r3, lr}
 80102e0:	f000 f80c 	bl	80102fc <_ZSt9terminatev>

080102e4 <_ZN10__cxxabiv111__terminateEPFvvE>:
 80102e4:	b508      	push	{r3, lr}
 80102e6:	4780      	blx	r0
 80102e8:	f000 fa59 	bl	801079e <abort>

080102ec <_ZSt13get_terminatev>:
 80102ec:	4b02      	ldr	r3, [pc, #8]	; (80102f8 <_ZSt13get_terminatev+0xc>)
 80102ee:	6818      	ldr	r0, [r3, #0]
 80102f0:	f3bf 8f5b 	dmb	ish
 80102f4:	4770      	bx	lr
 80102f6:	bf00      	nop
 80102f8:	20000010 	.word	0x20000010

080102fc <_ZSt9terminatev>:
 80102fc:	b508      	push	{r3, lr}
 80102fe:	f7ff fff5 	bl	80102ec <_ZSt13get_terminatev>
 8010302:	f7ff ffef 	bl	80102e4 <_ZN10__cxxabiv111__terminateEPFvvE>
	...

08010308 <_ZSt15get_new_handlerv>:
 8010308:	4b02      	ldr	r3, [pc, #8]	; (8010314 <_ZSt15get_new_handlerv+0xc>)
 801030a:	6818      	ldr	r0, [r3, #0]
 801030c:	f3bf 8f5b 	dmb	ish
 8010310:	4770      	bx	lr
 8010312:	bf00      	nop
 8010314:	200053dc 	.word	0x200053dc

08010318 <floor>:
 8010318:	ec51 0b10 	vmov	r0, r1, d0
 801031c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010320:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8010324:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8010328:	2e13      	cmp	r6, #19
 801032a:	ee10 5a10 	vmov	r5, s0
 801032e:	ee10 8a10 	vmov	r8, s0
 8010332:	460c      	mov	r4, r1
 8010334:	dc32      	bgt.n	801039c <floor+0x84>
 8010336:	2e00      	cmp	r6, #0
 8010338:	da14      	bge.n	8010364 <floor+0x4c>
 801033a:	a333      	add	r3, pc, #204	; (adr r3, 8010408 <floor+0xf0>)
 801033c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010340:	f7ef ffb6 	bl	80002b0 <__adddf3>
 8010344:	2200      	movs	r2, #0
 8010346:	2300      	movs	r3, #0
 8010348:	f7f0 fbf8 	bl	8000b3c <__aeabi_dcmpgt>
 801034c:	b138      	cbz	r0, 801035e <floor+0x46>
 801034e:	2c00      	cmp	r4, #0
 8010350:	da57      	bge.n	8010402 <floor+0xea>
 8010352:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8010356:	431d      	orrs	r5, r3
 8010358:	d001      	beq.n	801035e <floor+0x46>
 801035a:	4c2d      	ldr	r4, [pc, #180]	; (8010410 <floor+0xf8>)
 801035c:	2500      	movs	r5, #0
 801035e:	4621      	mov	r1, r4
 8010360:	4628      	mov	r0, r5
 8010362:	e025      	b.n	80103b0 <floor+0x98>
 8010364:	4f2b      	ldr	r7, [pc, #172]	; (8010414 <floor+0xfc>)
 8010366:	4137      	asrs	r7, r6
 8010368:	ea01 0307 	and.w	r3, r1, r7
 801036c:	4303      	orrs	r3, r0
 801036e:	d01f      	beq.n	80103b0 <floor+0x98>
 8010370:	a325      	add	r3, pc, #148	; (adr r3, 8010408 <floor+0xf0>)
 8010372:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010376:	f7ef ff9b 	bl	80002b0 <__adddf3>
 801037a:	2200      	movs	r2, #0
 801037c:	2300      	movs	r3, #0
 801037e:	f7f0 fbdd 	bl	8000b3c <__aeabi_dcmpgt>
 8010382:	2800      	cmp	r0, #0
 8010384:	d0eb      	beq.n	801035e <floor+0x46>
 8010386:	2c00      	cmp	r4, #0
 8010388:	bfbe      	ittt	lt
 801038a:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 801038e:	fa43 f606 	asrlt.w	r6, r3, r6
 8010392:	19a4      	addlt	r4, r4, r6
 8010394:	ea24 0407 	bic.w	r4, r4, r7
 8010398:	2500      	movs	r5, #0
 801039a:	e7e0      	b.n	801035e <floor+0x46>
 801039c:	2e33      	cmp	r6, #51	; 0x33
 801039e:	dd0b      	ble.n	80103b8 <floor+0xa0>
 80103a0:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 80103a4:	d104      	bne.n	80103b0 <floor+0x98>
 80103a6:	ee10 2a10 	vmov	r2, s0
 80103aa:	460b      	mov	r3, r1
 80103ac:	f7ef ff80 	bl	80002b0 <__adddf3>
 80103b0:	ec41 0b10 	vmov	d0, r0, r1
 80103b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80103b8:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 80103bc:	f04f 33ff 	mov.w	r3, #4294967295
 80103c0:	fa23 f707 	lsr.w	r7, r3, r7
 80103c4:	4207      	tst	r7, r0
 80103c6:	d0f3      	beq.n	80103b0 <floor+0x98>
 80103c8:	a30f      	add	r3, pc, #60	; (adr r3, 8010408 <floor+0xf0>)
 80103ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80103ce:	f7ef ff6f 	bl	80002b0 <__adddf3>
 80103d2:	2200      	movs	r2, #0
 80103d4:	2300      	movs	r3, #0
 80103d6:	f7f0 fbb1 	bl	8000b3c <__aeabi_dcmpgt>
 80103da:	2800      	cmp	r0, #0
 80103dc:	d0bf      	beq.n	801035e <floor+0x46>
 80103de:	2c00      	cmp	r4, #0
 80103e0:	da02      	bge.n	80103e8 <floor+0xd0>
 80103e2:	2e14      	cmp	r6, #20
 80103e4:	d103      	bne.n	80103ee <floor+0xd6>
 80103e6:	3401      	adds	r4, #1
 80103e8:	ea25 0507 	bic.w	r5, r5, r7
 80103ec:	e7b7      	b.n	801035e <floor+0x46>
 80103ee:	2301      	movs	r3, #1
 80103f0:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 80103f4:	fa03 f606 	lsl.w	r6, r3, r6
 80103f8:	4435      	add	r5, r6
 80103fa:	4545      	cmp	r5, r8
 80103fc:	bf38      	it	cc
 80103fe:	18e4      	addcc	r4, r4, r3
 8010400:	e7f2      	b.n	80103e8 <floor+0xd0>
 8010402:	2500      	movs	r5, #0
 8010404:	462c      	mov	r4, r5
 8010406:	e7aa      	b.n	801035e <floor+0x46>
 8010408:	8800759c 	.word	0x8800759c
 801040c:	7e37e43c 	.word	0x7e37e43c
 8010410:	bff00000 	.word	0xbff00000
 8010414:	000fffff 	.word	0x000fffff

08010418 <frexp>:
 8010418:	b570      	push	{r4, r5, r6, lr}
 801041a:	2100      	movs	r1, #0
 801041c:	ec55 4b10 	vmov	r4, r5, d0
 8010420:	6001      	str	r1, [r0, #0]
 8010422:	4916      	ldr	r1, [pc, #88]	; (801047c <frexp+0x64>)
 8010424:	f025 4200 	bic.w	r2, r5, #2147483648	; 0x80000000
 8010428:	428a      	cmp	r2, r1
 801042a:	4606      	mov	r6, r0
 801042c:	462b      	mov	r3, r5
 801042e:	dc22      	bgt.n	8010476 <frexp+0x5e>
 8010430:	ee10 1a10 	vmov	r1, s0
 8010434:	4311      	orrs	r1, r2
 8010436:	d01e      	beq.n	8010476 <frexp+0x5e>
 8010438:	4911      	ldr	r1, [pc, #68]	; (8010480 <frexp+0x68>)
 801043a:	4029      	ands	r1, r5
 801043c:	b969      	cbnz	r1, 801045a <frexp+0x42>
 801043e:	4b11      	ldr	r3, [pc, #68]	; (8010484 <frexp+0x6c>)
 8010440:	2200      	movs	r2, #0
 8010442:	ee10 0a10 	vmov	r0, s0
 8010446:	4629      	mov	r1, r5
 8010448:	f7f0 f8e8 	bl	800061c <__aeabi_dmul>
 801044c:	460b      	mov	r3, r1
 801044e:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 8010452:	f06f 0135 	mvn.w	r1, #53	; 0x35
 8010456:	4604      	mov	r4, r0
 8010458:	6031      	str	r1, [r6, #0]
 801045a:	6831      	ldr	r1, [r6, #0]
 801045c:	1512      	asrs	r2, r2, #20
 801045e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8010462:	f2a2 32fe 	subw	r2, r2, #1022	; 0x3fe
 8010466:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801046a:	440a      	add	r2, r1
 801046c:	f043 557f 	orr.w	r5, r3, #1069547520	; 0x3fc00000
 8010470:	6032      	str	r2, [r6, #0]
 8010472:	f445 1500 	orr.w	r5, r5, #2097152	; 0x200000
 8010476:	ec45 4b10 	vmov	d0, r4, r5
 801047a:	bd70      	pop	{r4, r5, r6, pc}
 801047c:	7fefffff 	.word	0x7fefffff
 8010480:	7ff00000 	.word	0x7ff00000
 8010484:	43500000 	.word	0x43500000

08010488 <round>:
 8010488:	ec51 0b10 	vmov	r0, r1, d0
 801048c:	b570      	push	{r4, r5, r6, lr}
 801048e:	f3c1 550a 	ubfx	r5, r1, #20, #11
 8010492:	f2a5 34ff 	subw	r4, r5, #1023	; 0x3ff
 8010496:	2c13      	cmp	r4, #19
 8010498:	ee10 2a10 	vmov	r2, s0
 801049c:	460b      	mov	r3, r1
 801049e:	dc19      	bgt.n	80104d4 <round+0x4c>
 80104a0:	2c00      	cmp	r4, #0
 80104a2:	da09      	bge.n	80104b8 <round+0x30>
 80104a4:	3401      	adds	r4, #1
 80104a6:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 80104aa:	d103      	bne.n	80104b4 <round+0x2c>
 80104ac:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 80104b0:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80104b4:	2100      	movs	r1, #0
 80104b6:	e028      	b.n	801050a <round+0x82>
 80104b8:	4d15      	ldr	r5, [pc, #84]	; (8010510 <round+0x88>)
 80104ba:	4125      	asrs	r5, r4
 80104bc:	ea01 0605 	and.w	r6, r1, r5
 80104c0:	4332      	orrs	r2, r6
 80104c2:	d00e      	beq.n	80104e2 <round+0x5a>
 80104c4:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80104c8:	fa42 f404 	asr.w	r4, r2, r4
 80104cc:	4423      	add	r3, r4
 80104ce:	ea23 0305 	bic.w	r3, r3, r5
 80104d2:	e7ef      	b.n	80104b4 <round+0x2c>
 80104d4:	2c33      	cmp	r4, #51	; 0x33
 80104d6:	dd07      	ble.n	80104e8 <round+0x60>
 80104d8:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 80104dc:	d101      	bne.n	80104e2 <round+0x5a>
 80104de:	f7ef fee7 	bl	80002b0 <__adddf3>
 80104e2:	ec41 0b10 	vmov	d0, r0, r1
 80104e6:	bd70      	pop	{r4, r5, r6, pc}
 80104e8:	f2a5 4613 	subw	r6, r5, #1043	; 0x413
 80104ec:	f04f 35ff 	mov.w	r5, #4294967295
 80104f0:	40f5      	lsrs	r5, r6
 80104f2:	4228      	tst	r0, r5
 80104f4:	d0f5      	beq.n	80104e2 <round+0x5a>
 80104f6:	2101      	movs	r1, #1
 80104f8:	f1c4 0433 	rsb	r4, r4, #51	; 0x33
 80104fc:	fa01 f404 	lsl.w	r4, r1, r4
 8010500:	1912      	adds	r2, r2, r4
 8010502:	bf28      	it	cs
 8010504:	185b      	addcs	r3, r3, r1
 8010506:	ea22 0105 	bic.w	r1, r2, r5
 801050a:	4608      	mov	r0, r1
 801050c:	4619      	mov	r1, r3
 801050e:	e7e8      	b.n	80104e2 <round+0x5a>
 8010510:	000fffff 	.word	0x000fffff

08010514 <roundf>:
 8010514:	ee10 0a10 	vmov	r0, s0
 8010518:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 801051c:	f1a3 027f 	sub.w	r2, r3, #127	; 0x7f
 8010520:	2a16      	cmp	r2, #22
 8010522:	dc15      	bgt.n	8010550 <roundf+0x3c>
 8010524:	2a00      	cmp	r2, #0
 8010526:	da08      	bge.n	801053a <roundf+0x26>
 8010528:	3201      	adds	r2, #1
 801052a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 801052e:	d101      	bne.n	8010534 <roundf+0x20>
 8010530:	f043 537e 	orr.w	r3, r3, #1065353216	; 0x3f800000
 8010534:	ee00 3a10 	vmov	s0, r3
 8010538:	4770      	bx	lr
 801053a:	4908      	ldr	r1, [pc, #32]	; (801055c <roundf+0x48>)
 801053c:	4111      	asrs	r1, r2
 801053e:	4208      	tst	r0, r1
 8010540:	d0fa      	beq.n	8010538 <roundf+0x24>
 8010542:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8010546:	4113      	asrs	r3, r2
 8010548:	4403      	add	r3, r0
 801054a:	ea23 0301 	bic.w	r3, r3, r1
 801054e:	e7f1      	b.n	8010534 <roundf+0x20>
 8010550:	2a80      	cmp	r2, #128	; 0x80
 8010552:	d1f1      	bne.n	8010538 <roundf+0x24>
 8010554:	ee30 0a00 	vadd.f32	s0, s0, s0
 8010558:	4770      	bx	lr
 801055a:	bf00      	nop
 801055c:	007fffff 	.word	0x007fffff

08010560 <expf>:
 8010560:	b508      	push	{r3, lr}
 8010562:	ed2d 8b02 	vpush	{d8}
 8010566:	eef0 8a40 	vmov.f32	s17, s0
 801056a:	f000 f837 	bl	80105dc <__ieee754_expf>
 801056e:	4b16      	ldr	r3, [pc, #88]	; (80105c8 <expf+0x68>)
 8010570:	f993 3000 	ldrsb.w	r3, [r3]
 8010574:	3301      	adds	r3, #1
 8010576:	eeb0 8a40 	vmov.f32	s16, s0
 801057a:	d011      	beq.n	80105a0 <expf+0x40>
 801057c:	eeb0 0a68 	vmov.f32	s0, s17
 8010580:	f000 f900 	bl	8010784 <finitef>
 8010584:	b160      	cbz	r0, 80105a0 <expf+0x40>
 8010586:	eddf 7a11 	vldr	s15, [pc, #68]	; 80105cc <expf+0x6c>
 801058a:	eef4 8ae7 	vcmpe.f32	s17, s15
 801058e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010592:	dd0a      	ble.n	80105aa <expf+0x4a>
 8010594:	f000 f92e 	bl	80107f4 <__errno>
 8010598:	ed9f 8a0d 	vldr	s16, [pc, #52]	; 80105d0 <expf+0x70>
 801059c:	2322      	movs	r3, #34	; 0x22
 801059e:	6003      	str	r3, [r0, #0]
 80105a0:	eeb0 0a48 	vmov.f32	s0, s16
 80105a4:	ecbd 8b02 	vpop	{d8}
 80105a8:	bd08      	pop	{r3, pc}
 80105aa:	eddf 7a0a 	vldr	s15, [pc, #40]	; 80105d4 <expf+0x74>
 80105ae:	eef4 8ae7 	vcmpe.f32	s17, s15
 80105b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80105b6:	d5f3      	bpl.n	80105a0 <expf+0x40>
 80105b8:	f000 f91c 	bl	80107f4 <__errno>
 80105bc:	2322      	movs	r3, #34	; 0x22
 80105be:	ed9f 8a06 	vldr	s16, [pc, #24]	; 80105d8 <expf+0x78>
 80105c2:	6003      	str	r3, [r0, #0]
 80105c4:	e7ec      	b.n	80105a0 <expf+0x40>
 80105c6:	bf00      	nop
 80105c8:	20000014 	.word	0x20000014
 80105cc:	42b17180 	.word	0x42b17180
 80105d0:	7f800000 	.word	0x7f800000
 80105d4:	c2cff1b5 	.word	0xc2cff1b5
 80105d8:	00000000 	.word	0x00000000

080105dc <__ieee754_expf>:
 80105dc:	ee10 2a10 	vmov	r2, s0
 80105e0:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 80105e4:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 80105e8:	d902      	bls.n	80105f0 <__ieee754_expf+0x14>
 80105ea:	ee30 0a00 	vadd.f32	s0, s0, s0
 80105ee:	4770      	bx	lr
 80105f0:	ea4f 73d2 	mov.w	r3, r2, lsr #31
 80105f4:	d106      	bne.n	8010604 <__ieee754_expf+0x28>
 80105f6:	eddf 7a51 	vldr	s15, [pc, #324]	; 801073c <__ieee754_expf+0x160>
 80105fa:	2b00      	cmp	r3, #0
 80105fc:	bf18      	it	ne
 80105fe:	eeb0 0a67 	vmovne.f32	s0, s15
 8010602:	4770      	bx	lr
 8010604:	484e      	ldr	r0, [pc, #312]	; (8010740 <__ieee754_expf+0x164>)
 8010606:	4282      	cmp	r2, r0
 8010608:	dd04      	ble.n	8010614 <__ieee754_expf+0x38>
 801060a:	ed9f 0a4e 	vldr	s0, [pc, #312]	; 8010744 <__ieee754_expf+0x168>
 801060e:	ee20 0a00 	vmul.f32	s0, s0, s0
 8010612:	4770      	bx	lr
 8010614:	2a00      	cmp	r2, #0
 8010616:	da03      	bge.n	8010620 <__ieee754_expf+0x44>
 8010618:	4a4b      	ldr	r2, [pc, #300]	; (8010748 <__ieee754_expf+0x16c>)
 801061a:	4291      	cmp	r1, r2
 801061c:	f200 808a 	bhi.w	8010734 <__ieee754_expf+0x158>
 8010620:	4a4a      	ldr	r2, [pc, #296]	; (801074c <__ieee754_expf+0x170>)
 8010622:	4291      	cmp	r1, r2
 8010624:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8010628:	d954      	bls.n	80106d4 <__ieee754_expf+0xf8>
 801062a:	4a49      	ldr	r2, [pc, #292]	; (8010750 <__ieee754_expf+0x174>)
 801062c:	4291      	cmp	r1, r2
 801062e:	ea4f 0283 	mov.w	r2, r3, lsl #2
 8010632:	d836      	bhi.n	80106a2 <__ieee754_expf+0xc6>
 8010634:	4947      	ldr	r1, [pc, #284]	; (8010754 <__ieee754_expf+0x178>)
 8010636:	4411      	add	r1, r2
 8010638:	ed91 7a00 	vldr	s14, [r1]
 801063c:	4946      	ldr	r1, [pc, #280]	; (8010758 <__ieee754_expf+0x17c>)
 801063e:	440a      	add	r2, r1
 8010640:	edd2 7a00 	vldr	s15, [r2]
 8010644:	ee30 7a47 	vsub.f32	s14, s0, s14
 8010648:	f1c3 0201 	rsb	r2, r3, #1
 801064c:	1ad2      	subs	r2, r2, r3
 801064e:	ee37 0a67 	vsub.f32	s0, s14, s15
 8010652:	ee60 6a00 	vmul.f32	s13, s0, s0
 8010656:	eddf 5a41 	vldr	s11, [pc, #260]	; 801075c <__ieee754_expf+0x180>
 801065a:	ed9f 5a41 	vldr	s10, [pc, #260]	; 8010760 <__ieee754_expf+0x184>
 801065e:	eea6 5aa5 	vfma.f32	s10, s13, s11
 8010662:	eddf 5a40 	vldr	s11, [pc, #256]	; 8010764 <__ieee754_expf+0x188>
 8010666:	eee5 5a26 	vfma.f32	s11, s10, s13
 801066a:	ed9f 5a3f 	vldr	s10, [pc, #252]	; 8010768 <__ieee754_expf+0x18c>
 801066e:	eea5 5aa6 	vfma.f32	s10, s11, s13
 8010672:	eddf 5a3e 	vldr	s11, [pc, #248]	; 801076c <__ieee754_expf+0x190>
 8010676:	eee5 5a26 	vfma.f32	s11, s10, s13
 801067a:	eeb0 5a40 	vmov.f32	s10, s0
 801067e:	eea5 5ae6 	vfms.f32	s10, s11, s13
 8010682:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 8010686:	eef0 6a45 	vmov.f32	s13, s10
 801068a:	ee20 5a05 	vmul.f32	s10, s0, s10
 801068e:	bb92      	cbnz	r2, 80106f6 <__ieee754_expf+0x11a>
 8010690:	ee76 6ae5 	vsub.f32	s13, s13, s11
 8010694:	eec5 7a26 	vdiv.f32	s15, s10, s13
 8010698:	ee37 0ac0 	vsub.f32	s0, s15, s0
 801069c:	ee36 0a40 	vsub.f32	s0, s12, s0
 80106a0:	4770      	bx	lr
 80106a2:	4b33      	ldr	r3, [pc, #204]	; (8010770 <__ieee754_expf+0x194>)
 80106a4:	ed9f 7a33 	vldr	s14, [pc, #204]	; 8010774 <__ieee754_expf+0x198>
 80106a8:	4413      	add	r3, r2
 80106aa:	edd3 7a00 	vldr	s15, [r3]
 80106ae:	eee0 7a07 	vfma.f32	s15, s0, s14
 80106b2:	ed9f 7a31 	vldr	s14, [pc, #196]	; 8010778 <__ieee754_expf+0x19c>
 80106b6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80106ba:	ee17 2a90 	vmov	r2, s15
 80106be:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80106c2:	eea7 0ac7 	vfms.f32	s0, s15, s14
 80106c6:	eeb0 7a40 	vmov.f32	s14, s0
 80106ca:	ed9f 0a2c 	vldr	s0, [pc, #176]	; 801077c <__ieee754_expf+0x1a0>
 80106ce:	ee67 7a80 	vmul.f32	s15, s15, s0
 80106d2:	e7bc      	b.n	801064e <__ieee754_expf+0x72>
 80106d4:	f1b1 5f46 	cmp.w	r1, #830472192	; 0x31800000
 80106d8:	d20b      	bcs.n	80106f2 <__ieee754_expf+0x116>
 80106da:	eddf 6a1a 	vldr	s13, [pc, #104]	; 8010744 <__ieee754_expf+0x168>
 80106de:	ee70 6a26 	vadd.f32	s13, s0, s13
 80106e2:	eef4 6ac6 	vcmpe.f32	s13, s12
 80106e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80106ea:	dd02      	ble.n	80106f2 <__ieee754_expf+0x116>
 80106ec:	ee30 0a06 	vadd.f32	s0, s0, s12
 80106f0:	4770      	bx	lr
 80106f2:	2200      	movs	r2, #0
 80106f4:	e7ad      	b.n	8010652 <__ieee754_expf+0x76>
 80106f6:	ee75 6ae6 	vsub.f32	s13, s11, s13
 80106fa:	f112 0f7d 	cmn.w	r2, #125	; 0x7d
 80106fe:	ee85 0a26 	vdiv.f32	s0, s10, s13
 8010702:	bfb8      	it	lt
 8010704:	3264      	addlt	r2, #100	; 0x64
 8010706:	ee77 7ac0 	vsub.f32	s15, s15, s0
 801070a:	ee37 0ac7 	vsub.f32	s0, s15, s14
 801070e:	ee76 7a40 	vsub.f32	s15, s12, s0
 8010712:	ee17 3a90 	vmov	r3, s15
 8010716:	bfab      	itete	ge
 8010718:	eb03 53c2 	addge.w	r3, r3, r2, lsl #23
 801071c:	eb03 53c2 	addlt.w	r3, r3, r2, lsl #23
 8010720:	ee00 3a10 	vmovge	s0, r3
 8010724:	eddf 7a16 	vldrlt	s15, [pc, #88]	; 8010780 <__ieee754_expf+0x1a4>
 8010728:	bfbc      	itt	lt
 801072a:	ee00 3a10 	vmovlt	s0, r3
 801072e:	ee20 0a27 	vmullt.f32	s0, s0, s15
 8010732:	4770      	bx	lr
 8010734:	ed9f 0a01 	vldr	s0, [pc, #4]	; 801073c <__ieee754_expf+0x160>
 8010738:	4770      	bx	lr
 801073a:	bf00      	nop
 801073c:	00000000 	.word	0x00000000
 8010740:	42b17217 	.word	0x42b17217
 8010744:	7149f2ca 	.word	0x7149f2ca
 8010748:	42cff1b5 	.word	0x42cff1b5
 801074c:	3eb17218 	.word	0x3eb17218
 8010750:	3f851591 	.word	0x3f851591
 8010754:	0801d028 	.word	0x0801d028
 8010758:	0801d030 	.word	0x0801d030
 801075c:	3331bb4c 	.word	0x3331bb4c
 8010760:	b5ddea0e 	.word	0xb5ddea0e
 8010764:	388ab355 	.word	0x388ab355
 8010768:	bb360b61 	.word	0xbb360b61
 801076c:	3e2aaaab 	.word	0x3e2aaaab
 8010770:	0801d020 	.word	0x0801d020
 8010774:	3fb8aa3b 	.word	0x3fb8aa3b
 8010778:	3f317180 	.word	0x3f317180
 801077c:	3717f7d1 	.word	0x3717f7d1
 8010780:	0d800000 	.word	0x0d800000

08010784 <finitef>:
 8010784:	b082      	sub	sp, #8
 8010786:	ed8d 0a01 	vstr	s0, [sp, #4]
 801078a:	9801      	ldr	r0, [sp, #4]
 801078c:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8010790:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 8010794:	bfac      	ite	ge
 8010796:	2000      	movge	r0, #0
 8010798:	2001      	movlt	r0, #1
 801079a:	b002      	add	sp, #8
 801079c:	4770      	bx	lr

0801079e <abort>:
 801079e:	b508      	push	{r3, lr}
 80107a0:	2006      	movs	r0, #6
 80107a2:	f001 f9e7 	bl	8011b74 <raise>
 80107a6:	2001      	movs	r0, #1
 80107a8:	f7f1 fd1e 	bl	80021e8 <_exit>

080107ac <__assert_func>:
 80107ac:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80107ae:	4614      	mov	r4, r2
 80107b0:	461a      	mov	r2, r3
 80107b2:	4b09      	ldr	r3, [pc, #36]	; (80107d8 <__assert_func+0x2c>)
 80107b4:	681b      	ldr	r3, [r3, #0]
 80107b6:	4605      	mov	r5, r0
 80107b8:	68d8      	ldr	r0, [r3, #12]
 80107ba:	b14c      	cbz	r4, 80107d0 <__assert_func+0x24>
 80107bc:	4b07      	ldr	r3, [pc, #28]	; (80107dc <__assert_func+0x30>)
 80107be:	9100      	str	r1, [sp, #0]
 80107c0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80107c4:	4906      	ldr	r1, [pc, #24]	; (80107e0 <__assert_func+0x34>)
 80107c6:	462b      	mov	r3, r5
 80107c8:	f000 f9b2 	bl	8010b30 <fiprintf>
 80107cc:	f7ff ffe7 	bl	801079e <abort>
 80107d0:	4b04      	ldr	r3, [pc, #16]	; (80107e4 <__assert_func+0x38>)
 80107d2:	461c      	mov	r4, r3
 80107d4:	e7f3      	b.n	80107be <__assert_func+0x12>
 80107d6:	bf00      	nop
 80107d8:	20000018 	.word	0x20000018
 80107dc:	0801d038 	.word	0x0801d038
 80107e0:	0801d045 	.word	0x0801d045
 80107e4:	0801d073 	.word	0x0801d073

080107e8 <atexit>:
 80107e8:	2300      	movs	r3, #0
 80107ea:	4601      	mov	r1, r0
 80107ec:	461a      	mov	r2, r3
 80107ee:	4618      	mov	r0, r3
 80107f0:	f001 bb24 	b.w	8011e3c <__register_exitproc>

080107f4 <__errno>:
 80107f4:	4b01      	ldr	r3, [pc, #4]	; (80107fc <__errno+0x8>)
 80107f6:	6818      	ldr	r0, [r3, #0]
 80107f8:	4770      	bx	lr
 80107fa:	bf00      	nop
 80107fc:	20000018 	.word	0x20000018

08010800 <__sflush_r>:
 8010800:	898a      	ldrh	r2, [r1, #12]
 8010802:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010806:	4605      	mov	r5, r0
 8010808:	0710      	lsls	r0, r2, #28
 801080a:	460c      	mov	r4, r1
 801080c:	d458      	bmi.n	80108c0 <__sflush_r+0xc0>
 801080e:	684b      	ldr	r3, [r1, #4]
 8010810:	2b00      	cmp	r3, #0
 8010812:	dc05      	bgt.n	8010820 <__sflush_r+0x20>
 8010814:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8010816:	2b00      	cmp	r3, #0
 8010818:	dc02      	bgt.n	8010820 <__sflush_r+0x20>
 801081a:	2000      	movs	r0, #0
 801081c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010820:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8010822:	2e00      	cmp	r6, #0
 8010824:	d0f9      	beq.n	801081a <__sflush_r+0x1a>
 8010826:	2300      	movs	r3, #0
 8010828:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801082c:	682f      	ldr	r7, [r5, #0]
 801082e:	602b      	str	r3, [r5, #0]
 8010830:	d032      	beq.n	8010898 <__sflush_r+0x98>
 8010832:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8010834:	89a3      	ldrh	r3, [r4, #12]
 8010836:	075a      	lsls	r2, r3, #29
 8010838:	d505      	bpl.n	8010846 <__sflush_r+0x46>
 801083a:	6863      	ldr	r3, [r4, #4]
 801083c:	1ac0      	subs	r0, r0, r3
 801083e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8010840:	b10b      	cbz	r3, 8010846 <__sflush_r+0x46>
 8010842:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8010844:	1ac0      	subs	r0, r0, r3
 8010846:	2300      	movs	r3, #0
 8010848:	4602      	mov	r2, r0
 801084a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801084c:	6a21      	ldr	r1, [r4, #32]
 801084e:	4628      	mov	r0, r5
 8010850:	47b0      	blx	r6
 8010852:	1c43      	adds	r3, r0, #1
 8010854:	89a3      	ldrh	r3, [r4, #12]
 8010856:	d106      	bne.n	8010866 <__sflush_r+0x66>
 8010858:	6829      	ldr	r1, [r5, #0]
 801085a:	291d      	cmp	r1, #29
 801085c:	d82c      	bhi.n	80108b8 <__sflush_r+0xb8>
 801085e:	4a2a      	ldr	r2, [pc, #168]	; (8010908 <__sflush_r+0x108>)
 8010860:	40ca      	lsrs	r2, r1
 8010862:	07d6      	lsls	r6, r2, #31
 8010864:	d528      	bpl.n	80108b8 <__sflush_r+0xb8>
 8010866:	2200      	movs	r2, #0
 8010868:	6062      	str	r2, [r4, #4]
 801086a:	04d9      	lsls	r1, r3, #19
 801086c:	6922      	ldr	r2, [r4, #16]
 801086e:	6022      	str	r2, [r4, #0]
 8010870:	d504      	bpl.n	801087c <__sflush_r+0x7c>
 8010872:	1c42      	adds	r2, r0, #1
 8010874:	d101      	bne.n	801087a <__sflush_r+0x7a>
 8010876:	682b      	ldr	r3, [r5, #0]
 8010878:	b903      	cbnz	r3, 801087c <__sflush_r+0x7c>
 801087a:	6560      	str	r0, [r4, #84]	; 0x54
 801087c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801087e:	602f      	str	r7, [r5, #0]
 8010880:	2900      	cmp	r1, #0
 8010882:	d0ca      	beq.n	801081a <__sflush_r+0x1a>
 8010884:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8010888:	4299      	cmp	r1, r3
 801088a:	d002      	beq.n	8010892 <__sflush_r+0x92>
 801088c:	4628      	mov	r0, r5
 801088e:	f000 facb 	bl	8010e28 <_free_r>
 8010892:	2000      	movs	r0, #0
 8010894:	6360      	str	r0, [r4, #52]	; 0x34
 8010896:	e7c1      	b.n	801081c <__sflush_r+0x1c>
 8010898:	6a21      	ldr	r1, [r4, #32]
 801089a:	2301      	movs	r3, #1
 801089c:	4628      	mov	r0, r5
 801089e:	47b0      	blx	r6
 80108a0:	1c41      	adds	r1, r0, #1
 80108a2:	d1c7      	bne.n	8010834 <__sflush_r+0x34>
 80108a4:	682b      	ldr	r3, [r5, #0]
 80108a6:	2b00      	cmp	r3, #0
 80108a8:	d0c4      	beq.n	8010834 <__sflush_r+0x34>
 80108aa:	2b1d      	cmp	r3, #29
 80108ac:	d001      	beq.n	80108b2 <__sflush_r+0xb2>
 80108ae:	2b16      	cmp	r3, #22
 80108b0:	d101      	bne.n	80108b6 <__sflush_r+0xb6>
 80108b2:	602f      	str	r7, [r5, #0]
 80108b4:	e7b1      	b.n	801081a <__sflush_r+0x1a>
 80108b6:	89a3      	ldrh	r3, [r4, #12]
 80108b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80108bc:	81a3      	strh	r3, [r4, #12]
 80108be:	e7ad      	b.n	801081c <__sflush_r+0x1c>
 80108c0:	690f      	ldr	r7, [r1, #16]
 80108c2:	2f00      	cmp	r7, #0
 80108c4:	d0a9      	beq.n	801081a <__sflush_r+0x1a>
 80108c6:	0793      	lsls	r3, r2, #30
 80108c8:	680e      	ldr	r6, [r1, #0]
 80108ca:	bf08      	it	eq
 80108cc:	694b      	ldreq	r3, [r1, #20]
 80108ce:	600f      	str	r7, [r1, #0]
 80108d0:	bf18      	it	ne
 80108d2:	2300      	movne	r3, #0
 80108d4:	eba6 0807 	sub.w	r8, r6, r7
 80108d8:	608b      	str	r3, [r1, #8]
 80108da:	f1b8 0f00 	cmp.w	r8, #0
 80108de:	dd9c      	ble.n	801081a <__sflush_r+0x1a>
 80108e0:	6a21      	ldr	r1, [r4, #32]
 80108e2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80108e4:	4643      	mov	r3, r8
 80108e6:	463a      	mov	r2, r7
 80108e8:	4628      	mov	r0, r5
 80108ea:	47b0      	blx	r6
 80108ec:	2800      	cmp	r0, #0
 80108ee:	dc06      	bgt.n	80108fe <__sflush_r+0xfe>
 80108f0:	89a3      	ldrh	r3, [r4, #12]
 80108f2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80108f6:	81a3      	strh	r3, [r4, #12]
 80108f8:	f04f 30ff 	mov.w	r0, #4294967295
 80108fc:	e78e      	b.n	801081c <__sflush_r+0x1c>
 80108fe:	4407      	add	r7, r0
 8010900:	eba8 0800 	sub.w	r8, r8, r0
 8010904:	e7e9      	b.n	80108da <__sflush_r+0xda>
 8010906:	bf00      	nop
 8010908:	20400001 	.word	0x20400001

0801090c <_fflush_r>:
 801090c:	b538      	push	{r3, r4, r5, lr}
 801090e:	690b      	ldr	r3, [r1, #16]
 8010910:	4605      	mov	r5, r0
 8010912:	460c      	mov	r4, r1
 8010914:	b913      	cbnz	r3, 801091c <_fflush_r+0x10>
 8010916:	2500      	movs	r5, #0
 8010918:	4628      	mov	r0, r5
 801091a:	bd38      	pop	{r3, r4, r5, pc}
 801091c:	b118      	cbz	r0, 8010926 <_fflush_r+0x1a>
 801091e:	6983      	ldr	r3, [r0, #24]
 8010920:	b90b      	cbnz	r3, 8010926 <_fflush_r+0x1a>
 8010922:	f000 f887 	bl	8010a34 <__sinit>
 8010926:	4b14      	ldr	r3, [pc, #80]	; (8010978 <_fflush_r+0x6c>)
 8010928:	429c      	cmp	r4, r3
 801092a:	d11b      	bne.n	8010964 <_fflush_r+0x58>
 801092c:	686c      	ldr	r4, [r5, #4]
 801092e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010932:	2b00      	cmp	r3, #0
 8010934:	d0ef      	beq.n	8010916 <_fflush_r+0xa>
 8010936:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8010938:	07d0      	lsls	r0, r2, #31
 801093a:	d404      	bmi.n	8010946 <_fflush_r+0x3a>
 801093c:	0599      	lsls	r1, r3, #22
 801093e:	d402      	bmi.n	8010946 <_fflush_r+0x3a>
 8010940:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010942:	f000 f9ba 	bl	8010cba <__retarget_lock_acquire_recursive>
 8010946:	4628      	mov	r0, r5
 8010948:	4621      	mov	r1, r4
 801094a:	f7ff ff59 	bl	8010800 <__sflush_r>
 801094e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8010950:	07da      	lsls	r2, r3, #31
 8010952:	4605      	mov	r5, r0
 8010954:	d4e0      	bmi.n	8010918 <_fflush_r+0xc>
 8010956:	89a3      	ldrh	r3, [r4, #12]
 8010958:	059b      	lsls	r3, r3, #22
 801095a:	d4dd      	bmi.n	8010918 <_fflush_r+0xc>
 801095c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801095e:	f000 f9ae 	bl	8010cbe <__retarget_lock_release_recursive>
 8010962:	e7d9      	b.n	8010918 <_fflush_r+0xc>
 8010964:	4b05      	ldr	r3, [pc, #20]	; (801097c <_fflush_r+0x70>)
 8010966:	429c      	cmp	r4, r3
 8010968:	d101      	bne.n	801096e <_fflush_r+0x62>
 801096a:	68ac      	ldr	r4, [r5, #8]
 801096c:	e7df      	b.n	801092e <_fflush_r+0x22>
 801096e:	4b04      	ldr	r3, [pc, #16]	; (8010980 <_fflush_r+0x74>)
 8010970:	429c      	cmp	r4, r3
 8010972:	bf08      	it	eq
 8010974:	68ec      	ldreq	r4, [r5, #12]
 8010976:	e7da      	b.n	801092e <_fflush_r+0x22>
 8010978:	0801d094 	.word	0x0801d094
 801097c:	0801d0b4 	.word	0x0801d0b4
 8010980:	0801d074 	.word	0x0801d074

08010984 <std>:
 8010984:	2300      	movs	r3, #0
 8010986:	b510      	push	{r4, lr}
 8010988:	4604      	mov	r4, r0
 801098a:	e9c0 3300 	strd	r3, r3, [r0]
 801098e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8010992:	6083      	str	r3, [r0, #8]
 8010994:	8181      	strh	r1, [r0, #12]
 8010996:	6643      	str	r3, [r0, #100]	; 0x64
 8010998:	81c2      	strh	r2, [r0, #14]
 801099a:	6183      	str	r3, [r0, #24]
 801099c:	4619      	mov	r1, r3
 801099e:	2208      	movs	r2, #8
 80109a0:	305c      	adds	r0, #92	; 0x5c
 80109a2:	f000 fa29 	bl	8010df8 <memset>
 80109a6:	4b05      	ldr	r3, [pc, #20]	; (80109bc <std+0x38>)
 80109a8:	6263      	str	r3, [r4, #36]	; 0x24
 80109aa:	4b05      	ldr	r3, [pc, #20]	; (80109c0 <std+0x3c>)
 80109ac:	62a3      	str	r3, [r4, #40]	; 0x28
 80109ae:	4b05      	ldr	r3, [pc, #20]	; (80109c4 <std+0x40>)
 80109b0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80109b2:	4b05      	ldr	r3, [pc, #20]	; (80109c8 <std+0x44>)
 80109b4:	6224      	str	r4, [r4, #32]
 80109b6:	6323      	str	r3, [r4, #48]	; 0x30
 80109b8:	bd10      	pop	{r4, pc}
 80109ba:	bf00      	nop
 80109bc:	08011bed 	.word	0x08011bed
 80109c0:	08011c0f 	.word	0x08011c0f
 80109c4:	08011c47 	.word	0x08011c47
 80109c8:	08011c6b 	.word	0x08011c6b

080109cc <_cleanup_r>:
 80109cc:	4901      	ldr	r1, [pc, #4]	; (80109d4 <_cleanup_r+0x8>)
 80109ce:	f000 b92f 	b.w	8010c30 <_fwalk_reent>
 80109d2:	bf00      	nop
 80109d4:	0801090d 	.word	0x0801090d

080109d8 <__sfmoreglue>:
 80109d8:	b570      	push	{r4, r5, r6, lr}
 80109da:	1e4a      	subs	r2, r1, #1
 80109dc:	2568      	movs	r5, #104	; 0x68
 80109de:	4355      	muls	r5, r2
 80109e0:	460e      	mov	r6, r1
 80109e2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80109e6:	f000 fa6f 	bl	8010ec8 <_malloc_r>
 80109ea:	4604      	mov	r4, r0
 80109ec:	b140      	cbz	r0, 8010a00 <__sfmoreglue+0x28>
 80109ee:	2100      	movs	r1, #0
 80109f0:	e9c0 1600 	strd	r1, r6, [r0]
 80109f4:	300c      	adds	r0, #12
 80109f6:	60a0      	str	r0, [r4, #8]
 80109f8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80109fc:	f000 f9fc 	bl	8010df8 <memset>
 8010a00:	4620      	mov	r0, r4
 8010a02:	bd70      	pop	{r4, r5, r6, pc}

08010a04 <__sfp_lock_acquire>:
 8010a04:	4801      	ldr	r0, [pc, #4]	; (8010a0c <__sfp_lock_acquire+0x8>)
 8010a06:	f000 b958 	b.w	8010cba <__retarget_lock_acquire_recursive>
 8010a0a:	bf00      	nop
 8010a0c:	20005480 	.word	0x20005480

08010a10 <__sfp_lock_release>:
 8010a10:	4801      	ldr	r0, [pc, #4]	; (8010a18 <__sfp_lock_release+0x8>)
 8010a12:	f000 b954 	b.w	8010cbe <__retarget_lock_release_recursive>
 8010a16:	bf00      	nop
 8010a18:	20005480 	.word	0x20005480

08010a1c <__sinit_lock_acquire>:
 8010a1c:	4801      	ldr	r0, [pc, #4]	; (8010a24 <__sinit_lock_acquire+0x8>)
 8010a1e:	f000 b94c 	b.w	8010cba <__retarget_lock_acquire_recursive>
 8010a22:	bf00      	nop
 8010a24:	2000547f 	.word	0x2000547f

08010a28 <__sinit_lock_release>:
 8010a28:	4801      	ldr	r0, [pc, #4]	; (8010a30 <__sinit_lock_release+0x8>)
 8010a2a:	f000 b948 	b.w	8010cbe <__retarget_lock_release_recursive>
 8010a2e:	bf00      	nop
 8010a30:	2000547f 	.word	0x2000547f

08010a34 <__sinit>:
 8010a34:	b510      	push	{r4, lr}
 8010a36:	4604      	mov	r4, r0
 8010a38:	f7ff fff0 	bl	8010a1c <__sinit_lock_acquire>
 8010a3c:	69a3      	ldr	r3, [r4, #24]
 8010a3e:	b11b      	cbz	r3, 8010a48 <__sinit+0x14>
 8010a40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010a44:	f7ff bff0 	b.w	8010a28 <__sinit_lock_release>
 8010a48:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8010a4c:	6523      	str	r3, [r4, #80]	; 0x50
 8010a4e:	4b13      	ldr	r3, [pc, #76]	; (8010a9c <__sinit+0x68>)
 8010a50:	4a13      	ldr	r2, [pc, #76]	; (8010aa0 <__sinit+0x6c>)
 8010a52:	681b      	ldr	r3, [r3, #0]
 8010a54:	62a2      	str	r2, [r4, #40]	; 0x28
 8010a56:	42a3      	cmp	r3, r4
 8010a58:	bf04      	itt	eq
 8010a5a:	2301      	moveq	r3, #1
 8010a5c:	61a3      	streq	r3, [r4, #24]
 8010a5e:	4620      	mov	r0, r4
 8010a60:	f000 f820 	bl	8010aa4 <__sfp>
 8010a64:	6060      	str	r0, [r4, #4]
 8010a66:	4620      	mov	r0, r4
 8010a68:	f000 f81c 	bl	8010aa4 <__sfp>
 8010a6c:	60a0      	str	r0, [r4, #8]
 8010a6e:	4620      	mov	r0, r4
 8010a70:	f000 f818 	bl	8010aa4 <__sfp>
 8010a74:	2200      	movs	r2, #0
 8010a76:	60e0      	str	r0, [r4, #12]
 8010a78:	2104      	movs	r1, #4
 8010a7a:	6860      	ldr	r0, [r4, #4]
 8010a7c:	f7ff ff82 	bl	8010984 <std>
 8010a80:	68a0      	ldr	r0, [r4, #8]
 8010a82:	2201      	movs	r2, #1
 8010a84:	2109      	movs	r1, #9
 8010a86:	f7ff ff7d 	bl	8010984 <std>
 8010a8a:	68e0      	ldr	r0, [r4, #12]
 8010a8c:	2202      	movs	r2, #2
 8010a8e:	2112      	movs	r1, #18
 8010a90:	f7ff ff78 	bl	8010984 <std>
 8010a94:	2301      	movs	r3, #1
 8010a96:	61a3      	str	r3, [r4, #24]
 8010a98:	e7d2      	b.n	8010a40 <__sinit+0xc>
 8010a9a:	bf00      	nop
 8010a9c:	0801d0d4 	.word	0x0801d0d4
 8010aa0:	080109cd 	.word	0x080109cd

08010aa4 <__sfp>:
 8010aa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010aa6:	4607      	mov	r7, r0
 8010aa8:	f7ff ffac 	bl	8010a04 <__sfp_lock_acquire>
 8010aac:	4b1e      	ldr	r3, [pc, #120]	; (8010b28 <__sfp+0x84>)
 8010aae:	681e      	ldr	r6, [r3, #0]
 8010ab0:	69b3      	ldr	r3, [r6, #24]
 8010ab2:	b913      	cbnz	r3, 8010aba <__sfp+0x16>
 8010ab4:	4630      	mov	r0, r6
 8010ab6:	f7ff ffbd 	bl	8010a34 <__sinit>
 8010aba:	3648      	adds	r6, #72	; 0x48
 8010abc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8010ac0:	3b01      	subs	r3, #1
 8010ac2:	d503      	bpl.n	8010acc <__sfp+0x28>
 8010ac4:	6833      	ldr	r3, [r6, #0]
 8010ac6:	b30b      	cbz	r3, 8010b0c <__sfp+0x68>
 8010ac8:	6836      	ldr	r6, [r6, #0]
 8010aca:	e7f7      	b.n	8010abc <__sfp+0x18>
 8010acc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8010ad0:	b9d5      	cbnz	r5, 8010b08 <__sfp+0x64>
 8010ad2:	4b16      	ldr	r3, [pc, #88]	; (8010b2c <__sfp+0x88>)
 8010ad4:	60e3      	str	r3, [r4, #12]
 8010ad6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8010ada:	6665      	str	r5, [r4, #100]	; 0x64
 8010adc:	f000 f8ec 	bl	8010cb8 <__retarget_lock_init_recursive>
 8010ae0:	f7ff ff96 	bl	8010a10 <__sfp_lock_release>
 8010ae4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8010ae8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8010aec:	6025      	str	r5, [r4, #0]
 8010aee:	61a5      	str	r5, [r4, #24]
 8010af0:	2208      	movs	r2, #8
 8010af2:	4629      	mov	r1, r5
 8010af4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8010af8:	f000 f97e 	bl	8010df8 <memset>
 8010afc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8010b00:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8010b04:	4620      	mov	r0, r4
 8010b06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010b08:	3468      	adds	r4, #104	; 0x68
 8010b0a:	e7d9      	b.n	8010ac0 <__sfp+0x1c>
 8010b0c:	2104      	movs	r1, #4
 8010b0e:	4638      	mov	r0, r7
 8010b10:	f7ff ff62 	bl	80109d8 <__sfmoreglue>
 8010b14:	4604      	mov	r4, r0
 8010b16:	6030      	str	r0, [r6, #0]
 8010b18:	2800      	cmp	r0, #0
 8010b1a:	d1d5      	bne.n	8010ac8 <__sfp+0x24>
 8010b1c:	f7ff ff78 	bl	8010a10 <__sfp_lock_release>
 8010b20:	230c      	movs	r3, #12
 8010b22:	603b      	str	r3, [r7, #0]
 8010b24:	e7ee      	b.n	8010b04 <__sfp+0x60>
 8010b26:	bf00      	nop
 8010b28:	0801d0d4 	.word	0x0801d0d4
 8010b2c:	ffff0001 	.word	0xffff0001

08010b30 <fiprintf>:
 8010b30:	b40e      	push	{r1, r2, r3}
 8010b32:	b503      	push	{r0, r1, lr}
 8010b34:	4601      	mov	r1, r0
 8010b36:	ab03      	add	r3, sp, #12
 8010b38:	4805      	ldr	r0, [pc, #20]	; (8010b50 <fiprintf+0x20>)
 8010b3a:	f853 2b04 	ldr.w	r2, [r3], #4
 8010b3e:	6800      	ldr	r0, [r0, #0]
 8010b40:	9301      	str	r3, [sp, #4]
 8010b42:	f000 fa45 	bl	8010fd0 <_vfiprintf_r>
 8010b46:	b002      	add	sp, #8
 8010b48:	f85d eb04 	ldr.w	lr, [sp], #4
 8010b4c:	b003      	add	sp, #12
 8010b4e:	4770      	bx	lr
 8010b50:	20000018 	.word	0x20000018

08010b54 <_fputs_r>:
 8010b54:	b570      	push	{r4, r5, r6, lr}
 8010b56:	460e      	mov	r6, r1
 8010b58:	4614      	mov	r4, r2
 8010b5a:	4605      	mov	r5, r0
 8010b5c:	b118      	cbz	r0, 8010b66 <_fputs_r+0x12>
 8010b5e:	6983      	ldr	r3, [r0, #24]
 8010b60:	b90b      	cbnz	r3, 8010b66 <_fputs_r+0x12>
 8010b62:	f7ff ff67 	bl	8010a34 <__sinit>
 8010b66:	4b2b      	ldr	r3, [pc, #172]	; (8010c14 <_fputs_r+0xc0>)
 8010b68:	429c      	cmp	r4, r3
 8010b6a:	d11e      	bne.n	8010baa <_fputs_r+0x56>
 8010b6c:	686c      	ldr	r4, [r5, #4]
 8010b6e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8010b70:	07da      	lsls	r2, r3, #31
 8010b72:	d405      	bmi.n	8010b80 <_fputs_r+0x2c>
 8010b74:	89a3      	ldrh	r3, [r4, #12]
 8010b76:	059b      	lsls	r3, r3, #22
 8010b78:	d402      	bmi.n	8010b80 <_fputs_r+0x2c>
 8010b7a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010b7c:	f000 f89d 	bl	8010cba <__retarget_lock_acquire_recursive>
 8010b80:	89a3      	ldrh	r3, [r4, #12]
 8010b82:	0718      	lsls	r0, r3, #28
 8010b84:	d51b      	bpl.n	8010bbe <_fputs_r+0x6a>
 8010b86:	6923      	ldr	r3, [r4, #16]
 8010b88:	b1cb      	cbz	r3, 8010bbe <_fputs_r+0x6a>
 8010b8a:	3e01      	subs	r6, #1
 8010b8c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8010b90:	bb39      	cbnz	r1, 8010be2 <_fputs_r+0x8e>
 8010b92:	6e65      	ldr	r5, [r4, #100]	; 0x64
 8010b94:	f015 0501 	ands.w	r5, r5, #1
 8010b98:	d139      	bne.n	8010c0e <_fputs_r+0xba>
 8010b9a:	89a3      	ldrh	r3, [r4, #12]
 8010b9c:	0599      	lsls	r1, r3, #22
 8010b9e:	d402      	bmi.n	8010ba6 <_fputs_r+0x52>
 8010ba0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010ba2:	f000 f88c 	bl	8010cbe <__retarget_lock_release_recursive>
 8010ba6:	4628      	mov	r0, r5
 8010ba8:	bd70      	pop	{r4, r5, r6, pc}
 8010baa:	4b1b      	ldr	r3, [pc, #108]	; (8010c18 <_fputs_r+0xc4>)
 8010bac:	429c      	cmp	r4, r3
 8010bae:	d101      	bne.n	8010bb4 <_fputs_r+0x60>
 8010bb0:	68ac      	ldr	r4, [r5, #8]
 8010bb2:	e7dc      	b.n	8010b6e <_fputs_r+0x1a>
 8010bb4:	4b19      	ldr	r3, [pc, #100]	; (8010c1c <_fputs_r+0xc8>)
 8010bb6:	429c      	cmp	r4, r3
 8010bb8:	bf08      	it	eq
 8010bba:	68ec      	ldreq	r4, [r5, #12]
 8010bbc:	e7d7      	b.n	8010b6e <_fputs_r+0x1a>
 8010bbe:	4621      	mov	r1, r4
 8010bc0:	4628      	mov	r0, r5
 8010bc2:	f001 f8cd 	bl	8011d60 <__swsetup_r>
 8010bc6:	2800      	cmp	r0, #0
 8010bc8:	d0df      	beq.n	8010b8a <_fputs_r+0x36>
 8010bca:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8010bcc:	07da      	lsls	r2, r3, #31
 8010bce:	d405      	bmi.n	8010bdc <_fputs_r+0x88>
 8010bd0:	89a3      	ldrh	r3, [r4, #12]
 8010bd2:	059b      	lsls	r3, r3, #22
 8010bd4:	d402      	bmi.n	8010bdc <_fputs_r+0x88>
 8010bd6:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010bd8:	f000 f871 	bl	8010cbe <__retarget_lock_release_recursive>
 8010bdc:	f04f 35ff 	mov.w	r5, #4294967295
 8010be0:	e7e1      	b.n	8010ba6 <_fputs_r+0x52>
 8010be2:	68a3      	ldr	r3, [r4, #8]
 8010be4:	3b01      	subs	r3, #1
 8010be6:	2b00      	cmp	r3, #0
 8010be8:	60a3      	str	r3, [r4, #8]
 8010bea:	da04      	bge.n	8010bf6 <_fputs_r+0xa2>
 8010bec:	69a2      	ldr	r2, [r4, #24]
 8010bee:	4293      	cmp	r3, r2
 8010bf0:	db06      	blt.n	8010c00 <_fputs_r+0xac>
 8010bf2:	290a      	cmp	r1, #10
 8010bf4:	d004      	beq.n	8010c00 <_fputs_r+0xac>
 8010bf6:	6823      	ldr	r3, [r4, #0]
 8010bf8:	1c5a      	adds	r2, r3, #1
 8010bfa:	6022      	str	r2, [r4, #0]
 8010bfc:	7019      	strb	r1, [r3, #0]
 8010bfe:	e7c5      	b.n	8010b8c <_fputs_r+0x38>
 8010c00:	4622      	mov	r2, r4
 8010c02:	4628      	mov	r0, r5
 8010c04:	f001 f848 	bl	8011c98 <__swbuf_r>
 8010c08:	3001      	adds	r0, #1
 8010c0a:	d1bf      	bne.n	8010b8c <_fputs_r+0x38>
 8010c0c:	e7dd      	b.n	8010bca <_fputs_r+0x76>
 8010c0e:	460d      	mov	r5, r1
 8010c10:	e7c9      	b.n	8010ba6 <_fputs_r+0x52>
 8010c12:	bf00      	nop
 8010c14:	0801d094 	.word	0x0801d094
 8010c18:	0801d0b4 	.word	0x0801d0b4
 8010c1c:	0801d074 	.word	0x0801d074

08010c20 <fputs>:
 8010c20:	4b02      	ldr	r3, [pc, #8]	; (8010c2c <fputs+0xc>)
 8010c22:	460a      	mov	r2, r1
 8010c24:	4601      	mov	r1, r0
 8010c26:	6818      	ldr	r0, [r3, #0]
 8010c28:	f7ff bf94 	b.w	8010b54 <_fputs_r>
 8010c2c:	20000018 	.word	0x20000018

08010c30 <_fwalk_reent>:
 8010c30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010c34:	4606      	mov	r6, r0
 8010c36:	4688      	mov	r8, r1
 8010c38:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8010c3c:	2700      	movs	r7, #0
 8010c3e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8010c42:	f1b9 0901 	subs.w	r9, r9, #1
 8010c46:	d505      	bpl.n	8010c54 <_fwalk_reent+0x24>
 8010c48:	6824      	ldr	r4, [r4, #0]
 8010c4a:	2c00      	cmp	r4, #0
 8010c4c:	d1f7      	bne.n	8010c3e <_fwalk_reent+0xe>
 8010c4e:	4638      	mov	r0, r7
 8010c50:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010c54:	89ab      	ldrh	r3, [r5, #12]
 8010c56:	2b01      	cmp	r3, #1
 8010c58:	d907      	bls.n	8010c6a <_fwalk_reent+0x3a>
 8010c5a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8010c5e:	3301      	adds	r3, #1
 8010c60:	d003      	beq.n	8010c6a <_fwalk_reent+0x3a>
 8010c62:	4629      	mov	r1, r5
 8010c64:	4630      	mov	r0, r6
 8010c66:	47c0      	blx	r8
 8010c68:	4307      	orrs	r7, r0
 8010c6a:	3568      	adds	r5, #104	; 0x68
 8010c6c:	e7e9      	b.n	8010c42 <_fwalk_reent+0x12>
	...

08010c70 <__libc_init_array>:
 8010c70:	b570      	push	{r4, r5, r6, lr}
 8010c72:	4d0d      	ldr	r5, [pc, #52]	; (8010ca8 <__libc_init_array+0x38>)
 8010c74:	4c0d      	ldr	r4, [pc, #52]	; (8010cac <__libc_init_array+0x3c>)
 8010c76:	1b64      	subs	r4, r4, r5
 8010c78:	10a4      	asrs	r4, r4, #2
 8010c7a:	2600      	movs	r6, #0
 8010c7c:	42a6      	cmp	r6, r4
 8010c7e:	d109      	bne.n	8010c94 <__libc_init_array+0x24>
 8010c80:	4d0b      	ldr	r5, [pc, #44]	; (8010cb0 <__libc_init_array+0x40>)
 8010c82:	4c0c      	ldr	r4, [pc, #48]	; (8010cb4 <__libc_init_array+0x44>)
 8010c84:	f002 fd42 	bl	801370c <_init>
 8010c88:	1b64      	subs	r4, r4, r5
 8010c8a:	10a4      	asrs	r4, r4, #2
 8010c8c:	2600      	movs	r6, #0
 8010c8e:	42a6      	cmp	r6, r4
 8010c90:	d105      	bne.n	8010c9e <__libc_init_array+0x2e>
 8010c92:	bd70      	pop	{r4, r5, r6, pc}
 8010c94:	f855 3b04 	ldr.w	r3, [r5], #4
 8010c98:	4798      	blx	r3
 8010c9a:	3601      	adds	r6, #1
 8010c9c:	e7ee      	b.n	8010c7c <__libc_init_array+0xc>
 8010c9e:	f855 3b04 	ldr.w	r3, [r5], #4
 8010ca2:	4798      	blx	r3
 8010ca4:	3601      	adds	r6, #1
 8010ca6:	e7f2      	b.n	8010c8e <__libc_init_array+0x1e>
 8010ca8:	0801d428 	.word	0x0801d428
 8010cac:	0801d428 	.word	0x0801d428
 8010cb0:	0801d428 	.word	0x0801d428
 8010cb4:	0801d42c 	.word	0x0801d42c

08010cb8 <__retarget_lock_init_recursive>:
 8010cb8:	4770      	bx	lr

08010cba <__retarget_lock_acquire_recursive>:
 8010cba:	4770      	bx	lr

08010cbc <__retarget_lock_release>:
 8010cbc:	4770      	bx	lr

08010cbe <__retarget_lock_release_recursive>:
 8010cbe:	4770      	bx	lr

08010cc0 <__swhatbuf_r>:
 8010cc0:	b570      	push	{r4, r5, r6, lr}
 8010cc2:	460e      	mov	r6, r1
 8010cc4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010cc8:	2900      	cmp	r1, #0
 8010cca:	b096      	sub	sp, #88	; 0x58
 8010ccc:	4614      	mov	r4, r2
 8010cce:	461d      	mov	r5, r3
 8010cd0:	da07      	bge.n	8010ce2 <__swhatbuf_r+0x22>
 8010cd2:	2300      	movs	r3, #0
 8010cd4:	602b      	str	r3, [r5, #0]
 8010cd6:	89b3      	ldrh	r3, [r6, #12]
 8010cd8:	061a      	lsls	r2, r3, #24
 8010cda:	d410      	bmi.n	8010cfe <__swhatbuf_r+0x3e>
 8010cdc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010ce0:	e00e      	b.n	8010d00 <__swhatbuf_r+0x40>
 8010ce2:	466a      	mov	r2, sp
 8010ce4:	f001 ff94 	bl	8012c10 <_fstat_r>
 8010ce8:	2800      	cmp	r0, #0
 8010cea:	dbf2      	blt.n	8010cd2 <__swhatbuf_r+0x12>
 8010cec:	9a01      	ldr	r2, [sp, #4]
 8010cee:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8010cf2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8010cf6:	425a      	negs	r2, r3
 8010cf8:	415a      	adcs	r2, r3
 8010cfa:	602a      	str	r2, [r5, #0]
 8010cfc:	e7ee      	b.n	8010cdc <__swhatbuf_r+0x1c>
 8010cfe:	2340      	movs	r3, #64	; 0x40
 8010d00:	2000      	movs	r0, #0
 8010d02:	6023      	str	r3, [r4, #0]
 8010d04:	b016      	add	sp, #88	; 0x58
 8010d06:	bd70      	pop	{r4, r5, r6, pc}

08010d08 <__smakebuf_r>:
 8010d08:	898b      	ldrh	r3, [r1, #12]
 8010d0a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8010d0c:	079d      	lsls	r5, r3, #30
 8010d0e:	4606      	mov	r6, r0
 8010d10:	460c      	mov	r4, r1
 8010d12:	d507      	bpl.n	8010d24 <__smakebuf_r+0x1c>
 8010d14:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8010d18:	6023      	str	r3, [r4, #0]
 8010d1a:	6123      	str	r3, [r4, #16]
 8010d1c:	2301      	movs	r3, #1
 8010d1e:	6163      	str	r3, [r4, #20]
 8010d20:	b002      	add	sp, #8
 8010d22:	bd70      	pop	{r4, r5, r6, pc}
 8010d24:	ab01      	add	r3, sp, #4
 8010d26:	466a      	mov	r2, sp
 8010d28:	f7ff ffca 	bl	8010cc0 <__swhatbuf_r>
 8010d2c:	9900      	ldr	r1, [sp, #0]
 8010d2e:	4605      	mov	r5, r0
 8010d30:	4630      	mov	r0, r6
 8010d32:	f000 f8c9 	bl	8010ec8 <_malloc_r>
 8010d36:	b948      	cbnz	r0, 8010d4c <__smakebuf_r+0x44>
 8010d38:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010d3c:	059a      	lsls	r2, r3, #22
 8010d3e:	d4ef      	bmi.n	8010d20 <__smakebuf_r+0x18>
 8010d40:	f023 0303 	bic.w	r3, r3, #3
 8010d44:	f043 0302 	orr.w	r3, r3, #2
 8010d48:	81a3      	strh	r3, [r4, #12]
 8010d4a:	e7e3      	b.n	8010d14 <__smakebuf_r+0xc>
 8010d4c:	4b0d      	ldr	r3, [pc, #52]	; (8010d84 <__smakebuf_r+0x7c>)
 8010d4e:	62b3      	str	r3, [r6, #40]	; 0x28
 8010d50:	89a3      	ldrh	r3, [r4, #12]
 8010d52:	6020      	str	r0, [r4, #0]
 8010d54:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010d58:	81a3      	strh	r3, [r4, #12]
 8010d5a:	9b00      	ldr	r3, [sp, #0]
 8010d5c:	6163      	str	r3, [r4, #20]
 8010d5e:	9b01      	ldr	r3, [sp, #4]
 8010d60:	6120      	str	r0, [r4, #16]
 8010d62:	b15b      	cbz	r3, 8010d7c <__smakebuf_r+0x74>
 8010d64:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010d68:	4630      	mov	r0, r6
 8010d6a:	f001 ff63 	bl	8012c34 <_isatty_r>
 8010d6e:	b128      	cbz	r0, 8010d7c <__smakebuf_r+0x74>
 8010d70:	89a3      	ldrh	r3, [r4, #12]
 8010d72:	f023 0303 	bic.w	r3, r3, #3
 8010d76:	f043 0301 	orr.w	r3, r3, #1
 8010d7a:	81a3      	strh	r3, [r4, #12]
 8010d7c:	89a0      	ldrh	r0, [r4, #12]
 8010d7e:	4305      	orrs	r5, r0
 8010d80:	81a5      	strh	r5, [r4, #12]
 8010d82:	e7cd      	b.n	8010d20 <__smakebuf_r+0x18>
 8010d84:	080109cd 	.word	0x080109cd

08010d88 <malloc>:
 8010d88:	4b02      	ldr	r3, [pc, #8]	; (8010d94 <malloc+0xc>)
 8010d8a:	4601      	mov	r1, r0
 8010d8c:	6818      	ldr	r0, [r3, #0]
 8010d8e:	f000 b89b 	b.w	8010ec8 <_malloc_r>
 8010d92:	bf00      	nop
 8010d94:	20000018 	.word	0x20000018

08010d98 <free>:
 8010d98:	4b02      	ldr	r3, [pc, #8]	; (8010da4 <free+0xc>)
 8010d9a:	4601      	mov	r1, r0
 8010d9c:	6818      	ldr	r0, [r3, #0]
 8010d9e:	f000 b843 	b.w	8010e28 <_free_r>
 8010da2:	bf00      	nop
 8010da4:	20000018 	.word	0x20000018

08010da8 <memcpy>:
 8010da8:	440a      	add	r2, r1
 8010daa:	4291      	cmp	r1, r2
 8010dac:	f100 33ff 	add.w	r3, r0, #4294967295
 8010db0:	d100      	bne.n	8010db4 <memcpy+0xc>
 8010db2:	4770      	bx	lr
 8010db4:	b510      	push	{r4, lr}
 8010db6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010dba:	f803 4f01 	strb.w	r4, [r3, #1]!
 8010dbe:	4291      	cmp	r1, r2
 8010dc0:	d1f9      	bne.n	8010db6 <memcpy+0xe>
 8010dc2:	bd10      	pop	{r4, pc}

08010dc4 <memmove>:
 8010dc4:	4288      	cmp	r0, r1
 8010dc6:	b510      	push	{r4, lr}
 8010dc8:	eb01 0402 	add.w	r4, r1, r2
 8010dcc:	d902      	bls.n	8010dd4 <memmove+0x10>
 8010dce:	4284      	cmp	r4, r0
 8010dd0:	4623      	mov	r3, r4
 8010dd2:	d807      	bhi.n	8010de4 <memmove+0x20>
 8010dd4:	1e43      	subs	r3, r0, #1
 8010dd6:	42a1      	cmp	r1, r4
 8010dd8:	d008      	beq.n	8010dec <memmove+0x28>
 8010dda:	f811 2b01 	ldrb.w	r2, [r1], #1
 8010dde:	f803 2f01 	strb.w	r2, [r3, #1]!
 8010de2:	e7f8      	b.n	8010dd6 <memmove+0x12>
 8010de4:	4402      	add	r2, r0
 8010de6:	4601      	mov	r1, r0
 8010de8:	428a      	cmp	r2, r1
 8010dea:	d100      	bne.n	8010dee <memmove+0x2a>
 8010dec:	bd10      	pop	{r4, pc}
 8010dee:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8010df2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8010df6:	e7f7      	b.n	8010de8 <memmove+0x24>

08010df8 <memset>:
 8010df8:	4402      	add	r2, r0
 8010dfa:	4603      	mov	r3, r0
 8010dfc:	4293      	cmp	r3, r2
 8010dfe:	d100      	bne.n	8010e02 <memset+0xa>
 8010e00:	4770      	bx	lr
 8010e02:	f803 1b01 	strb.w	r1, [r3], #1
 8010e06:	e7f9      	b.n	8010dfc <memset+0x4>

08010e08 <_calloc_r>:
 8010e08:	b513      	push	{r0, r1, r4, lr}
 8010e0a:	434a      	muls	r2, r1
 8010e0c:	4611      	mov	r1, r2
 8010e0e:	9201      	str	r2, [sp, #4]
 8010e10:	f000 f85a 	bl	8010ec8 <_malloc_r>
 8010e14:	4604      	mov	r4, r0
 8010e16:	b118      	cbz	r0, 8010e20 <_calloc_r+0x18>
 8010e18:	9a01      	ldr	r2, [sp, #4]
 8010e1a:	2100      	movs	r1, #0
 8010e1c:	f7ff ffec 	bl	8010df8 <memset>
 8010e20:	4620      	mov	r0, r4
 8010e22:	b002      	add	sp, #8
 8010e24:	bd10      	pop	{r4, pc}
	...

08010e28 <_free_r>:
 8010e28:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8010e2a:	2900      	cmp	r1, #0
 8010e2c:	d048      	beq.n	8010ec0 <_free_r+0x98>
 8010e2e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010e32:	9001      	str	r0, [sp, #4]
 8010e34:	2b00      	cmp	r3, #0
 8010e36:	f1a1 0404 	sub.w	r4, r1, #4
 8010e3a:	bfb8      	it	lt
 8010e3c:	18e4      	addlt	r4, r4, r3
 8010e3e:	f001 ff1f 	bl	8012c80 <__malloc_lock>
 8010e42:	4a20      	ldr	r2, [pc, #128]	; (8010ec4 <_free_r+0x9c>)
 8010e44:	9801      	ldr	r0, [sp, #4]
 8010e46:	6813      	ldr	r3, [r2, #0]
 8010e48:	4615      	mov	r5, r2
 8010e4a:	b933      	cbnz	r3, 8010e5a <_free_r+0x32>
 8010e4c:	6063      	str	r3, [r4, #4]
 8010e4e:	6014      	str	r4, [r2, #0]
 8010e50:	b003      	add	sp, #12
 8010e52:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8010e56:	f001 bf19 	b.w	8012c8c <__malloc_unlock>
 8010e5a:	42a3      	cmp	r3, r4
 8010e5c:	d90b      	bls.n	8010e76 <_free_r+0x4e>
 8010e5e:	6821      	ldr	r1, [r4, #0]
 8010e60:	1862      	adds	r2, r4, r1
 8010e62:	4293      	cmp	r3, r2
 8010e64:	bf04      	itt	eq
 8010e66:	681a      	ldreq	r2, [r3, #0]
 8010e68:	685b      	ldreq	r3, [r3, #4]
 8010e6a:	6063      	str	r3, [r4, #4]
 8010e6c:	bf04      	itt	eq
 8010e6e:	1852      	addeq	r2, r2, r1
 8010e70:	6022      	streq	r2, [r4, #0]
 8010e72:	602c      	str	r4, [r5, #0]
 8010e74:	e7ec      	b.n	8010e50 <_free_r+0x28>
 8010e76:	461a      	mov	r2, r3
 8010e78:	685b      	ldr	r3, [r3, #4]
 8010e7a:	b10b      	cbz	r3, 8010e80 <_free_r+0x58>
 8010e7c:	42a3      	cmp	r3, r4
 8010e7e:	d9fa      	bls.n	8010e76 <_free_r+0x4e>
 8010e80:	6811      	ldr	r1, [r2, #0]
 8010e82:	1855      	adds	r5, r2, r1
 8010e84:	42a5      	cmp	r5, r4
 8010e86:	d10b      	bne.n	8010ea0 <_free_r+0x78>
 8010e88:	6824      	ldr	r4, [r4, #0]
 8010e8a:	4421      	add	r1, r4
 8010e8c:	1854      	adds	r4, r2, r1
 8010e8e:	42a3      	cmp	r3, r4
 8010e90:	6011      	str	r1, [r2, #0]
 8010e92:	d1dd      	bne.n	8010e50 <_free_r+0x28>
 8010e94:	681c      	ldr	r4, [r3, #0]
 8010e96:	685b      	ldr	r3, [r3, #4]
 8010e98:	6053      	str	r3, [r2, #4]
 8010e9a:	4421      	add	r1, r4
 8010e9c:	6011      	str	r1, [r2, #0]
 8010e9e:	e7d7      	b.n	8010e50 <_free_r+0x28>
 8010ea0:	d902      	bls.n	8010ea8 <_free_r+0x80>
 8010ea2:	230c      	movs	r3, #12
 8010ea4:	6003      	str	r3, [r0, #0]
 8010ea6:	e7d3      	b.n	8010e50 <_free_r+0x28>
 8010ea8:	6825      	ldr	r5, [r4, #0]
 8010eaa:	1961      	adds	r1, r4, r5
 8010eac:	428b      	cmp	r3, r1
 8010eae:	bf04      	itt	eq
 8010eb0:	6819      	ldreq	r1, [r3, #0]
 8010eb2:	685b      	ldreq	r3, [r3, #4]
 8010eb4:	6063      	str	r3, [r4, #4]
 8010eb6:	bf04      	itt	eq
 8010eb8:	1949      	addeq	r1, r1, r5
 8010eba:	6021      	streq	r1, [r4, #0]
 8010ebc:	6054      	str	r4, [r2, #4]
 8010ebe:	e7c7      	b.n	8010e50 <_free_r+0x28>
 8010ec0:	b003      	add	sp, #12
 8010ec2:	bd30      	pop	{r4, r5, pc}
 8010ec4:	200053e0 	.word	0x200053e0

08010ec8 <_malloc_r>:
 8010ec8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010eca:	1ccd      	adds	r5, r1, #3
 8010ecc:	f025 0503 	bic.w	r5, r5, #3
 8010ed0:	3508      	adds	r5, #8
 8010ed2:	2d0c      	cmp	r5, #12
 8010ed4:	bf38      	it	cc
 8010ed6:	250c      	movcc	r5, #12
 8010ed8:	2d00      	cmp	r5, #0
 8010eda:	4606      	mov	r6, r0
 8010edc:	db01      	blt.n	8010ee2 <_malloc_r+0x1a>
 8010ede:	42a9      	cmp	r1, r5
 8010ee0:	d903      	bls.n	8010eea <_malloc_r+0x22>
 8010ee2:	230c      	movs	r3, #12
 8010ee4:	6033      	str	r3, [r6, #0]
 8010ee6:	2000      	movs	r0, #0
 8010ee8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010eea:	f001 fec9 	bl	8012c80 <__malloc_lock>
 8010eee:	4921      	ldr	r1, [pc, #132]	; (8010f74 <_malloc_r+0xac>)
 8010ef0:	680a      	ldr	r2, [r1, #0]
 8010ef2:	4614      	mov	r4, r2
 8010ef4:	b99c      	cbnz	r4, 8010f1e <_malloc_r+0x56>
 8010ef6:	4f20      	ldr	r7, [pc, #128]	; (8010f78 <_malloc_r+0xb0>)
 8010ef8:	683b      	ldr	r3, [r7, #0]
 8010efa:	b923      	cbnz	r3, 8010f06 <_malloc_r+0x3e>
 8010efc:	4621      	mov	r1, r4
 8010efe:	4630      	mov	r0, r6
 8010f00:	f000 fe00 	bl	8011b04 <_sbrk_r>
 8010f04:	6038      	str	r0, [r7, #0]
 8010f06:	4629      	mov	r1, r5
 8010f08:	4630      	mov	r0, r6
 8010f0a:	f000 fdfb 	bl	8011b04 <_sbrk_r>
 8010f0e:	1c43      	adds	r3, r0, #1
 8010f10:	d123      	bne.n	8010f5a <_malloc_r+0x92>
 8010f12:	230c      	movs	r3, #12
 8010f14:	6033      	str	r3, [r6, #0]
 8010f16:	4630      	mov	r0, r6
 8010f18:	f001 feb8 	bl	8012c8c <__malloc_unlock>
 8010f1c:	e7e3      	b.n	8010ee6 <_malloc_r+0x1e>
 8010f1e:	6823      	ldr	r3, [r4, #0]
 8010f20:	1b5b      	subs	r3, r3, r5
 8010f22:	d417      	bmi.n	8010f54 <_malloc_r+0x8c>
 8010f24:	2b0b      	cmp	r3, #11
 8010f26:	d903      	bls.n	8010f30 <_malloc_r+0x68>
 8010f28:	6023      	str	r3, [r4, #0]
 8010f2a:	441c      	add	r4, r3
 8010f2c:	6025      	str	r5, [r4, #0]
 8010f2e:	e004      	b.n	8010f3a <_malloc_r+0x72>
 8010f30:	6863      	ldr	r3, [r4, #4]
 8010f32:	42a2      	cmp	r2, r4
 8010f34:	bf0c      	ite	eq
 8010f36:	600b      	streq	r3, [r1, #0]
 8010f38:	6053      	strne	r3, [r2, #4]
 8010f3a:	4630      	mov	r0, r6
 8010f3c:	f001 fea6 	bl	8012c8c <__malloc_unlock>
 8010f40:	f104 000b 	add.w	r0, r4, #11
 8010f44:	1d23      	adds	r3, r4, #4
 8010f46:	f020 0007 	bic.w	r0, r0, #7
 8010f4a:	1ac2      	subs	r2, r0, r3
 8010f4c:	d0cc      	beq.n	8010ee8 <_malloc_r+0x20>
 8010f4e:	1a1b      	subs	r3, r3, r0
 8010f50:	50a3      	str	r3, [r4, r2]
 8010f52:	e7c9      	b.n	8010ee8 <_malloc_r+0x20>
 8010f54:	4622      	mov	r2, r4
 8010f56:	6864      	ldr	r4, [r4, #4]
 8010f58:	e7cc      	b.n	8010ef4 <_malloc_r+0x2c>
 8010f5a:	1cc4      	adds	r4, r0, #3
 8010f5c:	f024 0403 	bic.w	r4, r4, #3
 8010f60:	42a0      	cmp	r0, r4
 8010f62:	d0e3      	beq.n	8010f2c <_malloc_r+0x64>
 8010f64:	1a21      	subs	r1, r4, r0
 8010f66:	4630      	mov	r0, r6
 8010f68:	f000 fdcc 	bl	8011b04 <_sbrk_r>
 8010f6c:	3001      	adds	r0, #1
 8010f6e:	d1dd      	bne.n	8010f2c <_malloc_r+0x64>
 8010f70:	e7cf      	b.n	8010f12 <_malloc_r+0x4a>
 8010f72:	bf00      	nop
 8010f74:	200053e0 	.word	0x200053e0
 8010f78:	200053e4 	.word	0x200053e4

08010f7c <__sfputc_r>:
 8010f7c:	6893      	ldr	r3, [r2, #8]
 8010f7e:	3b01      	subs	r3, #1
 8010f80:	2b00      	cmp	r3, #0
 8010f82:	b410      	push	{r4}
 8010f84:	6093      	str	r3, [r2, #8]
 8010f86:	da08      	bge.n	8010f9a <__sfputc_r+0x1e>
 8010f88:	6994      	ldr	r4, [r2, #24]
 8010f8a:	42a3      	cmp	r3, r4
 8010f8c:	db01      	blt.n	8010f92 <__sfputc_r+0x16>
 8010f8e:	290a      	cmp	r1, #10
 8010f90:	d103      	bne.n	8010f9a <__sfputc_r+0x1e>
 8010f92:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010f96:	f000 be7f 	b.w	8011c98 <__swbuf_r>
 8010f9a:	6813      	ldr	r3, [r2, #0]
 8010f9c:	1c58      	adds	r0, r3, #1
 8010f9e:	6010      	str	r0, [r2, #0]
 8010fa0:	7019      	strb	r1, [r3, #0]
 8010fa2:	4608      	mov	r0, r1
 8010fa4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010fa8:	4770      	bx	lr

08010faa <__sfputs_r>:
 8010faa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010fac:	4606      	mov	r6, r0
 8010fae:	460f      	mov	r7, r1
 8010fb0:	4614      	mov	r4, r2
 8010fb2:	18d5      	adds	r5, r2, r3
 8010fb4:	42ac      	cmp	r4, r5
 8010fb6:	d101      	bne.n	8010fbc <__sfputs_r+0x12>
 8010fb8:	2000      	movs	r0, #0
 8010fba:	e007      	b.n	8010fcc <__sfputs_r+0x22>
 8010fbc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010fc0:	463a      	mov	r2, r7
 8010fc2:	4630      	mov	r0, r6
 8010fc4:	f7ff ffda 	bl	8010f7c <__sfputc_r>
 8010fc8:	1c43      	adds	r3, r0, #1
 8010fca:	d1f3      	bne.n	8010fb4 <__sfputs_r+0xa>
 8010fcc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08010fd0 <_vfiprintf_r>:
 8010fd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010fd4:	460d      	mov	r5, r1
 8010fd6:	b09d      	sub	sp, #116	; 0x74
 8010fd8:	4614      	mov	r4, r2
 8010fda:	4698      	mov	r8, r3
 8010fdc:	4606      	mov	r6, r0
 8010fde:	b118      	cbz	r0, 8010fe8 <_vfiprintf_r+0x18>
 8010fe0:	6983      	ldr	r3, [r0, #24]
 8010fe2:	b90b      	cbnz	r3, 8010fe8 <_vfiprintf_r+0x18>
 8010fe4:	f7ff fd26 	bl	8010a34 <__sinit>
 8010fe8:	4b89      	ldr	r3, [pc, #548]	; (8011210 <_vfiprintf_r+0x240>)
 8010fea:	429d      	cmp	r5, r3
 8010fec:	d11b      	bne.n	8011026 <_vfiprintf_r+0x56>
 8010fee:	6875      	ldr	r5, [r6, #4]
 8010ff0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010ff2:	07d9      	lsls	r1, r3, #31
 8010ff4:	d405      	bmi.n	8011002 <_vfiprintf_r+0x32>
 8010ff6:	89ab      	ldrh	r3, [r5, #12]
 8010ff8:	059a      	lsls	r2, r3, #22
 8010ffa:	d402      	bmi.n	8011002 <_vfiprintf_r+0x32>
 8010ffc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8010ffe:	f7ff fe5c 	bl	8010cba <__retarget_lock_acquire_recursive>
 8011002:	89ab      	ldrh	r3, [r5, #12]
 8011004:	071b      	lsls	r3, r3, #28
 8011006:	d501      	bpl.n	801100c <_vfiprintf_r+0x3c>
 8011008:	692b      	ldr	r3, [r5, #16]
 801100a:	b9eb      	cbnz	r3, 8011048 <_vfiprintf_r+0x78>
 801100c:	4629      	mov	r1, r5
 801100e:	4630      	mov	r0, r6
 8011010:	f000 fea6 	bl	8011d60 <__swsetup_r>
 8011014:	b1c0      	cbz	r0, 8011048 <_vfiprintf_r+0x78>
 8011016:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8011018:	07dc      	lsls	r4, r3, #31
 801101a:	d50e      	bpl.n	801103a <_vfiprintf_r+0x6a>
 801101c:	f04f 30ff 	mov.w	r0, #4294967295
 8011020:	b01d      	add	sp, #116	; 0x74
 8011022:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011026:	4b7b      	ldr	r3, [pc, #492]	; (8011214 <_vfiprintf_r+0x244>)
 8011028:	429d      	cmp	r5, r3
 801102a:	d101      	bne.n	8011030 <_vfiprintf_r+0x60>
 801102c:	68b5      	ldr	r5, [r6, #8]
 801102e:	e7df      	b.n	8010ff0 <_vfiprintf_r+0x20>
 8011030:	4b79      	ldr	r3, [pc, #484]	; (8011218 <_vfiprintf_r+0x248>)
 8011032:	429d      	cmp	r5, r3
 8011034:	bf08      	it	eq
 8011036:	68f5      	ldreq	r5, [r6, #12]
 8011038:	e7da      	b.n	8010ff0 <_vfiprintf_r+0x20>
 801103a:	89ab      	ldrh	r3, [r5, #12]
 801103c:	0598      	lsls	r0, r3, #22
 801103e:	d4ed      	bmi.n	801101c <_vfiprintf_r+0x4c>
 8011040:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8011042:	f7ff fe3c 	bl	8010cbe <__retarget_lock_release_recursive>
 8011046:	e7e9      	b.n	801101c <_vfiprintf_r+0x4c>
 8011048:	2300      	movs	r3, #0
 801104a:	9309      	str	r3, [sp, #36]	; 0x24
 801104c:	2320      	movs	r3, #32
 801104e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8011052:	f8cd 800c 	str.w	r8, [sp, #12]
 8011056:	2330      	movs	r3, #48	; 0x30
 8011058:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 801121c <_vfiprintf_r+0x24c>
 801105c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8011060:	f04f 0901 	mov.w	r9, #1
 8011064:	4623      	mov	r3, r4
 8011066:	469a      	mov	sl, r3
 8011068:	f813 2b01 	ldrb.w	r2, [r3], #1
 801106c:	b10a      	cbz	r2, 8011072 <_vfiprintf_r+0xa2>
 801106e:	2a25      	cmp	r2, #37	; 0x25
 8011070:	d1f9      	bne.n	8011066 <_vfiprintf_r+0x96>
 8011072:	ebba 0b04 	subs.w	fp, sl, r4
 8011076:	d00b      	beq.n	8011090 <_vfiprintf_r+0xc0>
 8011078:	465b      	mov	r3, fp
 801107a:	4622      	mov	r2, r4
 801107c:	4629      	mov	r1, r5
 801107e:	4630      	mov	r0, r6
 8011080:	f7ff ff93 	bl	8010faa <__sfputs_r>
 8011084:	3001      	adds	r0, #1
 8011086:	f000 80aa 	beq.w	80111de <_vfiprintf_r+0x20e>
 801108a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801108c:	445a      	add	r2, fp
 801108e:	9209      	str	r2, [sp, #36]	; 0x24
 8011090:	f89a 3000 	ldrb.w	r3, [sl]
 8011094:	2b00      	cmp	r3, #0
 8011096:	f000 80a2 	beq.w	80111de <_vfiprintf_r+0x20e>
 801109a:	2300      	movs	r3, #0
 801109c:	f04f 32ff 	mov.w	r2, #4294967295
 80110a0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80110a4:	f10a 0a01 	add.w	sl, sl, #1
 80110a8:	9304      	str	r3, [sp, #16]
 80110aa:	9307      	str	r3, [sp, #28]
 80110ac:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80110b0:	931a      	str	r3, [sp, #104]	; 0x68
 80110b2:	4654      	mov	r4, sl
 80110b4:	2205      	movs	r2, #5
 80110b6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80110ba:	4858      	ldr	r0, [pc, #352]	; (801121c <_vfiprintf_r+0x24c>)
 80110bc:	f7ef f890 	bl	80001e0 <memchr>
 80110c0:	9a04      	ldr	r2, [sp, #16]
 80110c2:	b9d8      	cbnz	r0, 80110fc <_vfiprintf_r+0x12c>
 80110c4:	06d1      	lsls	r1, r2, #27
 80110c6:	bf44      	itt	mi
 80110c8:	2320      	movmi	r3, #32
 80110ca:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80110ce:	0713      	lsls	r3, r2, #28
 80110d0:	bf44      	itt	mi
 80110d2:	232b      	movmi	r3, #43	; 0x2b
 80110d4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80110d8:	f89a 3000 	ldrb.w	r3, [sl]
 80110dc:	2b2a      	cmp	r3, #42	; 0x2a
 80110de:	d015      	beq.n	801110c <_vfiprintf_r+0x13c>
 80110e0:	9a07      	ldr	r2, [sp, #28]
 80110e2:	4654      	mov	r4, sl
 80110e4:	2000      	movs	r0, #0
 80110e6:	f04f 0c0a 	mov.w	ip, #10
 80110ea:	4621      	mov	r1, r4
 80110ec:	f811 3b01 	ldrb.w	r3, [r1], #1
 80110f0:	3b30      	subs	r3, #48	; 0x30
 80110f2:	2b09      	cmp	r3, #9
 80110f4:	d94e      	bls.n	8011194 <_vfiprintf_r+0x1c4>
 80110f6:	b1b0      	cbz	r0, 8011126 <_vfiprintf_r+0x156>
 80110f8:	9207      	str	r2, [sp, #28]
 80110fa:	e014      	b.n	8011126 <_vfiprintf_r+0x156>
 80110fc:	eba0 0308 	sub.w	r3, r0, r8
 8011100:	fa09 f303 	lsl.w	r3, r9, r3
 8011104:	4313      	orrs	r3, r2
 8011106:	9304      	str	r3, [sp, #16]
 8011108:	46a2      	mov	sl, r4
 801110a:	e7d2      	b.n	80110b2 <_vfiprintf_r+0xe2>
 801110c:	9b03      	ldr	r3, [sp, #12]
 801110e:	1d19      	adds	r1, r3, #4
 8011110:	681b      	ldr	r3, [r3, #0]
 8011112:	9103      	str	r1, [sp, #12]
 8011114:	2b00      	cmp	r3, #0
 8011116:	bfbb      	ittet	lt
 8011118:	425b      	neglt	r3, r3
 801111a:	f042 0202 	orrlt.w	r2, r2, #2
 801111e:	9307      	strge	r3, [sp, #28]
 8011120:	9307      	strlt	r3, [sp, #28]
 8011122:	bfb8      	it	lt
 8011124:	9204      	strlt	r2, [sp, #16]
 8011126:	7823      	ldrb	r3, [r4, #0]
 8011128:	2b2e      	cmp	r3, #46	; 0x2e
 801112a:	d10c      	bne.n	8011146 <_vfiprintf_r+0x176>
 801112c:	7863      	ldrb	r3, [r4, #1]
 801112e:	2b2a      	cmp	r3, #42	; 0x2a
 8011130:	d135      	bne.n	801119e <_vfiprintf_r+0x1ce>
 8011132:	9b03      	ldr	r3, [sp, #12]
 8011134:	1d1a      	adds	r2, r3, #4
 8011136:	681b      	ldr	r3, [r3, #0]
 8011138:	9203      	str	r2, [sp, #12]
 801113a:	2b00      	cmp	r3, #0
 801113c:	bfb8      	it	lt
 801113e:	f04f 33ff 	movlt.w	r3, #4294967295
 8011142:	3402      	adds	r4, #2
 8011144:	9305      	str	r3, [sp, #20]
 8011146:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 801122c <_vfiprintf_r+0x25c>
 801114a:	7821      	ldrb	r1, [r4, #0]
 801114c:	2203      	movs	r2, #3
 801114e:	4650      	mov	r0, sl
 8011150:	f7ef f846 	bl	80001e0 <memchr>
 8011154:	b140      	cbz	r0, 8011168 <_vfiprintf_r+0x198>
 8011156:	2340      	movs	r3, #64	; 0x40
 8011158:	eba0 000a 	sub.w	r0, r0, sl
 801115c:	fa03 f000 	lsl.w	r0, r3, r0
 8011160:	9b04      	ldr	r3, [sp, #16]
 8011162:	4303      	orrs	r3, r0
 8011164:	3401      	adds	r4, #1
 8011166:	9304      	str	r3, [sp, #16]
 8011168:	f814 1b01 	ldrb.w	r1, [r4], #1
 801116c:	482c      	ldr	r0, [pc, #176]	; (8011220 <_vfiprintf_r+0x250>)
 801116e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8011172:	2206      	movs	r2, #6
 8011174:	f7ef f834 	bl	80001e0 <memchr>
 8011178:	2800      	cmp	r0, #0
 801117a:	d03f      	beq.n	80111fc <_vfiprintf_r+0x22c>
 801117c:	4b29      	ldr	r3, [pc, #164]	; (8011224 <_vfiprintf_r+0x254>)
 801117e:	bb1b      	cbnz	r3, 80111c8 <_vfiprintf_r+0x1f8>
 8011180:	9b03      	ldr	r3, [sp, #12]
 8011182:	3307      	adds	r3, #7
 8011184:	f023 0307 	bic.w	r3, r3, #7
 8011188:	3308      	adds	r3, #8
 801118a:	9303      	str	r3, [sp, #12]
 801118c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801118e:	443b      	add	r3, r7
 8011190:	9309      	str	r3, [sp, #36]	; 0x24
 8011192:	e767      	b.n	8011064 <_vfiprintf_r+0x94>
 8011194:	fb0c 3202 	mla	r2, ip, r2, r3
 8011198:	460c      	mov	r4, r1
 801119a:	2001      	movs	r0, #1
 801119c:	e7a5      	b.n	80110ea <_vfiprintf_r+0x11a>
 801119e:	2300      	movs	r3, #0
 80111a0:	3401      	adds	r4, #1
 80111a2:	9305      	str	r3, [sp, #20]
 80111a4:	4619      	mov	r1, r3
 80111a6:	f04f 0c0a 	mov.w	ip, #10
 80111aa:	4620      	mov	r0, r4
 80111ac:	f810 2b01 	ldrb.w	r2, [r0], #1
 80111b0:	3a30      	subs	r2, #48	; 0x30
 80111b2:	2a09      	cmp	r2, #9
 80111b4:	d903      	bls.n	80111be <_vfiprintf_r+0x1ee>
 80111b6:	2b00      	cmp	r3, #0
 80111b8:	d0c5      	beq.n	8011146 <_vfiprintf_r+0x176>
 80111ba:	9105      	str	r1, [sp, #20]
 80111bc:	e7c3      	b.n	8011146 <_vfiprintf_r+0x176>
 80111be:	fb0c 2101 	mla	r1, ip, r1, r2
 80111c2:	4604      	mov	r4, r0
 80111c4:	2301      	movs	r3, #1
 80111c6:	e7f0      	b.n	80111aa <_vfiprintf_r+0x1da>
 80111c8:	ab03      	add	r3, sp, #12
 80111ca:	9300      	str	r3, [sp, #0]
 80111cc:	462a      	mov	r2, r5
 80111ce:	4b16      	ldr	r3, [pc, #88]	; (8011228 <_vfiprintf_r+0x258>)
 80111d0:	a904      	add	r1, sp, #16
 80111d2:	4630      	mov	r0, r6
 80111d4:	f000 f8cc 	bl	8011370 <_printf_float>
 80111d8:	4607      	mov	r7, r0
 80111da:	1c78      	adds	r0, r7, #1
 80111dc:	d1d6      	bne.n	801118c <_vfiprintf_r+0x1bc>
 80111de:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80111e0:	07d9      	lsls	r1, r3, #31
 80111e2:	d405      	bmi.n	80111f0 <_vfiprintf_r+0x220>
 80111e4:	89ab      	ldrh	r3, [r5, #12]
 80111e6:	059a      	lsls	r2, r3, #22
 80111e8:	d402      	bmi.n	80111f0 <_vfiprintf_r+0x220>
 80111ea:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80111ec:	f7ff fd67 	bl	8010cbe <__retarget_lock_release_recursive>
 80111f0:	89ab      	ldrh	r3, [r5, #12]
 80111f2:	065b      	lsls	r3, r3, #25
 80111f4:	f53f af12 	bmi.w	801101c <_vfiprintf_r+0x4c>
 80111f8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80111fa:	e711      	b.n	8011020 <_vfiprintf_r+0x50>
 80111fc:	ab03      	add	r3, sp, #12
 80111fe:	9300      	str	r3, [sp, #0]
 8011200:	462a      	mov	r2, r5
 8011202:	4b09      	ldr	r3, [pc, #36]	; (8011228 <_vfiprintf_r+0x258>)
 8011204:	a904      	add	r1, sp, #16
 8011206:	4630      	mov	r0, r6
 8011208:	f000 fb56 	bl	80118b8 <_printf_i>
 801120c:	e7e4      	b.n	80111d8 <_vfiprintf_r+0x208>
 801120e:	bf00      	nop
 8011210:	0801d094 	.word	0x0801d094
 8011214:	0801d0b4 	.word	0x0801d0b4
 8011218:	0801d074 	.word	0x0801d074
 801121c:	0801d0d8 	.word	0x0801d0d8
 8011220:	0801d0e2 	.word	0x0801d0e2
 8011224:	08011371 	.word	0x08011371
 8011228:	08010fab 	.word	0x08010fab
 801122c:	0801d0de 	.word	0x0801d0de

08011230 <__cvt>:
 8011230:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8011234:	ec55 4b10 	vmov	r4, r5, d0
 8011238:	2d00      	cmp	r5, #0
 801123a:	460e      	mov	r6, r1
 801123c:	4619      	mov	r1, r3
 801123e:	462b      	mov	r3, r5
 8011240:	bfbb      	ittet	lt
 8011242:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8011246:	461d      	movlt	r5, r3
 8011248:	2300      	movge	r3, #0
 801124a:	232d      	movlt	r3, #45	; 0x2d
 801124c:	700b      	strb	r3, [r1, #0]
 801124e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011250:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8011254:	4691      	mov	r9, r2
 8011256:	f023 0820 	bic.w	r8, r3, #32
 801125a:	bfbc      	itt	lt
 801125c:	4622      	movlt	r2, r4
 801125e:	4614      	movlt	r4, r2
 8011260:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8011264:	d005      	beq.n	8011272 <__cvt+0x42>
 8011266:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 801126a:	d100      	bne.n	801126e <__cvt+0x3e>
 801126c:	3601      	adds	r6, #1
 801126e:	2102      	movs	r1, #2
 8011270:	e000      	b.n	8011274 <__cvt+0x44>
 8011272:	2103      	movs	r1, #3
 8011274:	ab03      	add	r3, sp, #12
 8011276:	9301      	str	r3, [sp, #4]
 8011278:	ab02      	add	r3, sp, #8
 801127a:	9300      	str	r3, [sp, #0]
 801127c:	ec45 4b10 	vmov	d0, r4, r5
 8011280:	4653      	mov	r3, sl
 8011282:	4632      	mov	r2, r6
 8011284:	f000 fed8 	bl	8012038 <_dtoa_r>
 8011288:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 801128c:	4607      	mov	r7, r0
 801128e:	d102      	bne.n	8011296 <__cvt+0x66>
 8011290:	f019 0f01 	tst.w	r9, #1
 8011294:	d022      	beq.n	80112dc <__cvt+0xac>
 8011296:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 801129a:	eb07 0906 	add.w	r9, r7, r6
 801129e:	d110      	bne.n	80112c2 <__cvt+0x92>
 80112a0:	783b      	ldrb	r3, [r7, #0]
 80112a2:	2b30      	cmp	r3, #48	; 0x30
 80112a4:	d10a      	bne.n	80112bc <__cvt+0x8c>
 80112a6:	2200      	movs	r2, #0
 80112a8:	2300      	movs	r3, #0
 80112aa:	4620      	mov	r0, r4
 80112ac:	4629      	mov	r1, r5
 80112ae:	f7ef fc1d 	bl	8000aec <__aeabi_dcmpeq>
 80112b2:	b918      	cbnz	r0, 80112bc <__cvt+0x8c>
 80112b4:	f1c6 0601 	rsb	r6, r6, #1
 80112b8:	f8ca 6000 	str.w	r6, [sl]
 80112bc:	f8da 3000 	ldr.w	r3, [sl]
 80112c0:	4499      	add	r9, r3
 80112c2:	2200      	movs	r2, #0
 80112c4:	2300      	movs	r3, #0
 80112c6:	4620      	mov	r0, r4
 80112c8:	4629      	mov	r1, r5
 80112ca:	f7ef fc0f 	bl	8000aec <__aeabi_dcmpeq>
 80112ce:	b108      	cbz	r0, 80112d4 <__cvt+0xa4>
 80112d0:	f8cd 900c 	str.w	r9, [sp, #12]
 80112d4:	2230      	movs	r2, #48	; 0x30
 80112d6:	9b03      	ldr	r3, [sp, #12]
 80112d8:	454b      	cmp	r3, r9
 80112da:	d307      	bcc.n	80112ec <__cvt+0xbc>
 80112dc:	9b03      	ldr	r3, [sp, #12]
 80112de:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80112e0:	1bdb      	subs	r3, r3, r7
 80112e2:	4638      	mov	r0, r7
 80112e4:	6013      	str	r3, [r2, #0]
 80112e6:	b004      	add	sp, #16
 80112e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80112ec:	1c59      	adds	r1, r3, #1
 80112ee:	9103      	str	r1, [sp, #12]
 80112f0:	701a      	strb	r2, [r3, #0]
 80112f2:	e7f0      	b.n	80112d6 <__cvt+0xa6>

080112f4 <__exponent>:
 80112f4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80112f6:	4603      	mov	r3, r0
 80112f8:	2900      	cmp	r1, #0
 80112fa:	bfb8      	it	lt
 80112fc:	4249      	neglt	r1, r1
 80112fe:	f803 2b02 	strb.w	r2, [r3], #2
 8011302:	bfb4      	ite	lt
 8011304:	222d      	movlt	r2, #45	; 0x2d
 8011306:	222b      	movge	r2, #43	; 0x2b
 8011308:	2909      	cmp	r1, #9
 801130a:	7042      	strb	r2, [r0, #1]
 801130c:	dd2a      	ble.n	8011364 <__exponent+0x70>
 801130e:	f10d 0407 	add.w	r4, sp, #7
 8011312:	46a4      	mov	ip, r4
 8011314:	270a      	movs	r7, #10
 8011316:	46a6      	mov	lr, r4
 8011318:	460a      	mov	r2, r1
 801131a:	fb91 f6f7 	sdiv	r6, r1, r7
 801131e:	fb07 1516 	mls	r5, r7, r6, r1
 8011322:	3530      	adds	r5, #48	; 0x30
 8011324:	2a63      	cmp	r2, #99	; 0x63
 8011326:	f104 34ff 	add.w	r4, r4, #4294967295
 801132a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 801132e:	4631      	mov	r1, r6
 8011330:	dcf1      	bgt.n	8011316 <__exponent+0x22>
 8011332:	3130      	adds	r1, #48	; 0x30
 8011334:	f1ae 0502 	sub.w	r5, lr, #2
 8011338:	f804 1c01 	strb.w	r1, [r4, #-1]
 801133c:	1c44      	adds	r4, r0, #1
 801133e:	4629      	mov	r1, r5
 8011340:	4561      	cmp	r1, ip
 8011342:	d30a      	bcc.n	801135a <__exponent+0x66>
 8011344:	f10d 0209 	add.w	r2, sp, #9
 8011348:	eba2 020e 	sub.w	r2, r2, lr
 801134c:	4565      	cmp	r5, ip
 801134e:	bf88      	it	hi
 8011350:	2200      	movhi	r2, #0
 8011352:	4413      	add	r3, r2
 8011354:	1a18      	subs	r0, r3, r0
 8011356:	b003      	add	sp, #12
 8011358:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801135a:	f811 2b01 	ldrb.w	r2, [r1], #1
 801135e:	f804 2f01 	strb.w	r2, [r4, #1]!
 8011362:	e7ed      	b.n	8011340 <__exponent+0x4c>
 8011364:	2330      	movs	r3, #48	; 0x30
 8011366:	3130      	adds	r1, #48	; 0x30
 8011368:	7083      	strb	r3, [r0, #2]
 801136a:	70c1      	strb	r1, [r0, #3]
 801136c:	1d03      	adds	r3, r0, #4
 801136e:	e7f1      	b.n	8011354 <__exponent+0x60>

08011370 <_printf_float>:
 8011370:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011374:	ed2d 8b02 	vpush	{d8}
 8011378:	b08d      	sub	sp, #52	; 0x34
 801137a:	460c      	mov	r4, r1
 801137c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8011380:	4616      	mov	r6, r2
 8011382:	461f      	mov	r7, r3
 8011384:	4605      	mov	r5, r0
 8011386:	f001 fc65 	bl	8012c54 <_localeconv_r>
 801138a:	f8d0 a000 	ldr.w	sl, [r0]
 801138e:	4650      	mov	r0, sl
 8011390:	f7ee ff80 	bl	8000294 <strlen>
 8011394:	2300      	movs	r3, #0
 8011396:	930a      	str	r3, [sp, #40]	; 0x28
 8011398:	6823      	ldr	r3, [r4, #0]
 801139a:	9305      	str	r3, [sp, #20]
 801139c:	f8d8 3000 	ldr.w	r3, [r8]
 80113a0:	f894 b018 	ldrb.w	fp, [r4, #24]
 80113a4:	3307      	adds	r3, #7
 80113a6:	f023 0307 	bic.w	r3, r3, #7
 80113aa:	f103 0208 	add.w	r2, r3, #8
 80113ae:	f8c8 2000 	str.w	r2, [r8]
 80113b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80113b6:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80113ba:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80113be:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80113c2:	9307      	str	r3, [sp, #28]
 80113c4:	f8cd 8018 	str.w	r8, [sp, #24]
 80113c8:	ee08 0a10 	vmov	s16, r0
 80113cc:	4b9f      	ldr	r3, [pc, #636]	; (801164c <_printf_float+0x2dc>)
 80113ce:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80113d2:	f04f 32ff 	mov.w	r2, #4294967295
 80113d6:	f7ef fbbb 	bl	8000b50 <__aeabi_dcmpun>
 80113da:	bb88      	cbnz	r0, 8011440 <_printf_float+0xd0>
 80113dc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80113e0:	4b9a      	ldr	r3, [pc, #616]	; (801164c <_printf_float+0x2dc>)
 80113e2:	f04f 32ff 	mov.w	r2, #4294967295
 80113e6:	f7ef fb95 	bl	8000b14 <__aeabi_dcmple>
 80113ea:	bb48      	cbnz	r0, 8011440 <_printf_float+0xd0>
 80113ec:	2200      	movs	r2, #0
 80113ee:	2300      	movs	r3, #0
 80113f0:	4640      	mov	r0, r8
 80113f2:	4649      	mov	r1, r9
 80113f4:	f7ef fb84 	bl	8000b00 <__aeabi_dcmplt>
 80113f8:	b110      	cbz	r0, 8011400 <_printf_float+0x90>
 80113fa:	232d      	movs	r3, #45	; 0x2d
 80113fc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011400:	4b93      	ldr	r3, [pc, #588]	; (8011650 <_printf_float+0x2e0>)
 8011402:	4894      	ldr	r0, [pc, #592]	; (8011654 <_printf_float+0x2e4>)
 8011404:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8011408:	bf94      	ite	ls
 801140a:	4698      	movls	r8, r3
 801140c:	4680      	movhi	r8, r0
 801140e:	2303      	movs	r3, #3
 8011410:	6123      	str	r3, [r4, #16]
 8011412:	9b05      	ldr	r3, [sp, #20]
 8011414:	f023 0204 	bic.w	r2, r3, #4
 8011418:	6022      	str	r2, [r4, #0]
 801141a:	f04f 0900 	mov.w	r9, #0
 801141e:	9700      	str	r7, [sp, #0]
 8011420:	4633      	mov	r3, r6
 8011422:	aa0b      	add	r2, sp, #44	; 0x2c
 8011424:	4621      	mov	r1, r4
 8011426:	4628      	mov	r0, r5
 8011428:	f000 f9d8 	bl	80117dc <_printf_common>
 801142c:	3001      	adds	r0, #1
 801142e:	f040 8090 	bne.w	8011552 <_printf_float+0x1e2>
 8011432:	f04f 30ff 	mov.w	r0, #4294967295
 8011436:	b00d      	add	sp, #52	; 0x34
 8011438:	ecbd 8b02 	vpop	{d8}
 801143c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011440:	4642      	mov	r2, r8
 8011442:	464b      	mov	r3, r9
 8011444:	4640      	mov	r0, r8
 8011446:	4649      	mov	r1, r9
 8011448:	f7ef fb82 	bl	8000b50 <__aeabi_dcmpun>
 801144c:	b140      	cbz	r0, 8011460 <_printf_float+0xf0>
 801144e:	464b      	mov	r3, r9
 8011450:	2b00      	cmp	r3, #0
 8011452:	bfbc      	itt	lt
 8011454:	232d      	movlt	r3, #45	; 0x2d
 8011456:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 801145a:	487f      	ldr	r0, [pc, #508]	; (8011658 <_printf_float+0x2e8>)
 801145c:	4b7f      	ldr	r3, [pc, #508]	; (801165c <_printf_float+0x2ec>)
 801145e:	e7d1      	b.n	8011404 <_printf_float+0x94>
 8011460:	6863      	ldr	r3, [r4, #4]
 8011462:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8011466:	9206      	str	r2, [sp, #24]
 8011468:	1c5a      	adds	r2, r3, #1
 801146a:	d13f      	bne.n	80114ec <_printf_float+0x17c>
 801146c:	2306      	movs	r3, #6
 801146e:	6063      	str	r3, [r4, #4]
 8011470:	9b05      	ldr	r3, [sp, #20]
 8011472:	6861      	ldr	r1, [r4, #4]
 8011474:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8011478:	2300      	movs	r3, #0
 801147a:	9303      	str	r3, [sp, #12]
 801147c:	ab0a      	add	r3, sp, #40	; 0x28
 801147e:	e9cd b301 	strd	fp, r3, [sp, #4]
 8011482:	ab09      	add	r3, sp, #36	; 0x24
 8011484:	ec49 8b10 	vmov	d0, r8, r9
 8011488:	9300      	str	r3, [sp, #0]
 801148a:	6022      	str	r2, [r4, #0]
 801148c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8011490:	4628      	mov	r0, r5
 8011492:	f7ff fecd 	bl	8011230 <__cvt>
 8011496:	9b06      	ldr	r3, [sp, #24]
 8011498:	9909      	ldr	r1, [sp, #36]	; 0x24
 801149a:	2b47      	cmp	r3, #71	; 0x47
 801149c:	4680      	mov	r8, r0
 801149e:	d108      	bne.n	80114b2 <_printf_float+0x142>
 80114a0:	1cc8      	adds	r0, r1, #3
 80114a2:	db02      	blt.n	80114aa <_printf_float+0x13a>
 80114a4:	6863      	ldr	r3, [r4, #4]
 80114a6:	4299      	cmp	r1, r3
 80114a8:	dd41      	ble.n	801152e <_printf_float+0x1be>
 80114aa:	f1ab 0b02 	sub.w	fp, fp, #2
 80114ae:	fa5f fb8b 	uxtb.w	fp, fp
 80114b2:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80114b6:	d820      	bhi.n	80114fa <_printf_float+0x18a>
 80114b8:	3901      	subs	r1, #1
 80114ba:	465a      	mov	r2, fp
 80114bc:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80114c0:	9109      	str	r1, [sp, #36]	; 0x24
 80114c2:	f7ff ff17 	bl	80112f4 <__exponent>
 80114c6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80114c8:	1813      	adds	r3, r2, r0
 80114ca:	2a01      	cmp	r2, #1
 80114cc:	4681      	mov	r9, r0
 80114ce:	6123      	str	r3, [r4, #16]
 80114d0:	dc02      	bgt.n	80114d8 <_printf_float+0x168>
 80114d2:	6822      	ldr	r2, [r4, #0]
 80114d4:	07d2      	lsls	r2, r2, #31
 80114d6:	d501      	bpl.n	80114dc <_printf_float+0x16c>
 80114d8:	3301      	adds	r3, #1
 80114da:	6123      	str	r3, [r4, #16]
 80114dc:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80114e0:	2b00      	cmp	r3, #0
 80114e2:	d09c      	beq.n	801141e <_printf_float+0xae>
 80114e4:	232d      	movs	r3, #45	; 0x2d
 80114e6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80114ea:	e798      	b.n	801141e <_printf_float+0xae>
 80114ec:	9a06      	ldr	r2, [sp, #24]
 80114ee:	2a47      	cmp	r2, #71	; 0x47
 80114f0:	d1be      	bne.n	8011470 <_printf_float+0x100>
 80114f2:	2b00      	cmp	r3, #0
 80114f4:	d1bc      	bne.n	8011470 <_printf_float+0x100>
 80114f6:	2301      	movs	r3, #1
 80114f8:	e7b9      	b.n	801146e <_printf_float+0xfe>
 80114fa:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80114fe:	d118      	bne.n	8011532 <_printf_float+0x1c2>
 8011500:	2900      	cmp	r1, #0
 8011502:	6863      	ldr	r3, [r4, #4]
 8011504:	dd0b      	ble.n	801151e <_printf_float+0x1ae>
 8011506:	6121      	str	r1, [r4, #16]
 8011508:	b913      	cbnz	r3, 8011510 <_printf_float+0x1a0>
 801150a:	6822      	ldr	r2, [r4, #0]
 801150c:	07d0      	lsls	r0, r2, #31
 801150e:	d502      	bpl.n	8011516 <_printf_float+0x1a6>
 8011510:	3301      	adds	r3, #1
 8011512:	440b      	add	r3, r1
 8011514:	6123      	str	r3, [r4, #16]
 8011516:	65a1      	str	r1, [r4, #88]	; 0x58
 8011518:	f04f 0900 	mov.w	r9, #0
 801151c:	e7de      	b.n	80114dc <_printf_float+0x16c>
 801151e:	b913      	cbnz	r3, 8011526 <_printf_float+0x1b6>
 8011520:	6822      	ldr	r2, [r4, #0]
 8011522:	07d2      	lsls	r2, r2, #31
 8011524:	d501      	bpl.n	801152a <_printf_float+0x1ba>
 8011526:	3302      	adds	r3, #2
 8011528:	e7f4      	b.n	8011514 <_printf_float+0x1a4>
 801152a:	2301      	movs	r3, #1
 801152c:	e7f2      	b.n	8011514 <_printf_float+0x1a4>
 801152e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8011532:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011534:	4299      	cmp	r1, r3
 8011536:	db05      	blt.n	8011544 <_printf_float+0x1d4>
 8011538:	6823      	ldr	r3, [r4, #0]
 801153a:	6121      	str	r1, [r4, #16]
 801153c:	07d8      	lsls	r0, r3, #31
 801153e:	d5ea      	bpl.n	8011516 <_printf_float+0x1a6>
 8011540:	1c4b      	adds	r3, r1, #1
 8011542:	e7e7      	b.n	8011514 <_printf_float+0x1a4>
 8011544:	2900      	cmp	r1, #0
 8011546:	bfd4      	ite	le
 8011548:	f1c1 0202 	rsble	r2, r1, #2
 801154c:	2201      	movgt	r2, #1
 801154e:	4413      	add	r3, r2
 8011550:	e7e0      	b.n	8011514 <_printf_float+0x1a4>
 8011552:	6823      	ldr	r3, [r4, #0]
 8011554:	055a      	lsls	r2, r3, #21
 8011556:	d407      	bmi.n	8011568 <_printf_float+0x1f8>
 8011558:	6923      	ldr	r3, [r4, #16]
 801155a:	4642      	mov	r2, r8
 801155c:	4631      	mov	r1, r6
 801155e:	4628      	mov	r0, r5
 8011560:	47b8      	blx	r7
 8011562:	3001      	adds	r0, #1
 8011564:	d12c      	bne.n	80115c0 <_printf_float+0x250>
 8011566:	e764      	b.n	8011432 <_printf_float+0xc2>
 8011568:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 801156c:	f240 80e0 	bls.w	8011730 <_printf_float+0x3c0>
 8011570:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8011574:	2200      	movs	r2, #0
 8011576:	2300      	movs	r3, #0
 8011578:	f7ef fab8 	bl	8000aec <__aeabi_dcmpeq>
 801157c:	2800      	cmp	r0, #0
 801157e:	d034      	beq.n	80115ea <_printf_float+0x27a>
 8011580:	4a37      	ldr	r2, [pc, #220]	; (8011660 <_printf_float+0x2f0>)
 8011582:	2301      	movs	r3, #1
 8011584:	4631      	mov	r1, r6
 8011586:	4628      	mov	r0, r5
 8011588:	47b8      	blx	r7
 801158a:	3001      	adds	r0, #1
 801158c:	f43f af51 	beq.w	8011432 <_printf_float+0xc2>
 8011590:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8011594:	429a      	cmp	r2, r3
 8011596:	db02      	blt.n	801159e <_printf_float+0x22e>
 8011598:	6823      	ldr	r3, [r4, #0]
 801159a:	07d8      	lsls	r0, r3, #31
 801159c:	d510      	bpl.n	80115c0 <_printf_float+0x250>
 801159e:	ee18 3a10 	vmov	r3, s16
 80115a2:	4652      	mov	r2, sl
 80115a4:	4631      	mov	r1, r6
 80115a6:	4628      	mov	r0, r5
 80115a8:	47b8      	blx	r7
 80115aa:	3001      	adds	r0, #1
 80115ac:	f43f af41 	beq.w	8011432 <_printf_float+0xc2>
 80115b0:	f04f 0800 	mov.w	r8, #0
 80115b4:	f104 091a 	add.w	r9, r4, #26
 80115b8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80115ba:	3b01      	subs	r3, #1
 80115bc:	4543      	cmp	r3, r8
 80115be:	dc09      	bgt.n	80115d4 <_printf_float+0x264>
 80115c0:	6823      	ldr	r3, [r4, #0]
 80115c2:	079b      	lsls	r3, r3, #30
 80115c4:	f100 8105 	bmi.w	80117d2 <_printf_float+0x462>
 80115c8:	68e0      	ldr	r0, [r4, #12]
 80115ca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80115cc:	4298      	cmp	r0, r3
 80115ce:	bfb8      	it	lt
 80115d0:	4618      	movlt	r0, r3
 80115d2:	e730      	b.n	8011436 <_printf_float+0xc6>
 80115d4:	2301      	movs	r3, #1
 80115d6:	464a      	mov	r2, r9
 80115d8:	4631      	mov	r1, r6
 80115da:	4628      	mov	r0, r5
 80115dc:	47b8      	blx	r7
 80115de:	3001      	adds	r0, #1
 80115e0:	f43f af27 	beq.w	8011432 <_printf_float+0xc2>
 80115e4:	f108 0801 	add.w	r8, r8, #1
 80115e8:	e7e6      	b.n	80115b8 <_printf_float+0x248>
 80115ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80115ec:	2b00      	cmp	r3, #0
 80115ee:	dc39      	bgt.n	8011664 <_printf_float+0x2f4>
 80115f0:	4a1b      	ldr	r2, [pc, #108]	; (8011660 <_printf_float+0x2f0>)
 80115f2:	2301      	movs	r3, #1
 80115f4:	4631      	mov	r1, r6
 80115f6:	4628      	mov	r0, r5
 80115f8:	47b8      	blx	r7
 80115fa:	3001      	adds	r0, #1
 80115fc:	f43f af19 	beq.w	8011432 <_printf_float+0xc2>
 8011600:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8011604:	4313      	orrs	r3, r2
 8011606:	d102      	bne.n	801160e <_printf_float+0x29e>
 8011608:	6823      	ldr	r3, [r4, #0]
 801160a:	07d9      	lsls	r1, r3, #31
 801160c:	d5d8      	bpl.n	80115c0 <_printf_float+0x250>
 801160e:	ee18 3a10 	vmov	r3, s16
 8011612:	4652      	mov	r2, sl
 8011614:	4631      	mov	r1, r6
 8011616:	4628      	mov	r0, r5
 8011618:	47b8      	blx	r7
 801161a:	3001      	adds	r0, #1
 801161c:	f43f af09 	beq.w	8011432 <_printf_float+0xc2>
 8011620:	f04f 0900 	mov.w	r9, #0
 8011624:	f104 0a1a 	add.w	sl, r4, #26
 8011628:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801162a:	425b      	negs	r3, r3
 801162c:	454b      	cmp	r3, r9
 801162e:	dc01      	bgt.n	8011634 <_printf_float+0x2c4>
 8011630:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011632:	e792      	b.n	801155a <_printf_float+0x1ea>
 8011634:	2301      	movs	r3, #1
 8011636:	4652      	mov	r2, sl
 8011638:	4631      	mov	r1, r6
 801163a:	4628      	mov	r0, r5
 801163c:	47b8      	blx	r7
 801163e:	3001      	adds	r0, #1
 8011640:	f43f aef7 	beq.w	8011432 <_printf_float+0xc2>
 8011644:	f109 0901 	add.w	r9, r9, #1
 8011648:	e7ee      	b.n	8011628 <_printf_float+0x2b8>
 801164a:	bf00      	nop
 801164c:	7fefffff 	.word	0x7fefffff
 8011650:	0801d0e9 	.word	0x0801d0e9
 8011654:	0801d0ed 	.word	0x0801d0ed
 8011658:	0801d0f5 	.word	0x0801d0f5
 801165c:	0801d0f1 	.word	0x0801d0f1
 8011660:	0801d0f9 	.word	0x0801d0f9
 8011664:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8011666:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8011668:	429a      	cmp	r2, r3
 801166a:	bfa8      	it	ge
 801166c:	461a      	movge	r2, r3
 801166e:	2a00      	cmp	r2, #0
 8011670:	4691      	mov	r9, r2
 8011672:	dc37      	bgt.n	80116e4 <_printf_float+0x374>
 8011674:	f04f 0b00 	mov.w	fp, #0
 8011678:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801167c:	f104 021a 	add.w	r2, r4, #26
 8011680:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8011682:	9305      	str	r3, [sp, #20]
 8011684:	eba3 0309 	sub.w	r3, r3, r9
 8011688:	455b      	cmp	r3, fp
 801168a:	dc33      	bgt.n	80116f4 <_printf_float+0x384>
 801168c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8011690:	429a      	cmp	r2, r3
 8011692:	db3b      	blt.n	801170c <_printf_float+0x39c>
 8011694:	6823      	ldr	r3, [r4, #0]
 8011696:	07da      	lsls	r2, r3, #31
 8011698:	d438      	bmi.n	801170c <_printf_float+0x39c>
 801169a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801169c:	9b05      	ldr	r3, [sp, #20]
 801169e:	9909      	ldr	r1, [sp, #36]	; 0x24
 80116a0:	1ad3      	subs	r3, r2, r3
 80116a2:	eba2 0901 	sub.w	r9, r2, r1
 80116a6:	4599      	cmp	r9, r3
 80116a8:	bfa8      	it	ge
 80116aa:	4699      	movge	r9, r3
 80116ac:	f1b9 0f00 	cmp.w	r9, #0
 80116b0:	dc35      	bgt.n	801171e <_printf_float+0x3ae>
 80116b2:	f04f 0800 	mov.w	r8, #0
 80116b6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80116ba:	f104 0a1a 	add.w	sl, r4, #26
 80116be:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80116c2:	1a9b      	subs	r3, r3, r2
 80116c4:	eba3 0309 	sub.w	r3, r3, r9
 80116c8:	4543      	cmp	r3, r8
 80116ca:	f77f af79 	ble.w	80115c0 <_printf_float+0x250>
 80116ce:	2301      	movs	r3, #1
 80116d0:	4652      	mov	r2, sl
 80116d2:	4631      	mov	r1, r6
 80116d4:	4628      	mov	r0, r5
 80116d6:	47b8      	blx	r7
 80116d8:	3001      	adds	r0, #1
 80116da:	f43f aeaa 	beq.w	8011432 <_printf_float+0xc2>
 80116de:	f108 0801 	add.w	r8, r8, #1
 80116e2:	e7ec      	b.n	80116be <_printf_float+0x34e>
 80116e4:	4613      	mov	r3, r2
 80116e6:	4631      	mov	r1, r6
 80116e8:	4642      	mov	r2, r8
 80116ea:	4628      	mov	r0, r5
 80116ec:	47b8      	blx	r7
 80116ee:	3001      	adds	r0, #1
 80116f0:	d1c0      	bne.n	8011674 <_printf_float+0x304>
 80116f2:	e69e      	b.n	8011432 <_printf_float+0xc2>
 80116f4:	2301      	movs	r3, #1
 80116f6:	4631      	mov	r1, r6
 80116f8:	4628      	mov	r0, r5
 80116fa:	9205      	str	r2, [sp, #20]
 80116fc:	47b8      	blx	r7
 80116fe:	3001      	adds	r0, #1
 8011700:	f43f ae97 	beq.w	8011432 <_printf_float+0xc2>
 8011704:	9a05      	ldr	r2, [sp, #20]
 8011706:	f10b 0b01 	add.w	fp, fp, #1
 801170a:	e7b9      	b.n	8011680 <_printf_float+0x310>
 801170c:	ee18 3a10 	vmov	r3, s16
 8011710:	4652      	mov	r2, sl
 8011712:	4631      	mov	r1, r6
 8011714:	4628      	mov	r0, r5
 8011716:	47b8      	blx	r7
 8011718:	3001      	adds	r0, #1
 801171a:	d1be      	bne.n	801169a <_printf_float+0x32a>
 801171c:	e689      	b.n	8011432 <_printf_float+0xc2>
 801171e:	9a05      	ldr	r2, [sp, #20]
 8011720:	464b      	mov	r3, r9
 8011722:	4442      	add	r2, r8
 8011724:	4631      	mov	r1, r6
 8011726:	4628      	mov	r0, r5
 8011728:	47b8      	blx	r7
 801172a:	3001      	adds	r0, #1
 801172c:	d1c1      	bne.n	80116b2 <_printf_float+0x342>
 801172e:	e680      	b.n	8011432 <_printf_float+0xc2>
 8011730:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8011732:	2a01      	cmp	r2, #1
 8011734:	dc01      	bgt.n	801173a <_printf_float+0x3ca>
 8011736:	07db      	lsls	r3, r3, #31
 8011738:	d538      	bpl.n	80117ac <_printf_float+0x43c>
 801173a:	2301      	movs	r3, #1
 801173c:	4642      	mov	r2, r8
 801173e:	4631      	mov	r1, r6
 8011740:	4628      	mov	r0, r5
 8011742:	47b8      	blx	r7
 8011744:	3001      	adds	r0, #1
 8011746:	f43f ae74 	beq.w	8011432 <_printf_float+0xc2>
 801174a:	ee18 3a10 	vmov	r3, s16
 801174e:	4652      	mov	r2, sl
 8011750:	4631      	mov	r1, r6
 8011752:	4628      	mov	r0, r5
 8011754:	47b8      	blx	r7
 8011756:	3001      	adds	r0, #1
 8011758:	f43f ae6b 	beq.w	8011432 <_printf_float+0xc2>
 801175c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8011760:	2200      	movs	r2, #0
 8011762:	2300      	movs	r3, #0
 8011764:	f7ef f9c2 	bl	8000aec <__aeabi_dcmpeq>
 8011768:	b9d8      	cbnz	r0, 80117a2 <_printf_float+0x432>
 801176a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801176c:	f108 0201 	add.w	r2, r8, #1
 8011770:	3b01      	subs	r3, #1
 8011772:	4631      	mov	r1, r6
 8011774:	4628      	mov	r0, r5
 8011776:	47b8      	blx	r7
 8011778:	3001      	adds	r0, #1
 801177a:	d10e      	bne.n	801179a <_printf_float+0x42a>
 801177c:	e659      	b.n	8011432 <_printf_float+0xc2>
 801177e:	2301      	movs	r3, #1
 8011780:	4652      	mov	r2, sl
 8011782:	4631      	mov	r1, r6
 8011784:	4628      	mov	r0, r5
 8011786:	47b8      	blx	r7
 8011788:	3001      	adds	r0, #1
 801178a:	f43f ae52 	beq.w	8011432 <_printf_float+0xc2>
 801178e:	f108 0801 	add.w	r8, r8, #1
 8011792:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011794:	3b01      	subs	r3, #1
 8011796:	4543      	cmp	r3, r8
 8011798:	dcf1      	bgt.n	801177e <_printf_float+0x40e>
 801179a:	464b      	mov	r3, r9
 801179c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80117a0:	e6dc      	b.n	801155c <_printf_float+0x1ec>
 80117a2:	f04f 0800 	mov.w	r8, #0
 80117a6:	f104 0a1a 	add.w	sl, r4, #26
 80117aa:	e7f2      	b.n	8011792 <_printf_float+0x422>
 80117ac:	2301      	movs	r3, #1
 80117ae:	4642      	mov	r2, r8
 80117b0:	e7df      	b.n	8011772 <_printf_float+0x402>
 80117b2:	2301      	movs	r3, #1
 80117b4:	464a      	mov	r2, r9
 80117b6:	4631      	mov	r1, r6
 80117b8:	4628      	mov	r0, r5
 80117ba:	47b8      	blx	r7
 80117bc:	3001      	adds	r0, #1
 80117be:	f43f ae38 	beq.w	8011432 <_printf_float+0xc2>
 80117c2:	f108 0801 	add.w	r8, r8, #1
 80117c6:	68e3      	ldr	r3, [r4, #12]
 80117c8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80117ca:	1a5b      	subs	r3, r3, r1
 80117cc:	4543      	cmp	r3, r8
 80117ce:	dcf0      	bgt.n	80117b2 <_printf_float+0x442>
 80117d0:	e6fa      	b.n	80115c8 <_printf_float+0x258>
 80117d2:	f04f 0800 	mov.w	r8, #0
 80117d6:	f104 0919 	add.w	r9, r4, #25
 80117da:	e7f4      	b.n	80117c6 <_printf_float+0x456>

080117dc <_printf_common>:
 80117dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80117e0:	4616      	mov	r6, r2
 80117e2:	4699      	mov	r9, r3
 80117e4:	688a      	ldr	r2, [r1, #8]
 80117e6:	690b      	ldr	r3, [r1, #16]
 80117e8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80117ec:	4293      	cmp	r3, r2
 80117ee:	bfb8      	it	lt
 80117f0:	4613      	movlt	r3, r2
 80117f2:	6033      	str	r3, [r6, #0]
 80117f4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80117f8:	4607      	mov	r7, r0
 80117fa:	460c      	mov	r4, r1
 80117fc:	b10a      	cbz	r2, 8011802 <_printf_common+0x26>
 80117fe:	3301      	adds	r3, #1
 8011800:	6033      	str	r3, [r6, #0]
 8011802:	6823      	ldr	r3, [r4, #0]
 8011804:	0699      	lsls	r1, r3, #26
 8011806:	bf42      	ittt	mi
 8011808:	6833      	ldrmi	r3, [r6, #0]
 801180a:	3302      	addmi	r3, #2
 801180c:	6033      	strmi	r3, [r6, #0]
 801180e:	6825      	ldr	r5, [r4, #0]
 8011810:	f015 0506 	ands.w	r5, r5, #6
 8011814:	d106      	bne.n	8011824 <_printf_common+0x48>
 8011816:	f104 0a19 	add.w	sl, r4, #25
 801181a:	68e3      	ldr	r3, [r4, #12]
 801181c:	6832      	ldr	r2, [r6, #0]
 801181e:	1a9b      	subs	r3, r3, r2
 8011820:	42ab      	cmp	r3, r5
 8011822:	dc26      	bgt.n	8011872 <_printf_common+0x96>
 8011824:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8011828:	1e13      	subs	r3, r2, #0
 801182a:	6822      	ldr	r2, [r4, #0]
 801182c:	bf18      	it	ne
 801182e:	2301      	movne	r3, #1
 8011830:	0692      	lsls	r2, r2, #26
 8011832:	d42b      	bmi.n	801188c <_printf_common+0xb0>
 8011834:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8011838:	4649      	mov	r1, r9
 801183a:	4638      	mov	r0, r7
 801183c:	47c0      	blx	r8
 801183e:	3001      	adds	r0, #1
 8011840:	d01e      	beq.n	8011880 <_printf_common+0xa4>
 8011842:	6823      	ldr	r3, [r4, #0]
 8011844:	68e5      	ldr	r5, [r4, #12]
 8011846:	6832      	ldr	r2, [r6, #0]
 8011848:	f003 0306 	and.w	r3, r3, #6
 801184c:	2b04      	cmp	r3, #4
 801184e:	bf08      	it	eq
 8011850:	1aad      	subeq	r5, r5, r2
 8011852:	68a3      	ldr	r3, [r4, #8]
 8011854:	6922      	ldr	r2, [r4, #16]
 8011856:	bf0c      	ite	eq
 8011858:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801185c:	2500      	movne	r5, #0
 801185e:	4293      	cmp	r3, r2
 8011860:	bfc4      	itt	gt
 8011862:	1a9b      	subgt	r3, r3, r2
 8011864:	18ed      	addgt	r5, r5, r3
 8011866:	2600      	movs	r6, #0
 8011868:	341a      	adds	r4, #26
 801186a:	42b5      	cmp	r5, r6
 801186c:	d11a      	bne.n	80118a4 <_printf_common+0xc8>
 801186e:	2000      	movs	r0, #0
 8011870:	e008      	b.n	8011884 <_printf_common+0xa8>
 8011872:	2301      	movs	r3, #1
 8011874:	4652      	mov	r2, sl
 8011876:	4649      	mov	r1, r9
 8011878:	4638      	mov	r0, r7
 801187a:	47c0      	blx	r8
 801187c:	3001      	adds	r0, #1
 801187e:	d103      	bne.n	8011888 <_printf_common+0xac>
 8011880:	f04f 30ff 	mov.w	r0, #4294967295
 8011884:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011888:	3501      	adds	r5, #1
 801188a:	e7c6      	b.n	801181a <_printf_common+0x3e>
 801188c:	18e1      	adds	r1, r4, r3
 801188e:	1c5a      	adds	r2, r3, #1
 8011890:	2030      	movs	r0, #48	; 0x30
 8011892:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8011896:	4422      	add	r2, r4
 8011898:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801189c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80118a0:	3302      	adds	r3, #2
 80118a2:	e7c7      	b.n	8011834 <_printf_common+0x58>
 80118a4:	2301      	movs	r3, #1
 80118a6:	4622      	mov	r2, r4
 80118a8:	4649      	mov	r1, r9
 80118aa:	4638      	mov	r0, r7
 80118ac:	47c0      	blx	r8
 80118ae:	3001      	adds	r0, #1
 80118b0:	d0e6      	beq.n	8011880 <_printf_common+0xa4>
 80118b2:	3601      	adds	r6, #1
 80118b4:	e7d9      	b.n	801186a <_printf_common+0x8e>
	...

080118b8 <_printf_i>:
 80118b8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80118bc:	460c      	mov	r4, r1
 80118be:	4691      	mov	r9, r2
 80118c0:	7e27      	ldrb	r7, [r4, #24]
 80118c2:	990c      	ldr	r1, [sp, #48]	; 0x30
 80118c4:	2f78      	cmp	r7, #120	; 0x78
 80118c6:	4680      	mov	r8, r0
 80118c8:	469a      	mov	sl, r3
 80118ca:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80118ce:	d807      	bhi.n	80118e0 <_printf_i+0x28>
 80118d0:	2f62      	cmp	r7, #98	; 0x62
 80118d2:	d80a      	bhi.n	80118ea <_printf_i+0x32>
 80118d4:	2f00      	cmp	r7, #0
 80118d6:	f000 80d8 	beq.w	8011a8a <_printf_i+0x1d2>
 80118da:	2f58      	cmp	r7, #88	; 0x58
 80118dc:	f000 80a3 	beq.w	8011a26 <_printf_i+0x16e>
 80118e0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80118e4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80118e8:	e03a      	b.n	8011960 <_printf_i+0xa8>
 80118ea:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80118ee:	2b15      	cmp	r3, #21
 80118f0:	d8f6      	bhi.n	80118e0 <_printf_i+0x28>
 80118f2:	a001      	add	r0, pc, #4	; (adr r0, 80118f8 <_printf_i+0x40>)
 80118f4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80118f8:	08011951 	.word	0x08011951
 80118fc:	08011965 	.word	0x08011965
 8011900:	080118e1 	.word	0x080118e1
 8011904:	080118e1 	.word	0x080118e1
 8011908:	080118e1 	.word	0x080118e1
 801190c:	080118e1 	.word	0x080118e1
 8011910:	08011965 	.word	0x08011965
 8011914:	080118e1 	.word	0x080118e1
 8011918:	080118e1 	.word	0x080118e1
 801191c:	080118e1 	.word	0x080118e1
 8011920:	080118e1 	.word	0x080118e1
 8011924:	08011a71 	.word	0x08011a71
 8011928:	08011995 	.word	0x08011995
 801192c:	08011a53 	.word	0x08011a53
 8011930:	080118e1 	.word	0x080118e1
 8011934:	080118e1 	.word	0x080118e1
 8011938:	08011a93 	.word	0x08011a93
 801193c:	080118e1 	.word	0x080118e1
 8011940:	08011995 	.word	0x08011995
 8011944:	080118e1 	.word	0x080118e1
 8011948:	080118e1 	.word	0x080118e1
 801194c:	08011a5b 	.word	0x08011a5b
 8011950:	680b      	ldr	r3, [r1, #0]
 8011952:	1d1a      	adds	r2, r3, #4
 8011954:	681b      	ldr	r3, [r3, #0]
 8011956:	600a      	str	r2, [r1, #0]
 8011958:	f104 0642 	add.w	r6, r4, #66	; 0x42
 801195c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8011960:	2301      	movs	r3, #1
 8011962:	e0a3      	b.n	8011aac <_printf_i+0x1f4>
 8011964:	6825      	ldr	r5, [r4, #0]
 8011966:	6808      	ldr	r0, [r1, #0]
 8011968:	062e      	lsls	r6, r5, #24
 801196a:	f100 0304 	add.w	r3, r0, #4
 801196e:	d50a      	bpl.n	8011986 <_printf_i+0xce>
 8011970:	6805      	ldr	r5, [r0, #0]
 8011972:	600b      	str	r3, [r1, #0]
 8011974:	2d00      	cmp	r5, #0
 8011976:	da03      	bge.n	8011980 <_printf_i+0xc8>
 8011978:	232d      	movs	r3, #45	; 0x2d
 801197a:	426d      	negs	r5, r5
 801197c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011980:	485e      	ldr	r0, [pc, #376]	; (8011afc <_printf_i+0x244>)
 8011982:	230a      	movs	r3, #10
 8011984:	e019      	b.n	80119ba <_printf_i+0x102>
 8011986:	f015 0f40 	tst.w	r5, #64	; 0x40
 801198a:	6805      	ldr	r5, [r0, #0]
 801198c:	600b      	str	r3, [r1, #0]
 801198e:	bf18      	it	ne
 8011990:	b22d      	sxthne	r5, r5
 8011992:	e7ef      	b.n	8011974 <_printf_i+0xbc>
 8011994:	680b      	ldr	r3, [r1, #0]
 8011996:	6825      	ldr	r5, [r4, #0]
 8011998:	1d18      	adds	r0, r3, #4
 801199a:	6008      	str	r0, [r1, #0]
 801199c:	0628      	lsls	r0, r5, #24
 801199e:	d501      	bpl.n	80119a4 <_printf_i+0xec>
 80119a0:	681d      	ldr	r5, [r3, #0]
 80119a2:	e002      	b.n	80119aa <_printf_i+0xf2>
 80119a4:	0669      	lsls	r1, r5, #25
 80119a6:	d5fb      	bpl.n	80119a0 <_printf_i+0xe8>
 80119a8:	881d      	ldrh	r5, [r3, #0]
 80119aa:	4854      	ldr	r0, [pc, #336]	; (8011afc <_printf_i+0x244>)
 80119ac:	2f6f      	cmp	r7, #111	; 0x6f
 80119ae:	bf0c      	ite	eq
 80119b0:	2308      	moveq	r3, #8
 80119b2:	230a      	movne	r3, #10
 80119b4:	2100      	movs	r1, #0
 80119b6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80119ba:	6866      	ldr	r6, [r4, #4]
 80119bc:	60a6      	str	r6, [r4, #8]
 80119be:	2e00      	cmp	r6, #0
 80119c0:	bfa2      	ittt	ge
 80119c2:	6821      	ldrge	r1, [r4, #0]
 80119c4:	f021 0104 	bicge.w	r1, r1, #4
 80119c8:	6021      	strge	r1, [r4, #0]
 80119ca:	b90d      	cbnz	r5, 80119d0 <_printf_i+0x118>
 80119cc:	2e00      	cmp	r6, #0
 80119ce:	d04d      	beq.n	8011a6c <_printf_i+0x1b4>
 80119d0:	4616      	mov	r6, r2
 80119d2:	fbb5 f1f3 	udiv	r1, r5, r3
 80119d6:	fb03 5711 	mls	r7, r3, r1, r5
 80119da:	5dc7      	ldrb	r7, [r0, r7]
 80119dc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80119e0:	462f      	mov	r7, r5
 80119e2:	42bb      	cmp	r3, r7
 80119e4:	460d      	mov	r5, r1
 80119e6:	d9f4      	bls.n	80119d2 <_printf_i+0x11a>
 80119e8:	2b08      	cmp	r3, #8
 80119ea:	d10b      	bne.n	8011a04 <_printf_i+0x14c>
 80119ec:	6823      	ldr	r3, [r4, #0]
 80119ee:	07df      	lsls	r7, r3, #31
 80119f0:	d508      	bpl.n	8011a04 <_printf_i+0x14c>
 80119f2:	6923      	ldr	r3, [r4, #16]
 80119f4:	6861      	ldr	r1, [r4, #4]
 80119f6:	4299      	cmp	r1, r3
 80119f8:	bfde      	ittt	le
 80119fa:	2330      	movle	r3, #48	; 0x30
 80119fc:	f806 3c01 	strble.w	r3, [r6, #-1]
 8011a00:	f106 36ff 	addle.w	r6, r6, #4294967295
 8011a04:	1b92      	subs	r2, r2, r6
 8011a06:	6122      	str	r2, [r4, #16]
 8011a08:	f8cd a000 	str.w	sl, [sp]
 8011a0c:	464b      	mov	r3, r9
 8011a0e:	aa03      	add	r2, sp, #12
 8011a10:	4621      	mov	r1, r4
 8011a12:	4640      	mov	r0, r8
 8011a14:	f7ff fee2 	bl	80117dc <_printf_common>
 8011a18:	3001      	adds	r0, #1
 8011a1a:	d14c      	bne.n	8011ab6 <_printf_i+0x1fe>
 8011a1c:	f04f 30ff 	mov.w	r0, #4294967295
 8011a20:	b004      	add	sp, #16
 8011a22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011a26:	4835      	ldr	r0, [pc, #212]	; (8011afc <_printf_i+0x244>)
 8011a28:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8011a2c:	6823      	ldr	r3, [r4, #0]
 8011a2e:	680e      	ldr	r6, [r1, #0]
 8011a30:	061f      	lsls	r7, r3, #24
 8011a32:	f856 5b04 	ldr.w	r5, [r6], #4
 8011a36:	600e      	str	r6, [r1, #0]
 8011a38:	d514      	bpl.n	8011a64 <_printf_i+0x1ac>
 8011a3a:	07d9      	lsls	r1, r3, #31
 8011a3c:	bf44      	itt	mi
 8011a3e:	f043 0320 	orrmi.w	r3, r3, #32
 8011a42:	6023      	strmi	r3, [r4, #0]
 8011a44:	b91d      	cbnz	r5, 8011a4e <_printf_i+0x196>
 8011a46:	6823      	ldr	r3, [r4, #0]
 8011a48:	f023 0320 	bic.w	r3, r3, #32
 8011a4c:	6023      	str	r3, [r4, #0]
 8011a4e:	2310      	movs	r3, #16
 8011a50:	e7b0      	b.n	80119b4 <_printf_i+0xfc>
 8011a52:	6823      	ldr	r3, [r4, #0]
 8011a54:	f043 0320 	orr.w	r3, r3, #32
 8011a58:	6023      	str	r3, [r4, #0]
 8011a5a:	2378      	movs	r3, #120	; 0x78
 8011a5c:	4828      	ldr	r0, [pc, #160]	; (8011b00 <_printf_i+0x248>)
 8011a5e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8011a62:	e7e3      	b.n	8011a2c <_printf_i+0x174>
 8011a64:	065e      	lsls	r6, r3, #25
 8011a66:	bf48      	it	mi
 8011a68:	b2ad      	uxthmi	r5, r5
 8011a6a:	e7e6      	b.n	8011a3a <_printf_i+0x182>
 8011a6c:	4616      	mov	r6, r2
 8011a6e:	e7bb      	b.n	80119e8 <_printf_i+0x130>
 8011a70:	680b      	ldr	r3, [r1, #0]
 8011a72:	6826      	ldr	r6, [r4, #0]
 8011a74:	6960      	ldr	r0, [r4, #20]
 8011a76:	1d1d      	adds	r5, r3, #4
 8011a78:	600d      	str	r5, [r1, #0]
 8011a7a:	0635      	lsls	r5, r6, #24
 8011a7c:	681b      	ldr	r3, [r3, #0]
 8011a7e:	d501      	bpl.n	8011a84 <_printf_i+0x1cc>
 8011a80:	6018      	str	r0, [r3, #0]
 8011a82:	e002      	b.n	8011a8a <_printf_i+0x1d2>
 8011a84:	0671      	lsls	r1, r6, #25
 8011a86:	d5fb      	bpl.n	8011a80 <_printf_i+0x1c8>
 8011a88:	8018      	strh	r0, [r3, #0]
 8011a8a:	2300      	movs	r3, #0
 8011a8c:	6123      	str	r3, [r4, #16]
 8011a8e:	4616      	mov	r6, r2
 8011a90:	e7ba      	b.n	8011a08 <_printf_i+0x150>
 8011a92:	680b      	ldr	r3, [r1, #0]
 8011a94:	1d1a      	adds	r2, r3, #4
 8011a96:	600a      	str	r2, [r1, #0]
 8011a98:	681e      	ldr	r6, [r3, #0]
 8011a9a:	6862      	ldr	r2, [r4, #4]
 8011a9c:	2100      	movs	r1, #0
 8011a9e:	4630      	mov	r0, r6
 8011aa0:	f7ee fb9e 	bl	80001e0 <memchr>
 8011aa4:	b108      	cbz	r0, 8011aaa <_printf_i+0x1f2>
 8011aa6:	1b80      	subs	r0, r0, r6
 8011aa8:	6060      	str	r0, [r4, #4]
 8011aaa:	6863      	ldr	r3, [r4, #4]
 8011aac:	6123      	str	r3, [r4, #16]
 8011aae:	2300      	movs	r3, #0
 8011ab0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011ab4:	e7a8      	b.n	8011a08 <_printf_i+0x150>
 8011ab6:	6923      	ldr	r3, [r4, #16]
 8011ab8:	4632      	mov	r2, r6
 8011aba:	4649      	mov	r1, r9
 8011abc:	4640      	mov	r0, r8
 8011abe:	47d0      	blx	sl
 8011ac0:	3001      	adds	r0, #1
 8011ac2:	d0ab      	beq.n	8011a1c <_printf_i+0x164>
 8011ac4:	6823      	ldr	r3, [r4, #0]
 8011ac6:	079b      	lsls	r3, r3, #30
 8011ac8:	d413      	bmi.n	8011af2 <_printf_i+0x23a>
 8011aca:	68e0      	ldr	r0, [r4, #12]
 8011acc:	9b03      	ldr	r3, [sp, #12]
 8011ace:	4298      	cmp	r0, r3
 8011ad0:	bfb8      	it	lt
 8011ad2:	4618      	movlt	r0, r3
 8011ad4:	e7a4      	b.n	8011a20 <_printf_i+0x168>
 8011ad6:	2301      	movs	r3, #1
 8011ad8:	4632      	mov	r2, r6
 8011ada:	4649      	mov	r1, r9
 8011adc:	4640      	mov	r0, r8
 8011ade:	47d0      	blx	sl
 8011ae0:	3001      	adds	r0, #1
 8011ae2:	d09b      	beq.n	8011a1c <_printf_i+0x164>
 8011ae4:	3501      	adds	r5, #1
 8011ae6:	68e3      	ldr	r3, [r4, #12]
 8011ae8:	9903      	ldr	r1, [sp, #12]
 8011aea:	1a5b      	subs	r3, r3, r1
 8011aec:	42ab      	cmp	r3, r5
 8011aee:	dcf2      	bgt.n	8011ad6 <_printf_i+0x21e>
 8011af0:	e7eb      	b.n	8011aca <_printf_i+0x212>
 8011af2:	2500      	movs	r5, #0
 8011af4:	f104 0619 	add.w	r6, r4, #25
 8011af8:	e7f5      	b.n	8011ae6 <_printf_i+0x22e>
 8011afa:	bf00      	nop
 8011afc:	0801d0fb 	.word	0x0801d0fb
 8011b00:	0801d10c 	.word	0x0801d10c

08011b04 <_sbrk_r>:
 8011b04:	b538      	push	{r3, r4, r5, lr}
 8011b06:	4d06      	ldr	r5, [pc, #24]	; (8011b20 <_sbrk_r+0x1c>)
 8011b08:	2300      	movs	r3, #0
 8011b0a:	4604      	mov	r4, r0
 8011b0c:	4608      	mov	r0, r1
 8011b0e:	602b      	str	r3, [r5, #0]
 8011b10:	f7f0 fbe2 	bl	80022d8 <_sbrk>
 8011b14:	1c43      	adds	r3, r0, #1
 8011b16:	d102      	bne.n	8011b1e <_sbrk_r+0x1a>
 8011b18:	682b      	ldr	r3, [r5, #0]
 8011b1a:	b103      	cbz	r3, 8011b1e <_sbrk_r+0x1a>
 8011b1c:	6023      	str	r3, [r4, #0]
 8011b1e:	bd38      	pop	{r3, r4, r5, pc}
 8011b20:	20005488 	.word	0x20005488

08011b24 <_raise_r>:
 8011b24:	291f      	cmp	r1, #31
 8011b26:	b538      	push	{r3, r4, r5, lr}
 8011b28:	4604      	mov	r4, r0
 8011b2a:	460d      	mov	r5, r1
 8011b2c:	d904      	bls.n	8011b38 <_raise_r+0x14>
 8011b2e:	2316      	movs	r3, #22
 8011b30:	6003      	str	r3, [r0, #0]
 8011b32:	f04f 30ff 	mov.w	r0, #4294967295
 8011b36:	bd38      	pop	{r3, r4, r5, pc}
 8011b38:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8011b3a:	b112      	cbz	r2, 8011b42 <_raise_r+0x1e>
 8011b3c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8011b40:	b94b      	cbnz	r3, 8011b56 <_raise_r+0x32>
 8011b42:	4620      	mov	r0, r4
 8011b44:	f000 f830 	bl	8011ba8 <_getpid_r>
 8011b48:	462a      	mov	r2, r5
 8011b4a:	4601      	mov	r1, r0
 8011b4c:	4620      	mov	r0, r4
 8011b4e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011b52:	f000 b817 	b.w	8011b84 <_kill_r>
 8011b56:	2b01      	cmp	r3, #1
 8011b58:	d00a      	beq.n	8011b70 <_raise_r+0x4c>
 8011b5a:	1c59      	adds	r1, r3, #1
 8011b5c:	d103      	bne.n	8011b66 <_raise_r+0x42>
 8011b5e:	2316      	movs	r3, #22
 8011b60:	6003      	str	r3, [r0, #0]
 8011b62:	2001      	movs	r0, #1
 8011b64:	e7e7      	b.n	8011b36 <_raise_r+0x12>
 8011b66:	2400      	movs	r4, #0
 8011b68:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8011b6c:	4628      	mov	r0, r5
 8011b6e:	4798      	blx	r3
 8011b70:	2000      	movs	r0, #0
 8011b72:	e7e0      	b.n	8011b36 <_raise_r+0x12>

08011b74 <raise>:
 8011b74:	4b02      	ldr	r3, [pc, #8]	; (8011b80 <raise+0xc>)
 8011b76:	4601      	mov	r1, r0
 8011b78:	6818      	ldr	r0, [r3, #0]
 8011b7a:	f7ff bfd3 	b.w	8011b24 <_raise_r>
 8011b7e:	bf00      	nop
 8011b80:	20000018 	.word	0x20000018

08011b84 <_kill_r>:
 8011b84:	b538      	push	{r3, r4, r5, lr}
 8011b86:	4d07      	ldr	r5, [pc, #28]	; (8011ba4 <_kill_r+0x20>)
 8011b88:	2300      	movs	r3, #0
 8011b8a:	4604      	mov	r4, r0
 8011b8c:	4608      	mov	r0, r1
 8011b8e:	4611      	mov	r1, r2
 8011b90:	602b      	str	r3, [r5, #0]
 8011b92:	f7f0 fb19 	bl	80021c8 <_kill>
 8011b96:	1c43      	adds	r3, r0, #1
 8011b98:	d102      	bne.n	8011ba0 <_kill_r+0x1c>
 8011b9a:	682b      	ldr	r3, [r5, #0]
 8011b9c:	b103      	cbz	r3, 8011ba0 <_kill_r+0x1c>
 8011b9e:	6023      	str	r3, [r4, #0]
 8011ba0:	bd38      	pop	{r3, r4, r5, pc}
 8011ba2:	bf00      	nop
 8011ba4:	20005488 	.word	0x20005488

08011ba8 <_getpid_r>:
 8011ba8:	f7f0 bb06 	b.w	80021b8 <_getpid>

08011bac <siprintf>:
 8011bac:	b40e      	push	{r1, r2, r3}
 8011bae:	b500      	push	{lr}
 8011bb0:	b09c      	sub	sp, #112	; 0x70
 8011bb2:	ab1d      	add	r3, sp, #116	; 0x74
 8011bb4:	9002      	str	r0, [sp, #8]
 8011bb6:	9006      	str	r0, [sp, #24]
 8011bb8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8011bbc:	4809      	ldr	r0, [pc, #36]	; (8011be4 <siprintf+0x38>)
 8011bbe:	9107      	str	r1, [sp, #28]
 8011bc0:	9104      	str	r1, [sp, #16]
 8011bc2:	4909      	ldr	r1, [pc, #36]	; (8011be8 <siprintf+0x3c>)
 8011bc4:	f853 2b04 	ldr.w	r2, [r3], #4
 8011bc8:	9105      	str	r1, [sp, #20]
 8011bca:	6800      	ldr	r0, [r0, #0]
 8011bcc:	9301      	str	r3, [sp, #4]
 8011bce:	a902      	add	r1, sp, #8
 8011bd0:	f001 fc62 	bl	8013498 <_svfiprintf_r>
 8011bd4:	9b02      	ldr	r3, [sp, #8]
 8011bd6:	2200      	movs	r2, #0
 8011bd8:	701a      	strb	r2, [r3, #0]
 8011bda:	b01c      	add	sp, #112	; 0x70
 8011bdc:	f85d eb04 	ldr.w	lr, [sp], #4
 8011be0:	b003      	add	sp, #12
 8011be2:	4770      	bx	lr
 8011be4:	20000018 	.word	0x20000018
 8011be8:	ffff0208 	.word	0xffff0208

08011bec <__sread>:
 8011bec:	b510      	push	{r4, lr}
 8011bee:	460c      	mov	r4, r1
 8011bf0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011bf4:	f001 fd50 	bl	8013698 <_read_r>
 8011bf8:	2800      	cmp	r0, #0
 8011bfa:	bfab      	itete	ge
 8011bfc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8011bfe:	89a3      	ldrhlt	r3, [r4, #12]
 8011c00:	181b      	addge	r3, r3, r0
 8011c02:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8011c06:	bfac      	ite	ge
 8011c08:	6563      	strge	r3, [r4, #84]	; 0x54
 8011c0a:	81a3      	strhlt	r3, [r4, #12]
 8011c0c:	bd10      	pop	{r4, pc}

08011c0e <__swrite>:
 8011c0e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011c12:	461f      	mov	r7, r3
 8011c14:	898b      	ldrh	r3, [r1, #12]
 8011c16:	05db      	lsls	r3, r3, #23
 8011c18:	4605      	mov	r5, r0
 8011c1a:	460c      	mov	r4, r1
 8011c1c:	4616      	mov	r6, r2
 8011c1e:	d505      	bpl.n	8011c2c <__swrite+0x1e>
 8011c20:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011c24:	2302      	movs	r3, #2
 8011c26:	2200      	movs	r2, #0
 8011c28:	f001 f818 	bl	8012c5c <_lseek_r>
 8011c2c:	89a3      	ldrh	r3, [r4, #12]
 8011c2e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011c32:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8011c36:	81a3      	strh	r3, [r4, #12]
 8011c38:	4632      	mov	r2, r6
 8011c3a:	463b      	mov	r3, r7
 8011c3c:	4628      	mov	r0, r5
 8011c3e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011c42:	f000 b87b 	b.w	8011d3c <_write_r>

08011c46 <__sseek>:
 8011c46:	b510      	push	{r4, lr}
 8011c48:	460c      	mov	r4, r1
 8011c4a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011c4e:	f001 f805 	bl	8012c5c <_lseek_r>
 8011c52:	1c43      	adds	r3, r0, #1
 8011c54:	89a3      	ldrh	r3, [r4, #12]
 8011c56:	bf15      	itete	ne
 8011c58:	6560      	strne	r0, [r4, #84]	; 0x54
 8011c5a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8011c5e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8011c62:	81a3      	strheq	r3, [r4, #12]
 8011c64:	bf18      	it	ne
 8011c66:	81a3      	strhne	r3, [r4, #12]
 8011c68:	bd10      	pop	{r4, pc}

08011c6a <__sclose>:
 8011c6a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011c6e:	f000 b947 	b.w	8011f00 <_close_r>

08011c72 <strncmp>:
 8011c72:	b510      	push	{r4, lr}
 8011c74:	b16a      	cbz	r2, 8011c92 <strncmp+0x20>
 8011c76:	3901      	subs	r1, #1
 8011c78:	1884      	adds	r4, r0, r2
 8011c7a:	f810 3b01 	ldrb.w	r3, [r0], #1
 8011c7e:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8011c82:	4293      	cmp	r3, r2
 8011c84:	d103      	bne.n	8011c8e <strncmp+0x1c>
 8011c86:	42a0      	cmp	r0, r4
 8011c88:	d001      	beq.n	8011c8e <strncmp+0x1c>
 8011c8a:	2b00      	cmp	r3, #0
 8011c8c:	d1f5      	bne.n	8011c7a <strncmp+0x8>
 8011c8e:	1a98      	subs	r0, r3, r2
 8011c90:	bd10      	pop	{r4, pc}
 8011c92:	4610      	mov	r0, r2
 8011c94:	e7fc      	b.n	8011c90 <strncmp+0x1e>
	...

08011c98 <__swbuf_r>:
 8011c98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011c9a:	460e      	mov	r6, r1
 8011c9c:	4614      	mov	r4, r2
 8011c9e:	4605      	mov	r5, r0
 8011ca0:	b118      	cbz	r0, 8011caa <__swbuf_r+0x12>
 8011ca2:	6983      	ldr	r3, [r0, #24]
 8011ca4:	b90b      	cbnz	r3, 8011caa <__swbuf_r+0x12>
 8011ca6:	f7fe fec5 	bl	8010a34 <__sinit>
 8011caa:	4b21      	ldr	r3, [pc, #132]	; (8011d30 <__swbuf_r+0x98>)
 8011cac:	429c      	cmp	r4, r3
 8011cae:	d12b      	bne.n	8011d08 <__swbuf_r+0x70>
 8011cb0:	686c      	ldr	r4, [r5, #4]
 8011cb2:	69a3      	ldr	r3, [r4, #24]
 8011cb4:	60a3      	str	r3, [r4, #8]
 8011cb6:	89a3      	ldrh	r3, [r4, #12]
 8011cb8:	071a      	lsls	r2, r3, #28
 8011cba:	d52f      	bpl.n	8011d1c <__swbuf_r+0x84>
 8011cbc:	6923      	ldr	r3, [r4, #16]
 8011cbe:	b36b      	cbz	r3, 8011d1c <__swbuf_r+0x84>
 8011cc0:	6923      	ldr	r3, [r4, #16]
 8011cc2:	6820      	ldr	r0, [r4, #0]
 8011cc4:	1ac0      	subs	r0, r0, r3
 8011cc6:	6963      	ldr	r3, [r4, #20]
 8011cc8:	b2f6      	uxtb	r6, r6
 8011cca:	4283      	cmp	r3, r0
 8011ccc:	4637      	mov	r7, r6
 8011cce:	dc04      	bgt.n	8011cda <__swbuf_r+0x42>
 8011cd0:	4621      	mov	r1, r4
 8011cd2:	4628      	mov	r0, r5
 8011cd4:	f7fe fe1a 	bl	801090c <_fflush_r>
 8011cd8:	bb30      	cbnz	r0, 8011d28 <__swbuf_r+0x90>
 8011cda:	68a3      	ldr	r3, [r4, #8]
 8011cdc:	3b01      	subs	r3, #1
 8011cde:	60a3      	str	r3, [r4, #8]
 8011ce0:	6823      	ldr	r3, [r4, #0]
 8011ce2:	1c5a      	adds	r2, r3, #1
 8011ce4:	6022      	str	r2, [r4, #0]
 8011ce6:	701e      	strb	r6, [r3, #0]
 8011ce8:	6963      	ldr	r3, [r4, #20]
 8011cea:	3001      	adds	r0, #1
 8011cec:	4283      	cmp	r3, r0
 8011cee:	d004      	beq.n	8011cfa <__swbuf_r+0x62>
 8011cf0:	89a3      	ldrh	r3, [r4, #12]
 8011cf2:	07db      	lsls	r3, r3, #31
 8011cf4:	d506      	bpl.n	8011d04 <__swbuf_r+0x6c>
 8011cf6:	2e0a      	cmp	r6, #10
 8011cf8:	d104      	bne.n	8011d04 <__swbuf_r+0x6c>
 8011cfa:	4621      	mov	r1, r4
 8011cfc:	4628      	mov	r0, r5
 8011cfe:	f7fe fe05 	bl	801090c <_fflush_r>
 8011d02:	b988      	cbnz	r0, 8011d28 <__swbuf_r+0x90>
 8011d04:	4638      	mov	r0, r7
 8011d06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011d08:	4b0a      	ldr	r3, [pc, #40]	; (8011d34 <__swbuf_r+0x9c>)
 8011d0a:	429c      	cmp	r4, r3
 8011d0c:	d101      	bne.n	8011d12 <__swbuf_r+0x7a>
 8011d0e:	68ac      	ldr	r4, [r5, #8]
 8011d10:	e7cf      	b.n	8011cb2 <__swbuf_r+0x1a>
 8011d12:	4b09      	ldr	r3, [pc, #36]	; (8011d38 <__swbuf_r+0xa0>)
 8011d14:	429c      	cmp	r4, r3
 8011d16:	bf08      	it	eq
 8011d18:	68ec      	ldreq	r4, [r5, #12]
 8011d1a:	e7ca      	b.n	8011cb2 <__swbuf_r+0x1a>
 8011d1c:	4621      	mov	r1, r4
 8011d1e:	4628      	mov	r0, r5
 8011d20:	f000 f81e 	bl	8011d60 <__swsetup_r>
 8011d24:	2800      	cmp	r0, #0
 8011d26:	d0cb      	beq.n	8011cc0 <__swbuf_r+0x28>
 8011d28:	f04f 37ff 	mov.w	r7, #4294967295
 8011d2c:	e7ea      	b.n	8011d04 <__swbuf_r+0x6c>
 8011d2e:	bf00      	nop
 8011d30:	0801d094 	.word	0x0801d094
 8011d34:	0801d0b4 	.word	0x0801d0b4
 8011d38:	0801d074 	.word	0x0801d074

08011d3c <_write_r>:
 8011d3c:	b538      	push	{r3, r4, r5, lr}
 8011d3e:	4d07      	ldr	r5, [pc, #28]	; (8011d5c <_write_r+0x20>)
 8011d40:	4604      	mov	r4, r0
 8011d42:	4608      	mov	r0, r1
 8011d44:	4611      	mov	r1, r2
 8011d46:	2200      	movs	r2, #0
 8011d48:	602a      	str	r2, [r5, #0]
 8011d4a:	461a      	mov	r2, r3
 8011d4c:	f7f0 fa73 	bl	8002236 <_write>
 8011d50:	1c43      	adds	r3, r0, #1
 8011d52:	d102      	bne.n	8011d5a <_write_r+0x1e>
 8011d54:	682b      	ldr	r3, [r5, #0]
 8011d56:	b103      	cbz	r3, 8011d5a <_write_r+0x1e>
 8011d58:	6023      	str	r3, [r4, #0]
 8011d5a:	bd38      	pop	{r3, r4, r5, pc}
 8011d5c:	20005488 	.word	0x20005488

08011d60 <__swsetup_r>:
 8011d60:	4b32      	ldr	r3, [pc, #200]	; (8011e2c <__swsetup_r+0xcc>)
 8011d62:	b570      	push	{r4, r5, r6, lr}
 8011d64:	681d      	ldr	r5, [r3, #0]
 8011d66:	4606      	mov	r6, r0
 8011d68:	460c      	mov	r4, r1
 8011d6a:	b125      	cbz	r5, 8011d76 <__swsetup_r+0x16>
 8011d6c:	69ab      	ldr	r3, [r5, #24]
 8011d6e:	b913      	cbnz	r3, 8011d76 <__swsetup_r+0x16>
 8011d70:	4628      	mov	r0, r5
 8011d72:	f7fe fe5f 	bl	8010a34 <__sinit>
 8011d76:	4b2e      	ldr	r3, [pc, #184]	; (8011e30 <__swsetup_r+0xd0>)
 8011d78:	429c      	cmp	r4, r3
 8011d7a:	d10f      	bne.n	8011d9c <__swsetup_r+0x3c>
 8011d7c:	686c      	ldr	r4, [r5, #4]
 8011d7e:	89a3      	ldrh	r3, [r4, #12]
 8011d80:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8011d84:	0719      	lsls	r1, r3, #28
 8011d86:	d42c      	bmi.n	8011de2 <__swsetup_r+0x82>
 8011d88:	06dd      	lsls	r5, r3, #27
 8011d8a:	d411      	bmi.n	8011db0 <__swsetup_r+0x50>
 8011d8c:	2309      	movs	r3, #9
 8011d8e:	6033      	str	r3, [r6, #0]
 8011d90:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8011d94:	81a3      	strh	r3, [r4, #12]
 8011d96:	f04f 30ff 	mov.w	r0, #4294967295
 8011d9a:	e03e      	b.n	8011e1a <__swsetup_r+0xba>
 8011d9c:	4b25      	ldr	r3, [pc, #148]	; (8011e34 <__swsetup_r+0xd4>)
 8011d9e:	429c      	cmp	r4, r3
 8011da0:	d101      	bne.n	8011da6 <__swsetup_r+0x46>
 8011da2:	68ac      	ldr	r4, [r5, #8]
 8011da4:	e7eb      	b.n	8011d7e <__swsetup_r+0x1e>
 8011da6:	4b24      	ldr	r3, [pc, #144]	; (8011e38 <__swsetup_r+0xd8>)
 8011da8:	429c      	cmp	r4, r3
 8011daa:	bf08      	it	eq
 8011dac:	68ec      	ldreq	r4, [r5, #12]
 8011dae:	e7e6      	b.n	8011d7e <__swsetup_r+0x1e>
 8011db0:	0758      	lsls	r0, r3, #29
 8011db2:	d512      	bpl.n	8011dda <__swsetup_r+0x7a>
 8011db4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8011db6:	b141      	cbz	r1, 8011dca <__swsetup_r+0x6a>
 8011db8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8011dbc:	4299      	cmp	r1, r3
 8011dbe:	d002      	beq.n	8011dc6 <__swsetup_r+0x66>
 8011dc0:	4630      	mov	r0, r6
 8011dc2:	f7ff f831 	bl	8010e28 <_free_r>
 8011dc6:	2300      	movs	r3, #0
 8011dc8:	6363      	str	r3, [r4, #52]	; 0x34
 8011dca:	89a3      	ldrh	r3, [r4, #12]
 8011dcc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8011dd0:	81a3      	strh	r3, [r4, #12]
 8011dd2:	2300      	movs	r3, #0
 8011dd4:	6063      	str	r3, [r4, #4]
 8011dd6:	6923      	ldr	r3, [r4, #16]
 8011dd8:	6023      	str	r3, [r4, #0]
 8011dda:	89a3      	ldrh	r3, [r4, #12]
 8011ddc:	f043 0308 	orr.w	r3, r3, #8
 8011de0:	81a3      	strh	r3, [r4, #12]
 8011de2:	6923      	ldr	r3, [r4, #16]
 8011de4:	b94b      	cbnz	r3, 8011dfa <__swsetup_r+0x9a>
 8011de6:	89a3      	ldrh	r3, [r4, #12]
 8011de8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8011dec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8011df0:	d003      	beq.n	8011dfa <__swsetup_r+0x9a>
 8011df2:	4621      	mov	r1, r4
 8011df4:	4630      	mov	r0, r6
 8011df6:	f7fe ff87 	bl	8010d08 <__smakebuf_r>
 8011dfa:	89a0      	ldrh	r0, [r4, #12]
 8011dfc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8011e00:	f010 0301 	ands.w	r3, r0, #1
 8011e04:	d00a      	beq.n	8011e1c <__swsetup_r+0xbc>
 8011e06:	2300      	movs	r3, #0
 8011e08:	60a3      	str	r3, [r4, #8]
 8011e0a:	6963      	ldr	r3, [r4, #20]
 8011e0c:	425b      	negs	r3, r3
 8011e0e:	61a3      	str	r3, [r4, #24]
 8011e10:	6923      	ldr	r3, [r4, #16]
 8011e12:	b943      	cbnz	r3, 8011e26 <__swsetup_r+0xc6>
 8011e14:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8011e18:	d1ba      	bne.n	8011d90 <__swsetup_r+0x30>
 8011e1a:	bd70      	pop	{r4, r5, r6, pc}
 8011e1c:	0781      	lsls	r1, r0, #30
 8011e1e:	bf58      	it	pl
 8011e20:	6963      	ldrpl	r3, [r4, #20]
 8011e22:	60a3      	str	r3, [r4, #8]
 8011e24:	e7f4      	b.n	8011e10 <__swsetup_r+0xb0>
 8011e26:	2000      	movs	r0, #0
 8011e28:	e7f7      	b.n	8011e1a <__swsetup_r+0xba>
 8011e2a:	bf00      	nop
 8011e2c:	20000018 	.word	0x20000018
 8011e30:	0801d094 	.word	0x0801d094
 8011e34:	0801d0b4 	.word	0x0801d0b4
 8011e38:	0801d074 	.word	0x0801d074

08011e3c <__register_exitproc>:
 8011e3c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011e40:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 8011efc <__register_exitproc+0xc0>
 8011e44:	4606      	mov	r6, r0
 8011e46:	f8d8 0000 	ldr.w	r0, [r8]
 8011e4a:	461f      	mov	r7, r3
 8011e4c:	460d      	mov	r5, r1
 8011e4e:	4691      	mov	r9, r2
 8011e50:	f7fe ff33 	bl	8010cba <__retarget_lock_acquire_recursive>
 8011e54:	4b25      	ldr	r3, [pc, #148]	; (8011eec <__register_exitproc+0xb0>)
 8011e56:	681c      	ldr	r4, [r3, #0]
 8011e58:	b934      	cbnz	r4, 8011e68 <__register_exitproc+0x2c>
 8011e5a:	4c25      	ldr	r4, [pc, #148]	; (8011ef0 <__register_exitproc+0xb4>)
 8011e5c:	601c      	str	r4, [r3, #0]
 8011e5e:	4b25      	ldr	r3, [pc, #148]	; (8011ef4 <__register_exitproc+0xb8>)
 8011e60:	b113      	cbz	r3, 8011e68 <__register_exitproc+0x2c>
 8011e62:	681b      	ldr	r3, [r3, #0]
 8011e64:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 8011e68:	6863      	ldr	r3, [r4, #4]
 8011e6a:	2b1f      	cmp	r3, #31
 8011e6c:	dd07      	ble.n	8011e7e <__register_exitproc+0x42>
 8011e6e:	f8d8 0000 	ldr.w	r0, [r8]
 8011e72:	f7fe ff24 	bl	8010cbe <__retarget_lock_release_recursive>
 8011e76:	f04f 30ff 	mov.w	r0, #4294967295
 8011e7a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011e7e:	b34e      	cbz	r6, 8011ed4 <__register_exitproc+0x98>
 8011e80:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 8011e84:	b988      	cbnz	r0, 8011eaa <__register_exitproc+0x6e>
 8011e86:	4b1c      	ldr	r3, [pc, #112]	; (8011ef8 <__register_exitproc+0xbc>)
 8011e88:	b923      	cbnz	r3, 8011e94 <__register_exitproc+0x58>
 8011e8a:	f8d8 0000 	ldr.w	r0, [r8]
 8011e8e:	f7fe ff15 	bl	8010cbc <__retarget_lock_release>
 8011e92:	e7f0      	b.n	8011e76 <__register_exitproc+0x3a>
 8011e94:	f44f 7084 	mov.w	r0, #264	; 0x108
 8011e98:	f7fe ff76 	bl	8010d88 <malloc>
 8011e9c:	2800      	cmp	r0, #0
 8011e9e:	d0f4      	beq.n	8011e8a <__register_exitproc+0x4e>
 8011ea0:	2300      	movs	r3, #0
 8011ea2:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
 8011ea6:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 8011eaa:	6863      	ldr	r3, [r4, #4]
 8011eac:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
 8011eb0:	2201      	movs	r2, #1
 8011eb2:	409a      	lsls	r2, r3
 8011eb4:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 8011eb8:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 8011ebc:	4313      	orrs	r3, r2
 8011ebe:	2e02      	cmp	r6, #2
 8011ec0:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 8011ec4:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
 8011ec8:	bf02      	ittt	eq
 8011eca:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
 8011ece:	431a      	orreq	r2, r3
 8011ed0:	f8c0 2104 	streq.w	r2, [r0, #260]	; 0x104
 8011ed4:	6863      	ldr	r3, [r4, #4]
 8011ed6:	f8d8 0000 	ldr.w	r0, [r8]
 8011eda:	1c5a      	adds	r2, r3, #1
 8011edc:	3302      	adds	r3, #2
 8011ede:	6062      	str	r2, [r4, #4]
 8011ee0:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
 8011ee4:	f7fe feeb 	bl	8010cbe <__retarget_lock_release_recursive>
 8011ee8:	2000      	movs	r0, #0
 8011eea:	e7c6      	b.n	8011e7a <__register_exitproc+0x3e>
 8011eec:	20005474 	.word	0x20005474
 8011ef0:	200053e8 	.word	0x200053e8
 8011ef4:	00000000 	.word	0x00000000
 8011ef8:	08010d89 	.word	0x08010d89
 8011efc:	2000007c 	.word	0x2000007c

08011f00 <_close_r>:
 8011f00:	b538      	push	{r3, r4, r5, lr}
 8011f02:	4d06      	ldr	r5, [pc, #24]	; (8011f1c <_close_r+0x1c>)
 8011f04:	2300      	movs	r3, #0
 8011f06:	4604      	mov	r4, r0
 8011f08:	4608      	mov	r0, r1
 8011f0a:	602b      	str	r3, [r5, #0]
 8011f0c:	f7f0 f9af 	bl	800226e <_close>
 8011f10:	1c43      	adds	r3, r0, #1
 8011f12:	d102      	bne.n	8011f1a <_close_r+0x1a>
 8011f14:	682b      	ldr	r3, [r5, #0]
 8011f16:	b103      	cbz	r3, 8011f1a <_close_r+0x1a>
 8011f18:	6023      	str	r3, [r4, #0]
 8011f1a:	bd38      	pop	{r3, r4, r5, pc}
 8011f1c:	20005488 	.word	0x20005488

08011f20 <quorem>:
 8011f20:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011f24:	6903      	ldr	r3, [r0, #16]
 8011f26:	690c      	ldr	r4, [r1, #16]
 8011f28:	42a3      	cmp	r3, r4
 8011f2a:	4607      	mov	r7, r0
 8011f2c:	f2c0 8081 	blt.w	8012032 <quorem+0x112>
 8011f30:	3c01      	subs	r4, #1
 8011f32:	f101 0814 	add.w	r8, r1, #20
 8011f36:	f100 0514 	add.w	r5, r0, #20
 8011f3a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8011f3e:	9301      	str	r3, [sp, #4]
 8011f40:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8011f44:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8011f48:	3301      	adds	r3, #1
 8011f4a:	429a      	cmp	r2, r3
 8011f4c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8011f50:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8011f54:	fbb2 f6f3 	udiv	r6, r2, r3
 8011f58:	d331      	bcc.n	8011fbe <quorem+0x9e>
 8011f5a:	f04f 0e00 	mov.w	lr, #0
 8011f5e:	4640      	mov	r0, r8
 8011f60:	46ac      	mov	ip, r5
 8011f62:	46f2      	mov	sl, lr
 8011f64:	f850 2b04 	ldr.w	r2, [r0], #4
 8011f68:	b293      	uxth	r3, r2
 8011f6a:	fb06 e303 	mla	r3, r6, r3, lr
 8011f6e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8011f72:	b29b      	uxth	r3, r3
 8011f74:	ebaa 0303 	sub.w	r3, sl, r3
 8011f78:	0c12      	lsrs	r2, r2, #16
 8011f7a:	f8dc a000 	ldr.w	sl, [ip]
 8011f7e:	fb06 e202 	mla	r2, r6, r2, lr
 8011f82:	fa13 f38a 	uxtah	r3, r3, sl
 8011f86:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8011f8a:	fa1f fa82 	uxth.w	sl, r2
 8011f8e:	f8dc 2000 	ldr.w	r2, [ip]
 8011f92:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8011f96:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8011f9a:	b29b      	uxth	r3, r3
 8011f9c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8011fa0:	4581      	cmp	r9, r0
 8011fa2:	f84c 3b04 	str.w	r3, [ip], #4
 8011fa6:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8011faa:	d2db      	bcs.n	8011f64 <quorem+0x44>
 8011fac:	f855 300b 	ldr.w	r3, [r5, fp]
 8011fb0:	b92b      	cbnz	r3, 8011fbe <quorem+0x9e>
 8011fb2:	9b01      	ldr	r3, [sp, #4]
 8011fb4:	3b04      	subs	r3, #4
 8011fb6:	429d      	cmp	r5, r3
 8011fb8:	461a      	mov	r2, r3
 8011fba:	d32e      	bcc.n	801201a <quorem+0xfa>
 8011fbc:	613c      	str	r4, [r7, #16]
 8011fbe:	4638      	mov	r0, r7
 8011fc0:	f001 f8e8 	bl	8013194 <__mcmp>
 8011fc4:	2800      	cmp	r0, #0
 8011fc6:	db24      	blt.n	8012012 <quorem+0xf2>
 8011fc8:	3601      	adds	r6, #1
 8011fca:	4628      	mov	r0, r5
 8011fcc:	f04f 0c00 	mov.w	ip, #0
 8011fd0:	f858 2b04 	ldr.w	r2, [r8], #4
 8011fd4:	f8d0 e000 	ldr.w	lr, [r0]
 8011fd8:	b293      	uxth	r3, r2
 8011fda:	ebac 0303 	sub.w	r3, ip, r3
 8011fde:	0c12      	lsrs	r2, r2, #16
 8011fe0:	fa13 f38e 	uxtah	r3, r3, lr
 8011fe4:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8011fe8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8011fec:	b29b      	uxth	r3, r3
 8011fee:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8011ff2:	45c1      	cmp	r9, r8
 8011ff4:	f840 3b04 	str.w	r3, [r0], #4
 8011ff8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8011ffc:	d2e8      	bcs.n	8011fd0 <quorem+0xb0>
 8011ffe:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8012002:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8012006:	b922      	cbnz	r2, 8012012 <quorem+0xf2>
 8012008:	3b04      	subs	r3, #4
 801200a:	429d      	cmp	r5, r3
 801200c:	461a      	mov	r2, r3
 801200e:	d30a      	bcc.n	8012026 <quorem+0x106>
 8012010:	613c      	str	r4, [r7, #16]
 8012012:	4630      	mov	r0, r6
 8012014:	b003      	add	sp, #12
 8012016:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801201a:	6812      	ldr	r2, [r2, #0]
 801201c:	3b04      	subs	r3, #4
 801201e:	2a00      	cmp	r2, #0
 8012020:	d1cc      	bne.n	8011fbc <quorem+0x9c>
 8012022:	3c01      	subs	r4, #1
 8012024:	e7c7      	b.n	8011fb6 <quorem+0x96>
 8012026:	6812      	ldr	r2, [r2, #0]
 8012028:	3b04      	subs	r3, #4
 801202a:	2a00      	cmp	r2, #0
 801202c:	d1f0      	bne.n	8012010 <quorem+0xf0>
 801202e:	3c01      	subs	r4, #1
 8012030:	e7eb      	b.n	801200a <quorem+0xea>
 8012032:	2000      	movs	r0, #0
 8012034:	e7ee      	b.n	8012014 <quorem+0xf4>
	...

08012038 <_dtoa_r>:
 8012038:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801203c:	ed2d 8b02 	vpush	{d8}
 8012040:	ec57 6b10 	vmov	r6, r7, d0
 8012044:	b095      	sub	sp, #84	; 0x54
 8012046:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8012048:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 801204c:	9105      	str	r1, [sp, #20]
 801204e:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8012052:	4604      	mov	r4, r0
 8012054:	9209      	str	r2, [sp, #36]	; 0x24
 8012056:	930f      	str	r3, [sp, #60]	; 0x3c
 8012058:	b975      	cbnz	r5, 8012078 <_dtoa_r+0x40>
 801205a:	2010      	movs	r0, #16
 801205c:	f7fe fe94 	bl	8010d88 <malloc>
 8012060:	4602      	mov	r2, r0
 8012062:	6260      	str	r0, [r4, #36]	; 0x24
 8012064:	b920      	cbnz	r0, 8012070 <_dtoa_r+0x38>
 8012066:	4bb2      	ldr	r3, [pc, #712]	; (8012330 <_dtoa_r+0x2f8>)
 8012068:	21ea      	movs	r1, #234	; 0xea
 801206a:	48b2      	ldr	r0, [pc, #712]	; (8012334 <_dtoa_r+0x2fc>)
 801206c:	f7fe fb9e 	bl	80107ac <__assert_func>
 8012070:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8012074:	6005      	str	r5, [r0, #0]
 8012076:	60c5      	str	r5, [r0, #12]
 8012078:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801207a:	6819      	ldr	r1, [r3, #0]
 801207c:	b151      	cbz	r1, 8012094 <_dtoa_r+0x5c>
 801207e:	685a      	ldr	r2, [r3, #4]
 8012080:	604a      	str	r2, [r1, #4]
 8012082:	2301      	movs	r3, #1
 8012084:	4093      	lsls	r3, r2
 8012086:	608b      	str	r3, [r1, #8]
 8012088:	4620      	mov	r0, r4
 801208a:	f000 fe45 	bl	8012d18 <_Bfree>
 801208e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8012090:	2200      	movs	r2, #0
 8012092:	601a      	str	r2, [r3, #0]
 8012094:	1e3b      	subs	r3, r7, #0
 8012096:	bfb9      	ittee	lt
 8012098:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 801209c:	9303      	strlt	r3, [sp, #12]
 801209e:	2300      	movge	r3, #0
 80120a0:	f8c8 3000 	strge.w	r3, [r8]
 80120a4:	f8dd 900c 	ldr.w	r9, [sp, #12]
 80120a8:	4ba3      	ldr	r3, [pc, #652]	; (8012338 <_dtoa_r+0x300>)
 80120aa:	bfbc      	itt	lt
 80120ac:	2201      	movlt	r2, #1
 80120ae:	f8c8 2000 	strlt.w	r2, [r8]
 80120b2:	ea33 0309 	bics.w	r3, r3, r9
 80120b6:	d11b      	bne.n	80120f0 <_dtoa_r+0xb8>
 80120b8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80120ba:	f242 730f 	movw	r3, #9999	; 0x270f
 80120be:	6013      	str	r3, [r2, #0]
 80120c0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80120c4:	4333      	orrs	r3, r6
 80120c6:	f000 857a 	beq.w	8012bbe <_dtoa_r+0xb86>
 80120ca:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80120cc:	b963      	cbnz	r3, 80120e8 <_dtoa_r+0xb0>
 80120ce:	4b9b      	ldr	r3, [pc, #620]	; (801233c <_dtoa_r+0x304>)
 80120d0:	e024      	b.n	801211c <_dtoa_r+0xe4>
 80120d2:	4b9b      	ldr	r3, [pc, #620]	; (8012340 <_dtoa_r+0x308>)
 80120d4:	9300      	str	r3, [sp, #0]
 80120d6:	3308      	adds	r3, #8
 80120d8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80120da:	6013      	str	r3, [r2, #0]
 80120dc:	9800      	ldr	r0, [sp, #0]
 80120de:	b015      	add	sp, #84	; 0x54
 80120e0:	ecbd 8b02 	vpop	{d8}
 80120e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80120e8:	4b94      	ldr	r3, [pc, #592]	; (801233c <_dtoa_r+0x304>)
 80120ea:	9300      	str	r3, [sp, #0]
 80120ec:	3303      	adds	r3, #3
 80120ee:	e7f3      	b.n	80120d8 <_dtoa_r+0xa0>
 80120f0:	ed9d 7b02 	vldr	d7, [sp, #8]
 80120f4:	2200      	movs	r2, #0
 80120f6:	ec51 0b17 	vmov	r0, r1, d7
 80120fa:	2300      	movs	r3, #0
 80120fc:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8012100:	f7ee fcf4 	bl	8000aec <__aeabi_dcmpeq>
 8012104:	4680      	mov	r8, r0
 8012106:	b158      	cbz	r0, 8012120 <_dtoa_r+0xe8>
 8012108:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801210a:	2301      	movs	r3, #1
 801210c:	6013      	str	r3, [r2, #0]
 801210e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8012110:	2b00      	cmp	r3, #0
 8012112:	f000 8551 	beq.w	8012bb8 <_dtoa_r+0xb80>
 8012116:	488b      	ldr	r0, [pc, #556]	; (8012344 <_dtoa_r+0x30c>)
 8012118:	6018      	str	r0, [r3, #0]
 801211a:	1e43      	subs	r3, r0, #1
 801211c:	9300      	str	r3, [sp, #0]
 801211e:	e7dd      	b.n	80120dc <_dtoa_r+0xa4>
 8012120:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8012124:	aa12      	add	r2, sp, #72	; 0x48
 8012126:	a913      	add	r1, sp, #76	; 0x4c
 8012128:	4620      	mov	r0, r4
 801212a:	f001 f8d7 	bl	80132dc <__d2b>
 801212e:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8012132:	4683      	mov	fp, r0
 8012134:	2d00      	cmp	r5, #0
 8012136:	d07c      	beq.n	8012232 <_dtoa_r+0x1fa>
 8012138:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801213a:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 801213e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8012142:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8012146:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 801214a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 801214e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8012152:	4b7d      	ldr	r3, [pc, #500]	; (8012348 <_dtoa_r+0x310>)
 8012154:	2200      	movs	r2, #0
 8012156:	4630      	mov	r0, r6
 8012158:	4639      	mov	r1, r7
 801215a:	f7ee f8a7 	bl	80002ac <__aeabi_dsub>
 801215e:	a36e      	add	r3, pc, #440	; (adr r3, 8012318 <_dtoa_r+0x2e0>)
 8012160:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012164:	f7ee fa5a 	bl	800061c <__aeabi_dmul>
 8012168:	a36d      	add	r3, pc, #436	; (adr r3, 8012320 <_dtoa_r+0x2e8>)
 801216a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801216e:	f7ee f89f 	bl	80002b0 <__adddf3>
 8012172:	4606      	mov	r6, r0
 8012174:	4628      	mov	r0, r5
 8012176:	460f      	mov	r7, r1
 8012178:	f7ee f9e6 	bl	8000548 <__aeabi_i2d>
 801217c:	a36a      	add	r3, pc, #424	; (adr r3, 8012328 <_dtoa_r+0x2f0>)
 801217e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012182:	f7ee fa4b 	bl	800061c <__aeabi_dmul>
 8012186:	4602      	mov	r2, r0
 8012188:	460b      	mov	r3, r1
 801218a:	4630      	mov	r0, r6
 801218c:	4639      	mov	r1, r7
 801218e:	f7ee f88f 	bl	80002b0 <__adddf3>
 8012192:	4606      	mov	r6, r0
 8012194:	460f      	mov	r7, r1
 8012196:	f7ee fcf1 	bl	8000b7c <__aeabi_d2iz>
 801219a:	2200      	movs	r2, #0
 801219c:	4682      	mov	sl, r0
 801219e:	2300      	movs	r3, #0
 80121a0:	4630      	mov	r0, r6
 80121a2:	4639      	mov	r1, r7
 80121a4:	f7ee fcac 	bl	8000b00 <__aeabi_dcmplt>
 80121a8:	b148      	cbz	r0, 80121be <_dtoa_r+0x186>
 80121aa:	4650      	mov	r0, sl
 80121ac:	f7ee f9cc 	bl	8000548 <__aeabi_i2d>
 80121b0:	4632      	mov	r2, r6
 80121b2:	463b      	mov	r3, r7
 80121b4:	f7ee fc9a 	bl	8000aec <__aeabi_dcmpeq>
 80121b8:	b908      	cbnz	r0, 80121be <_dtoa_r+0x186>
 80121ba:	f10a 3aff 	add.w	sl, sl, #4294967295
 80121be:	f1ba 0f16 	cmp.w	sl, #22
 80121c2:	d854      	bhi.n	801226e <_dtoa_r+0x236>
 80121c4:	4b61      	ldr	r3, [pc, #388]	; (801234c <_dtoa_r+0x314>)
 80121c6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80121ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80121ce:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80121d2:	f7ee fc95 	bl	8000b00 <__aeabi_dcmplt>
 80121d6:	2800      	cmp	r0, #0
 80121d8:	d04b      	beq.n	8012272 <_dtoa_r+0x23a>
 80121da:	f10a 3aff 	add.w	sl, sl, #4294967295
 80121de:	2300      	movs	r3, #0
 80121e0:	930e      	str	r3, [sp, #56]	; 0x38
 80121e2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80121e4:	1b5d      	subs	r5, r3, r5
 80121e6:	1e6b      	subs	r3, r5, #1
 80121e8:	9304      	str	r3, [sp, #16]
 80121ea:	bf43      	ittte	mi
 80121ec:	2300      	movmi	r3, #0
 80121ee:	f1c5 0801 	rsbmi	r8, r5, #1
 80121f2:	9304      	strmi	r3, [sp, #16]
 80121f4:	f04f 0800 	movpl.w	r8, #0
 80121f8:	f1ba 0f00 	cmp.w	sl, #0
 80121fc:	db3b      	blt.n	8012276 <_dtoa_r+0x23e>
 80121fe:	9b04      	ldr	r3, [sp, #16]
 8012200:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8012204:	4453      	add	r3, sl
 8012206:	9304      	str	r3, [sp, #16]
 8012208:	2300      	movs	r3, #0
 801220a:	9306      	str	r3, [sp, #24]
 801220c:	9b05      	ldr	r3, [sp, #20]
 801220e:	2b09      	cmp	r3, #9
 8012210:	d869      	bhi.n	80122e6 <_dtoa_r+0x2ae>
 8012212:	2b05      	cmp	r3, #5
 8012214:	bfc4      	itt	gt
 8012216:	3b04      	subgt	r3, #4
 8012218:	9305      	strgt	r3, [sp, #20]
 801221a:	9b05      	ldr	r3, [sp, #20]
 801221c:	f1a3 0302 	sub.w	r3, r3, #2
 8012220:	bfcc      	ite	gt
 8012222:	2500      	movgt	r5, #0
 8012224:	2501      	movle	r5, #1
 8012226:	2b03      	cmp	r3, #3
 8012228:	d869      	bhi.n	80122fe <_dtoa_r+0x2c6>
 801222a:	e8df f003 	tbb	[pc, r3]
 801222e:	4e2c      	.short	0x4e2c
 8012230:	5a4c      	.short	0x5a4c
 8012232:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8012236:	441d      	add	r5, r3
 8012238:	f205 4332 	addw	r3, r5, #1074	; 0x432
 801223c:	2b20      	cmp	r3, #32
 801223e:	bfc1      	itttt	gt
 8012240:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8012244:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8012248:	fa09 f303 	lslgt.w	r3, r9, r3
 801224c:	fa26 f000 	lsrgt.w	r0, r6, r0
 8012250:	bfda      	itte	le
 8012252:	f1c3 0320 	rsble	r3, r3, #32
 8012256:	fa06 f003 	lslle.w	r0, r6, r3
 801225a:	4318      	orrgt	r0, r3
 801225c:	f7ee f964 	bl	8000528 <__aeabi_ui2d>
 8012260:	2301      	movs	r3, #1
 8012262:	4606      	mov	r6, r0
 8012264:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8012268:	3d01      	subs	r5, #1
 801226a:	9310      	str	r3, [sp, #64]	; 0x40
 801226c:	e771      	b.n	8012152 <_dtoa_r+0x11a>
 801226e:	2301      	movs	r3, #1
 8012270:	e7b6      	b.n	80121e0 <_dtoa_r+0x1a8>
 8012272:	900e      	str	r0, [sp, #56]	; 0x38
 8012274:	e7b5      	b.n	80121e2 <_dtoa_r+0x1aa>
 8012276:	f1ca 0300 	rsb	r3, sl, #0
 801227a:	9306      	str	r3, [sp, #24]
 801227c:	2300      	movs	r3, #0
 801227e:	eba8 080a 	sub.w	r8, r8, sl
 8012282:	930d      	str	r3, [sp, #52]	; 0x34
 8012284:	e7c2      	b.n	801220c <_dtoa_r+0x1d4>
 8012286:	2300      	movs	r3, #0
 8012288:	9308      	str	r3, [sp, #32]
 801228a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801228c:	2b00      	cmp	r3, #0
 801228e:	dc39      	bgt.n	8012304 <_dtoa_r+0x2cc>
 8012290:	f04f 0901 	mov.w	r9, #1
 8012294:	f8cd 9004 	str.w	r9, [sp, #4]
 8012298:	464b      	mov	r3, r9
 801229a:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 801229e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80122a0:	2200      	movs	r2, #0
 80122a2:	6042      	str	r2, [r0, #4]
 80122a4:	2204      	movs	r2, #4
 80122a6:	f102 0614 	add.w	r6, r2, #20
 80122aa:	429e      	cmp	r6, r3
 80122ac:	6841      	ldr	r1, [r0, #4]
 80122ae:	d92f      	bls.n	8012310 <_dtoa_r+0x2d8>
 80122b0:	4620      	mov	r0, r4
 80122b2:	f000 fcf1 	bl	8012c98 <_Balloc>
 80122b6:	9000      	str	r0, [sp, #0]
 80122b8:	2800      	cmp	r0, #0
 80122ba:	d14b      	bne.n	8012354 <_dtoa_r+0x31c>
 80122bc:	4b24      	ldr	r3, [pc, #144]	; (8012350 <_dtoa_r+0x318>)
 80122be:	4602      	mov	r2, r0
 80122c0:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80122c4:	e6d1      	b.n	801206a <_dtoa_r+0x32>
 80122c6:	2301      	movs	r3, #1
 80122c8:	e7de      	b.n	8012288 <_dtoa_r+0x250>
 80122ca:	2300      	movs	r3, #0
 80122cc:	9308      	str	r3, [sp, #32]
 80122ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80122d0:	eb0a 0903 	add.w	r9, sl, r3
 80122d4:	f109 0301 	add.w	r3, r9, #1
 80122d8:	2b01      	cmp	r3, #1
 80122da:	9301      	str	r3, [sp, #4]
 80122dc:	bfb8      	it	lt
 80122de:	2301      	movlt	r3, #1
 80122e0:	e7dd      	b.n	801229e <_dtoa_r+0x266>
 80122e2:	2301      	movs	r3, #1
 80122e4:	e7f2      	b.n	80122cc <_dtoa_r+0x294>
 80122e6:	2501      	movs	r5, #1
 80122e8:	2300      	movs	r3, #0
 80122ea:	9305      	str	r3, [sp, #20]
 80122ec:	9508      	str	r5, [sp, #32]
 80122ee:	f04f 39ff 	mov.w	r9, #4294967295
 80122f2:	2200      	movs	r2, #0
 80122f4:	f8cd 9004 	str.w	r9, [sp, #4]
 80122f8:	2312      	movs	r3, #18
 80122fa:	9209      	str	r2, [sp, #36]	; 0x24
 80122fc:	e7cf      	b.n	801229e <_dtoa_r+0x266>
 80122fe:	2301      	movs	r3, #1
 8012300:	9308      	str	r3, [sp, #32]
 8012302:	e7f4      	b.n	80122ee <_dtoa_r+0x2b6>
 8012304:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8012308:	f8cd 9004 	str.w	r9, [sp, #4]
 801230c:	464b      	mov	r3, r9
 801230e:	e7c6      	b.n	801229e <_dtoa_r+0x266>
 8012310:	3101      	adds	r1, #1
 8012312:	6041      	str	r1, [r0, #4]
 8012314:	0052      	lsls	r2, r2, #1
 8012316:	e7c6      	b.n	80122a6 <_dtoa_r+0x26e>
 8012318:	636f4361 	.word	0x636f4361
 801231c:	3fd287a7 	.word	0x3fd287a7
 8012320:	8b60c8b3 	.word	0x8b60c8b3
 8012324:	3fc68a28 	.word	0x3fc68a28
 8012328:	509f79fb 	.word	0x509f79fb
 801232c:	3fd34413 	.word	0x3fd34413
 8012330:	0801d22b 	.word	0x0801d22b
 8012334:	0801d242 	.word	0x0801d242
 8012338:	7ff00000 	.word	0x7ff00000
 801233c:	0801d227 	.word	0x0801d227
 8012340:	0801d21e 	.word	0x0801d21e
 8012344:	0801d0fa 	.word	0x0801d0fa
 8012348:	3ff80000 	.word	0x3ff80000
 801234c:	0801d340 	.word	0x0801d340
 8012350:	0801d2a1 	.word	0x0801d2a1
 8012354:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8012356:	9a00      	ldr	r2, [sp, #0]
 8012358:	601a      	str	r2, [r3, #0]
 801235a:	9b01      	ldr	r3, [sp, #4]
 801235c:	2b0e      	cmp	r3, #14
 801235e:	f200 80ad 	bhi.w	80124bc <_dtoa_r+0x484>
 8012362:	2d00      	cmp	r5, #0
 8012364:	f000 80aa 	beq.w	80124bc <_dtoa_r+0x484>
 8012368:	f1ba 0f00 	cmp.w	sl, #0
 801236c:	dd36      	ble.n	80123dc <_dtoa_r+0x3a4>
 801236e:	4ac3      	ldr	r2, [pc, #780]	; (801267c <_dtoa_r+0x644>)
 8012370:	f00a 030f 	and.w	r3, sl, #15
 8012374:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8012378:	ed93 7b00 	vldr	d7, [r3]
 801237c:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8012380:	ea4f 172a 	mov.w	r7, sl, asr #4
 8012384:	eeb0 8a47 	vmov.f32	s16, s14
 8012388:	eef0 8a67 	vmov.f32	s17, s15
 801238c:	d016      	beq.n	80123bc <_dtoa_r+0x384>
 801238e:	4bbc      	ldr	r3, [pc, #752]	; (8012680 <_dtoa_r+0x648>)
 8012390:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8012394:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8012398:	f7ee fa6a 	bl	8000870 <__aeabi_ddiv>
 801239c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80123a0:	f007 070f 	and.w	r7, r7, #15
 80123a4:	2503      	movs	r5, #3
 80123a6:	4eb6      	ldr	r6, [pc, #728]	; (8012680 <_dtoa_r+0x648>)
 80123a8:	b957      	cbnz	r7, 80123c0 <_dtoa_r+0x388>
 80123aa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80123ae:	ec53 2b18 	vmov	r2, r3, d8
 80123b2:	f7ee fa5d 	bl	8000870 <__aeabi_ddiv>
 80123b6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80123ba:	e029      	b.n	8012410 <_dtoa_r+0x3d8>
 80123bc:	2502      	movs	r5, #2
 80123be:	e7f2      	b.n	80123a6 <_dtoa_r+0x36e>
 80123c0:	07f9      	lsls	r1, r7, #31
 80123c2:	d508      	bpl.n	80123d6 <_dtoa_r+0x39e>
 80123c4:	ec51 0b18 	vmov	r0, r1, d8
 80123c8:	e9d6 2300 	ldrd	r2, r3, [r6]
 80123cc:	f7ee f926 	bl	800061c <__aeabi_dmul>
 80123d0:	ec41 0b18 	vmov	d8, r0, r1
 80123d4:	3501      	adds	r5, #1
 80123d6:	107f      	asrs	r7, r7, #1
 80123d8:	3608      	adds	r6, #8
 80123da:	e7e5      	b.n	80123a8 <_dtoa_r+0x370>
 80123dc:	f000 80a6 	beq.w	801252c <_dtoa_r+0x4f4>
 80123e0:	f1ca 0600 	rsb	r6, sl, #0
 80123e4:	4ba5      	ldr	r3, [pc, #660]	; (801267c <_dtoa_r+0x644>)
 80123e6:	4fa6      	ldr	r7, [pc, #664]	; (8012680 <_dtoa_r+0x648>)
 80123e8:	f006 020f 	and.w	r2, r6, #15
 80123ec:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80123f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80123f4:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80123f8:	f7ee f910 	bl	800061c <__aeabi_dmul>
 80123fc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012400:	1136      	asrs	r6, r6, #4
 8012402:	2300      	movs	r3, #0
 8012404:	2502      	movs	r5, #2
 8012406:	2e00      	cmp	r6, #0
 8012408:	f040 8085 	bne.w	8012516 <_dtoa_r+0x4de>
 801240c:	2b00      	cmp	r3, #0
 801240e:	d1d2      	bne.n	80123b6 <_dtoa_r+0x37e>
 8012410:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8012412:	2b00      	cmp	r3, #0
 8012414:	f000 808c 	beq.w	8012530 <_dtoa_r+0x4f8>
 8012418:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 801241c:	4b99      	ldr	r3, [pc, #612]	; (8012684 <_dtoa_r+0x64c>)
 801241e:	2200      	movs	r2, #0
 8012420:	4630      	mov	r0, r6
 8012422:	4639      	mov	r1, r7
 8012424:	f7ee fb6c 	bl	8000b00 <__aeabi_dcmplt>
 8012428:	2800      	cmp	r0, #0
 801242a:	f000 8081 	beq.w	8012530 <_dtoa_r+0x4f8>
 801242e:	9b01      	ldr	r3, [sp, #4]
 8012430:	2b00      	cmp	r3, #0
 8012432:	d07d      	beq.n	8012530 <_dtoa_r+0x4f8>
 8012434:	f1b9 0f00 	cmp.w	r9, #0
 8012438:	dd3c      	ble.n	80124b4 <_dtoa_r+0x47c>
 801243a:	f10a 33ff 	add.w	r3, sl, #4294967295
 801243e:	9307      	str	r3, [sp, #28]
 8012440:	2200      	movs	r2, #0
 8012442:	4b91      	ldr	r3, [pc, #580]	; (8012688 <_dtoa_r+0x650>)
 8012444:	4630      	mov	r0, r6
 8012446:	4639      	mov	r1, r7
 8012448:	f7ee f8e8 	bl	800061c <__aeabi_dmul>
 801244c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012450:	3501      	adds	r5, #1
 8012452:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8012456:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 801245a:	4628      	mov	r0, r5
 801245c:	f7ee f874 	bl	8000548 <__aeabi_i2d>
 8012460:	4632      	mov	r2, r6
 8012462:	463b      	mov	r3, r7
 8012464:	f7ee f8da 	bl	800061c <__aeabi_dmul>
 8012468:	4b88      	ldr	r3, [pc, #544]	; (801268c <_dtoa_r+0x654>)
 801246a:	2200      	movs	r2, #0
 801246c:	f7ed ff20 	bl	80002b0 <__adddf3>
 8012470:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8012474:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012478:	9303      	str	r3, [sp, #12]
 801247a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801247c:	2b00      	cmp	r3, #0
 801247e:	d15c      	bne.n	801253a <_dtoa_r+0x502>
 8012480:	4b83      	ldr	r3, [pc, #524]	; (8012690 <_dtoa_r+0x658>)
 8012482:	2200      	movs	r2, #0
 8012484:	4630      	mov	r0, r6
 8012486:	4639      	mov	r1, r7
 8012488:	f7ed ff10 	bl	80002ac <__aeabi_dsub>
 801248c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8012490:	4606      	mov	r6, r0
 8012492:	460f      	mov	r7, r1
 8012494:	f7ee fb52 	bl	8000b3c <__aeabi_dcmpgt>
 8012498:	2800      	cmp	r0, #0
 801249a:	f040 8296 	bne.w	80129ca <_dtoa_r+0x992>
 801249e:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 80124a2:	4630      	mov	r0, r6
 80124a4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80124a8:	4639      	mov	r1, r7
 80124aa:	f7ee fb29 	bl	8000b00 <__aeabi_dcmplt>
 80124ae:	2800      	cmp	r0, #0
 80124b0:	f040 8288 	bne.w	80129c4 <_dtoa_r+0x98c>
 80124b4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80124b8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80124bc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80124be:	2b00      	cmp	r3, #0
 80124c0:	f2c0 8158 	blt.w	8012774 <_dtoa_r+0x73c>
 80124c4:	f1ba 0f0e 	cmp.w	sl, #14
 80124c8:	f300 8154 	bgt.w	8012774 <_dtoa_r+0x73c>
 80124cc:	4b6b      	ldr	r3, [pc, #428]	; (801267c <_dtoa_r+0x644>)
 80124ce:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80124d2:	e9d3 8900 	ldrd	r8, r9, [r3]
 80124d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80124d8:	2b00      	cmp	r3, #0
 80124da:	f280 80e3 	bge.w	80126a4 <_dtoa_r+0x66c>
 80124de:	9b01      	ldr	r3, [sp, #4]
 80124e0:	2b00      	cmp	r3, #0
 80124e2:	f300 80df 	bgt.w	80126a4 <_dtoa_r+0x66c>
 80124e6:	f040 826d 	bne.w	80129c4 <_dtoa_r+0x98c>
 80124ea:	4b69      	ldr	r3, [pc, #420]	; (8012690 <_dtoa_r+0x658>)
 80124ec:	2200      	movs	r2, #0
 80124ee:	4640      	mov	r0, r8
 80124f0:	4649      	mov	r1, r9
 80124f2:	f7ee f893 	bl	800061c <__aeabi_dmul>
 80124f6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80124fa:	f7ee fb15 	bl	8000b28 <__aeabi_dcmpge>
 80124fe:	9e01      	ldr	r6, [sp, #4]
 8012500:	4637      	mov	r7, r6
 8012502:	2800      	cmp	r0, #0
 8012504:	f040 8243 	bne.w	801298e <_dtoa_r+0x956>
 8012508:	9d00      	ldr	r5, [sp, #0]
 801250a:	2331      	movs	r3, #49	; 0x31
 801250c:	f805 3b01 	strb.w	r3, [r5], #1
 8012510:	f10a 0a01 	add.w	sl, sl, #1
 8012514:	e23f      	b.n	8012996 <_dtoa_r+0x95e>
 8012516:	07f2      	lsls	r2, r6, #31
 8012518:	d505      	bpl.n	8012526 <_dtoa_r+0x4ee>
 801251a:	e9d7 2300 	ldrd	r2, r3, [r7]
 801251e:	f7ee f87d 	bl	800061c <__aeabi_dmul>
 8012522:	3501      	adds	r5, #1
 8012524:	2301      	movs	r3, #1
 8012526:	1076      	asrs	r6, r6, #1
 8012528:	3708      	adds	r7, #8
 801252a:	e76c      	b.n	8012406 <_dtoa_r+0x3ce>
 801252c:	2502      	movs	r5, #2
 801252e:	e76f      	b.n	8012410 <_dtoa_r+0x3d8>
 8012530:	9b01      	ldr	r3, [sp, #4]
 8012532:	f8cd a01c 	str.w	sl, [sp, #28]
 8012536:	930c      	str	r3, [sp, #48]	; 0x30
 8012538:	e78d      	b.n	8012456 <_dtoa_r+0x41e>
 801253a:	9900      	ldr	r1, [sp, #0]
 801253c:	980c      	ldr	r0, [sp, #48]	; 0x30
 801253e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8012540:	4b4e      	ldr	r3, [pc, #312]	; (801267c <_dtoa_r+0x644>)
 8012542:	ed9d 7b02 	vldr	d7, [sp, #8]
 8012546:	4401      	add	r1, r0
 8012548:	9102      	str	r1, [sp, #8]
 801254a:	9908      	ldr	r1, [sp, #32]
 801254c:	eeb0 8a47 	vmov.f32	s16, s14
 8012550:	eef0 8a67 	vmov.f32	s17, s15
 8012554:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8012558:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 801255c:	2900      	cmp	r1, #0
 801255e:	d045      	beq.n	80125ec <_dtoa_r+0x5b4>
 8012560:	494c      	ldr	r1, [pc, #304]	; (8012694 <_dtoa_r+0x65c>)
 8012562:	2000      	movs	r0, #0
 8012564:	f7ee f984 	bl	8000870 <__aeabi_ddiv>
 8012568:	ec53 2b18 	vmov	r2, r3, d8
 801256c:	f7ed fe9e 	bl	80002ac <__aeabi_dsub>
 8012570:	9d00      	ldr	r5, [sp, #0]
 8012572:	ec41 0b18 	vmov	d8, r0, r1
 8012576:	4639      	mov	r1, r7
 8012578:	4630      	mov	r0, r6
 801257a:	f7ee faff 	bl	8000b7c <__aeabi_d2iz>
 801257e:	900c      	str	r0, [sp, #48]	; 0x30
 8012580:	f7ed ffe2 	bl	8000548 <__aeabi_i2d>
 8012584:	4602      	mov	r2, r0
 8012586:	460b      	mov	r3, r1
 8012588:	4630      	mov	r0, r6
 801258a:	4639      	mov	r1, r7
 801258c:	f7ed fe8e 	bl	80002ac <__aeabi_dsub>
 8012590:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8012592:	3330      	adds	r3, #48	; 0x30
 8012594:	f805 3b01 	strb.w	r3, [r5], #1
 8012598:	ec53 2b18 	vmov	r2, r3, d8
 801259c:	4606      	mov	r6, r0
 801259e:	460f      	mov	r7, r1
 80125a0:	f7ee faae 	bl	8000b00 <__aeabi_dcmplt>
 80125a4:	2800      	cmp	r0, #0
 80125a6:	d165      	bne.n	8012674 <_dtoa_r+0x63c>
 80125a8:	4632      	mov	r2, r6
 80125aa:	463b      	mov	r3, r7
 80125ac:	4935      	ldr	r1, [pc, #212]	; (8012684 <_dtoa_r+0x64c>)
 80125ae:	2000      	movs	r0, #0
 80125b0:	f7ed fe7c 	bl	80002ac <__aeabi_dsub>
 80125b4:	ec53 2b18 	vmov	r2, r3, d8
 80125b8:	f7ee faa2 	bl	8000b00 <__aeabi_dcmplt>
 80125bc:	2800      	cmp	r0, #0
 80125be:	f040 80b9 	bne.w	8012734 <_dtoa_r+0x6fc>
 80125c2:	9b02      	ldr	r3, [sp, #8]
 80125c4:	429d      	cmp	r5, r3
 80125c6:	f43f af75 	beq.w	80124b4 <_dtoa_r+0x47c>
 80125ca:	4b2f      	ldr	r3, [pc, #188]	; (8012688 <_dtoa_r+0x650>)
 80125cc:	ec51 0b18 	vmov	r0, r1, d8
 80125d0:	2200      	movs	r2, #0
 80125d2:	f7ee f823 	bl	800061c <__aeabi_dmul>
 80125d6:	4b2c      	ldr	r3, [pc, #176]	; (8012688 <_dtoa_r+0x650>)
 80125d8:	ec41 0b18 	vmov	d8, r0, r1
 80125dc:	2200      	movs	r2, #0
 80125de:	4630      	mov	r0, r6
 80125e0:	4639      	mov	r1, r7
 80125e2:	f7ee f81b 	bl	800061c <__aeabi_dmul>
 80125e6:	4606      	mov	r6, r0
 80125e8:	460f      	mov	r7, r1
 80125ea:	e7c4      	b.n	8012576 <_dtoa_r+0x53e>
 80125ec:	ec51 0b17 	vmov	r0, r1, d7
 80125f0:	f7ee f814 	bl	800061c <__aeabi_dmul>
 80125f4:	9b02      	ldr	r3, [sp, #8]
 80125f6:	9d00      	ldr	r5, [sp, #0]
 80125f8:	930c      	str	r3, [sp, #48]	; 0x30
 80125fa:	ec41 0b18 	vmov	d8, r0, r1
 80125fe:	4639      	mov	r1, r7
 8012600:	4630      	mov	r0, r6
 8012602:	f7ee fabb 	bl	8000b7c <__aeabi_d2iz>
 8012606:	9011      	str	r0, [sp, #68]	; 0x44
 8012608:	f7ed ff9e 	bl	8000548 <__aeabi_i2d>
 801260c:	4602      	mov	r2, r0
 801260e:	460b      	mov	r3, r1
 8012610:	4630      	mov	r0, r6
 8012612:	4639      	mov	r1, r7
 8012614:	f7ed fe4a 	bl	80002ac <__aeabi_dsub>
 8012618:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801261a:	3330      	adds	r3, #48	; 0x30
 801261c:	f805 3b01 	strb.w	r3, [r5], #1
 8012620:	9b02      	ldr	r3, [sp, #8]
 8012622:	429d      	cmp	r5, r3
 8012624:	4606      	mov	r6, r0
 8012626:	460f      	mov	r7, r1
 8012628:	f04f 0200 	mov.w	r2, #0
 801262c:	d134      	bne.n	8012698 <_dtoa_r+0x660>
 801262e:	4b19      	ldr	r3, [pc, #100]	; (8012694 <_dtoa_r+0x65c>)
 8012630:	ec51 0b18 	vmov	r0, r1, d8
 8012634:	f7ed fe3c 	bl	80002b0 <__adddf3>
 8012638:	4602      	mov	r2, r0
 801263a:	460b      	mov	r3, r1
 801263c:	4630      	mov	r0, r6
 801263e:	4639      	mov	r1, r7
 8012640:	f7ee fa7c 	bl	8000b3c <__aeabi_dcmpgt>
 8012644:	2800      	cmp	r0, #0
 8012646:	d175      	bne.n	8012734 <_dtoa_r+0x6fc>
 8012648:	ec53 2b18 	vmov	r2, r3, d8
 801264c:	4911      	ldr	r1, [pc, #68]	; (8012694 <_dtoa_r+0x65c>)
 801264e:	2000      	movs	r0, #0
 8012650:	f7ed fe2c 	bl	80002ac <__aeabi_dsub>
 8012654:	4602      	mov	r2, r0
 8012656:	460b      	mov	r3, r1
 8012658:	4630      	mov	r0, r6
 801265a:	4639      	mov	r1, r7
 801265c:	f7ee fa50 	bl	8000b00 <__aeabi_dcmplt>
 8012660:	2800      	cmp	r0, #0
 8012662:	f43f af27 	beq.w	80124b4 <_dtoa_r+0x47c>
 8012666:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8012668:	1e6b      	subs	r3, r5, #1
 801266a:	930c      	str	r3, [sp, #48]	; 0x30
 801266c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8012670:	2b30      	cmp	r3, #48	; 0x30
 8012672:	d0f8      	beq.n	8012666 <_dtoa_r+0x62e>
 8012674:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8012678:	e04a      	b.n	8012710 <_dtoa_r+0x6d8>
 801267a:	bf00      	nop
 801267c:	0801d340 	.word	0x0801d340
 8012680:	0801d318 	.word	0x0801d318
 8012684:	3ff00000 	.word	0x3ff00000
 8012688:	40240000 	.word	0x40240000
 801268c:	401c0000 	.word	0x401c0000
 8012690:	40140000 	.word	0x40140000
 8012694:	3fe00000 	.word	0x3fe00000
 8012698:	4baf      	ldr	r3, [pc, #700]	; (8012958 <_dtoa_r+0x920>)
 801269a:	f7ed ffbf 	bl	800061c <__aeabi_dmul>
 801269e:	4606      	mov	r6, r0
 80126a0:	460f      	mov	r7, r1
 80126a2:	e7ac      	b.n	80125fe <_dtoa_r+0x5c6>
 80126a4:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80126a8:	9d00      	ldr	r5, [sp, #0]
 80126aa:	4642      	mov	r2, r8
 80126ac:	464b      	mov	r3, r9
 80126ae:	4630      	mov	r0, r6
 80126b0:	4639      	mov	r1, r7
 80126b2:	f7ee f8dd 	bl	8000870 <__aeabi_ddiv>
 80126b6:	f7ee fa61 	bl	8000b7c <__aeabi_d2iz>
 80126ba:	9002      	str	r0, [sp, #8]
 80126bc:	f7ed ff44 	bl	8000548 <__aeabi_i2d>
 80126c0:	4642      	mov	r2, r8
 80126c2:	464b      	mov	r3, r9
 80126c4:	f7ed ffaa 	bl	800061c <__aeabi_dmul>
 80126c8:	4602      	mov	r2, r0
 80126ca:	460b      	mov	r3, r1
 80126cc:	4630      	mov	r0, r6
 80126ce:	4639      	mov	r1, r7
 80126d0:	f7ed fdec 	bl	80002ac <__aeabi_dsub>
 80126d4:	9e02      	ldr	r6, [sp, #8]
 80126d6:	9f01      	ldr	r7, [sp, #4]
 80126d8:	3630      	adds	r6, #48	; 0x30
 80126da:	f805 6b01 	strb.w	r6, [r5], #1
 80126de:	9e00      	ldr	r6, [sp, #0]
 80126e0:	1bae      	subs	r6, r5, r6
 80126e2:	42b7      	cmp	r7, r6
 80126e4:	4602      	mov	r2, r0
 80126e6:	460b      	mov	r3, r1
 80126e8:	d137      	bne.n	801275a <_dtoa_r+0x722>
 80126ea:	f7ed fde1 	bl	80002b0 <__adddf3>
 80126ee:	4642      	mov	r2, r8
 80126f0:	464b      	mov	r3, r9
 80126f2:	4606      	mov	r6, r0
 80126f4:	460f      	mov	r7, r1
 80126f6:	f7ee fa21 	bl	8000b3c <__aeabi_dcmpgt>
 80126fa:	b9c8      	cbnz	r0, 8012730 <_dtoa_r+0x6f8>
 80126fc:	4642      	mov	r2, r8
 80126fe:	464b      	mov	r3, r9
 8012700:	4630      	mov	r0, r6
 8012702:	4639      	mov	r1, r7
 8012704:	f7ee f9f2 	bl	8000aec <__aeabi_dcmpeq>
 8012708:	b110      	cbz	r0, 8012710 <_dtoa_r+0x6d8>
 801270a:	9b02      	ldr	r3, [sp, #8]
 801270c:	07d9      	lsls	r1, r3, #31
 801270e:	d40f      	bmi.n	8012730 <_dtoa_r+0x6f8>
 8012710:	4620      	mov	r0, r4
 8012712:	4659      	mov	r1, fp
 8012714:	f000 fb00 	bl	8012d18 <_Bfree>
 8012718:	2300      	movs	r3, #0
 801271a:	702b      	strb	r3, [r5, #0]
 801271c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801271e:	f10a 0001 	add.w	r0, sl, #1
 8012722:	6018      	str	r0, [r3, #0]
 8012724:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8012726:	2b00      	cmp	r3, #0
 8012728:	f43f acd8 	beq.w	80120dc <_dtoa_r+0xa4>
 801272c:	601d      	str	r5, [r3, #0]
 801272e:	e4d5      	b.n	80120dc <_dtoa_r+0xa4>
 8012730:	f8cd a01c 	str.w	sl, [sp, #28]
 8012734:	462b      	mov	r3, r5
 8012736:	461d      	mov	r5, r3
 8012738:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801273c:	2a39      	cmp	r2, #57	; 0x39
 801273e:	d108      	bne.n	8012752 <_dtoa_r+0x71a>
 8012740:	9a00      	ldr	r2, [sp, #0]
 8012742:	429a      	cmp	r2, r3
 8012744:	d1f7      	bne.n	8012736 <_dtoa_r+0x6fe>
 8012746:	9a07      	ldr	r2, [sp, #28]
 8012748:	9900      	ldr	r1, [sp, #0]
 801274a:	3201      	adds	r2, #1
 801274c:	9207      	str	r2, [sp, #28]
 801274e:	2230      	movs	r2, #48	; 0x30
 8012750:	700a      	strb	r2, [r1, #0]
 8012752:	781a      	ldrb	r2, [r3, #0]
 8012754:	3201      	adds	r2, #1
 8012756:	701a      	strb	r2, [r3, #0]
 8012758:	e78c      	b.n	8012674 <_dtoa_r+0x63c>
 801275a:	4b7f      	ldr	r3, [pc, #508]	; (8012958 <_dtoa_r+0x920>)
 801275c:	2200      	movs	r2, #0
 801275e:	f7ed ff5d 	bl	800061c <__aeabi_dmul>
 8012762:	2200      	movs	r2, #0
 8012764:	2300      	movs	r3, #0
 8012766:	4606      	mov	r6, r0
 8012768:	460f      	mov	r7, r1
 801276a:	f7ee f9bf 	bl	8000aec <__aeabi_dcmpeq>
 801276e:	2800      	cmp	r0, #0
 8012770:	d09b      	beq.n	80126aa <_dtoa_r+0x672>
 8012772:	e7cd      	b.n	8012710 <_dtoa_r+0x6d8>
 8012774:	9a08      	ldr	r2, [sp, #32]
 8012776:	2a00      	cmp	r2, #0
 8012778:	f000 80c4 	beq.w	8012904 <_dtoa_r+0x8cc>
 801277c:	9a05      	ldr	r2, [sp, #20]
 801277e:	2a01      	cmp	r2, #1
 8012780:	f300 80a8 	bgt.w	80128d4 <_dtoa_r+0x89c>
 8012784:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8012786:	2a00      	cmp	r2, #0
 8012788:	f000 80a0 	beq.w	80128cc <_dtoa_r+0x894>
 801278c:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8012790:	9e06      	ldr	r6, [sp, #24]
 8012792:	4645      	mov	r5, r8
 8012794:	9a04      	ldr	r2, [sp, #16]
 8012796:	2101      	movs	r1, #1
 8012798:	441a      	add	r2, r3
 801279a:	4620      	mov	r0, r4
 801279c:	4498      	add	r8, r3
 801279e:	9204      	str	r2, [sp, #16]
 80127a0:	f000 fb76 	bl	8012e90 <__i2b>
 80127a4:	4607      	mov	r7, r0
 80127a6:	2d00      	cmp	r5, #0
 80127a8:	dd0b      	ble.n	80127c2 <_dtoa_r+0x78a>
 80127aa:	9b04      	ldr	r3, [sp, #16]
 80127ac:	2b00      	cmp	r3, #0
 80127ae:	dd08      	ble.n	80127c2 <_dtoa_r+0x78a>
 80127b0:	42ab      	cmp	r3, r5
 80127b2:	9a04      	ldr	r2, [sp, #16]
 80127b4:	bfa8      	it	ge
 80127b6:	462b      	movge	r3, r5
 80127b8:	eba8 0803 	sub.w	r8, r8, r3
 80127bc:	1aed      	subs	r5, r5, r3
 80127be:	1ad3      	subs	r3, r2, r3
 80127c0:	9304      	str	r3, [sp, #16]
 80127c2:	9b06      	ldr	r3, [sp, #24]
 80127c4:	b1fb      	cbz	r3, 8012806 <_dtoa_r+0x7ce>
 80127c6:	9b08      	ldr	r3, [sp, #32]
 80127c8:	2b00      	cmp	r3, #0
 80127ca:	f000 809f 	beq.w	801290c <_dtoa_r+0x8d4>
 80127ce:	2e00      	cmp	r6, #0
 80127d0:	dd11      	ble.n	80127f6 <_dtoa_r+0x7be>
 80127d2:	4639      	mov	r1, r7
 80127d4:	4632      	mov	r2, r6
 80127d6:	4620      	mov	r0, r4
 80127d8:	f000 fc16 	bl	8013008 <__pow5mult>
 80127dc:	465a      	mov	r2, fp
 80127de:	4601      	mov	r1, r0
 80127e0:	4607      	mov	r7, r0
 80127e2:	4620      	mov	r0, r4
 80127e4:	f000 fb6a 	bl	8012ebc <__multiply>
 80127e8:	4659      	mov	r1, fp
 80127ea:	9007      	str	r0, [sp, #28]
 80127ec:	4620      	mov	r0, r4
 80127ee:	f000 fa93 	bl	8012d18 <_Bfree>
 80127f2:	9b07      	ldr	r3, [sp, #28]
 80127f4:	469b      	mov	fp, r3
 80127f6:	9b06      	ldr	r3, [sp, #24]
 80127f8:	1b9a      	subs	r2, r3, r6
 80127fa:	d004      	beq.n	8012806 <_dtoa_r+0x7ce>
 80127fc:	4659      	mov	r1, fp
 80127fe:	4620      	mov	r0, r4
 8012800:	f000 fc02 	bl	8013008 <__pow5mult>
 8012804:	4683      	mov	fp, r0
 8012806:	2101      	movs	r1, #1
 8012808:	4620      	mov	r0, r4
 801280a:	f000 fb41 	bl	8012e90 <__i2b>
 801280e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8012810:	2b00      	cmp	r3, #0
 8012812:	4606      	mov	r6, r0
 8012814:	dd7c      	ble.n	8012910 <_dtoa_r+0x8d8>
 8012816:	461a      	mov	r2, r3
 8012818:	4601      	mov	r1, r0
 801281a:	4620      	mov	r0, r4
 801281c:	f000 fbf4 	bl	8013008 <__pow5mult>
 8012820:	9b05      	ldr	r3, [sp, #20]
 8012822:	2b01      	cmp	r3, #1
 8012824:	4606      	mov	r6, r0
 8012826:	dd76      	ble.n	8012916 <_dtoa_r+0x8de>
 8012828:	2300      	movs	r3, #0
 801282a:	9306      	str	r3, [sp, #24]
 801282c:	6933      	ldr	r3, [r6, #16]
 801282e:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8012832:	6918      	ldr	r0, [r3, #16]
 8012834:	f000 fadc 	bl	8012df0 <__hi0bits>
 8012838:	f1c0 0020 	rsb	r0, r0, #32
 801283c:	9b04      	ldr	r3, [sp, #16]
 801283e:	4418      	add	r0, r3
 8012840:	f010 001f 	ands.w	r0, r0, #31
 8012844:	f000 8086 	beq.w	8012954 <_dtoa_r+0x91c>
 8012848:	f1c0 0320 	rsb	r3, r0, #32
 801284c:	2b04      	cmp	r3, #4
 801284e:	dd7f      	ble.n	8012950 <_dtoa_r+0x918>
 8012850:	f1c0 001c 	rsb	r0, r0, #28
 8012854:	9b04      	ldr	r3, [sp, #16]
 8012856:	4403      	add	r3, r0
 8012858:	4480      	add	r8, r0
 801285a:	4405      	add	r5, r0
 801285c:	9304      	str	r3, [sp, #16]
 801285e:	f1b8 0f00 	cmp.w	r8, #0
 8012862:	dd05      	ble.n	8012870 <_dtoa_r+0x838>
 8012864:	4659      	mov	r1, fp
 8012866:	4642      	mov	r2, r8
 8012868:	4620      	mov	r0, r4
 801286a:	f000 fc27 	bl	80130bc <__lshift>
 801286e:	4683      	mov	fp, r0
 8012870:	9b04      	ldr	r3, [sp, #16]
 8012872:	2b00      	cmp	r3, #0
 8012874:	dd05      	ble.n	8012882 <_dtoa_r+0x84a>
 8012876:	4631      	mov	r1, r6
 8012878:	461a      	mov	r2, r3
 801287a:	4620      	mov	r0, r4
 801287c:	f000 fc1e 	bl	80130bc <__lshift>
 8012880:	4606      	mov	r6, r0
 8012882:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8012884:	2b00      	cmp	r3, #0
 8012886:	d069      	beq.n	801295c <_dtoa_r+0x924>
 8012888:	4631      	mov	r1, r6
 801288a:	4658      	mov	r0, fp
 801288c:	f000 fc82 	bl	8013194 <__mcmp>
 8012890:	2800      	cmp	r0, #0
 8012892:	da63      	bge.n	801295c <_dtoa_r+0x924>
 8012894:	2300      	movs	r3, #0
 8012896:	4659      	mov	r1, fp
 8012898:	220a      	movs	r2, #10
 801289a:	4620      	mov	r0, r4
 801289c:	f000 fa5e 	bl	8012d5c <__multadd>
 80128a0:	9b08      	ldr	r3, [sp, #32]
 80128a2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80128a6:	4683      	mov	fp, r0
 80128a8:	2b00      	cmp	r3, #0
 80128aa:	f000 818f 	beq.w	8012bcc <_dtoa_r+0xb94>
 80128ae:	4639      	mov	r1, r7
 80128b0:	2300      	movs	r3, #0
 80128b2:	220a      	movs	r2, #10
 80128b4:	4620      	mov	r0, r4
 80128b6:	f000 fa51 	bl	8012d5c <__multadd>
 80128ba:	f1b9 0f00 	cmp.w	r9, #0
 80128be:	4607      	mov	r7, r0
 80128c0:	f300 808e 	bgt.w	80129e0 <_dtoa_r+0x9a8>
 80128c4:	9b05      	ldr	r3, [sp, #20]
 80128c6:	2b02      	cmp	r3, #2
 80128c8:	dc50      	bgt.n	801296c <_dtoa_r+0x934>
 80128ca:	e089      	b.n	80129e0 <_dtoa_r+0x9a8>
 80128cc:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80128ce:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80128d2:	e75d      	b.n	8012790 <_dtoa_r+0x758>
 80128d4:	9b01      	ldr	r3, [sp, #4]
 80128d6:	1e5e      	subs	r6, r3, #1
 80128d8:	9b06      	ldr	r3, [sp, #24]
 80128da:	42b3      	cmp	r3, r6
 80128dc:	bfbf      	itttt	lt
 80128de:	9b06      	ldrlt	r3, [sp, #24]
 80128e0:	9606      	strlt	r6, [sp, #24]
 80128e2:	1af2      	sublt	r2, r6, r3
 80128e4:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 80128e6:	bfb6      	itet	lt
 80128e8:	189b      	addlt	r3, r3, r2
 80128ea:	1b9e      	subge	r6, r3, r6
 80128ec:	930d      	strlt	r3, [sp, #52]	; 0x34
 80128ee:	9b01      	ldr	r3, [sp, #4]
 80128f0:	bfb8      	it	lt
 80128f2:	2600      	movlt	r6, #0
 80128f4:	2b00      	cmp	r3, #0
 80128f6:	bfb5      	itete	lt
 80128f8:	eba8 0503 	sublt.w	r5, r8, r3
 80128fc:	9b01      	ldrge	r3, [sp, #4]
 80128fe:	2300      	movlt	r3, #0
 8012900:	4645      	movge	r5, r8
 8012902:	e747      	b.n	8012794 <_dtoa_r+0x75c>
 8012904:	9e06      	ldr	r6, [sp, #24]
 8012906:	9f08      	ldr	r7, [sp, #32]
 8012908:	4645      	mov	r5, r8
 801290a:	e74c      	b.n	80127a6 <_dtoa_r+0x76e>
 801290c:	9a06      	ldr	r2, [sp, #24]
 801290e:	e775      	b.n	80127fc <_dtoa_r+0x7c4>
 8012910:	9b05      	ldr	r3, [sp, #20]
 8012912:	2b01      	cmp	r3, #1
 8012914:	dc18      	bgt.n	8012948 <_dtoa_r+0x910>
 8012916:	9b02      	ldr	r3, [sp, #8]
 8012918:	b9b3      	cbnz	r3, 8012948 <_dtoa_r+0x910>
 801291a:	9b03      	ldr	r3, [sp, #12]
 801291c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8012920:	b9a3      	cbnz	r3, 801294c <_dtoa_r+0x914>
 8012922:	9b03      	ldr	r3, [sp, #12]
 8012924:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8012928:	0d1b      	lsrs	r3, r3, #20
 801292a:	051b      	lsls	r3, r3, #20
 801292c:	b12b      	cbz	r3, 801293a <_dtoa_r+0x902>
 801292e:	9b04      	ldr	r3, [sp, #16]
 8012930:	3301      	adds	r3, #1
 8012932:	9304      	str	r3, [sp, #16]
 8012934:	f108 0801 	add.w	r8, r8, #1
 8012938:	2301      	movs	r3, #1
 801293a:	9306      	str	r3, [sp, #24]
 801293c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801293e:	2b00      	cmp	r3, #0
 8012940:	f47f af74 	bne.w	801282c <_dtoa_r+0x7f4>
 8012944:	2001      	movs	r0, #1
 8012946:	e779      	b.n	801283c <_dtoa_r+0x804>
 8012948:	2300      	movs	r3, #0
 801294a:	e7f6      	b.n	801293a <_dtoa_r+0x902>
 801294c:	9b02      	ldr	r3, [sp, #8]
 801294e:	e7f4      	b.n	801293a <_dtoa_r+0x902>
 8012950:	d085      	beq.n	801285e <_dtoa_r+0x826>
 8012952:	4618      	mov	r0, r3
 8012954:	301c      	adds	r0, #28
 8012956:	e77d      	b.n	8012854 <_dtoa_r+0x81c>
 8012958:	40240000 	.word	0x40240000
 801295c:	9b01      	ldr	r3, [sp, #4]
 801295e:	2b00      	cmp	r3, #0
 8012960:	dc38      	bgt.n	80129d4 <_dtoa_r+0x99c>
 8012962:	9b05      	ldr	r3, [sp, #20]
 8012964:	2b02      	cmp	r3, #2
 8012966:	dd35      	ble.n	80129d4 <_dtoa_r+0x99c>
 8012968:	f8dd 9004 	ldr.w	r9, [sp, #4]
 801296c:	f1b9 0f00 	cmp.w	r9, #0
 8012970:	d10d      	bne.n	801298e <_dtoa_r+0x956>
 8012972:	4631      	mov	r1, r6
 8012974:	464b      	mov	r3, r9
 8012976:	2205      	movs	r2, #5
 8012978:	4620      	mov	r0, r4
 801297a:	f000 f9ef 	bl	8012d5c <__multadd>
 801297e:	4601      	mov	r1, r0
 8012980:	4606      	mov	r6, r0
 8012982:	4658      	mov	r0, fp
 8012984:	f000 fc06 	bl	8013194 <__mcmp>
 8012988:	2800      	cmp	r0, #0
 801298a:	f73f adbd 	bgt.w	8012508 <_dtoa_r+0x4d0>
 801298e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012990:	9d00      	ldr	r5, [sp, #0]
 8012992:	ea6f 0a03 	mvn.w	sl, r3
 8012996:	f04f 0800 	mov.w	r8, #0
 801299a:	4631      	mov	r1, r6
 801299c:	4620      	mov	r0, r4
 801299e:	f000 f9bb 	bl	8012d18 <_Bfree>
 80129a2:	2f00      	cmp	r7, #0
 80129a4:	f43f aeb4 	beq.w	8012710 <_dtoa_r+0x6d8>
 80129a8:	f1b8 0f00 	cmp.w	r8, #0
 80129ac:	d005      	beq.n	80129ba <_dtoa_r+0x982>
 80129ae:	45b8      	cmp	r8, r7
 80129b0:	d003      	beq.n	80129ba <_dtoa_r+0x982>
 80129b2:	4641      	mov	r1, r8
 80129b4:	4620      	mov	r0, r4
 80129b6:	f000 f9af 	bl	8012d18 <_Bfree>
 80129ba:	4639      	mov	r1, r7
 80129bc:	4620      	mov	r0, r4
 80129be:	f000 f9ab 	bl	8012d18 <_Bfree>
 80129c2:	e6a5      	b.n	8012710 <_dtoa_r+0x6d8>
 80129c4:	2600      	movs	r6, #0
 80129c6:	4637      	mov	r7, r6
 80129c8:	e7e1      	b.n	801298e <_dtoa_r+0x956>
 80129ca:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80129cc:	f8dd a01c 	ldr.w	sl, [sp, #28]
 80129d0:	4637      	mov	r7, r6
 80129d2:	e599      	b.n	8012508 <_dtoa_r+0x4d0>
 80129d4:	9b08      	ldr	r3, [sp, #32]
 80129d6:	f8dd 9004 	ldr.w	r9, [sp, #4]
 80129da:	2b00      	cmp	r3, #0
 80129dc:	f000 80fd 	beq.w	8012bda <_dtoa_r+0xba2>
 80129e0:	2d00      	cmp	r5, #0
 80129e2:	dd05      	ble.n	80129f0 <_dtoa_r+0x9b8>
 80129e4:	4639      	mov	r1, r7
 80129e6:	462a      	mov	r2, r5
 80129e8:	4620      	mov	r0, r4
 80129ea:	f000 fb67 	bl	80130bc <__lshift>
 80129ee:	4607      	mov	r7, r0
 80129f0:	9b06      	ldr	r3, [sp, #24]
 80129f2:	2b00      	cmp	r3, #0
 80129f4:	d05c      	beq.n	8012ab0 <_dtoa_r+0xa78>
 80129f6:	6879      	ldr	r1, [r7, #4]
 80129f8:	4620      	mov	r0, r4
 80129fa:	f000 f94d 	bl	8012c98 <_Balloc>
 80129fe:	4605      	mov	r5, r0
 8012a00:	b928      	cbnz	r0, 8012a0e <_dtoa_r+0x9d6>
 8012a02:	4b80      	ldr	r3, [pc, #512]	; (8012c04 <_dtoa_r+0xbcc>)
 8012a04:	4602      	mov	r2, r0
 8012a06:	f240 21ea 	movw	r1, #746	; 0x2ea
 8012a0a:	f7ff bb2e 	b.w	801206a <_dtoa_r+0x32>
 8012a0e:	693a      	ldr	r2, [r7, #16]
 8012a10:	3202      	adds	r2, #2
 8012a12:	0092      	lsls	r2, r2, #2
 8012a14:	f107 010c 	add.w	r1, r7, #12
 8012a18:	300c      	adds	r0, #12
 8012a1a:	f7fe f9c5 	bl	8010da8 <memcpy>
 8012a1e:	2201      	movs	r2, #1
 8012a20:	4629      	mov	r1, r5
 8012a22:	4620      	mov	r0, r4
 8012a24:	f000 fb4a 	bl	80130bc <__lshift>
 8012a28:	9b00      	ldr	r3, [sp, #0]
 8012a2a:	3301      	adds	r3, #1
 8012a2c:	9301      	str	r3, [sp, #4]
 8012a2e:	9b00      	ldr	r3, [sp, #0]
 8012a30:	444b      	add	r3, r9
 8012a32:	9307      	str	r3, [sp, #28]
 8012a34:	9b02      	ldr	r3, [sp, #8]
 8012a36:	f003 0301 	and.w	r3, r3, #1
 8012a3a:	46b8      	mov	r8, r7
 8012a3c:	9306      	str	r3, [sp, #24]
 8012a3e:	4607      	mov	r7, r0
 8012a40:	9b01      	ldr	r3, [sp, #4]
 8012a42:	4631      	mov	r1, r6
 8012a44:	3b01      	subs	r3, #1
 8012a46:	4658      	mov	r0, fp
 8012a48:	9302      	str	r3, [sp, #8]
 8012a4a:	f7ff fa69 	bl	8011f20 <quorem>
 8012a4e:	4603      	mov	r3, r0
 8012a50:	3330      	adds	r3, #48	; 0x30
 8012a52:	9004      	str	r0, [sp, #16]
 8012a54:	4641      	mov	r1, r8
 8012a56:	4658      	mov	r0, fp
 8012a58:	9308      	str	r3, [sp, #32]
 8012a5a:	f000 fb9b 	bl	8013194 <__mcmp>
 8012a5e:	463a      	mov	r2, r7
 8012a60:	4681      	mov	r9, r0
 8012a62:	4631      	mov	r1, r6
 8012a64:	4620      	mov	r0, r4
 8012a66:	f000 fbb1 	bl	80131cc <__mdiff>
 8012a6a:	68c2      	ldr	r2, [r0, #12]
 8012a6c:	9b08      	ldr	r3, [sp, #32]
 8012a6e:	4605      	mov	r5, r0
 8012a70:	bb02      	cbnz	r2, 8012ab4 <_dtoa_r+0xa7c>
 8012a72:	4601      	mov	r1, r0
 8012a74:	4658      	mov	r0, fp
 8012a76:	f000 fb8d 	bl	8013194 <__mcmp>
 8012a7a:	9b08      	ldr	r3, [sp, #32]
 8012a7c:	4602      	mov	r2, r0
 8012a7e:	4629      	mov	r1, r5
 8012a80:	4620      	mov	r0, r4
 8012a82:	e9cd 3208 	strd	r3, r2, [sp, #32]
 8012a86:	f000 f947 	bl	8012d18 <_Bfree>
 8012a8a:	9b05      	ldr	r3, [sp, #20]
 8012a8c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8012a8e:	9d01      	ldr	r5, [sp, #4]
 8012a90:	ea43 0102 	orr.w	r1, r3, r2
 8012a94:	9b06      	ldr	r3, [sp, #24]
 8012a96:	430b      	orrs	r3, r1
 8012a98:	9b08      	ldr	r3, [sp, #32]
 8012a9a:	d10d      	bne.n	8012ab8 <_dtoa_r+0xa80>
 8012a9c:	2b39      	cmp	r3, #57	; 0x39
 8012a9e:	d029      	beq.n	8012af4 <_dtoa_r+0xabc>
 8012aa0:	f1b9 0f00 	cmp.w	r9, #0
 8012aa4:	dd01      	ble.n	8012aaa <_dtoa_r+0xa72>
 8012aa6:	9b04      	ldr	r3, [sp, #16]
 8012aa8:	3331      	adds	r3, #49	; 0x31
 8012aaa:	9a02      	ldr	r2, [sp, #8]
 8012aac:	7013      	strb	r3, [r2, #0]
 8012aae:	e774      	b.n	801299a <_dtoa_r+0x962>
 8012ab0:	4638      	mov	r0, r7
 8012ab2:	e7b9      	b.n	8012a28 <_dtoa_r+0x9f0>
 8012ab4:	2201      	movs	r2, #1
 8012ab6:	e7e2      	b.n	8012a7e <_dtoa_r+0xa46>
 8012ab8:	f1b9 0f00 	cmp.w	r9, #0
 8012abc:	db06      	blt.n	8012acc <_dtoa_r+0xa94>
 8012abe:	9905      	ldr	r1, [sp, #20]
 8012ac0:	ea41 0909 	orr.w	r9, r1, r9
 8012ac4:	9906      	ldr	r1, [sp, #24]
 8012ac6:	ea59 0101 	orrs.w	r1, r9, r1
 8012aca:	d120      	bne.n	8012b0e <_dtoa_r+0xad6>
 8012acc:	2a00      	cmp	r2, #0
 8012ace:	ddec      	ble.n	8012aaa <_dtoa_r+0xa72>
 8012ad0:	4659      	mov	r1, fp
 8012ad2:	2201      	movs	r2, #1
 8012ad4:	4620      	mov	r0, r4
 8012ad6:	9301      	str	r3, [sp, #4]
 8012ad8:	f000 faf0 	bl	80130bc <__lshift>
 8012adc:	4631      	mov	r1, r6
 8012ade:	4683      	mov	fp, r0
 8012ae0:	f000 fb58 	bl	8013194 <__mcmp>
 8012ae4:	2800      	cmp	r0, #0
 8012ae6:	9b01      	ldr	r3, [sp, #4]
 8012ae8:	dc02      	bgt.n	8012af0 <_dtoa_r+0xab8>
 8012aea:	d1de      	bne.n	8012aaa <_dtoa_r+0xa72>
 8012aec:	07da      	lsls	r2, r3, #31
 8012aee:	d5dc      	bpl.n	8012aaa <_dtoa_r+0xa72>
 8012af0:	2b39      	cmp	r3, #57	; 0x39
 8012af2:	d1d8      	bne.n	8012aa6 <_dtoa_r+0xa6e>
 8012af4:	9a02      	ldr	r2, [sp, #8]
 8012af6:	2339      	movs	r3, #57	; 0x39
 8012af8:	7013      	strb	r3, [r2, #0]
 8012afa:	462b      	mov	r3, r5
 8012afc:	461d      	mov	r5, r3
 8012afe:	3b01      	subs	r3, #1
 8012b00:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8012b04:	2a39      	cmp	r2, #57	; 0x39
 8012b06:	d050      	beq.n	8012baa <_dtoa_r+0xb72>
 8012b08:	3201      	adds	r2, #1
 8012b0a:	701a      	strb	r2, [r3, #0]
 8012b0c:	e745      	b.n	801299a <_dtoa_r+0x962>
 8012b0e:	2a00      	cmp	r2, #0
 8012b10:	dd03      	ble.n	8012b1a <_dtoa_r+0xae2>
 8012b12:	2b39      	cmp	r3, #57	; 0x39
 8012b14:	d0ee      	beq.n	8012af4 <_dtoa_r+0xabc>
 8012b16:	3301      	adds	r3, #1
 8012b18:	e7c7      	b.n	8012aaa <_dtoa_r+0xa72>
 8012b1a:	9a01      	ldr	r2, [sp, #4]
 8012b1c:	9907      	ldr	r1, [sp, #28]
 8012b1e:	f802 3c01 	strb.w	r3, [r2, #-1]
 8012b22:	428a      	cmp	r2, r1
 8012b24:	d02a      	beq.n	8012b7c <_dtoa_r+0xb44>
 8012b26:	4659      	mov	r1, fp
 8012b28:	2300      	movs	r3, #0
 8012b2a:	220a      	movs	r2, #10
 8012b2c:	4620      	mov	r0, r4
 8012b2e:	f000 f915 	bl	8012d5c <__multadd>
 8012b32:	45b8      	cmp	r8, r7
 8012b34:	4683      	mov	fp, r0
 8012b36:	f04f 0300 	mov.w	r3, #0
 8012b3a:	f04f 020a 	mov.w	r2, #10
 8012b3e:	4641      	mov	r1, r8
 8012b40:	4620      	mov	r0, r4
 8012b42:	d107      	bne.n	8012b54 <_dtoa_r+0xb1c>
 8012b44:	f000 f90a 	bl	8012d5c <__multadd>
 8012b48:	4680      	mov	r8, r0
 8012b4a:	4607      	mov	r7, r0
 8012b4c:	9b01      	ldr	r3, [sp, #4]
 8012b4e:	3301      	adds	r3, #1
 8012b50:	9301      	str	r3, [sp, #4]
 8012b52:	e775      	b.n	8012a40 <_dtoa_r+0xa08>
 8012b54:	f000 f902 	bl	8012d5c <__multadd>
 8012b58:	4639      	mov	r1, r7
 8012b5a:	4680      	mov	r8, r0
 8012b5c:	2300      	movs	r3, #0
 8012b5e:	220a      	movs	r2, #10
 8012b60:	4620      	mov	r0, r4
 8012b62:	f000 f8fb 	bl	8012d5c <__multadd>
 8012b66:	4607      	mov	r7, r0
 8012b68:	e7f0      	b.n	8012b4c <_dtoa_r+0xb14>
 8012b6a:	f1b9 0f00 	cmp.w	r9, #0
 8012b6e:	9a00      	ldr	r2, [sp, #0]
 8012b70:	bfcc      	ite	gt
 8012b72:	464d      	movgt	r5, r9
 8012b74:	2501      	movle	r5, #1
 8012b76:	4415      	add	r5, r2
 8012b78:	f04f 0800 	mov.w	r8, #0
 8012b7c:	4659      	mov	r1, fp
 8012b7e:	2201      	movs	r2, #1
 8012b80:	4620      	mov	r0, r4
 8012b82:	9301      	str	r3, [sp, #4]
 8012b84:	f000 fa9a 	bl	80130bc <__lshift>
 8012b88:	4631      	mov	r1, r6
 8012b8a:	4683      	mov	fp, r0
 8012b8c:	f000 fb02 	bl	8013194 <__mcmp>
 8012b90:	2800      	cmp	r0, #0
 8012b92:	dcb2      	bgt.n	8012afa <_dtoa_r+0xac2>
 8012b94:	d102      	bne.n	8012b9c <_dtoa_r+0xb64>
 8012b96:	9b01      	ldr	r3, [sp, #4]
 8012b98:	07db      	lsls	r3, r3, #31
 8012b9a:	d4ae      	bmi.n	8012afa <_dtoa_r+0xac2>
 8012b9c:	462b      	mov	r3, r5
 8012b9e:	461d      	mov	r5, r3
 8012ba0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8012ba4:	2a30      	cmp	r2, #48	; 0x30
 8012ba6:	d0fa      	beq.n	8012b9e <_dtoa_r+0xb66>
 8012ba8:	e6f7      	b.n	801299a <_dtoa_r+0x962>
 8012baa:	9a00      	ldr	r2, [sp, #0]
 8012bac:	429a      	cmp	r2, r3
 8012bae:	d1a5      	bne.n	8012afc <_dtoa_r+0xac4>
 8012bb0:	f10a 0a01 	add.w	sl, sl, #1
 8012bb4:	2331      	movs	r3, #49	; 0x31
 8012bb6:	e779      	b.n	8012aac <_dtoa_r+0xa74>
 8012bb8:	4b13      	ldr	r3, [pc, #76]	; (8012c08 <_dtoa_r+0xbd0>)
 8012bba:	f7ff baaf 	b.w	801211c <_dtoa_r+0xe4>
 8012bbe:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8012bc0:	2b00      	cmp	r3, #0
 8012bc2:	f47f aa86 	bne.w	80120d2 <_dtoa_r+0x9a>
 8012bc6:	4b11      	ldr	r3, [pc, #68]	; (8012c0c <_dtoa_r+0xbd4>)
 8012bc8:	f7ff baa8 	b.w	801211c <_dtoa_r+0xe4>
 8012bcc:	f1b9 0f00 	cmp.w	r9, #0
 8012bd0:	dc03      	bgt.n	8012bda <_dtoa_r+0xba2>
 8012bd2:	9b05      	ldr	r3, [sp, #20]
 8012bd4:	2b02      	cmp	r3, #2
 8012bd6:	f73f aec9 	bgt.w	801296c <_dtoa_r+0x934>
 8012bda:	9d00      	ldr	r5, [sp, #0]
 8012bdc:	4631      	mov	r1, r6
 8012bde:	4658      	mov	r0, fp
 8012be0:	f7ff f99e 	bl	8011f20 <quorem>
 8012be4:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8012be8:	f805 3b01 	strb.w	r3, [r5], #1
 8012bec:	9a00      	ldr	r2, [sp, #0]
 8012bee:	1aaa      	subs	r2, r5, r2
 8012bf0:	4591      	cmp	r9, r2
 8012bf2:	ddba      	ble.n	8012b6a <_dtoa_r+0xb32>
 8012bf4:	4659      	mov	r1, fp
 8012bf6:	2300      	movs	r3, #0
 8012bf8:	220a      	movs	r2, #10
 8012bfa:	4620      	mov	r0, r4
 8012bfc:	f000 f8ae 	bl	8012d5c <__multadd>
 8012c00:	4683      	mov	fp, r0
 8012c02:	e7eb      	b.n	8012bdc <_dtoa_r+0xba4>
 8012c04:	0801d2a1 	.word	0x0801d2a1
 8012c08:	0801d0f9 	.word	0x0801d0f9
 8012c0c:	0801d21e 	.word	0x0801d21e

08012c10 <_fstat_r>:
 8012c10:	b538      	push	{r3, r4, r5, lr}
 8012c12:	4d07      	ldr	r5, [pc, #28]	; (8012c30 <_fstat_r+0x20>)
 8012c14:	2300      	movs	r3, #0
 8012c16:	4604      	mov	r4, r0
 8012c18:	4608      	mov	r0, r1
 8012c1a:	4611      	mov	r1, r2
 8012c1c:	602b      	str	r3, [r5, #0]
 8012c1e:	f7ef fb32 	bl	8002286 <_fstat>
 8012c22:	1c43      	adds	r3, r0, #1
 8012c24:	d102      	bne.n	8012c2c <_fstat_r+0x1c>
 8012c26:	682b      	ldr	r3, [r5, #0]
 8012c28:	b103      	cbz	r3, 8012c2c <_fstat_r+0x1c>
 8012c2a:	6023      	str	r3, [r4, #0]
 8012c2c:	bd38      	pop	{r3, r4, r5, pc}
 8012c2e:	bf00      	nop
 8012c30:	20005488 	.word	0x20005488

08012c34 <_isatty_r>:
 8012c34:	b538      	push	{r3, r4, r5, lr}
 8012c36:	4d06      	ldr	r5, [pc, #24]	; (8012c50 <_isatty_r+0x1c>)
 8012c38:	2300      	movs	r3, #0
 8012c3a:	4604      	mov	r4, r0
 8012c3c:	4608      	mov	r0, r1
 8012c3e:	602b      	str	r3, [r5, #0]
 8012c40:	f7ef fb31 	bl	80022a6 <_isatty>
 8012c44:	1c43      	adds	r3, r0, #1
 8012c46:	d102      	bne.n	8012c4e <_isatty_r+0x1a>
 8012c48:	682b      	ldr	r3, [r5, #0]
 8012c4a:	b103      	cbz	r3, 8012c4e <_isatty_r+0x1a>
 8012c4c:	6023      	str	r3, [r4, #0]
 8012c4e:	bd38      	pop	{r3, r4, r5, pc}
 8012c50:	20005488 	.word	0x20005488

08012c54 <_localeconv_r>:
 8012c54:	4800      	ldr	r0, [pc, #0]	; (8012c58 <_localeconv_r+0x4>)
 8012c56:	4770      	bx	lr
 8012c58:	20000170 	.word	0x20000170

08012c5c <_lseek_r>:
 8012c5c:	b538      	push	{r3, r4, r5, lr}
 8012c5e:	4d07      	ldr	r5, [pc, #28]	; (8012c7c <_lseek_r+0x20>)
 8012c60:	4604      	mov	r4, r0
 8012c62:	4608      	mov	r0, r1
 8012c64:	4611      	mov	r1, r2
 8012c66:	2200      	movs	r2, #0
 8012c68:	602a      	str	r2, [r5, #0]
 8012c6a:	461a      	mov	r2, r3
 8012c6c:	f7ef fb26 	bl	80022bc <_lseek>
 8012c70:	1c43      	adds	r3, r0, #1
 8012c72:	d102      	bne.n	8012c7a <_lseek_r+0x1e>
 8012c74:	682b      	ldr	r3, [r5, #0]
 8012c76:	b103      	cbz	r3, 8012c7a <_lseek_r+0x1e>
 8012c78:	6023      	str	r3, [r4, #0]
 8012c7a:	bd38      	pop	{r3, r4, r5, pc}
 8012c7c:	20005488 	.word	0x20005488

08012c80 <__malloc_lock>:
 8012c80:	4801      	ldr	r0, [pc, #4]	; (8012c88 <__malloc_lock+0x8>)
 8012c82:	f7fe b81a 	b.w	8010cba <__retarget_lock_acquire_recursive>
 8012c86:	bf00      	nop
 8012c88:	2000547c 	.word	0x2000547c

08012c8c <__malloc_unlock>:
 8012c8c:	4801      	ldr	r0, [pc, #4]	; (8012c94 <__malloc_unlock+0x8>)
 8012c8e:	f7fe b816 	b.w	8010cbe <__retarget_lock_release_recursive>
 8012c92:	bf00      	nop
 8012c94:	2000547c 	.word	0x2000547c

08012c98 <_Balloc>:
 8012c98:	b570      	push	{r4, r5, r6, lr}
 8012c9a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8012c9c:	4604      	mov	r4, r0
 8012c9e:	460d      	mov	r5, r1
 8012ca0:	b976      	cbnz	r6, 8012cc0 <_Balloc+0x28>
 8012ca2:	2010      	movs	r0, #16
 8012ca4:	f7fe f870 	bl	8010d88 <malloc>
 8012ca8:	4602      	mov	r2, r0
 8012caa:	6260      	str	r0, [r4, #36]	; 0x24
 8012cac:	b920      	cbnz	r0, 8012cb8 <_Balloc+0x20>
 8012cae:	4b18      	ldr	r3, [pc, #96]	; (8012d10 <_Balloc+0x78>)
 8012cb0:	4818      	ldr	r0, [pc, #96]	; (8012d14 <_Balloc+0x7c>)
 8012cb2:	2166      	movs	r1, #102	; 0x66
 8012cb4:	f7fd fd7a 	bl	80107ac <__assert_func>
 8012cb8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8012cbc:	6006      	str	r6, [r0, #0]
 8012cbe:	60c6      	str	r6, [r0, #12]
 8012cc0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8012cc2:	68f3      	ldr	r3, [r6, #12]
 8012cc4:	b183      	cbz	r3, 8012ce8 <_Balloc+0x50>
 8012cc6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8012cc8:	68db      	ldr	r3, [r3, #12]
 8012cca:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8012cce:	b9b8      	cbnz	r0, 8012d00 <_Balloc+0x68>
 8012cd0:	2101      	movs	r1, #1
 8012cd2:	fa01 f605 	lsl.w	r6, r1, r5
 8012cd6:	1d72      	adds	r2, r6, #5
 8012cd8:	0092      	lsls	r2, r2, #2
 8012cda:	4620      	mov	r0, r4
 8012cdc:	f7fe f894 	bl	8010e08 <_calloc_r>
 8012ce0:	b160      	cbz	r0, 8012cfc <_Balloc+0x64>
 8012ce2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8012ce6:	e00e      	b.n	8012d06 <_Balloc+0x6e>
 8012ce8:	2221      	movs	r2, #33	; 0x21
 8012cea:	2104      	movs	r1, #4
 8012cec:	4620      	mov	r0, r4
 8012cee:	f7fe f88b 	bl	8010e08 <_calloc_r>
 8012cf2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8012cf4:	60f0      	str	r0, [r6, #12]
 8012cf6:	68db      	ldr	r3, [r3, #12]
 8012cf8:	2b00      	cmp	r3, #0
 8012cfa:	d1e4      	bne.n	8012cc6 <_Balloc+0x2e>
 8012cfc:	2000      	movs	r0, #0
 8012cfe:	bd70      	pop	{r4, r5, r6, pc}
 8012d00:	6802      	ldr	r2, [r0, #0]
 8012d02:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8012d06:	2300      	movs	r3, #0
 8012d08:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8012d0c:	e7f7      	b.n	8012cfe <_Balloc+0x66>
 8012d0e:	bf00      	nop
 8012d10:	0801d22b 	.word	0x0801d22b
 8012d14:	0801d2b2 	.word	0x0801d2b2

08012d18 <_Bfree>:
 8012d18:	b570      	push	{r4, r5, r6, lr}
 8012d1a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8012d1c:	4605      	mov	r5, r0
 8012d1e:	460c      	mov	r4, r1
 8012d20:	b976      	cbnz	r6, 8012d40 <_Bfree+0x28>
 8012d22:	2010      	movs	r0, #16
 8012d24:	f7fe f830 	bl	8010d88 <malloc>
 8012d28:	4602      	mov	r2, r0
 8012d2a:	6268      	str	r0, [r5, #36]	; 0x24
 8012d2c:	b920      	cbnz	r0, 8012d38 <_Bfree+0x20>
 8012d2e:	4b09      	ldr	r3, [pc, #36]	; (8012d54 <_Bfree+0x3c>)
 8012d30:	4809      	ldr	r0, [pc, #36]	; (8012d58 <_Bfree+0x40>)
 8012d32:	218a      	movs	r1, #138	; 0x8a
 8012d34:	f7fd fd3a 	bl	80107ac <__assert_func>
 8012d38:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8012d3c:	6006      	str	r6, [r0, #0]
 8012d3e:	60c6      	str	r6, [r0, #12]
 8012d40:	b13c      	cbz	r4, 8012d52 <_Bfree+0x3a>
 8012d42:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8012d44:	6862      	ldr	r2, [r4, #4]
 8012d46:	68db      	ldr	r3, [r3, #12]
 8012d48:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8012d4c:	6021      	str	r1, [r4, #0]
 8012d4e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8012d52:	bd70      	pop	{r4, r5, r6, pc}
 8012d54:	0801d22b 	.word	0x0801d22b
 8012d58:	0801d2b2 	.word	0x0801d2b2

08012d5c <__multadd>:
 8012d5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012d60:	690e      	ldr	r6, [r1, #16]
 8012d62:	4607      	mov	r7, r0
 8012d64:	4698      	mov	r8, r3
 8012d66:	460c      	mov	r4, r1
 8012d68:	f101 0014 	add.w	r0, r1, #20
 8012d6c:	2300      	movs	r3, #0
 8012d6e:	6805      	ldr	r5, [r0, #0]
 8012d70:	b2a9      	uxth	r1, r5
 8012d72:	fb02 8101 	mla	r1, r2, r1, r8
 8012d76:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8012d7a:	0c2d      	lsrs	r5, r5, #16
 8012d7c:	fb02 c505 	mla	r5, r2, r5, ip
 8012d80:	b289      	uxth	r1, r1
 8012d82:	3301      	adds	r3, #1
 8012d84:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8012d88:	429e      	cmp	r6, r3
 8012d8a:	f840 1b04 	str.w	r1, [r0], #4
 8012d8e:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8012d92:	dcec      	bgt.n	8012d6e <__multadd+0x12>
 8012d94:	f1b8 0f00 	cmp.w	r8, #0
 8012d98:	d022      	beq.n	8012de0 <__multadd+0x84>
 8012d9a:	68a3      	ldr	r3, [r4, #8]
 8012d9c:	42b3      	cmp	r3, r6
 8012d9e:	dc19      	bgt.n	8012dd4 <__multadd+0x78>
 8012da0:	6861      	ldr	r1, [r4, #4]
 8012da2:	4638      	mov	r0, r7
 8012da4:	3101      	adds	r1, #1
 8012da6:	f7ff ff77 	bl	8012c98 <_Balloc>
 8012daa:	4605      	mov	r5, r0
 8012dac:	b928      	cbnz	r0, 8012dba <__multadd+0x5e>
 8012dae:	4602      	mov	r2, r0
 8012db0:	4b0d      	ldr	r3, [pc, #52]	; (8012de8 <__multadd+0x8c>)
 8012db2:	480e      	ldr	r0, [pc, #56]	; (8012dec <__multadd+0x90>)
 8012db4:	21b5      	movs	r1, #181	; 0xb5
 8012db6:	f7fd fcf9 	bl	80107ac <__assert_func>
 8012dba:	6922      	ldr	r2, [r4, #16]
 8012dbc:	3202      	adds	r2, #2
 8012dbe:	f104 010c 	add.w	r1, r4, #12
 8012dc2:	0092      	lsls	r2, r2, #2
 8012dc4:	300c      	adds	r0, #12
 8012dc6:	f7fd ffef 	bl	8010da8 <memcpy>
 8012dca:	4621      	mov	r1, r4
 8012dcc:	4638      	mov	r0, r7
 8012dce:	f7ff ffa3 	bl	8012d18 <_Bfree>
 8012dd2:	462c      	mov	r4, r5
 8012dd4:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8012dd8:	3601      	adds	r6, #1
 8012dda:	f8c3 8014 	str.w	r8, [r3, #20]
 8012dde:	6126      	str	r6, [r4, #16]
 8012de0:	4620      	mov	r0, r4
 8012de2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012de6:	bf00      	nop
 8012de8:	0801d2a1 	.word	0x0801d2a1
 8012dec:	0801d2b2 	.word	0x0801d2b2

08012df0 <__hi0bits>:
 8012df0:	0c03      	lsrs	r3, r0, #16
 8012df2:	041b      	lsls	r3, r3, #16
 8012df4:	b9d3      	cbnz	r3, 8012e2c <__hi0bits+0x3c>
 8012df6:	0400      	lsls	r0, r0, #16
 8012df8:	2310      	movs	r3, #16
 8012dfa:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8012dfe:	bf04      	itt	eq
 8012e00:	0200      	lsleq	r0, r0, #8
 8012e02:	3308      	addeq	r3, #8
 8012e04:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8012e08:	bf04      	itt	eq
 8012e0a:	0100      	lsleq	r0, r0, #4
 8012e0c:	3304      	addeq	r3, #4
 8012e0e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8012e12:	bf04      	itt	eq
 8012e14:	0080      	lsleq	r0, r0, #2
 8012e16:	3302      	addeq	r3, #2
 8012e18:	2800      	cmp	r0, #0
 8012e1a:	db05      	blt.n	8012e28 <__hi0bits+0x38>
 8012e1c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8012e20:	f103 0301 	add.w	r3, r3, #1
 8012e24:	bf08      	it	eq
 8012e26:	2320      	moveq	r3, #32
 8012e28:	4618      	mov	r0, r3
 8012e2a:	4770      	bx	lr
 8012e2c:	2300      	movs	r3, #0
 8012e2e:	e7e4      	b.n	8012dfa <__hi0bits+0xa>

08012e30 <__lo0bits>:
 8012e30:	6803      	ldr	r3, [r0, #0]
 8012e32:	f013 0207 	ands.w	r2, r3, #7
 8012e36:	4601      	mov	r1, r0
 8012e38:	d00b      	beq.n	8012e52 <__lo0bits+0x22>
 8012e3a:	07da      	lsls	r2, r3, #31
 8012e3c:	d424      	bmi.n	8012e88 <__lo0bits+0x58>
 8012e3e:	0798      	lsls	r0, r3, #30
 8012e40:	bf49      	itett	mi
 8012e42:	085b      	lsrmi	r3, r3, #1
 8012e44:	089b      	lsrpl	r3, r3, #2
 8012e46:	2001      	movmi	r0, #1
 8012e48:	600b      	strmi	r3, [r1, #0]
 8012e4a:	bf5c      	itt	pl
 8012e4c:	600b      	strpl	r3, [r1, #0]
 8012e4e:	2002      	movpl	r0, #2
 8012e50:	4770      	bx	lr
 8012e52:	b298      	uxth	r0, r3
 8012e54:	b9b0      	cbnz	r0, 8012e84 <__lo0bits+0x54>
 8012e56:	0c1b      	lsrs	r3, r3, #16
 8012e58:	2010      	movs	r0, #16
 8012e5a:	f013 0fff 	tst.w	r3, #255	; 0xff
 8012e5e:	bf04      	itt	eq
 8012e60:	0a1b      	lsreq	r3, r3, #8
 8012e62:	3008      	addeq	r0, #8
 8012e64:	071a      	lsls	r2, r3, #28
 8012e66:	bf04      	itt	eq
 8012e68:	091b      	lsreq	r3, r3, #4
 8012e6a:	3004      	addeq	r0, #4
 8012e6c:	079a      	lsls	r2, r3, #30
 8012e6e:	bf04      	itt	eq
 8012e70:	089b      	lsreq	r3, r3, #2
 8012e72:	3002      	addeq	r0, #2
 8012e74:	07da      	lsls	r2, r3, #31
 8012e76:	d403      	bmi.n	8012e80 <__lo0bits+0x50>
 8012e78:	085b      	lsrs	r3, r3, #1
 8012e7a:	f100 0001 	add.w	r0, r0, #1
 8012e7e:	d005      	beq.n	8012e8c <__lo0bits+0x5c>
 8012e80:	600b      	str	r3, [r1, #0]
 8012e82:	4770      	bx	lr
 8012e84:	4610      	mov	r0, r2
 8012e86:	e7e8      	b.n	8012e5a <__lo0bits+0x2a>
 8012e88:	2000      	movs	r0, #0
 8012e8a:	4770      	bx	lr
 8012e8c:	2020      	movs	r0, #32
 8012e8e:	4770      	bx	lr

08012e90 <__i2b>:
 8012e90:	b510      	push	{r4, lr}
 8012e92:	460c      	mov	r4, r1
 8012e94:	2101      	movs	r1, #1
 8012e96:	f7ff feff 	bl	8012c98 <_Balloc>
 8012e9a:	4602      	mov	r2, r0
 8012e9c:	b928      	cbnz	r0, 8012eaa <__i2b+0x1a>
 8012e9e:	4b05      	ldr	r3, [pc, #20]	; (8012eb4 <__i2b+0x24>)
 8012ea0:	4805      	ldr	r0, [pc, #20]	; (8012eb8 <__i2b+0x28>)
 8012ea2:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8012ea6:	f7fd fc81 	bl	80107ac <__assert_func>
 8012eaa:	2301      	movs	r3, #1
 8012eac:	6144      	str	r4, [r0, #20]
 8012eae:	6103      	str	r3, [r0, #16]
 8012eb0:	bd10      	pop	{r4, pc}
 8012eb2:	bf00      	nop
 8012eb4:	0801d2a1 	.word	0x0801d2a1
 8012eb8:	0801d2b2 	.word	0x0801d2b2

08012ebc <__multiply>:
 8012ebc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012ec0:	4614      	mov	r4, r2
 8012ec2:	690a      	ldr	r2, [r1, #16]
 8012ec4:	6923      	ldr	r3, [r4, #16]
 8012ec6:	429a      	cmp	r2, r3
 8012ec8:	bfb8      	it	lt
 8012eca:	460b      	movlt	r3, r1
 8012ecc:	460d      	mov	r5, r1
 8012ece:	bfbc      	itt	lt
 8012ed0:	4625      	movlt	r5, r4
 8012ed2:	461c      	movlt	r4, r3
 8012ed4:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8012ed8:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8012edc:	68ab      	ldr	r3, [r5, #8]
 8012ede:	6869      	ldr	r1, [r5, #4]
 8012ee0:	eb0a 0709 	add.w	r7, sl, r9
 8012ee4:	42bb      	cmp	r3, r7
 8012ee6:	b085      	sub	sp, #20
 8012ee8:	bfb8      	it	lt
 8012eea:	3101      	addlt	r1, #1
 8012eec:	f7ff fed4 	bl	8012c98 <_Balloc>
 8012ef0:	b930      	cbnz	r0, 8012f00 <__multiply+0x44>
 8012ef2:	4602      	mov	r2, r0
 8012ef4:	4b42      	ldr	r3, [pc, #264]	; (8013000 <__multiply+0x144>)
 8012ef6:	4843      	ldr	r0, [pc, #268]	; (8013004 <__multiply+0x148>)
 8012ef8:	f240 115d 	movw	r1, #349	; 0x15d
 8012efc:	f7fd fc56 	bl	80107ac <__assert_func>
 8012f00:	f100 0614 	add.w	r6, r0, #20
 8012f04:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8012f08:	4633      	mov	r3, r6
 8012f0a:	2200      	movs	r2, #0
 8012f0c:	4543      	cmp	r3, r8
 8012f0e:	d31e      	bcc.n	8012f4e <__multiply+0x92>
 8012f10:	f105 0c14 	add.w	ip, r5, #20
 8012f14:	f104 0314 	add.w	r3, r4, #20
 8012f18:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8012f1c:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8012f20:	9202      	str	r2, [sp, #8]
 8012f22:	ebac 0205 	sub.w	r2, ip, r5
 8012f26:	3a15      	subs	r2, #21
 8012f28:	f022 0203 	bic.w	r2, r2, #3
 8012f2c:	3204      	adds	r2, #4
 8012f2e:	f105 0115 	add.w	r1, r5, #21
 8012f32:	458c      	cmp	ip, r1
 8012f34:	bf38      	it	cc
 8012f36:	2204      	movcc	r2, #4
 8012f38:	9201      	str	r2, [sp, #4]
 8012f3a:	9a02      	ldr	r2, [sp, #8]
 8012f3c:	9303      	str	r3, [sp, #12]
 8012f3e:	429a      	cmp	r2, r3
 8012f40:	d808      	bhi.n	8012f54 <__multiply+0x98>
 8012f42:	2f00      	cmp	r7, #0
 8012f44:	dc55      	bgt.n	8012ff2 <__multiply+0x136>
 8012f46:	6107      	str	r7, [r0, #16]
 8012f48:	b005      	add	sp, #20
 8012f4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012f4e:	f843 2b04 	str.w	r2, [r3], #4
 8012f52:	e7db      	b.n	8012f0c <__multiply+0x50>
 8012f54:	f8b3 a000 	ldrh.w	sl, [r3]
 8012f58:	f1ba 0f00 	cmp.w	sl, #0
 8012f5c:	d020      	beq.n	8012fa0 <__multiply+0xe4>
 8012f5e:	f105 0e14 	add.w	lr, r5, #20
 8012f62:	46b1      	mov	r9, r6
 8012f64:	2200      	movs	r2, #0
 8012f66:	f85e 4b04 	ldr.w	r4, [lr], #4
 8012f6a:	f8d9 b000 	ldr.w	fp, [r9]
 8012f6e:	b2a1      	uxth	r1, r4
 8012f70:	fa1f fb8b 	uxth.w	fp, fp
 8012f74:	fb0a b101 	mla	r1, sl, r1, fp
 8012f78:	4411      	add	r1, r2
 8012f7a:	f8d9 2000 	ldr.w	r2, [r9]
 8012f7e:	0c24      	lsrs	r4, r4, #16
 8012f80:	0c12      	lsrs	r2, r2, #16
 8012f82:	fb0a 2404 	mla	r4, sl, r4, r2
 8012f86:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8012f8a:	b289      	uxth	r1, r1
 8012f8c:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8012f90:	45f4      	cmp	ip, lr
 8012f92:	f849 1b04 	str.w	r1, [r9], #4
 8012f96:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8012f9a:	d8e4      	bhi.n	8012f66 <__multiply+0xaa>
 8012f9c:	9901      	ldr	r1, [sp, #4]
 8012f9e:	5072      	str	r2, [r6, r1]
 8012fa0:	9a03      	ldr	r2, [sp, #12]
 8012fa2:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8012fa6:	3304      	adds	r3, #4
 8012fa8:	f1b9 0f00 	cmp.w	r9, #0
 8012fac:	d01f      	beq.n	8012fee <__multiply+0x132>
 8012fae:	6834      	ldr	r4, [r6, #0]
 8012fb0:	f105 0114 	add.w	r1, r5, #20
 8012fb4:	46b6      	mov	lr, r6
 8012fb6:	f04f 0a00 	mov.w	sl, #0
 8012fba:	880a      	ldrh	r2, [r1, #0]
 8012fbc:	f8be b002 	ldrh.w	fp, [lr, #2]
 8012fc0:	fb09 b202 	mla	r2, r9, r2, fp
 8012fc4:	4492      	add	sl, r2
 8012fc6:	b2a4      	uxth	r4, r4
 8012fc8:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8012fcc:	f84e 4b04 	str.w	r4, [lr], #4
 8012fd0:	f851 4b04 	ldr.w	r4, [r1], #4
 8012fd4:	f8be 2000 	ldrh.w	r2, [lr]
 8012fd8:	0c24      	lsrs	r4, r4, #16
 8012fda:	fb09 2404 	mla	r4, r9, r4, r2
 8012fde:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8012fe2:	458c      	cmp	ip, r1
 8012fe4:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8012fe8:	d8e7      	bhi.n	8012fba <__multiply+0xfe>
 8012fea:	9a01      	ldr	r2, [sp, #4]
 8012fec:	50b4      	str	r4, [r6, r2]
 8012fee:	3604      	adds	r6, #4
 8012ff0:	e7a3      	b.n	8012f3a <__multiply+0x7e>
 8012ff2:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8012ff6:	2b00      	cmp	r3, #0
 8012ff8:	d1a5      	bne.n	8012f46 <__multiply+0x8a>
 8012ffa:	3f01      	subs	r7, #1
 8012ffc:	e7a1      	b.n	8012f42 <__multiply+0x86>
 8012ffe:	bf00      	nop
 8013000:	0801d2a1 	.word	0x0801d2a1
 8013004:	0801d2b2 	.word	0x0801d2b2

08013008 <__pow5mult>:
 8013008:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801300c:	4615      	mov	r5, r2
 801300e:	f012 0203 	ands.w	r2, r2, #3
 8013012:	4606      	mov	r6, r0
 8013014:	460f      	mov	r7, r1
 8013016:	d007      	beq.n	8013028 <__pow5mult+0x20>
 8013018:	4c25      	ldr	r4, [pc, #148]	; (80130b0 <__pow5mult+0xa8>)
 801301a:	3a01      	subs	r2, #1
 801301c:	2300      	movs	r3, #0
 801301e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8013022:	f7ff fe9b 	bl	8012d5c <__multadd>
 8013026:	4607      	mov	r7, r0
 8013028:	10ad      	asrs	r5, r5, #2
 801302a:	d03d      	beq.n	80130a8 <__pow5mult+0xa0>
 801302c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 801302e:	b97c      	cbnz	r4, 8013050 <__pow5mult+0x48>
 8013030:	2010      	movs	r0, #16
 8013032:	f7fd fea9 	bl	8010d88 <malloc>
 8013036:	4602      	mov	r2, r0
 8013038:	6270      	str	r0, [r6, #36]	; 0x24
 801303a:	b928      	cbnz	r0, 8013048 <__pow5mult+0x40>
 801303c:	4b1d      	ldr	r3, [pc, #116]	; (80130b4 <__pow5mult+0xac>)
 801303e:	481e      	ldr	r0, [pc, #120]	; (80130b8 <__pow5mult+0xb0>)
 8013040:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8013044:	f7fd fbb2 	bl	80107ac <__assert_func>
 8013048:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801304c:	6004      	str	r4, [r0, #0]
 801304e:	60c4      	str	r4, [r0, #12]
 8013050:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8013054:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8013058:	b94c      	cbnz	r4, 801306e <__pow5mult+0x66>
 801305a:	f240 2171 	movw	r1, #625	; 0x271
 801305e:	4630      	mov	r0, r6
 8013060:	f7ff ff16 	bl	8012e90 <__i2b>
 8013064:	2300      	movs	r3, #0
 8013066:	f8c8 0008 	str.w	r0, [r8, #8]
 801306a:	4604      	mov	r4, r0
 801306c:	6003      	str	r3, [r0, #0]
 801306e:	f04f 0900 	mov.w	r9, #0
 8013072:	07eb      	lsls	r3, r5, #31
 8013074:	d50a      	bpl.n	801308c <__pow5mult+0x84>
 8013076:	4639      	mov	r1, r7
 8013078:	4622      	mov	r2, r4
 801307a:	4630      	mov	r0, r6
 801307c:	f7ff ff1e 	bl	8012ebc <__multiply>
 8013080:	4639      	mov	r1, r7
 8013082:	4680      	mov	r8, r0
 8013084:	4630      	mov	r0, r6
 8013086:	f7ff fe47 	bl	8012d18 <_Bfree>
 801308a:	4647      	mov	r7, r8
 801308c:	106d      	asrs	r5, r5, #1
 801308e:	d00b      	beq.n	80130a8 <__pow5mult+0xa0>
 8013090:	6820      	ldr	r0, [r4, #0]
 8013092:	b938      	cbnz	r0, 80130a4 <__pow5mult+0x9c>
 8013094:	4622      	mov	r2, r4
 8013096:	4621      	mov	r1, r4
 8013098:	4630      	mov	r0, r6
 801309a:	f7ff ff0f 	bl	8012ebc <__multiply>
 801309e:	6020      	str	r0, [r4, #0]
 80130a0:	f8c0 9000 	str.w	r9, [r0]
 80130a4:	4604      	mov	r4, r0
 80130a6:	e7e4      	b.n	8013072 <__pow5mult+0x6a>
 80130a8:	4638      	mov	r0, r7
 80130aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80130ae:	bf00      	nop
 80130b0:	0801d408 	.word	0x0801d408
 80130b4:	0801d22b 	.word	0x0801d22b
 80130b8:	0801d2b2 	.word	0x0801d2b2

080130bc <__lshift>:
 80130bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80130c0:	460c      	mov	r4, r1
 80130c2:	6849      	ldr	r1, [r1, #4]
 80130c4:	6923      	ldr	r3, [r4, #16]
 80130c6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80130ca:	68a3      	ldr	r3, [r4, #8]
 80130cc:	4607      	mov	r7, r0
 80130ce:	4691      	mov	r9, r2
 80130d0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80130d4:	f108 0601 	add.w	r6, r8, #1
 80130d8:	42b3      	cmp	r3, r6
 80130da:	db0b      	blt.n	80130f4 <__lshift+0x38>
 80130dc:	4638      	mov	r0, r7
 80130de:	f7ff fddb 	bl	8012c98 <_Balloc>
 80130e2:	4605      	mov	r5, r0
 80130e4:	b948      	cbnz	r0, 80130fa <__lshift+0x3e>
 80130e6:	4602      	mov	r2, r0
 80130e8:	4b28      	ldr	r3, [pc, #160]	; (801318c <__lshift+0xd0>)
 80130ea:	4829      	ldr	r0, [pc, #164]	; (8013190 <__lshift+0xd4>)
 80130ec:	f240 11d9 	movw	r1, #473	; 0x1d9
 80130f0:	f7fd fb5c 	bl	80107ac <__assert_func>
 80130f4:	3101      	adds	r1, #1
 80130f6:	005b      	lsls	r3, r3, #1
 80130f8:	e7ee      	b.n	80130d8 <__lshift+0x1c>
 80130fa:	2300      	movs	r3, #0
 80130fc:	f100 0114 	add.w	r1, r0, #20
 8013100:	f100 0210 	add.w	r2, r0, #16
 8013104:	4618      	mov	r0, r3
 8013106:	4553      	cmp	r3, sl
 8013108:	db33      	blt.n	8013172 <__lshift+0xb6>
 801310a:	6920      	ldr	r0, [r4, #16]
 801310c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8013110:	f104 0314 	add.w	r3, r4, #20
 8013114:	f019 091f 	ands.w	r9, r9, #31
 8013118:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801311c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8013120:	d02b      	beq.n	801317a <__lshift+0xbe>
 8013122:	f1c9 0e20 	rsb	lr, r9, #32
 8013126:	468a      	mov	sl, r1
 8013128:	2200      	movs	r2, #0
 801312a:	6818      	ldr	r0, [r3, #0]
 801312c:	fa00 f009 	lsl.w	r0, r0, r9
 8013130:	4302      	orrs	r2, r0
 8013132:	f84a 2b04 	str.w	r2, [sl], #4
 8013136:	f853 2b04 	ldr.w	r2, [r3], #4
 801313a:	459c      	cmp	ip, r3
 801313c:	fa22 f20e 	lsr.w	r2, r2, lr
 8013140:	d8f3      	bhi.n	801312a <__lshift+0x6e>
 8013142:	ebac 0304 	sub.w	r3, ip, r4
 8013146:	3b15      	subs	r3, #21
 8013148:	f023 0303 	bic.w	r3, r3, #3
 801314c:	3304      	adds	r3, #4
 801314e:	f104 0015 	add.w	r0, r4, #21
 8013152:	4584      	cmp	ip, r0
 8013154:	bf38      	it	cc
 8013156:	2304      	movcc	r3, #4
 8013158:	50ca      	str	r2, [r1, r3]
 801315a:	b10a      	cbz	r2, 8013160 <__lshift+0xa4>
 801315c:	f108 0602 	add.w	r6, r8, #2
 8013160:	3e01      	subs	r6, #1
 8013162:	4638      	mov	r0, r7
 8013164:	612e      	str	r6, [r5, #16]
 8013166:	4621      	mov	r1, r4
 8013168:	f7ff fdd6 	bl	8012d18 <_Bfree>
 801316c:	4628      	mov	r0, r5
 801316e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013172:	f842 0f04 	str.w	r0, [r2, #4]!
 8013176:	3301      	adds	r3, #1
 8013178:	e7c5      	b.n	8013106 <__lshift+0x4a>
 801317a:	3904      	subs	r1, #4
 801317c:	f853 2b04 	ldr.w	r2, [r3], #4
 8013180:	f841 2f04 	str.w	r2, [r1, #4]!
 8013184:	459c      	cmp	ip, r3
 8013186:	d8f9      	bhi.n	801317c <__lshift+0xc0>
 8013188:	e7ea      	b.n	8013160 <__lshift+0xa4>
 801318a:	bf00      	nop
 801318c:	0801d2a1 	.word	0x0801d2a1
 8013190:	0801d2b2 	.word	0x0801d2b2

08013194 <__mcmp>:
 8013194:	b530      	push	{r4, r5, lr}
 8013196:	6902      	ldr	r2, [r0, #16]
 8013198:	690c      	ldr	r4, [r1, #16]
 801319a:	1b12      	subs	r2, r2, r4
 801319c:	d10e      	bne.n	80131bc <__mcmp+0x28>
 801319e:	f100 0314 	add.w	r3, r0, #20
 80131a2:	3114      	adds	r1, #20
 80131a4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80131a8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80131ac:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80131b0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80131b4:	42a5      	cmp	r5, r4
 80131b6:	d003      	beq.n	80131c0 <__mcmp+0x2c>
 80131b8:	d305      	bcc.n	80131c6 <__mcmp+0x32>
 80131ba:	2201      	movs	r2, #1
 80131bc:	4610      	mov	r0, r2
 80131be:	bd30      	pop	{r4, r5, pc}
 80131c0:	4283      	cmp	r3, r0
 80131c2:	d3f3      	bcc.n	80131ac <__mcmp+0x18>
 80131c4:	e7fa      	b.n	80131bc <__mcmp+0x28>
 80131c6:	f04f 32ff 	mov.w	r2, #4294967295
 80131ca:	e7f7      	b.n	80131bc <__mcmp+0x28>

080131cc <__mdiff>:
 80131cc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80131d0:	460c      	mov	r4, r1
 80131d2:	4606      	mov	r6, r0
 80131d4:	4611      	mov	r1, r2
 80131d6:	4620      	mov	r0, r4
 80131d8:	4617      	mov	r7, r2
 80131da:	f7ff ffdb 	bl	8013194 <__mcmp>
 80131de:	1e05      	subs	r5, r0, #0
 80131e0:	d110      	bne.n	8013204 <__mdiff+0x38>
 80131e2:	4629      	mov	r1, r5
 80131e4:	4630      	mov	r0, r6
 80131e6:	f7ff fd57 	bl	8012c98 <_Balloc>
 80131ea:	b930      	cbnz	r0, 80131fa <__mdiff+0x2e>
 80131ec:	4b39      	ldr	r3, [pc, #228]	; (80132d4 <__mdiff+0x108>)
 80131ee:	4602      	mov	r2, r0
 80131f0:	f240 2132 	movw	r1, #562	; 0x232
 80131f4:	4838      	ldr	r0, [pc, #224]	; (80132d8 <__mdiff+0x10c>)
 80131f6:	f7fd fad9 	bl	80107ac <__assert_func>
 80131fa:	2301      	movs	r3, #1
 80131fc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8013200:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013204:	bfa4      	itt	ge
 8013206:	463b      	movge	r3, r7
 8013208:	4627      	movge	r7, r4
 801320a:	4630      	mov	r0, r6
 801320c:	6879      	ldr	r1, [r7, #4]
 801320e:	bfa6      	itte	ge
 8013210:	461c      	movge	r4, r3
 8013212:	2500      	movge	r5, #0
 8013214:	2501      	movlt	r5, #1
 8013216:	f7ff fd3f 	bl	8012c98 <_Balloc>
 801321a:	b920      	cbnz	r0, 8013226 <__mdiff+0x5a>
 801321c:	4b2d      	ldr	r3, [pc, #180]	; (80132d4 <__mdiff+0x108>)
 801321e:	4602      	mov	r2, r0
 8013220:	f44f 7110 	mov.w	r1, #576	; 0x240
 8013224:	e7e6      	b.n	80131f4 <__mdiff+0x28>
 8013226:	693e      	ldr	r6, [r7, #16]
 8013228:	60c5      	str	r5, [r0, #12]
 801322a:	6925      	ldr	r5, [r4, #16]
 801322c:	f107 0114 	add.w	r1, r7, #20
 8013230:	f104 0914 	add.w	r9, r4, #20
 8013234:	f100 0e14 	add.w	lr, r0, #20
 8013238:	f107 0210 	add.w	r2, r7, #16
 801323c:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8013240:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8013244:	46f2      	mov	sl, lr
 8013246:	2700      	movs	r7, #0
 8013248:	f859 3b04 	ldr.w	r3, [r9], #4
 801324c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8013250:	fa1f f883 	uxth.w	r8, r3
 8013254:	fa17 f78b 	uxtah	r7, r7, fp
 8013258:	0c1b      	lsrs	r3, r3, #16
 801325a:	eba7 0808 	sub.w	r8, r7, r8
 801325e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8013262:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8013266:	fa1f f888 	uxth.w	r8, r8
 801326a:	141f      	asrs	r7, r3, #16
 801326c:	454d      	cmp	r5, r9
 801326e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8013272:	f84a 3b04 	str.w	r3, [sl], #4
 8013276:	d8e7      	bhi.n	8013248 <__mdiff+0x7c>
 8013278:	1b2b      	subs	r3, r5, r4
 801327a:	3b15      	subs	r3, #21
 801327c:	f023 0303 	bic.w	r3, r3, #3
 8013280:	3304      	adds	r3, #4
 8013282:	3415      	adds	r4, #21
 8013284:	42a5      	cmp	r5, r4
 8013286:	bf38      	it	cc
 8013288:	2304      	movcc	r3, #4
 801328a:	4419      	add	r1, r3
 801328c:	4473      	add	r3, lr
 801328e:	469e      	mov	lr, r3
 8013290:	460d      	mov	r5, r1
 8013292:	4565      	cmp	r5, ip
 8013294:	d30e      	bcc.n	80132b4 <__mdiff+0xe8>
 8013296:	f10c 0203 	add.w	r2, ip, #3
 801329a:	1a52      	subs	r2, r2, r1
 801329c:	f022 0203 	bic.w	r2, r2, #3
 80132a0:	3903      	subs	r1, #3
 80132a2:	458c      	cmp	ip, r1
 80132a4:	bf38      	it	cc
 80132a6:	2200      	movcc	r2, #0
 80132a8:	441a      	add	r2, r3
 80132aa:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80132ae:	b17b      	cbz	r3, 80132d0 <__mdiff+0x104>
 80132b0:	6106      	str	r6, [r0, #16]
 80132b2:	e7a5      	b.n	8013200 <__mdiff+0x34>
 80132b4:	f855 8b04 	ldr.w	r8, [r5], #4
 80132b8:	fa17 f488 	uxtah	r4, r7, r8
 80132bc:	1422      	asrs	r2, r4, #16
 80132be:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 80132c2:	b2a4      	uxth	r4, r4
 80132c4:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80132c8:	f84e 4b04 	str.w	r4, [lr], #4
 80132cc:	1417      	asrs	r7, r2, #16
 80132ce:	e7e0      	b.n	8013292 <__mdiff+0xc6>
 80132d0:	3e01      	subs	r6, #1
 80132d2:	e7ea      	b.n	80132aa <__mdiff+0xde>
 80132d4:	0801d2a1 	.word	0x0801d2a1
 80132d8:	0801d2b2 	.word	0x0801d2b2

080132dc <__d2b>:
 80132dc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80132e0:	4689      	mov	r9, r1
 80132e2:	2101      	movs	r1, #1
 80132e4:	ec57 6b10 	vmov	r6, r7, d0
 80132e8:	4690      	mov	r8, r2
 80132ea:	f7ff fcd5 	bl	8012c98 <_Balloc>
 80132ee:	4604      	mov	r4, r0
 80132f0:	b930      	cbnz	r0, 8013300 <__d2b+0x24>
 80132f2:	4602      	mov	r2, r0
 80132f4:	4b25      	ldr	r3, [pc, #148]	; (801338c <__d2b+0xb0>)
 80132f6:	4826      	ldr	r0, [pc, #152]	; (8013390 <__d2b+0xb4>)
 80132f8:	f240 310a 	movw	r1, #778	; 0x30a
 80132fc:	f7fd fa56 	bl	80107ac <__assert_func>
 8013300:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8013304:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8013308:	bb35      	cbnz	r5, 8013358 <__d2b+0x7c>
 801330a:	2e00      	cmp	r6, #0
 801330c:	9301      	str	r3, [sp, #4]
 801330e:	d028      	beq.n	8013362 <__d2b+0x86>
 8013310:	4668      	mov	r0, sp
 8013312:	9600      	str	r6, [sp, #0]
 8013314:	f7ff fd8c 	bl	8012e30 <__lo0bits>
 8013318:	9900      	ldr	r1, [sp, #0]
 801331a:	b300      	cbz	r0, 801335e <__d2b+0x82>
 801331c:	9a01      	ldr	r2, [sp, #4]
 801331e:	f1c0 0320 	rsb	r3, r0, #32
 8013322:	fa02 f303 	lsl.w	r3, r2, r3
 8013326:	430b      	orrs	r3, r1
 8013328:	40c2      	lsrs	r2, r0
 801332a:	6163      	str	r3, [r4, #20]
 801332c:	9201      	str	r2, [sp, #4]
 801332e:	9b01      	ldr	r3, [sp, #4]
 8013330:	61a3      	str	r3, [r4, #24]
 8013332:	2b00      	cmp	r3, #0
 8013334:	bf14      	ite	ne
 8013336:	2202      	movne	r2, #2
 8013338:	2201      	moveq	r2, #1
 801333a:	6122      	str	r2, [r4, #16]
 801333c:	b1d5      	cbz	r5, 8013374 <__d2b+0x98>
 801333e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8013342:	4405      	add	r5, r0
 8013344:	f8c9 5000 	str.w	r5, [r9]
 8013348:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 801334c:	f8c8 0000 	str.w	r0, [r8]
 8013350:	4620      	mov	r0, r4
 8013352:	b003      	add	sp, #12
 8013354:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013358:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801335c:	e7d5      	b.n	801330a <__d2b+0x2e>
 801335e:	6161      	str	r1, [r4, #20]
 8013360:	e7e5      	b.n	801332e <__d2b+0x52>
 8013362:	a801      	add	r0, sp, #4
 8013364:	f7ff fd64 	bl	8012e30 <__lo0bits>
 8013368:	9b01      	ldr	r3, [sp, #4]
 801336a:	6163      	str	r3, [r4, #20]
 801336c:	2201      	movs	r2, #1
 801336e:	6122      	str	r2, [r4, #16]
 8013370:	3020      	adds	r0, #32
 8013372:	e7e3      	b.n	801333c <__d2b+0x60>
 8013374:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8013378:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 801337c:	f8c9 0000 	str.w	r0, [r9]
 8013380:	6918      	ldr	r0, [r3, #16]
 8013382:	f7ff fd35 	bl	8012df0 <__hi0bits>
 8013386:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801338a:	e7df      	b.n	801334c <__d2b+0x70>
 801338c:	0801d2a1 	.word	0x0801d2a1
 8013390:	0801d2b2 	.word	0x0801d2b2

08013394 <_realloc_r>:
 8013394:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013396:	4607      	mov	r7, r0
 8013398:	4614      	mov	r4, r2
 801339a:	460e      	mov	r6, r1
 801339c:	b921      	cbnz	r1, 80133a8 <_realloc_r+0x14>
 801339e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80133a2:	4611      	mov	r1, r2
 80133a4:	f7fd bd90 	b.w	8010ec8 <_malloc_r>
 80133a8:	b922      	cbnz	r2, 80133b4 <_realloc_r+0x20>
 80133aa:	f7fd fd3d 	bl	8010e28 <_free_r>
 80133ae:	4625      	mov	r5, r4
 80133b0:	4628      	mov	r0, r5
 80133b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80133b4:	f000 f994 	bl	80136e0 <_malloc_usable_size_r>
 80133b8:	42a0      	cmp	r0, r4
 80133ba:	d20f      	bcs.n	80133dc <_realloc_r+0x48>
 80133bc:	4621      	mov	r1, r4
 80133be:	4638      	mov	r0, r7
 80133c0:	f7fd fd82 	bl	8010ec8 <_malloc_r>
 80133c4:	4605      	mov	r5, r0
 80133c6:	2800      	cmp	r0, #0
 80133c8:	d0f2      	beq.n	80133b0 <_realloc_r+0x1c>
 80133ca:	4631      	mov	r1, r6
 80133cc:	4622      	mov	r2, r4
 80133ce:	f7fd fceb 	bl	8010da8 <memcpy>
 80133d2:	4631      	mov	r1, r6
 80133d4:	4638      	mov	r0, r7
 80133d6:	f7fd fd27 	bl	8010e28 <_free_r>
 80133da:	e7e9      	b.n	80133b0 <_realloc_r+0x1c>
 80133dc:	4635      	mov	r5, r6
 80133de:	e7e7      	b.n	80133b0 <_realloc_r+0x1c>

080133e0 <__ssputs_r>:
 80133e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80133e4:	688e      	ldr	r6, [r1, #8]
 80133e6:	429e      	cmp	r6, r3
 80133e8:	4682      	mov	sl, r0
 80133ea:	460c      	mov	r4, r1
 80133ec:	4690      	mov	r8, r2
 80133ee:	461f      	mov	r7, r3
 80133f0:	d838      	bhi.n	8013464 <__ssputs_r+0x84>
 80133f2:	898a      	ldrh	r2, [r1, #12]
 80133f4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80133f8:	d032      	beq.n	8013460 <__ssputs_r+0x80>
 80133fa:	6825      	ldr	r5, [r4, #0]
 80133fc:	6909      	ldr	r1, [r1, #16]
 80133fe:	eba5 0901 	sub.w	r9, r5, r1
 8013402:	6965      	ldr	r5, [r4, #20]
 8013404:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8013408:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801340c:	3301      	adds	r3, #1
 801340e:	444b      	add	r3, r9
 8013410:	106d      	asrs	r5, r5, #1
 8013412:	429d      	cmp	r5, r3
 8013414:	bf38      	it	cc
 8013416:	461d      	movcc	r5, r3
 8013418:	0553      	lsls	r3, r2, #21
 801341a:	d531      	bpl.n	8013480 <__ssputs_r+0xa0>
 801341c:	4629      	mov	r1, r5
 801341e:	f7fd fd53 	bl	8010ec8 <_malloc_r>
 8013422:	4606      	mov	r6, r0
 8013424:	b950      	cbnz	r0, 801343c <__ssputs_r+0x5c>
 8013426:	230c      	movs	r3, #12
 8013428:	f8ca 3000 	str.w	r3, [sl]
 801342c:	89a3      	ldrh	r3, [r4, #12]
 801342e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013432:	81a3      	strh	r3, [r4, #12]
 8013434:	f04f 30ff 	mov.w	r0, #4294967295
 8013438:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801343c:	6921      	ldr	r1, [r4, #16]
 801343e:	464a      	mov	r2, r9
 8013440:	f7fd fcb2 	bl	8010da8 <memcpy>
 8013444:	89a3      	ldrh	r3, [r4, #12]
 8013446:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801344a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801344e:	81a3      	strh	r3, [r4, #12]
 8013450:	6126      	str	r6, [r4, #16]
 8013452:	6165      	str	r5, [r4, #20]
 8013454:	444e      	add	r6, r9
 8013456:	eba5 0509 	sub.w	r5, r5, r9
 801345a:	6026      	str	r6, [r4, #0]
 801345c:	60a5      	str	r5, [r4, #8]
 801345e:	463e      	mov	r6, r7
 8013460:	42be      	cmp	r6, r7
 8013462:	d900      	bls.n	8013466 <__ssputs_r+0x86>
 8013464:	463e      	mov	r6, r7
 8013466:	4632      	mov	r2, r6
 8013468:	6820      	ldr	r0, [r4, #0]
 801346a:	4641      	mov	r1, r8
 801346c:	f7fd fcaa 	bl	8010dc4 <memmove>
 8013470:	68a3      	ldr	r3, [r4, #8]
 8013472:	6822      	ldr	r2, [r4, #0]
 8013474:	1b9b      	subs	r3, r3, r6
 8013476:	4432      	add	r2, r6
 8013478:	60a3      	str	r3, [r4, #8]
 801347a:	6022      	str	r2, [r4, #0]
 801347c:	2000      	movs	r0, #0
 801347e:	e7db      	b.n	8013438 <__ssputs_r+0x58>
 8013480:	462a      	mov	r2, r5
 8013482:	f7ff ff87 	bl	8013394 <_realloc_r>
 8013486:	4606      	mov	r6, r0
 8013488:	2800      	cmp	r0, #0
 801348a:	d1e1      	bne.n	8013450 <__ssputs_r+0x70>
 801348c:	6921      	ldr	r1, [r4, #16]
 801348e:	4650      	mov	r0, sl
 8013490:	f7fd fcca 	bl	8010e28 <_free_r>
 8013494:	e7c7      	b.n	8013426 <__ssputs_r+0x46>
	...

08013498 <_svfiprintf_r>:
 8013498:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801349c:	4698      	mov	r8, r3
 801349e:	898b      	ldrh	r3, [r1, #12]
 80134a0:	061b      	lsls	r3, r3, #24
 80134a2:	b09d      	sub	sp, #116	; 0x74
 80134a4:	4607      	mov	r7, r0
 80134a6:	460d      	mov	r5, r1
 80134a8:	4614      	mov	r4, r2
 80134aa:	d50e      	bpl.n	80134ca <_svfiprintf_r+0x32>
 80134ac:	690b      	ldr	r3, [r1, #16]
 80134ae:	b963      	cbnz	r3, 80134ca <_svfiprintf_r+0x32>
 80134b0:	2140      	movs	r1, #64	; 0x40
 80134b2:	f7fd fd09 	bl	8010ec8 <_malloc_r>
 80134b6:	6028      	str	r0, [r5, #0]
 80134b8:	6128      	str	r0, [r5, #16]
 80134ba:	b920      	cbnz	r0, 80134c6 <_svfiprintf_r+0x2e>
 80134bc:	230c      	movs	r3, #12
 80134be:	603b      	str	r3, [r7, #0]
 80134c0:	f04f 30ff 	mov.w	r0, #4294967295
 80134c4:	e0d1      	b.n	801366a <_svfiprintf_r+0x1d2>
 80134c6:	2340      	movs	r3, #64	; 0x40
 80134c8:	616b      	str	r3, [r5, #20]
 80134ca:	2300      	movs	r3, #0
 80134cc:	9309      	str	r3, [sp, #36]	; 0x24
 80134ce:	2320      	movs	r3, #32
 80134d0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80134d4:	f8cd 800c 	str.w	r8, [sp, #12]
 80134d8:	2330      	movs	r3, #48	; 0x30
 80134da:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8013684 <_svfiprintf_r+0x1ec>
 80134de:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80134e2:	f04f 0901 	mov.w	r9, #1
 80134e6:	4623      	mov	r3, r4
 80134e8:	469a      	mov	sl, r3
 80134ea:	f813 2b01 	ldrb.w	r2, [r3], #1
 80134ee:	b10a      	cbz	r2, 80134f4 <_svfiprintf_r+0x5c>
 80134f0:	2a25      	cmp	r2, #37	; 0x25
 80134f2:	d1f9      	bne.n	80134e8 <_svfiprintf_r+0x50>
 80134f4:	ebba 0b04 	subs.w	fp, sl, r4
 80134f8:	d00b      	beq.n	8013512 <_svfiprintf_r+0x7a>
 80134fa:	465b      	mov	r3, fp
 80134fc:	4622      	mov	r2, r4
 80134fe:	4629      	mov	r1, r5
 8013500:	4638      	mov	r0, r7
 8013502:	f7ff ff6d 	bl	80133e0 <__ssputs_r>
 8013506:	3001      	adds	r0, #1
 8013508:	f000 80aa 	beq.w	8013660 <_svfiprintf_r+0x1c8>
 801350c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801350e:	445a      	add	r2, fp
 8013510:	9209      	str	r2, [sp, #36]	; 0x24
 8013512:	f89a 3000 	ldrb.w	r3, [sl]
 8013516:	2b00      	cmp	r3, #0
 8013518:	f000 80a2 	beq.w	8013660 <_svfiprintf_r+0x1c8>
 801351c:	2300      	movs	r3, #0
 801351e:	f04f 32ff 	mov.w	r2, #4294967295
 8013522:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8013526:	f10a 0a01 	add.w	sl, sl, #1
 801352a:	9304      	str	r3, [sp, #16]
 801352c:	9307      	str	r3, [sp, #28]
 801352e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8013532:	931a      	str	r3, [sp, #104]	; 0x68
 8013534:	4654      	mov	r4, sl
 8013536:	2205      	movs	r2, #5
 8013538:	f814 1b01 	ldrb.w	r1, [r4], #1
 801353c:	4851      	ldr	r0, [pc, #324]	; (8013684 <_svfiprintf_r+0x1ec>)
 801353e:	f7ec fe4f 	bl	80001e0 <memchr>
 8013542:	9a04      	ldr	r2, [sp, #16]
 8013544:	b9d8      	cbnz	r0, 801357e <_svfiprintf_r+0xe6>
 8013546:	06d0      	lsls	r0, r2, #27
 8013548:	bf44      	itt	mi
 801354a:	2320      	movmi	r3, #32
 801354c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8013550:	0711      	lsls	r1, r2, #28
 8013552:	bf44      	itt	mi
 8013554:	232b      	movmi	r3, #43	; 0x2b
 8013556:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801355a:	f89a 3000 	ldrb.w	r3, [sl]
 801355e:	2b2a      	cmp	r3, #42	; 0x2a
 8013560:	d015      	beq.n	801358e <_svfiprintf_r+0xf6>
 8013562:	9a07      	ldr	r2, [sp, #28]
 8013564:	4654      	mov	r4, sl
 8013566:	2000      	movs	r0, #0
 8013568:	f04f 0c0a 	mov.w	ip, #10
 801356c:	4621      	mov	r1, r4
 801356e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8013572:	3b30      	subs	r3, #48	; 0x30
 8013574:	2b09      	cmp	r3, #9
 8013576:	d94e      	bls.n	8013616 <_svfiprintf_r+0x17e>
 8013578:	b1b0      	cbz	r0, 80135a8 <_svfiprintf_r+0x110>
 801357a:	9207      	str	r2, [sp, #28]
 801357c:	e014      	b.n	80135a8 <_svfiprintf_r+0x110>
 801357e:	eba0 0308 	sub.w	r3, r0, r8
 8013582:	fa09 f303 	lsl.w	r3, r9, r3
 8013586:	4313      	orrs	r3, r2
 8013588:	9304      	str	r3, [sp, #16]
 801358a:	46a2      	mov	sl, r4
 801358c:	e7d2      	b.n	8013534 <_svfiprintf_r+0x9c>
 801358e:	9b03      	ldr	r3, [sp, #12]
 8013590:	1d19      	adds	r1, r3, #4
 8013592:	681b      	ldr	r3, [r3, #0]
 8013594:	9103      	str	r1, [sp, #12]
 8013596:	2b00      	cmp	r3, #0
 8013598:	bfbb      	ittet	lt
 801359a:	425b      	neglt	r3, r3
 801359c:	f042 0202 	orrlt.w	r2, r2, #2
 80135a0:	9307      	strge	r3, [sp, #28]
 80135a2:	9307      	strlt	r3, [sp, #28]
 80135a4:	bfb8      	it	lt
 80135a6:	9204      	strlt	r2, [sp, #16]
 80135a8:	7823      	ldrb	r3, [r4, #0]
 80135aa:	2b2e      	cmp	r3, #46	; 0x2e
 80135ac:	d10c      	bne.n	80135c8 <_svfiprintf_r+0x130>
 80135ae:	7863      	ldrb	r3, [r4, #1]
 80135b0:	2b2a      	cmp	r3, #42	; 0x2a
 80135b2:	d135      	bne.n	8013620 <_svfiprintf_r+0x188>
 80135b4:	9b03      	ldr	r3, [sp, #12]
 80135b6:	1d1a      	adds	r2, r3, #4
 80135b8:	681b      	ldr	r3, [r3, #0]
 80135ba:	9203      	str	r2, [sp, #12]
 80135bc:	2b00      	cmp	r3, #0
 80135be:	bfb8      	it	lt
 80135c0:	f04f 33ff 	movlt.w	r3, #4294967295
 80135c4:	3402      	adds	r4, #2
 80135c6:	9305      	str	r3, [sp, #20]
 80135c8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8013694 <_svfiprintf_r+0x1fc>
 80135cc:	7821      	ldrb	r1, [r4, #0]
 80135ce:	2203      	movs	r2, #3
 80135d0:	4650      	mov	r0, sl
 80135d2:	f7ec fe05 	bl	80001e0 <memchr>
 80135d6:	b140      	cbz	r0, 80135ea <_svfiprintf_r+0x152>
 80135d8:	2340      	movs	r3, #64	; 0x40
 80135da:	eba0 000a 	sub.w	r0, r0, sl
 80135de:	fa03 f000 	lsl.w	r0, r3, r0
 80135e2:	9b04      	ldr	r3, [sp, #16]
 80135e4:	4303      	orrs	r3, r0
 80135e6:	3401      	adds	r4, #1
 80135e8:	9304      	str	r3, [sp, #16]
 80135ea:	f814 1b01 	ldrb.w	r1, [r4], #1
 80135ee:	4826      	ldr	r0, [pc, #152]	; (8013688 <_svfiprintf_r+0x1f0>)
 80135f0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80135f4:	2206      	movs	r2, #6
 80135f6:	f7ec fdf3 	bl	80001e0 <memchr>
 80135fa:	2800      	cmp	r0, #0
 80135fc:	d038      	beq.n	8013670 <_svfiprintf_r+0x1d8>
 80135fe:	4b23      	ldr	r3, [pc, #140]	; (801368c <_svfiprintf_r+0x1f4>)
 8013600:	bb1b      	cbnz	r3, 801364a <_svfiprintf_r+0x1b2>
 8013602:	9b03      	ldr	r3, [sp, #12]
 8013604:	3307      	adds	r3, #7
 8013606:	f023 0307 	bic.w	r3, r3, #7
 801360a:	3308      	adds	r3, #8
 801360c:	9303      	str	r3, [sp, #12]
 801360e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013610:	4433      	add	r3, r6
 8013612:	9309      	str	r3, [sp, #36]	; 0x24
 8013614:	e767      	b.n	80134e6 <_svfiprintf_r+0x4e>
 8013616:	fb0c 3202 	mla	r2, ip, r2, r3
 801361a:	460c      	mov	r4, r1
 801361c:	2001      	movs	r0, #1
 801361e:	e7a5      	b.n	801356c <_svfiprintf_r+0xd4>
 8013620:	2300      	movs	r3, #0
 8013622:	3401      	adds	r4, #1
 8013624:	9305      	str	r3, [sp, #20]
 8013626:	4619      	mov	r1, r3
 8013628:	f04f 0c0a 	mov.w	ip, #10
 801362c:	4620      	mov	r0, r4
 801362e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8013632:	3a30      	subs	r2, #48	; 0x30
 8013634:	2a09      	cmp	r2, #9
 8013636:	d903      	bls.n	8013640 <_svfiprintf_r+0x1a8>
 8013638:	2b00      	cmp	r3, #0
 801363a:	d0c5      	beq.n	80135c8 <_svfiprintf_r+0x130>
 801363c:	9105      	str	r1, [sp, #20]
 801363e:	e7c3      	b.n	80135c8 <_svfiprintf_r+0x130>
 8013640:	fb0c 2101 	mla	r1, ip, r1, r2
 8013644:	4604      	mov	r4, r0
 8013646:	2301      	movs	r3, #1
 8013648:	e7f0      	b.n	801362c <_svfiprintf_r+0x194>
 801364a:	ab03      	add	r3, sp, #12
 801364c:	9300      	str	r3, [sp, #0]
 801364e:	462a      	mov	r2, r5
 8013650:	4b0f      	ldr	r3, [pc, #60]	; (8013690 <_svfiprintf_r+0x1f8>)
 8013652:	a904      	add	r1, sp, #16
 8013654:	4638      	mov	r0, r7
 8013656:	f7fd fe8b 	bl	8011370 <_printf_float>
 801365a:	1c42      	adds	r2, r0, #1
 801365c:	4606      	mov	r6, r0
 801365e:	d1d6      	bne.n	801360e <_svfiprintf_r+0x176>
 8013660:	89ab      	ldrh	r3, [r5, #12]
 8013662:	065b      	lsls	r3, r3, #25
 8013664:	f53f af2c 	bmi.w	80134c0 <_svfiprintf_r+0x28>
 8013668:	9809      	ldr	r0, [sp, #36]	; 0x24
 801366a:	b01d      	add	sp, #116	; 0x74
 801366c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013670:	ab03      	add	r3, sp, #12
 8013672:	9300      	str	r3, [sp, #0]
 8013674:	462a      	mov	r2, r5
 8013676:	4b06      	ldr	r3, [pc, #24]	; (8013690 <_svfiprintf_r+0x1f8>)
 8013678:	a904      	add	r1, sp, #16
 801367a:	4638      	mov	r0, r7
 801367c:	f7fe f91c 	bl	80118b8 <_printf_i>
 8013680:	e7eb      	b.n	801365a <_svfiprintf_r+0x1c2>
 8013682:	bf00      	nop
 8013684:	0801d0d8 	.word	0x0801d0d8
 8013688:	0801d0e2 	.word	0x0801d0e2
 801368c:	08011371 	.word	0x08011371
 8013690:	080133e1 	.word	0x080133e1
 8013694:	0801d0de 	.word	0x0801d0de

08013698 <_read_r>:
 8013698:	b538      	push	{r3, r4, r5, lr}
 801369a:	4d07      	ldr	r5, [pc, #28]	; (80136b8 <_read_r+0x20>)
 801369c:	4604      	mov	r4, r0
 801369e:	4608      	mov	r0, r1
 80136a0:	4611      	mov	r1, r2
 80136a2:	2200      	movs	r2, #0
 80136a4:	602a      	str	r2, [r5, #0]
 80136a6:	461a      	mov	r2, r3
 80136a8:	f7ee fda8 	bl	80021fc <_read>
 80136ac:	1c43      	adds	r3, r0, #1
 80136ae:	d102      	bne.n	80136b6 <_read_r+0x1e>
 80136b0:	682b      	ldr	r3, [r5, #0]
 80136b2:	b103      	cbz	r3, 80136b6 <_read_r+0x1e>
 80136b4:	6023      	str	r3, [r4, #0]
 80136b6:	bd38      	pop	{r3, r4, r5, pc}
 80136b8:	20005488 	.word	0x20005488

080136bc <__ascii_mbtowc>:
 80136bc:	b082      	sub	sp, #8
 80136be:	b901      	cbnz	r1, 80136c2 <__ascii_mbtowc+0x6>
 80136c0:	a901      	add	r1, sp, #4
 80136c2:	b142      	cbz	r2, 80136d6 <__ascii_mbtowc+0x1a>
 80136c4:	b14b      	cbz	r3, 80136da <__ascii_mbtowc+0x1e>
 80136c6:	7813      	ldrb	r3, [r2, #0]
 80136c8:	600b      	str	r3, [r1, #0]
 80136ca:	7812      	ldrb	r2, [r2, #0]
 80136cc:	1e10      	subs	r0, r2, #0
 80136ce:	bf18      	it	ne
 80136d0:	2001      	movne	r0, #1
 80136d2:	b002      	add	sp, #8
 80136d4:	4770      	bx	lr
 80136d6:	4610      	mov	r0, r2
 80136d8:	e7fb      	b.n	80136d2 <__ascii_mbtowc+0x16>
 80136da:	f06f 0001 	mvn.w	r0, #1
 80136de:	e7f8      	b.n	80136d2 <__ascii_mbtowc+0x16>

080136e0 <_malloc_usable_size_r>:
 80136e0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80136e4:	1f18      	subs	r0, r3, #4
 80136e6:	2b00      	cmp	r3, #0
 80136e8:	bfbc      	itt	lt
 80136ea:	580b      	ldrlt	r3, [r1, r0]
 80136ec:	18c0      	addlt	r0, r0, r3
 80136ee:	4770      	bx	lr

080136f0 <__ascii_wctomb>:
 80136f0:	b149      	cbz	r1, 8013706 <__ascii_wctomb+0x16>
 80136f2:	2aff      	cmp	r2, #255	; 0xff
 80136f4:	bf85      	ittet	hi
 80136f6:	238a      	movhi	r3, #138	; 0x8a
 80136f8:	6003      	strhi	r3, [r0, #0]
 80136fa:	700a      	strbls	r2, [r1, #0]
 80136fc:	f04f 30ff 	movhi.w	r0, #4294967295
 8013700:	bf98      	it	ls
 8013702:	2001      	movls	r0, #1
 8013704:	4770      	bx	lr
 8013706:	4608      	mov	r0, r1
 8013708:	4770      	bx	lr
	...

0801370c <_init>:
 801370c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801370e:	bf00      	nop
 8013710:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013712:	bc08      	pop	{r3}
 8013714:	469e      	mov	lr, r3
 8013716:	4770      	bx	lr

08013718 <_fini>:
 8013718:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801371a:	bf00      	nop
 801371c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801371e:	bc08      	pop	{r3}
 8013720:	469e      	mov	lr, r3
 8013722:	4770      	bx	lr
